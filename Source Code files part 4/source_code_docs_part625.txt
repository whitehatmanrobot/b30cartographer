filter">A filter to further narrow down the selection of data objects when there is no one-to-one mapping between the mapped type and the data source–specific type. The format of the filter is identical to the format of the <see cref="T:System.Data.DataColumn" /> expression.</param>
      <param name="ordering">A string of comma-delimited data objects representing the sort ordering of the returned data objects.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The required restriction is missing.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.SelectObjects(System.String,System.Object[],System.String[],System.String,System.String,System.Boolean)">
      <summary>Returns a collection of data objects for the specified type from the object store, filtered by the specified restrictions, properties, and filter, and sorted according to the specified ordering.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection" /> containing the data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="properties">Specifies the property values of the requested data objects. The current version of DDEX does not support properties.</param>
      <param name="filter">A filter to further narrow down the selection of data objects when there is no one-to-one mapping between the mapped type and the data source–specific type. The format of the filter is identical to the format of the <see cref="T:System.Data.DataColumn" /> expression.</param>
      <param name="ordering">A string of comma-delimited data objects representing the sort ordering of the returned data objects.</param>
      <param name="refresh">A Boolean value indicating whether to update the list of required restrictions and properties for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The required restriction is missing.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectSupportModel">
      <summary>Represents the model that describes data object support.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectSupportModel.MappedTypes">
      <summary>Gets a collection of name/value pairs containing the mapped type names and their corresponding mapped type objects from the object store.</summary>
      <returns>A collection of name/value pairs containing the mapped type names and their corresponding <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectType" /> objects from the object store.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectSupportModel.Types">
      <summary>Retrieves a collection of name/value pairs containing the data source–specific type names and their corresponding type objects from the object store.</summary>
      <returns>A collection of name/value pairs containing the data source–specific type names and their corresponding <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectType" /> objects from the object store.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectType">
      <summary>Represents a data object support type that is data source specific.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectType.Identifier">
      <summary>Gets a list of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectTypeMember" /> objects that identify the current type.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectTypeMember" /> objects that identify the current type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectType.Name">
      <summary>Gets the name of the current type.</summary>
      <returns>The name of the current type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectType.NameProperty">
      <summary>Gets the name property as part of the <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectTypeMember" /> object.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectTypeMember" /> object containing the name property.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectType.PreferredOrdering">
      <summary>Gets the preferred ordering associated with the current type.</summary>
      <returns>The preferred ordering associated with the current type as a string of comma-delimited data object values.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectType.Properties">
      <summary>Gets a collection of name/value pairs representing the property names and their corresponding <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectTypeMember" /> objects.</summary>
      <returns>A collection of name/value pairs containing the property names and the corresponding <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectTypeMember" /> objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectType.Services">
      <summary>Gets a list of services for the current type as a collection of name/value pairs containing the service names and the corresponding <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectService" /> objects.</summary>
      <returns>A list of services for the current type as a collection of name/value pairs containing the service names and the corresponding <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectService" /> objects.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectTypeMember">
      <summary>Represents a member of a data object support type.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectTypeMember.Name">
      <summary>Gets the name of the data object type.</summary>
      <returns>The name of the data object type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectTypeMember.Type">
      <summary>Gets the type of the data object as a <see cref="T:System.Type" />.</summary>
      <returns>The type of the data object as a <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewCommandInfo">
      <summary>Encapsulates information that describes a command for a node in Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommandInfo.CommandId">
      <summary>Gets a <see cref="T:System.ComponentModel.Design.CommandID" /> that uniquely identifies the command.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.CommandID" /> that uniquely identifies the command.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommandInfo.CommandProviderType">
      <summary>Gets the class as a <see cref="T:System.Type" /> that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewCommandProvider" /> support entity. The provider supplies this implementation.</summary>
      <returns>A <see cref="T:System.Type" /> representing the class that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewCommandProvider" /> support entity.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataViewCommandInfo.GetParameters">
      <summary>Gets the parameters associated with this command.</summary>
      <returns>An array containing the parameters associated with this command.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo">
      <summary>Encapsulates properties that are common among different types of nodes; specifically, the connection node (<see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewConnectionNodeInfo" />) and the static and selection nodes (<see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewNodeInfo" />).</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo.BrowseObjectProviderType">
      <summary>Gets the class as a <see cref="T:System.Type" /> that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewBrowseObjectProvider" /> support entity. The provider supplies this implementation.</summary>
      <returns>A <see cref="T:System.Type" /> representing the class that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewBrowseObjectProvider" /> support entity.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo.Children">
      <summary>Gets the child nodes of the current node.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewMemberInfo" /> objects representing the child nodes of the current node.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo.Commands">
      <summary>Gets the commands associated with the current node.</summary>
      <returns>The commands associated with the current node, as name/value pairs containing the command identifiers and their corresponding <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewCommandInfo" /> objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo.CreateAutoBrowseObject">
      <summary>Gets a value indicating whether an AutoBrowseObject should be created. </summary>
      <returns>true if the AutoBrowseObject should be created; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo.DefaultCommand">
      <summary>Gets the default command that is set for the current node.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewCommandInfo" /> object as the default command.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo.DropTargetProviderType">
      <summary>Gets the class as a <see cref="T:System.Type" /> that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDropTargetProvider" /> support entity. The provider supplies this implementation.</summary>
      <returns>A <see cref="T:System.Type" /> as the class that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDropTargetProvider" /> support entity.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo.NodeId">
      <summary>Gets a string containing the ID of the current node.</summary>
      <returns>A string containing the ID of the current node.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo.Properties">
      <summary>Gets the properties of the current node.</summary>
      <returns>A list of properties of the current node as name/value pairs of property names and <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewPropertyInfo" /> objects</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo.TypeDisplayName">
      <summary>Gets the UI-specific display name.</summary>
      <returns>The UI-specific display name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo.UserContextProviderType">
      <summary>Gets the class as a <see cref="T:System.Type" /> that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewUserContextProvider" /> support entity. The provider supplies this implementation.</summary>
      <returns>A <see cref="T:System.Type" /> as the class that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewUserContextProvider" /> support entity.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewConnectionNodeInfo">
      <summary>Encapsulates properties for a connection node in Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewConnectionNodeInfo.InitialDisplayNames">
      <summary>Gets the initial display names of the connection node.</summary>
      <returns>A collection of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewDisplayNameInfo" /> objects representing the initial display names.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewConnectionNodeInfo.ObjectType">
      <summary>Gets the type of the data object represented in the current connection node.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectType" /> object as the type of the data object represented in the current connection node.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewDisplayNameInfo">
      <summary>Encapsulates properties about the display name of a node in Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewDisplayNameInfo.CaptionProviderType">
      <summary>Gets the type of the caption provider.</summary>
      <returns>A <see cref="T:System.Type" /> representing the type of the caption provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewDisplayNameInfo.DisplayNameExpression">
      <summary>Gets the expression that, when converted, represents the display name.</summary>
      <returns>A string containing the display name expression.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewDisplayNameInfo.WhenExpression">
      <summary>Gets the expression containing the conditions for converting the expression for the display name.</summary>
      <returns>A string containing the expression, which consists of the conditions for converting the expression for the display name.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewIconInfo">
      <summary>Encapsulates properties of a node icon in Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewIconInfo.Assembly">
      <summary>Gets the data provider's assembly object as an <see cref="T:System.Reflection.Assembly" />.</summary>
      <returns>The data provider's assembly object as an <see cref="T:System.Reflection.Assembly" />.</returns>
      <exception cref="T:System.FileLoadException">The assembly could not be loaded from the assembly name.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewIconInfo.IconName">
      <summary>Gets the name of the icon.</summary>
      <returns>A string value containing the name of the icon.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewIconInfo.IconProviderType">
      <summary>Gets the class as a <see cref="T:System.Type" /> that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewUserContextProvider" /> support entity. The provider supplies this implementation.</summary>
      <returns>A <see cref="T:System.Type" /> as the class that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewUserContextProvider" /> support entity.</returns>
      <exception cref="T:System.TypeLoadException">The icon provider type could not be loaded from the icon provider type name.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewIconInfo.WhenExpression">
      <summary>Gets the expression that, when interpreted, determines the icon to display.</summary>
      <returns>The expression that, when interpreted, determines the icon to display.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewInfo">
      <summary>Provides information about a data view.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewInfo.ConnectionNode">
      <summary>Gets information about a connection node in the data view.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewConnectionNodeInfo" /> representing information about a connection node.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewInfo.DisplayName">
      <summary>Gets the localizable display name of the data view.</summary>
      <returns>A string containing the localizable display name of the data view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewInfo.DragSourceProviderType">
      <summary>Gets the class as a <see cref="T:System.Type" /> that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDragSourceProvider" /> support entity. The provider supplies this implementation.</summary>
      <returns>A <see cref="T:System.Type" /> as the class that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDragSourceProvider" /> support entity.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewInfo.GlobalCommands">
      <summary>Gets the global commands that are available for the entire data view.</summary>
      <returns>Name/value pairs of <see cref="T:System.ComponentModel.Design.CommandID" /> objects representing the command identifiers and <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewCommandInfo" /> objects representing command information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewInfo.Name">
      <summary>Gets the programmatic name of the data view.</summary>
      <returns>A string value containing the programmatic name of the data view.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewMemberInfo">
      <summary>Represents information about a member of a data view that is associated with a data connection in Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewMemberInfo.SkipWhenExpression">
      <summary>Gets the string value used when the when expression is skipped. This value replaces the value that would otherwise be computed by evaluating the when expression.</summary>
      <returns>A string value used instead of the when expression value.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewNodeInfo">
      <summary>Encapsulates properties of a static or selection node in Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewNodeInfo.DisplayNames">
      <summary>Gets the display names of the static node or the selection node.</summary>
      <returns>A collection of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewDisplayNameInfo" /> objects representing the display names.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewNodeInfo.Icons">
      <summary>Gets the icons associated with the static node or the selection node.</summary>
      <returns>A collection of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewIconInfo" /> objects representing the icons.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewNodeInfo.VisibilityProviderType">
      <summary>Gets the class as a <see cref="T:System.Type" /> that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewVisibilityProvider" /> support entity. The provider supplies this implementation.</summary>
      <returns>A <see cref="T:System.Type" /> as the class that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewVisibilityProvider" /> support entity.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewPropertyInfo">
      <summary>Represents information about a node property in Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewPropertyInfo.Category">
      <summary>Gets the category of the node property.</summary>
      <returns>A string value containing the category of the node property.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewPropertyInfo.Description">
      <summary>Gets the description of the node property.</summary>
      <returns>A string value containing the description of the node property.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewPropertyInfo.DisplayName">
      <summary>Gets the display name of the node property.</summary>
      <returns>A string value containing the display name of the node property.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewPropertyInfo.Name">
      <summary>Gets the node property name.</summary>
      <returns>A string value containing the node property name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewPropertyInfo.StandardValues">
      <summary>Gets the values of the node property.</summary>
      <returns>Name/value pairs of value names and values.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewPropertyInfo.Value">
      <summary>Gets the value of the node property.</summary>
      <returns>A string containing the value of the node property.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionInfo">
      <summary>Encapsulates properties of a selection of nodes in Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionInfo.Filter">
      <summary>Gets a string of comma-delimited data object names representing the filter for the selection.</summary>
      <returns>A string of comma-delimited data object names representing the filter for the selection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionInfo.Ordering">
      <summary>Gets the ordering of the selection as a string of comma-delimited data object names.</summary>
      <returns>The ordering of the selection as a string of comma-delimited data object names.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionInfo.Properties">
      <summary>Gets the properties of the selection.</summary>
      <returns>A list of string values representing the property names of the selection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionInfo.Restrictions">
      <summary>Gets the restrictions of the selection.</summary>
      <returns>A list of objects representing the restrictions of the selection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionInfo.SelectionNode">
      <summary>Gets information about a selection node from the selection.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionNodeInfo" /> containing information about a selection node from the selection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionInfo.SelectionType">
      <summary>Gets the type of the data object representing in the selection.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectType" /> object representing the type of the data object representing in the selection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionNodeInfo">
      <summary>Encapsulates properties of a selection node in Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionNodeInfo.ObjectType">
      <summary>Gets the type of the data object represented in the selection node.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectType" /> representing the type of the selection node.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataViewSupportModel">
      <summary>Represents the model that describes data view support.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewSupportModel.DefaultView">
      <summary>Gets the default data view in Server Explorer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewInfo" /> object representing the default view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataViewSupportModel.Views">
      <summary>Gets all the available views for Server Explorer.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewInfo" /> objects representing all the available views.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn">
      <summary>Represents a mapped object that describes a tabular object column.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn.AdoDotNetDataType">
      <summary>Gets the ADO.NET data type as a numerical value from an ADO.NET–specific enumeration.</summary>
      <returns>A numerical value corresponding to the ADO.NET data type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn.AdoDotNetDbType">
      <summary>Gets a value from the <see cref="T:System.Data.DbType" /> enumeration that specifies the data type of the column for an ADO.NET data provider.</summary>
      <returns>An integer value corresponding to a field from the <see cref="T:System.Data.DbType" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn.FrameworkDataType">
      <summary>Gets the .NET Framework type of the column.</summary>
      <returns>A <see cref="T:System.Type" /> as the .NET Framework type of the column.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn.IsNullable">
      <summary>Gets a value indicating whether the column is nullable.</summary>
      <returns>true if this column is nullable; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn.Length">
      <summary>Gets the length of the column.</summary>
      <returns>An integer value representing the length of the column.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn.NativeDataType">
      <summary>Gets the data source–specific data type name.</summary>
      <returns>A string value containing the data source–specific data type name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn.Ordinal">
      <summary>Gets the ordinal number of the column, which specifies the order of the column in the columns collection.</summary>
      <returns>An integer value specifying the ordinal number of the column.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn.Precision">
      <summary>Gets the maximum number of digits stored in the column.</summary>
      <returns>An integer value representing the maximum number of digits stored in the column.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn.Scale">
      <summary>Gets the maximum number of digits to the right of the decimal point.</summary>
      <returns>An integer value representing the maximum number of digits to the right of the decimal point.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn.UserDataType">
      <summary>Gets a user-defined data type.</summary>
      <returns>A string value containing a user-defined data type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataExecutableObject">
      <summary>Represents a mapped object that executes code using zero or more parameters.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataExecutableObject.Catalog">
      <summary>Gets the catalog associated with this executable data object.</summary>
      <returns>A string value containing the catalog.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataExecutableObject.IsSystemObject">
      <summary>Gets a value indicating whether this executable data object is a system object.</summary>
      <returns>true if this executable data object is a system object; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataExecutableObject.Parameters">
      <summary>Gets the parameters of this executable data object.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter" /> objects representing the parameters.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataExecutableObject.Schema">
      <summary>Gets the schema of this executable data object.</summary>
      <returns>A string value containing the schema.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter">
      <summary>Represents a mapped object that describes an executable object parameter.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter.AdoDotNetDataType">
      <summary>Gets the ADO.NET data type as a numerical value from the <see cref="T:System.Data.Common.DbMetaDataCollectionNames" /> metadata collection.</summary>
      <returns>A numerical value corresponding to the ADO.NET data type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter.AdoDotNetDbType">
      <summary>Gets a value from the <see cref="T:System.Data.DbType" /> enumeration that specifies the data type of the parameter for an ADO.NET data provider.</summary>
      <returns>An integer value corresponding to a field from the <see cref="T:System.Data.DbType" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter.Direction">
      <summary>Gets the direction of the parameter.</summary>
      <returns>A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration specifying the direction of the parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter.FrameworkDataType">
      <summary>Gets the .NET Framework type of the parameter.</summary>
      <returns>A <see cref="T:System.Type" /> as the .NET Framework type of this parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter.IsNullable">
      <summary>Gets a value indicating whether the parameter is nullable.</summary>
      <returns>true if the parameter is nullable; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter.Length">
      <summary>Gets the length of the parameter.</summary>
      <returns>An integer value representing the length of the parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter.NativeDataType">
      <summary>Gets the data source–specific data type name.</summary>
      <returns>A string value containing the data source–specific data type name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter.Ordinal">
      <summary>Gets the ordinal number of the parameter specifying the order of the parameter in the parameters collection.</summary>
      <returns>An integer value specifying the ordinal number of the parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter.Precision">
      <summary>Gets the maximum number of digits stored in this parameter.</summary>
      <returns>An integer value representing the maximum number of digits stored in this parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter.Scale">
      <summary>Gets the maximum number of digits to the right of the decimal point.</summary>
      <returns>An integer value representing the maximum number of digits to the right of the decimal point.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataParameter.UserDataType">
      <summary>Gets a user-defined data type.</summary>
      <returns>A string value containing a user-defined data type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataScalarFunction">
      <summary>Represents a mapped object that executes code using zero or more input parameters and returns a scalar value (represented here as a parameter).</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataScalarFunction.ReturnValue">
      <summary>Gets the value that the scalar function object returns after execution.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> representing the return value.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataStoredProcedure">
      <summary>Represents a mapped object that executes code using zero or more input or output parameters and may also return data in a tabular form.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataStoredProcedure.ReturnValue">
      <summary>Gets the value that the stored procedure object returns after execution.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> representing the return value.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTable">
      <summary>Represents a mapped object that contains raw tabular data.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTable.Columns">
      <summary>Gets the list of columns that the table object contains.</summary>
      <returns>A list of <see cref="T:crosoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableColumn" /> objects representing the columns contained in the table object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTable.ForeignKeys">
      <summary>Gets a list of foreign keys associated with the table object.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableForeignKey" /> objects representing the foreign keys associated with the table object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTable.UniqueKeys">
      <summary>Gets a list of unique keys associated with the table object.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableForeignKey" /> objects representing the unique keys associated with the table object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableColumn">
      <summary>Represents a mapped object that describes a tabular object column.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableColumn.DefaultValue">
      <summary>Gets the default value assigned to this column object, if any.</summary>
      <returns>The default value assigned to this column, if any, or null if no default value exists.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableColumn.IsComputed">
      <summary>Gets a value indicating whether this column object is computed.</summary>
      <returns>true if this column object is computed; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableForeignKey">
      <summary>Represents a mapped object that describes a set of columns defined by a table that together uniquely identify a row in another table.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableForeignKey.Columns">
      <summary>Gets a list of foreign key table columns that collectively represent the foreign key.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableForeignKeyColumn" /> objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableForeignKey.DeleteAction">
      <summary>The delete action for records related through this foreign key.</summary>
      <returns>The delete action.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableForeignKey.ReferencedTable">
      <summary>The data table referenced in this foreign key.</summary>
      <returns>The referenced table.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableForeignKey.ReferencedUniqueKey">
      <summary>The unique key on the table referenced by this foreign key.</summary>
      <returns>The unique key.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableForeignKey.UpdateAction">
      <summary>The update action for this foreign key.</summary>
      <returns>The update action.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableForeignKeyColumn">
      <summary>Represents a mapped object that describes a table foreign key column.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableForeignKeyColumn.ReferencedColumn">
      <summary>Gets the table column that the foreign key column references in the referenced table.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableColumn" /> object representing the column that the foreign key column references in the referenced table.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableUniqueKey">
      <summary>Represents a mapped object that describes a set of columns defined by a table that together uniquely identify a row in the table.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableUniqueKey.Columns">
      <summary>Gets all the columns that make up this unique key.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableColumn" /> objects representing all the columns that make up this unique key.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTableUniqueKey.IsPrimary">
      <summary>Gets a value indicating whether this unique key is a primary key.</summary>
      <returns>true if this unique key is a primary key; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTabularFunction">
      <summary>Represents a mapped object that executes code using zero or more input parameters and returns data in a tabular form.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTabularObject">
      <summary>Represents a mapped object that exposes data in a tabular form.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTabularObject.Catalog">
      <summary>Gets the catalog of the tabular object.</summary>
      <returns>A string representing the catalog.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTabularObject.Columns">
      <summary>Gets a list of data columns contained in the tabular object.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataColumn" /> objects representing the data columns contained in the tabular object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTabularObject.IsSystemObject">
      <summary>Gets a value indicating whether the tabular object is a system object.</summary>
      <returns>true if the tabular object is a system object; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataTabularObject.Schema">
      <summary>Gets the schema of the most double-click tabular object.</summary>
      <returns>A string value containing the schema of the tabular object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.RelationalObjectModel.IVsDataView">
      <summary>Represents a mapped object that dynamically generates tabular data based on data from other objects.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs`1">
      <summary>Encapsulates event data for various events used in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand" /> service </summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs`1.#ctor(System.Exception,System.Boolean,`0,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs`1" /> class with the specified parameters.</summary>
      <param name="error">The exception that occurred during the operation execution, if any.</param>
      <param name="cancelled">A Boolean value indicating whether the operation was cancelled.</param>
      <param name="returnValue">The return value of the executed operation.</param>
      <param name="userState">A unique identifier for the asynchronous process.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs`1.ReturnValue">
      <summary>Returns the return value of the operation.</summary>
      <returns>The return value of the operation of the generic type T.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType">
      <summary>Represents an enumeration of predefined data command types.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Text">
      <summary>The command is a text command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared">
      <summary>The command is prepared and is the return value of the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Table">
      <summary>The command holds the name of a table.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Procedure">
      <summary>The command holds the name of a stored procedure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.ScalarFunction">
      <summary>The command holds the name of a scalar function.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.TabularFunction">
      <summary>The command holds the name of a tabular function.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat">
      <summary>Specifies the format of a data item type returned by the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat.Default">
      <summary>The item type format is the type set as the default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat.NativeType">
      <summary>The item type format is a string representing the native type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat.ManagedType">
      <summary>The item type format is an instance of <see cref="T:System." /><see cref="Type" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection">
      <summary>Specifies the type of a parameter within a query.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection.Unknown">
      <summary>The parameter direction is not defined.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection.In">
      <summary>The parameter is an input parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection.Out">
      <summary>The parameter is an output parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection.InOut">
      <summary>The parameter is capable of both input and output.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection.ReturnValue">
      <summary>The parameter represents a return value from an operation such as a stored procedure, built-in function, or user-defined function.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataViewNodeEventArgs">
      <summary>Encapsulates event data for various events that are raised for nodes in Server Explorer when some of their properties change.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.DataViewNodeEventArgs.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataViewNodeEventArgs" /> class with the item ID.</summary>
      <param name="itemId">A numerical value that uniquely identifies the node in the data view.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.DataViewNodeEventArgs.ItemId">
      <summary>Gets the item ID.</summary>
      <returns>An integer representing the item ID.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IDSRefBuilder">
      <summary>Allows you to create a Data Source Reference (DSRef) object that identifies one or more data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IDSRefBuilder.AppendToDSRef(System.Object,System.String,System.Object[])">
      <summary>When implemented by a class, appends information about a data object with the specified type and identifier to a specified existing DSRef object.</summary>
      <param name="dsRef">The existing DSRef object to which information is appended.</param>
      <param name="typeName">The name of the object type.</param>
      <param name="identifier">The identifier of the object represented as an array of identifier parts.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand">
      <summary>Represents the interface that contains methods for executing data commands in an asynchronous manner.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.CancelAsync(System.Object)">
      <summary>When implemented by a class, cancels the asynchronous call, returning immediately.</summary>
      <param name="userState">A unique operation ID for the operation to cancel. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.DeriveParametersAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32,System.Object)">
      <summary>When implemented by a class, derives, in an asynchronous manner, a set of parameters for use with a specified command.</summary>
      <param name="command">Command for which the parameters are derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.DeriveParametersCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.DeriveParametersAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.DeriveSchemaAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>When implemented by a class, derives, in an asynchronous manner, the schema of the specified command.</summary>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.DeriveSchemaCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.DeriveSchemaAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.ExecuteAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>When implemented by a class, executes a command in an asynchronous manner.</summary>
      <param name="command">The command to be executed.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.ExecuteCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.ExecuteAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.ExecuteWithoutResultsAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>Executes, in an asynchronous manner, a command that does not return any results beyond an integer value indicating status.</summary>
      <param name="command">The command to be executed.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.ExecuteWithoutResultsCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.ExecuteWithoutResultsAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.PrepareAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>When implemented by a class, prepares, in an asynchronous manner, the specified command to be executed against the data source; the command can then be executed multiple times, with varying parameters.</summary>
      <param name="command">The command to be executed.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.PrepareCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.PrepareAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand">
      <summary>Represents the interface that exposes methods for data command handling, including building and executing data commands of various types against data sources, retrieving read-only results, and retrieving a command status code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.CreateParameter">
      <summary>When implemented by a class, creates a parameter object that can be passed into one of the following methods: <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" />, <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" />, or <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" />.</summary>
      <returns>A new <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.DeriveParameters(System.String)">
      <summary>When implemented by a class, derives the parameters that can be specified for a given command.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects. Each object represents a parameter that is derived from the command.</returns>
      <param name="command">A command from which to derive parameters that are specific to a data source. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>When implemented by a class, derives the parameters that can be specified for a given command.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects. Each object represents a parameter that is derived from the command.</returns>
      <param name="command">A command from which to derive parameters that are specific to a data source. </param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)">
      <summary>When implemented by a class, derives the parameters that can be specified for a given command.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects. Each object represents a parameter that is derived from the command.</returns>
      <param name="command">A command from which to derive parameters that are specific to a data source. </param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the parameter derivation and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.DeriveSchema(System.String)">
      <summary>When implemented by a class, derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema that is specific to a data source. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>When implemented by a class, derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema that is specific to a data source. </param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>When implemented by a class, derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema specific that is to a data source. </param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Framework.DataParameter" /> objects for the specified command type. While this is an input parameter, the DDEX provider is still able to set properties on individual out and return value parameters. However, these will not be populated when deriving schemas.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>When implemented by a class, derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema that is specific to a data source. </param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Framework.DataParameter" /> objects for the specified command type. While this is an input parameter, the DDEX provider is still able to set properties on individual out and return value parameters. However, these will not be populated when deriving schemas.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Execute(System.String)">
      <summary>When implemented by a class, executes a specified command and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>When implemented by a class, executes a specified command and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>When implemented by a class, executes a specified command and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Framework.DataParameter" /> objects for the specified command type. While this is an input parameter, the DDEX provider is still able to set properties on individual out and return value parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>When implemented by a class, executes a specified command and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Framework.DataParameter" /> objects for the specified command type. While this is an input parameter, the DDEX provider is still able to set properties on individual out and return value parameters.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.ExecuteWithoutResults(System.String)">
      <summary>When implemented by a class, executes a command but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>When implemented by a class, executes a command but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>When implemented by a class, executes a command, optionally with parameters, but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Framework.DataParameter" /> objects for the specified command type. While this is an input parameter, the provider is still able to set properties on individual out and return value parameters. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>When implemented by a class, executes a command, optionally with parameters, but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Framework.DataParameter" /> objects for the specified command type. While this is an input parameter, the provider is still able to set properties on individual out and return value parameters. </param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Prepare(System.String)">
      <summary>When implemented by a class, prepares the specified command on the data source to be executed; the command may then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that you can later pass to the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> methods by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>When implemented by a class, prepares the specified command on the data source to be executed; the command may then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that you can later pass to the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> methods by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>When implemented by a class, prepares the specified command on the data source to be executed; the command may then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that you can later pass to the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> methods by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>When implemented by a class, prepares the specified command on the data source to be executed; the command may then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that you can later pass to the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> methods by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionEquivalencyComparer">
      <summary>Provides the ability to compare data connection strings for equivalence.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionEquivalencyComparer.AreEquivalent(System.String,System.String)">
      <summary>Compares the specified connection strings to determine whether they are equivalent and hence provide the same design-time experience.</summary>
      <returns>true if the connection strings are equivalent; otherwise, false.</returns>
      <param name="connectionString1">The first connection string to compare.</param>
      <param name="connectionString2">The second connection string to compare.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString1" /> or the <paramref name="connectionString2" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionPromptDialog">
      <summary>Represents the interface for a dialog box that can prompt the user for information when a data connection is being opened.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionPromptDialog.ShowDialog(Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport)">
      <summary>When implemented by a class, displays the prompt dialog box, given a specific <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> instance.</summary>
      <returns>A string that is the new value of the connection string containing the completed information that was entered by the user.</returns>
      <param name="connectionSupport">An instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> class that contains an existing, incomplete connection string that should be updated by this dialog box.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties">
      <summary>Represents the interface that exposes methods and properties for the parsing and formatting of connection strings, as well as for storage of strongly typed properties, custom attributes, and synonyms.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties.Add(System.String,System.Type,System.Object)">
      <summary>When implemented by a class, adds a new property to the current connection properties collection.</summary>
      <param name="key">Name of the property being added.</param>
      <param name="type">A <see cref="T:System.Type" /> object representing the type of the property.</param>
      <param name="value">Value of the property being added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties.Parse(System.String)">
      <summary>When implemented by a class, disassembles the components of a connection string into a set of properties in the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</summary>
      <param name="connectionString">A connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties.Reset">
      <summary>When implemented by a class, resets the values of connection properties to an initial state.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties.Reset(System.String)">
      <summary>When implemented by a class, removes the specified property from the current set of data connection properties.</summary>
      <returns>true if the property is removed; false if the property is not found.</returns>
      <param name="key">The name of the property key for the property to be reset.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties.ToSafeString">
      <summary>When implemented by a class, retrieves a string representation of the current set of data connection properties that excludes sensitive properties or properties that should not be persisted.</summary>
      <returns>A string representation of the current set of data connection properties that excludes sensitive properties or properties that should not be persisted.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties.ToString">
      <summary>When implemented by a class, retrieves the default string representation of the current connection properties.</summary>
      <returns>A default string representation of the current connection properties.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport">
      <summary>Represents the interface that exposes methods and properties that enable you to work directly with connections to a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport.Close">
      <summary>When implemented by a class, closes the specified connection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport.ConnectionString">
      <summary>When implemented by a class, gets or sets a string representation of information required to establish a specified data source connection.</summary>
      <returns>A string representation of the data source connection information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport.ConnectionTimeout">
      <summary>When implemented by a class, gets or sets the amount of time to wait when establishing a connection before terminating the attempt and generating a time-out error.</summary>
      <returns>An integer representation of the allowable time-out period.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport.Initialize(System.Object)">
      <summary>When implemented by a class, initializes the specified connection, optionally from an existing data provider object.</summary>
      <param name="providerObj">An existing DDEX provider object, or null if a new object needs to be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport.Open(System.Boolean)">
      <summary>When implemented by a class, opens the specified data connection.</summary>
      <returns>true if the connection was opened successfully and does not require a prompt; false if the connection is missing required connection information and a prompt should be displayed to obtain the missing information form the user. You should return false only when a provider has implemented the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog" /> class.</returns>
      <param name="doPromptCheck">Indicates whether the call to this method should return false for specific errors that relate to missing connection information, as opposed to simply throwing an error in all cases of failure. Data providers that do not implement a prompt dialog box (or have their own prompting mechanism) should ignore this parameter and always assume a value of false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport.ProviderObject">
      <summary>When implemented by a class, gets the underlying provider object for the specified connection.</summary>
      <returns>The underlying provider object for the specified connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport.State">
      <summary>When implemented by a class, gets the state of the data connection.</summary>
      <returns>The state of the data connection, based on the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionState" /> enumeration.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIConnector">
      <summary>Provides the ability to customize the behavior of opening a connection when in the context of a connection UI (for example, the data connection dialog box).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIConnector.Connect(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>When implemented by a class, opens the data connection in the context of a connection UI (for example, the data connection dialog box).</summary>
      <param name="connection">A data connection object representing the connection to the data source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connection" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIControl">
      <summary>Represents the interface that exposes methods and properties that enable a custom user interface (UI) control for editing connection properties in the Data Connection dialog box.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIControl.Control">
      <summary>When implemented by a class, gets the current user control as a <see cref="T:System.Windows.Forms.UserControl" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.UserControl" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIControl.LoadProperties">
      <summary>When implemented by a class, loads the properties of controls in the Data Connection dialog box, such as the data source, user ID, password, and initial catalog.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties">
      <summary>Provides the ability to manipulate data connection properties in the context of a connection UI (for example, the data connection dialog box).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties.GetSynonyms(System.String)">
      <summary>When implemented by a class, retrieves an array list of synonyms for a specified property.</summary>
      <returns>An array of synonyms for a specified property.</returns>
      <param name="key">The name of a property for which to retrieve the list of synonyms.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties.IsComplete">
      <summary>When implemented by a class, gets a value indicating whether a given connection string is complete.</summary>
      <returns>true if the connection string is complete; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties.IsExtensible">
      <summary>When implemented by a class, gets or sets a Boolean value indicating whether the DDEX provider connection properties are extensible.</summary>
      <returns>true if the connection properties are extensible; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties.IsSensitive(System.String)">
      <summary>When implemented by a class, indicates whether a property contains sensitive information.</summary>
      <returns>true if the property contains sensitive information; otherwise, false.</returns>
      <param name="key">The name of the property to examine for sensitive information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties.ToDisplayString">
      <summary>When implemented by a class, retrieves a string representation of the current set of data connection properties that is suitable for on-screen display.</summary>
      <returns>A string representation of the current set of data connection properties that is suitable for on-screen display.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUITester">
      <summary>Provides the ability to test the connection with the properties specified in the connection dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUITester.Test(Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties)">
      <summary>Tests the connection based on the properties specified in the connection dialog box.</summary>
      <param name="connectionUIProperties">Contains the connection properties specified in the data connection dialog box.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataMappedObjectConverter">
      <summary>Provides the ability to convert restrictions passed to the mapped object selector into underlying restrictions to pass to the data source–specific type selector, thus allowing mapped selection. Also allows conversion of members of an underlying data object to members of a mapped object, resulting in mapped representations of data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataMappedObjectConverter.ConvertToMappedMember(System.String,System.String,System.Object[])">
      <summary>When implemented by a class, converts the specified member of an underlying data object to its corresponding mapped member.</summary>
      <returns>The value of the mapped member converted from the underlying values.</returns>
      <param name="typeName">The name of the underlying type.</param>
      <param name="mappedMemberName">The name of the mapped member to convert to that belongs to the mapped type.</param>
      <param name="underlyingValues">An array containing the values stored for the data source–specific members that are to be converted to a mapped member value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataMappedObjectConverter.ConvertToUnderlyingRestriction(System.String,System.Int32,System.Object[])">
      <summary>When implemented by a class, converts the specified mapped restrictions into underlying restrictions that are data source–specific.</summary>
      <returns>The underlying restriction that is converted from the mapped restriction.</returns>
      <param name="mappedTypeName">The name of the mapped type.</param>
      <param name="substitutionValueIndex">Index into the array of substitution values.</param>
      <param name="mappedRestrictions">An array containing the mapped restrictions.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectIdentifierConverter">
      <summary>Represents the interface that exposes methods for converting data source–specific object identifiers from strings to identifier parts, and from identifier parts to strings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectIdentifierConverter.ConvertToArray(System.String,System.String)">
      <summary>When implemented by a class, converts a formatted string identifier into its equivalent set of identifier parts.</summary>
      <returns>An array containing the separated, unformatted identifier parts as derived from the input identifier.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">A data source object identifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectIdentifierConverter.ConvertToString(System.String,System.Object[])">
      <summary>When implemented by a class, converts a set of identifier parts into a formatted string identifier.</summary>
      <returns>A string representation made up from the identifier parts and formatted based on the default formatting option.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">An array containing a set of identifier parts for a specified object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectIdentifierConverter.ConvertToString(System.String,System.Object[],Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>When implemented by a class, converts a set of identifier parts into a formatted string identifier, based on the specified formatting option.</summary>
      <returns>A string representation made up from the identifier parts and formatted based on the specified formatting option.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">An array containing a set of identifier parts for a specified object.</param>
      <param name="format">A value from the enumeration <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" />  indicating the format of the string.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectIdentifierResolver">
      <summary>Represents the interface that exposes methods for expanding and contracting an identifier for a specified data object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectIdentifierResolver.ContractIdentifier(System.String,System.Object[])">
      <summary>When implemented by a class, contracts an identifier for a data object with the specified type and complete identifier.</summary>
      <returns>The partial, contracted unique identifier for a data object.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="fullIdentifier">A full identifier of a data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectIdentifierResolver.ExpandIdentifier(System.String,System.Object[])">
      <summary>When implemented by a class, expands an identifier for a data object with the specified type and partial identifier.</summary>
      <returns>The complete, expanded identifier of the data object that matches the partial identifier passed in, or null if the identifier could not be expanded.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="partialIdentifier">A partial identifier of a data object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectMemberComparer">
      <summary>Represents the interface that exposes methods for comparing two data object identifier parts or properties.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectMemberComparer.Compare(System.String,System.Object[],System.Int32,System.Object)">
      <summary>When implemented by a class, compares one object identifier part with another specified object identifier part.</summary>
      <returns>A value less than zero in cases where the identifier part is less than the specified value; zero if the identifier part is equal to the specified value; a value greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of the identifier type.</param>
      <param name="identifier">An array of identifier parts that identify the data object.</param>
      <param name="identifierPart">The zero-based index into the identifier array indicating which part of the identifier to compare.</param>
      <param name="value">A value to compare the identifier part against.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectMemberComparer.Compare(System.String,System.String,System.Object,System.Object)">
      <summary>When implemented by a class, compares a property of a data object with another data object property.</summary>
      <returns>A value less than zero if the identifier part is less than the specified value; zero if the identifier part is equal to the specified value; a value greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="propertyName">The name of a property to compare.</param>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectSelector">
      <summary>Enables getting data source–specific metadata about objects from the object store. The source of the object store is the data object support XML file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectSelector.GetExpensiveProperties(System.String)">
      <summary>When implemented by a class, retrieves a list of expensive properties from the object store.</summary>
      <returns>A list of expensive properties for the specified type.</returns>
      <param name="typeName">The data source–specific type name for which to retrieve expensive properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectSelector.GetOrdering(System.String)">
      <summary>When implemented by a class, returns the ordering for the specified type as a string of comma-delimited data object names, which specifies the sort order of the data objects returned when selecting objects.</summary>
      <returns>A string of comma-delimited data object names, which specifies the sort order of the data objects returned when selecting objects for the specified type.</returns>
      <param name="typeName">The data source–specific type name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectSelector.GetRequiredRestrictions(System.String)">
      <summary>When implemented by a class, retrieves a list of the restrictions that are required when selecting data objects for the specified type.</summary>
      <returns>A list of the restrictions that are required when retrieving data objects for the current type.</returns>
      <param name="typeName">The data source–specific type name for which to get the required restrictions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectSelector.GetSupportedRestrictions(System.String)">
      <summary>When implemented by a class, retrieves all the restrictions that are supported when selecting data objects for the specified type.</summary>
      <returns>A list of the restrictions that are supported when retrieving data objects for the specified type.</returns>
      <param name="typeName">The data source–specific type name for which to get the supported restrictions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectSelector.SelectObjects(System.String,System.Object[],System.String[])">
      <summary>When implemented by a class, returns a data reader for the data objects retrieved from the object store, which are filtered by the specified restrictions and properties.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object representing a data reader for the selected data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="properties">Specifies the property values of the requested data objects. The current version of DDEX does not support properties.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectSupport">
      <summary>Provides the ability to retrieve, through an XML stream, a description of data object types for a data source. You can then interpret and manipulate this information programmatically.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter">
      <summary>Represents the interface that exposes methods and properties to handle data parameters.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter.Descriptor">
      <summary>When implemented by a class, gets information that describes the data parameter.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameterDescriptor" /> object describing the data parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter.Direction">
      <summary>When implemented by a class, gets or sets a <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> object specifying the direction of the parameter.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> object specifying the direction of the parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter.Name">
      <summary>When implemented by a class, gets or sets the string literal name of the current parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter.Parse(System.String)">
      <summary>When implemented by a class, disassembles a parameter value in a string format and converts the value to the correct type.</summary>
      <param name="value">A string representation of a parameter value.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter.Size">
      <summary>When implemented by a class, gets or sets an integer value specifying the size of the parameter.</summary>
      <returns>The size of the parameter as an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter.ToString">
      <summary>When implemented by a class, retrieves a string representation of the value of the current parameter.</summary>
      <returns>A string representation of the value of the current parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter.Type">
      <summary>When implemented by a class, gets or sets the data source–specific type of the parameter.</summary>
      <returns>The data source–specific type of the parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter.Value">
      <summary>When implemented by a class, gets or sets the value of the parameter.</summary>
      <returns>The value of the data parameter.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameterDescriptor">
      <summary>Exposes properties that describe a data parameter.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameterDescriptor.IsDerived">
      <summary>Gets a value indicating whether this data parameter is derived from a command.</summary>
      <returns>true if this data parameter is derived; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameterDescriptor.IsNullable">
      <summary>Gets a value indicating whether this data parameter can contain a null value.</summary>
      <returns>true if this data parameter can contain a null value; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameterDescriptor.IsOptional">
      <summary>Gets a value indicating whether this data parameter is an optional parameter.</summary>
      <returns>true if this data parameter is an optional parameter; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader">
      <summary>Represents the interface that exposes methods and properties for reading data from any data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.Close">
      <summary>When implemented by a class, closes the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> instance.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.Descriptor">
      <summary>When implemented by a class, gets information that describes the data from a data source.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> object describing the data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>When implemented by a class, retrieves a specified number of bytes of raw binary data.</summary>
      <returns>An integer value indicating the number of bytes read into the buffer.</returns>
      <param name="index">Index in the current block of data for the item to retrieve.</param>
      <param name="buffer">An array into which specified data, as byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">Index of the starting point in the byte array specified with the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified with the <paramref name="buffer" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.GetBytes(System.String,System.Byte[],System.Int32,System.Int32)">
      <summary>When implemented by a class, retrieves a specified number of bytes of raw binary data.</summary>
      <returns>An integer value indicating the number of bytes read into the buffer.</returns>
      <param name="name">The name of the item for which to retrieve raw binary data.</param>
      <param name="buffer">An array into which specified data, as byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">Index of the starting point in the byte array specified with the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified with the <paramref name="buffer" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.GetItem(System.Int32)">
      <summary>When implemented by a class, retrieves the value of the item at the specified index in the current block of data.</summary>
      <returns>An integer value from the specified index in the current block of data.</returns>
      <param name="index">Index in the current block of the data item at which to retrieve the integer value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.GetItem(System.String)">
      <summary>When implemented by a class, retrieves the value of a data item with the specified name in the current block of data.</summary>
      <returns>The string value of the item with the specified name.</returns>
      <param name="name">The name of the data item in the current block to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.IsClosed">
      <summary>When implemented by a class, gets a Boolean value that indicates whether the specified reader is closed.</summary>
      <returns>true if the specified data reader is closed; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.IsNullItem(System.Int32)">
      <summary>When implemented by a class, indicates whether the data item at the specified index is unspecified, that is, null.</summary>
      <returns>true if the item is null, that is, unspecified; otherwise, false.</returns>
      <param name="index">Index of the data item to examine.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.IsNullItem(System.String)">
      <summary>When implemented by a class, indicates whether the value of the given data item is unspecified, that is, null.</summary>
      <returns>true if the item is null, that is, unspecified; otherwise, false.</returns>
      <param name="name">The name of the data item to examine.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.NextResult">
      <summary>When implemented by a class, advances the data reader to the next result set, in cases where the reader contains multiple result sets.</summary>
      <returns>true if more result sets remain to be read and the reader was advanced to the next result set; false if no more result sets were found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.Read">
      <summary>When implemented by a class, advances the reader to the next block of data, in cases where the reader contains more than one block of data.</summary>
      <returns>true if there are more blocks of data to read.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.Status">
      <summary>When implemented by a class, gets a numerical status code returned by the method currently providing data to the data reader.</summary>
      <returns>An integer value status code from the method currently providing data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader.Terminate">
      <summary>When implemented by a class, terminates the data reader immediately, without necessarily returning all of the data or setting output parameters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor">
      <summary>Exposes properties that describe the data reader.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor.GetItemIndex(System.String)">
      <summary>Retrieves the index corresponding to the specified data item name for the current data reader.</summary>
      <returns>The index corresponding to the specified data item name for the current data reader, or null if the item is not found.</returns>
      <param name="name">The date item name for which to retrieve the index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor.GetItemMaxLength(System.Int32)">
      <summary>Retrieves the maximum length, in characters, of data items at the specified index for the current data reader.</summary>
      <returns>The maximum length, in number of characters, of the data item at the specified index; or -1 if the maximum length is unavailable or is not sensible.</returns>
      <param name="index">The index of the data item being examined for length.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor.GetItemName(System.Int32)">
      <summary>Retrieves the name assigned to the data item at the specified index in this data reader.</summary>
      <returns>The name assigned to the data item at the index specified by the index parameter, or null if no name exists. </returns>
      <param name="index">The index of the data item for which to retrieve the name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor.GetItemType(System.Int32)">
      <summary>Retrieves the data type of a data item or data items at the specified index.</summary>
      <returns>The type of the data items located at the specified index. </returns>
      <param name="index">Index of the data item for which to return the data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor.GetItemType(System.Int32,Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat)">
      <summary>Retrieves the data type of a data item or data items at the specified index, in a specified format.</summary>
      <returns>The type of the data items located at the specified index in the specified format.</returns>
      <param name="index">Index of the data item for which to return the data type.</param>
      <param name="itemTypeFormat">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat" /> enumeration specifying the format of the data type to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor.ItemCount">
      <summary>Gets the number of items in this data reader's current block of data.</summary>
      <returns>An integer value holding the number of items in this data reader's current block of data. </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataSourceInformation">
      <summary>Represents the interface that exposes methods and properties for retrieving properties about a specified data source passed as name/value pairs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataSourceInformation.Contains(System.String)">
      <summary>When implemented by a class, retrieves a Boolean value indicating whether a specified property is contained in this data source information instance.</summary>
      <returns>true if the specified property is contained in this data source information instance; otherwise, false.</returns>
      <param name="propertyName">The name of the property being tested.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataSourceInformation.Item(System.String)">
      <summary>When implemented by a class, retrieves a data source information property with the specified name.</summary>
      <returns>The data source information property with the specified name.</returns>
      <param name="propertyName">The name of the data source information property to retrieve.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataSourceVersionComparer">
      <summary>Represents the interface that exposes the ability to compare two data source–specific version strings.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataTransaction">
      <summary>Represents the interface that exposes methods and properties for transaction processing, which allows you to commit or roll back a series of related operations as a batch.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataTransaction.BeginTransaction">
      <summary>When implemented by a class, initiates a transaction and returns the new transaction level.</summary>
      <returns>An integer value indicating the new transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataTransaction.CommitTransaction">
      <summary>When implemented by a class, commits a transaction and returns the new transaction level.</summary>
      <returns>An integer value indicating the new transaction level.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataTransaction.CurrentTransactionLevel">
      <summary>When implemented by a class, gets a numeric value indicating the current transaction level.</summary>
      <returns>An integer value specifying the current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataTransaction.RollbackTransaction">
      <summary>When implemented by a class, rolls back, or voids, a transaction and returns the new transaction level.</summary>
      <returns>An integer value indicating the new transaction level.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewBrowseObjectProvider">
      <summary>Represents the interface that exposes the ability to retrieve a specialized browse object for a specified node in a given data view.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewBrowseObjectProvider.BrowseObjectChanged">
      <summary>Occurs when the browse object is changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewBrowseObjectProvider.CreateBrowseObject(System.Int32,System.Object)">
      <summary>When implemented by a class, retrieves a special browse object for a data view node, given the specified node's item ID.</summary>
      <returns>An object representing the browse object for the specified node.</returns>
      <param name="itemId">An item ID specifying a node for which to create a custom browse object.</param>
      <param name="autoBrowseObj">A browse object automatically generated with information in the data view support XML, or null if the XML indicates that no such browse object should be generated. This allows an implementation of this method to specify most settings in XML and then provide only minor modification to the set of properties, rather than necessitating building the object from the beginning.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewCaptionProvider">
      <summary>Provides the ability to get the caption of a node item in Server Explorer.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewCaptionProvider.CaptionChanged">
      <summary>Occurs when a node's caption has changed in Server Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewCaptionProvider.GetCaption(System.Int32)">
      <summary>Retrieves the caption of the specified node in Server Explorer.</summary>
      <returns>The caption of the specified item.</returns>
      <param name="itemId">A numerical identifier for the item to get the caption for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewCaptionProvider.GetEditableCaption(System.Int32)">
      <summary>Retrieves the caption, which can be edited, of the specified node in Server Explorer.</summary>
      <returns>The caption of the specified item.</returns>
      <param name="itemId">A numerical identifier for the item to get the caption for.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewCommandProvider">
      <summary>Provides the ability to implement commands, specifically custom commands, for nodes in a data view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewCommandProvider.CreateCommand(System.Int32,System.ComponentModel.Design.CommandID)">
      <summary>Creates a menu command for a Server Explorer menu item.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing a menu command item.</returns>
      <param name="itemId">The identifier of the item in the data view hierarchy on which this command should be invoked.</param>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object instance uniquely identifying the command associated with the specified item in the data view hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewCommandProvider.CreateSelectionCommand(System.ComponentModel.Design.CommandID)">
      <summary>Creates a selection menu command for multiple nodes in Server Explorer.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing a menu command item, or null if no command was created.</returns>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object instance uniquely identifying the command associated with the specified item in the data view hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewCommandProvider.UpdateCommandStatus(System.ComponentModel.Design.MenuCommand)">
      <summary>Updates the status of the specified menu command.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing the command to update.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider">
      <summary>Provides the ability to open a document, get a document moniker, and perform other actions pertaining to a document in the Visual Studio Sever Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider.CanOpen(System.Int32,System.Guid)">
      <summary>When implemented by a class, indicates whether a document can be opened for the specified node in the data view and for the given logical view.</summary>
      <returns>true if a document can be opened; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node.</param>
      <param name="logicalView">A unique identifier of a logical view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider.FindNode(System.String,System.Boolean)">
      <summary>When implemented by a class, searches for a node in the data view that corresponds to the specified document moniker. Optionally, searches child nodes that have not been expanded yet.</summary>
      <returns>An integer value that identifies the specified node in the data view, or -1 if the node is not found.</returns>
      <param name="documentMoniker">A document moniker.</param>
      <param name="searchUnpopulatedChildren">Specifies whether to search child nodes that have not been expanded yet (true), or not (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider.GetContext(System.Int32)">
      <summary>When implemented by a class, retrieves the service provider representing the context of the current document in the data view.</summary>
      <returns>An <see cref="T:System.IServiceProvider" /> object representing the context of the current document in the data view.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider.GetMoniker(System.Int32)">
      <summary>When implemented by a class, retrieves the document moniker for the specified node in the data view.</summary>
      <returns>The document moniker.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider.GetPriority(System.Int32)">
      <summary>When implemented by a class, gets the priority level of the specified document within the data view hierarchy.</summary>
      <returns>A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY" /> enumeration specifying the priority level of the specified document within the data view hierarchy.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider.GetSaveName(System.Int32)">
      <summary>When implemented by a class, gets the name of the specified document for use when saving a new document.</summary>
      <returns>A string representing the document name for use when saving the document, or null if there is no such name.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider.IsSupported(System.Int32)">
      <summary>When implemented by a class, indicates whether a document is supported for the specified node in the data view.</summary>
      <returns>true if the document is supported; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider.Open(System.Int32,System.Guid,System.Object,System.Boolean)">
      <summary>When implemented by a class, opens the specified document in the given logical view. The document may be populated with existing data and may be hidden.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object representing the open document window.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
      <param name="logicalView">A unique identifier of a logical view.</param>
      <param name="existingDocumentData">Any existing data to be included in the document.</param>
      <param name="doNotShowWindow">A Boolean value specifying whether to hide the document window (true) or not (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider.ShowMoniker(System.Int32)">
      <summary>When implemented by a class, indicates whether the document moniker is to be displayed on the specified document.</summary>
      <returns>true if the moniker is to be displayed; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider2">
      <summary>Provides the ability to check the state of or save the document in the Visual Studio Server Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider2.IsDirty(System.Int32,System.Object)">
      <summary>When implemented by a class, indicates whether the specified document has data that is modified and is not saved yet.</summary>
      <returns>true if the document has data that is modified and is not saved yet; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
      <param name="documentData">The data contained in the document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDocumentProvider2.Save(System.Int32,System.Object,Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String)">
      <summary>When implemented by a class, saves the specified document.</summary>
      <returns>true if the document was saved, false if the save operation failed.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
      <param name="documentData">The data contained in the document.</param>
      <param name="saveFlags">A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS" /> enumeration specifying the type of save operation.</param>
      <param name="silentSaveAsName">A new document name for use when saving without prompting the user for a new name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDragSourceProvider">
      <summary>Provides the ability to drag selected nodes in a data view hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDragSourceProvider.CreateDataObject">
      <summary>When implemented by a class, creates a data object that contains a copy of the dragged node and that will be stored in the Clipboard.</summary>
      <returns>An <see cref="T:System.Windows.Forms.IDataObject" /> object containing a copy of the information to be transferred.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDragSourceProvider.GetAllowedEffects(System.Windows.Forms.IDataObject)">
      <summary>When implemented by a class, retrieves the allowed drag-and-drop effects when a node is dragged in the data view, such as copying, moving, or linking.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DragDropEffects" /> object containing the allowed drag-and-drop effects, such as whether the data is copied, moved, or linked.</returns>
      <param name="dataObject">An <see cref="T:System.Windows.Forms.IDataObject" /> object containing a copy of the information to be transferred.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDragSourceProvider.OnDropped(System.Windows.Forms.IDataObject,System.Windows.Forms.DragDropEffects)">
      <summary>When implemented by a class, handles the drop operation.</summary>
      <param name="dataObject">An <see cref="T:System.Windows.Forms.IDataObject" /> object containing a copy of the information to be transferred.</param>
      <param name="effect">A <see cref="T:System.Windows.Forms.DragDropEffects" /> object specifying the drag-and-drop effects, such as whether the data is copied, moved, or linked.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDragSourceProvider.OnGiveFeedback(System.Windows.Forms.IDataObject,System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>When implemented by a class, raises the <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> event.</summary>
      <param name="dataObject">A <see cref="T:System.Windows.Forms.IDataObject" /> object containing a copy of the information to be transferred.</param>
      <param name="e">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDragSourceProvider.OnQueryContinueDrag(System.Windows.Forms.IDataObject,System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>When implemented by a class, raises the <see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /> event.</summary>
      <param name="dataObject">An <see cref="T:System.Windows.Forms.IDataObject" /> object containing a copy of the information to be transferred.</param>
      <param name="e">A <see cref="T:System.Windows.Forms.QueryContinueEventArgs" /> containing the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDropTargetProvider">
      <summary>Represents the ability to drop data on nodes in a data view hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDropTargetProvider.AllowDrop(System.Int32)">
      <summary>When implemented by a class, indicates whether the drop operation is allowed on the specified node.</summary>
      <returns>true if the drop operation is allowed; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node in the data view hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDropTargetProvider.OnDragDrop(System.Int32,System.Windows.Forms.DragEventArgs)">
      <summary>When implemented by a class, raises the <see cref="E:System.Windows.Forms.Control.DragDrop" /> event.</summary>
      <param name="itemId">A numerical identifier for the node in the data view hierarchy.</param>
      <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewDropTargetProvider.OnDragOver(System.Int32,System.Windows.Forms.DragEventArgs)">
      <summary>When implemented by a class, raises the <see cref="E:System.Windows.Forms.Control.DragOver" /> event.</summary>
      <param name="itemId">A numerical identifier for the node in the data view hierarchy.</param>
      <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> containing the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy">
      <summary>Represents the ability of a provider to manipulate a Server Explorer connection through its implementation as a data view hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.CreateNewItem">
      <summary>Creates a new node in the data view hierarchy.</summary>
      <returns>The item ID of the newly created node.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.CreateNewItems(System.Int32)">
      <summary>Creates the specified number of new nodes in the data view hierarchy.</summary>
      <returns>An array containing the item IDs of the newly created nodes.</returns>
      <param name="count">The number of nodes to create.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="count" /> parameter is less than zero.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.CurrentView">
      <summary>Gets the current view of the data view hierarchy.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewInfo" /> object representing the current view.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.DelayInsertItem(System.String,Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionInfo,System.Int32,System.Object[])">
      <summary>Adds the specified node to the queue of nodes to be inserted at a later time, if the parent node has not been expanded yet or is not created. Otherwise, inserts the specified node immediately.</summary>
      <returns>true if the new node is inserted immediately; false if the new node is placed in queue for delayed insert or is not inserted immediately.</returns>
      <param name="parentFullName">The full name of the new node's parent.</param>
      <param name="childSelectionInfo">The selection of child nodes to insert beneath the new node.</param>
      <param name="newItemId">A numerical identifier for the new node to insert.</param>
      <param name="identifier">An array containing identifier parts that represent the new node.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parentFullName" /> or <paramref name="childSelectionInfo" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.DelayInsertItem(System.String,System.String,System.Int32,System.Object[])">
      <summary>Adds the specified node to the queue of nodes to be inserted at a later time, if the parent node has not been expanded yet or is not created. Otherwise, inserts the specified node immediately.</summary>
      <returns>true if the new node is inserted immediately; false if the new node is placed in queue for delayed insert or is not inserted immediately.</returns>
      <param name="parentFullName">The full name of the new node's parent.</param>
      <param name="typeName">The name of the new node's type.</param>
      <param name="newItemId">A numerical identifier for the new node to insert.</param>
      <param name="identifier">An array containing identifier parts that represent the new node.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parentFullName" /> or <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.DiscardItem(System.Int32)">
      <summary>Removes the specified node from Server Explorer and de-allocates its corresponding object from memory.</summary>
      <returns>true if node is removed; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node to remove.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.ExplorerConnection">
      <summary>Gets the current connection to Server Explorer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection" /> object representing the current connection to Server Explorer.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.GetOtherViewHierarchy(Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection)">
      <summary>Retrieves the data view hierarchy associated with the given Server Explorer connection.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy" /> object representing the data view hierarchy for the given connection.</returns>
      <param name="explorerConnection">The explorer connection for which to get the data view hierarchy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="explorerConnection" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The data provider associated with the <paramref name="explorerConnection" /> parameter differs from the current data provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.GetProviderImplementation``1(System.Type)">
      <summary>Creates an implementation of the generic type T from the specified type.</summary>
      <returns>The provider implementation type, or null if no implementation type is found.</returns>
      <param name="implementationType">A specific implementation type.</param>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.GetViewCommonNodeInfo(System.Int32)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo" /> for the specified node.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewCommonNodeInfo" /> object.</returns>
      <param name="itemId">A numerical identifier for the node.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="itemId" /> parameter is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.InsertItem(System.Int32,Microsoft.VisualStudio.Data.Services.IVsDataViewSelectionInfo,System.Int32,System.Object[])">
      <summary>Inserts the specified node and its child nodes, if any, under the specified parent node.</summary>
      <returns>true if the node was inserted; otherwise, false.</returns>
      <param name="parentItemId">The full name of the new node's parent.</param>
      <param name="childSelectionInfo">The selection of child nodes to insert beneath the new node.</param>
      <param name="newItemId">A numerical identifier for the new node to insert.</param>
      <param name="identifier">An array containing identifier parts that represent the new node.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="childSelectionInfo" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="childSelectionInfo" /> parameter is not a child of the specified parent node.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.InsertItem(System.Int32,System.String,System.Int32,System.Object[])">
      <summary>Inserts the specified node under the specified parent node.</summary>
      <returns>true if the node was inserted; otherwise, false.</returns>
      <param name="parentItemId">The full name of the new node's parent.</param>
      <param name="typeName">The name of the new node's type.</param>
      <param name="newItemId">A numerical identifier for the new node to insert.</param>
      <param name="identifier">An array containing identifier parts that represent the new node.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.IsConnectionInitialized">
      <summary>Gets a value indicating whether the connection to Server Explorer has been initialized.</summary>
      <returns>true if connection has been initialized; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.IsModelInitialized">
      <summary>Gets a value indicating whether the support model is initialized.</summary>
      <returns>true if the support model is initialized; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.IsViewSupportInitialized">
      <summary>Gets a value indicating whether the view support object is initialized.</summary>
      <returns>true if the view support is initialized; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.Model">
      <summary>Gets the existing support model object.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataViewSupportModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.PersistentCommands">
      <summary>Gets a collection of name/value pairs of commands that are associated with the current Server Explorer connection and that are saved in the registry.</summary>
      <returns>A collection of name/value pairs representing the <see cref="T:System.ComponentModel.Design.CommandID" /> objects and the status corresponding to the saved commands.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.PersistentProperties">
      <summary>Gets a collection of name/value pairs of properties that are associated with the current Server Explorer connection and that are saved.</summary>
      <returns>A collection of name/value pairs representing the name of each property and its value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.RemoveItem(System.Int32)">
      <summary>Removes the specified node from Server Explorer and discards it.</summary>
      <returns>true if the node is removed; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.RemoveItem(System.Int32,System.Boolean)">
      <summary>Removes the specified node from Server Explorer. Optionally, discards the specified node.</summary>
      <returns>true if the node is removed; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node to remove.</param>
      <param name="noDiscard">Specifies whether to discard the node (true) or not (false).</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.ServiceProvider">
      <summary>Gets the current data service provider.</summary>
      <returns>An <see cref="T:System.IServiceProvider" /> object representing the current data service provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.SetNewItemSaveName(System.Int32,System.String)">
      <summary>Sets the name for use when saving the specified node.</summary>
      <param name="itemId">A numerical identifier for the new node to remove.</param>
      <param name="saveName">The name for use when saving the specified node.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy.ViewSupport">
      <summary>Gets the view support object associated with the current Server Explorer connection.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewSupport" /> object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewIconProvider">
      <summary>Provides the ability to control the icons for nodes in a data view hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewIconProvider.GetExpandedIcon(System.Int32)">
      <summary>When implemented by a class, retrieves the icon displayed when the specified node is expanded.</summary>
      <returns>An <see cref="T:System.Drawing.Icon" /> object representing the node's icon.</returns>
      <param name="itemId">A numerical identifier of the node for which you want to get the icon.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewIconProvider.GetIcon(System.Int32)">
      <summary>When implemented by a class, retrieves the icon displayed in Server Explorer for the specified node.</summary>
      <returns>An <see cref="T:System.Drawing.Icon" /> object representing the node's icon.</returns>
      <param name="itemId">A numerical identifier of the node for which you want to get the icon.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewIconProvider.IconsChanged">
      <summary>Occurs when any icons have changed in the data view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewSupport">
      <summary>Represents the interface that exposes the ability to retrieve an XML stream that provides a description of one or more data views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewSupport.Close">
      <summary>When implemented by a class, closes the I/O stream to the data view resource.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewSupport.Initialize">
      <summary>When implemented by a class, initializes the data view hierarchy.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewUserContextProvider">
      <summary>Provides the ability to create a user context to indicate which component of Server Explorer has just been selected.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewUserContextProvider.CreateUserContext(System.Int32)">
      <summary>When implemented by a class, creates a user context object for the specified node.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> object for the specified node.</returns>
      <param name="itemId">A numerical identifier of the node in the data view hierarchy.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewUserContextProvider.UserContextChanged">
      <summary>Occurs when the user context changes.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewVisibilityProvider">
      <summary>Provides the ability to control the visibility of nodes in a data view hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewVisibilityProvider.IsVisible(System.Int32)">
      <summary>When implemented by a class, indicates whether the current item is visible.</summary>
      <returns>true if item is visible; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the item in the data view hierarchy.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewVisibilityProvider.VisibilityChanged">
      <summary>Occurs when the item's visibility changes.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE">
      <summary>Contains constants for all the types that a DSRef object can represent.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_NULL">
      <summary>Specifies a null value (0).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_COLLECTION">
      <summary>Specifies a collection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_MULTIPLE">
      <summary>Specifies a multiple DSRef object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_MIXED">
      <summary>Specifies the DSRef object supports mixed mode</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_DATASOURCEROOT">
      <summary>Specifies a data source root.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_FIELD">
      <summary>Specifies a data field.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_TABLE">
      <summary>Specifies a table.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_QUERY">
      <summary>Specifies a query.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_DATABASE">
      <summary>Specifies a database object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_TRIGGER">
      <summary>Specifies a trigger.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_STOREDPROCEDURE">
      <summary>Specifies a stored procedure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_EXTENDED">
      <summary>Specifies an extended type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_SCHEMADIAGRAM">
      <summary>The DSRef object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_VIEW">
      <summary>The DSRef object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_SYNONYM">
      <summary>Specifies a synonym.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_FUNCTION">
      <summary>Specifies a database function.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_PACKAGE">
      <summary>Specifies a package.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_PACKAGEBODY">
      <summary>Specifies a package body.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_RELATIONSHIP">
      <summary>Specifies a database relationship object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_INDEX">
      <summary>Specifies a database index.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_USERDEFINEDTYPE">
      <summary>Specifies a user-defined type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_VIEWTRIGGER">
      <summary>Specifies a database view trigger.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_VIEWINDEX">
      <summary>Specifies a database view index.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_HASFIRSTCHILD">
      <summary>Specifies that the DSRef object has a first child.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_HASNEXTSIBLING">
      <summary>Specifies that the DSRef object has a sibling that can be accessed next.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_HASNAME">
      <summary>Specifies that the DSRef object has a name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_HASMONIKER">
      <summary>Specifies that the DSRef object has a moniker.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_HASOWNER">
      <summary>Specifies that the DSRef object has an owner.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_HASPROP">
      <summary>Specifies that the DSRef object has properties.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE.DSREFTYPE_NODE">
      <summary>Specifies a generic node.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.DSRefConstants">
      <summary>Holds DSRef constants that are used by <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" /> and <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefBuilder" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.DSRefConstants.ClipboardFormat">
      <summary>Specifies the Clipboard format.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.DSRefConstants.DSREFNODEID_NIL">
      <summary>Holds a <see cref="T:System.IntPtr" /> value specifying a node ID NIL value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.DSRefConstants.DSREFNODEID_ROOT">
      <summary>Holds a <see cref="T:System.IntPtr" /> value specifying a node ID ROOT value.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefConsumer">
      <summary>Reads DSRef trees.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefConsumer.GetExtendedType(System.IntPtr)">
      <summary>Retrieves the GUID for the extended type of a specified node.</summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code.</returns>
      <param name="drnidCurr">The DSREFNODEID of the node whose extended type is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefConsumer.GetFirstChildNode(System.IntPtr)">
      <summary>Retrieves the identifier of the first child node in the parent's vector of children for a specified parent node.</summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code.</returns>
      <param name="drnidCurr">The DSREFNODEID of the parent node for which the first child node is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefConsumer.GetMoniker(System.IntPtr)">
      <summary>Retrieves the moniker of the specified node.</summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code.</returns>
      <param name="drnidCurr">The DSREFNODEID of the node whose moniker is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefConsumer.GetName(System.IntPtr)">
      <summary>Retrieves the name of the database object to which the database refers.</summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code.</returns>
      <param name="drnidCurr">The DSREFNODEID of the node whose database object name is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefConsumer.GetNextSiblingNode(System.IntPtr)">
      <summary>Retrieves the identifier of the next sibling node of a specified node.</summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code.</returns>
      <param name="drnidCurr">The DSREFNODEID of the child node of which the sibling node is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefConsumer.GetOwner(System.IntPtr)">
      <summary>Retrieves the schema of the database object to which the database refers.</summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code.</returns>
      <param name="drnidCurr">The DSREFNODEID of the node whose owner schema is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefConsumer.GetProperty(System.IntPtr,System.Guid@)">
      <summary>Retrieves the GUID and Variant property associated with the specified node.</summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code.</returns>
      <param name="drnidCurr">The DSREFNODEID of the node whose property is to be retrieved.</param>
      <param name="guidProp">The REFGUID of the property to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefConsumer.GetTimestamp">
      <summary>Returns the time that the DSRef is persisted.</summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefConsumer.GetType(System.IntPtr)">
      <summary>Retrieves the type of a specified node.</summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code.</returns>
      <param name="drnidCurr">The DSREFNODEID of the node whose type is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefConsumer.GetVersion">
      <summary>Returns the version of the DSRef tree.</summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefProvider">
      <summary>Creates DSRef trees.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefProvider.Clear">
      <summary>Resets a specified tree to an empty state.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefProvider.CreateFirstChildNode(System.IntPtr)">
      <summary>Adds an initial child node to a parent node. </summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code.</returns>
      <param name="drnidCurr">The DSREFNODEID of the parent node for which the first child node is to be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefProvider.CreateNextSiblingNode(System.IntPtr)">
      <summary>Adds another sibling node to a child node.</summary>
      <returns>NOERROR if successful; otherwise, an unspecified failure code. </returns>
      <param name="drnidCurr">The DSREFNODEID of the child node to which the sibling node is to be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefProvider.SetExtendedType(System.IntPtr,System.Guid@)">
      <summary>Sets the extended type for a specified node.</summary>
      <param name="drnidCurr">The DSREFNODEID of the node whose extended property is to be set.</param>
      <param name="pguidType">A reference to the GUID of the extended type to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefProvider.SetMoniker(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IMoniker)">
      <summary>Sets the moniker of a specified node.</summary>
      <param name="drnidCurr">The DSREFNODEID of the node whose moniker is to be set.</param>
      <param name="pIMoniker">A reference to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IMoniker" /> interface that contains the moniker to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefProvider.SetName(System.IntPtr,System.String)">
      <summary>Sets the name of a specified node.</summary>
      <param name="drnidCurr">The DSREFNODEID of the node whose name is to be set.</param>
      <param name="bstrName">A BSTR that contains the name to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefProvider.SetOwner(System.IntPtr,System.String)">
      <summary>Sets the schema name for a specified node.</summary>
      <param name="drnidCurr">The DSREFNODEID of the node whose owner name is to be set.</param>
      <param name="bstrOwnerName">A BSTR that contains the owner name to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefProvider.SetProperty(System.IntPtr,System.Guid@,System.Object)">
      <summary>Sets the GUID and value of the catalog or database property for a specified node.</summary>
      <param name="drnidCurr">The DSREFNODEID of the node whose property is to be set.</param>
      <param name="guidProp">The REFGUID of the property to be set for the specified node.</param>
      <param name="varPropValue">A VARIANT value of the property to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.IDSRefProvider.SetType(System.IntPtr,Microsoft.VisualStudio.Data.Services.SupportEntities.Interop.__DSREFTYPE)">
      <summary>Sets the type of a node to specify the type of database object that the node references.</summary>
      <param name="drnidCurr">The DSREFNODEID of the node whose type is to be set.</param>
      <param name="grfType">A DSREFTYPE enumeration that contains the value of the type to be set for the specified node.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Data.Framework.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Data.Framework</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Data.Framework.ClipboardObject">
      <summary>Represents a clipboard object for the purpose of data transfer. This object interoperates between <see cref="T:System.Windows.Forms.DataObject" />, <see cref="T:System.Runtime.InteropServices.Comtypes.IDataObject" />, and <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.ClipboardObject" /> class based on the standard <see cref="T:System.Windows.Forms.DataObject" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.ClipboardObject" /> class containing the specified data, or wraps an existing instance of the class.</summary>
      <param name="data">The data to be contained in a new clipboard object, or an existing clipboard object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.ClipboardObject" /> class containing the specified data in the specified format.</summary>
      <param name="format">The class type associated with the data. See <see cref="T:System.Windows.Forms.DataFormats" /> for the predefined formats. </param>
      <param name="data">The data to store.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetData(System.String)">
      <summary>Retrieves the data stored in the clipboard object in the specified format.</summary>
      <returns>The data stored in the clipboard object in the specified format.</returns>
      <param name="format">The class type associated with the data. See <see cref="T:System.Windows.Forms.DataFormats" /> for the predefined formats. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetData(System.String,System.Boolean)">
      <summary>Retrieves the data stored in the clipboard object in the specified format, using an automated conversion parameter to determine whether to convert the data to the format.</summary>
      <returns>The data stored in the clipboard object in the specified format.</returns>
      <param name="format">The class type associated with the data. See <see cref="T:System.Windows.Forms.DataFormats" /> for the predefined formats. </param>
      <param name="autoConvert">Specifies whether to convert the data to the specified format (true) or not (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetData(System.Type)">
      <summary>Retrieves the data stored in the clipboard object in the specified format.</summary>
      <returns>The data stored in the clipboard object in the specified format.</returns>
      <param name="format">The class type associated with the data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetDataPresent(System.String)">
      <summary>Indicates whether data stored in the clipboard object can be converted to or is associated with the specified format.</summary>
      <returns>true if the data can be converted to or is associated with the specified format; otherwise, false.</returns>
      <param name="format">The class type associated with the data. See <see cref="T:System.Windows.Forms.DataFormats" /> for the predefined formats. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetDataPresent(System.String,System.Boolean)">
      <summary>Indicates whether data stored in the clipboard object can be converted to or is associated with the specified format, using an automatic conversion parameter to determine whether to convert the data to the format.</summary>
      <returns>true if the data can be converted to or is associated with the specified format; otherwise, false.</returns>
      <param name="format">The class type associated with the data. See <see cref="T:System.Windows.Forms.DataFormats" /> for the predefined formats. </param>
      <param name="autoConvert">Specifies whether to check whether the data can be converted to the specified format (true), or check whether the data is in the specified format (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetDataPresent(System.Type)">
      <summary>Indicates whether data stored in the clipboard object can be converted to or is associated with the specified format.</summary>
      <returns>true if the data can be converted to or is associated with the specified format; otherwise, false.</returns>
      <param name="format">The class type associated with the data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetFormats">
      <summary>Retrieves a list of all formats that are supported for the data stored in the clipboard object.</summary>
      <returns>An array of string values representing all formats that are supported for the data stored in the clipboard object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetFormats(System.Boolean)">
      <summary>Retrieves a list of all formats that are supported for the data stored in the clipboard object, using an automatic conversion parameter to determine whether to retrieve only native data formats or all formats that the data can be converted to.</summary>
      <returns>An array of string values representing all formats that are supported for the data stored in the clipboard object.</returns>
      <param name="autoConvert">Specifies whether to retrieve all formats that the data can be converted to or is associated with (true), or to retrieve only the native data formats (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)">
      <summary>Creates a connection between the clipboard object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the advisory connection was created, E_NOTIMPL if the clipboard object does not wrap an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> object (from the Microsoft.VisualStudio.OLE.Interop namespace), or an error code.</returns>
      <param name="pFormatetc">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.</param>
      <param name="ADVF">A value from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ADVF" /> enumeration that specifies a group of flags for controlling the advisory connection.</param>
      <param name="pAdvSink">An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IAdviseSink" /> object pointing to the advisory sink that will receive the change notification.</param>
      <param name="pdwConnection">Out parameter. When this method returns, this parameter contains a token that identifies this connection. You can use this token later to delete the advisory connection by passing it to <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DUnadvise(System.UInt32)" />. If this value is zero, the connection was not established. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DUnadvise(System.UInt32)">
      <summary>Removes a notification connection that has been established.</summary>
      <param name="dwConnection">A token that specifies the connection to remove. Use the value returned by <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)" /> when the connection was originally established.</param>
      <exception cref="T:System.NotImplementedException">The current clipboard object does not wrap an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> (from the Microsoft.VisualStudio.OLE.Interop namespace).</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#EnumDAdvise(Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA@)">
      <summary>Creates an object that can be used to enumerate the current advisory connections.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the enumerator object is successfully instantiated or there are no connections, OLE_E_ADVISENOTSUPPORTED error if the clipboard object does not wrap an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> (from the Microsoft.VisualStudio.OLE.Interop namespace), or an error code.</returns>
      <param name="ppenumAdvise">Out parameter. When this method returns, contains a value from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA" /> enumeration that receives the interface reference to the new enumerator object. If the implementation sets <paramref name="ppenumAdvise" /> to null, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#EnumFormatEtc(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC@)">
      <summary>Creates an object for enumerating the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structures for a data object. These structures are used in calls to <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" /> or <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)" />.</summary>
      <returns>This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKThe enumerator object was successfully created.E_NOTIMPLThe direction specified by <paramref name="dwDirection" /> is not supported.OLE_S_USEREGRequests that OLE enumerate the formats from the registry.</returns>
      <param name="dwDirection">A value from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.DATADIR" /> enumeration that specifies the direction of the data.</param>
      <param name="ppenumFormatEtc">Out parameter. When this method returns, contains a reference to an enumerator object used to enumerate <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structures for a data object.</param>
      <exception cref="T:System.NotImplementedException">The current clipboard object does not wrap an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> (from the Microsoft.VisualStudio.OLE.Interop namespace), and the call through the System.Runtime.InteropServices.ComTypes.IDataObject interface failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetCanonicalFormatEtc(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
      <summary>Provides a standard <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure that is logically equivalent to a more complex structure. Use this method to determine whether two different <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structures return the same data, removing the need for duplicate rendering.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_FAIL, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKThe returned FORMATETC structure is different from the one that was passed.DATA_S_SAMEFORMATETCThe FORMATETC structures are the same and a null reference is returned in the <paramref name="pformatetcOut" /> parameter.DV_E_LINDEXThere is an invalid value for <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="pformatectIn" /> parameter.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="pformatectIn">A reference to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call, such as <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" />. The <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.tymed" /> member is not significant in this case and should be ignored.</param>
      <param name="pformatetcOut">When this method returns, contains a pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to <paramref name="pformatectIn" />. The caller must allocate this structure and the GetCanonicalFormatEtc method must fill in the data. To retrieve data in a subsequent call, such as <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" />, the caller uses the supplied value of <paramref name="pformatetcOut" />, unless the value supplied is null. This value is null if the method returns DATA_S_SAMEFORMATETC. The <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.tymed" /> member is not significant in this case and should be ignored. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
      <summary>Obtains data from a source data object. This method is called by a data consumer. It renders the data described in the specified <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure and transfers it through the specified <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure. The caller then assumes responsibility for releasing the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure.</summary>
      <param name="pformatetcIn">A reference to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.</param>
      <param name="pRemoteMedium">When this method returns, contains a reference to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure that indicates the storage medium containing the returned data through its <see cref="F:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM.tymed" /> member, and the responsibility for releasing the medium through the value of its <see cref="F:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM.pUnkForRelease" /> member. If <see cref="F:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM.pUnkForRelease" /> is null, the receiver of the medium is responsible for releasing it; otherwise, pUnkForRelease points to the IUnknown interface on the appropriate object so its Release method can be called. The medium must be allocated and filled in by this method. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the <paramref name="pformatetcIn" /> and/or <paramref name="pRemoteMedium" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the length of the <paramref name="pformatetcIn" /> and/or <paramref name="pRemoteMedium" /> structures are zero.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetDataHere(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
      <summary>Obtains data from a source data object. This method, which is called by a data consumer, differs from the <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" /> method in that the caller must allocate and free the specified storage medium.</summary>
      <param name="pFormatetc">A reference to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.tymed" />, and only the following <see cref="T:Microsoft.VisualStudio.OLE.Interop.TYMED" /> values are valid: TYMED_ISTORAGE, TYMED_ISTREAM, TYMED_HGLOBAL, and TYMED_FILE.</param>
      <param name="pRemoteMedium">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" />, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by this method. The caller must also free the medium. The implementation of this method must always supply a value of null for the pUnkForRelease member of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure that this parameter points to.</param>
      <exception cref="T:System.ArgumentNullException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the <paramref name="pFormatetc" /> and/or <paramref name="pRemoteMedium" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the length of the <paramref name="pFormatetc" /> and/or <paramref name="pRemoteMedium" /> structures are zero.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#QueryGetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
      <summary>Determines whether the data object is capable of rendering the data described in the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure. Objects attempting a paste or drop operation can call this method before calling <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" /> to get an indication of whether the operation will be successful.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKA subsequent call to GetData will probably be successful.DV_E_LINDEXThere is an invalid value for <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="pFormatetc" /> parameter.DV_E_TYMEDThere is an invalid <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.tymed" /> value.DV_E_DVASPECTThere is an invalid <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.dwAspect" /> value.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="pFormatetc">A reference to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use for the query.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)">
      <summary>Transfers data to the object that implements this method. This method is called by an object that contains a data source.</summary>
      <param name="pFormatetc">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" />  structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.</param>
      <param name="pmedium">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure, passed by reference, that defines the storage medium in which the data is being passed.</param>
      <param name="fRelease">true to specify that the data object called, which implements SetData, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false to specify that the caller retains ownership of the storage medium, and that the data object called uses the storage medium for the duration of the call only.</param>
      <exception cref="T:System.ArgumentNullException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the <paramref name="pFormatetc" /> and/or <paramref name="pmedium" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the length of the <paramref name="pFormatetc" /> and/or <paramref name="pmedium" /> structure is zero.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.SetData(System.Object)">
      <summary>Adds data to the clipboard object.</summary>
      <param name="data">The data to store.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.SetData(System.String,System.Boolean,System.Object)">
      <summary>Adds data to the clipboard object.</summary>
      <param name="format">The format of the data to set. See <see cref="T:System.Windows.Forms.DataFormats" /> for predefined formats.</param>
      <param name="autoConvert">true to allow the data to be converted to another format; otherwise, false.</param>
      <param name="data">The data to store.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.SetData(System.String,System.Object)">
      <summary>Adds data to the clipboard object in the specified format.</summary>
      <param name="format">The format of the data to set. See <see cref="T:System.Windows.Forms.DataFormats" /> for predefined formats.</param>
      <param name="data">The data to store.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.SetData(System.Type,System.Object)">
      <summary>Adds data to the clipboard object, using the specified type as the format.</summary>
      <param name="format">The format of the data to set. See <see cref="T:System.Windows.Forms.DataFormats" /> for predefined formats.</param>
      <param name="data">The data to store.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>Creates a connection between the clipboard object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following: ValueDescriptionS_OKThe advisory connection was created.E_NOTIMPLThis method is not implemented on the data object.DV_E_LINDEXThere is an invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="pFormatetc" /> parameter.OLE_E_ADVISENOTSUPPORTEDThe data object does not support change notification.</returns>
      <param name="pFormatetc">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.</param>
      <param name="advf">A value from the <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> enumeration that specifies a group of flags for controlling the advisory connection.</param>
      <param name="adviseSink">An <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> object pointing to the advisory sink that will receive the change notification.</param>
      <param name="connection">Out parameter. When this method returns, this parameter contains a token that identifies this connection. You can use this token later to delete the advisory connection by passing it to <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#DUnadvise(System.Int32)" />. If this value is zero, the connection was not established. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#DUnadvise(System.Int32)">
      <summary>Removes a notification connection that had been previously established.</summary>
      <param name="connection">A token that specifies the connection to remove. Use the value returned by <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)" /> when the connection was originally established.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Creates an object that can be used to enumerate the current advisory connections.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the enumerator object is successfully instantiated or there are no connections, OLE_E_ADVISENOTSUPPORTED error if the clipboard object does not support advisory notifications, or E_OUTOFMEMROY.</returns>
      <param name="enumAdvise">Out parameter. When this method returns, this parameter contains a value from the <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> enumeration that receives the interface reference to the new enumerator object. If the implementation sets <paramref name="enumAdvise" /> to null, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>Creates an object for enumerating the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures for a data object. These structures are used in calls to <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> or <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
      <returns>This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following: ValueDescriptionS_OKThe enumerator object was successfully created.E_NOTIMPLThe direction specified by the <paramref name="direction" /> parameter is not supported.OLE_S_USEREGRequests that OLE enumerate the formats from the registry.</returns>
      <param name="direction">A value from the <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> enumeration that specifies the direction of the data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Provides a standard <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure that is logically equivalent to a more complex structure. Use this method to determine whether two different <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures return the same data, removing the need for duplicate rendering.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKThe returned FORMATETC structure is different from the one that was passed.DATA_S_SAMEFORMATETCThe FORMATETC structures are the same and a null reference is returned in the <paramref name="formatOut" /> parameter.DV_E_LINDEXThere is an invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="formatIn" /> parameter.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="formatIn">A reference to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call, such as <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. The <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> member is not significant in this case and should be ignored.</param>
      <param name="formatOut">When this method returns, this parameter contains a pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to <paramref name="pformatectIn" />. The caller must allocate this structure, and the GetCanonicalFormatEtc method must fill in the data. To retrieve data in a subsequent call, such as <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, the caller uses the supplied value of <paramref name="pformatetcOut" />, unless the value supplied is null. This value is null if the method returns DATA_S_SAMEFORMATETC. The <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> member is not significant in this case and should be ignored. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. This method is called by a data consumer. It renders the data described in the specified <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure and transfers it through the specified <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure. The caller then assumes responsibility for releasing the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure.</summary>
      <param name="format">A reference to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.</param>
      <param name="medium">When this method returns, this parameter contains a reference to the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure that indicates the storage medium containing the returned data through its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> member, and the responsibility for releasing the medium through the value of its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member. If <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> is null, the receiver of the medium is responsible for releasing it; otherwise, pUnkForRelease points to the IUnknown interface on the appropriate object so that its Release method can be called. The medium must be allocated and filled in by this method. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. This method, which is called by a data consumer, differs from the <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> method in that the caller must allocate and free the specified storage medium.</summary>
      <param name="format">A reference to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />, and only the following <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> values are valid: TYMED_ISTORAGE, TYMED_ISTREAM, TYMED_HGLOBAL, or TYMED_FILE.</param>
      <param name="medium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by this method. The caller must also free the medium. The implementation of this method must always supply a value of null for the pUnkForRelease member of the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure that this parameter points to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Determines whether the data object is capable of rendering the data described in the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure. Objects attempting a paste or drop operation can call this method before calling <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> to get an indication of whether the operation will be successful.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKA subsequent call to GetData will probably be successful.DV_E_LINDEXThere is an invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="format" /> parameter.DV_E_TYMEDThere is an invalid <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> value.DV_E_DVASPECTThere is an invalid <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> value.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="format">A reference to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use for the query.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>Transfers data to the object that implements this method. This method is called by an object that contains a data source.</summary>
      <param name="formatIn">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.</param>
      <param name="medium">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure, passed by reference, that defines the storage medium in which the data is being passed.</param>
      <param name="release">true to specify that the data object called, which implements SetData, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false to specify that the caller retains ownership of the storage medium, and that the data object called uses the storage medium for the duration of the call only.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand">
      <summary>Enables executing data commands in an asynchronous manner.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand" /> class. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand" /> object with an <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object that is set on the inherited <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1" /> object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object that is set on the inherited <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1" />  object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.CancelAsync(System.Object)">
      <summary>Cancels the asynchronous call, returning immediately.</summary>
      <param name="userState">A unique operation ID for the operation to cancel. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveParametersAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32,System.Object)">
      <summary>Derives, in an asynchronous manner, a set of parameters for use with a specified command.</summary>
      <param name="command">Command for which the parameters are derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">A unique identifier for the asynchronous process.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> or the <paramref name="userState" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveParametersCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.DeriveParametersAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveSchemaAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>Derives, in an asynchronous manner, the schema of the specified command.</summary>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> or <paramref name="userState" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveSchemaCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.DeriveSchemaAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>Executes a command in an asynchronous manner.</summary>
      <param name="command">The command to be executed.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> or the <paramref name="userState" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.ExecuteAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteWithoutResultsAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>Executes, in an asynchronous manner, a command that does not return any results beyond an integer value indicating status.</summary>
      <param name="command">The command to be executed.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> or the <paramref name="userState" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteWithoutResultsCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.ExecuteWithoutResultsAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnCancel(System.Object)">
      <summary>Dispatches the asynchronous cancel operation to the appropriate synchronous method.</summary>
      <param name="userState">The unique identifier of an asynchronous operation to cancel.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnDeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)">
      <summary>Dispatches the asynchronous derive parameters operation to the synchronous <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method call.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects. Each object represents a parameter that is derived from the command.</returns>
      <param name="command">Command for which the parameters are derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnDeriveParametersCompleted(Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs{Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[]})">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveParametersCompleted" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnDeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Dispatches the asynchronous derive schema operation to the synchronous <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method call.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnDeriveSchemaCompleted(Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs{Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader})">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveSchemaCompleted" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnExecute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Dispatches the asynchronous execute operation to the synchronous <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method call.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnExecuteCompleted(Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs{Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader})">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteCompleted" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Dispatches the asynchronous execute-without-results operation to the synchronous <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnExecuteWithoutResultsCompleted(Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs{System.Int32})">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteWithoutResultsCompleted" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs`1" />  object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnPrepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Dispatches the asynchronous prepare operation to the synchronous <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method call.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> methods by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnPrepareCompleted(Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs{System.String})">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.PrepareCompleted" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs`1" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.PrepareAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>Prepares, in an asynchronous manner, the specified command to be executed against the data source; the command may then be executed multiple times, with varying parameters.</summary>
      <param name="command">The command to be prepared.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects as command parameters.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.PrepareCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.PrepareAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataClientObject`1">
      <summary>Represents a client wrapper object that interacts with an underlying provider object.</summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataClientObject`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.Create(System.IServiceProvider,`0)">
      <summary>Creates a new data client object.</summary>
      <returns>The data client object of the specified generic type.</returns>
      <param name="serviceProvider">The service provider.</param>
      <param name="providerObj">The underlying provider object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.GetInstanceOfType(System.Type)">
      <summary>Retrieves an instance of the specified support entity.</summary>
      <returns>An instance of the specified support entity.</returns>
      <param name="type">The type of the support entity to get an instance of.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.Microsoft#VisualStudio#Data#Core#IVsDataClientObject{T}#Initialize(`0)">
      <summary>Initializes the data client object with the specified provider.</summary>
      <param name="providerObj">The provider to initialize the data client with.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.ProviderObject">
      <summary>Gets the underlying provider object.</summary>
      <returns>The underlying provider object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.System#IServiceProvider#GetService(System.Type)">
      <summary>Retrieves the service corresponding to the service type specified.</summary>
      <returns>A service object that corresponds to the service type specified.</returns>
      <param name="serviceType">The type of service to return.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataCommand">
      <summary>Provides the ability to build and execute data commands of various types against data sources, and to retrieve read-only results or a command status code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataCommand" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataCommand" /> class together with a data connection object.</summary>
      <param name="connection">A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> connection object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.CreateParameter">
      <summary>Creates a parameter object that can be passed into the <see cref="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" />, <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" />, <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" />, or <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])" /> methods on a <see cref="T:Microsoft.VisualStudio.Data.Framework.DataCommand" /> instance.</summary>
      <returns>A new <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> object instance.</returns>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String)">
      <summary>Derives the parameters that can be specified for a given command.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects. Each object represents a parameter that is derived from the command.</returns>
      <param name="command">A command from which to derive parameters specific to a data source. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Derives the parameters that can be specified for a given command.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects. Each object represents a parameter derived from the command.</returns>
      <param name="command">A command from which to derive parameters specific to a data source. </param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)">
      <summary>Derives the parameters that can be specified for a given command.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects. Each object represents a parameter derived from the command.</returns>
      <param name="command">A command from which to derive parameters specific to a data source. </param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the parameter derivation and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String)">
      <summary>Derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema that is specific to a data source. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema specific to a data source. </param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>Derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema specific to a data source. </param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema specific to a data source. </param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String)">
      <summary>Executes a specified command and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Executes a specified command and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>Executes a specified command, optionally with parameters, and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Executes a specified command, optionally with parameters, and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String)">
      <summary>Executes a command but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Executes a command but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>Executes a command, optionally with parameters, but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Executes a command, optionally with parameters, but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Prepare(System.String)">
      <summary>Prepares the specified command on the data source to be executed; the command can then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> method by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Prepares the specified command on the data source to be executed; the command can then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> method by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>Prepares the specified command on the data source to be executed; the command can then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> method by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Prepares the specified command on the data source to be executed; the command can then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> method by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1">
      <summary>Represents a base implementation of the <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataClientObject`1" /> interface for data connection services.</summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1.Connection">
      <summary>Gets the current data connection associated with the data client service.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the connection to the data source.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1.Create(`0,Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Creates an instance of the specified type for the given provider and data connection.</summary>
      <returns>An instance of the client object of the specified type.</returns>
      <param name="providerObj">The data provider associated with the client object.</param>
      <param name="connection">The data connection associated with the client object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the site.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the site.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer">
      <summary>Provides the ability to compare data connection properties for equivalence.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer.AreEquivalent(Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties)">
      <summary>Compares the specified connection property objects to determine whether they are equivalent and hence provide the same design-time experience.</summary>
      <returns>true if both connection objects are equivalent; otherwise, false.</returns>
      <param name="connectionProperties1">The first <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties" /> object containing the connection properties to compare.</param>
      <param name="connectionProperties2">The second <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties" /> object containing the connection properties to compare.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer.AreEquivalent(System.String,System.String)">
      <summary>Compares the specified connection strings to determine whether they are equivalent and hence provide the same design-time experience.</summary>
      <returns>true if both connection strings are equivalent; otherwise, false.</returns>
      <param name="connectionString1">The first connection string to compare.</param>
      <param name="connectionString2">The second connection string to compare.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString1" /> or the <paramref name="connectionString2" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the data source.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSource" /> object representing the data source.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog">
      <summary>Represents a dialog box that can prompt the user for information when a data connection is being opened.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.ConnectionSupport">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> object on which the data provider should update the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ConnectionString" /> property.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> object instance on which the DDEX provider should update the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ConnectionString" /> property.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.ConnectionUIProperties">
      <summary>Gets the current <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties" /> object instance used in this class.</summary>
      <returns>The current <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties" /> object instance used in this class.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.CreateConnectionUIProperties">
      <summary>Creates a new <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties" /> object instance.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.LoadProperties">
      <summary>Loads properties from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> current object instance used in this class into the dialog box controls.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the current instance of the service provider object used in this class.</summary>
      <returns>The current instance of the service provider object used in this class.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
      <summary>Handles specific actions that occur when the dialog box is closed, such as saving properties from the dialog box controls, saving the new connection string, and opening the connection if the OK button of the dialog box is clicked.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.FormClosingEventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.OnLoad(System.EventArgs)">
      <summary>Loads properties from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> current object instance used in this class into the dialog box controls.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> object containing the load event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.SaveProperties">
      <summary>Saves properties from the prompt dialog box to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> current object instance used in this class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.ServiceProvider">
      <summary>Gets the current instance of the service provider object used in this class.</summary>
      <returns>The current instance of the service provider object used in this class.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.ShowDialog(Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport)">
      <summary>Displays the prompt dialog box, given a specific <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> instance.</summary>
      <returns>A string that is the new value of the connection string containing the completed information that was entered by the user.</returns>
      <param name="connectionSupport">An instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> class that contains an existing, incomplete connection string that should be updated by this dialog box.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionSupport" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties">
      <summary>Provides support for the parsing and formatting of connection strings containing data connection properties, as well as for strongly typed property storage, custom attributes, and synonyms.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.#ctor">
      <summary>Initializes a non-parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> class that provides the ability to compare property names.</summary>
      <param name="keyComparer">A comparer of property names.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Char,System.Char)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> class that provides the ability to compare property names.</summary>
      <param name="keyComparer">A comparer of property names.</param>
      <param name="keyValueSeparator">A character designating the separation between a key and a value.</param>
      <param name="entrySeparator">A character designating the separation between the key/value pairs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Add(System.String,System.Object)">
      <summary>Adds a new property to the current connection properties collection.</summary>
      <param name="key">Name of the property being added.</param>
      <param name="value">Value of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The data connection properties are not extensible.</exception>
      <exception cref="T:System.ArgumentException">The property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Add(System.String,System.Type,System.Object)">
      <summary>Adds a new property to the current connection properties collection.</summary>
      <param name="key">Name of the property being added.</param>
      <param name="type">A <see cref="T:System.Type" /> object representing the type of the property.</param>
      <param name="value">Value of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The data connection properties are not extensible.</exception>
      <exception cref="T:System.ArgumentException">The property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.AddProperty(System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>Dynamically adds a new property to the collection of properties natively recognized by the current instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> class.</summary>
      <returns>The descriptor of the newly added property.</returns>
      <param name="descriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object that provides a description of this property and its characteristics.</param>
      <param name="attributes">A set of attributes to apply to the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="descriptor" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.AddProperty(System.String,System.Type,System.Attribute[])">
      <summary>Dynamically adds a new property to the collection of properties natively recognized by this data connection properties instance.</summary>
      <returns>The descriptor of the newly added property.</returns>
      <param name="name">The property name.</param>
      <param name="type">The data type of the property.</param>
      <param name="attributes">A set of attributes to attach to the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> and/or <paramref name="type" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The specified property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Tests whether a specified property and its values are present in the current set of connection properties.</summary>
      <returns>true if the specified property and its value are found in the current connection properties collection; otherwise, false.</returns>
      <param name="item">A key/value pair containing the key and value whose presence is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ContainsKey(System.String)">
      <summary>Tests whether a specified property is a member of the current set of connection properties.</summary>
      <returns>true if the specified property is a member of the connection properties collection; otherwise, false.</returns>
      <param name="key">Name of the property whose presence is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the current set of connection properties and their values to the specified array, starting at the specified array index.</summary>
      <param name="array">Array into which the connection property's key/value pairs are copied.</param>
      <param name="arrayIndex">The index in the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Count">
      <summary>Gets the number of existing data connection properties.</summary>
      <returns>The number of existing data connection properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetKeyAsString(System.String)">
      <summary>Formats a property key for placement in a connection string.</summary>
      <returns>The value of the specified property key in a string format suitable for placement in a connection string.</returns>
      <param name="key">The key value to format.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetProperties">
      <summary>Retrieves the collection of descriptors of all currently known properties.</summary>
      <returns>The collection of descriptors of all currently known properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetProperties(System.Attribute[])">
      <summary>Retrieves the collection of descriptors of currently known properties that match a specified set of attributes.</summary>
      <returns>A collection of descriptors of currently known properties that match a specified set of attributes.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter to define which properties to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetProperty(System.String)">
      <summary>Retrieves the descriptor of a property with the specified property name.</summary>
      <returns>A descriptor of a property with the specified property name, or null if no property with the specified name is found.</returns>
      <param name="name">The name of a property for which to retrieve the descriptor.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetSynonyms(System.String)">
      <summary>Retrieves an array list of synonyms for a specified property.</summary>
      <returns>A list of synonyms for a specified property.</returns>
      <param name="key">The name of a property for which to retrieve the list of synonyms.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetValueAsString(System.String)">
      <summary>Formats a property value for placement in a connection string.</summary>
      <returns>The value of the specified property in a string format suitable for placement in a connection string.</returns>
      <param name="key">The name of a property to be formatted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance to its default state, and then sets each property in the specified dictionary.</summary>
      <param name="properties">A dictionary of property name/value pairs with which the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance is configured. This parameter may be null, in which case no properties are configured.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.InitializeProperties">
      <summary>Initializes the set of natively recognized properties for the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.InitializeSynonyms">
      <summary>Initializes the set of synonyms available for each natively recognized property in the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.InitializeValue(System.String,System.Object)">
      <summary>Initializes the value of a specified connection property.</summary>
      <param name="key">The name of a property being initialized.</param>
      <param name="value">The value to which the property is initialized.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.InitializeValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes values for a specified set of properties, using a dictionary of name/value pairs.</summary>
      <param name="values">A dictionary of property name/value pairs.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.IsComplete">
      <summary>Gets a Boolean value indicating whether a given connection string is complete.</summary>
      <returns>true if the connection string is complete; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.IsExtensible">
      <summary>Gets or sets a Boolean value indicating whether the DDEX provider connection properties are extensible.</summary>
      <returns>true if the connection properties are extensible; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.IsSensitive(System.String)">
      <summary>Indicates whether a property contains sensitive information.</summary>
      <returns>true if the property contains sensitive information; otherwise, false.</returns>
      <param name="key">The name of the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Item(System.String)">
      <summary>Gets or sets a value for a specified property of the DDEX provider.</summary>
      <returns>The value associated with the specified property name: DBNull.Value if the property is known but is not set (and has no default), or null if the property is not known.</returns>
      <param name="key">The name of a connection property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">The specified value of a property value cannot be converted to the property type.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Keys">
      <summary>Gets a collection of the current property key names.</summary>
      <returns>A collection of the current property key names.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ModifyProperty(System.String,System.Attribute[])">
      <summary>Modifies an existing property of which the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance is natively aware.</summary>
      <param name="name">The name of a property.</param>
      <param name="attributes">A set of attributes that should be added or modified.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.PropertyChanged" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnection.PropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.OrderedProperties">
      <summary>Gets a collection of property names specifying a reasonable (or necessary) order for the properties when represented in string form.</summary>
      <returns>A collection of property names indicating a reasonable (or necessary) order for the properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Parse(System.String)">
      <summary>Disassembles the components of a connection string into a set of properties in the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</summary>
      <param name="connectionString">A connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.PropertyChanged">
      <summary>Occurs on the occurrence of a change to a connection property.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ReadKeyFromString(System.String,System.Int32@)">
      <summary>Reads a property key name from a connection string starting at a specified index, and then updates the index to point to a position immediately following the property key name.</summary>
      <returns>The substring of the <paramref name="connectionString" /> parameter that represents the property key name, between the input starting index and the end of the property key name.</returns>
      <param name="connectionString">A connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</param>
      <param name="index">An index in this connection string indicating where to start reading the property name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is less than zero or greater than the length of the connection string.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ReadValueFromString(System.String,System.String,System.Int32@)">
      <summary>Reads a property value from a connection string starting at a specified index, converts it to the correct type, and updates the index to point to a position following the property name.</summary>
      <returns>A substring of the <paramref name="connectionString" /> parameter representing the property value between the input starting index and the end of the property name, converted to the correct type.</returns>
      <param name="key">The name of the property key for which a value is being read.</param>
      <param name="connectionString">The connection string from which the value should be read.</param>
      <param name="index">Index in the connection string from which to start reading the value.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> and/or <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.OutOfRangeException">The <paramref name="index" /> parameter is less than zero or greater than the length of the connection string.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Remove(System.String)">
      <summary>Removes a property from the current connection property collection.</summary>
      <returns>true if property is removed; false if the property is not found.</returns>
      <param name="key">Name of the property to be removed from the current set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The data connection properties are not extensible.</exception>
      <exception cref="T:System.ArgumentException">The property cannot be removed because it was not found in the list of extended properties.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.RemoveProperty(System.String)">
      <summary>Removes a natively recognized property from the current collection of properties.</summary>
      <param name="name">The name of a property to be removed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Reset">
      <summary>Resets the values of connection properties to an initial state.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Reset(System.String)">
      <summary>Removes the specified property from the current set of data connection properties.</summary>
      <returns>true if the property was removed; false if the property is not found.</returns>
      <param name="key">The name of the property key for the property to be reset.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ResolveProperty(System.String,System.Boolean)">
      <summary>Looks up the specified property in the list of synonyms and optionally makes this property the primary name for the synonyms collection, if it is not already so.</summary>
      <returns>The specified property as a <see cref="T:System.ComponentModel.PropertyDescriptor" /> object, if it is found in the synonyms list; otherwise, null.</returns>
      <param name="name">The property name of the property to resolve.</param>
      <param name="setAsBaseName">A Boolean value indicating whether to make this property the primary name used as a key into the synonyms collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.SetPropertySynonyms(System.String,System.String[])">
      <summary>Sets or clears the synonyms for the specified property.</summary>
      <param name="baseName">The primary property name used as a key into the synonyms collection.</param>
      <param name="synonyms">Array containing the synonyms corresponding to the primary property name, or null to clear the synonyms for the given property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ShouldPersistProperty(System.String)">
      <summary>Indicates whether a property should be persisted when building a connection string.</summary>
      <returns>false if the specified property is not recognized, is not set, or if it is set to the default value; otherwise, true.</returns>
      <param name="name">The name of a property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds an element as a key/value pair to the current set of connection properties.</summary>
      <param name="item">The key/value pair to add to the dictionary.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all elements from the current set of connection properties.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a Boolean value indicating whether the current <see cref="T:System.Collections.Generic.ICollection`1" /> instance is read-only.</summary>
      <returns>true if the current <see cref="T:System.Collections.Generic.ICollection`1" /> instance is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the specified property from the current set of connection properties.</summary>
      <returns>true if property is removed successfully; false if the property is not found.</returns>
      <param name="item">The key for the element to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retrieves an <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.Generic.KeyValuePair{System.String,System.Object}" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.Generic.KeyValuePair{System.String,System.Object}" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an <see cref="T:System.Collections.IEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Retrieves a collection of custom attributes for the specified object.</summary>
      <returns>An AttributeCollection instance containing the attributes for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Retrieves the class name of the specified object.</summary>
      <returns>The class name of the object, or null if the class does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Retrieves the name of the specified object.</summary>
      <returns>The name of the object, or null if the object does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Retrieves a type converter for the specified object.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> appropriate for the specified object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter" /> for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Retrieves the default event for the specified object.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptor" /> representing the default event for the specified object, or null if this object does not have events.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Retrieves the default property for the specified object.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the default property for this object, or null if this object does not have properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Retrieves an editor of the specified type for this object.</summary>
      <returns>An object of the specified type that is the editor for this object, or null if the editor cannot be found.</returns>
      <param name="editorBaseType">A managed <see cref="T:System.Type" /> representing the editor for this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Retrieves the events for the specified instance of a component.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> object representing the events for the specified component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Retrieves the events for this instance of a component, using the specified attribute array as a filter.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> collection representing the filtered events for the specified component instance.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Retrieves the properties for the specified instance of a component.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> collection representing the properties for this component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Retrieves the properties for the specified instance of a component, using the attribute array as a filter.</summary>
      <returns>A collection of descriptors of currently known properties that match a specified set of attributes.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter to define which properties to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Retrieves an object that contains the property described by the specified property descriptor.</summary>
      <returns>An <see cref="T:System.Object" /> representing the owner of the specified property.</returns>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the property whose owner is to be found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ToDisplayString">
      <summary>Retrieves a string representation of the current set of data connection properties that are suitable for on-screen display.</summary>
      <returns>A string representation of the current set of data connection properties that are suitable for on-screen display.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ToSafeString">
      <summary>Retrieves a string representation of the current set of data connection properties that excludes sensitive properties or properties that should not be persisted.</summary>
      <returns>A string representation of the current set of data connection properties that excludes sensitive properties or properties that should not be persisted.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ToString">
      <summary>Retrieves the default string representation of the current connection properties.</summary>
      <returns>A default string representation of the current connection properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.TryGetValue(System.String,System.Object@)">
      <summary>Retrieves the value of the specified property.</summary>
      <returns>true if the property is found; otherwise, false.</returns>
      <param name="key">The property name to retrieve the value for.</param>
      <param name="value">When this method returns, contains the value that corresponds to the specified property. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Values">
      <summary>Retrieves a collection of the current property values.</summary>
      <returns>A collection of the current property values.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport">
      <summary>Provides properties and methods that enable you to work directly with connections to a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Close">
      <summary>Closes the specified connection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ConnectionString">
      <summary>Gets or sets a string representation of information required to establish a specified data source connection.</summary>
      <returns>A string representation of the data source connection information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ConnectionTimeout">
      <summary>Gets or sets the amount of time to wait when establishing a connection before terminating the attempt and generating a timeout error.</summary>
      <returns>An integer representation of the allowable timeout period.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.CreateService(System.ComponentModel.Design.IServiceContainer,System.Type)">
      <summary>Creates a new service object, specifying the interface service type.</summary>
      <returns>A new service object for the specified type.</returns>
      <param name="container">A service provider object to contain the service.</param>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service to create.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Dispose">
      <summary>Releases all resources held by the data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Dispose(System.Boolean)">
      <summary>Releases all resources held by the data connection.</summary>
      <param name="disposing">Indication of whether both managed and unmanaged resources are to be released (true), or unmanaged resources only (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Finalize">
      <summary>Releases all resources held by the data connection when the data connection support object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Initialize(System.Object)">
      <summary>Initializes the specified connection, optionally from an existing data provider object.</summary>
      <param name="providerObj">An existing data provider object, or null if a new object needs to be created.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.MessageReceived">
      <summary>Occurs when a message is received from the data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.OnMessageReceived(Microsoft.VisualStudio.Data.Services.DataConnectionMessageReceivedEventArgs)">
      <summary>Handles the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.MessageReceived" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionStateChangedEventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.OnStateChanged(Microsoft.VisualStudio.Data.Services.DataConnectionStateChangedEventArgs)">
      <summary>Handles the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.StateChanged" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionStateChangedEventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Open(System.Boolean)">
      <summary>Opens the specified data connection.</summary>
      <returns>true if the connection opened successfully and does not require a prompt; false if the connection is missing required connection information and a prompt should be displayed to obtain the missing information from the user. You should return false only when a provider has implemented the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionPromptDialog" /> interface.</returns>
      <param name="doPromptCheck">Indicates whether the call to this method should return false for specific errors that relate to missing connection information, as opposed to simply throwing an error in all cases of failure. Data providers that do not implement a prompt dialog box (or have their own prompting mechanism) should ignore this parameter and always assume a value of false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ProviderObject">
      <summary>Gets the underlying data provider, which supports the current data connection.</summary>
      <returns>The underlying data provider object for the current data connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ServiceProvider">
      <summary>Gets the global Visual Studio service provider.</summary>
      <returns>An <see cref="T:System.IServiceProvider" /> object representing the global Visual Studio service provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.State">
      <summary>Gets the state of the data connection.</summary>
      <returns>The state of the data connection, based on the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionState" /> enumeration.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.StateChanged">
      <summary>Occurs when the state of the data connection has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector">
      <summary>Provides the ability to customize the behavior of opening a connection when in the context of a connection UI (for example, the data connection dialog box).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector.Connect(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Opens the data connection in the context of a connection UI (for example, the data connection dialog box).</summary>
      <param name="connection">A data connection object representing the connection to the data source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connection" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the site.</summary>
      <returns>An <see cref="T:System.IServiceProvider" /> object representing the site.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector.ServiceProvider">
      <summary>Gets the service provider.</summary>
      <returns>An <see cref="T:System.IServiceProvider" /> object representing the service provider.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl">
      <summary>Enables a custom UI control for editing connection properties in the Data Connection dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.#ctor">
      <summary>Initializers a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.Control">
      <summary>Gets the current user control as a <see cref="T:System.Windows.Forms.UserControl" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.UserControl" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.LoadProperties">
      <summary>Loads the properties of controls on the Data Connection dialog box, such as the data source, user ID, password, and initial catalog.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets or sets the service provider on this <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSiteableObject`1" /> object.</summary>
      <returns>A service provider <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSiteableObject`1" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.ServiceProvider">
      <summary>Gets the current instance of the <see cref="T:System.IServiceProvider" /> object.</summary>
      <returns>The current instance of the <see cref="T:System.IServiceProvider" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.Site">
      <summary>Gets or sets the connection UI properties.</summary>
      <returns>The connection UI properties.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.SiteChanged">
      <summary>Occurs when the site, that is, the connection UI properties, has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataDefaultObject">
      <summary>Provides a way to create default instances of provider objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataDefaultObject.Create``1(System.IServiceProvider)">
      <summary>Creates a data provider.</summary>
      <returns>The data provider of the specified generic type.</returns>
      <param name="serviceProvider">The service provider.</param>
      <typeparam name="T">The type of the parameter.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataMappedObject">
      <summary>Represents a well-known concept for use by a generic designer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMappedObject" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObject.ComputeBaseObject">
      <summary>Computes the base object.</summary>
      <returns>The base object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObject.GetProperty``1(System.String)">
      <summary>Retrieves the value of the specified property associated with the current generic concept.</summary>
      <returns>The property value of the generic type corresponding to the given property name.</returns>
      <param name="name">The name of the property to retrieve.</param>
      <typeparam name="T">The parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObject.GetProperty``1(System.String,``0)">
      <summary>Retrieves the value of the specified property associated with the current generic concept.</summary>
      <returns>The property value of the generic type corresponding to the given property name.</returns>
      <param name="name">The name of the property to retrieve.</param>
      <param name="defaultValue">The default value of the property to retrieve.</param>
      <typeparam name="T">The parameter.</typeparam>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Identifier">
      <summary>Gets the list of identifiers that uniquely identify the current generic data concept.</summary>
      <returns>The list of identifiers that uniquely identify the current generic data concept.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.IsDeleted">
      <summary>Gets a value indicating whether the current generic data concept is deleted.</summary>
      <returns>true if the concept is deleted; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.IsRefreshedObject">
      <summary>Gets a value indicating whether the current generic data object is refreshed, and thus has updated information.</summary>
      <returns>true if the current generic data object is refreshed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the site.</summary>
      <returns>The site.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Name">
      <summary>Gets the name of the generic concept.</summary>
      <returns>The name of the generic concept.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Properties">
      <summary>Gets name/value pairs containing the property names and values associated with the current generic concept.</summary>
      <returns>A collection of name/value pairs containing the property names and values associated with the current generic concept.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Selector">
      <summary>Gets a selector object that allows the retrieval of data source–specific metadata from the data object support XML file.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector" /> object that allows the retrieval of data source–specific metadata from the data object support XML file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObject.ToString">
      <summary>Gets a string representing the current generic concept.</summary>
      <returns>A string representation of the current generic concept.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Type">
      <summary>Gets the type name as a string of the current generic concept.</summary>
      <returns>The type name as a string of the current generic concept.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.UnderlyingObject">
      <summary>Gets the underlying object that is contained by the current generic concept.</summary>
      <returns>The underlying object that is contained by the current generic concept.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter">
      <summary>Provides the ability to convert restrictions passed to the mapped object selector into underlying restrictions to pass to the data source–specific type selector, thus allowing mapped selection. Also allows conversion of members of an underlying data object to members of a mapped object, resulting in mapped representations of data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter" /> class, along with a data connection.</summary>
      <param name="connection">A connection object representing the communication to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.ConvertToMappedMember(System.String,System.String,System.Object[])">
      <summary>Converts the specified member of an underlying data object to its corresponding mapped member.</summary>
      <returns>The value of the mapped member converted from the underlying values.</returns>
      <param name="typeName">The name of the underlying type.</param>
      <param name="mappedMemberName">The name of the mapped member to convert to that belongs to the mapped type.</param>
      <param name="underlyingValues">An array containing the values stored for the data source–specific members that are to be converted to a mapped member value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.ConvertToMappedMember(System.String,System.String,System.Object[],System.Object[])">
      <summary>Converts the specified member of an underlying data object to its corresponding mapped member.</summary>
      <returns>The value of the mapped member converted from the underlying values.</returns>
      <param name="typeName">The name of the underlying type.</param>
      <param name="mappedMemberName">The name of the mapped member to convert to that belongs to the mapped type.</param>
      <param name="underlyingValues">An array containing the values stored for the data source–specific members that are to be converted to a mapped member value.</param>
      <param name="parameters">An array containing the parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.ConvertToUnderlyingRestriction(System.String,System.Int32,System.Object[])">
      <summary>Converts the specified mapped restrictions into underlying restrictions that are data source specific.</summary>
      <returns>The underlying restriction that is converted from the mapped restriction.</returns>
      <param name="mappedTypeName">The name of the mapped type.</param>
      <param name="substitutionValueIndex">Index into the array of substitution values.</param>
      <param name="mappedRestrictions">An array containing the mapped restrictions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.ConvertToUnderlyingRestriction(System.String,System.Int32,System.Object[],System.Object[])">
      <summary>Converts the specified mapped restrictions into underlying restrictions that are data source specific.</summary>
      <returns>The underlying restriction that is converted from the mapped restriction.</returns>
      <param name="mappedTypeName">The name of the mapped type.</param>
      <param name="substitutionValueIndex">Index into the array of substitution values.</param>
      <param name="mappedRestrictions">An array containing the mapped restrictions.</param>
      <param name="parameters">An array containing the parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.Microsoft#VisualStudio#Data#Core#IVsDataSupportObject{T}#Invoke(System.String,System.Object[],System.Object[])">
      <summary>Invokes the specified method on the <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSupportObject`1" /> interface.</summary>
      <returns>The object returned by the invoked method.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="args">An array of arguments to be passed to the invoked method.</param>
      <param name="parameters">An array of parameters to be passed to the invoked method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">One of the following conditions is true: The <paramref name="args" /> parameter is null; the specified method name in the <paramref name="name" /> parameter is equal to one of the following values: "GetSupportedRestrictions", "GetRequiredRestrictions", "GetExpensiveProperties", or "GetOrdering" and the number of arguments in the <paramref name="args" /> array is less than one; the method name is equal to "SelectObjects" and the number of arguments in the <paramref name="args" /> array is less than three; the method name is not valid.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand">
      <summary>Represents an extended <see cref="T:System.ComponentModel.Design.MenuCommand" /> class to support status updates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.#ctor(System.ComponentModel.Design.CommandID)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand" /> class, specifying the command identifier.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.#ctor(System.ComponentModel.Design.CommandID,System.EventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand" /> class, specifying the command identifier and event.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.#ctor(System.ComponentModel.Design.CommandID,System.EventHandler,System.EventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand" /> class, specifying the command identifier and events.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
      <param name="statusHandler">The event to raise to convey status updates.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.Invoke">
      <summary>Invokes the menu command.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.Invoke(System.Object)">
      <summary>Invokes the menu command with the given parameter.</summary>
      <param name="arg">An optional argument for use by the command.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.Text">
      <summary>Retrieves the Text property of the menu command.</summary>
      <returns>Retrieves a <see cref="T:System.String" /> value containing the Text property of the menu command.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.UpdateStatus">
      <summary>Updates the status of the command and raises the appropriate event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter">
      <summary>Provides the ability to convert data source–specific object identifiers from strings to identifier parts, and from identifier parts to strings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter" /> class, specifying a data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.BuildString(System.String,System.String[],Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>Builds a string version of an identifier.</summary>
      <returns>A string version of an identifier.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierParts">An array of identifier parts in the expected format.</param>
      <param name="format">A value from the enumeration <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" />  indicating the format of the string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.ConvertToArray(System.String,System.String)">
      <summary>Converts a formatted string identifier into its equivalent set of identifier parts.</summary>
      <returns>An array containing the separated, unformatted identifier parts as derived from the input identifier.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">A data source object identifier.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.ConvertToString(System.String,System.Object[])">
      <summary>Converts a set of identifier parts into a formatted string identifier.</summary>
      <returns>A string representation made up from the identifier parts and formatted according to the default formatting option.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">An array containing a set of identifier parts for a specified object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.ConvertToString(System.String,System.Object[],Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>Converts a set of identifier parts into a formatted string identifier, using the specified formatting option.</summary>
      <returns>A string representation made up from the identifier parts and formatted as indicated by the specified formatting option.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">An array containing a set of identifier parts for a specified object.</param>
      <param name="format">A value from the enumeration <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" />  indicating the format of the string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.FormatPart(System.String,System.Object,Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>Formats a specified identifier part.</summary>
      <returns>The specified identifier part as a formatted string.</returns>
      <param name="typeName">The name of the data object type.</param>
      <param name="identifierPart">The unformatted value of an identifier part.</param>
      <param name="format">A value from the enumeration <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" />  indicating the format of the string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.SplitIntoParts(System.String,System.String)">
      <summary>Divides a string version of an identifier into a set of identifier parts converted into the expected format.</summary>
      <returns>An array of formatted identifier parts.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">A data source object identifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.UnformatPart(System.String,System.String)">
      <summary>Removes formatting applied to a given identifier part.</summary>
      <returns>The unformatted equivalent of the formatted identifier part.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierPart">A formatted identifier part.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver">
      <summary>Provides the ability to expand and contract an identifier for a specified data object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver" /> class, specifying the data connection object.</summary>
      <param name="connection">A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object containing the data connection string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver.ContractIdentifier(System.String,System.Object[])">
      <summary>Contracts an identifier for a data object with the specified type and complete identifier.</summary>
      <returns>The partial, contracted unique identifier for a data object.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="fullIdentifier">A full identifier of a data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver.ExpandIdentifier(System.String,System.Object[])">
      <summary>Expands an identifier for a data object with the specified type and partial identifier.</summary>
      <returns>The complete, expanded identifier of the data object that matches the partial identifier passed in, or null if the identifier could not be expanded.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="partialIdentifier">A partial identifier of a data object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer">
      <summary>Allows you to compare two data object identifier parts or properties.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer" /> class with the data connection object.</summary>
      <param name="connection">A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object containing the connection string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer.Compare(System.String,System.Object[],System.Int32,System.Object)">
      <summary>Compares one object identifier part with another specified object identifier part.</summary>
      <returns>A value less than zero if the identifier part is less than the specified value; zero if the identifier part is equal to the specified value; a value greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of the identifier type.</param>
      <param name="identifier">An array of data source object identifier parts.</param>
      <param name="identifierPart">The zero-based index into the identifier array indicating which part of the identifier to compare.</param>
      <param name="value">A value to compare the identifier part against.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="identifier" /> parameter is less than zero or greater than or equal to the number of elements in the identifier array.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer.Compare(System.String,System.String,System.Object,System.Object)">
      <summary>Compares a property of a data object with another data object property.</summary>
      <returns>A value less than zero if the identifier part is less than the specified value; zero if the identifier part is equal to the specified value; a value greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="propertyName">The name of a property to compare.</param>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataObjectSelector">
      <summary>Enables getting data source–specific metadata about objects from the object store. The source of the object store is the data object support XML file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectSelector" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectSelector" /> class with the data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the connection to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetExpensiveProperties(System.String)">
      <summary>Retrieves a list of expensive properties from the object store.</summary>
      <returns>A list of expensive properties for the specified type.</returns>
      <param name="typeName">The data source–specific type name for which to retrieve expensive properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetExpensiveProperties(System.String,System.Object[])">
      <summary>Retrieves a list of expensive properties from the object store.</summary>
      <returns>A list of expensive properties for the specified type.</returns>
      <param name="typeName">The data source–specific type name for which to retrieve expensive properties.</param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">One or more values in <paramref name="parameters" /> are not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetMappings(System.Object[])">
      <summary>Returns key/value pairs of mapped property names and their corresponding data source–specific property names.</summary>
      <returns>A collection of key/value pairs of mapped property names and their corresponding data source–specific property names.</returns>
      <param name="mappingParameters">An array of key/value pairs containing the mappings between the mapped property names and their corresponding parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="mappingParameters" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetOrdering(System.String)">
      <summary>Returns the ordering for the specified type as a string of comma-delimited data object names, which specifies the sort order of the data objects returned when objects are selected.</summary>
      <returns>A string of comma-delimited data object names, which specifies the sort order of the data objects returned when objects are selected for the specified type.</returns>
      <param name="typeName">The data source–specific type name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetOrdering(System.String,System.Object[])">
      <summary>Returns the ordering for the specified type as a string of comma-delimited data object names, which specifies the sort order of the data objects returned when objects are selected.</summary>
      <returns>A string of comma-delimited data object names, which specifies the sort order of the data objects returned when objects are selected for the specified type.</returns>
      <param name="typeName">The data source–specific type name.</param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetRequiredRestrictions(System.String)">
      <summary>Retrieves a list of the restrictions that are required when data objects are selected for the specified type.</summary>
      <returns>A list of the restrictions that are required when retrieving data objects for the current type.</returns>
      <param name="typeName">The data source–specific type name for which to get the required restrictions.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetRequiredRestrictions(System.String,System.Object[])">
      <summary>Retrieves a list of the restrictions that are required when data objects are selected for the specified type.</summary>
      <returns>A list of the restrictions that are required when retrieving data objects for the current type.</returns>
      <param name="typeName">The data source–specific type name for which to get the required restrictions.</param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">One or more values in <paramref name="parameters" /> are not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetSupportedRestrictions(System.String)">
      <summary>Retrieves all the restrictions that are supported when data objects are selected for the specified type.</summary>
      <returns>A list of the restrictions that are supported when retrieving data objects for the specified type.</returns>
      <param name="typeName">The data source–specific type name for which to get the supported restrictions.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetSupportedRestrictions(System.String,System.Object[])">
      <summary>Retrieves all the restrictions that are supported when data objects are selected for the specified type.</summary>
      <returns>A list of the restrictions that are supported when retrieving data objects for the specified type.</returns>
      <param name="typeName">The data source–specific type name for which to get the supported restrictions.</param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">One or more values in <paramref name="parameters" /> are not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.Microsoft#VisualStudio#Data#Core#IVsDataSupportObject{T}#Invoke(System.String,System.Object[],System.Object[])">
      <summary>Invokes the specified method.</summary>
      <returns>The object returned by the invoked method.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="args">The arguments to pass for the method being invoked.</param>
      <param name="parameters">An array containing parameters to pass to the specified method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">One of the following conditions is true: The <paramref name="args" /> parameter is null; the specified method name in the <paramref name="name" /> parameter is equal to "ConvertToUnderlyingRestriction" or "ConvertToMappedMember" and the number of arguments in the <paramref name="args" /> array is less than three; the method name is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.SelectObjects(System.String,System.Object[],System.String[])">
      <summary>Returns a data reader for the data objects retrieved from the object store, which are filtered by the specified restrictions and properties.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object representing a data reader for the selected data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="properties">Specify null because this is not used. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.SelectObjects(System.String,System.Object[],System.String[],System.Object[])">
      <summary>Returns a data reader for the data objects retrieved from the object store, which are filtered by the specified restrictions, properties, and parameters.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object representing a data reader for the selected data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="properties">Specify null because this is not used. </param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataObjectSupport">
      <summary>Enables you to retrieve an XML stream that describes a set of data object types on a data source, which you can then interpret and manipulate programmatically.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectSupport" /> class with an XML resource stored in a managed assembly.</summary>
      <param name="resourceName">The name of the managed resource.</param>
      <param name="assembly">The managed assembly that contains the resource.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSupport.#ctor(System.String,System.String)">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectSupport" /> class with an XML resource that is stored as a file at a specific file path on disk.</summary>
      <param name="fileName">The unqualified name of the file.</param>
      <param name="path">The path to the file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataParameter">
      <summary>Represents a data parameter that is derived from a data source command, or that is passed with a command to a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataParameter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataParameter" /> class, specifying whether the instance was derived using the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</summary>
      <param name="isDerived">Indicates whether this data parameter instance was created as a return value of the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.DefaultSize">
      <summary>Gets an integer value specifying the default size for the current parameter type.</summary>
      <returns>The default size for the current parameter type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Descriptor">
      <summary>Gets information that describes the data parameter.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameterDescriptor" /> object describing the data parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Direction">
      <summary>Gets or sets a <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> object specifying the direction of the parameter.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> object specifying the direction of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetDirectionCore">
      <summary>Retrieves the parameter direction.</summary>
      <returns>The parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetIsNullableCore">
      <summary>Retrieves a Boolean value indicating whether the current parameter can be null.</summary>
      <returns>true if the current parameter can have a null value; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetIsOptionalCore">
      <summary>Retrieves a Boolean value indicating whether the parameter is optional.</summary>
      <returns>true if the parameter is optional; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetNameCore">
      <summary>Retrieves the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetSizeCore">
      <summary>Retrieves an integer value specifying the size of the parameter.</summary>
      <returns>The size of the parameter as an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetTypeCore">
      <summary>Retrieves the data source–specific type of the parameter.</summary>
      <returns>The data source–specific type of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetTypeFrom(System.Object)">
      <summary>Infers the data source–specific parameter type from a parameter value.</summary>
      <returns>The data source–specific type, or null if the value type is not supported.</returns>
      <param name="value">A candidate parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetValueCore">
      <summary>Retrieves the value of a specified parameter.</summary>
      <returns>The value of the specified parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.HasDescriptor">
      <summary>Gets a value indicating whether the data parameter exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameterDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Descriptor" /> property.</summary>
      <returns>true if the data parameter has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.IsDerived">
      <summary>Gets a Boolean value that indicates whether the current parameter was derived from the data source.</summary>
      <returns>true if the specified parameter was derived from the data source; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.IsFixedSize">
      <summary>Gets a Boolean value indicating whether the size for the current parameter type is fixed.</summary>
      <returns>true if the size is fixed for the current parameter type; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.IsNullable">
      <summary>Gets a Boolean value indicating whether the current parameter can have a null value provided that it is derived.</summary>
      <returns>true if this parameter can have a null value; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">This parameter is not derived.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.IsOptional">
      <summary>Gets a Boolean value indicating whether the current parameter is optional, provided that it is derived.</summary>
      <returns>true if this parameter is optional; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The parameter is not derived.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.IsSupportedDirection(Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection)">
      <summary>Retrieves a Boolean value indicating whether the specified parameter direction is supported.</summary>
      <returns>true if the specified parameter direction is supported; otherwise, false.</returns>
      <param name="direction">A parameter direction, as defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.IsValidType(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified data source–specific type is a valid type.</summary>
      <returns>true if the specified data source–specific type is a valid type; otherwise, false.</returns>
      <param name="type">A data source–specific data type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Name">
      <summary>Gets or sets the string literal name of the current parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataParameter.NullSize">
      <summary>A public size constant holding the value of zero.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnDirectionChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Direction" /> property is changed to signal a change in the parameter direction.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnDirectionChanging(Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Direction" /> property is about to change.</summary>
      <param name="value">The value that the property <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Direction" /> will be set to, from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</param>
      <exception cref="T:System.ArgumentException">The parameter direction is Unknown or is not supported.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnNameChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Name" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnNameChanging(System.String)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Name" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Name" /> property will be set to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnSizeChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Size" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnSizeChanging(System.Int32)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Size" /> property is about to change.</summary>
      <param name="value">The value to which the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Size" /> property will be set.</param>
      <exception cref="T:System.InvalidOperationException">The parameter direction is In or the parameter size is fixed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameter size is less than zero.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnTypeChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Type" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnTypeChanging(System.String)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Type" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Type" /> property will be set to.</param>
      <exception cref="T:System.ArgumentException">The parameter type is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnValueChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Value" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnValueChanging(System.Object)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Value" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Value" /> property will be set to.</param>
      <exception cref="T:System.InvalidOperationException">The parameter direction is Out or ReturnValue while the <paramref name="value" /> parameter is not null.</exception>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="value" /> parameter is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.Parse(System.String)">
      <summary>Disassembles a parameter value in a string format and converts the value to the correct type.</summary>
      <param name="value">A string representation of a parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.SetDirectionCore(Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection)">
      <summary>Sets the direction of the parameter by using the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</summary>
      <param name="value">A specific data parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.SetNameCore(System.String)">
      <summary>Sets the name of the parameter.</summary>
      <param name="value">The string literal parameter name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.SetSizeCore(System.Int32)">
      <summary>Sets an integer value specifying the size of the current parameter.</summary>
      <param name="value">An integer specifying size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.SetTypeCore(System.String)">
      <summary>Sets the data type of the current parameter.</summary>
      <param name="value">A parameter data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.SetValueCore(System.Object)">
      <summary>Sets the value of the parameter.</summary>
      <param name="value">An object value to which the parameter is set.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Size">
      <summary>Gets or sets an integer value specifying the size of the parameter.</summary>
      <returns>The size of the parameter as an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.ToString">
      <summary>Retrieves a string representation of the value of the current parameter.</summary>
      <returns>A string representation of the value of the current parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.TryConvertValue(System.Object,System.String)">
      <summary>Attempts to convert the specified value to the specified type.</summary>
      <returns>The converted value, or null if no conversion is possible.</returns>
      <param name="value">A potential parameter value.</param>
      <param name="type">The name of a parameter type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Type">
      <summary>Gets or sets the data source–specific type of the parameter.</summary>
      <returns>Returns the data source–specific type of the parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Value">
      <summary>Gets or sets the value of the parameter.</summary>
      <returns>The parameter value.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory">
      <summary>Provides the ability to create DDEX provider implementations of support entities.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory.CreateObject(System.Type)">
      <summary>Creates an instance of the specified DDEX support entity implemented by the DDEX provider.</summary>
      <returns>An instance of the specified DDEX support entity implemented by the DDEX provider, if the DDEX provider supports it; otherwise, null.</returns>
      <param name="objType">A type of DDEX support entity.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory.GetAssembly(System.String)">
      <summary>Resolves a provider-specific assembly string to its corresponding <see cref="T:System.Reflection.Assembly" /> representation.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object representing the assembly resolved from the specified assembly string, if found; otherwise, null.</returns>
      <param name="assemblyString">A provider-specific assembly string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyString" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory.GetType(System.String)">
      <summary>Resolves a provider-specific type name to its corresponding <see cref="T:System.Type" /> representation.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type resolved from the specified type name, if found; otherwise, null.</returns>
      <param name="typeName">A provider-specific type name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataReader">
      <summary>Provides the ability to expose data from any data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Close">
      <summary>Closes the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> instance.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataReader.Descriptor">
      <summary>Gets information that describes the data from a data source.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> object describing the data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Dispose">
      <summary>Releases managed resources held for the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Dispose(System.Boolean)">
      <summary>Cleans up resources associated with the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> instance, both when the public <see cref="M:Microsoft.VisualStudio.Data.Framework.DataReader.Dispose" /> method is called and when the object is finalized with a call to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataReader.Finalize" /> method.</summary>
      <param name="disposing">Indicates whether this method was called from the public <see cref="M:Microsoft.VisualStudio.Data.Framework.DataReader.Dispose" />  method (as opposed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataReader.Finalize" /> method.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Finalize">
      <summary>Finalizes the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves a specified number of bytes of raw binary data.</summary>
      <returns>An integer value indicating the number of bytes read into the buffer.</returns>
      <param name="index">Index in the current block of data for the item to retrieve.</param>
      <param name="buffer">An array into which specified data, as a byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">The index of the starting point in the byte array specified in the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified in the <paramref name="buffer" /> parameter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" />, <paramref name="bufferIndex" />, and/or <paramref name="length" /> parameters are invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetBytes(System.String,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves a specified number of bytes of raw binary data.</summary>
      <returns>An integer value indicating the number of bytes read into the buffer.</returns>
      <param name="name">The name of the item for which to retrieve raw binary data.</param>
      <param name="buffer">An array into which specified data, as a byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">The index of the starting point in the byte array specified in the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified in the <paramref name="buffer" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItem(System.Int32)">
      <summary>Retrieves the value of the item at the specified index in the current block of data.</summary>
      <returns>Returns an integer value from the specified index in the current block of data.</returns>
      <param name="index">Index in the current block of the data item at which to retrieve the integer value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItem(System.String)">
      <summary>Retrieves the value of a data item with the specified name in the current block of data.</summary>
      <returns>The string value of the item with the specified name.</returns>
      <param name="name">The name of the data item in the current block to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItemIndex(System.String)">
      <summary>Returns the index corresponding to the specified item name in the block of data.</summary>
      <returns>An integer value representing the item index.</returns>
      <param name="name">The name of the item to get the index for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves the maximum length, in characters, of data items at the specified index.</summary>
      <returns>The maximum length, in number of characters, of the data item at the specified index; or, returns -1 if the maximum length is unavailable or is not sensible.</returns>
      <param name="index">The index of the data item being examined for length.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItemName(System.Int32)">
      <summary>Retrieves the name assigned to the data item at the specified index, if any.</summary>
      <returns>The name assigned to the data item at the index specified by the <paramref name="index" /> parameter, or null if no name exists.</returns>
      <param name="index">The index of the data item for which to retrieve the name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItemType(System.Int32)">
      <summary>Retrieves the data type of a data item, or items, at the specified index for the default format <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat.Default" />.</summary>
      <returns>The data type of items at the specified index for the default format.</returns>
      <param name="index">Index of the data item for which to return data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat)">
      <summary>Retrieves the data type of a data item, or items, at the specified index in a specified format.</summary>
      <returns>The data type of items at the specified index in the specified format.</returns>
      <param name="index">Index of the data item for which to return a data type.</param>
      <param name="itemTypeFormat">The format in which to return the data type information.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataReader.HasDescriptor">
      <summary>Gets a value indicating whether the data reader exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataReader.Descriptor" /> property.</summary>
      <returns>true if the data reader has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataReader.IsClosed">
      <summary>Gets a Boolean value that indicates whether the specified reader has been closed.</summary>
      <returns>true if the specified data reader is closed; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.IsNullItem(System.Int32)">
      <summary>Indicates whether the data item at the specified index is unspecified, that is, null.</summary>
      <returns>true if the item is null, that is, unspecified; otherwise, false.</returns>
      <param name="index">Index of the data item to examine.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.IsNullItem(System.String)">
      <summary>Indicates whether the value of the given data item is unspecified, that is, null.</summary>
      <returns>true if the item is null, that is, unspecified; otherwise, false.</returns>
      <param name="name">The name of the data item to examine.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataReader.ItemCount">
      <summary>Gets the number of items in the current block of data.</summary>
      <returns>An integer value indicating the number of items in the current block of data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.NextResult">
      <summary>Advances the data reader to the next result set in cases where the reader contains multiple result sets.</summary>
      <returns>true if more results remain to be read and the reader was advanced to the next result; false if no more results were found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Read">
      <summary>Advances the reader to the next block of data in cases where the reader contains more than one block of data.</summary>
      <returns>true if there are more blocks of data to read.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataReader.Status">
      <summary>Gets a numerical status code returned by the method currently providing data to the data reader.</summary>
      <returns>An integer value status code from the method currently providing data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Terminate">
      <summary>Terminates the data reader immediately, without necessarily returning all of the data or setting output parameters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1">
      <summary>Provides a simplified way to support communication between an object and its site in the container.</summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1" /> class, specifying a site generic type parameter.</summary>
      <param name="site">A generic type representing the site.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.Site">
      <summary>Gets or sets the object site.</summary>
      <returns>Returns an object instance of the site.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged">
      <summary>Occurs when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.Site" /> property is changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1">
      <summary>Combines the functionality of an <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSiteableObject`1" /> object and a <see cref="T:Microsoft.VisualStudio.Data.Framework.ServiceProvider" /> object. This implementation of the <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSiteableObject`1" /> and <see cref="T:System.IServiceProvider" /> interfaces allows access to services while supporting communication to a site.</summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1" /> class with a site.</summary>
      <param name="site">An instance of the site of the generic type T.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1.Site">
      <summary>Gets or sets the site.</summary>
      <returns>The site.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1.SiteChanged">
      <summary>Occurs when the site has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSourceInformation">
      <summary>Allows you to retrieve well-defined information about a specified data source in the form of properties constructed as name/value pairs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class that provides the data connection.</summary>
      <param name="connection">The data connection to use for retrieving data source properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.AddProperty(System.String)">
      <summary>Adds a property to the list of supported properties.</summary>
      <param name="propertyName">The name of a data source information property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.AddProperty(System.String,System.Object)">
      <summary>Adds a property and its value to the list of supported properties.</summary>
      <param name="propertyName">The name of a data source information property.</param>
      <param name="value">The value for the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters that are not valid, that is, that may not appear in a generic catalog name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose use at the start of a generic catalog name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogIsSuffixed">
      <summary>Specifies the data source information property that indicates whether a catalog name is suffixed on a multi-part object identifier, as opposed to being a prefix.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a catalog name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogSeparator">
      <summary>Specifies the data source information property that indicates the character separating a catalog name from the other parts in an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogSupported">
      <summary>Specifies the data source information property that indicates whether a catalog name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogSupportedInDml">
      <summary>Specifies the data source information property that indicates whether a catalog name is supported in object identifiers that appear in SQL DML clauses.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnAliasInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a column alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnAliasInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a column alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnAliasMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a column alias.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnAliasSupported">
      <summary>Specifies the data source information property that indicates whether a column alias is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a column name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a column name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a column name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnSupported">
      <summary>Specifies the data source information property that indicates whether a column name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CommandDeriveParametersSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CommandDeriveSchemaSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CommandExecuteSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> and <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CommandParameterSupport">
      <summary>Specifies which parameter directions are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CommandPrepareSupport">
      <summary>Specifies which types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.Contains(System.String)">
      <summary>Retrieves a Boolean value indicating whether a specified property is contained in this data source information instance.</summary>
      <returns>true if the specified property is contained in this data source information instance; otherwise, false.</returns>
      <param name="propertyName">The name of the property being tested.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DataSourceCulture">
      <summary>Specifies the geographical culture of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DataSourceName">
      <summary>Specifies the name of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DataSourceProduct">
      <summary>Specifies the name of the product of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DataSourceVersion">
      <summary>Specifies the version of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DateLiteralPrefix">
      <summary>Specifies the data source information property that provides the character or characters that prefix a date/time literal.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DateLiteralSuffix">
      <summary>Specifies the data source information property that provides the character or characters that suffix a date/time literal.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DefaultCatalog">
      <summary>Specifies the data source information property that provides the name of the default catalog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DefaultSchema">
      <summary>Specifies the data source information property that provides the name of the default schema.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.GetType(System.String)">
      <summary>Retrieves the <see cref="T:System.Type" /> value indicating the type of a specified property, thus enabling appropriate conversion of a retrieved value to the correct type.</summary>
      <returns>A <see cref="T:System.Type" /> value indicating the type of a specified property.</returns>
      <param name="propertyName">The name of the property for which to get the type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IdentifierCloseQuote">
      <summary>Specifies the data source information property that provides the character used to close an identifier part that needs to be enclosed in quotation marks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IdentifierOpenQuote">
      <summary>Specifies the data source information property that provides the character used to open an identifier part that needs to be enclosed in quotation marks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IdentifierPartsCaseSensitive">
      <summary>Specifies the data source information property that indicates whether identifier parts are treated as case sensitive.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IdentifierPartsStorageCase">
      <summary>Specifies the data source information property that indicates the case of identifier parts that are stored in the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IndexInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance as an index name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IndexInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of an index name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IndexMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of an index name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IndexSupported">
      <summary>Specifies the data source information property that indicates whether an index name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.Item(System.String)">
      <summary>Gets a data source information property with the specified name.</summary>
      <returns>The data source information property with the specified name.</returns>
      <param name="propertyName">The name of the data source information property to retrieve.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.LikeClausePercent">
      <summary>Specifies the data source information property that indicates the wildcard character used to capture zero or more characters within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.LikeClausePercentEscape">
      <summary>Specifies the data source information property that indicates the character used to escape the LikeClausePercent character within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.LikeClauseUnderscore">
      <summary>Specifies the data source information property that indicates the wildcard character used to capture a single character within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.LikeClauseUnderscoreEscape">
      <summary>Specifies the data source information property that indicates the character used to escape the <see cref="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.LikeClauseUnderscore" /> character within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ParameterPrefix">
      <summary>Specifies the data source information property that provides the character used to prefix a parameter name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ParameterPrefixInName">
      <summary>Specifies the data source information property that indicates whether the parameter prefix should appear in the value set for the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Name" /> property.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ProcedureInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a procedure name is not valid. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ProcedureInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a procedure name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ProcedureMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a procedure name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ProcedureSupported">
      <summary>Specifies the data source information property that indicates whether a procedure name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.QuotedIdentifierPartsCaseSensitive">
      <summary>Specifies the data source information property that indicates whether identifier parts enclosed in quotation marks are treated as case sensitive.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.QuotedIdentifierPartsStorageCase">
      <summary>Specifies the data source information property that indicates the case of identifier parts enclosed in quotation marks that are stored in the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ReservedWords">
      <summary>Specifies the data source information property that provides the set of reserved words on the data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.RetrieveValue(System.String)">
      <summary>Retrieves a value for a specified data source information property.</summary>
      <returns>The value of the data source information property, or null if the property is not supported.</returns>
      <param name="propertyName">The name of the property whose value is to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a schema name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a schema name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a schema name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaSeparator">
      <summary>Specifies the data source information property that indicates the character separating a schema name from the other parts of an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaSupported">
      <summary>Specifies the data source information property that indicates whether a schema name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaSupportedInDml">
      <summary>Specifies the data source information property that indicates whether a schema name is supported in object identifiers that appear in SQL DML clauses.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ServerSeparator">
      <summary>Specifies the data source information property that indicates the character separating a server name from the other parts of an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SupportsAnsi92Sql">
      <summary>Specifies the data source information property that indicates whether the data source supports the ANSI92 SQL standard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SupportsCommandTimeout">
      <summary>Specifies the data source information property that indicates whether command timeouts are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SupportsNestedTransactions">
      <summary>Specifies the data source information property that indicates whether transactions can be started, committed, or rolled back inside other transactions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SupportsQuotedIdentifierParts">
      <summary>Specifies the data source information property that indicates whether identifier parts enclosed in quotation marks are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SupportsVerifySql">
      <summary>Specifies the data source information property that indicates whether SQL verification is supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableAliasInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a table alias is not valid. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableAliasInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a table alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableAliasMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a table alias.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableAliasSupported">
      <summary>Specifies the data source information property that indicates whether a table alias is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a table name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a table name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a table name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableSupported">
      <summary>Specifies the data source information property that indicates whether a table name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.UserInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a user name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.UserInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a user name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.UserMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a user name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.UserSupported">
      <summary>Specifies the data source information property that indicates whether a user name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ViewInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a view name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ViewInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a view name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ViewMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a view name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ViewSupported">
      <summary>Specifies the data source information property that indicates whether a view name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer">
      <summary>Provides the ability to specialize the behavior of a DDEX provider, depending on the data source to which it is connected.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.CreateObject(System.Guid,System.Type)">
      <summary>Creates a DDEX provider–implemented object of the given type that is specialized for the specified data source.</summary>
      <returns>A specialized object of the specified type.</returns>
      <param name="source">GUID of the data source for which the provider is specialized.</param>
      <param name="objType">Data type of the provider object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.DeriveSource(System.String)">
      <summary>Determines which data source supported by the provider is represented by the given connection string.</summary>
      <returns>Returns a GUID object instance specifying the derived data source for the connection string provided, or <see cref="F:System.Guid.Empty" /> if no data source could be determined.</returns>
      <param name="connectionString">Connection string understood by the DDEX provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.GetAssembly(System.Guid,System.String)">
      <summary>Locates an assembly, given an assembly string and a data source GUID.</summary>
      <returns>An assembly.</returns>
      <param name="source">DDEX data source GUID.</param>
      <param name="assemblyString">Name of the assembly to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.GetType(System.Guid,System.String)">
      <summary>Retrieves a type definition, given a type name and a data source GUID.</summary>
      <returns>A type definition.</returns>
      <param name="source">DDEX data source GUID.</param>
      <param name="typeName">Name of the assembly to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the current instance of the service provider as a <see cref="T:System.IServiceProvider" /> object.</summary>
      <returns>The current instance of the service provider, as a <see cref="T:System.IServiceProvider" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.ServiceProvider">
      <summary>Retrieves the current instance of the service provider as a <see cref="T:System.IServiceProvider" /> object.</summary>
      <returns>The current instance of the service provider, as a <see cref="T:System.IServiceProvider" /> object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer">
      <summary>Provides the means to compare two data-source-specific version strings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer.#ctor(System.Collections.Generic.IComparer{System.String})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer" /> class.</summary>
      <param name="comparer">An object instance of <see cref="T:System.Collections.Generic.IComparer`1" />  to initialize this class with.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="comparer" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer.Comparer">
      <summary>Gets or sets the <see cref="T:System.Collections.Generic.IComparer`1" /> object with which to perform a comparison.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IComparer`1" /> object instance.</returns>
      <exception cref="T:System.ArgumentNullException">The value to be set is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer.CompareTo(System.String)">
      <summary>Compares the current data-source version in this class with the specified data-source version.</summary>
      <returns>Returns one of three integer values:Less than zero: SourceVersion is less than <paramref name="other" />.Equal to zero: SourceVersion is equal to <paramref name="other" />.Greater than zero: SourceVersion is greater than <paramref name="other" />.</returns>
      <param name="other">The version number to compare.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer.SourceVersion">
      <summary>Gets the data source version from the sited connection, if any.</summary>
      <returns>A <see cref="T:System.String" /> value representing the data source version, or null if no source version can be obtained.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier">
      <summary>Represents a utility class that provides the ability to parse and resolve data specifiers.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Alignment">
      <summary>Gets the portion of the data specifier string that represents the alignment component.</summary>
      <returns>The alignment component of the data specifier string, if any; otherwise, null.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSpecifier.FormatString">
      <summary>Gets the portion of the data specifier string that represents the formatString component.</summary>
      <returns>The formatString component of the data specifier string, if any; otherwise, null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Parse(System.String)">
      <summary>Parses a data specifier string into its components and returns a <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object instance containing the parsed components.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object instance containing the parsed components.</returns>
      <param name="specifier">A string containing the components of the data specifier to parse.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Parse(System.String,System.Int32@)">
      <summary>Parses a data specifier string, starting at the specified index, into its components and then returns a <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object instance containing the parsed components.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object instance containing the parsed components.</returns>
      <param name="s">A string containing the components of the data specifier to parse.</param>
      <param name="index">The index in the data specifier string at which to start the parsing. This parameter is passed by reference, and, therefore, when this method returns to the caller, it will retain its new value.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Qualifier">
      <summary>Gets the portion of the data specifier string that represents the qualifier component.</summary>
      <returns>The qualifier component of the data specifier string, if any; otherwise, null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolve(System.String,Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolver)">
      <summary>Converts the data specifier string into its textual representation by using the specified delegate resolver method.</summary>
      <returns>The textual representation of the data specifier.</returns>
      <param name="specifier">The data specifier string to convert.</param>
      <param name="resolver">A delegate to the method that carries out the conversion of the data specifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolve(System.String,System.Int32@,Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolver)">
      <summary>Converts the data specifier string, starting at the specified index, into its textual representation by using the specified delegate resolver method.</summary>
      <returns>The textual representation of the data specifier.</returns>
      <param name="input">The data specifier string to convert.</param>
      <param name="index">The start location in the data specifier string that delimits the substring to resolve. This parameter is passed by reference, and, therefore, when this method returns to the caller, it will retain its new value.</param>
      <param name="resolver">A delegate to the method that carries out the conversion of the data specifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.ResolveAll(System.String,Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolver)">
      <summary>Converts a string of one or more data specifiers into its textual representation by using the specified delegate resolver method.</summary>
      <returns>The textual representation of all the data specifiers delimited by the original delimiter character.</returns>
      <param name="input">A string of one or more data specifiers separated by a delimiter character.</param>
      <param name="resolver">A delegate to the method that carries out the conversion of the data specifier.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Specifier">
      <summary>Gets the portion of the data specifier string that represents the specifier component.</summary>
      <returns>The specifier component of the data specifier string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.ToString">
      <summary>Returns a string representation consisting of all the components of the specified <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object.</summary>
      <returns>A string representation consisting of all the components of the specified <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolver">
      <summary>Provides a mechanism to dispatch the call for resolving the data specifier to the appropriate method.</summary>
      <returns>An object representing the method for resolving the data specifier.</returns>
      <param name="specifier">The <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object instance on which this delegate is called.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSupport">
      <summary>Represents the base class for all classes that provide data support XML.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSupport" /> class with an XML resource stored in a managed assembly.</summary>
      <param name="resourceName">The name of the managed resource.</param>
      <param name="assembly">The managed assembly that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="resourceName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSupport.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSupport" /> class with an XML resource that is stored as a file at a specific file path on disk.</summary>
      <param name="fileName">The unqualified name of the file.</param>
      <param name="path">The path to the file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileName" /> and/or <paramref name="path" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSupport.OpenSupportStream">
      <summary>Opens a stream of bytes representing the XML content.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSupport.OpenSupportStream(System.Globalization.CultureInfo)">
      <summary>Opens a stream of bytes representing the XML content for a specified culture.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> object for the specified culture.</returns>
      <param name="culture">The geographical culture (as <see cref="T:System.Globalization.CultureInfo" /> object) for which to retrieve the Stream object instance.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataTransaction">
      <summary>Enables transaction-processing, which allows you to commit or roll back a series of related operations as a batch.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataTransaction.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataTransaction" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataTransaction.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataTransaction" /> class, specifying a data connection.</summary>
      <param name="connection">The data connection used for communicating with the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataTransaction.BeginTransaction">
      <summary>Initiates a transaction and returns the new current transaction level.</summary>
      <returns>An integer value indicating the new current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataTransaction.CommitTransaction">
      <summary>Commits a transaction and returns the new current transaction level.</summary>
      <returns>An integer value indicating the new current transaction level.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataTransaction.CurrentTransactionLevel">
      <summary>Gets a numeric value indicating the current transaction level.</summary>
      <returns>An integer value specifying the current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataTransaction.RollbackTransaction">
      <summary>Rolls back, or voids, a transaction and returns the new current transaction level.</summary>
      <returns>An integer value indicating the new current transaction level.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject">
      <summary>Represents a dynamic browse object for a node in a data view hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.#ctor">
      <summary>Initializes a new instance of the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject" /> object with the base browse object.</summary>
      <param name="baseBrowseObj">An instance of browse object upon which this browse object should be based.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.BaseBrowseObject">
      <summary>Gets the base browse object upon which this browse object is based.</summary>
      <returns>The base browse object upon which this browse object is based.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetAttributes">
      <summary>Returns a collection of attributes for the current browse object.</summary>
      <returns>Returns a collection of attributes for the current browse object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetClassName">
      <summary>Retrieves the name of the class for the current browse object.</summary>
      <returns>Returns the name of the class for the current browse object, or an empty string if no class name can be found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetComponentName">
      <summary>Retrieves the component name of the current browse object.</summary>
      <returns>Returns the component name of the current browse object, or an empty string if no component name can be found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetConverter">
      <summary>Retrieves a type converter for the current browse object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.TypeConverter" /> for the current browse object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetDefaultEvent">
      <summary>Retrieves the default event for the current browse object.</summary>
      <returns>Returns the default event for the current browse object, or null if there are no events.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetDefaultProperty">
      <summary>Retrieves the default property for the current browse object.</summary>
      <returns>Returns the default property for the current browse object, or null if there are no properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetEditor(System.Type)">
      <summary>Retrieves an editor for the specified base type and for the current browse object.</summary>
      <returns>An instance of the editor that can be cast to the specified editor type, or null if no editor of the requested type can be found.</returns>
      <param name="editorBaseType">A <see cref="T:System.Type" /> representing the base type of the editor to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetEvents">
      <summary>Retrieves a <see cref="T:System.ComponentModel.EventDescriptorCollection" /> collection of events for the current browse object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.EventDescriptorCollection" /> collection containing the events for the current browse object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetEvents(System.Attribute[])">
      <summary>Retrieves a <see cref="T:System.ComponentModel.EventDescriptorCollection" /> collection of events that match the specified attributes for the current browse object.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptorCollection" /> collection containing the events that match the specified attributes for the current browse object.</returns>
      <param name="attributes">An array of <see cref="T:System.Attribute" /> objects as a filter for the events to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetProperties">
      <summary>Retrieves a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> collection of properties for the current browse object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> collection containing the properties for the current browse object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetProperties(System.Attribute[])">
      <summary>Retrieves a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> collection of properties that match the specified attributes for the current browse object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> collection containing the properties that match the specified attributes for the current browse object.</returns>
      <param name="attributes">An array of <see cref="T:System.Attribute" /> objects as a filter for the properties to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns an object that contains the property described by the specified property descriptor.</summary>
      <returns>Returns an object that contains the property described by the specified property descriptor.</returns>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object whose owner is to be found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.RemoveAttributes(System.Object[])">
      <summary>Removes the attributes specified by their type identifiers.</summary>
      <param name="typeIds">An array containing unique identifiers for the types of the attributes to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.RemoveProperties(System.String[])">
      <summary>Removes all the specified properties from the current browse object.</summary>
      <param name="names">An array of property names for the properties to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetAttributes(System.Attribute[])">
      <summary>Sets the attributes for the current browse object.</summary>
      <param name="attributes">An array of <see cref="T:System.Attribute" /> objects to set or remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetClassName(System.String)">
      <summary>Sets the class name for the current browse object.</summary>
      <param name="value">The class name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetComponentName(System.String)">
      <summary>Sets the component name for the current browse object.</summary>
      <param name="value">The component name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetConverter(System.ComponentModel.TypeConverter)">
      <summary>Sets the type converter for the current browse object.</summary>
      <param name="value">A <see cref="T:System.ComponentModel.TypeConverter" /> object to set as the type converter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetDefaultEvent(System.ComponentModel.EventDescriptor)">
      <summary>Sets the default event for the current browse object.</summary>
      <param name="value">An <see cref="T:System.ComponentModel.EventDescriptor" /> object to set as the default event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetDefaultProperty(System.ComponentModel.PropertyDescriptor)">
      <summary>Sets the default property for the current browse object.</summary>
      <param name="value">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object to set as the default property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetEditor(System.Type,System.Object)">
      <summary>Sets or removes the editor for the current browse object.</summary>
      <param name="editorBaseType">A <see cref="T:System.Type" /> representing the base type of the editor.</param>
      <param name="value">The editor to set, or null to remove the editor based on its type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetEvents(System.ComponentModel.EventDescriptor[])">
      <summary>Sets the specified events for the current browse object.</summary>
      <param name="events">An array of <see cref="T:System.ComponentModel.EventDescriptor" /> event objects to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>Sets the specified properties for the current browse object.</summary>
      <param name="properties">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> property objects to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves the field that matches the specified binding constraints for the type of the current instance.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches the specified binding constraints for the type of the current instance, if found; otherwise returns null.</returns>
      <param name="name">The name of the data field to get</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetFields(System.Reflection.BindingFlags)">
      <summary>Retrieves all the fields defined for the type of the current instance that match the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the type of the current instance that match the specified binding constraints, if found; otherwise returns null.</returns>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves the specified public members that match the specified binding constraints for the type of the current instance.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The name of the members to get.</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetMembers(System.Reflection.BindingFlags)">
      <summary>Retrieves all the members that match the specified binding constraints for the type of the current instance.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the type of the current instance that match the specified binding constraints. If no members are defined for the current type, or if none of the defined members match the binding constraints, returns an empty array of type <see cref="T:System.Reflection.MemberInfo" />.</returns>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves the specified method that matches the specified binding constraints for the type of the current instance.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified binding constraints for the type of the current instance, if found; otherwise, null.</returns>
      <param name="name">The name of the method to get.</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Retrieves the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints for the type of the current instance.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified binding constraints for the type of the current instance, if found; otherwise, null.</returns>
      <param name="name">The name of the method to get.</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection; or null to use the <see cref="T:System.Type.DefaultBinder" />.</param>
      <param name="types">An array of <see cref="T:System." /><see cref="Type" /> objects representing the number, order, and type of the parameters for the method to get, or an empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="T:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the types array. To be used only when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetMethods(System.Reflection.BindingFlags)">
      <summary>Retrieves all the methods defined for the type of the current instance, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the methods defined for the type of the current instance that match the specified binding constraints. If no methods are defined for the type of the current instance, or if none of the defined methods match the binding constraints, returns an empty array of type <see cref="T:System.Reflection.MethodInfo" />.</returns>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetProperties(System.Reflection.BindingFlags)">
      <summary>Retrieves all the properties for the type of the current instance, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all the properties for the type of the current instance that match the specified binding constraints. If the type of the current instance does not have properties, or if none of the properties match the binding constraints, returns an empty array of type <see cref="T:System.Reflection.PropertyInfo" />.</returns>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves the specified property for the type of the current instance, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all the properties for the type of the current instance that match the specified binding constraints. If the type of the current instance does not have properties, or if none of the properties match the binding constraints, returns an empty array of type <see cref="T:System.Reflection.PropertyInfo" />.</returns>
      <param name="name">The name of the property to get.</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Retrieves the specified public property whose parameters match the specified argument types and modifiers for the type of the current instance, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the specified property for the type of the current instance that matches the specified requirements, if found; otherwise, returns null.</returns>
      <param name="name">The name of the property to get.</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection; or null to use the <see cref="T:System.Type.DefaultBinder" />.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get, or an empty <see cref="T:System.Type" /> array to get a property that is not indexed.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the types array. The default binder does not process this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member using the specified binding constraints and matching the specified argument list, modifiers, and culture.</summary>
      <returns>An Object representing the return value of the invoked member.</returns>
      <param name="name">The name of the constructor, method, property, or field member to invoke, or an empty string to invoke the default member. For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags, such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance |BindingFlags.Static are used.</param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection; or a null reference to use the <see cref="T:System.Type.DefaultBinder" />. Note that explicitly defining a Binder object may be required for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the args array.A parameter's associated attributes are stored in the member's signature. The default binder processes this parameter only when calling a COM component.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double; or null to use the current thread's CultureInfo.</param>
      <param name="namedParameters">An array containing the names of the parameters to which the values in the args array are passed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#UnderlyingSystemType">
      <summary>Gets the underlying type of the current browse object.</summary>
      <returns>The underlying type of the current browse object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider">
      <summary>Allows you to retrieve a specialized browse object for a specified node in a given data view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider" /> class.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider.BrowseObjectChanged">
      <summary>Occurs when the browse object is changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider.CreateBrowseObject(System.Int32,System.Object)">
      <summary>Retrieves a browse object for a data view node, given the specified node's item ID.</summary>
      <returns>An object representing the browse object for the specified node.</returns>
      <param name="itemId">An item ID specifying a node for which to create a custom browse object.</param>
      <param name="autoBrowseObj">A browse object automatically generated with information in the data view support XML, or null if the XML indicates that no such browse object should be generated. This allows an implementation of this method to specify most settings in XML and then provide only minor modification to the set of properties, rather than necessitating building the object from the beginning.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider.OnBrowseObjectChanged(Microsoft.VisualStudio.Data.Services.SupportEntities.DataViewNodeEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider.BrowseObjectChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider">
      <summary>Provides the ability to implement commands, specifically custom commands, for nodes in a data view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.CreateCommand(System.Int32,System.ComponentModel.Design.CommandID)">
      <summary>Creates a menu command for a Server Explorer menu item.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing a menu command item.</returns>
      <param name="itemId">The identifier of the item in the data view hierarchy on which this command should be invoked.</param>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object instance uniquely identifying the command associated with the specified item in the data view hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.CreateCommand(System.Int32,System.ComponentModel.Design.CommandID,System.Object[])">
      <summary>Creates a menu command for a Server Explorer menu item containing the specified parameters.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing a menu command item.</returns>
      <param name="itemId">The identifier of the item in the data view hierarchy on which this command should be invoked.</param>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object instance uniquely identifying the command associated with the specified item in the data view hierarchy.</param>
      <param name="parameters">An array of parameters for use with this command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.CreateSelectionCommand(System.ComponentModel.Design.CommandID)">
      <summary>Creates a selection menu command for multiple nodes in Server Explorer.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing a selection menu command item.</returns>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object instance uniquely identifying the command associated with the specified item in the data view hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.CreateSelectionCommand(System.ComponentModel.Design.CommandID,System.Object[])">
      <summary>Creates a selection menu command for multiple nodes in Server Explorer.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing a selection menu command item.</returns>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object instance uniquely identifying the command associated with the specified item in the data view hierarchy.</param>
      <param name="parameters">An array of parameters for use with this command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.Microsoft#VisualStudio#Data#Core#IVsDataSupportObject{T}#Invoke(System.String,System.Object[],System.Object[])">
      <summary>Invokes the specified command.</summary>
      <returns>The return value of the invoked command.</returns>
      <param name="name">The name of the command to be invoked.</param>
      <param name="args">An array of arguments to pass to the invoked command. </param>
      <param name="parameters">An array of parameters for use with this command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.UpdateCommandStatus(System.ComponentModel.Design.MenuCommand)">
      <summary>Updates the status of the specified menu command.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing the command to update.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.UpdateCommandStatus(System.ComponentModel.Design.MenuCommand,System.Object[])">
      <summary>Updates the status of the specified menu command.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing the command to update.</param>
      <param name="parameters">An array of parameters for use with this command.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider">
      <summary>Provides the ability to open a document, get a document moniker, and perform other actions pertaining to a document in the Visual Studio Sever Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.CanOpen(System.Int32,System.Guid)">
      <summary>Indicates whether a document can be opened for the specified node in the data view and for the given logical view.</summary>
      <returns>true if a document can be opened; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node.</param>
      <param name="logicalView">A unique identifier of a logical view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.FindNode(System.String,System.Boolean)">
      <summary>Searches for a node in the data view that corresponds to the specified document moniker. Optionally, searches child nodes that have not been expanded yet.</summary>
      <returns>An integer value that identifies the specified node in the data view, or -1 if node is not found.</returns>
      <param name="documentMoniker">A document moniker.</param>
      <param name="searchUnpopulatedChildren">Specifies whether to search child nodes that have not been expanded yet (true), or not (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.GetContext(System.Int32)">
      <summary>Retrieves the service provider representing the context of the current document in the data view.</summary>
      <returns>An <see cref="T:System.IServiceProvider" /> object representing the context of the current document in the data view.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.GetMoniker(System.Int32)">
      <summary>Retrieves the document moniker for the specified node in the data view.</summary>
      <returns>The document moniker.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.GetPriority(System.Int32)">
      <summary>Gets the priority level of the specified document within the data view hierarchy.</summary>
      <returns>A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY" /> enumeration specifying the priority level of the specified document within the data view hierarchy.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.GetSaveName(System.Int32)">
      <summary>Gets the name of the specified document for use when saving the document.</summary>
      <returns>A string representing the document name for use when saving the document, or null if there is no such name.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.IsSupported(System.Int32)">
      <summary>Indicates whether a document is supported for the specified node in the data view.</summary>
      <returns>true if the document is supported; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.Open(System.Int32,System.Guid,System.Object,System.Boolean)">
      <summary>Opens the specified document in the given logical view. The document may be populated with existing data and may be hidden.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object representing the open document window.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
      <param name="logicalView">A unique identifier of a logical view.</param>
      <param name="existingDocumentData">Any existing data to be included in the document.</param>
      <param name="doNotShowWindow">A Boolean value specifying whether to hide the document window (true) or not (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.ShowMoniker(System.Int32)">
      <summary>Indicates whether the document moniker is to be displayed on the specified document.</summary>
      <returns>true if the moniker is to be displayed; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand">
      <summary>Represents a base implementation for menu commands offered by high-level or shortcut menus as part of a data view hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand.#ctor(System.Int32,System.ComponentModel.Design.CommandID)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand" /> class, specifying the item ID and command identifier.</summary>
      <param name="itemId">A numerical value that uniquely identifies a node in the data view hierarchy.</param>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand.#ctor(System.Int32,System.ComponentModel.Design.CommandID,System.EventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand" /> class, specifying the item ID, command identifier, and event.</summary>
      <param name="itemId">A numerical value that uniquely identifies a node in the data view hierarchy.</param>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand.#ctor(System.Int32,System.ComponentModel.Design.CommandID,System.EventHandler,System.EventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand" /> class, specifying the item ID, command identifier, and events.</summary>
      <param name="itemId">A numerical value that uniquely identifies a node in the data view hierarchy.</param>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
      <param name="statusHandler">The event to raise to convey status updates.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand.ItemId">
      <summary>Gets the item ID.</summary>
      <returns>Returns an integer value representing the item ID.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor">
      <summary>Represents a dynamic property for a node in a data view hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property descriptor object.</summary>
      <param name="baseDescriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object representing a base descriptor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property descriptor object and an array of attributes.</summary>
      <param name="baseDescriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object representing a base descriptor.</param>
      <param name="newAttributes">An array of property attributes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name.</summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name and an array of attributes.</summary>
      <param name="name">The property name.</param>
      <param name="attributes">An array containing the property attributes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name and a property display name.</summary>
      <param name="name">The property name.</param>
      <param name="displayName">A display name for the property. This parameter is used to add a <see cref="T:System.ComponentModel.DisplayNameAttribute" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name, the property display name, and a category name.</summary>
      <param name="name">The property name.</param>
      <param name="displayName">A display name for the property. This parameter is used to create a <see cref="T:System.ComponentModel.DisplayNameAttribute" />.</param>
      <param name="category">The name of the category in which to group the property (in the property grid). This parameter is used to create a <see cref="T:System.ComponentModel.CategoryAttribute" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name, another version of the property name for display purposes, a category name, and a description.</summary>
      <param name="name">The property name.</param>
      <param name="displayName">A display name for the property. This parameter is used to create a <see cref="T:System.ComponentModel.DisplayNameAttribute" />.</param>
      <param name="category">The name of the category in which to group the property (in the property grid). This parameter is used to create a <see cref="T:System.ComponentModel.CategoryAttribute" />.</param>
      <param name="description">The description of the property. This property is used to create a <see cref="T:System.ComponentModel.DescriptionAttribute" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name, another version of the property name for display purposes, a category name, and a description.</summary>
      <param name="name">The property name.</param>
      <param name="displayName">A display name for the property. This property is used to create a <see cref="T:System.ComponentModel.DisplayNameAttribute" />.</param>
      <param name="category">The name of the category in which to group the property (in the property grid). This parameter is used to create a <see cref="T:System.ComponentModel.CategoryAttribute" />.</param>
      <param name="description">The description of the property. This property is used to create a <see cref="T:System.ComponentModel.DescriptionAttribute" />.</param>
      <param name="isReadOnly">A Boolean value indicating whether the property is read-only. If this value is different from ReadOnlyAttribute.Default.IsReadOnly, it is used to create a <see cref="T:System.ComponentModel.ReadOnlyAttribute" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.Attributes">
      <summary>Gets the collection of attributes associated with the current property descriptor.</summary>
      <returns>An <see cref="T:System.ComponentModel.AttributeCollection" /> object containing the attributes associated with the current property descriptor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.CanResetValue(System.Object)">
      <summary>Indicates whether the value of the property can be reset for the specified component.</summary>
      <returns>true if the value can be reset; otherwise false.</returns>
      <param name="component">The component for which to check whether the value can be reset.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.Category">
      <summary>Gets the category from the <see cref="T:System.ComponentModel.CategoryAttribute" /> of the current property descriptor.</summary>
      <returns>A string value representing the category of the current property descriptor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.ComponentType">
      <summary>Gets the type of the component the property is bound to.</summary>
      <returns>A <see cref="T:System.Type" /> object containing the type of the component the property is bound to, or typeof(DataViewBrowseObject) if the component type has not been set for this property descriptor and there is no base property descriptor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.Converter">
      <summary>Gets the type converter for the current property descriptor.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> object used to convert the <see cref="T:System.Type" /> of the current property descriptor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.Description">
      <summary>Gets the description from the <see cref="T:System.ComponentModel.DescriptionAttribute" /> of the current property descriptor.</summary>
      <returns>A string value representing the description of the current property descriptor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> for a given component, using a specified array of attributes as a filter.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that match the specified attributes for the specified component.</returns>
      <param name="instance">A component to get the properties for.</param>
      <param name="filter">An array of <see cref="T:System.Attribute" /> objects to use as a filter. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.GetValue(System.Object)">
      <summary>Gets the current property value for the specified component.</summary>
      <returns>The current property value for the specified component.</returns>
      <param name="component">The component for which to retrieve the property value.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.IsReadOnly">
      <summary>Gets a value indicating whether the current property descriptor is read-only.</summary>
      <returns>A Boolean value indicating whether the current property descriptor is read-only.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.Name">
      <summary>Gets the property name.</summary>
      <returns>A string value representing the property name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.NameHashCode">
      <summary>Gets the hash code of the property name.</summary>
      <returns>An integer value representing the hash code of the property name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.PropertyType">
      <summary>Gets the type of the property.</summary>
      <returns>A <see cref="T:System.Type" /> representing the type of the property.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.ResetValue(System.Object)">
      <summary>Resets the property value of the specified component to the default value.</summary>
      <param name="component">The component with the property value that is to be reset to the default value. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetAttribute(System.Attribute)">
      <summary>Adds the specified attribute to this property's attributes list.</summary>
      <param name="value">The attribute to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetAttributes(System.Attribute[])">
      <summary>Adds the specified attributes to this property's attributes list.</summary>
      <param name="values">An array of <see cref="T:System.Attribute" /> objects to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetCategory(System.String)">
      <summary>Sets the category attribute, using the specified category value.</summary>
      <param name="value">The category value used to create and add the <see cref="T:System.ComponentModel.CategoryAttribute" />. Specify null to use the default category attribute value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetComponentType(System.Type)">
      <summary>Sets the component type to the specified type.</summary>
      <param name="value">The new component type to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetConverterType(System.String)">
      <summary>Adds a <see cref="T:System.ComponentModel.TypeConverterAttribute" />, using the specified type name as the data converter for the property descriptor.</summary>
      <param name="value">The fully qualified name of the class to use for data conversion for this property descriptor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetConverterType(System.Type)">
      <summary>Adds a <see cref="T:System.ComponentModel.TypeConverterAttribute" />, using the specified type as the data converter for the property descriptor.</summary>
      <param name="value">A <see cref="T:System.Type" /> that represents the type of the converter class to use for data conversion for this property descriptor </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetDescription(System.String)">
      <summary>Sets the description attribute, using the specified description value.</summary>
      <param name="value">The description value used to create and add the <see cref="T:System.ComponentModel.DescriptionAttribute" />. Specify null to use the default description attribute value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetDisplayName(System.String)">
      <summary>Sets the display name attribute, using the specified display name value.</summary>
      <param name="value">The display name value used to create and add the <see cref="T:System.ComponentModel.DisplayNameAttribute" />. Specify null to use the default display name attribute value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetIsBrowsable(System.Boolean)">
      <summary>Adds a <see cref="T:System.ComponentModel.BrowsableAttribute" /> corresponding to the specified Boolean value that indicates whether the property can be modified at design time in a Properties window.</summary>
      <param name="value">A Boolean value that is converted to <see cref="F:System.ComponentModel.BrowsableAttribute.Yes" /> or <see cref="F:System.ComponentModel.BrowsableAttribute.No" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetIsLocalizable(System.Boolean)">
      <summary>Adds a <see cref="T:System.ComponentModel.LocalizableAttribute" /> corresponding to the specified Boolean value that indicates whether the property should be localized.</summary>
      <param name="value">A Boolean value that is converted to <see cref="F:System.ComponentModel.LocalizableAttribute.Yes" /> or <see cref="F:System.ComponentModel.LocalizableAttribute.No" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetIsReadOnly(System.Boolean)">
      <summary>Adds a <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> corresponding to the specified Boolean value that indicates whether the property is read-only.</summary>
      <param name="value">A Boolean value that is converted to <see cref="F:System.ComponentModel.ReadOnlyAttribute.Yes" /> or <see cref="F:System.ComponentModel.ReadOnlyAttribute.No" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetName(System.String)">
      <summary>Sets the property name.</summary>
      <param name="value">The property name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetPropertyType(System.Type)">
      <summary>Sets the property type to the specified type.</summary>
      <param name="value">A <see cref="T:System.Type" /> specifying the property type to set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>Sets the property value for the specified component to a new value.</summary>
      <param name="component">The component to set the property value for.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Indicates whether the property value of the specified component should be serialized.</summary>
      <returns>true if the property should be persisted; otherwise, false.</returns>
      <param name="component">The component with the property to be examined for persistence.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand">
      <summary>Provides the ability to determine the status of a shortcut menu command when multiple nodes are selected in Server Explorer for a specific data connection, and to invoke the command.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand.#ctor(System.ComponentModel.Design.CommandID,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand" /> class with the command and the view hierarchy.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> that uniquely identifies the command.</param>
      <param name="viewHierarchy">An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy" /> containing the collection of selected nodes for one data connection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand.#ctor(System.ComponentModel.Design.CommandID,System.EventHandler,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand" /> class with the command, an event, and the view hierarchy.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> that uniquely identifies the command.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
      <param name="viewHierarchy">An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy" /> containing the collection of selected nodes for one data connection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand.#ctor(System.ComponentModel.Design.CommandID,System.EventHandler,System.EventHandler,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand" /> class with the command, events, and the view hierarchy.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> that uniquely identifies the command.</param>
      <param name="statusHandler">The event to raise to convey status updates.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
      <param name="viewHierarchy">An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy" /> containing the collection of selected nodes for one data connection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand.Invoke(System.Object)">
      <summary>Invokes the command with the specified arguments for each node in the selection corresponding to one data connection.</summary>
      <param name="arg">Arguments for the command to be invoked.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand.UpdateStatus">
      <summary>Updates the status of this command based on the common set of status values extracted from all the nodes in the node selection for a data connection.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewSupport">
      <summary>Enables retrieving an XML stream that provides a description of one or more data views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewSupport" /> class with the resource base name and the assembly in which the resource is located.</summary>
      <param name="resourceName">The base name of the resource in the assembly.</param>
      <param name="assembly">The assembly that contains the resource.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewSupport" /> class with the base name of the XML file and the path to this file.</summary>
      <param name="fileName">The base name of the resource XML file.</param>
      <param name="path">The directory path to the XML file that contains the resource.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.Close">
      <summary>Closes the data view support object, allowing the provider to clean up resources when the data view hierarchy is closed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewSupport.Connection">
      <summary>Gets the connection associated with the data view hierarchy.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the connection associated with the data view hierarchy.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.CreateService(System.Type)">
      <summary>Creates a service for the specified type.</summary>
      <returns>A new service object for the specified type.</returns>
      <param name="serviceType">The type of service object to create.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.GetService(System.Type)">
      <summary>Retrieves the service object for the specified type.</summary>
      <returns>A service object for the specified type.</returns>
      <param name="serviceType">The type of service object to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.Initialize">
      <summary>Initializes the data view support object, allowing the provider to initialize resources when the data view hierarchy is created.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewSupport.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets or sets the site - the current instance of the view hierarchy object.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy" /> object representing the current instance of the view hierarchy.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.OpenSupportStream">
      <summary>Opens a stream of bytes representing the data view support XML.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object representing the data view support XML.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewSupport.ViewHierarchy">
      <summary>Gets the current instance of the view hierarchy object.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy" /> object representing the current instance of the view hierarchy.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DSRefBuilder">
      <summary>Allows you to create a Data Source Reference (DSRef) object that identifies one or more data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefBuilder" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefBuilder" /> class with the data connection.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the data connection to initialize the class with.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.AppendToDSRef(System.Object,System.String,System.Object[])">
      <summary>Appends information about a data object with the specified type and identifier to a specified existing DSRef object.</summary>
      <param name="dsRef">The existing DSRef object to which information is appended.</param>
      <param name="typeName">The name of the object type.</param>
      <param name="identifier">An array containing the identifier parts of the object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.AppendToDSRef(System.Object,System.String,System.Object[],System.Object[])">
      <summary>Appends information about a data object with the specified type and identifier to a specified existing DSRef object.</summary>
      <param name="dsRef">The existing DSRef object to which information is appended.</param>
      <param name="typeName">The name of the type of object.</param>
      <param name="identifier">An array containing the identifier parts of the object.</param>
      <param name="parameters">An array whose contents are specified by the Data Object Support XML.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dsRef" />, <paramref name="typeName" /> and/or <paramref name="identifier" /> parameters is null.</exception>
      <exception cref="T:System.InvalidOperationException">The site is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.Microsoft#VisualStudio#Data#Core#IVsDataSupportObject{T}#Invoke(System.String,System.Object[],System.Object[])">
      <summary>Invokes the method specified by the method name and passes it the specified arguments.</summary>
      <returns>Returns a null reference.</returns>
      <param name="name">The method name to invoke. For example, can be equal to "AppendToDSRef".</param>
      <param name="args">An array of objects containing the first three arguments to pass to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.AppendToDSRef(System.Object,System.String,System.Object[],System.Object[])" /> method.</param>
      <param name="parameters">The parameters array to pass to <see cref="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.AppendToDSRef(System.Object,System.String,System.Object[],System.Object[])" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="args" /> parameter is null or has a length different than 3, or the <paramref name="name" /> parameter is not equal to the "AppendToDSRef" string literal.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject">
      <summary>Provides the ability to create and read a clipboard object used for drag-and-drop operations between Server Explorer and the data designer. The DSRefClipboardObject object contains identifying information about the underlying object that is transferred.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" /> class, specifying a DSRef object.</summary>
      <param name="data">The DSRef object to be wrapped by the <see cref="T:Microsoft.VisualStudio.Data.Framework.ClipboardObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject.ContainsDSRef">
      <summary>Indicates whether the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" /> contains a DSRef object.</summary>
      <returns>true if the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" /> contains a DSRef object; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject.GetDSRef(System.IServiceProvider)">
      <summary>Extracts the DSRef object from the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" />.</summary>
      <returns>An object representing the extracted DSRef object.</returns>
      <param name="serviceProvider">A global Visual Studio service provider.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject.SetDSRef(System.Object)">
      <summary>Adds the DSRef object to the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" />.</summary>
      <param name="dsRef">The DSRef object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dsRef" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dsRef" /> parameter is invalid.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.NameAttribute">
      <summary>Specifies the string literal name of a given connection property when specified in a connection string.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.NameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Data.Framework.NameAttribute" />, specifying the connection property name.</summary>
      <param name="name">The string literal name of a specified connection property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.NameAttribute.Name">
      <summary>Gets the string literal name of a given connection property.</summary>
      <returns>The string literal connection property name.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.ServiceProvider">
      <summary>Provides an object that can proffer services by using both the managed and unmanaged IServiceProvider interfaces. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.#ctor">
      <summary>Initializes a new instance of a managed or unmanaged IServiceProvider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Wraps an unmanaged IServiceProvider interface that is accessible through the managed <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</summary>
      <param name="serviceProvider">An unmanaged IServiceProvider interface object to wrap.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of an unmanaged IServiceProvider interface.</summary>
      <param name="parentProvider">An unmanaged IServiceProvider interface object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Adds the specified service to the internal collection of services.</summary>
      <param name="serviceType">The type of the service to add.</param>
      <param name="callback">A callback object that is used to create the service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Adds the specified service to the internal collection of services or to the parent service container.</summary>
      <param name="serviceType">The type of the service to add.</param>
      <param name="callback">A callback object that is used to create the service.</param>
      <param name="promote">A <see cref="T:System.Boolean" /> value indicating whether to add the service to the parent container.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.AddService(System.Type,System.Object)">
      <summary>Adds the specified service to the internal collection of services.</summary>
      <param name="serviceType">The type of the service to add.</param>
      <param name="serviceInstance">The service object instance to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Adds the specified service to the collection of service objects or to the parent service container.</summary>
      <param name="serviceType">The type of the service to add.</param>
      <param name="serviceInstance">The service object to add.</param>
      <param name="promote">A <see cref="T:System.Boolean" /> value indicating whether to add the service to the parent container.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.GetService(System.Guid)">
      <summary>Retrieves a service with a specified service GUID.</summary>
      <returns>The service with the specified service GUID, or null if no service is found.</returns>
      <param name="serviceGuid">The GUID of a service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.GetService(System.Type)">
      <summary>Retrieves a service of the specified type.</summary>
      <returns>Returns the service of the specified type, or returns null if no service is found.</returns>
      <param name="serviceType">The service type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.Microsoft#VisualStudio#OLE#Interop#IServiceProvider#QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
      <summary>Performs as a factory for services that are exposed through an implementation of IServiceProvider.</summary>
      <returns>An integer specifying the address of the interface for the requested service.</returns>
      <param name="guidService">A unique identifier of the requested service.</param>
      <param name="riid">A unique identifier of the interface that the caller wants to receive for the service.</param>
      <param name="ppvObject">The address of the interface specified by the <paramref name="riid" /> parameter.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.ServiceProvider.ParentProvider">
      <summary>Gets the current instance of the parent service provider.</summary>
      <returns>The current instance of the parent service provider object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.RemoveService(System.Type)">
      <summary>Removes the specified service from the internal services collection </summary>
      <param name="serviceType">The type of the service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.RemoveService(System.Type,System.Boolean)">
      <summary>Removes the specified service from the internal services collection or from the parent service container.</summary>
      <param name="serviceType">The type of the service.</param>
      <param name="promote">A <see cref="T:System.Boolean" /> value indicating whether to remove the service from the parent container.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.SynonymsAttribute">
      <summary>Provides a comma-delimited list of connection property names that are synonymous with a primary connection property name.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.SynonymsAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.SynonymsAttribute" /> class.</summary>
      <param name="synonyms">A comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.SynonymsAttribute.Synonyms">
      <summary>Gets a comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</summary>
      <returns>A comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties" /> class using the ADO.NET connection string builder base class (<see cref="T:System.Data.Common.DbConnectionStringBuilder" />).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Add(System.String,System.Object)">
      <summary>Adds a new property to the current connection properties collection. Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event.</summary>
      <param name="key">Name of the property being added.</param>
      <param name="value">Value of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The connection string is not extensible.</exception>
      <exception cref="T:System.ArgumentException">The property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Add(System.String,System.Type,System.Object)">
      <summary>Adds a new property to the current connection properties collection. </summary>
      <param name="key">Name of the property being added.</param>
      <param name="type">Type of the property being added.</param>
      <param name="value">Value of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The connection string is not extensible.</exception>
      <exception cref="T:System.ArgumentException">The property already exists.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.ConnectionStringBuilder">
      <summary>Gets the underlying ADO.NET connection string builder object for the current connection properties instance.</summary>
      <returns>A <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> object representing a valid data connection string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Tests whether a specified property name and value pair is a member of the current set of connection properties.</summary>
      <returns>true if the specified property is a member of the connection properties collection; otherwise false.</returns>
      <param name="item">The property and value whose presence is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.ContainsKey(System.String)">
      <summary>Tests whether the specified property name is a member of the current set of connection properties.</summary>
      <returns>true if key was found, otherwise false.</returns>
      <param name="key">The property name whose presence is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the set of connection properties to an array, starting at the specified array index.</summary>
      <param name="array">Array into which the connection properties are copied.</param>
      <param name="arrayIndex">The index in the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Count">
      <summary>Gets the number of connection properties.</summary>
      <returns>The number of connection properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.GetSynonyms(System.String)">
      <summary>Retrieves an array list of synonyms for a specified data connection property. </summary>
      <returns>A list of synonyms for a specified property. </returns>
      <param name="key">Name of the property for which synonyms are retrieved.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.IsComplete">
      <summary>Gets a value indicating whether sufficient connection properties have been set for the connection string.</summary>
      <returns>true if the connection string is complete; otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.IsExtensible">
      <summary>Gets a value indicating whether the DDEX provider connection properties are extensible.</summary>
      <returns>true if the DDEX provider connection properties are extensible; otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.IsSensitive(System.String)">
      <summary>Returns a Boolean value indicating whether a specified property contains sensitive information.</summary>
      <returns>true if the property contains sensitive information; otherwise false.</returns>
      <param name="key">Name of the property for which the indication of sensitive information is provided.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Item(System.String)">
      <summary>Gets or sets a value for a specified property on the DDEX provider. Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event if the property is set.</summary>
      <returns>The value for the property with the specified name.</returns>
      <param name="key">Name of the property for which a value is retrieved or set.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Keys">
      <summary>Gets all the properties that are part of the data connection string.</summary>
      <returns>A collection of data connection properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.PropertyChanged" /> event when a property changes in the data connection string.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.OnSiteChanged(System.EventArgs)">
      <summary>Raises an event if the Site has changed.</summary>
      <param name="e">Event to be raised.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Parse(System.String)">
      <summary>Disassembles the components of a connection string into a set of connection properties as set in the current <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties" /> class instance. Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event.</summary>
      <param name="connectionString">The connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties" /> instance.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.PropertyChanged">
      <summary>Occurs on the occurrence of a change to a connection property.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Remove(System.String)">
      <summary>Removes a property from the current connection property collection. </summary>
      <returns>true if the property is successfully removed; false if the property does not exist.</returns>
      <param name="key">Name of the property to be removed from the current set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Reset">
      <summary>Resets a connection property to its initial value and raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Reset(System.String)">
      <summary>Removes the given property from the connection string and raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event.</summary>
      <returns>true if the property is successfully removed; false if the property does not exist.</returns>
      <param name="key">The property name that is to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds a new property to the current connection properties collection. Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event.</summary>
      <param name="item">The property to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all elements from the specified <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> instance is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> instance is read-only; otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Tests whether a specified property name and value pair is a member of the current set of connection properties.</summary>
      <returns>true if the specified property is a member of the connection properties collection; otherwise false.</returns>
      <param name="item">The property and value whose presence is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retrieves an enumerator that enumerates over all of the known connection properties and their values, if any.</summary>
      <returns>A data connection properties enumerator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator that enumerates over all of the known connection properties and their values, if any.</summary>
      <returns>A data connection properties enumerator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Retrieves a collection of custom attributes for the specified object.</summary>
      <returns>An AttributeCollection object instance that contains the attributes for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Retrieves the class name of the specified object.</summary>
      <returns>Returns the class name of the object, or null if the class does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Retrieves the name of the specified object.</summary>
      <returns>The name of the object, or null if the object does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Retrieves a type converter for the specified object.</summary>
      <returns>A TypeConverter instance appropriate for the specified object, or null if there is no TypeConverter for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Retrieves the default event for the specified object.</summary>
      <returns>An EventDescriptor representing the default event for the specified object, or null if this object does not have events.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Retrieves the default property for the specified object.</summary>
      <returns>A PropertyDescriptor representing the default property for this object, or null if this object does not have properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Retrieves an editor of the specified type for this object.</summary>
      <returns>An object of the specified type that is the editor for this object, or null if the editor cannot be found.</returns>
      <param name="editorBaseType">A managed Type representing the editor for this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents" />.</summary>
      <returns>Returns the events for this instance of a component.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents" />.</summary>
      <returns>Returns the events for this instance of a component.</returns>
      <param name="attributes">An array of attributes to use as a filter. This can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties" />.</summary>
      <returns>Returns the properties for this instance of a component.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties" />.</summary>
      <returns>Returns the properties for this instance of a component.</returns>
      <param name="attributes">An array of attributes to use as a filter. This can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <returns>Returns an object that contains the property described by the specified property descriptor.</returns>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the property whose owner is to be found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.ToDisplayString">
      <summary>Retrieves a string representation of the current set of data connection properties that are suitable for on-screen display.</summary>
      <returns>A string representation of the current set of data connection properties that are suitable for on-screen display.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.ToSafeString">
      <summary>Returns a string representation of the current set of data connection properties, excluding the sensitive properties that should be serialized.</summary>
      <returns>A string representation of the current set of data connection properties, excluding the sensitive properties that should be serialized.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.ToString">
      <summary>Returns a string representation of the current set of data connection properties.</summary>
      <returns>The data connection string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.TryGetValue(System.String,System.Object@)">
      <summary>Retrieves a value corresponding to the supplied key by calling this method on the .NET Framework connection string builder base class (<see cref="T:System.Data.Common.DbConnectionStringBuilder" />).</summary>
      <returns>true if the property is found; otherwise, false.</returns>
      <param name="key">The property name to be retrieved.</param>
      <param name="value">Output parameter. Contains the value of the property, if the property exists.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Values">
      <summary>Gets the values of the connection string.</summary>
      <returns>An object that implements the interface <see cref="I:System.Collections.Generic.ICollection" />, such as an array.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> interface, and an indirect implementation of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand" />, <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand" />, and <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataTransaction" /> interfaces, by using appropriate ADO.NET objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.#ctor">
      <summary>Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.BeginTransactionCore">
      <summary>Initiates a transaction.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Close">
      <summary>Closes the current data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CommitTransactionCore">
      <summary>Commits a transaction.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Connection">
      <summary>Gets the <see cref="T:System.Data.Common.DbConnection" /> object being used by the current connection support instance.</summary>
      <returns>A <see cref="T:System.Data.Common.DbConnection" /> object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ConnectionString">
      <summary>Gets or sets a string representation of information required to establish a specified data source connection.</summary>
      <returns>A string representation of the data source connection information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ConnectionTimeout">
      <summary>Gets or sets the amount of time, in seconds, to wait to establish a connection before terminating the attempt and generating a time-out error.</summary>
      <returns>An integer representation of the allowable time-out period, in seconds.</returns>
      <exception cref="T:System.NotSupportedException">The provider does not support connection time-out.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CreateParameterCore">
      <summary>Creates a new data parameter with interface <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" />.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CreateParameterFrom(System.Data.Common.DbParameter)">
      <summary>Creates a new data parameter with interface <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" />, using a copy of the specified data parameter.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" /> object instance.</returns>
      <param name="parameter">A <see cref="T:System.Data.Common.DbParameter" /> data parameter from which to create the new parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CreateService(System.ComponentModel.Design.IServiceContainer,System.Type)">
      <summary>Creates a new service object based on the specified interface service type.</summary>
      <returns>The service object.</returns>
      <param name="container">A service provider object to contain the service.</param>
      <param name="serviceType">A <see cref="T:System.Type" /> of the service to create.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CurrentCommand">
      <summary>Gets the <see cref="T:System.Data.Common.DbCommand" /> object currently being used by the current connection support instance.</summary>
      <returns>A <see cref="T:System.Data.Common.DbCommand" /> object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CurrentTransaction">
      <summary>Gets the <see cref="T:System.Data.Common.DbTransaction" /> object currently being used by the current connection support instance.</summary>
      <returns>A <see cref="T:System.Data.Common.DbTransaction" /> object instance, or null if not currently in a transaction.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.DeriveParametersCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)">
      <summary>Derives parameters that can be specified for a given command.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects, each one representing a parameter derived from the command.</returns>
      <param name="command">A data source–specific command from which to derive parameters.</param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the parameter derivation and returning to the caller. A value of zero indicates infinite time-out; value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.DeriveParametersOn(System.Data.Common.DbCommand)">
      <summary>Override to derive parameters from the given command.</summary>
      <param name="command">The data command to derive the parameters from.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.DeriveSchemaCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Derives the schema returned from a specified command, indicating the layout of items and blocks in a given data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object instance representing the command schema.</returns>
      <param name="command">Data source–specific command for which to derive the schema.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter" /> objects for the specified command type. </param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite time-out; value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Dispose(System.Boolean)">
      <summary>Releases all resources held by the data connection.</summary>
      <param name="disposing">Indicates whether both managed and unmanaged resources are to be released (true), or unmanaged resources only (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ExecuteCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Executes a specified command, optionally with parameters, and returns results as an <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">Command to execute that is specific to the data source.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameter" /> objects for the specified command type.</param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ExecuteWithoutResultsCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Executes a specified command, optionally with parameters. Does not return any query results.</summary>
      <returns>The number of rows affected.</returns>
      <param name="command">Command to execute that is specific to the data source.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameter" /> objects for the specified command type.</param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.GetCommand(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Constructs a <see cref="T:System.Data.Common.DbCommand" /> object from the given command string.</summary>
      <returns>A <see cref="T:System.Data.Common.DbCommand" /> object instance.</returns>
      <param name="command">Command to execute that is specific to the data source.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects for the specified command type.</param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.GetCommandType(Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Converts an enumeration value from <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> to its corresponding value in the <see cref="T:System.Data.CommandType" /> enumeration.</summary>
      <returns>A <see cref="T:System.Data.CommandType" /> enumeration value.</returns>
      <param name="commandType">The data command type to be converted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.InAsyncMode">
      <summary>Gets a value indicating whether the connection is in an asynchronous mode.</summary>
      <returns>true if in asynchronous mode is on; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Initialize(System.Object)">
      <summary>Initializes the specified ADO.NET connection, using a specified provider.</summary>
      <param name="providerObj">Data provider object, or null if a new object needs to be created.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" /> object currently being used by the current connection support instance.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Open(System.Boolean)">
      <summary>Opens the specified data connection.</summary>
      <returns>true if the connection opened successfully and does not require a prompt, false if the connection is missing required connection information and a prompt should be displayed to obtain the missing information form the user. You should return false only when a provider has implemented the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog" /> class.</returns>
      <param name="doPromptCheck">Indicates whether the call to the Open method should return false for specified errors that relate to missing connection information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.PrepareCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Prepares the specified command on the data source to be executed; the command can be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ExecuteCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method.</returns>
      <param name="command">Command to prepare for execution.</param>
      <param name="commandType">Command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameters.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects for the specified command type.</param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ProviderObject">
      <summary>Gets the underlying provider object for the specified connection.</summary>
      <returns>The ADO.NET data provider's object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.RollbackTransactionCore">
      <summary>Rolls back, or voids, a transaction and returns the new current transaction level.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.SetParameters(System.Data.Common.DbCommand,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>Adds new parameters to the given <see cref="T:System.Data.Common.DbCommand" /> command from the specified array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> parameters.</summary>
      <param name="command">Command to add parameters to.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects for the specified command type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.State">
      <summary>Gets the state of the data connection.</summary>
      <returns>The state of the connection, as enumerated by the <see cref="T:Microsoft.VisualStudio.Data.Core.DataConnectionState" /> class.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter" /> class using the ADO.NET <see cref="T:System.Data.Common.DbMetaDataCollectionNames.DataTypes" /> metadata collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter" /> class with the data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object containing the connection properties to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.ConvertToMappedMember(System.String,System.String,System.Object[],System.Object[])">
      <summary>Maps one or more data source–specific values to a specified generic mapped type: an ADO.NET data type, an ADO.NET DbType, or a .NET Framework Type value.</summary>
      <returns>An object representing the value of the generic, mapped type.</returns>
      <param name="typeName">The name of the data object type requesting this mapping.</param>
      <param name="mappedMemberName">The name of the generic concept.</param>
      <param name="underlyingValues">One or more data source–specific values to map into the concept specified by <paramref name="mappedMemberName" />.</param>
      <param name="parameters">Optional command parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="mappedMemberName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="values" /> array does not contain the expected type of data.</exception>
      <exception cref="T:System.NotImplementedException">This method does not support mapping of the specified type for the specified <paramref name="mappedMemberName" />.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.DataTypes">
      <summary>Gets data types as <see cref="T:System.Data.DataTable" /> object instances.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> object instance representing the data types.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.GetDbTypeFromNativeType(System.String)">
      <summary>Converts the specified native type to a <see cref="T:System.Data.DbType" /> type that is used by an ADO.NET data provider.</summary>
      <returns>A <see cref="T:System.Data.DbType" /> type, or a DbType.Object if the native type is not found.</returns>
      <param name="nativeType">A string containing the name of the native type to convert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.GetFrameworkTypeFromNativeType(System.String)">
      <summary>Converts the native type to a <see cref="T:System.Type" /> type </summary>
      <returns>A <see cref="T:System.Type" /> type, or a typeof(object) if the type cannot be converted.</returns>
      <param name="nativeType">A string containing the name of the native type to convert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.GetProviderTypeFromNativeType(System.String)">
      <summary>Converts the native type to the provider's specific type.</summary>
      <returns>The provider's specific type value, or 0 if the type cannot be converted.</returns>
      <param name="nativeType">A string containing the name of the native type to convert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter">
      <summary>Provides the ability to convert identifiers from strings to identifier parts and vice versa, and the ability to format identifiers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter" /> class with the specified data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object containing the connection properties to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.BuildString(System.String,System.String[],Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>Concatenates identifier parts into a string and inserts the separator character in between. </summary>
      <returns>The concatenated string containing all identifiers in the given order.</returns>
      <param name="typeName">The type of the database object.</param>
      <param name="identifierParts">An array of formatted identifier parts.</param>
      <param name="format">A value of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" /> enumeration. This value is used to check whether the string is used for display purposes only. If so, the format of the string is changed. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.CompositeIdentifierSeparator">
      <summary>Gets the identifier separator. By default, it is set to the dot character.</summary>
      <returns>The separator character.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.FormatPart(System.String,System.Object,Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>By default, adds quotation marks to the identifier part if the format parameter reveals that quotation marks are required. Override to customize the formatting that is added to the identifier part.</summary>
      <returns>The formatted identifier part.</returns>
      <param name="typeName">A database object type.</param>
      <param name="identifierPart">The name of the identifier part.</param>
      <param name="format">A value of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" /> enumeration. This value can be used to check whether the string is used for display purposes or requires quotation marks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.OnSiteChanged(System.EventArgs)">
      <summary>Handles the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.RequiresQuoting(System.String)">
      <summary>Indicates whether the specified identifier part requires quotation marks.</summary>
      <returns>A Boolean value indicating whether the identifier part requires quotation marks.</returns>
      <param name="identifierPart">The name of the identifier part</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.SplitIntoParts(System.String,System.String)">
      <summary>Divides the specified string version of an identifier into a set of formatted identifier parts by using the identifier separator character.</summary>
      <returns>An array of string values representing each an identifier extracted from the input string.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="identifier">The identifier to split into parts.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.UnformatPart(System.String,System.String)">
      <summary>Removes formatting of identifier parts, such as trimming leading and trailing spaces and removing quotation marks.</summary>
      <returns>The new identifier part, without its formatting.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierPart">A formatted identifier part.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer" /> class that uses the ADO.NET <see cref="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation" /> metadata collection to determine how to compare identifier parts.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer" /> class with the data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object containing the connection properties to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer.Compare(System.String,System.Object[],System.Int32,System.Object)">
      <summary>Compares one object identifier part with another specified object identifier part.</summary>
      <returns>An integer value less than zero if the identifier part is less than the specified value, zero if the identifier part is equal to the specified value, or greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="identifier">The identifier of an object of the type specified by the <paramref name="typeName" /> parameter, represented as an array of identifier parts.</param>
      <param name="identifierPart">The zero-based index in the identifier array indicating which part of the identifier to compare.</param>
      <param name="value">A value to compare the identifier part against.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer.RequiresQuoting(System.String)">
      <summary>Indicates whether an identifier part requires quotation marks.</summary>
      <returns>true if the identifier part requires quotation marks; otherwise, false.</returns>
      <param name="identifierPart">A string representing a portion of the identifier of a database object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectSelector" /> interface using the ADO.NET <see cref="M:System.Data.Common.DbConnection.GetSchema" /> method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector" /> class with the data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the communication to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector.ApplyMappings(System.Data.DataTable,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Applies the selector mappings.</summary>
      <param name="dataTable">The schema returned by the call to the <see cref="M:System.Data.Common.DbConnection.GetSchema" /> method.</param>
      <param name="mappings">Key/value pairs containing the selector mappings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schema" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector.SelectObjects(System.String,System.Object[],System.String[],System.Object[])">
      <summary>Returns a data reader for the data objects retrieved from the object store, which are filtered by the specified restrictions, properties, and parameters.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object representing a data reader for the selected data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="properties">Specifies the property values of the requested data objects. This is not supported in the current version of DDEX.</param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> parameter is not valid. Either it is null, or the number of elements contained in it is not 1 or 2, or the first element is not a string.</exception>
      <exception cref="T:System.InvalidOperationException">The site is null.</exception>
      <exception cref="T:System.NotImplementedException">The provider cannot be obtained.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter">
      <summary>Represents a data parameter that is derived from a data source command, or that is passed with a command to a data source whose underlying technology is ADO.NET.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.#ctor(System.Data.Common.DbParameter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter" /> class with a parameter object.</summary>
      <param name="parameter">A <see cref="T:System.Data.Common.DbParameter" /> object containing a command parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.#ctor(System.Data.Common.DbParameter,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter" /> class with a parameter object and an indication of whether the parameter is derived using the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</summary>
      <param name="parameter">A <see cref="T:System.Data.Common.DbParameter" /> object containing a command parameter.</param>
      <param name="isDerived">Indicates whether the data parameter instance was created as a return value of the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter" /> class with a parameter string value.</summary>
      <param name="providerInvariantName">The invariant name of the data provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter" /> class with the name of the data provider and an indication of whether the parameter is derived using the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</summary>
      <param name="providerInvariantName">The name of the data provider.</param>
      <param name="isDerived">Indicates whether the data parameter instance was created as a return value of the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetDirectionCore">
      <summary>Retrieves the parameter direction.</summary>
      <returns>The parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetIsNullableCore">
      <summary>Retrieves a Boolean value indicating whether this parameter can be null.</summary>
      <returns>true if this parameter can have a null value; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetNameCore">
      <summary>Retrieves the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetSizeCore">
      <summary>Retrieves an integer value specifying the size of the parameter.</summary>
      <returns>The size of the parameter as an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetTypeCore">
      <summary>Retrieves the data source–specific type of the parameter.</summary>
      <returns>The data source–specific type of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetTypeFrom(System.Object)">
      <summary>Maps the value type to a <see cref="T:System.Data.DbType" /> value and returns the string equivalent.</summary>
      <returns>The corresponding <see cref="T:System.Data.DbType" /> string value, or <see cref="F:System.Data.DbType.AnsiString" /> for a null or DBNull value.</returns>
      <param name="value">A candidate parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetValueCore">
      <summary>Retrieves the value of a specified parameter.</summary>
      <returns>The value of the specified parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.HasDescriptor">
      <summary>Gets a value indicating whether the data parameter exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameterDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.DataParameter.Descriptor" /> property.</summary>
      <returns>true if the data parameter has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.IsFixedSize">
      <summary>Gets a value indicating whether the size for the current parameter type is fixed.</summary>
      <returns>true if the type is not one of the following <see cref="T:System.Data.DbType" /> values: AnsiString, Binary, Object, String, or VarNumeric; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.IsValidType(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified data source–specific type is a valid type.</summary>
      <returns>true if the method successfully calls <see cref="M:System.Enum.Parse(System.Type,System.String)" /> on the input string; otherwise, false.</returns>
      <param name="type">A data source–specific data type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.Parameter">
      <summary>Gets the <see cref="T:System.Data.Common.DbParameter" /> object representing the command parameter.</summary>
      <returns>A <see cref="T:System.Data.Common.DbParameter" /> object representing the command parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.Parse(System.String)">
      <summary>Gets the <see cref="T:System.Data.DbType" /> and attempts to parse the input string value into the correct type by using primitive type conversions (like Byte.Parse and Int32.Parse).</summary>
      <param name="value">A string representation of a parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.SetDirectionCore(Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection)">
      <summary>Sets the direction of the parameter by using the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</summary>
      <param name="value">A specific data parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.SetNameCore(System.String)">
      <summary>Sets the name of the parameter.</summary>
      <param name="value">The string literal parameter name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.SetSizeCore(System.Int32)">
      <summary>Sets an integer value specifying the size of this parameter.</summary>
      <param name="value">An integer specifying size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.SetTypeCore(System.String)">
      <summary>Attempts to parse the string type into a <see cref="T:System.Data.DbType" /> enumeration value by using Enum.Parse. If this fails, the method assumes DbType.Object as the correct <see cref="T:System.Data.DbType" />.</summary>
      <param name="value">A parameter data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.SetValueCore(System.Object)">
      <summary>Sets the value of the parameter.</summary>
      <param name="value">An object value to which the parameter is set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> class based on the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> and <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> interfaces. This implementation uses the ADO.NET DbDataReader object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.#ctor(System.Data.Common.DbDataReader)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader" /> class with an ADO.NET data reader object.</summary>
      <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> object with which the class is initialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.#ctor(System.Data.Common.DbDataReader,System.Data.Common.DbCommand)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader" /> class with an ADO.NET data reader object and a command object.</summary>
      <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> object with which the class is initialized.</param>
      <param name="command">A <see cref="T:System.Data.Common.DbCommand" /> object with which the class is initialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.Close">
      <summary>Closes the current <see cref="T:System.Data.Common.DbDataReader" /> object instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves a specified number of bytes of binary data.</summary>
      <returns>A numerical value indicating the number of bytes read into the buffer.</returns>
      <param name="index">Index in the current block of data for the item to retrieve.</param>
      <param name="buffer">An array into which specified data, as byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">Index of the starting point in the byte array specified by the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified by the <paramref name="buffer" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItem(System.Int32)">
      <summary>Retrieves an object instance representing the retrievable item, as determined by an index in the current block of data.</summary>
      <returns>An object representing the item at the specified index.</returns>
      <param name="index">Index in the current block of the data item at which to retrieve the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItem(System.String)">
      <summary>Retrieves an object instance representing the retrievable item as specified by name.</summary>
      <returns>An object specified by name.</returns>
      <param name="name">The name of the data item in the current block to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItemIndex(System.String)">
      <summary>Retrieves the index of the item for the given item name, such as the index of a column for a given column name.</summary>
      <returns>The index of the data item.</returns>
      <param name="name">The name of the data item for which to retrieve the index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves the maximum length, in characters, of data items at the specified index.</summary>
      <returns>The maximum length, in number of characters, of the data item at the specified index, or -1 if the method could not obtain the maximum length.</returns>
      <param name="index">The index of the data item being examined for length.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItemName(System.Int32)">
      <summary>Retrieves the name assigned to the data item at the specified index, if any.</summary>
      <returns>The name assigned to the data item at the index specified by the <paramref name="index" /> parameter, or null if no name exists.</returns>
      <param name="index">The index of the data item for which to retrieve the name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat)">
      <summary>Retrieves the data type of a data item, or items, at the specified index in a specified format.</summary>
      <returns>The data type of the item or items at the specified index in the specified format.</returns>
      <param name="index">Index of the data item for which to return the data type.</param>
      <param name="itemTypeFormat">The format in which to return the data type information, as enumerated in <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.HasDescriptor">
      <summary>Gets a value indicating whether the data parameter exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.Descriptor" /> property.</summary>
      <returns>true if the data parameter has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.IsClosed">
      <summary>Gets a value indicating whether the specified data reader instance is closed.</summary>
      <returns>true if the specified data reader instance is closed; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.IsNullItem(System.Int32)">
      <summary>Indicates whether the value of the data item at the specified index is unspecified, that is, null.</summary>
      <returns>true if the item is null, that is, unspecified; otherwise false.</returns>
      <param name="index">Index of the data item to examine.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.ItemCount">
      <summary>Gets the number of items in the current block of data.</summary>
      <returns>An integer value indicating the number of items in the current block of data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.NextResult">
      <summary>Advances the data reader to the next result if the reader contains multiple results.</summary>
      <returns>true if more results remain to be read and the reader was advanced to the next result; false if no more results were found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.Read">
      <summary>Advances the reader to the next block of data if the reader contains more than one block.</summary>
      <returns>true if there are more blocks of data to read; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.Status">
      <summary>Gets a numerical status code returned by the method currently providing data to the data reader.</summary>
      <returns>A numerical status code from the method currently providing data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.Terminate">
      <summary>Terminates the data reader immediately, without necessarily returning all of the data or setting output parameters.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.UnderlyingReader">
      <summary>Gets the underlying <see cref="T:System.Data.Common.DbDataReader" /> object instance that is used by this class.</summary>
      <returns>The underlying <see cref="T:System.Data.Common.DbDataReader" /> object instance that is used by this class.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetRootObjectSelector">
      <summary>Enables getting root object properties, namely data source connection properties and some ADO.NET <see cref="T:System.Data.Common.DbConnection" /> properties.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetRootObjectSelector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetRootObjectSelector" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetRootObjectSelector.ApplyMappings(System.Data.DataTable,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Applies mapping using the specified data table.</summary>
      <param name="dataTable">The data table.</param>
      <param name="mappings">The mappings.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetRootObjectSelector.SelectObjects(System.String,System.Object[],System.String[],System.Object[])">
      <summary>Returns root object properties, such as the non-sensitive connection properties and some <see cref="T:System.Data.Common.DbConnection" /> properties, through a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object representing a data reader for the returned properties.</returns>
      <param name="typeName">The name of the mapped type.</param>
      <param name="restrictions">An array containing the restrictions used to filter object selection.</param>
      <param name="properties">An array containing the properties. The current version of DDEX does not support properties.</param>
      <param name="parameters">An array containing the parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The length of the <paramref name="typeName" /> parameter is not greater than zero.</exception>
      <exception cref="T:System.ArgumentException">The<paramref name=" restrictions" /> parameter is null, or its length is not greater than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The site is null.</exception>
      <exception cref="T:System.NotImplementedException">The provider could not be obtained.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader">
      <summary>Provides a means for obtaining the schema of the <see cref="T:System.Data.Common.DbDataReader" /> object that encapsulates the result set.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.#ctor(System.Data.Common.DbDataReader)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> class with a data reader object.</summary>
      <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> object containing the result set and the schema.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.#ctor(System.Data.Common.DbDataReader,System.Data.Common.DbCommand)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> class with a data reader object and a data command object.</summary>
      <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> object containing the result set and the schema.</param>
      <param name="command">A <see cref="T:System.Data.Common.DbCommand" /> object encapsulating the command executed against the data source, which allows the implementation of the <see cref="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Terminate" /> method to call <see cref="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.CancelAsync(System.Object)" /> on the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Close">
      <summary>Closes the current <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes into the buffer as an array, starting at a specified offset.</summary>
      <returns>A byte stream array.</returns>
      <param name="index">Index in the data field from which to begin the read operation.</param>
      <param name="buffer">The byte array to be read.</param>
      <param name="bufferIndex">Index in the buffer at which to start placing the data.</param>
      <param name="length">Length of the byte stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItem(System.Int32)">
      <summary>Retrieves a data item at a specified index.</summary>
      <returns>An integer specifying the index at which to retrieve the data item.</returns>
      <param name="index">Index into the field specifying the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItem(System.String)">
      <summary>Retrieves a data item with a specified name.</summary>
      <returns>The string literal name by which to retrieve the data item.</returns>
      <param name="name">The name of the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItemIndex(System.String)">
      <summary>Retrieves the index of the item for the given item name, such as the index of a column for a given column name.</summary>
      <returns>The index of the data item.</returns>
      <param name="name">The name of the data item for which to retrieve the index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves an integer value specifying the maximum length of the data item at the specified index.</summary>
      <returns>An integer value specifying the maximum length of the data item.</returns>
      <param name="index">Index in the field specifying the data item for which to retrieve the maximum length value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItemName(System.Int32)">
      <summary>Retrieves the string literal name of the data item at the specified index.</summary>
      <returns>The name of the data item at the specified index.</returns>
      <param name="index">Index in the field specifying the data item for which to retrieve the item name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat)">
      <summary>Retrieves the data type for a data item at a specified index and with a specified item type format.</summary>
      <returns>The data type for the specified data item.</returns>
      <param name="index">Index in the field specifying the data item for which to retrieve the item type format.</param>
      <param name="itemTypeFormat">The <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat" /> object instance specifying the data type format for the data item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.HasDescriptor">
      <summary>Gets a value indicating whether the data parameter exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Descriptor" /> property.</summary>
      <returns>true if the schema reader has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.IsClosed">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> is closed.</summary>
      <returns>true if the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> object is closed; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.IsNullItem(System.Int32)">
      <summary>Retrieves a Boolean value indicating whether the data item at the specified index is null.</summary>
      <returns>true if the data item is null; otherwise, false.</returns>
      <param name="index">Index in the field specifying the data item for which to test for null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.IsNullItem(System.String)">
      <summary>Retrieves a Boolean value indicating whether the data item value for the specified data item name is null.</summary>
      <returns>true if the data item is null; otherwise, false.</returns>
      <param name="name">The data item name for which to test for a null value.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.ItemCount">
      <summary>Gets an integer value specifying the number of data items contained in the current <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> instance.</summary>
      <returns>An integer specifying data items in the current <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.NextResult">
      <summary>Tests whether there is another result set and, if true, advances the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" />.</summary>
      <returns>true if another result exists; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Read">
      <summary>Tests whether there is another data record and, if true, advances the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> to the next record.</summary>
      <returns>true if there is another record (row) to read; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.SchemaTable">
      <summary>Gets the DataTable object that represents the schema of the <see cref="T:System.Data.Common.DbDataReader" /> passed into the constructor of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" />.</summary>
      <returns>Returns a DataTable object instance representing the schema table.</returns>
      <exception cref="T:System.InvalidOperationException">The data reader is closed, or the current row index value is not valid.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Status">
      <summary>Gets a numerical status code returned by the method currently providing data to the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> object.</summary>
      <returns>An integer value specifying a status code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Terminate">
      <summary>Terminates the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> object immediately, without necessarily returning all of the data or setting output parameters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation">
      <summary>Provides information about an ADO.NET data source in the form of properties passed as name/value pairs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataSourceInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataSourceInformation" /> class with a data connection object.</summary>
      <param name="connection">A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object used in the class.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.Connection">
      <summary>Gets the underlying <see cref="T:System.Data.Common.DbConnection" /> object instance used in the class.</summary>
      <returns>A <see cref="T:System.Data.Common.DbConnection" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.Microsoft#VisualStudio#Data#Services#SupportEntities#IVsDataSourceInformation#Contains(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified property is contained in the data source information instance.</summary>
      <returns>true if the specified property is contained in the data source information instance; otherwise, false.</returns>
      <param name="propertyName">The name of a data source information property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.Microsoft#VisualStudio#Data#Services#SupportEntities#IVsDataSourceInformation#Item(System.String)">
      <summary>Gets a data source information property with the specified name.</summary>
      <returns>The data source information property with the specified name.</returns>
      <param name="propertyName">The name of the data source information property to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.RetrieveValue(System.String)">
      <summary>Retrieves a value for a specified data source information property.</summary>
      <returns>The value of the data source information property, or null if the property is not supported.</returns>
      <param name="propertyName">The name of a data source information property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.SourceInformation">
      <summary>Gets in-memory data source information provided by an implementation of the <see cref="T:System.Data.DataTable" /> class to represent a table of in-memory data.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader">
      <summary>Retrieves the contents of one or more <see cref="T:System.Data.DataTable" /> objects in the form of one or more read-only, forward-only result sets.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.#ctor(System.Data.DataTable)">
      <summary>Initializes a parameterized instance of the T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataTableReader class along with a <see cref="T:System.Data.DataTable" /> instance.</summary>
      <param name="table">Contents, or result set, of the specified <see cref="T:System.Data.DataTable" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.#ctor(System.Data.DataTable,System.Int32)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataTableReader" /> class along with a <see cref="T:System.Data.DataTable" /> instance and a status value.</summary>
      <param name="table">Contents, or result set, of the specified <see cref="T:System.Data.DataTable" /> object.</param>
      <param name="status">The status integer value to initialize this class with.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.Close">
      <summary>Closes the current <see cref="T:System.Data.DataTable" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes into the buffer as an array, starting at a specified offset.</summary>
      <returns>An integer value specifying the offset at which to begin reading in the byte stream.</returns>
      <param name="index">Index in the data field from which to begin the read operation.</param>
      <param name="buffer">The byte array to be read.</param>
      <param name="bufferIndex">Index in the buffer at which to start placing the data.</param>
      <param name="length">Length of the byte stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItem(System.Int32)">
      <summary>Retrieves a data item at a specified index.</summary>
      <returns>Returns an object representing the item at the specified index.</returns>
      <param name="index">Index in the field specifying the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItem(System.String)">
      <summary>Retrieves a data item with a specified name.</summary>
      <returns>The data item with the specified name.</returns>
      <param name="name">Name of the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItemIndex(System.String)">
      <summary>Retrieves the index of the data item for the specified data item name.</summary>
      <returns>The index of the data item.</returns>
      <param name="name">The name of the data item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves an integer value specifying the maximum length of the data item at the specified index.</summary>
      <returns>An integer value specifying the maximum length of the data item.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the maximum length value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItemName(System.Int32)">
      <summary>Retrieves the string literal name of the data item at the specified index.</summary>
      <returns>The name of the data item at the specified index.</returns>
      <param name="index">Index in the field specifying the data item for which to retrieve the item name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat)">
      <summary>Retrieves the data type for a data item at a specified index and with a specified item type format.</summary>
      <returns>The data type for the specified data item.</returns>
      <param name="index">Index in the field specifying the data item for which to retrieve the item type format.The <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat" /> object specifying the data type format for the data item.</param>
      <param name="itemTypeFormat">Index in the field specifying the data item for which to retrieve the item type format.The <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat" /> object specifying the data type format for the data item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.HasDescriptor">
      <summary>Gets a value indicating whether the data parameter exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.Descriptor" /> property.</summary>
      <returns>true if the data parameter has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.IsClosed">
      <summary>Gets a value indicating whether the <see cref="T:System.Data.DataTable" /> is closed.</summary>
      <returns>true if the <see cref="T:System.Data.DataTable" /> object is closed; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.IsNullItem(System.Int32)">
      <summary>Retrieves a Boolean value indicating whether the data item at the specified index is null.</summary>
      <returns>true if the data item is null; otherwise, false.</returns>
      <param name="index">Index in the field specifying the data item for which to test for null.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.ItemCount">
      <summary>Gets an integer value specifying the number of data items contained in the current <see cref="T:System.Data.DataTable" /> instance.</summary>
      <returns>An integer specifying data items in the current <see cref="T:System.Data.DataTable" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.NextResult">
      <summary>Tests whether there is another result set and, if true, advances the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataTableReader" />.</summary>
      <returns>true if another result exists; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.Read">
      <summary>Tests whether there is another data record and, if true, advances the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataTableReader" /> to the next record.</summary>
      <returns>true if there is another record (row) to read; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.Status">
      <summary>Gets an integer value representing the status of the data table; however, invariably returns zero.</summary>
      <returns>An integer representing status.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.UnderlyingTable">
      <summary>Gets the underlying <see cref="T:System.Data.DataTable" /> object instance used in this class.</summary>
      <returns>The underlying <see cref="T:System.Data.DataTable" /> object instance used in this class.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Data.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Data</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Data.BasicPropertyAttribute">
      <summary>Provides a means for indicating whether or not a given connection property is among those most commonly used.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.BasicPropertyAttribute.#ctor(System.Boolean)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.BasicPropertyAttribute" /> class with a Boolean indication of whether the instance is "basic."</summary>
      <param name="isBasicProperty">Boolean value specifying whether the specified property is "basic."</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.BasicPropertyAttribute.Equals(System.Object)">
      <summary>Returns a value indicating whether the current instance is equal to a specified value. Overrides <see cref="M:System.Boolean.Equals(System.Boolean)" />.</summary>
      <returns>Returns true if the <paramref name="value" /> parameter equals the type and value of the current instance; otherwise returns false.</returns>
      <param name="obj">Object containing the value against which the equality test is performed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.BasicPropertyAttribute.GetHashCode">
      <summary>Returns the hash code for the current instance. Overrides <see cref="M:System.Int32.GetHashCode" />.</summary>
      <returns>Returns a 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.BasicPropertyAttribute.IsBasicProperty">
      <summary>Retrieves a Boolean indicating whether the property is "basic".</summary>
      <returns>Returns true if the property is "basic"; otherwise returns false. The default is false.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.BasicPropertyAttribute.No">
      <summary>Specifies that the property is not "basic".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.BasicPropertyAttribute.Yes">
      <summary>Specifies that the property is considered "basic".</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommand">
      <summary>Enables executing data commands in an asynchronous manner.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommand" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.AsyncDeriveParameters(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.Data.DataAsyncCommandEvents)">
      <summary>Derives, in an asynchronous manner, a set of parameters for use with a specified command.</summary>
      <param name="command">Command for which the parameters are derived.</param>
      <param name="commandType">Format of the command string.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="asyncCommandEvents">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.AsyncDeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32,Microsoft.VisualStudio.Data.DataAsyncCommandEvents)">
      <summary>Derives, in an asynchronous manner, the schema of the specified command.</summary>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">Format of the command string.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="asyncCommandEvents">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.AsyncExecute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32,Microsoft.VisualStudio.Data.DataAsyncCommandEvents)">
      <summary>Executes a command in an asynchronous manner.</summary>
      <param name="command">The command to be executed.</param>
      <param name="commandType">Format of the command string.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="asyncCommandEvents">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.AsyncExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32,Microsoft.VisualStudio.Data.DataAsyncCommandEvents)">
      <summary>Executes, in an asynchronous manner, a command that does not return any results beyond an integer value indicating status.</summary>
      <param name="command">The command to be executed.</param>
      <param name="commandType">Format of the command string.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="asyncCommandEvents">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.AsyncPrepare(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.Data.DataAsyncCommandEvents)">
      <summary>Prepares, in an asynchronous manner, the specified command to be executed against the data source; the command may then be executed multiple times, with varying parameters.</summary>
      <param name="command">The command to be prepared.</param>
      <param name="commandType">Format of the command string.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="asyncCommandEvents">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.Cancel">
      <summary>Cancels the asynchronous call, returning immediately.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.Cancel(System.Boolean)">
      <summary>Cancels the asynchronous call, returning either immediately (asynchronously) or after waiting for the call to be fully cancelled (synchronously).</summary>
      <param name="waitForEnd">Boolean flag indicating whether or not to wait for the call to be fully cancelled before returning.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandCancelEventHandler">
      <summary>Represents the method that is called when an asynchronous command is canceled.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandEndEventHandler">
      <summary>Represents the method that is called when an asynchronous command ends.</summary>
      <param name="result">The value returned by the command.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandEvents">
      <summary>Represents a set of delegates that are called by methods on the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommand" /> class to notify clients of command progress.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommandEvents" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.#ctor(Microsoft.VisualStudio.Data.DataAsyncCommandStartEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandFailureEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandCancelEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandEndEventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommandEvents" /> class with the specified delegates.</summary>
      <param name="commandStart">The delegate to call when a command is starting.</param>
      <param name="commandFailure">The delegate to call when there is a command failure.</param>
      <param name="commandCancel">The delegate to call when a command is canceled.</param>
      <param name="commandEnd">The delegate to call when a command has ended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.#ctor(Microsoft.VisualStudio.Data.DataAsyncCommandStartEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandFailureEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandFetchEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandFetchEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandCancelEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandEndEventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommandEvents" /> class with the specified delegates.</summary>
      <param name="commandStart">The delegate to call when a command is starting.</param>
      <param name="commandFailure">The delegate to call when there is a command failure.</param>
      <param name="commandNextResult">The delegate to call when a command has one or more result sets available.</param>
      <param name="commandRead">The delegate to call when a command has one or more blocks of data available to read from a result set.</param>
      <param name="commandCancel">The delegate to call when a command is canceled.</param>
      <param name="commandEnd">The delegate to call when a command has ended.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandCancel">
      <summary>Retrieves or sets the delegate that is called when an asynchronous command is canceled.</summary>
      <returns>Returns a delegate for the CommandCancel event handler.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandEnd">
      <summary>Retrieves or sets the delegate that is called when an asynchronous command has ended.</summary>
      <returns>Returns a delegate for the CommandEnd event handler.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandFailure">
      <summary>Retrieves or sets the delegate that is called when an asynchronous command has a failure.</summary>
      <returns>Returns a delegate for the CommandFailure event handler.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandNextResult">
      <summary>Gets or sets the delegate that is called when an asynchronous command has one or more result sets available.</summary>
      <returns>Returns a delegate for the CommandNextResult event handler.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandRead">
      <summary>Retrieves or sets the delegate that is called when an asynchronous command has one or more blocks of data available to read in a result set.</summary>
      <returns>Returns a delegate for the CommandRead event handler.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandStart">
      <summary>Retrieves or sets the delegate that is called when an asynchronous command starts.</summary>
      <returns>Returns a delegate for the CommandStart event handler.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandFailureEventHandler">
      <summary>Represents the method that is called when an asynchronous command fails.</summary>
      <param name="e">The exception that occurs to cause the command failure.</param>
      <param name="nonFatal">An indication if the failure is non-fatal; that is, that the command continues to run after this method returns.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandFetchEventHandler">
      <summary>Represents the method that is called when an asynchronous command has results available for fetching.</summary>
      <returns>Returns a value indicating how the command should proceed on return of this method.</returns>
      <param name="dataReader">The data reader object that provides the results.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandRequest">
      <summary>Enumeration specifying the manner in which an asynchronous command should continue after a call to the <see cref="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandNextResult" /> or <see cref="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandRead" /> methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataAsyncCommandRequest.None">
      <summary>There is no command request.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataAsyncCommandRequest.EndResultSet">
      <summary>The command should stop retrieving data in the current result set and proceed to the next result set, if any.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataAsyncCommandRequest.EndCommand">
      <summary>The command should stop retrieving data and end.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandStartEventHandler">
      <summary>Represents the method that is called when an asynchronous command starts.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataCommand">
      <summary>Provides the ability to build and execute data commands of various types against data sources, and to retrieve read-only results or a command status code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataCommand" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.CreateParameter">
      <summary>Creates a parameter object that can be passed into the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" />, <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" />methods on a <see cref="T:Microsoft.VisualStudio.Data.DataCommand" />class instance.</summary>
      <returns>Returns a new DataParameter object instance.</returns>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)">
      <summary>Derives the parameters that can be specified for a given command.</summary>
      <returns>Returns an array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> objects. Each object represents a parameter derived from the command.</returns>
      <param name="command">A command from which to derive parameters specific to a data source. </param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the parameter derivation and returning to the caller. A value of 0 indicates infinite timeout; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Derives the schema returned from a specified command, indicating the layout of items and blocks in a data reader.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema specific to a data source. </param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> objects for the specified command type. While this is an input parameter, the DDEX provider is still able to set properties on individual out and return value parameters. However, these will not be populated when deriving schema.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of 0 indicates infinite timeout; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Executes a specified command, optionally with parameters, and returns read-only results.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> objects for the specified command type. While this is an input parameter, the DDEX provider is still able to set properties on individual out and return value parameters.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite timeout; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Executes a command, optionally with parameters, but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>Returns a DDEX provider specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> objects for the specified command type. While this is an input parameter, the provider is still able to set properties on individual out and return value parameters. </param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. . A value of 0 indicates infinite timeout; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.Prepare(System.String,System.Int32,System.Int32)">
      <summary>Prepares the specified command on the data source to be executed; the command may then be executed multiple times, with varying parameters.</summary>
      <returns>Returns an identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> methods using the command type <see cref="F:Microsoft.VisualStudio.Data.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite timeout; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataCommandType">
      <summary>Represents a set of predefined data command types.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.Prepared">
      <summary>Indicates a prepared command type, where the command text is an identifier previously returned by a call to the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Prepare(System.String,System.Int32,System.Int32)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.Procedure">
      <summary>Indicates a procedure command type, where the command text is the name of the procedure to be executed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.ScalarFunction">
      <summary>Indicates a scalar function command type, where the command text is the identifier of a function to be executed that returns a scalar value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.Table">
      <summary>Indicates a table command type, where the command text is the identifier of a table from which all results should be retrieved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.TabularFunction">
      <summary>Indicates a tabular function command type, where the command text is the identifier of a function to execute that returns a result set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.Text">
      <summary>Indicates a text command type, where the command text should be native code understood by the DDEX provider, for example, SQL.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnection">
      <summary>Supports a connection to a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.AsyncCommand">
      <summary>Retrieves an object that can perform asynchronous derivation and execution of commands on the data source.</summary>
      <returns>Returns an object instance of the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommand" /> class, which can perform asynchronous derivation and execution of commands on the data source.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Clone">
      <summary>Creates a cloned instance of this data connection, which retains the same connection properties and state as the original.</summary>
      <returns>Returns a cloned instance of the current <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance, with the same connection properties and state as the original.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Close">
      <summary>Closes the current data connection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.Command">
      <summary>Retrieves an object that can perform derivation and execution of commands on the data source.</summary>
      <returns>Returns an object instance of the <see cref="T:Microsoft.VisualStudio.Data.DataCommand" /> class, which can perform derivation and execution of commands on the data source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ConnectionSupport">
      <summary>Retrieves the underlying data provider connection support object that is being used to support the current data connection instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> object instance, which functions as the underlying DDEX provider connection support object supporting the current data connection instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ConnectionTimeout">
      <summary>Retrieves or sets the amount of time, in seconds, before a command to open a connection times out.</summary>
      <returns>Returns an integer value specifying the amount of time, in seconds, until a command to open a connection times out.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.DisplayConnectionString">
      <summary>Retrieves or sets unencrypted connection information in the form of a DDEX-provider-specific string. </summary>
      <returns>Returns unencrypted connection information in the form of a provider-specific string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Dispose">
      <summary>Disposes of the current data connection and all its associated resources. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Dispose(System.Boolean)">
      <summary>Supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="disposing">Indicates whether the connection object is being disposed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.EncryptedConnectionString">
      <summary>Retrieves or sets encrypted connection information in the form of a DPAPI-encrypted, provider-specific string.</summary>
      <returns>Returns encrypted connection information in the form of a DPAPI_encrypted, provider-specific string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.EquivalentTo(System.Guid,System.String,System.Boolean)">
      <summary>Retrieves a Boolean value indicating whether or not information about the current connection is equivalent, in a design time sense, to the specified connection information.</summary>
      <returns>Returns true if the current connection's information is equivalent to connection information for the specified connection; otherwise returns false.</returns>
      <param name="provider">The unique identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted provider-specific connection string.</param>
      <param name="encryptedString">Indication whether the <paramref name="connectionString" /> parameter is unencrypted or encrypted. Provides true if encrypted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Finalize">
      <summary>Finalizes the connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.GetExclusiveAccessProxy(System.Int32)">
      <summary>Retrieves a proxy instance that allows the caller exclusive access to the data connection.</summary>
      <returns>Returns a proxy <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance that allows the caller exclusive access to the connection, or returns null if the lock timeout was reached and the connection could not be locked.</returns>
      <param name="lockTimeout">The amount of time, in seconds, to wait on locking the connection before returning.</param>
      <exception cref="T:System.InvalidOperationException">This object is an exclusive access proxy that no longer has exclusive access.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.GetLockedProviderObject">
      <summary>Retrieves the underlying data provider object, if any, which supports the current data connection.</summary>
      <returns>Returns a <see cref="M:Microsoft.VisualStudio.Data.DataConnection.GetLockedProviderObject(System.Int32)" /> object instance, if any, which supports the current data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.GetLockedProviderObject(System.Int32)">
      <summary>Retrieves the underlying data provider object, if any, which supports the current data connection.</summary>
      <returns>Returns a GetLockedProviderObject object instance, if any, that supports the current data connection, or returns null if the lock timeout was reached and the provider object could not be locked.</returns>
      <param name="lockTimeout">The amount of time, in seconds, to wait on locking the connection before returning.</param>
      <exception cref="T:System.InvalidOperationException">This object is an exclusive access proxy that no longer has exclusive access.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.IsLockedForExclusiveAccess">
      <summary>Retrieves a Boolean value indicating whether the current connection is locked by a client for exclusive access.</summary>
      <returns>Returns true if the specified connection is locked for exclusive access; otherwise returns false.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataConnection.MessageReceived">
      <summary>Event that is raised when a message is received from the data source.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ObjectChangeEvents">
      <summary>Retrieves an object that provides a set of events raised when data objects on the data source are added, changed, or removed.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeEvents" /> object instance, which provides a set of events raised when data objects on the data source are added, changed or removed.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ObjectIdentifierConverter">
      <summary>Retrieves an object that can convert data object identifiers from formatted strings to unformatted parts and vice versa.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> object instance, which can convert data object identifiers from formatted strings to unformatted parts and vice versa.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ObjectIdentifierResolver">
      <summary>Retrieves an object that can resolve data object identifiers through both expansion and contraction.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver" /> object instance, which can resolve data object identifiers using expansion, defined as completion of identifier parts, and contraction, reducing the identifier to its minimal representation.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ObjectItemComparer">
      <summary>Retrieves an object that can compare identifier parts and properties on data objects.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectItemComparer" /> object instance, which compares identifier parts and properties on data objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ObjectSupport">
      <summary>Retrieves an object that provides an XML stream defining the various DDEX data object types supported by the current data connection.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectSupport" /> object instance, which provides an XML stream with definitions for the DDEX data object types supported by the current data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.OnMessageReceived(Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.MessageReceived" /> event.</summary>
      <param name="e">Event arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.OnStateChanged(Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged" /> event.</summary>
      <param name="e">Event arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Open">
      <summary>Opens this data connection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.Provider">
      <summary>Retrieves the unique identifier of the DDEX Provider for the current data connection.</summary>
      <returns>Returns the global unique identifier (GUID) of the DDEX provider for this data connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ProviderObjectIsLocked">
      <summary>Retrieves a Boolean value indicating whether the underlying DDEX Provider object is locked for use by a client.</summary>
      <returns>Returns true if the underlying DDEX Provider object is locked for use by a client; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.ReleaseExclusiveAccessProxy">
      <summary>Releases an existing exclusive access proxy, as provided with a call to the <see cref="M:Microsoft.VisualStudio.Data.DataConnection.GetExclusiveAccessProxy(System.Int32)" /> method.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Access to this connection is not currently exclusive, or this thread is not the owner of the current exclusive access, or this object is not the current exclusive access proxy being used to access the connection.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.Source">
      <summary>Retrieves the globally unique identifier (GUID) of the data source for the current data connection, if any.</summary>
      <returns>Returns a GUID object instance representing the data source for the current data connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.SourceInformation">
      <summary>Retrieves an object that provides a set of well known name/value pairs describing the characteristics of the data source.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> object instance, which provides a set of name/value pairs that describe characteristics of the data source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.SourceVersionComparer">
      <summary>Retrieves an object that allows you to compare data-source-specific version numbers.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataSourceVersionComparer" /> object instance, which enables comparing data source version numbers.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.State">
      <summary>Retrieves the current state of this data connection.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionState" /> object instance that indicates the state of the current data connection.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged">
      <summary>Event that is raised when the state of the data connection has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.System#ICloneable#Clone">
      <summary>Creates a new connection object instance that is a copy of the current instance.</summary>
      <returns>Returns a connection object instance that is a copy of the current instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.Transaction">
      <summary>Retrieves an object that enables transaction processing; that is, allows you to begin, commit, and rollback transactions on the data source.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataTransaction" /> object instance, which provides the ability to begin, commit, and rollback transactions on the data source.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.UnlockProviderObject">
      <summary>Unlocks a DDEX Provider object that has been locked using a call to the <see cref="M:Microsoft.VisualStudio.Data.DataConnection.GetLockedProviderObject(System.Int32)" />method.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Access to this connection is not currently exclusive, or this thread is not the owner of the current exclusive access, or this object is not the current exclusive access proxy being used to access the connection.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ViewSupport">
      <summary>Retrieves an object that provides an XML stream defining the various data views supported by the current data connection.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataViewSupport" /> object instance, which contains an XML stream that provides definitions of the various data views supported by the current data connection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionDialog">
      <summary>Provides access to the Data Connection dialog box with which to obtain data connection information from users.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.#ctor">
      <summary>Class constructor. </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.AcceptButtonText">
      <summary>Retrieves or sets the text displayed on the button the user clicks to accept the contents of the Data Connection dialog box, then returns from the <see cref="M:Microsoft.VisualStudio.Data.DataConnectionDialog.ShowDialog" /> method.</summary>
      <returns>Returns the string value displayed on the button the user clicks to accept the contents of the dialog.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.AddAllSources">
      <summary>Adds all registered data sources for display on the Data Source dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.AddSources(Microsoft.VisualStudio.Data.DataConnectionDialogFilterCallback)">
      <summary>Enumerates all registered data sources and their associated data providers, and conditionally adds source/provider combinations to the Data Connection dialog box based on logic in the supplied callback.</summary>
      <param name="filterer">A delegate called for each data source/provider combination to determine if the combination should be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.AddSources(System.Guid)">
      <summary>Enumerates through all registered data sources and associated data providers, and adds those that have a matching provider technology.</summary>
      <param name="providerTechnology">A guid specifying a data provider technology.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.AvailableProviders">
      <summary>Retrieves a collection of unique identifiers for DDEX providers that are currently available for selection in the Data Connection dialog box.</summary>
      <returns>Returns an <see cref="T:System.Collections.ICollection" /> object instance that contains a collection of unique identifiers for the current set of available DDEX providers.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.AvailableSources">
      <summary>A collection of GUIDs representing DDEX data sources that should be available for display in the Data Connection dialog box.</summary>
      <returns>Returns an ICollection object instance containing available GUIDs.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.ChangeDataSourceHeaderLabel">
      <summary>Retrieves or sets a summary description appearing on the Data Source dialog box header when the user clicks on the Change... button.</summary>
      <returns>Returns a string literal value represented on the dialog box header.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.ChangeDataSourceTitle">
      <summary>Retrieves or sets the title of the Data Source dialog box, which can be shown when the user clicks the Change… button.</summary>
      <returns>Returns the string literal value for the dialog box title.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.ChooseDataSourceAcceptText">
      <summary>Retrieves or sets text that shows on the Data Source dialog box Accept button when it appears before the Data Connection dialog box.</summary>
      <returns>Returns the string literal value of the Accept button text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.ChooseDataSourceHeaderLabel">
      <summary>Retrieves or sets text of the description that appears on the header of the Data Source dialog box when it appears before the Data Connection dialog box.</summary>
      <returns>Returns the string literal value of the header text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.ChooseDataSourceTitle">
      <summary>Retrieves or sets the title of the Data Source dialog box when it appears before the Data Connection dialog box.</summary>
      <returns>Returns the string literal text value</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.DisplayConnectionString">
      <summary>Retrieves or sets unencrypted connection information for display on the Data Connection dialog box for the specified data provider.</summary>
      <returns>Returns string representing unencrypted connection information for the connection dialog box.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.Dispose">
      <summary>Disposes of the current instance of the data connection dialog and releases managed resources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.Dispose(System.Boolean)">
      <summary>Disposes of the current instance of the data connection dialog and releases managed resources.</summary>
      <param name="disposing">Boolean flag.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.EncryptedConnectionString">
      <summary>Retrieves or sets encrypted connection information for the dialog box for the specified data provider.</summary>
      <returns>Returns encrypted connection information represented by the dialog for the selected provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the DataConnectionDialog object is reclaimed by garbage collection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.HeaderLabel">
      <summary>Retrieves or sets a summary description that appears at the head of the Data Connection dialog box.</summary>
      <returns>Returns the string literal value of the dialog box header label, or returns null if no value is set.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.LoadExistingConfiguration(System.Guid,System.String,System.Boolean)">
      <summary>Configures the Data Connection dialog box with the specified existing DDEX provider and connection string, deriving the correct data source where possible.</summary>
      <param name="provider">GUID specifying a DDEX provider.</param>
      <param name="connectionString">A connection string recognized by the data provider.</param>
      <param name="encryptedString">Boolean indication whether the connection string parameter is encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The provider is an empty GUID and/or connectionString is null.</exception>
      <exception cref="T:System.ArgumentException">The specified provider is unknown to the dialog.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.LoadProviderSelections">
      <summary>Loads information about which DDEX provider is selected by default for each data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.LoadSourceSelection">
      <summary>Loads information about which data source is currently selected.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.OnVerifySettings(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataConnectionDialog.VerifySettings" /> event.</summary>
      <param name="e">A System.EventArgs that contains the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.SaveProviderSelections">
      <summary>Saves information about which DDEX provider is selected by default for each data source.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.SaveSelection">
      <summary>Retrieves or sets a value indicating whether the caller of the dialog box should persist the currently selected data source and DDEX provider combination.</summary>
      <returns>Returns true if the dialog box should persist the currently selected data source and DDEX provider combination; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.SaveSourceSelection">
      <summary>Saves information about which data source is currently selected.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.SelectedProvider">
      <summary>Retrieves or sets the data provider currently selected in the connection dialog box, using the data provider's GUID.</summary>
      <returns>Returns the GUID of the data provider currently selected in the dialog box.</returns>
      <exception cref="T:System.InvalidOperationException">When setting the selected provider, the value of SelectedSource is an empty GUID and the specified GUID is not empty.</exception>
      <exception cref="T:System.ArgumentException">When setting the selected provider, the specified GUID is not a registered DDEX provider.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.SelectedSource">
      <summary>Retrieves or sets a GUID value indicating the current selected data source.</summary>
      <returns>Returns a GUID object instance reflecting the current data source.</returns>
      <exception cref="T:System.ArgumentException">When setting the selected provider, the specified GUID is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.ShowDialog">
      <summary>Shows the Data Connection dialog box with the selected data provider and connection string settings pre-populated.</summary>
      <returns>Returns true if the user exited the dialog by clicking the accept button; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.ShowDialog(System.Boolean)">
      <summary>Shows the Data Connection dialog box pre-populated with the data provider and connection string settings and returns an open connection based on the connection string settings.</summary>
      <returns>Returns true if the dialog box should attempt to open the connection; otherwise returns false.</returns>
      <param name="connect">Boolean value indicating whether the dialog box should attempt to open the connection before returning.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.Title">
      <summary>Retrieves or sets the string representing text shown on the connection dialog box title bar.</summary>
      <returns>Returns the string representing the text shown in the title bar of the dialog box.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataConnectionDialog.UnspecifiedSource">
      <summary>Represents an unspecified data source.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataConnectionDialog.VerifySettings">
      <summary>The event raised when a user attempts to accept the connection settings in the Data Connection dialog box.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionDialogFactory">
      <summary>Provides the ability to create an instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionDialog" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialogFactory.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialogFactory.CreateConnectionDialog">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionDialogFactory" /> class.</summary>
      <returns>Returns a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionDialogFactory" /> class.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionDialogFilterCallback">
      <summary>Represents the method that is called when a Data Connection dialog box callback occurs while adding DDEX providers and data sources.</summary>
      <returns>Returns true if the data source and data provider GUIDs are an acceptable combination for including in the dialog; otherwise returns false.</returns>
      <param name="source">GUID of a DDEX data source.</param>
      <param name="provider">GUID of a DDEX provider.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionFactory">
      <summary>Provides the ability to create stand-alone instances of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionFactory.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionFactory.CreateDataConnection(System.Guid,System.String,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class with the specified connection information.</summary>
      <returns>Returns a specified <see cref="T:Microsoft.VisualStudio.Data.DataConnection" />object instance.</returns>
      <param name="provider">The unique identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is unencrypted or encrypted. Specifies true if encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cconnectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="provider" /> is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionFactory.CreateDataConnectionImpl(System.Guid,System.String,System.Boolean)">
      <summary>This member supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
      <param name="provider">The unique identifier of a data provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is unencrypted or encrypted. Specifies true if encrypted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionFactory.MakeDataConnectionFrom(System.Guid,System.Object)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class for the specified provider from an existing underlying provider object.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
      <param name="provider">The unique identifier of a DDEX provider.</param>
      <param name="providerObj">An existing underlying provider object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="providerObj" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="provider" /> is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionFactory.MakeDataConnectionFromImpl(System.Guid,System.Object)">
      <summary>This member supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
      <param name="provider">The unique identifier of a data provider.</param>
      <param name="providerObj">An existing underlying provider object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionManager">
      <summary>Represents a shared set of data connection objects that are created on demand and managed by Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.CopyTo(Microsoft.VisualStudio.Data.DataConnection[],System.Int32)">
      <summary>Copies the set of currently managed data connections to an array, starting at the specified array index.</summary>
      <param name="array">An array into which the data connections should be copied.</param>
      <param name="arrayIndex">The index in the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionManager.Count">
      <summary>Retrieves a count of the number of data connections currently being managed.</summary>
      <returns>Returns an integer representing the current number of data connections.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.CreateDataConnection(System.Guid,System.String,System.Boolean)">
      <summary>Initializes a data connection. This method should not be called by client code.</summary>
      <returns>This method is part of the DDEX infrastructure and is not intended to be called from your code.To obtain an existing or create a new connection, use the <see cref="M:Microsoft.VisualStudio.Data.DataConnectionManager.GetDataConnection(System.Guid,System.String,System.Boolean)" /> method.</returns>
      <param name="provider">DDEX provider GUID.</param>
      <param name="connectionString">DDEX provider connection string.</param>
      <param name="encryptedString">Indication whether the connection string information is encrypted (true if encrypted.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.GetDataConnection(System.Guid,System.String,System.Boolean)">
      <summary>Retrieves a data connection that is equivalent to the specified connection information.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance representing the requested connection.</returns>
      <param name="provider">DDEX provider GUID.</param>
      <param name="connectionString">DDEX provider connection string.</param>
      <param name="encryptedString">Indication whether the connection string information is encrypted (true if encrypted.)</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified <paramref name="provider" /> is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.GetDataConnection(System.Guid,System.String,System.Boolean,System.Boolean)">
      <summary>Retrieves a data connection that is equivalent to the specified connection information, with an indication whether the connection information is updated.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance representing the requested connection.</returns>
      <param name="provider">A DDEX data provider GUID.</param>
      <param name="connectionString">A connection string recognized by the data provider.</param>
      <param name="encryptedString">Indicates whether the connection string parameter is encrypted (true if encrypted).</param>
      <param name="update">Indicates whether the connection information is updated</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.InvalidateDataConnection(System.Guid,System.String,System.Boolean)">
      <summary>Invalidates a currently managed data connection that matches the specified connection information, if any.</summary>
      <param name="provider">A DDEX data provider GUID.</param>
      <param name="connectionString">A connection string recognized by the data provider.</param>
      <param name="encryptedString">Indicates whether the connection string parameter is encrypted (true if encrypted).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#ICollection{T}#Add(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Adds a data source to the DDEX data connection collection.</summary>
      <param name="item">DDEX data connection</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Clears the DDEX data connection collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#ICollection{T}#Contains(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Tests whether the DDEX data connection collection contains a specified connection.</summary>
      <returns>Returns true if the collection contains the specified data connection; otherwise returns false.</returns>
      <param name="item">DDEX data connection</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Tests whether the data connection collection is read only.</summary>
      <returns>Returns true if the collection is read only; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#ICollection{T}#Remove(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Removes a data connection from the DDEX data connection collection.</summary>
      <returns>Returns true if the data connection was found and successfully removed; otherwise returns false.</returns>
      <param name="item">DDEX data connection</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retrieves an enumerator for iterating the DDEX data connection collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an IEnumerator object with which to iterate through the collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs">
      <summary>Provides event data for the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.MessageReceived" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs.#ctor(System.String)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs" /> class, providing the event message.</summary>
      <param name="message">The message, as string, received from the data source.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs.Message">
      <summary>Retrieves the message supplied by data source.</summary>
      <returns>Returns the string literal message from the data source.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.MessageReceived" /> event of a data connection.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">
        <see cref="T:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException">
      <summary>Provides the exception that is thrown when a method call to open a data connection causes user intervention and the user is able to cancel the open call.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException.#ctor(System.String)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException" /> class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException.#ctor(System.String,System.Exception)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionPromptDialog">
      <summary>Represents a dialog box that can prompt the user for information when a data connection is being opened.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionPromptDialog.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPromptDialog" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionPromptDialog.ConnectionSupport">
      <summary>Retrieves the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> object on which the data provider should update the <see cref="P:Microsoft.VisualStudio.Data.DataConnectionSupport.ConnectionString" /> property.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> object instance on which the DDEX provider must update the <see cref="P:Microsoft.VisualStudio.Data.DataConnectionSupport.ConnectionString" /> property.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionPromptDialog.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
      <summary>Event handler for the <see cref="T:System.Windows.Forms.FormClosingEventArgs" /> event.</summary>
      <param name="e">Argument on the <see cref="M:Microsoft.VisualStudio.Data.DataConnectionPromptDialog.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)" /> event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionPromptDialog.ShowDialog(Microsoft.VisualStudio.Data.DataConnectionSupport)">
      <summary>Displays the prompt dialog box, given a specific <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> instance.</summary>
      <returns>Returns a string that is the new value of the connection string containing the completed information that was entered by the user.</returns>
      <param name="connectionSupport">An instance of <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> class that contains an existing, incomplete connection string that should be updated by this dialog.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionSupport" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionProperties">
      <summary>Provides support for the parsing and formatting of connection strings containing these properties, as well as for strongly typed property storage, custom attributes, and synonyms.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.#ctor">
      <summary>Class constructor. Instantiates a non-parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.#ctor(System.Collections.IComparer)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> class that provides the ability to compare property names.</summary>
      <param name="propertyNameComparer">A comparer of property names.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.#ctor(System.Collections.IComparer,System.Char,System.Char)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> class that provides the ability to compare property names.</summary>
      <param name="propertyNameComparer">A comparer of property names.</param>
      <param name="propertyNameValueSeparator">The character placed between the property name and property value in the connection string (for example, "=").</param>
      <param name="propertyEntrySeparator">The character placed between two property name/value pairs (for example, ";").</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Add(System.String)">
      <summary>Adds a new property to the current connection properties collection.</summary>
      <param name="propertyName">Name of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The connection properties are not extensible.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.AddProperty(System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>Dynamically adds a new property to the collection of properties natively recognized by the current instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> class.</summary>
      <returns>Returns the descriptor of the newly added property.</returns>
      <param name="descriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object that provides a description of this property and its characteristics.</param>
      <param name="attributes">A set of attributes to apply to the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="descriptor" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.AddProperty(System.String,System.Type,System.Attribute[])">
      <summary>Dynamically adds a new property to the collection of properties natively recognized by this data connection properties instance.</summary>
      <returns>The descriptor of the newly added property.</returns>
      <param name="name">The property name.</param>
      <param name="type">The data type of the property.</param>
      <param name="attributes">A set of attributes to attach to the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> and/or <paramref name="type" /> parameters are null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Contains(System.String)">
      <summary>Tests whether a specified property is a member of the current set of connection properties.</summary>
      <returns>Returns true if the specified property is a member of the connection properties collection; otherwise returns false.</returns>
      <param name="propertyName">Name of the property whose presence is being tested.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.EquivalentTo(Microsoft.VisualStudio.Data.DataConnectionProperties)">
      <summary>Retrieves a Boolean value indicating whether the current instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> class is equivalent to another <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
      <returns>Returns true if the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance is equivalent to another instance of the class; otherwise returns false.</returns>
      <param name="connectionProperties">The data connection properties instance to compare against.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionProperties" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetBasicProperties">
      <summary>Retrieves an array of property names representing the set of "basic" properties known by the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
      <returns>Returns the set of "basic" properties associated with the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetEnumerator">
      <summary>Retrieves an enumerator that enumerates over all the known connection properties and their values, if any.</summary>
      <returns>Returns a data connection properties enumerator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetNameAsString(System.String)">
      <summary>Formats a property name for placement in a connection string.</summary>
      <returns>Returns the formatted name of the input property name for placement in a connection string.</returns>
      <param name="propertyName">Name of the property for which the name is provided.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetProperties">
      <summary>Retrieves the collection of descriptors of all currently known properties.</summary>
      <returns>Returns the collection of descriptors of all currently known properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetProperties(System.Attribute[])">
      <summary>Retrieves the collection of descriptors of currently known properties that match a specified set of attributes.</summary>
      <returns>Returns a collection of descriptors of currently known properties that match a specified set of attributes.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter to define which properties to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetProperty(System.String)">
      <summary>Retrieves the descriptor of a property with the specified property name.</summary>
      <returns>Returns a descriptor of a property with the specified property name, or returns null if no property with the specified name is found.</returns>
      <param name="name">The name of a property for which to retrieve the descriptor.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetSynonyms(System.String)">
      <summary>Retrieves an array list of synonyms for a specified property.</summary>
      <returns>Returns a list of synonyms for a specified property.</returns>
      <param name="propertyName">The name of a property for which to retrieve the list of synonyms.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetValueAsString(System.String)">
      <summary>Formats a property value for placement in a connection string.</summary>
      <returns>Returns the value of the specified property in a string format suitable for placement in a connection string.</returns>
      <param name="propertyName">The name of a property to be formatted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The property does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Initialize(System.Collections.IDictionary)">
      <summary>Initializes the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance to its default state, then sets each property in the specified dictionary.</summary>
      <param name="properties">A dictionary of property name/value pairs with which the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance is configured. This parameter may be null, in which case no properties are configured.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.InitializeProperties">
      <summary>Initializes the set of natively recognized properties for the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.InitializeSynonyms">
      <summary>Initializes the set of synonyms available for each natively recognized property in the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.InitializeValue(System.String,System.Object)">
      <summary>Initializes the value of a specified connection property.</summary>
      <param name="propertyName">The name of a property being initialized.</param>
      <param name="value">The value to which the property is initialized.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">The specified value cannot be converted to the property type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.InitializeValues(System.Collections.IDictionary)">
      <summary>Initializes values for a specified set of properties using a dictionary of name/value pairs.</summary>
      <param name="values">A dictionary of property name/value pairs.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.IsComplete">
      <summary>Retrieves a Boolean value indicating whether a given connection string is complete.</summary>
      <returns>Returns true if the connection string is complete; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.IsExtensible">
      <summary>Retrieves or sets a Boolean value indicating whether the DDEX Provider connection properties are extensible.</summary>
      <returns>Returns true if the connection properties are extensible. Returns false otherwise.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.IsSensitive(System.String)">
      <summary>Indicates whether a property contains sensitive information.</summary>
      <returns>Returns true if the property contains sensitive information; otherwise, returns false.</returns>
      <param name="propertyName">The name of the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The property does not exist.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.Item(System.String)">
      <summary>Retrieves or sets a value for a specified property on the DDEX Provider.</summary>
      <returns>Returns the value associated with the specified property name. Alternatively, returns DBNull.Value if the property is known but is not set (and has no default), or returns null if the property is not known.</returns>
      <param name="propertyName">The name of a connection property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">When setting a property value, the specified value cannot be converted to the property type.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataConnectionProperties.Microsoft#Data#ConnectionUI#IDataConnectionProperties#PropertyChanged">
      <summary>Event that fires on the occurrence of a change to a connection property.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ModifyProperty(System.String,System.Attribute[])">
      <summary>Modifies an existing property of which the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance is natively aware.</summary>
      <param name="name">The name of a property.</param>
      <param name="attributes">A set of attributes that should be added or modified.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.OnPropertyChanged(Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataConnectionProperties.PropertyChanged" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.OrderedProperties">
      <summary>Retrieves a collection of property names specifying a reasonable (or necessary) order for the properties when represented in string form.</summary>
      <returns>A collection of property names indicating a reasonable (or necessary) order to the properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Parse(System.String)">
      <summary>Disassembles the components of a connection string into a set of properties in the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
      <param name="s">A connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</param>
      <exception cref="T:System.FormatException">The format of <paramref name="s" /> was invalid.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataConnectionProperties.PropertyChanged">
      <summary>Event that fires on the occurrence of a change to a connection property.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ReadNameFromString(System.String,System.Int32@)">
      <summary>Reads a property name from a connection string starting at a specified index, then updates the index to point to a position immediately following the property name.</summary>
      <returns>Returns the substring of the <paramref name="connectionString" /> parameter that represents the property name, between the input starting index and the end of the property name.</returns>
      <param name="connectionString">A connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</param>
      <param name="index">An index into this connection string indicating where to start reading the property name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ReadValueFromString(System.String,System.String,System.Int32@)">
      <summary>Reads a property value from a connection string starting at a specified index, converts it to the correct type, and updates the index to point to a position following the property name.</summary>
      <returns>Returns a substring of the <paramref name="connectionString" /> parameter representing the property value between the input starting index and the end of the property name, converted to the correct type.</returns>
      <param name="propertyName">The name of the property for which a value is being read.</param>
      <param name="connectionString">The connection string from which the value should be read.</param>
      <param name="index">Index into the connection string from which to start reading the value.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> and/or <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.FormatException">The format of the connection string is invalid.</exception>
      <exception cref="T:System.InvalidCastException">The read string value cannot be converted to the property type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Remove(System.String)">
      <summary>Removes a property from the current connection property collection.</summary>
      <param name="propertyName">Name of the property to be removed from the current set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.RemoveProperty(System.String)">
      <summary>Removes a natively recognized property.</summary>
      <param name="name">The name of a property to be removed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Reset">
      <summary>Resets the values of connection properties to an initial state.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Reset(System.String)">
      <summary>Resets the value of a specified connection property to its initial state.</summary>
      <param name="propertyName">Name of the property to reset.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ResolveSynonym(System.String,System.Boolean)">
      <summary>Attempts to resolves a synonym for the <see cref="T:System.ComponentModel.PropertyDescriptor" /> associated with a base property by returning the base property descriptor.</summary>
      <returns>Returns the descriptor of the base property located for the specified synonym.</returns>
      <param name="name">The name of a synonym.</param>
      <param name="setAsBaseName">Indicates whether this name should be set as the base name for the property, if found.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.SetSynonyms(System.String,System.String[])">
      <summary>Sets a list of strings as synonyms of a specified base property name.</summary>
      <param name="baseName">Name of the base property with which the specified synonyms are associated.</param>
      <param name="synonyms">An array of strings representing names that are synonymous with the base property name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> and/or <paramref name="synonyms" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ShouldPersistProperty(System.String)">
      <summary>Indicates whether a property should be persisted when building a connection string.</summary>
      <returns>Returns false if the specified property is not recognized, is not set, or if it is set to the default value; otherwise, it returns true.</returns>
      <param name="propertyName">The name of a property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="Name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the set of connection properties to an array, starting at the specified array index.</summary>
      <param name="array">Array into which the connection properties are copied.</param>
      <param name="index">The index into the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#ICollection#Count">
      <summary>Retrieves the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Returns the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#ICollection#IsSynchronized">
      <summary>Retrieves a value that indicates whether access to the connection properties collection is synchronized (thread safe).</summary>
      <returns>Returns true if access to the connection properties collection is synchronized (thread safe).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#ICollection#SyncRoot">
      <summary>Retrieves an object that can be used to synchronize access to the connection properties collection.</summary>
      <returns>Returns a synchronization object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds an element as a key/value pair to the specified <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">The object to use as the key of the element to add to the dictionary.</param>
      <param name="value">The object to use as the value of the element to add to the dictionary.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Clear">
      <summary>Removes all elements from the specified <see cref="T:System.Collections.IDictionary" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</summary>
      <returns>Returns true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key; otherwise returns false.</returns>
      <param name="key">The key on which to locate an element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#GetEnumerator">
      <summary>Retrieves an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#IsFixedSize">
      <summary>Retrieves a Boolean value indicating whether the specified <see cref="T:System.Collections.IDictionary" /> has a fixed size.</summary>
      <returns>Returns true if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#IsReadOnly">
      <summary>Retrieves a Boolean indicating whether the <see cref="T:System.Collections.IDictionary" /> is read-only.</summary>
      <returns>Returns true if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Item(System.Object)">
      <summary>Retrieves an item, or element, with the specified key.</summary>
      <returns>Returns the element with the specified key.</returns>
      <param name="key">The key on which to locate an item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Keys">
      <summary>Retrieves an <see cref="T:System.Collections.ICollection" /> containing the keys for the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Returns an <see cref="T:System.Collections.ICollection" /> containing the keys for the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">The key for the element to be removed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Values">
      <summary>Retrieves an <see cref="T:System.Collections.ICollection" /> containing the values in the specified <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Returns an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator that is able to iterate through the connection properties collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Retrieves a collection of custom attributes for the specified object.</summary>
      <returns>Returns an AttributeCollection instance containing the attributes for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Retrieves the class name of the specified object.</summary>
      <returns>Returns the class name of the object, or null if the class does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Retrieves the name of the specified object.</summary>
      <returns>Returns the name of the object, or null if the object does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Retrieves a type converter for the specified object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.TypeConverter" /> appropriate for the specified object, or returns null if there is no <see cref="T:System.ComponentModel.TypeConverter" /> for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Retrieves the default event for the specified object.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptor" /> representing the default event for the specified object, or returns null if this object does not have events.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Retrieves the default property for the specified object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the default property for this object, or returns null if this object does not have properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Retrieves an editor of the specified type for this object.</summary>
      <returns>Returns an object of the specified type that is the editor for this object, or returns null if the editor cannot be found.</returns>
      <param name="editorBaseType">A managed <see cref="T:System.Type" /> representing the editor for this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Retrieves the events for the specified instance of a component.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptorCollection" /> object representing the events for the specified component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Retrieves the events for this instance of a component using the specified attribute array as a filter.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptorCollection" /> representing the filtered events for the specified component instance.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Retrieves the properties for the specified instance of a component.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> representing the properties for this component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Retrieves the properties for the specified instance of a component using the attribute array as a filter.</summary>
      <returns>Returns an array of type <see cref="T:System.Attribute" /> that represents the filtered properties for this component instance.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Retrieves an object that contains the property described by the specified property descriptor.</summary>
      <returns>Returns an <see cref="T:System.Object" /> representing the owner of the specified property.</returns>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the property whose owner is to be found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Test">
      <summary>Tests to assure that the current set of connection properties will successfully open a connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ToDisplayString">
      <summary>Retrieves a string representation of the current set of data connection properties that are suitable for on-screen display.</summary>
      <returns>Returns a string representation of the current set of data connection properties that are suitable for on-screen display.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ToFullString">
      <summary>Retrieves a string representation of the current set of data connection properties for this instance.</summary>
      <returns>Returns a string representation of the current set of data connection properties for this instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ToString">
      <summary>Retrieves a full string representation of the current connection properties.</summary>
      <returns>The connection properties.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs">
      <summary>Provides event data for the <see cref="E:Microsoft.VisualStudio.Data.DataConnectionProperties.PropertyChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs.#ctor(System.String)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs" /> class, providing the property name.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs.PropertyName">
      <summary>Retrieves the name of the property that has changed.</summary>
      <returns>Returns the string literal name of the property that has changed.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:Microsoft.VisualStudio.Data.DataConnectionProperties.PropertyChanged" /> event on the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs" /> object instance that contains the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionState">
      <summary>Specifies the state of a specified data connection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataConnectionState.Closed">
      <summary>The data connection is closed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataConnectionState.Open">
      <summary>The data connection is open.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataConnectionState.Broken">
      <summary>The data connection was previously open, but has been broken for unknown reasons.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs">
      <summary>Provides event data for the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged" /> event on a data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs.#ctor(Microsoft.VisualStudio.Data.DataConnectionState,Microsoft.VisualStudio.Data.DataConnectionState)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs" /> class and provides the old and new states.</summary>
      <param name="oldState">The state of the data connection prior to change.</param>
      <param name="newState">The state of the data connection subsequent to change.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs.NewState">
      <summary>Retrieves the state of the data connection subsequent to change.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionState" /> object instance indicating the new state of the data connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs.OldState">
      <summary>Retrieves the old state of the data connection.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionState" /> object instance indicating the old state of the data connection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged" /> event of a specified data connection.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs" />object instance that contains the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionSupport">
      <summary>Provides properties and methods that enable you to work directly with connections to a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Close">
      <summary>Closes the specified connection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionSupport.ConnectionString">
      <summary>Retrieves or sets a string representation of information required to establish a given data source connection.</summary>
      <returns>Returns a string representation of the data source connection information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionSupport.ConnectionTimeout">
      <summary>Retrieves or sets the amount of time, in seconds, to wait to establish a connection before terminating the attempt and generating a timeout error.</summary>
      <returns>Returns an integer representation of the allowable timeout period, in seconds.</returns>
      <exception cref="T:System.NotSupportedException">The provider does not support connection timeout.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Dispose">
      <summary>Performs tasks associated with freeing, releasing, or resetting resources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Dispose(System.Boolean)">
      <summary>Performs tasks associated with freeing, releasing, or resetting resources.</summary>
      <param name="disposing">true if this method was called by the public <see cref="M:System.IDisposable.Dispose" /> method, false if it was called by the class finalizer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Finalize">
      <summary>Finalizes the connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.GetServiceImpl(System.Type)">
      <summary>Allows you to obtain implementation services.</summary>
      <returns>The service implementation.</returns>
      <param name="serviceType">Data type of the service to be implemented.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Initialize(System.Object)">
      <summary>Initializes the specified connection, optionally from an existing data provider object.</summary>
      <param name="providerObj">An existing DDEX Provider object to be wrapped, or null if a new provider object should be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Open(System.Boolean)">
      <summary>Opens the specified connection.</summary>
      <returns>Returns true if the connection was opened successfully and does not require a prompt.Returns false if the connection is missing required connection information and a prompt should be displayed to obtain the missing information from the user. You should return this value only when a data provider has also implemented the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPromptDialog" /> class.</returns>
      <param name="doPromptCheck">Indicates whether the call to the Open method should return false for specific errors that relate to missing connection information, as opposed to simply throwing an error in all cases of failure. Data providers that do not implement a prompt dialog (or have their own prompting mechanism) should ignore this parameter, and always assume a value of false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionSupport.ProviderObject">
      <summary>Retrieves the underlying data provider object for the specified connection.</summary>
      <returns>Returns a provider object for the specified connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.RaiseMessageReceived(System.String)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.MessageReceived" />event on the enclosing <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> instance.</summary>
      <param name="message">The message received from the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.RaiseStateChanged(Microsoft.VisualStudio.Data.DataConnectionState,Microsoft.VisualStudio.Data.DataConnectionState)">
      <summary>Raises the state changed event on the enclosing <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> instance.</summary>
      <param name="oldState">The state of the connection prior to raising the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged" /> event.</param>
      <param name="newState">The state of the connection subsequent to raising the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged" /> event.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionSupport.State">
      <summary>Retrieves the state of the data connection.</summary>
      <returns>Returns the state of the connection, as enumerated by the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionState" /> class.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionUIControl">
      <summary>Enables a custom user interface (UI) control for editing connection properties on the Data Connection dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionUIControl.#ctor">
      <summary>Class constructor. Instantiates an instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionUIControl" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionUIControl.ConnectionProperties">
      <summary>Retrieves a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> object for populating and persisting the contents of a connection-related user interface (UI) control.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> object instance for populating a UI control.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionUIControl.Initialize(Microsoft.VisualStudio.Data.DataConnectionProperties)">
      <summary>Initializes connection UI control by providing a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance to be used for persisting the properties.</summary>
      <param name="connectionProperties">Connection property to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionProperties" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connectionProperties" /> parameter is not a valid implementation of DataConnectionProperties understood by this connection UI control.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionUIControl.LoadProperties">
      <summary>Loads the properties of controls on the Data Connection dialog box. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionUIControl.Microsoft#Data#ConnectionUI#IDataConnectionUIControl#Initialize(Microsoft.Data.ConnectionUI.IDataConnectionProperties)">
      <summary>Initializes connection UI control by providing a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance to be used for persisting the properties.</summary>
      <param name="connectionProperties">Connection property to initialize.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataExplorerConnection">
      <summary>Represents a connection that exists in the Visual Studio Server Explorer or Data Explorer window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnection.#ctor">
      <summary>Class constructor. This constructor supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnection.DisplayName">
      <summary>Retrieves or sets the display name of the root node for this data connection.</summary>
      <returns>Returns the string literal display name of the root node for this connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnection.EncryptedConnectionString">
      <summary>Retrieves an encrypted string containing information about this data connection.</summary>
      <returns>Returns an encrypted string containing information about this connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnection.Equals(System.Object)">
      <summary>Evaluates whether a specified object is equivalent to the current Explorer connection object instance.</summary>
      <returns>Returns true if the specified object is equivalent to the current connection; otherwise returns false.</returns>
      <param name="obj">Object against which the equivalency test is performed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnection.GetHashCode">
      <summary>Retrieves an integer value representing the hash code for the current Explorer connection instance.</summary>
      <returns>Returns an integer value representing the hash code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnection.Hierarchy">
      <summary>Gets the underlying <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object that represents this Explorer connection in the tree view. </summary>
      <returns>Returns the underlying <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object that represents this connection in the tree view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnection.HierarchyObject">
      <summary>This member supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
      <returns>The hierarchy object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnection.Provider">
      <summary>Retrieves the unique identifier of the DDEX Provider for this Explorer connection.</summary>
      <returns>Returns the unique identifier of the DDEX Provider for this connection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataExplorerConnectionManager">
      <summary>Provides methods and properties that enable programmatic interaction with data connections exposed in the Server Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.#ctor">
      <summary>Class constructor. This member supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.AddConnection(System.String,System.Guid,System.String,System.Boolean)">
      <summary>Adds a new connection to the Server Explorer window with the specified connection settings.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance with specified setting, representing a new connection (or existing connection if a connection with equivalent settings already exists).</returns>
      <param name="connectionName">The initial name to use for the root connection node. If null, a generated name is used.</param>
      <param name="provider">The unique identifier of a data provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">An indication whether the <paramref name="connectionString" /> parameter is unencrypted or encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The provider is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.CopyTo(Microsoft.VisualStudio.Data.DataExplorerConnection[],System.Int32)">
      <summary>Copies all <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instances into an array, starting at a specified index.</summary>
      <param name="array">The array that is the destination of the data explorer connections.</param>
      <param name="index">The zero-based index into the array at which copying begins.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.Count">
      <summary>Retrieves an integer value specifying the number of current data connections visible in the Server Explorer.</summary>
      <returns>Returns an integer value specifying the number of current data connections visible in the Server Explorer.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.FindConnection(System.Guid,System.String,System.Boolean)">
      <summary>Locates a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance with specified connection settings.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance representing the specified connection, or returns null if no such connection is found.</returns>
      <param name="provider">The global unique identifier (guid) of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">A Boolean flag indicating whether the <paramref name="connectionString" /> parameter is unencrypted or encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The provider is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.FindConnection(System.String)">
      <summary>Locates a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance with a specified display name.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance representing the specified connection, or returns null if no such connection could be found.</returns>
      <param name="connectionName">The display name of an existing connection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.GetConnections">
      <summary>Retrieves an array containing all the current <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> instances.</summary>
      <returns>Returns an array containing all of the current <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instances.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.PromptAndAddConnection">
      <summary>Prompts the user for, and adds, a new <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance representing a new data connection (or existing connection if a connection with equivalent settings already exists).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.RemoveConnection(Microsoft.VisualStudio.Data.DataExplorerConnection)">
      <summary>Removes an existing <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance from the set of current connections.</summary>
      <param name="explorerConnection">The data explorer connection to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="explorerConnection" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.SelectConnection(Microsoft.VisualStudio.Data.DataExplorerConnection)">
      <summary>Selects a specific data connection in the Server Explorer tree view.</summary>
      <param name="explorerConnection">The data explorer connection to select.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="explorerConnection" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the set of connections exposed in the Visual Studio Server Explorer to an array, starting at the specified array index.</summary>
      <param name="array">Array into which the connections are copied.</param>
      <param name="index">The index into the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.System#Collections#ICollection#IsSynchronized">
      <summary>Retrieves a value that indicates whether access to the connections collection is synchronized (thread safe).</summary>
      <returns>Returns true if access to the connections collection is synchronized (thread safe).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.System#Collections#ICollection#SyncRoot">
      <summary>Retrieves an object that can be used to synchronize access to the connections collection.</summary>
      <returns>Returns a synchronization object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator that is able to iterate through the connections collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataItemTypeFormat">
      <summary>Specifies the format of a data item type returned by the <see cref="M:Microsoft.VisualStudio.Data.DataReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.DataItemTypeFormat)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataItemTypeFormat.Unknown">
      <summary>Item type is unknown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataItemTypeFormat.VarType">
      <summary>The item type format is an integer representing a VARENUM value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataItemTypeFormat.NativeType">
      <summary>The item type format is a string representing the native type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataItemTypeFormat.ManagedType">
      <summary>The item type format is an instance of <see cref="T:System.Type" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs">
      <summary>Encapsulates event data for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectAdded" />, <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" />, and <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectRemoved" /> events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.#ctor(Microsoft.VisualStudio.Data.DataObjectChangeType,System.String,System.Object[])">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs" /> class with object change data.</summary>
      <param name="changeType">The type of change that has occurred, from among values defined by the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeType" /> enumeration.</param>
      <param name="typeName">The name of the object type involved in the change.</param>
      <param name="identifier">The identifier of the object involved in the change.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.#ctor(Microsoft.VisualStudio.Data.DataObjectChangeType,System.String,System.Object[],System.Object[])">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs" /> class when the identifier of the changed object is modified.</summary>
      <param name="changeType">The type of change that has occurred, from among values defined by the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeType" /> enumeration.</param>
      <param name="typeName">The name of the object type involved in the change.</param>
      <param name="identifier">The identifier of the object involved in the change.</param>
      <param name="newIdentifier">The new identifier of the object after the change.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.ChangeType">
      <summary>Retrieves the type of data object change that occurred, from among those obtained from the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeType" /> enumeration.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeType" /> value representing the type of data object change that occurred.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.Identifier">
      <summary>Retrieves the identifier of the data object involved in the change.</summary>
      <returns>Returns the identifier for the data object instance involved in the change.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.NewIdentifier">
      <summary>Retrieves the new identifier of the data object after the change.</summary>
      <returns>Returns the new identifier of the data object after the change, or returns null if the new identifier does not make sense in the context of the data object change type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.TypeName">
      <summary>Retrieves the name of the data object type involved in the change.</summary>
      <returns>Returns the string literal name of the data object type involved in the change.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event on the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeEvents" /> class.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectChangeEvents">
      <summary>Provides a set of events which a DDEX provider can raise when changes to data objects are made, and provides the means by which a provider can connect to them.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeEvents" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.EndEventGroup(System.Int32)">
      <summary>Terminates an event group that was initiated by calling the <see cref="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.StartEventGroup(System.Int32)" /> method.</summary>
      <param name="groupId">An ID number for the specified event group.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.EventGroupEnded">
      <summary>Event raised when an event group has completed.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.EventGroupStarted">
      <summary>Event raised when an event group has started.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectAdded">
      <summary>Event raised when a data object has been added.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged">
      <summary>Event raised when a data object has been changed.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectRemoved">
      <summary>Event raised when a data object has been removed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.OnEventGroupEnded(System.EventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.EventGroupEnded" /> event.</summary>
      <param name="e">Arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.OnEventGroupStarted(System.EventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.EventGroupStarted" /> event.</summary>
      <param name="e">Arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.OnObjectAdded(Microsoft.VisualStudio.Data.DataObjectChangedEventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectAdded" /> event.</summary>
      <param name="e">Arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.OnObjectChanged(Microsoft.VisualStudio.Data.DataObjectChangedEventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event.</summary>
      <param name="e">Arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.OnObjectRemoved(Microsoft.VisualStudio.Data.DataObjectChangedEventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectRemoved" /> event.</summary>
      <param name="e">Arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectAdded(System.Int32,System.String,System.Object[])">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectAdded" /> event within a specific event group.</summary>
      <param name="groupId">The ID of the event group in which the event should be raised, or zero to indicate no group.</param>
      <param name="typeName">The name of the type of object that was added.</param>
      <param name="identifier">The identifier of the object that was added.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectAdded(System.String,System.Object[])">
      <summary>Raises a standalone <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectAdded" /> event, specifying the object type and identifier.</summary>
      <param name="typeName">The name of the type of object that was added.</param>
      <param name="identifier">The identifier of the object that was added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectChanged(System.Int32,System.String,System.Object[])">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event within a specified event group.</summary>
      <param name="groupId">The ID of the event group in which the event should be raised, or zero to indicate no group.</param>
      <param name="typeName">The name of the type of object that was changed.</param>
      <param name="identifier">The identifier of the object that was changed.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectChanged(System.Int32,System.String,System.Object[],System.Object[])">
      <summary>Raises an <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event within a specific event group for an object whose identifier was modified during the change.</summary>
      <param name="groupId">The ID of a group in which the event should be raised, or zero to indicate no group.</param>
      <param name="typeName">The name of the type of object that was changed.</param>
      <param name="identifier">The identifier of the object that was changed.</param>
      <param name="newIdentifier">The new identifier of the object after it was changed.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectChanged(System.String,System.Object[])">
      <summary>Raises a standalone <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event, specifying the type name and identifier.</summary>
      <param name="typeName">The name of the type of object that was changed.</param>
      <param name="identifier">The identifier of the object that was changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectChanged(System.String,System.Object[],System.Object[])">
      <summary>Raises a standalone <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event for an object whose identifier was modified during the change.</summary>
      <param name="typeName">The name of the type of object that was changed.</param>
      <param name="identifier">The identifier of the object that was changed.</param>
      <param name="newIdentifier">The new identifier of the object after it was changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectRemoved(System.Int32,System.String,System.Object[])">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectRemoved" /> event within a specified event group.</summary>
      <param name="groupId">The ID of a group in which the event should be raised, or zero to indicate no group.</param>
      <param name="typeName">The name of the type of object that was removed.</param>
      <param name="identifier">The identifier of the object that was removed.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectRemoved(System.String,System.Object[])">
      <summary>Raises a standalone <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectRemoved" /> event, specifying type name and object identifier.</summary>
      <param name="typeName">The name of the type of object that was removed.</param>
      <param name="identifier">The identifier of the object that was removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RollbackEventGroup(System.Int32)">
      <summary>Ends an event group by removing the queued event set from the group.</summary>
      <param name="groupId">Identifier of the event group being rolled back.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.StartEventGroup(System.Int32)">
      <summary>Starts a group of events initiated by a call to the StartEventGroup method.</summary>
      <returns>Returns the group ID of the parent group.</returns>
      <param name="groupId">The parent group ID, if any; otherwise zero.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectChangeType">
      <summary>Specifies the type of data object change that has occurred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectChangeType.Add">
      <summary>A new data object has been added.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectChangeType.Change">
      <summary>An existing data object has been changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectChangeType.Remove">
      <summary>An existing data object has been removed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectConceptMapper">
      <summary>Enables providing a customized mapper of data-source-specific metadata into well known concepts for use by a generic designer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectConceptMapper.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectConceptMapper" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectConceptMapper.Connection">
      <summary>Retrieves the active <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance to be used for any code that relies on connection-specific information.</summary>
      <returns>Returns the active <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectConceptMapper.MapValuesToConcept(System.String,System.String,System.Object[])">
      <summary>Maps one or more data-source-specific values to a specified generic concept.</summary>
      <returns>Returns the value of the generic concept.</returns>
      <param name="typeName">The name of the data object type requesting this mapping.</param>
      <param name="conceptName">The name of the generic concept.</param>
      <param name="values">One or more data source specific values to map into the concept specified by <paramref name="conceptName" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="conceptName" /> and/or <paramref name="values" /> parameter is null</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="typeName" /> and/or <paramref name="conceptName" /> parameter is invalid, or the <paramref name="values" /> array does not contain the expected type of data.</exception>
      <exception cref="T:System.NotSupportedException">This method does not support mapping of the specified concept for the specified types.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectEnumerator">
      <summary>Provides the ability to enumerate data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectEnumerator.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectEnumerator" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectEnumerator.Connection">
      <summary>Retrieves the current data connection.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance representing the current data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectEnumerator.EnumerateObjects(System.String,System.Object[],System.Object[],System.String,System.Object[])">
      <summary>Enumerates items for a set of data objects of the specified type with the specified restrictions and sort string, if supported.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object containing the results of the enumeration call.</returns>
      <param name="typeName">Name of the type of the object to enumerate.</param>
      <param name="items">The set of items to enumerate, specified as strings where named items are available, otherwise as indexes. In cases in which a data provider does not support items filtering, this parameter is ignored.Not supported in Visual Studio 2005.</param>
      <param name="restrictions">A set of filtering restrictions to apply to the set of returned objects.</param>
      <param name="sort">A sort string, which follows syntax for the SQL Server ORDER BY clause. The actual sort order should be source-based; that is, if the client is English and the source is Chinese, the sort should be applied in Chinese.Not supported in Visual Studio 2005.</param>
      <param name="parameters">An array whose contents are defined by the given implementation of <see cref="M:Microsoft.VisualStudio.Data.DataObjectEnumerator.EnumerateObjects(System.String,System.Object[],System.Object[],System.String,System.Object[])" />, and which is specified by the Data Object Support XML file. Information supplied in this parameter can be used to provide extra data indicating how to perform the enumeration, allowing implementations of this method to be more data driven.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter">
      <summary>Provides the ability to convert data-source-specific object identifiers from strings to identifier parts, and from identifier parts to strings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.#ctor(System.String[],System.Char,System.Char)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> class with the specified configuration.</summary>
      <param name="reservedWords">An array of strings that are considered reserved and should always be quoted if included in an identifier.</param>
      <param name="quote">The character that should be used to quote identifier parts.</param>
      <param name="separator">The character that separates identifier parts.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.BuildString(System.String,System.String[],System.Boolean)">
      <summary>Builds a string version of an identifier.</summary>
      <returns>Returns a string version of an identifier.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierParts">An array of formatted identifier parts.</param>
      <param name="forDisplay">Indicates whether the resulting string will be used for display purposes only.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifierParts" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="identifierParts" /> parameter contains invalid data.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.ConvertToArray(System.String,System.String)">
      <summary>Converts a formatted string identifier into its equivalent set of identifier parts.</summary>
      <returns>Returns an array containing the separated, unformatted identifier parts as derived from the input identifier.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">A partially or fully formatted identifier.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.ConvertToString(System.String,System.Object[],Microsoft.VisualStudio.Data.DataObjectIdentifierFormat)">
      <summary>Converts a set of identifier parts into a formatted string identifier based on the specified formatting options.</summary>
      <returns>Returns a partially or fully formatted identifier, depending on which parts of the input array were specified.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">An array containing a set of identifier parts for a specified object.</param>
      <param name="format">A set of flags indicating how to format the resulting string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.Default">
      <summary>Represents a default instance of <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> class that is used when a provider-specific implementation does not exist.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.FormatPart(System.String,System.Object,System.Boolean)">
      <summary>Formats a specified identifier part.</summary>
      <returns>Returns the specified identifier part as a formatted string.</returns>
      <param name="typeName">The name of the data object type.</param>
      <param name="identifierPart">The unformatted value of an identifier part.</param>
      <param name="withQuotes">Indicates whether the formatted part should be enclosed in quotation marks, where necessary.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.SplitIntoParts(System.String,System.String)">
      <summary>Divides a string version of an identifier into a set of formatted identifier parts.</summary>
      <returns>Returns an array of formatted identifier parts.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">A partially or fully formatted identifier.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.UnformatPart(System.String,System.String)">
      <summary>Removes formatting applied to a given identifier part.</summary>
      <returns>Returns the unformatted equivalent of the formatted identifier part.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierPart">A formatted identifier part.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectIdentifierFormat">
      <summary>Specifies how to format a data object identifier as a string when converting from a set of identifier parts.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectIdentifierFormat.None">
      <summary>No specialized formatting is applied to the string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectIdentifierFormat.WithQuotes">
      <summary>Where necessary, the identifier is enclosed in quotation marks using the correct date-source-specific quoting mechanism. Specifying this option should always cause a valid identifier that can be parsed by the data source to be created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectIdentifierFormat.ForDisplay">
      <summary>Format the identifier as a string to be used for display purposes rather than for passing to the data source. For example, this might format the identifier of the table 'authors' owned by Fred as 'authors (Fred)'.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver">
      <summary>Provides the ability to expand and contract an identifier for a specified data object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.#ctor">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.ContractIdentifier(System.String,System.Object[],System.Boolean)">
      <summary>Contracts an identifier for a data object with the specified type and complete identifier and an indication whether or not any cached contraction should be updated.</summary>
      <returns>Returns the partial, contracted unique identifier for a data object.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="fullIdentifier">A full identifier of a data object.</param>
      <param name="refresh">An indication whether any cached contraction should be updated.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.Default">
      <summary>Provides a <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver" /> object instance that is used by default when a provider-specific implementation does not exist.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.ExpandIdentifier(System.String,System.Object[],System.Boolean)">
      <summary>Expands an identifier for a data object with the specified type and partially complete identifier and an indication whether any cached expansion should be updated.</summary>
      <returns>Returns the complete, expanded identifier of the data object that matches the partial identifier passed in, or null if the identifier could not be expanded.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="partialIdentifier">A partial identifier of a data object.</param>
      <param name="refresh">An indication whether any cached expansion should be updated.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.QuickContractIdentifier(System.String,System.Object[])">
      <summary>Applies an algorithm for quickly contracting an identifier, if possible.</summary>
      <returns>Returns the contracted identifier, or returns null if it was not possible to quickly contract the identifier.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="fullIdentifier">A full identifier of a data object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.QuickExpandIdentifier(System.String,System.Object[])">
      <summary>Applies an algorithm for quickly expanding an identifier, if possible.</summary>
      <returns>Returns the expanded identifier, or returns null if it was not possible to quickly expand the identifier.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="partialIdentifier">A partial identifier of a data object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.SlowContractIdentifier(System.String,System.Object[])">
      <summary>Contracts an identifier by whatever means are available.</summary>
      <returns>Returns the contracted identifier.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="fullIdentifier">A full identifier of a data object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.SlowExpandIdentifier(System.String,System.Object[])">
      <summary>Expands an identifier by whatever means are available.</summary>
      <returns>The expanded identifier.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="partialIdentifier">A partial identifier of a data object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectItemComparer">
      <summary>Allows you to compare two data object identifier parts or properties.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectItemComparer.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectItemComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectItemComparer.Compare(System.String,System.Object[],System.Int32,System.Object)">
      <summary>Compares one object identifier part with another specified object identifier part.</summary>
      <returns>Returns less than zero in cases where the identifier part is less than the specified value. Returns zero if the identifier part is equal to the specified value. Returns greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="identifier">The identifier of an object of the type specified by <paramref name="typeName" /> parameter.</param>
      <param name="identifierPart">The zero based index into the identifier array indicating which part of the identifier to compare.</param>
      <param name="value">A value to compare the identifier part against.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="identifier" /> parameter is less than zero or greater than or equal to the number of elements in the identifier array.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectItemComparer.Compare(System.String,System.String,System.Object,System.Object)">
      <summary>Compares a property of a data object with another data object property.</summary>
      <returns>Returns less than zero in cases where the identifier part is less than the specified value. Returns zero if the identifier part is equal to the specified value. Returns greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="propertyName">The name of a property to compare.</param>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectItemComparer.Default">
      <summary>Represents a default instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectItemComparer" /> class that is used when a provider-specific implementation does not exist.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectRestrictionMapper">
      <summary>Provides a way to customize mappings from generic restrictions to data-source-specific restrictions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectRestrictionMapper.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectRestrictionMapper" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectRestrictionMapper.Connection">
      <summary>Retrieves the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance for the current connection.</summary>
      <returns>Returns the current <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectRestrictionMapper.MapValuesToRestriction(System.String,System.Int32,System.Object[])">
      <summary>Maps a set of generic restrictions to a data-source-specific restriction.</summary>
      <returns>Returns the value of the requested source-specific restriction.</returns>
      <param name="conceptName">Name of the type concept on which generic restrictions are being supplied.</param>
      <param name="index">Index of the data-source-specific restriction to which a mapping is made.</param>
      <param name="values">The set of initial generic restriction values to use in this custom restriction mapping.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="conceptName" /> and/or <paramref name="values" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is not a valid restriction index.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectSupport">
      <summary>Allows you to retrieve an XML stream that describes a set of data object types on a data source, which can then interpret and manipulate programmatically.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectSupport.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectSupport" /> class that provides means for locating a resource stream.</summary>
      <param name="baseName">The base name of the resource in the assembly.</param>
      <param name="assembly">The assembly that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectSupport.#ctor(System.String,System.String)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectSupport" /> class that provides resource directory information.</summary>
      <param name="baseName">The base name of the resource in the assembly.</param>
      <param name="directory">The directory that contains the XML file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> and/or <paramref name="directory" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectSupport.GetDataObjectTypes">
      <summary>Retrieves an XML stream that contains information about a set of data object types that can be interpreted and manipulated programmatically.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> object instance from which XML data is read.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataParameter">
      <summary>Represents a data parameter that is derived from a data source command, or that is passed with a command to a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.#ctor">
      <summary>Class constructor. Initializes a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.#ctor(System.Boolean)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> class, along with an indication whether the instance was derived using the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)" /> method.</summary>
      <param name="isDerived">Indicates whether this data parameter instance was created as a return value of the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)" /> method.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.DefaultPrecision">
      <summary>Retrieves a byte value specifying the default precision for the current parameter type.</summary>
      <returns>Returns a byte value specifying the default precision for the current parameter type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.DefaultScale">
      <summary>Retrieves a byte value specifying the default scale for the current parameter type.</summary>
      <returns>Returns the default scale for the current parameter type as a byte value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.DefaultSize">
      <summary>Retrieves and integer value specifying the default size for the current parameter type.</summary>
      <returns>Returns the default size for the current parameter type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Direction">
      <summary>Retrieves or sets a <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> object specifying the direction of the parameter.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> object specifying the direction of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetDirectionImpl">
      <summary>Retrieves the parameter direction.</summary>
      <returns>Returns the parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetIsNullableImpl">
      <summary>Retrieves a Boolean value indicating whether or not this parameter can be null.</summary>
      <returns>Returns true if this parameter can have a null value; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetIsOptionalImpl">
      <summary>Retrieves a Boolean value indicating whether this parameter is optional.</summary>
      <returns>Returns true if this parameter is optional; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetNameImpl">
      <summary>Retrieves the name of the parameter.</summary>
      <returns>Returns the name of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetPrecisionImpl">
      <summary>Retrieves a byte value specifying the precision of the parameter.</summary>
      <returns>Returns the precision of the parameter as a byte value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetScaleImpl">
      <summary>Retrieves a byte value specifying the scale of the parameter.</summary>
      <returns>Returns the scale of the parameter as a byte value. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetSizeImpl">
      <summary>Retrieves an integer value specifying the size of the parameter.</summary>
      <returns>Returns the size of the parameter and an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetTypeFrom(System.Object)">
      <summary>Infers the data-source-specific parameter type from a parameter value.</summary>
      <returns>Returns the data-source-specific type, or returns null if the value type is not supported.</returns>
      <param name="value">A candidate parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetTypeImpl">
      <summary>Retrieves the data-source-specific type of the parameter.</summary>
      <returns>Returns the data-source-specific type of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetValueImpl">
      <summary>Retrieves the value of a specified parameter.</summary>
      <returns>Returns the value of the specified parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsDerived">
      <summary>Retrieves a Boolean value that indicates whether this parameter was derived from the data source.</summary>
      <returns>Returns true if the specified parameter was derived from the data source; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsFixedPrecision">
      <summary>Retrieves a Boolean value indicating whether the precision for the current parameter type is fixed.</summary>
      <returns>Returns true if the precision is fixed for the current parameter type; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsFixedScale">
      <summary>Retrieves a Boolean value indicating whether the scale for the current parameter type is fixed.</summary>
      <returns>Returns true if the scale is fixed for the current parameter type; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsFixedSize">
      <summary>Retrieves a Boolean value indicating whether the size for the current parameter type is fixed.</summary>
      <returns>Returns true if the size is fixed for the current parameter type; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsNullable">
      <summary>Retrieves a Boolean value indicating whether this parameter can have a null value.</summary>
      <returns>Returns true if this parameter can have a null value; otherwise returns false.</returns>
      <exception cref="T:System.InvalidOperationException">This parameter is not derived.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsOptional">
      <summary>Retrieves a Boolean value indicating whether this parameter is optional, in cases where this parameter is a derived parameter.</summary>
      <returns>Returns true if this parameter is optional; otherwise returns false.</returns>
      <exception cref="T:System.InvalidOperationException">This parameter is not derived.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.IsSupportedDirection(Microsoft.VisualStudio.Data.DataParameterDirection)">
      <summary>Retrieves a Boolean value indicating whether the specified parameter direction is supported.</summary>
      <returns>Returns true if the specified parameter direction is supported; otherwise returns false.</returns>
      <param name="direction">A parameter direction, as defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.IsValidType(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified data-source-specific type is a valid type.</summary>
      <returns>Returns true if the specified data-source-specific type is a valid type; otherwise returns false.</returns>
      <param name="type">A data-source-specific data type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Name">
      <summary>Retrieves or sets the string literal name of the parameter.</summary>
      <returns>Returns the name of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnDirectionChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Direction" /> property is changed to signal a change in the parameter direction.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnDirectionChanging(Microsoft.VisualStudio.Data.DataParameterDirection)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Direction" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Direction" /> property will be set to, from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnNameChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Name" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnNameChanging(System.String)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Name" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Name" /> property will be set to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnPrecisionChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Precision" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnPrecisionChanging(System.Byte)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Precision" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Precision" /> property will be set to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnScaleChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Scale" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnScaleChanging(System.Byte)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Scale" /> property is about to change.</summary>
      <param name="value">The value to which the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Scale" /> property is to be set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnSizeChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Size" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnSizeChanging(System.Int32)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Size" /> property is about to change.</summary>
      <param name="value">The value to which the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Size" /> property will be set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnTypeChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Type" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnTypeChanging(System.String)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Type" /> property is about to change.</summary>
      <param name="value">The value that the Type property will be set to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnValueChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Value" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnValueChanging(System.Object)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Value" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Value" /> property will be set to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.Parse(System.String)">
      <summary>Disassembles a parameter value in a string format and converts the value to the correct type.</summary>
      <param name="value">A string representation of a parameter value.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Precision">
      <summary>Retrieves or sets a byte value specifying the precision of the parameter.</summary>
      <returns>Returns the precision of the parameter as a byte value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Scale">
      <summary>Retrieves or sets a byte value specifying the scale of the parameter.</summary>
      <returns>Returns the scale of the parameter as a byte value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetDirectionImpl(Microsoft.VisualStudio.Data.DataParameterDirection)">
      <summary>Sets the direction of the parameter using the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</summary>
      <param name="value">A specific data parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetNameImpl(System.String)">
      <summary>Sets the name of the parameter.</summary>
      <param name="value">The string literal parameter name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetPrecisionImpl(System.Byte)">
      <summary>Sets a byte value specifying the precision of the parameter.</summary>
      <param name="value">A byte value specifying precision.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetScaleImpl(System.Byte)">
      <summary>Sets a byte value specifying the scale of the parameter.</summary>
      <param name="value">A byte value specifying scale.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetSizeImpl(System.Int32)">
      <summary>Sets an integer value specifying the size of this parameter.</summary>
      <param name="value">An integer specifying size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetTypeImpl(System.String)">
      <summary>Sets the data type of this parameter.</summary>
      <param name="value">A parameter data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetValueImpl(System.Object)">
      <summary>Sets the value of this parameter.</summary>
      <param name="value">An object value to which the parameter is set.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Size">
      <summary>Retrieves or sets an integer value specifying the size of the parameter.</summary>
      <returns>Returns the size of the parameter as an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.ToString">
      <summary>Retrieves a string representation of the value of this parameter.</summary>
      <returns>Returns a string representation of the value of this parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.TryConvertValue(System.Object,System.String)">
      <summary>Attempts to convert the specified value to the specified type.</summary>
      <returns>Returns the converted value, or returns null if no conversion was possible.</returns>
      <param name="value">A potential parameter value.</param>
      <param name="type">The name of a parameter type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Type">
      <summary>Retrieves or sets the data-source-specific type of the parameter.</summary>
      <returns>Returns the data-source-specific type of the parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Value">
      <summary>Retrieves or sets the value of the parameter.</summary>
      <returns>Returns the parameter value.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataParameterDirection">
      <summary>Specifies the direction of a data parameter for a specified data command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataParameterDirection.Unknown">
      <summary>The parameter direction is unknown. This value may be used in derived parameters when a provider does not know how to return direction information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataParameterDirection.In">
      <summary>The parameter can be passed into the command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataParameterDirection.Out">
      <summary>The parameter can be read only from the command. After executing, the returned <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object instance must be closed before a parameter of this direction is read.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataParameterDirection.InOut">
      <summary>The parameter can be passed into the command and read from the command. After executing, the returned <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object instance must be closed before a parameter of this direction is read.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataParameterDirection.ReturnValue">
      <summary>The parameter is a return value from the command. After executing, the returned <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object instance must be closed before a parameter of this direction is read.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataProtection">
      <summary>Represents the ability to encrypt and decrypt strings using the Windows Data Protection API (DPAPI).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProtection.DecryptString(System.String)">
      <summary>Decrypts a specified string.</summary>
      <returns>Returns the decrypted string.</returns>
      <param name="s">A string previously encrypted with a call to <see cref="M:Microsoft.VisualStudio.Data.DataProtection.EncryptString(System.String)" />.</param>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a valid format.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The decryption failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProtection.EncryptString(System.String)">
      <summary>Encrypts a specified string.</summary>
      <returns>Returns the encrypted string.</returns>
      <param name="s">A string to encrypt.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The encryption failed.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataProvider">
      <summary>Enables creation of DDEX provider objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.CreateObject(System.Guid,System.Type)">
      <summary>Creates a new DDEX provider-implemented object, preferably tailored for the specified data source, and of the specified type.</summary>
      <returns>Returns a new DDEX provider-implemented object of the requested type.</returns>
      <param name="dataSource">A DDEX data source GUID.</param>
      <param name="objType">Data type of the object to create.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.CreateObject(System.Type)">
      <summary>Creates a DDEX provider implementation of a specific object type.</summary>
      <returns>Returns the specified object type.</returns>
      <param name="objType">The type of object to create.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.DeriveDataSource(System.String)">
      <summary>Determines which data source supported by this DDEX provider is represented by the given connection string.</summary>
      <returns>Returns the DDEX data source GUID that this connection string represents, or returns Guid.Empty if no data source can be derived.</returns>
      <param name="connectionString">A connection string recognized by this DDEX provider.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProvider.Description">
      <summary>Retrieves a culture-sensitive description of the DDEX provider.</summary>
      <returns>Returns a culture-sensitive description of the DDEX provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProvider.DisplayName">
      <summary>Retrieves a culture-sensitive name for the specified data provider.</summary>
      <returns>Returns the string literal name for the DDEX provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.GetAssembly(System.Guid,System.String)">
      <summary>Resolves an assembly string to an assembly associated with a specified data source as defined by the DDEX provider.</summary>
      <returns>Returns a specified assembly.</returns>
      <param name="dataSource">GUID for a DDEX data source.</param>
      <param name="assemblyString">Name of the assembly to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.GetAssembly(System.String)">
      <summary>Resolves an assembly string to a specific assembly as defined by the DDEX provider.</summary>
      <returns>Returns a specified assembly.</returns>
      <param name="assemblyString">Name of the assembly to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.GetProperty(System.String)">
      <summary>Retrieves a generically known or DDEX provider-specific property.</summary>
      <returns>Returns a specified property.</returns>
      <param name="name">Name of the property to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.GetType(System.Guid,System.String)">
      <summary>Resolves a type name to a <see cref="T:System.Type" /> for a specified data source as defined by the DDEX provider.</summary>
      <returns>Returns a specified type.</returns>
      <param name="dataSource">DDEX data source GUID.</param>
      <param name="typeName">String name for the data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.GetType(System.String)">
      <summary>Resolves a type name to a <see cref="T:System.Type" /> as defined by the DDEX provider. </summary>
      <returns>Returns a specified type.</returns>
      <param name="typeName">String name for the specified data type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProvider.Guid">
      <summary>Retrieves the unique identifier of the DDEX provider.</summary>
      <returns>Returns a GUID object instance providing the unique identifier for the DDEX provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProvider.ShortDisplayName">
      <summary>Retrieves the short form of the display name.</summary>
      <returns>Returns a string representing the short form of the display name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.SupportsObject(System.Guid,System.Type)">
      <summary>Indicates whether a given DDEX provider supports an object of the specified type, potentially a specialized version for the specified data source.</summary>
      <returns>Returns true if the DDEX provider supports an object of the specified type; otherwise returns false.</returns>
      <param name="dataSource">A DDEX data source GUID.</param>
      <param name="objType">Data type of object for which to discover supportability.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.SupportsObject(System.Type)">
      <summary>Retrieves a Boolean value that indicates whether a particular object type is supported by the provider.</summary>
      <returns>Returns true if a particular object type is supported by the provider; otherwise returns false.</returns>
      <param name="objType">Data type of the specified object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProvider.Technology">
      <summary>Retrieves the unique identifier of the underlying technology used by the provider, if any.</summary>
      <returns>Returns a GUID object instance providing a unique identifier for the underlying technology used by the DDEX provider, if any; returns null if none provided.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataProviderException">
      <summary>Represents an exception thrown when a DDEX provider error occurs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Class constructor. Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor(System.String)">
      <summary>Class constructor. Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class with the name of the DDEX provider.</summary>
      <param name="providerName">The name of the DDEX provider that caused the error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor(System.String,System.Exception)">
      <summary>Class constructor. Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class with a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor(System.String,System.String)">
      <summary>Class constructor. Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class with a specified provider name and error message.</summary>
      <param name="providerName">The name of the provider that caused the error.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor(System.String,System.String,System.Exception)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class with a specified provider name, error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="providerName">The name of the provider that caused the error.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataProviderManager">
      <summary>Represents the set of registered DDEX providers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.CopyTo(Microsoft.VisualStudio.Data.DataProvider[],System.Int32)">
      <summary>Copies the set of registered DDEX providers to an array, starting at the specified array index.</summary>
      <param name="array">An array into which the set of DDEX providers should be copied.</param>
      <param name="arrayIndex">The index in the array at which copying begins.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProviderManager.Count">
      <summary>Retrieves the number of registered DDEX providers.</summary>
      <returns>Returns an integer value representing the count of registered DDEX providers.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.GetDataProvider(System.Guid)">
      <summary>Retrieves a DDEX provider using the specified GUID.</summary>
      <returns>Returns a DDEX provider object instance specified by a GUID.</returns>
      <param name="provider">A DDEX provider GUID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.GetDataProviders">
      <summary>Retrieves an array containing all registered DDEX providers.</summary>
      <returns>Returns an array of DDEX provider objects.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.GetDataProvidersImpl">
      <summary>This method is for internal use only and is not to be called.</summary>
      <returns>Returns an array of DDEX provider objects.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#ICollection{T}#Add(Microsoft.VisualStudio.Data.DataProvider)">
      <summary>Adds a new DDEX provider to the collection of available DDEX providers.</summary>
      <param name="item">DDEX provider object to add.</param>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Clears the collection of DDEX providers.</summary>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#ICollection{T}#Contains(Microsoft.VisualStudio.Data.DataProvider)">
      <summary>Tests whether a given collection contains a specified DDEX provider.</summary>
      <returns>Returns true if the collection contains the specified DDEX provider; otherwise returns false.</returns>
      <param name="item">DDEX provider object to determine whether contained.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Tests whether the collection of DDEX providers is read only.</summary>
      <returns>Returns true if the collection is read only; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#ICollection{T}#Remove(Microsoft.VisualStudio.Data.DataProvider)">
      <summary>Removes a DDEX provider from the set of providers.</summary>
      <returns>Returns an <see cref="T:System.Collections.ICollection" /> object instance containing the set of DDEX providers.</returns>
      <param name="item">DDEX provider object to remove.</param>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retrieves an enumerator with which to enumerate the DDEX provider collection.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> object instance to allow enumerating the DDEX provider collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator with which to enumerate the DDEX provider collection.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> object instance to allow enumerating the DDEX provider collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataProviderObjectFactory">
      <summary>Allows you to create data objects implemented by a DDEX provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderObjectFactory.#ctor">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderObjectFactory" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderObjectFactory.CreateObject(System.Type)">
      <summary>Creates a data-provider-written object that implements the specified object type.</summary>
      <returns>Returns an object of type specified by the <paramref name="objectType" /> parameter, or null if the object type is not supported.</returns>
      <param name="objType">Data type of object to create.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProviderObjectFactory.DataProvider">
      <summary>Retrieves the DDEX provider for which this class creates objects.</summary>
      <returns>Returns a DDEX provider object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderObjectFactory.GetAssembly(System.String)">
      <summary>Locates an assembly given an assembly string.</summary>
      <returns>Returns an assembly object instance.</returns>
      <param name="assemblyString">Name of the assembly to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderObjectFactory.GetType(System.String)">
      <summary>Retrieves a type definition given a type name.</summary>
      <returns>Returns a type object instance.</returns>
      <param name="typeName">Name of the type to return.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataReader">
      <summary>Provides the ability to expose data from any data.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Close">
      <summary>Closes the <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Dispose">
      <summary>Releases managed resources held for the current <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Dispose(System.Boolean)">
      <summary>Cleans up resources associated with the current <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> instance, both when the public <see cref="M:Microsoft.VisualStudio.Data.DataReader.Dispose" /> method is called and as well as when the object is finalized with a call to the <see cref="M:Microsoft.VisualStudio.Data.DataReader.Finalize" /> method.</summary>
      <param name="disposing">Indicates whether or not this method was called from the public Dispose method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Finalize">
      <summary>Finalizes the current <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves a specified number of bytes of raw binary data.</summary>
      <returns>Returns an integer value indicating the number of bytes read into the buffer.</returns>
      <param name="index">Index into the current block of data for the item to retrieve.</param>
      <param name="buffer">An array into which specified data, as byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">Index of starting point in the byte array specified with the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified with the <paramref name="buffer" /> parameter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" />, <paramref name="bufferIndex" />, and/or <paramref name="length" /> parameters are invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetItem(System.Int32)">
      <summary>Retrieves the value of the item at the specified index in the current block of data.</summary>
      <returns>Returns an integer value from the specified index in the current block of data.</returns>
      <param name="index">Index into the current block of the data item at which to retrieve the integer value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetItem(System.String)">
      <summary>Retrieves the value of a data item with the specified name in the current block of data.</summary>
      <returns>Returns the string value of the item with the specified name.</returns>
      <param name="name">The name of the data item in the current block to retrieve.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="name" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves the maximum length, in characters, of data items at the specified index.</summary>
      <returns>Returns the maximum length, in number of characters, of the data item at the specified index; or, returns -1 if the maximum length is unavailable or is not sensible.</returns>
      <param name="index">The index of the data item being examined for length.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetItemName(System.Int32)">
      <summary>Retrieves the name assigned to the data item at the specified index, if any.</summary>
      <returns>Returns the name assigned to the data item at the index specified by the <paramref name="index" /> parameter, or null if no name exists.</returns>
      <param name="index">The index of the data item for which to retrieve the name.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.DataItemTypeFormat)">
      <summary>Retrieves the data type of a data item item, or items, at the specified index in a specified format.</summary>
      <returns>Returns the data type of items at the specified index in the specified format.</returns>
      <param name="index">Index of the data item for which to return data type.</param>
      <param name="itemTypeFormat">The format in which to return the data type information.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataReader.IsClosed">
      <summary>Retrieves a Boolean value that indicates whether the specified reader has been closed.</summary>
      <returns>Returns true if the specified data reader is closed; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.IsNullItem(System.Int32)">
      <summary>Indicates whether the data item at the specified index is unspecified, that is, null.</summary>
      <returns>Returns true if the item is null, that is, unspecified; otherwise returns false.</returns>
      <param name="index">Index of the data item to examine.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataReader.ItemCount">
      <summary>Retrieves the number of items in the current block of data.</summary>
      <returns>Returns an integer value indicating the number of items in the current block of data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.NextResult">
      <summary>Advances the data reader to the next result in cases where the reader contains multiple results.</summary>
      <returns>Returns true if more results remain to be read and the reader was advanced to the next result. Returns false if no more results were found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Read">
      <summary>Advances the reader to the next block of data in cases where the reader contains more than one block.</summary>
      <returns>Returns true if there are more blocks of data to read.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataReader.Status">
      <summary>Retrieves a numerical status code returned by the method currently providing data to the data reader.</summary>
      <returns>Returns an integer value status code from the method currently providing data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Terminate">
      <summary>Terminates the data reader immediately, without necessarily returning all of the data nor setting output parameters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSource">
      <summary>Represents and provides access to a DDEX data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSource.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSource.DefaultProvider">
      <summary>Retrieves the default DDEX provider using a global unique identifier (GUID).</summary>
      <returns>Returns the guid of the default DDEX provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSource.Description">
      <summary>Retrieves a localized description of this data source.</summary>
      <returns>Returns a string value representing the description.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSource.DisplayName">
      <summary>Retrieves the name of the data source for UI display.</summary>
      <returns>Returns the string literal text for the data source display name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSource.GetDescription(System.Guid)">
      <summary>Retrieves a description for a data source combined with a specified DDEX provider.</summary>
      <returns>Returns the string literal description.</returns>
      <param name="provider">A DDEX provider GUID.</param>
      <exception cref="T:System.ArgumentException">The provider specified is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSource.GetProperty(System.Guid,System.String)">
      <summary>Retrieves a data source property stored with the data source registration entries, specifying the property by name and GUID.</summary>
      <returns>Returns a property object specified by name and GUID.</returns>
      <param name="provider">DDEX provider GUID.</param>
      <param name="name">Name of the property to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The provider specified is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSource.GetProperty(System.String)">
      <summary>Retrieves a data source property stored with the data source registration entries, specifying the property by name.</summary>
      <returns>Returns the property specified by name.</returns>
      <param name="name">Name of the property to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSource.GetProviders">
      <summary>Retrieves an array of data provider GUIDs representing DDEX providers that support the data source.</summary>
      <returns>Returns an array of GUIDs.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSource.Guid">
      <summary>Retrieves the global unique identifier (GUID) of the data source.</summary>
      <returns>Returns the data source GUID.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSourceInformation">
      <summary>Allows you to retrieve well-defined information about a specified data source in the form of properties passed as name/value pairs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class that provides the data connection for which the information is provided.</summary>
      <param name="connection">The data connection to use for retrieving data source properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection,System.Collections.ICollection)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class, along with the specific connection and an <see cref="T:System.Collections.ICollection" /> object containing the connection property names..</summary>
      <param name="connection">The data connection to use for retrieving data source properties.</param>
      <param name="propertyNames">A collection of names of properties supported by this instance.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection,System.Collections.IDictionary)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class along with a specific data connection and an <see cref="T:System.Collections.IDictionary" /> object containing connection properties information.</summary>
      <param name="connection">The data connection to use for retrieving data source properties.</param>
      <param name="properties">A collection of property name/value pairs with which to initialize the instance.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.AddProperty(System.String)">
      <summary>Adds a property to the list of supported properties.</summary>
      <param name="propertyName">The name of a data source information property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.AddProperty(System.String,System.Object)">
      <summary>Adds a property and its value to the list of supported properties.</summary>
      <param name="propertyName">The name of a data source information property.</param>
      <param name="value">The value for the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters that are invalid, that is, that may not appear in a generic catalog name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose use at the start of a generic catalog name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogIsSuffixed">
      <summary>Specifies the data source information property that indicates if a catalog name is suffixed on a multi-part object identifier, as opposed to being a prefix.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a catalog name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogSeparator">
      <summary>Specifies the data source information property that indicates the character separating a catalog name from the other parts in an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogSupported">
      <summary>Specifies the data source information property that indicates if a catalog name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogSupportedInDml">
      <summary>Specifies the data source information property that indicates if a catalog name is supported in object identifiers that appear in SQL DML clauses.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnAliasInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a column alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnAliasInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a column alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnAliasMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a column alias.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnAliasSupported">
      <summary>Specifies the data source information property that indicates if a column alias is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a column name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a column name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a column name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnSupported">
      <summary>Specifies the data source information property that indicates if a column name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CommandDeriveParametersSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CommandDeriveSchemaSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CommandExecuteSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> and <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CommandParameterSupport">
      <summary>Specifies what parameter directions are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CommandPrepareSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Prepare(System.String,System.Int32,System.Int32)" /> method.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceInformation.Connection">
      <summary>Retrieves the data connection used to retrieve data source properties.</summary>
      <returns>Returns the data connection used to retrieve data source properties.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceInformation.ConnectionSupport">
      <summary>Retrieves the provider connection support object associated with the data connection.</summary>
      <returns>Returns the provider connection support object associated with the data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.Contains(System.String)">
      <summary>Retrieves a Boolean value indicating whether a specified property is contained in this data source information instance.</summary>
      <returns>Returns true if the specified property is contained in this data source information instance; otherwise returns false.</returns>
      <param name="propertyName">The name of the property being tested.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DataSourceCulture">
      <summary>Specifies the geographical culture of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DataSourceName">
      <summary>Specifies the name of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DataSourceProduct">
      <summary>Specifies the name of the product of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DataSourceVersion">
      <summary>Specifies the version of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DateLiteralPrefix">
      <summary>Specifies the data source information property that provides the character(s) that prefix a date/time literal.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DateLiteralSuffix">
      <summary>Specifies the data source information property that provides the character(s) that suffix a date/time literal.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.Default">
      <summary>Provides a default instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class for use when a data provider does not provide their own implementation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DefaultCatalog">
      <summary>Specifies the data source information property that provides the name of the default catalog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DefaultSchema">
      <summary>Specifies the data source information property that provides the name of the default schema.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IdentifierCloseQuote">
      <summary>Specifies the data source information property that provides the character used to close an identifier part that needs to be enclosed in quotation marks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IdentifierOpenQuote">
      <summary>Specifies the data source information property that provides the character used to open an identifier part that needs to be quoted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IdentifierPartsCaseSensitive">
      <summary>Specifies the data source information property that indicates if identifier parts are treated as case sensitive.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IdentifierPartsStorageCase">
      <summary>Specifies the data source information property that indicates what case identifier parts are stored in the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IndexInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance as an index name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IndexInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of an index name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IndexMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of an index name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IndexSupported">
      <summary>Specifies the data source information property that indicates if an index name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceInformation.Item(System.String)">
      <summary>Retrieves a data source information property with the specified name.</summary>
      <returns>Returns the data source information property with the specified name.</returns>
      <param name="propertyName">The name of the data source information property to retrieve.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.LikeClausePercent">
      <summary>Specifies the data source information property that indicates the wildcard character used to capture zero or more characters within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.LikeClausePercentEscape">
      <summary>Specifies the data source information property that indicates the character used to escape the LikeClausePercent character within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.LikeClauseUnderscore">
      <summary>Specifies the data source information property that indicates the wildcard character used to capture a single characters within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.LikeClauseUnderscoreEscape">
      <summary>Specifies the data source information property that indicates the character used to escape the LikeClauseUnderscore character within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ParameterPrefix">
      <summary>Specifies the data source information property that provides the character used to prefix a parameter name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ParameterPrefixInName">
      <summary>Specifies the data source information property that indicates if the parameter prefix should appear in the value set for the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Name" /> property.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ProcedureInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a procedure name is not valid. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ProcedureInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a procedure name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ProcedureMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a procedure name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ProcedureSupported">
      <summary>Specifies the data source information property that indicates if a procedure name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceInformation.ProviderObject">
      <summary>Retrieves the underlying provider connection object as exposed by the connection support object.</summary>
      <returns>Returns the underlying provider connection object as exposed by the connection support object.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.QuotedIdentifierPartsCaseSensitive">
      <summary>Specifies the data source information property that indicates if quoted identifier parts are treated as case sensitive.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.QuotedIdentifierPartsStorageCase">
      <summary>Specifies the data source information property that indicates what case quoted identifier parts are stored in the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ReservedWords">
      <summary>Specifies the data source information property that provides the set of reserved words on the data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.RetrieveValue(System.String)">
      <summary>Retrieves a value for a specified data source information property.</summary>
      <returns>Returns the value of the data source information property, or returns null if the property is not supported.</returns>
      <param name="propertyName">The name of property whose value is retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a schema name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a schema name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a schema name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaSeparator">
      <summary>Specifies the data source information property that indicates the character separating a schema name from the other parts in an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaSupported">
      <summary>Specifies the data source information property that indicates if a schema name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaSupportedInDml">
      <summary>Specifies the data source information property that indicates if a schema name is supported in object identifiers that appear in SQL DML clauses.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ServerSeparator">
      <summary>Specifies the data source information property that indicates the character separating a server name from the other parts in an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SupportsAnsi92Sql">
      <summary>Specifies the data source information property that indicates if the data source supports the ANSI92 SQL standard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SupportsCommandTimeout">
      <summary>Specifies the data source information property that indicates whether command timeouts are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SupportsNestedTransactions">
      <summary>Specifies the data source information property that indicates whether transactions can be started, committed, or rolled back inside other transactions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SupportsQuotedIdentifierParts">
      <summary>Specifies the data source information property that indicates whether quoted identifier parts are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SupportsVerifySql">
      <summary>Specifies the data source information property that indicates if SQL verification is supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableAliasInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a table alias is not valid. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableAliasInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a table alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableAliasMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a table alias.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableAliasSupported">
      <summary>Specifies the data source information property that indicates if a table alias is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a table name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a table name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a table name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableSupported">
      <summary>Specifies the data source information property that indicates if a table name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.UserInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a user name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.UserInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a user name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.UserMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a user name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.UserSupported">
      <summary>Specifies the data source information property that indicates if a user name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ViewInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a view name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ViewInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a view name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ViewMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a view name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ViewSupported">
      <summary>Specifies the data source information property that indicates if a view name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSourceManager">
      <summary>Represents the set of registered DDEX data sources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceManager" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.CopyTo(Microsoft.VisualStudio.Data.DataSource[],System.Int32)">
      <summary>Copies the set of registered data sources to an array, starting at the specified array index.</summary>
      <param name="array">An array into which the set of data sources should be copied.</param>
      <param name="arrayIndex">The index in the array at which copying begins.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceManager.Count">
      <summary>Retrieves a count of the number of registered data sources.</summary>
      <returns>Returns an integer representing the count of registered data sources.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.GetDataSource(System.Guid)">
      <summary>Retrieves a data source with the specified GUID.</summary>
      <returns>Returns a DataSource object instance with the specified GUID.</returns>
      <param name="source">A DDEX data source GUID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.GetDataSources">
      <summary>Retrieves an array of all the registered data sources.</summary>
      <returns>Returns an array of data sources.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.GetDataSourcesImpl">
      <summary>For internal use only.</summary>
      <returns>The DataSource.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#ICollection{T}#Add(Microsoft.VisualStudio.Data.DataSource)">
      <summary>Adds a data source to the DDEX data source collection.</summary>
      <param name="item">DDEX data source</param>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Clears the DDEX data source collection.</summary>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#ICollection{T}#Contains(Microsoft.VisualStudio.Data.DataSource)">
      <summary>Tests whether the DDEX data source collection contains a specified data source.</summary>
      <returns>Returns true if the collection contains the specified data source; otherwise returns false.</returns>
      <param name="item">DDEX data source</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Tests whether the data source collection is read only.</summary>
      <returns>Returns true if the collection is read only; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#ICollection{T}#Remove(Microsoft.VisualStudio.Data.DataSource)">
      <summary>Removes a data source from the DDEX data source collection.</summary>
      <returns>Returns true if the data source was found and successfully removed; otherwise returns false.</returns>
      <param name="item">DDEX data source</param>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retrieves an enumerator for enumerating the DDEX data source collection.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator for enumerating the DDEX data source collection.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSourceSpecializer">
      <summary>Represents an ability to specialize the behavior of a DDEX provider based on the data source to which it is connected.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceSpecializer.#ctor">
      <summary>Class constructor. Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceSpecializer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceSpecializer.CreateObject(System.Guid,System.Type)">
      <summary>Creates a DDEX-provider implemented object of the given type that is specialized for the specified data source.</summary>
      <returns>Returns a specialized object of specified type.</returns>
      <param name="dataSource">GUID of the data source for which the provider is specialized.</param>
      <param name="objType">Data type of the provider object.</param>
      <exception cref="T:System.ArgumentException">The data source specified with the <paramref name="dataSource" /> parameter is not a registered DDEX data source.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceSpecializer.DeriveDataSource(System.String)">
      <summary>Determines which data source supported by the provider is represented by the given connection string.</summary>
      <returns>Returns a GUID object instance specifying the derived data source for the connection string provided.</returns>
      <param name="connectionString">Connection string understood by the DDEX provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceSpecializer.GetAssembly(System.Guid,System.String)">
      <summary>Locates an assembly given an assembly string and data source guid.</summary>
      <returns>Returns an assembly.</returns>
      <param name="dataSource">DDEX data source guid.</param>
      <param name="assemblyString">Name of the assembly to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceSpecializer.GetType(System.Guid,System.String)">
      <summary>Retrieves a type definition given a type name and data source guid.</summary>
      <returns>Returns a type definition.</returns>
      <param name="dataSource">DDEX data source guid.</param>
      <param name="typeName">Name of the assembly to retrieve.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSourceVersionComparer">
      <summary>Provides the means to compare two data-source-specific version strings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceVersionComparer.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceVersionComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceVersionComparer.#ctor(System.Collections.Generic.IComparer{System.String})">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceVersionComparer" /> class using an <see cref="T:System.Collections.IComparer" /> object.</summary>
      <param name="comparer">An <see cref="T:System.Collections.IComparer" /> object instance to perform the comparison.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceVersionComparer.Compare(System.String,System.String)">
      <summary>Compares two data-source version strings and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <returns>Returns one of three integer values:Less than zero: v<paramref name="ersionA" /> is less than v<paramref name="ersionB" />.Equal to zero: v<paramref name="ersionA" /> equals v<paramref name="ersionB" />.Greater than zero: v<paramref name="ersionA" /> is greater than v<paramref name="ersionB" />.</returns>
      <param name="versionA">The first version number to compare.</param>
      <param name="versionB">The second version number to compare.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceVersionComparer.Comparer">
      <summary>Retrieves or sets the <see cref="T:System.Collections.IComparer" /> object with which to perform a comparison.</summary>
      <returns>Returns an <see cref="T:System.Collections.IComparer" /> object instance.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceVersionComparer.Default">
      <summary>Retrieves a default instance of this class that uses a default comparison mechanism that is both culture and case sensitive.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceVersionComparer.System#Collections#Generic#IComparer{T}#Compare(System.String,System.String)">
      <summary>Compares two data-source version strings and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <returns>Returns one of three integer values:Less than zero: v<paramref name="ersionA" /> is less than v<paramref name="ersionB" />.Equal to zero: v<paramref name="ersionA" /> equals v<paramref name="ersionB" />.Greater than zero: v<paramref name="ersionA" /> is greater than v<paramref name="ersionB" />.</returns>
      <param name="x">The first version number to compare.</param>
      <param name="y">The second version number to compare.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSupport">
      <summary>Represents the base class for all classes that provide data support XML.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Class constructor. Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSupport" /> class with an XML resource stored in a managed assembly.</summary>
      <param name="resourceName">The name of the managed resource.</param>
      <param name="assembly">The managed assembly that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="resourceName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.#ctor(System.String,System.String)">
      <summary>Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSupport" /> class with XML that is stored as a file at a specific file path on disk.</summary>
      <param name="fileName">The unqualified name of the file.</param>
      <param name="path">The path to the file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileName" /> and/or <paramref name="path" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.CreateXmlResourceManager(System.String,System.Reflection.Assembly)">
      <summary>Creates a <see cref="T:System.Resources.ResourceManager" /> object instance that is able to read managed resources that end with the .xml file extension.</summary>
      <returns>Returns a ResourceManager object able to read managed resources that end with the extension ".xml".</returns>
      <param name="resourceName">The name of the managed resource without the .xml file extension.</param>
      <param name="assembly">The assembly that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="resourceName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.CreateXmlResourceManager(System.String,System.String)">
      <summary>Creates a <see cref="T:System.Resources.ResourceManager" /> object instance that is able to read XML files from a file at a specific location on disk.</summary>
      <returns>A <see cref="T:System.Resources.ResourceManager" /> object able to read XML files from a specific location on disk.</returns>
      <param name="fileName">The unqualified name of the resource file.</param>
      <param name="path">The path to the file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileName" /> and/or <paramref name="path" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.GetSupportStream(System.Globalization.CultureInfo)">
      <summary>Obtains a <see cref="T:System.IO.Stream" /> object instance for a specified culture.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> object instance for the specified culture.</returns>
      <param name="culture">The geographical culture (as <see cref="T:System.Globalization.CultureInfo" /> object) for which to retrieve the Stream object instance.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataTransaction">
      <summary>Enables transaction-processing, which allows you to commit or roll back as a batch a series of related operations.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataTransaction.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataTransaction" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataTransaction.BeginTransaction">
      <summary>Initiates a transaction and returns the new current transaction level.</summary>
      <returns>Returns an integer value indicating the new current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataTransaction.CommitTransaction">
      <summary>Commits a transaction and returns the new current transaction level.</summary>
      <returns>Returns an integer value indicating the new current transaction level.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataTransaction.CurrentTransactionLevel">
      <summary>Retrieves a numeric value indicating the current transaction level.</summary>
      <returns>Returns an integer value specifying the current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataTransaction.RollbackTransaction">
      <summary>Rolls back, or voids, a transaction and returns the new current transaction level.</summary>
      <returns>Returns and integer value indicating the new current transaction level.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider">
      <summary>Allows you to retrieve a specialized browse object for a specified node in a given data view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider.DataViewHierarchyAccessor">
      <summary>Retrieves a DataViewHierarchyAccessor object instance, which provides managed accessors for the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object that implements the data view hierarchy.</summary>
      <returns>The hierarchy accessor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider.GetBrowseObject(System.Int32,System.Object)">
      <summary>Retrieves a special browse object for a data view node, given the specified node's item ID.</summary>
      <returns>Returns an object representing the browse object for the specified node.</returns>
      <param name="itemId">An item ID specifying a node for which to get a custom browse object.</param>
      <param name="autoBrowseObj">A browse object automatically generated with information in the data view support XML, or null if the XML indicates that no such browse object should be generated. This allows an implementation of this method to specify most settings in XML and then provide only minor modification to the set of properties, rather than necessitating building the object from scratch.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataViewCommandHandler">
      <summary>Provides the ability to implement commands, specifically custom commands, for nodes in a data view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewCommandHandler.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewCommandHandler" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewCommandHandler.DataViewHierarchyAccessor">
      <summary>Retrieves a <see cref="T:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor" /> object instance, which provides managed accessors to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object that implements the data view hierarchy.</summary>
      <returns>Returns a DataViewHierarchyAccessor object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewCommandHandler.ExecuteCommand(System.Int32,Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandExecutionOption,System.Object)">
      <summary>Causes the specified command to execute.</summary>
      <returns>Returns an object instance representing the value returned by the specified command, which is typically nothing.</returns>
      <param name="itemId">The identifier of the item in the data view hierarchy on which this command should be invoked.</param>
      <param name="command">The <see cref="T:Microsoft.VisualStudio.Data.OleCommand" /> object representing the command to invoke.</param>
      <param name="executionOption">Any <see cref="T:Microsoft.VisualStudio.Data.OleCommandExecutionOption" /> object instance representing options on the invoked command.</param>
      <param name="arguments">An object representing arguments to the command.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="itemId" /> parameter is invalid.</exception>
      <exception cref="T:System.NotImplementedException">This command handler does not implement the specified command.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewCommandHandler.ExecuteCommand(System.Int32[],Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandExecutionOption,System.Object)">
      <summary>Causes the specified command to execute on multiple items.</summary>
      <returns>Returns an object array representing values returned by the specified commands.</returns>
      <param name="itemIds">Array of identifiers for the items in the data view hierarchy on which this command should be invoked.</param>
      <param name="command">The <see cref="T:Microsoft.VisualStudio.Data.OleCommand" /> object representing the command to invoke.</param>
      <param name="executionOption">Any <see cref="T:Microsoft.VisualStudio.Data.OleCommandExecutionOption" /> object instance representing options on the invoked command.</param>
      <param name="arguments">An object representing arguments to the command.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="itemId" /> and/or <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="itemId" /> parameter is invalid.</exception>
      <exception cref="T:System.NotImplementedException">This command handler does not implement the specified command.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewCommandHandler.GetCommandStatus(System.Int32[],Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandTextType,Microsoft.VisualStudio.Data.OleCommandStatus)">
      <summary>Retrieves the status of the commands executing on the specified items.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> object instance representing the status returned by the specified commands.</returns>
      <param name="itemIds">Array of identifiers for the items in the data view hierarchy on which this command should be invoked.</param>
      <param name="command">The <see cref="T:Microsoft.VisualStudio.Data.OleCommand" /> object representing the command to invoke.</param>
      <param name="textType">The <see cref="T:Microsoft.VisualStudio.Data.OleCommandTextType" /> object instance for the specified command.</param>
      <param name="status">The <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> object instance for the specified command.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="status" />, <paramref name="itemId" /> and/or <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="itemId" /> parameter is invalid.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor">
      <summary>Represents a set of properties and methods that interact with the data view hierarchy implementation of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor" /> class with an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object instance.</summary>
      <param name="dataViewHierarchy">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object instance representing the current hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ActivateDocumentIfOpen(System.String)">
      <summary>Activates a document with the specified moniker, if the document is open.</summary>
      <returns>Returns true if the document is open; otherwise returns false.</returns>
      <param name="documentMoniker">Moniker for the document to activate.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="documentMoniker" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ActivateDocumentIfOpen(System.String,System.Guid)">
      <summary>Activates a document with the specified moniker and logical view, if the document is open.</summary>
      <returns>Returns true if the document is open; otherwise returns false.</returns>
      <param name="documentMoniker">Moniker for the document to activate.</param>
      <param name="logicalView">The identifier of a logical view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="documentMoniker" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.Connection">
      <summary>Retrieves a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance representing the data connection pertaining to the data view hierarchy.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.CreateObjectNode">
      <summary>Creates a new node in the data view hierarchy, but one without context and that is not placed anywhere in the hierarchy tree.</summary>
      <returns>Returns an integer value representing the Visual Studio item ID of the new node.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.DropObjectNode(System.Int32)">
      <summary>Drops an existing node that represents an object from the data source from the data view hierarchy.</summary>
      <param name="itemId">The item ID of the node to be dropped.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="itemId" /> parameter is invalid or represents a non-object based node.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ExecuteCommand(System.Int32,Microsoft.VisualStudio.Data.OleCommand)">
      <summary>Executes an OLE command without arguments directly on the data view hierarchy.</summary>
      <returns>Returns the value returned by the command.</returns>
      <param name="itemId">The item ID on which the command should be executed.</param>
      <param name="command">The OLE command to execute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ExecuteCommand(System.Int32,Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandExecutionOption,System.Object)">
      <summary>Executes an OLE command directly on the data view hierarchy, with a specific execution option and arguments.</summary>
      <returns>Returns the value returned by the command.</returns>
      <param name="itemId">The item ID specifying the hierarchy on which the command should be executed.</param>
      <param name="command">The OLE command to execute.</param>
      <param name="executionOption">An OLE execution option.</param>
      <param name="arguments">Arguments expected by the command.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ExecuteCommand(System.Int32,Microsoft.VisualStudio.Data.OleCommand,System.Object)">
      <summary>Executes an OLE command on the data view hierarchy with arguments.</summary>
      <returns>Returns the value returned by the command.</returns>
      <param name="itemId">The item ID specifying the hierarchy on which the command should be executed.</param>
      <param name="command">The OLE command to execute.</param>
      <param name="arguments">Arguments expected by the command.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetChildSelectionTypes(System.Int32)">
      <summary>Retrieves an array of the object types enumerated when a parent node is expanded to show its child nodes.</summary>
      <returns>Returns an array of string objects enumerated when parent node is expanded.</returns>
      <param name="itemId">The item ID of a parent node.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetChildStaticNodeIds(System.Int32)">
      <summary>Retrieves an array of the static node IDs that are children of the specified item ID.</summary>
      <returns>Returns an array of the static node item IDs representing children of the specified item ID.</returns>
      <param name="itemId">The item ID of a parent node.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetCommandStatus(System.Int32,Microsoft.VisualStudio.Data.OleCommand)">
      <summary>Retrieves the status of an OLE command.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> object that describes the status of the OLE command.</returns>
      <param name="itemId">The item ID for which the command status should be retrieved.</param>
      <param name="command">The command to query for status.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetCommandStatus(System.Int32,Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandTextType)">
      <summary>Retrieves the status of an OLE command with a request for a particular type of command text.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> object that describes the status of the OLE command.</returns>
      <param name="itemId">The item ID for which the command status should be retrieved.</param>
      <param name="command">The command to query for status.</param>
      <param name="textType">The type of text that should be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetItemIdFromNodePath(System.String)">
      <summary>Infers the item ID of a node in the data view hierarchy given a path to the node.</summary>
      <returns>Returns the item ID of the node in the data view hierarchy, or null if no node was found.</returns>
      <param name="nodePath">The path to a node.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="nodePath" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetNodeId(System.Int32)">
      <summary>Retrieves the node ID as specified in the data view support XML from an item ID.</summary>
      <returns>Returns the node ID, or returns null if no node ID exists.</returns>
      <param name="itemId">Item ID of the object for which to retrieve the node ID.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetNodeName(System.Int32)">
      <summary>Retrieves the display name of a specified node.</summary>
      <returns>Returns the string literal display name of the specified node.</returns>
      <param name="itemId">The item ID of the node for which the name is retrieved.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetNodePath(System.Int32)">
      <summary>Infers a node path from the location of a node in the data view hierarchy.</summary>
      <returns>Returns the node path for the specified item, or returns null if not path is available.</returns>
      <param name="itemId">The item ID of the node for which the node path should be inferred.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetObjectIdentifier(System.Int32)">
      <summary>Retrieves the data-source-specific identifier of the object associated with the node matching the specified item ID.</summary>
      <returns>Returns the data-source-specific identifier of the object associated with the node matching the specified item ID.</returns>
      <param name="itemId">The item ID of the node for which the object identifier should be retrieved.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetObjectProperty(System.Int32,System.String)">
      <summary>Retrieves a property of a data object associated with the node matching the specified item ID.</summary>
      <returns>Returns the value of the property of the data object associated with the node matching the specified item ID.</returns>
      <param name="itemId">The item ID of the node for which the object property should be retrieved.</param>
      <param name="propertyName">The name of the property to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetObjectType(System.Int32)">
      <summary>Retrieves the type of the data object associated with the node matching the specified item ID.</summary>
      <returns>Returns a string specifying the type of the data object associated with the node matching the specified item ID.</returns>
      <param name="itemId">The item ID of the node for which the object type should be retrieved.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetProperty(System.Int32,System.Int32)">
      <summary>Retrieves a hierarchy property.</summary>
      <returns>Returns the value of the specified hierarchy property.</returns>
      <param name="itemId">An item ID.</param>
      <param name="propertyId">A property ID from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetSelectedItems">
      <summary>Retrieves an integer array representing item IDs for currently selected nodes in the tree.</summary>
      <returns>Returns and integer array of item IDs. </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.Hierarchy">
      <summary>Retrieves an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object instance representing the current hierarchy view.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.IsDocumentOpen(System.String)">
      <summary>Retrieves a Boolean value that indicates whether a document with a particular moniker is currently open.</summary>
      <returns>Returns true if the specified document is open; otherwise returns false.</returns>
      <param name="documentMoniker">A document moniker.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="documentMoniker" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.IsDocumentOpen(System.String,System.Guid)">
      <summary>Retrieves a Boolean value that indicates whether a document with a particular moniker and logical view is currently open.</summary>
      <returns>Returns true if the specified document is open; otherwise returns false.</returns>
      <param name="documentMoniker">A document moniker.</param>
      <param name="logicalView">A unique identifier of a logical view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="documentMoniker" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.SelectedDataView">
      <summary>Retrieves a string representing the currently selected data view.</summary>
      <returns>Returns a string representing the currently selected data view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ServiceProvider">
      <summary>Retrieves the Visual Studio global service provider being used by the data view hierarchy.</summary>
      <returns>Returns the Visual Studio global service provider object being used by the data view hierarchy.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.SetNodePath(System.Int32,System.String)">
      <summary>Sets the node path for a node identified by a particular item ID.</summary>
      <param name="itemId">An item ID .</param>
      <param name="nodePath">The new node path for the node.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="nodePath" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemID is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.SetProperty(System.Int32,System.Int32,System.Object)">
      <summary>Sets a specified hierarchy property.</summary>
      <param name="itemId">An item ID.</param>
      <param name="propertyId">A property ID from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" /> enumeration.</param>
      <param name="value">The value for the property.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataViewManager">
      <summary>Represents the collection of data view hierarchies currently active in the Visual Studio Server Explorer and provides methods and properties with which to manage these data views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewManager" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.CopyTo(System.Object[],System.Int32)">
      <summary>Copies the set of data view hierarchies in the collection to an array at the specified starting index.</summary>
      <param name="array">An array to which the data view hierarchies are copied.</param>
      <param name="index">The index in array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewManager.Count">
      <summary>Retrieves the number of data view hierarchies in the current collection.</summary>
      <returns>Returns an integer value representing the number of data view hierarchies in the current collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.CreateDataViewHierarchy(System.String,System.Guid,System.String,System.Boolean)">
      <summary>Creates a new data view hierarchy object instance.</summary>
      <returns>This method is internal to the DDEX infrastructure and is not intended to be called from your code.</returns>
      <param name="name">Name of the data view hierarchy.</param>
      <param name="provider">Unique identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is encrypted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewManager.DataViews">
      <summary>Retrieves an array list of current data views.</summary>
      <returns>An array list of current data views.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.GetDataViewHierarchy(System.Guid,System.String,System.Boolean)">
      <summary>Retrieves a data view hierarchy with the specified DDEX provider and connection information.</summary>
      <returns>Returns a data view hierarchy with the specified DDEX provider and connection information.</returns>
      <param name="provider">The identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified provider is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.GetDataViewHierarchy(System.String,System.Guid,System.String,System.Boolean)">
      <summary>Retrieves data view hierarchy object instance specified by the input parameters and sets the name of the hierarchy root node.</summary>
      <returns>Returns a specified data view hierarchy object instance.</returns>
      <param name="name">Name of the data view hierarchy to retrieve.</param>
      <param name="provider">Unique identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified provider is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.IsEquivalent(System.Object,System.Guid,System.String,System.Boolean)">
      <summary>Tests the equivalency of a specified data view.</summary>
      <returns>Returns true if there is equivalency; otherwise returns false.</returns>
      <param name="dataView">Object instance of the specified data view.</param>
      <param name="provider">Unique identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dataView" /> and/or <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified provider is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the set of data views exposed in the Visual Studio Server Explorer to an array, starting at the specified array index.</summary>
      <param name="array">Array into which the data views are copied.</param>
      <param name="index">The index into the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewManager.System#Collections#ICollection#IsSynchronized">
      <summary>Retrieves a value that indicates whether access to the data views collection is synchronized (thread safe).</summary>
      <returns>Returns true if access to the data views collection is synchronized (thread safe).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewManager.System#Collections#ICollection#SyncRoot">
      <summary>Retrieves an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator that is able to iterate through the data views collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataViewSupport">
      <summary>Enables retrieving an XML stream that provides a description of one or more data views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewSupport.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewSupport" /> class, providing resource base name and the assembly in which the resource is located.</summary>
      <param name="baseName">The base name of the resource in the assembly.</param>
      <param name="assembly">The assembly that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewSupport.#ctor(System.String,System.String)">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewSupport" /> class.</summary>
      <param name="baseName">The base name of the resource XML file.</param>
      <param name="directory">The directory path to the XML file that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewSupport.GetDataViews">
      <summary>Retrieves an XML stream that contains a description of one or more data views to display in the Visual Studio Server Explorer tool window for a given connection.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> object instance that contains the XML description of the specified data view (or views).</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DSRefBuilder">
      <summary>Allows you to create a Data Source Reference (DSRef) object that identifies a data object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DSRefBuilder.#ctor">
      <summary>Class constructor constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DSRefBuilder" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DSRefBuilder.AppendToDSRef(System.Object,System.String,System.Object[],System.Object[])">
      <summary>Appends information about a data object with the specified type and identifier to a specified existing DSRef object.</summary>
      <param name="dsRef">The existing DSRef object to which information is appended.</param>
      <param name="typeName">The name of the object type.</param>
      <param name="identifier">The identifier of the object.</param>
      <param name="parameters">An array whose contents are defined by the particular implementation of <see cref="M:Microsoft.VisualStudio.Data.DSRefBuilder.BuildDSRef(System.String,System.Object[],System.Object[])" /> method and specified by the Data Object Support XML. Such information can be used to provide extra data indicating how to build the DSRef object. This allows an implementation of <see cref="M:Microsoft.VisualStudio.Data.DSRefBuilder.BuildDSRef(System.String,System.Object[],System.Object[])" /> to be more data driven.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dsRef" />, <paramref name="typeName" /> and/or <paramref name="identifier" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> argument is in an invalid format.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DSRefBuilder.BuildDSRef(System.String,System.Object[],System.Object[])">
      <summary>Builds a DSRef object that identifies a data object with the specified type and identifier.</summary>
      <returns>Returns a DSRef object that identifies a specified data object.</returns>
      <param name="typeName">The name of the type of object.</param>
      <param name="identifier">The identifier of the object.</param>
      <param name="parameters">An array whose contents are defined by the particular implementation of <see cref="M:Microsoft.VisualStudio.Data.DSRefBuilder.BuildDSRef(System.String,System.Object[],System.Object[])" /> method and specified by the Data Object Support XML. Such information can be used to provide extra data indicating how to build the DSRef object. This allows an implementation of <see cref="M:Microsoft.VisualStudio.Data.DSRefBuilder.BuildDSRef(System.String,System.Object[],System.Object[])" /> to be more data driven.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> argument is in an invalid format.</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">Could not create DSRef object.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DSRefBuilder.Connection">
      <summary>Retrieves a data-source connection as a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.NameAttribute">
      <summary>Specifies the string literal name of a given connection property when specified in a connection string.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.NameAttribute.#ctor(System.String)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.NameAttribute" /> class with the specified connection property name.</summary>
      <param name="name">The string literal name of a specified connection property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.NameAttribute.Equals(System.Object)">
      <summary>Returns a value indicating whether the value of the current object instance is equal to a specified object.</summary>
      <returns>Returns true if <paramref name="value" /> equals the value of the current instance; otherwise returns false.</returns>
      <param name="obj">Current value of the property Name to test for equality. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.NameAttribute.GetHashCode">
      <summary>Returns the has code for the current object instance.</summary>
      <returns>Returns an integer value representing the hash code of the current object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.NameAttribute.Name">
      <summary>Retrieves the string literal name of a given connection property.</summary>
      <returns>Returns the string literal connection property name.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.ObjectWithSite">
      <summary>Provides a simplified way to support communication between an object and its site in the container.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ObjectWithSite.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.ObjectWithSite" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ObjectWithSite.#ctor(System.Object)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.ObjectWithSite" /> class with a specified site object.</summary>
      <param name="site">Object instance representing the site.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ObjectWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#GetSite(System.Guid@,System.IntPtr@)">
      <summary>Retrieves the last site set using the <see cref="M:Microsoft.VisualStudio.Data.ObjectWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)" /> method. In cases where there is no known site, the object returns an exception.</summary>
      <param name="riid">Provides the IID of the interface pointer returned in the <paramref name="ppvSite" /> parameter.</param>
      <param name="ppvSite">The address of the caller's void variable in which the object stores the interface pointer of the site last seen in the M:Microsoft.VisualStudio.Data.ObjectWithSite.Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.SetSite(System.Object) method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ObjectWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)">
      <summary>Provides the site's pointer to the site object.</summary>
      <param name="pUnkSite">Address of an interface pointer to the site managing this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ObjectWithSite.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.ObjectWithSite.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.ObjectWithSite.Site">
      <summary>Retrieves or sets the object site.</summary>
      <returns>Returns a Site object instance.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.ObjectWithSite.SiteChanged">
      <summary>Event that is raised when the <see cref="P:Microsoft.VisualStudio.Data.ObjectWithSite.Site" /> property is changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.OleCommand">
      <summary>Provides a managed wrapper around the identifier of an OLE command.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.OleCommand.#ctor(System.Guid,System.Int32)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.OleCommand" /> class with command group identifier and command identifier.</summary>
      <param name="groupGuid">GUID of the menu group for the specified command.</param>
      <param name="commandId">The ID of the command within the specified menu group.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommand.CommandId">
      <summary>Retrieves the ID of the command from within the specified menu group.</summary>
      <returns>Returns an integer value representing the command ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommand.GroupGuid">
      <summary>Retrieves the menu group GUID for the specified command.</summary>
      <returns>Returns the GUID of the menu group for the specified command.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.OleCommandExecutionOption">
      <summary>Provides a managed implementation of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, which specifies allowable options to the <see cref="M:Microsoft.VisualStudio.Data.DataViewCommandHandler.ExecuteCommand(System.Int32,Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandExecutionOption,System.Object)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandExecutionOption.DoDefault">
      <summary>Either prompts the user for input, or does not, whichever is the default behavior.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandExecutionOption.PromptUser">
      <summary>Executes the command after obtaining user input.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandExecutionOption.DontPromptUser">
      <summary>Executes the command without prompting the user. For example, clicking the Print toolbar button causes a document to be immediately printed without user input.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandExecutionOption.ShowHelp">
      <summary>Shows help for the corresponding command, but does not execute the command.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.OleCommandStatus">
      <summary>Provides the status of a specified OLE command.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.OleCommandStatus.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.OleCommandStatus.#ctor(System.Int32)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> class.</summary>
      <param name="flags">A value from the unmanaged <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> enumeration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Checked">
      <summary>Retrieves or sets a value indicating whether this command is checked.</summary>
      <returns>Returns true if the command is checked; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Enabled">
      <summary>Retrieves or sets a value indicating whether this command is enabled.</summary>
      <returns>Returns true if the command is enabled; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Flags">
      <summary>Retrieves or sets a value representing the underlying <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> value.</summary>
      <returns>Returns an integer value specifying an underlying <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Supported">
      <summary>Retrieves or sets a value indicating whether this command is supported.</summary>
      <returns>Returns true if the command is supported; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Text">
      <summary>Retrieves or sets the text displayed for this command.</summary>
      <returns>Returns the text to display for the specified command.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Visible">
      <summary>Retrieves or sets a value indicating whether this command is visible.</summary>
      <returns>Returns true if the command is visible; otherwise returns false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.OleCommandTextType">
      <summary>Provides a managed implementation of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXTF" /> enumeration, which specifies the kind of text that is being requested.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandTextType.None">
      <summary>No extra information is requested.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandTextType.Name">
      <summary>The command handler should provide the localized name of the command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandTextType.Status">
      <summary>The command handler should provide a localized status string for the command.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.ServiceProvider">
      <summary>Provides an object that can proffer services using both the managed and unmanaged IServiceProvider interfaces. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.#ctor">
      <summary>Class constructor for a managed service provider (<see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />) that is accessible through the unmanaged IServiceProvider interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Class constructor for wrapping an unmanaged IServiceProvider interface that is accessible through the managed <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</summary>
      <param name="serviceProvider">An unmanaged IServiceProvider interface object to wrap.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.GetService(System.Guid)">
      <summary>Retrieves a service with a specified service GUID.</summary>
      <returns>Returns the service with the specified service GUID, or returns null if no service was found.</returns>
      <param name="serviceGuid">The GUID of a service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.GetService(System.Type)">
      <summary>Retrieves a service of the specified type.</summary>
      <returns>Returns the service of the specified type, or returns null if no service was found.</returns>
      <param name="serviceType">A service type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.GetServiceImpl(System.Guid)">
      <summary>Provides the implementation for retrieving a service with a specific GUID.</summary>
      <returns>Returns the service with a specified service GUID, or returns null if no service was found.</returns>
      <param name="serviceGuid">The GUID of a service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.GetServiceImpl(System.Type)">
      <summary>Provides the implementation for retrieving a service of a specific type.</summary>
      <returns>Returns the service of the specified type, or returns null if no service was found.</returns>
      <param name="serviceType">A service type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.Microsoft#VisualStudio#OLE#Interop#IServiceProvider#QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
      <summary>Performs as a factory for services that are exposed through an implementation of IServiceProvider.</summary>
      <returns>Returns an integer specifying the address of interface for the requested service.</returns>
      <param name="guidService">A unique identifier of the requested service.</param>
      <param name="riid">A unique identifier of the interface which the caller wishes to receive for the service.</param>
      <param name="ppvObject">Address of the interface specified by the <paramref name="riid" /> parameter.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.ServiceProvider.ServiceTypes">
      <summary>Retrieves a list of service types used to convert the unmanaged QueryService method call, in which a service GUID is specified, into a managed IServiceProvider.GetService method call, in which a managed type is specified.</summary>
      <returns>A list of service types used to convert the unmanaged QueryService method call, in which a service GUID is specified, into a managed <see cref="M:Microsoft.VisualStudio.Data.ServiceProvider.GetService(System.Guid)" /> method call, in which a managed type is specified.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.ServiceProviderWithSite">
      <summary>Provides an object that proffers services using both the managed and unmanaged versions of the <see cref="T:Microsoft.VisualStudio.Data.ServiceProvider" /> interface, and can be sited using the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite" /> interface. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProviderWithSite.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.ServiceProviderWithSite" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProviderWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#GetSite(System.Guid@,System.IntPtr@)">
      <summary>Retrieves the last site set using the <see cref="M:Microsoft.VisualStudio.Data.ServiceProviderWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)" /> method. If there is no known site, an exception is thrown.</summary>
      <param name="riid">The interface ID (IID) of the interface pointer returnable in the <paramref name="ppvSite" /> parameter.</param>
      <param name="ppvSite">Address of the pointer variable that receives the interface pointer request in the <paramref name="riid" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProviderWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)">
      <summary>Provides a site's <see cref="T:IUnknown" /> pointer to a given object.</summary>
      <param name="pUnkSite">Pointer to the <see cref="T:IUnknown" /> interface pointer of the site managing this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProviderWithSite.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.ServiceProviderWithSite.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.ServiceProviderWithSite.Site">
      <summary>Retrieves or sets the site object instance.</summary>
      <returns>Returns the site object.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.ServiceProviderWithSite.SiteChanged">
      <summary>Event raised when the <see cref="P:Microsoft.VisualStudio.Data.ServiceProviderWithSite.Site" /> property has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.SynonymsAttribute">
      <summary>Provides a comma-delimited list of connection property names that are synonymous with a primary connection property name.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.SynonymsAttribute.#ctor(System.String)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.SynonymsAttribute" /> class.</summary>
      <param name="synonyms">A comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.SynonymsAttribute.Equals(System.Object)">
      <summary>Returns a value indicating whether this object instance is equal to a specified object.</summary>
      <returns>Returns true if the objects are equal; otherwise returns false.</returns>
      <param name="obj">The object value being tested for equality.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.SynonymsAttribute.GetHashCode">
      <summary>Retrieves the hash code for the current object instance.</summary>
      <returns>Returns an integer value representing the hash code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.SynonymsAttribute.Synonyms">
      <summary>Retrieves a comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</summary>
      <returns>Returns a comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties">
      <summary>Provides an implementation of the DataConnectionProperties class using the ADO.NET connection string builder base class (DbConnectionStringBuilder).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.#ctor(System.String)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> class that provides the ADO.NET provider name.</summary>
      <param name="providerName">Invariant name of the ADO.NET provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.#ctor(System.String,System.String)">
      <summary>Parameterized class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> class that provides the ADO.NET provider invariant name and a provider connection string.</summary>
      <param name="providerName">Invariant name of the ADO.NET provider.</param>
      <param name="connectionString">Connection string for the specified provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Add(System.String)">
      <summary>Adds a new property to the current connection properties collection.</summary>
      <param name="propertyName">Name of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The connection properties are not extensible.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.ConnectionStringBuilder">
      <summary>Retrieves the underlying ADO.NET connection string builder object for the current connection properties instance.</summary>
      <returns>Returns a <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> object representing a valid data connection string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Contains(System.String)">
      <summary>Tests whether a specified property is a member of the current set of connection properties.</summary>
      <returns>Returns true if the specified property is a member of the connection properties collection; otherwise returns false.</returns>
      <param name="propertyName">Name of the property whose presence is being tested.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.EquivalentTo(Microsoft.VisualStudio.Data.DataConnectionProperties)">
      <summary>Tests whether the current instance of the class is equivalent to another class instance.</summary>
      <returns>Returns true if the specified object instances are equivalent; otherwise returns false.</returns>
      <param name="connectionProperties">Connection properties object against which an equivalency is to be established or refuted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionProperties" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.GetBasicProperties">
      <summary>Retrieves an array of property name values representing the set of "basic" properties recognizable by the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> class instance.</summary>
      <returns>Returns the set of "basic" properties associated with the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.GetEnumerator">
      <summary>Retrieves an enumerator that enumerates over all of the known connection properties and their values, if any.</summary>
      <returns>Returns a data connection properties enumerator</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.GetSynonyms(System.String)">
      <summary>Retrieves an array list of synonyms for a specified data connection property.</summary>
      <returns>Returns a list of synonyms for a specified property.</returns>
      <param name="propertyName">Name of the property for which synonyms are retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.IsComplete">
      <summary>Retrieves a Boolean value indicating whether a given connection string is complete.</summary>
      <returns>Returns true if the connection string is complete; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.IsExtensible">
      <summary>Retrieves or sets a Boolean value indicating whether the DDEX Provider connection properties are extensible.</summary>
      <returns>Returns true if the DDEX Provider connection properties are extensible; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.IsSensitive(System.String)">
      <summary>Returns a Boolean value indicating whether a specified property contains sensitive information.</summary>
      <returns>Returns true if the property contains sensitive information; otherwise returns false.</returns>
      <param name="propertyName">Name of the property for which the indication of sensitive information is provided.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The property does not exist.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Item(System.String)">
      <summary>Retrieves or sets a value for a specified property on the DDEX Provider.</summary>
      <returns>Returns the value for the property with the specified name.</returns>
      <param name="propertyName">Name of the property for which a value is retrieved or set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">When setting a property value, the specified value cannot be converted to the property type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Parse(System.String)">
      <summary>Disassembles the components of a connection string into a set of connection properties as set in the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> class instance.</summary>
      <param name="s">The connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> instance.</param>
      <exception cref="T:System.FormatException">The format of <paramref name="s" /> was invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Remove(System.String)">
      <summary>Removes a property from the current connection property collection.</summary>
      <param name="propertyName">Name of the property to be removed from the current set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Reset">
      <summary>Resets a connection property to its initial value.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Reset(System.String)">
      <summary>Reverts a property value to its initial value.</summary>
      <param name="propertyName">Name of the property to be reset.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the set of connection properties to an array, starting at the specified array index.</summary>
      <param name="array">Array into which the connection properties are copied.</param>
      <param name="index">The index into the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#ICollection#Count">
      <summary>Retrieves the number of elements contained in the current <see cref="T:System.Collections.ICollection" /> instance.</summary>
      <returns>Returns the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#ICollection#IsSynchronized">
      <summary>Retrieves a value that indicates whether access to the connection properties collection is synchronized (thread safe).</summary>
      <returns>Returns true if access to the connection properties collection is synchronized (thread safe).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#ICollection#SyncRoot">
      <summary>Retrieves an object that can be used to synchronize access to the connection properties collection.</summary>
      <returns>Returns a synchronization object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds an element as a key/value pair to the specified <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <param name="key">The object to use as the key of the element to add to the dictionary.</param>
      <param name="value">The object to use as the value of the element to add to the dictionary.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Clear">
      <summary>Removes all elements from the specified <see cref="T:System.Collections.IDictionary" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Collections.IDictionary" /> instance contains an element with the specified key.</summary>
      <returns>Returns true if the IDictionary instance contains an element with the specified key; otherwise returns false.</returns>
      <param name="key">The key on which to locate an element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <returns>Returns an IDictionaryEnumerator object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#IsFixedSize">
      <summary>Retrieves a Boolean value indicating whether the specified <see cref="T:System.Collections.IDictionary" /> instance has a fixed size.</summary>
      <returns>Returns true if the <see cref="T:System.Collections.IDictionary" /> instance has a fixed size; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#IsReadOnly">
      <summary>Retrieves a Boolean indicating whether the <see cref="T:System.Collections.IDictionary" /> instance is read-only.</summary>
      <returns>Returns true if the <see cref="T:System.Collections.IDictionary" /> instance is read-only; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Item(System.Object)">
      <summary>Retrieves an item, or element, with the specified key from the current <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <returns>Returns the element with the specified key.</returns>
      <param name="key">The key on which to locate an item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Keys">
      <summary>Retrieves an <see cref="T:System.Collections.ICollection" /> object containing the keys for the <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <returns>Returns an ICollection object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <param name="key">The key for the element to be removed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Values">
      <summary>Retrieves an <see cref="T:System.Collections.ICollection" /> object containing the values in the specified <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <returns>Returns an ICollection object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator that is able to iterate through the connection properties collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Retrieves a collection of custom attributes for the specified object.</summary>
      <returns>Returns an AttributeCollection object instance that contains the attributes for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Retrieves the class name of the specified object.</summary>
      <returns>Returns the class name of the object, or null if the class does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Retrieves the name of the specified object.</summary>
      <returns>Returns the name of the object, or null if the object does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Retrieves a type converter for the specified object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.TypeConverter" /> instance appropriate for the specified object, or returns null if there is no TypeConverter for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Retrieves the default event for the specified object.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptor" /> representing the default event for the specified object, or returns null if this object does not have events.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Retrieves the default property for the specified object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the default property for this object, or returns null if this object does not have properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Retrieves an editor of the specified type for this object.</summary>
      <returns>Returns an object of the specified type that is the editor for this object, or returns null if the editor cannot be found.</returns>
      <param name="editorBaseType">A managed <see cref="T:System.Type" /> representing the editor for this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Retrieves the events for the specified instance of a component.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptorCollection" /> object representing the events for the specified component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Retrieves the events for this instance of a component using the specified attribute array as a filter.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptorCollection" /> representing the filtered events for the specified component instance.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Retrieves the properties for the specified instance of a component.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> representing the properties for this component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Retrieves the properties for the specified instance of a component using the attribute array as a filter.</summary>
      <returns>Returns an array of type <see cref="T:System.Attribute" /> that represents the filtered properties for this component instance.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter to define which properties to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Retrieves an object that contains the property described by the specified property descriptor.</summary>
      <returns>Returns an <see cref="T:System.Object" /> representing the owner of the specified property.</returns>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the property whose owner is to be found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Test">
      <summary>Tests that the current set of connection properties will successfully open a connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.ToDisplayString">
      <summary>Retrieves a string representation of the current set of data connection properties that are suitable for on-screen display.</summary>
      <returns>Returns a string representation of the current set of data connection properties that are suitable for on-screen display.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.ToFullString">
      <summary>Retrieves a string representation of the current set of data connection properties for this instance.</summary>
      <returns>Returns a string representation of the current set of data connection properties for this instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.ToTestString">
      <summary>Retrieves a form of the connection string that can be used for testing the connection.</summary>
      <returns>Returns a testable form of the connection string.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport">
      <summary>Provides a managed implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" />, <see cref="T:Microsoft.VisualStudio.Data.DataCommand" />, and <see cref="T:Microsoft.VisualStudio.Data.DataTransaction" /> classes using the ADO.NET <see cref="T:System.Data.IDbConnection" />, <see cref="T:System.Data.IDbCommand" />, and <see cref="T:System.Data.IDbTransaction" />interfaces, respectively; also provides a simple way to supply an implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceVersionComparer" />class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.#ctor(System.String)">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport" /> class with a specified ADO.NET provider name.</summary>
      <param name="providerName">Invariant name of the ADO.NET provider initialized on the object instance.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.BaseCommand">
      <summary>Retrieves the main <see cref="T:System.Data.IDbCommand" /> object being used for executing commands on this connection.</summary>
      <returns>Returns an <see cref="T:System.Data.IDbCommand" /> object instance employed on the current connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.BeginTransaction">
      <summary>Initiates a transaction and returns the new current transaction level.</summary>
      <returns>Returns an integer value representing the new current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Close">
      <summary>Closes the specified data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CommitTransaction">
      <summary>Commits a transaction and returns the new current transaction level.</summary>
      <returns>Returns an integer representing the new current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CompareVersions(System.String,System.String)">
      <summary>Compares two data-source version strings and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <returns>Returns an integer specifying the following:Less than zero: <paramref name="versionA" /> is less than <paramref name="versionB" />;Equal to zero: <paramref name="versionA" /> is equal to <paramref name="versionB" />;Greater than zero: <paramref name="versionA" /> is greater than <paramref name="versionB" />.</returns>
      <param name="versionA">The first of two versions to compare.</param>
      <param name="versionB">The second of two versions to compare.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Connection">
      <summary>Retrieves the <see cref="T:System.Data.IDbConnection" /> object being used by the current connection support instance.</summary>
      <returns>Returns an <see cref="T:System.Data.IDbConnection" /> object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ConnectionString">
      <summary>Retrieves or sets a string representation of information required to establish a specified data source connection.</summary>
      <returns>Returns a string representation of the data source connection information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ConnectionTimeout">
      <summary>Retrieves or sets the amount of time, in seconds, to wait to establish a connection before terminating the attempt and generating a timeout error.</summary>
      <returns>Returns an integer representation of the allowable timeout period, in seconds.</returns>
      <exception cref="T:System.NotSupportedException">The provider does not support connection timeout.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CreateDataSourceInformation">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> object instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CreateObjectIdentifierConverter">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> object instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CreateObjectItemComparer">
      <summary>Creates a object instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectItemComparer" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CreateParameter">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> object.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> object instance. </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CurrentTransactionLevel">
      <summary>Retrieves the current transaction level.</summary>
      <returns>Returns an integer representation of the current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.DeriveParameters(System.String,System.Int32,System.Int32)">
      <summary>Derives parameters that can be specified for a given command</summary>
      <returns>Returns an array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> objects, each one representing a parameter derived from the command.</returns>
      <param name="command">A data-source-specific command from which to derive parameters.</param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the parameter derivation and returning to the caller. A value of zero indicates infinite timeout; value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Derives the schema returned from a specified command, indicating the layout of items and blocks in a given data reader.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object instance representing the command schema.</returns>
      <param name="command">Data-source-specific command for which to derive the schema</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter" /> objects for the specified command type. </param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite timeout; value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Dispose(System.Boolean)">
      <summary>Releases all resources held by the data connection.</summary>
      <param name="disposing">Indication whether both managed and unmanaged resources are to be released (true), or unmanaged resources only (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Executes a specified command, optionally with parameters, and returns results as a <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">Command to execute that is specific to the data source.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> object for the specified command type. </param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite timeout; value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Executes a command, optionally with parameters, but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>Returns a data-provider-specific integer status code.</returns>
      <param name="command">Data-source-specific command to execute.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> object for the specified command type. </param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite timeout; value of -1 indicates a provider default.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ExecutingCommand">
      <summary>Retrieves the <see cref="T:System.Data.IDbCommand" /> instance currently being used for execution.</summary>
      <returns>Returns an <see cref="T:System.Data.IDbCommand" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.GetServiceImpl(System.Type)">
      <summary>Enables retrieving implementation services.</summary>
      <returns>Returns a service object instance.</returns>
      <param name="serviceType">Data type of the service to be implemented.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Initialize(System.Object)">
      <summary>Initializes the specified ADO.NET connection using a specified provider.</summary>
      <param name="providerObj">Data provider object, or null if a new object needs to be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Open(System.Boolean)">
      <summary>Opens the specified data connection.</summary>
      <returns>Returns true if the connection was opened successfully and does not require a prompt. Returns false if the connection is missing required connection information and a prompt should be displayed to obtain the missing information form the user. You should return false only when a provider has implemented the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPromptDialog" /> class.</returns>
      <param name="doPromptCheck">Boolean indication whether the call to the Open method should return false for specified errors that relate to missing connection information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Prepare(System.String,System.Int32,System.Int32)">
      <summary>Prepares the specified command on the data source to be executed; the command may be executed multiple times, with varying parameters.</summary>
      <returns>Returns an identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> methods.</returns>
      <param name="command">Command to prepare for execution.</param>
      <param name="commandType">Command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite timeout; value of -1 indicates a provider default.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.PreparedCommands">
      <summary>Retrieves a list of <see cref="T:System.Data.IDbCommand" /> objects that have been previously prepared.</summary>
      <returns>Returns an <see cref="T:System.Collections.IList" /> object instance containing prepared <see cref="T:System.Data.IDbCommand" /> instances.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ProviderObject">
      <summary>Retrieves the underlying provider object for the specified connection.</summary>
      <returns>Returns the ADO.NET data provider's <see cref="T:System.Data.IDbConnection" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.RollbackTransaction">
      <summary>Rolls back, or voids, a transaction and returns the new current transaction level.</summary>
      <returns>Returns an integer value indicating the new current transaction level.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.State">
      <summary>Retrieves the state of the data connection.</summary>
      <returns>Returns the state of the connection, as enumerated by the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionState" /> class.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Transaction">
      <summary>Retrieves the current <see cref="T:System.Data.IDbTransaction" />, if any.</summary>
      <returns>Returns an <see cref="T:System.Data.IDbTransaction" /> object instance; returns null if not currently in a transaction.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> class using an implementation of the ADO.NET <see cref="T:System.Data.IDataReader" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.#ctor(System.Data.IDataReader)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader" /> class with an implementation of the <see cref="T:System.Data.IDataReader" /> interface.</summary>
      <param name="dataReader">Name of the <see cref="T:System.Data.IDataReader" /> instance with which the class is initialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.#ctor(System.Data.IDataReader,System.Data.IDbCommand,Microsoft.VisualStudio.Data.DataParameter[])">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader" /> class with an implementation of the <see cref="T:System.Data.IDataReader" /> interface and the command and/or parameters that produced the <see cref="T:System.Data.IDataReader" />.</summary>
      <param name="dataReader">The <see cref="T:System.Data.IDataReader" /> object.</param>
      <param name="command">The <see cref="T:System.Data.IDbCommand" />object.</param>
      <param name="parameters">Parameter array, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.Close">
      <summary>Closes the current <see cref="T:System.Data.IDataReader" /> object instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves a specified number of bytes of binary data.</summary>
      <returns>Returns a numerical value indicating the number of bytes read into the buffer.</returns>
      <param name="index">Index into the current block of data for the item to retrieve.</param>
      <param name="buffer">An array into which specified data, as byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">Index of starting point in the byte array specified with the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified with the <paramref name="buffer" /> parameter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" />, <paramref name="bufferIndex" />, and/or <paramref name="length" /> parameters are invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetItem(System.Int32)">
      <summary>Retrieves an object instance representing the retrievable item as determined by an index into the current block of data.</summary>
      <returns>Returns an object representing the item at the specified index.</returns>
      <param name="index">Index into the current block of the data item at which to retrieve the item.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetItem(System.String)">
      <summary>Retrieves an object instance representing the retrievable item as specified by name.</summary>
      <returns>Returns an object specified by name.</returns>
      <param name="name">The name of the data item in the current block to retrieve.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="name" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves the maximum length, in characters, of data items at the specified index.</summary>
      <returns>Returns the maximum length, in number of characters, of the data item at the specified index.</returns>
      <param name="index">The index of the data item being examined for length.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetItemName(System.Int32)">
      <summary>Retrieves the name assigned to the data item at the specified index, if any.</summary>
      <returns>Returns the name assigned to the data item at the index specified by the <paramref name="index" /> parameter, or null if no name exists.</returns>
      <param name="index">The index of the data item for which to retrieve the name.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.DataItemTypeFormat)">
      <summary>Returns the data type of a data item, or items, at the specified index in a specified format.</summary>
      <returns>Returns the data type of items at the specified index in the specified format.</returns>
      <param name="index">Index of the data item for which to return data type.</param>
      <param name="itemTypeFormat">The format in which to return the data type information, as enumerated in <see cref="T:Microsoft.VisualStudio.Data.DataItemTypeFormat" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.InnerDataReader">
      <summary>Retrieves the underlying <see cref="T:System.Data.IDataReader" /> object that is driving the current data reader.</summary>
      <returns>Returns an <see cref="T:System.Data.IDataReader" /> object instance for the current data reader.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.IsClosed">
      <summary>Retrieves a Boolean value that indicates whether the specified data reader instance has been closed.</summary>
      <returns>Returns true if the specified data reader instance is closed; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.IsNullItem(System.Int32)">
      <summary>Indicates whether the data item at the specified index is unspecified, that is, null.</summary>
      <returns>Returns true if the item is null, that is, unspecified; otherwise returns false.</returns>
      <param name="index">Index of the data item to examine.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.ItemCount">
      <summary>Retrieves the number of items in the current block of data.</summary>
      <returns>Returns an integer value indicating the number of items in the current block of data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.NextResult">
      <summary>Advances the data reader to the next result in cases where the reader contains multiple results.</summary>
      <returns>Returns true if more results remain to be read and the reader was advanced to the next result. Returns false if no more results were found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.Read">
      <summary>Advances the reader to the next block of data in cases where the reader contains more than one block.</summary>
      <returns>Returns true if there are more blocks of data to read.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.Status">
      <summary>Retrieves a numerical status code returned by the method currently providing data to the data reader.</summary>
      <returns>Returns a numerical status code from the method currently providing data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.Terminate">
      <summary>Terminates the data reader immediately, without necessarily returning all of the data nor setting output parameters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation">
      <summary>Provides information about an ADO.NET data source in the form of properties passed as name/value pairs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation" /> class with a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object.</summary>
      <param name="connection">Current instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection,System.Collections.ICollection)">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation" /> class with a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object and a collection of connection properties.</summary>
      <param name="connection">Current instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class.</param>
      <param name="propertyNames">Names of the properties in the connection properties <see cref="T:System.Collections.ICollection" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection,System.Collections.IDictionary)">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation" /> class with a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object and a connection properties <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="connection">Current instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class.</param>
      <param name="properties">An <see cref="T:System.Collections.IDictionary" /> object containing the set of current connection properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.Contains(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified property is contained in this data source information instance.</summary>
      <returns>Returns true if the specified property is contained in this data source information instance; otherwise returns false.</returns>
      <param name="propertyName">The name of a data source information property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.DataSourceInformation">
      <summary>Retrieves in-memory data source information provided by an implementation of the <see cref="T:System.Data.DataTable" /> class to represent a table of in-memory data.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.Item(System.String)">
      <summary>Retrieves a data source information property with the specified name.</summary>
      <returns>Returns the data source information property with the specified name.</returns>
      <param name="propertyName">The name of the data source information property to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.RetrieveValue(System.String)">
      <summary>Retrieves a value for a specified data source information property.</summary>
      <returns>Returns the value of the data source information property, or returns null if the property is not supported.</returns>
      <param name="propertyName">The name of a data source information property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader">
      <summary>Retrieves the contents of one or more <see cref="T:System.Data.DataTable" /> objects in the form of one or more read-only, forward-only result sets.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.#ctor(System.Data.DataTable)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader" /> class along with a <see cref="T:System.Data.DataTable" /> instance.</summary>
      <param name="dataTable">Contents, or result set, of the specified <see cref="T:System.Data.DataTable" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.#ctor(System.Data.DataTable,System.Int32)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader" /> class along with a <see cref="T:System.Data.DataTable" /> instance and a <see cref="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.Status" /> indicator.</summary>
      <param name="dataTable">Contents, or result set, of the specified <see cref="T:System.Data.DataTable" /> object.</param>
      <param name="status">Integer specifying status.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.Close">
      <summary>Closes the current <see cref="T:System.Data.DataTableReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes into the buffer as an array, starting at a specified offset</summary>
      <returns>Returns an integer value specifying the offset at which to begin reading in the byte stream.</returns>
      <param name="index">Index into the data field from which to begin the read operation.</param>
      <param name="buffer">The byte array to be read.</param>
      <param name="bufferIndex">Index into the buffer at which to start placing the data.</param>
      <param name="length">Length of the byte stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetItem(System.Int32)">
      <summary>Retrieves a data item at a specified index.</summary>
      <returns>Returns an object representing the item at the specified index.</returns>
      <param name="index">Index into the field specifying the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetItem(System.String)">
      <summary>Retrieves a data item with a specified name.</summary>
      <returns>Returns an object representing the item with the specified name.</returns>
      <param name="name">Name of the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves an integer value specifying the maximum length of the data item at the specified index.</summary>
      <returns>Returns an integer value specifying the maximum length of the data item.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the max length value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetItemName(System.Int32)">
      <summary>Retrieves the string literal name of the data item at the specified index.</summary>
      <returns>Returns the name of the data item at the specified index.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the item name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.DataItemTypeFormat)">
      <summary>Retrieves the data type for a data item at a specified index and with a specified item type format.</summary>
      <returns>Returns the data type for the specified data item.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the item type format.</param>
      <param name="itemTypeFormat">The <see cref="T:Microsoft.VisualStudio.Data.DataItemTypeFormat" /> object specifying the data type format for the data item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.InnerDataTable">
      <summary>Provides a means for accessing the underlying <see cref="T:System.Data.DataTable" /> object directly.</summary>
      <returns>Returns the base <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.IsClosed">
      <summary>Retrieves a Boolean value indicating whether the <see cref="T:System.Data.DataTableReader" /> is closed.</summary>
      <returns>Returns true if the <see cref="T:System.Data.DataTableReader" /> object is closed; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.IsNullItem(System.Int32)">
      <summary>Retrieves a Boolean value indicating whether the data item at the specified index is null.</summary>
      <returns>Returns true if the data item is null; otherwise returns false.</returns>
      <param name="index">Index into the field specifying the data item for which to test for null.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.ItemCount">
      <summary>Override. Retrieves an integer value specifying the number of data items contained in the current <see cref="T:System.Data.DataTableReader" /> instance.</summary>
      <returns>Returns an integer specifying data items in the current <see cref="T:System.Data.DataTableReader" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.NextResult">
      <summary>Tests whether there is another result set and if true advances the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader" />.</summary>
      <returns>Returns true if another result exists; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.Read">
      <summary>Tests whether there is another data record and if true advances the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader" /> to the next record.</summary>
      <returns>Returns true if there is another record (row) to read; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.Status">
      <summary>Retrieves an integer value representing the status of the data table; however, invariably returns zero.</summary>
      <returns>Returns an integer representing status.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper">
      <summary>Provides a default implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectConceptMapper" /> class for ADO.NET data providers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectConceptMapper" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.DataTypes">
      <summary>Retrieves data types as <see cref="T:System.Data.DataTable" /> object instance.</summary>
      <returns>Returns a <see cref="T:System.Data.DataTable" /> object instance representing data types.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.GetDbTypeFromNativeType(System.String)">
      <summary>Maps a native type to a <see cref="T:System.Data.DbType" /> instance and returns the type value.</summary>
      <returns>Returns a <see cref="T:System.Data.DbType" /> object instance representing the mapped type.</returns>
      <param name="nativeType">Name of the native type to map.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.GetFrameworkTypeFromNativeType(System.String)">
      <summary>Maps a native type to .NET Framework data type and returns the appropriate type instance.</summary>
      <returns>Returns a .NET Framework type instance representing the mapped type.</returns>
      <param name="nativeType">Name of the native type to map.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.GetProviderTypeFromNativeType(System.String)">
      <summary>Maps a native type to a provider-specific data type.</summary>
      <returns>The provider type.</returns>
      <param name="nativeType">Name of the native type to map.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.MapValuesToConcept(System.String,System.String,System.Object[])">
      <summary>Maps one or more data-source-specific values to a specified generic concept.</summary>
      <returns>Returns an object representing the value of the generic concept.</returns>
      <param name="typeName">The name of the data object type requesting this mapping.</param>
      <param name="conceptName">The name of the generic concept.</param>
      <param name="values">One or more data source specific values to map into the concept specified by <paramref name="conceptName" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="conceptName" /> and/or <paramref name="values" /> parameter is null</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="typeName" /> and/or <paramref name="conceptName" /> parameter is invalid, or the <paramref name="values" /> array does not contain the expected type of data.</exception>
      <exception cref="T:System.NotSupportedException">This method does not support mapping of the specified concept for the specified types.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectEnumerator">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectEnumerator" /> class using the ADO.NET GetSchema API. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectEnumerator.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectEnumerator" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectEnumerator.EnumerateObjects(System.String,System.Object[],System.Object[],System.String,System.Object[])">
      <summary>Enumerates items for a set of data objects of the specified type with the specified restrictions and sort string, if supported.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader" /> object containing the results of the enumeration call.</returns>
      <param name="typeName">Name of the type of the object to enumerate.</param>
      <param name="items">The set of items to enumerate, specified as strings where named items are available, otherwise as indexes. In cases in which a data provider does not support items filtering, this parameter is ignored.</param>
      <param name="restrictions">A set of filtering restrictions to apply to the set of returned objects.</param>
      <param name="sort">A sort string, which follows syntax for the SQL Server ORDER BY clause. The actual sort order should be source-based; that is, if the client is English and the source is Chinese, the sort should be applied in Chinese.</param>
      <param name="parameters">An array whose contents are defined by the given implementation of EnumerateObjects, and which is specified by the Data Object Support XML file. Information supplied in this parameter can be used to provide extra data indicating how to perform the enumeration, allowing implementations of this method to be more data driven.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectIdentifierConverter">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> class using information supplied by an ADO.NET provider, including <see cref="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.DataSourceInformation" /> property values and the <see cref="T:System.Data.Common.DbCommandBuilder" />, <see cref="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)" />, and <see cref="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)" />methods.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectIdentifierConverter.#ctor(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Class constructor. Initializes a new instance of the xx class, providing a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object to the data source.</summary>
      <param name="connection">Connection to the data source object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectIdentifierConverter.FormatPart(System.String,System.Object,System.Boolean)">
      <summary>Formats a specified identifier part; where the with Quotes parameter is true, this method calls the <see cref="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)" /> method.</summary>
      <returns>Returns the specified identifier part as a formatted string.</returns>
      <param name="typeName">The name of the data object type.</param>
      <param name="identifierPart">The unformatted value of an identifier part.</param>
      <param name="withQuotes">Indicates whether the formatted part should be enclosed in quotation marks, where necessary.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectIdentifierConverter.SplitIntoParts(System.String,System.String)">
      <summary>Retrieves the composite identifier separator pattern from the ADO.NET provider's data source information and calls the <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String)" /> method with this value and the input string.</summary>
      <returns>Returns an array of formatted identifier parts.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">A partially or fully formatted identifier.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectIdentifierConverter.UnformatPart(System.String,System.String)">
      <summary>Calls the <see cref="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)" /> method.</summary>
      <returns>Returns the unformatted equivalent of the formatted identifier part.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierPart">A formatted identifier part.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectItemComparer">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectItemComparer" /> class that uses ADO.NET data source information to determine how to compare identifier parts.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectItemComparer.#ctor(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectItemComparer" /> class with a connection to the data source.</summary>
      <param name="connection">Connection to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectItemComparer.Compare(System.String,System.Object[],System.Int32,System.Object)">
      <summary>Compares one object identifier part with another specified object identifier part.</summary>
      <returns>Returns less than zero in cases where the identifier part is less than the specified value. Returns zero if the identifier part is equal to the specified value. Returns greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="identifier">The identifier of an object of the type specified by <paramref name="typeName" /> parameter.</param>
      <param name="identifierPart">The zero based index into the identifier array indicating which part of the identifier to compare.</param>
      <param name="value">A value to compare the identifier part against.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="identifier" /> parameter is less than zero or greater than or equal to the number of elements in the identifier array.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter">
      <summary>Represents a data parameter that is derived from a data source command, or that is passed with a command to a data source whose underlying technology is ADO.NET.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.#ctor(System.String)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter" /> class, along with the name of the ADO.NET data provider being serviced by the connection.</summary>
      <param name="providerName">Name of the ADO.NET data provider being serviced by the connection</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.#ctor(System.String,System.Data.IDataParameter)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter" /> class, providing a parameter for a Command object and the name of the DDEX provider.</summary>
      <param name="providerName">Name of the DDEX provider.</param>
      <param name="parameter">The <see cref="T:System.Data.IDataParameter" /> object representing the command parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.#ctor(System.String,System.Data.IDataParameter,System.Boolean)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter" /> class, providing a parameter for a Command object, the name of the DDEX provider, and an indication whether the parameter is derived using the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)" /> method.</summary>
      <param name="providerName">Name of the DDEX provider.</param>
      <param name="parameter">The <see cref="T:System.Data.IDataParameter" /> object representing the command parameter.</param>
      <param name="isDerived">Indicates whether this data parameter instance was created as a return value of the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)" /> method</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetDirectionImpl">
      <summary>Retrieves the parameter direction.</summary>
      <returns>Returns the parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetIsNullableImpl">
      <summary>Retrieves a Boolean value indicating whether this parameter can be null.</summary>
      <returns>Returns true if this parameter can have a null value; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetNameImpl">
      <summary>Retrieves the name of the parameter.</summary>
      <returns>Returns the name of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetPrecisionImpl">
      <summary>Retrieves a byte value specifying the precision of the parameter.</summary>
      <returns>Returns the precision of the parameter as a byte value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetScaleImpl">
      <summary>Retrieves a byte value specifying the scale of the parameter.</summary>
      <returns>Returns the scale of the parameter as a byte value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetSizeImpl">
      <summary>Retrieves an integer value specifying the size of the parameter.</summary>
      <returns>Returns the size of the parameter and an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetTypeFrom(System.Object)">
      <summary>Returns a <see cref="F:System.Data.DbType.AnsiString" /> for a null or DBNull value; alternatively maps the value type to a <see cref="T:System.Data.DbType" /> value and returns the string equivalent.</summary>
      <returns>Returns the data-source-specific type, or returns null if the value type is not supported.</returns>
      <param name="value">A candidate parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetTypeImpl">
      <summary>Retrieves the data-source-specific type of the parameter.</summary>
      <returns>Returns the data-source-specific type of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetValueImpl">
      <summary>Retrieves the value of a specified parameter.</summary>
      <returns>Returns the value of the specified parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.IsFixedPrecision">
      <summary>Retrieves a Boolean value indicating whether the precision for the current parameter type is fixed.</summary>
      <returns>Returns true if the type is not one of the following <see cref="T:System.Data.DbType" /> values: AnsiString, Binary, Object, String, or VarNumeric.; <see cref="F:System.Data.DbType.AnsiString" />, <see cref="F:System.Data.DbType.Binary" />, Object, String, or <see cref="F:System.Data.DbType.VarNumeric" /> otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.IsFixedScale">
      <summary>Retrieves a Boolean value indicating whether the scale for the current parameter type is fixed.</summary>
      <returns>Returns true if the type is not one of the following <see cref="T:System.Data.DbType" /> values: Currency, Date, Decimal, Double, Single, Time, or VarNumeric.; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.IsFixedSize">
      <summary>Retrieves a Boolean value indicating whether the size for the current parameter type is fixed.</summary>
      <returns>Returns true if the type is not one of the following <see cref="T:System.Data.DbType" /> values: AnsiString, Binary, Object, String, or VarNumeric.; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.IsValidType(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified data-source-specific type is a valid type.</summary>
      <returns>Returns true if the method successfully calls <see cref="M:System.Enum.Parse(System.Type,System.String)" /> on the input string; otherwise returns false.</returns>
      <param name="type">A data-source-specific data type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.Parameter">
      <summary>Retrieves the <see cref="T:System.Data.IDataParameter" /> object representing the command parameter.</summary>
      <returns>Returns an <see cref="T:System.Data.IDataParameter" /> object representing the command parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.Parse(System.String)">
      <summary>Gets the <see cref="T:System.Data.DbType" /> and attempts to parts the input string value into the correct type using primitive type conversions (like Byte.Parse and Int32.Parse).</summary>
      <param name="value">A string representation of a parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetDirectionImpl(Microsoft.VisualStudio.Data.DataParameterDirection)">
      <summary>Sets the direction of the parameter using the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</summary>
      <param name="value">A specific data parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetNameImpl(System.String)">
      <summary>Sets the name of the parameter.</summary>
      <param name="value">The string literal parameter name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetPrecisionImpl(System.Byte)">
      <summary>Sets a byte value specifying the precision of the parameter.</summary>
      <param name="value">A byte value specifying precision.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetScaleImpl(System.Byte)">
      <summary>Sets a byte value specifying the scale of the parameter.</summary>
      <param name="value">A byte value specifying scale.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetSizeImpl(System.Int32)">
      <summary>Sets an integer value specifying the size of this parameter.</summary>
      <param name="value">An integer specifying size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetTypeImpl(System.String)">
      <summary>Attempts to parse the string type into a <see cref="T:System.Data.DbType" /> enumeration value using Enum.Parse and if this fails it assumes DbType.Object as the correct <see cref="T:System.Data.DbType" />.</summary>
      <param name="value">A parameter data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetValueImpl(System.Object)">
      <summary>Sets the value of this parameter.</summary>
      <param name="value">An object value to which the parameter is set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetProviderObjectFactory">
      <summary>Provides an implementation of the DataProviderObjectFactory class for DDEX Providers whose underlying technology is ADO.NET.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetProviderObjectFactory.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetProviderObjectFactory" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetProviderObjectFactory.CreateObject(System.Type)">
      <summary>Supports creation of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> and <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> types.</summary>
      <returns>Returns an object of type specified by the <paramref name="objectType" /> parameter, or null if the object type is not supported.</returns>
      <param name="objType">Data type of object to create.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader">
      <summary>Provides a means for obtaining the schema of the <see cref="T:System.Data.IDataReader" /> object encapsulating the result set.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.#ctor(System.Data.IDataReader)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> class with an <see cref="T:System.Data.IDataReader" />.</summary>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> object containing the data result set, plus schema.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.#ctor(System.Data.IDataReader,System.Data.IDbCommand)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> class with <see cref="T:System.Data.IDataReader" /> and <see cref="T:System.Data.IDbCommand" /> objects.</summary>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> object containing the data result set, plus schema.</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> object encapsulating the command executed against the data source, which allows the implementation of the <see cref="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.Terminate" /> method to call <see cref="M:Microsoft.VisualStudio.Data.DataAsyncCommand.Cancel" /> on the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.Close">
      <summary>Closes the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes into the buffer as an array, starting at a specified offset</summary>
      <returns>Returns a byte stream array.</returns>
      <param name="index">Index into the data field from which to begin the read operation.</param>
      <param name="buffer">The byte array to be read.</param>
      <param name="bufferIndex">Index into the buffer at which to start placing the data.</param>
      <param name="length">Length of the byte stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetItem(System.Int32)">
      <summary>Retrieves a data item at a specified index.</summary>
      <returns>Returns an integer specifying the index at which to retrieve the data item.</returns>
      <param name="index">Index into the field specifying the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetItem(System.String)">
      <summary>Retrieves a data item with a specified name.</summary>
      <returns>Returns the string literal name by which to retrieve the data item.</returns>
      <param name="name">Name of the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves an integer value specifying the maximum length of the data item at the specified index.</summary>
      <returns>Returns an integer value specifying the maximum length of the data item.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the max length value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetItemName(System.Int32)">
      <summary>Retrieves the string literal name of the data item at the specified index.</summary>
      <returns>Returns the name of the data item at the specified index.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the item name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.DataItemTypeFormat)">
      <summary>Retrieves the data type for a data item at a specified index and with a specified item type format.</summary>
      <returns>Returns the data type for the specified data item.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the item type format.</param>
      <param name="itemTypeFormat">The <see cref="T:Microsoft.VisualStudio.Data.DataItemTypeFormat" /> object instance specifying the data type format for the data item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.InnerDataReader">
      <summary>Provides a means for accessing the underlying <see cref="T:System.Data.IDataReader" /> object directly.</summary>
      <returns>Returns the base <see cref="T:System.Data.IDataReader" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.IsClosed">
      <summary>Retrieves a Boolean value indicating whether or not the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> is closed.</summary>
      <returns>Returns true if the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> object is closed; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.IsNullItem(System.Int32)">
      <summary>Retrieves a Boolean value indicating whether the data item at the specified index is null.</summary>
      <returns>Returns true if the data item is null; otherwise returns false.</returns>
      <param name="index">Index into the field specifying the data item for which to test for null.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.ItemCount">
      <summary>Retrieves an integer value specifying the number of data items contained in the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> instance.</summary>
      <returns>Returns an integer specifying data items in the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.NextResult">
      <summary>Tests whether there is another result set and if true advances the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" />.</summary>
      <returns>Returns true if another result exists; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.Read">
      <summary>Tests whether there is another data record and if true advances the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> to the next record.</summary>
      <returns>Returns true if there is another record (row) to read; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.SchemaTable">
      <summary>Retrieves the DataTable object that represents the schema of the <see cref="T:System.Data.IDataReader" /> passed into the constructor of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" />.</summary>
      <returns>Returns a DataTable object instance representing the schema table.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.Status">
      <summary>Retrieves a numerical status code returned by the method currently providing data to the <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object.</summary>
      <returns>Returns an integer value specifying a status code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.Terminate">
      <summary>Terminates the <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object immediately, without necessarily returning all of the data nor setting output parameters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE">
      <summary>For documentation of this enumeration's behavior, see DSREFTYPE Enumeration</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_NULL">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_COLLECTION">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_MULTIPLE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_MIXED">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_DATASOURCEROOT">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_FIELD">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_TABLE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_QUERY">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_DATABASE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_TRIGGER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_STOREDPROCEDURE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_EXTENDED">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_SCHEMADIAGRAM">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_VIEW">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_SYNONYM">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_FUNCTION">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_PACKAGE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_PACKAGEBODY">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_RELATIONSHIP">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_INDEX">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_USERDEFINEDTYPE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_VIEWTRIGGER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_VIEWINDEX">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASFIRSTCHILD">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASNEXTSIBLING">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASNAME">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASMONIKER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASOWNER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASPROP">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_NODE">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer">
      <summary>Reads DSRef trees.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetExtendedType(System.IntPtr)">
      <summary>Retrieves the GUID for the extended type of a specified node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose extended type is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetFirstChildNode(System.IntPtr)">
      <summary>Retrieves the identifier of the first child node in the parent's vector of children for a specified parent node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the parent node for which the first child node is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetMoniker(System.IntPtr)">
      <summary>Retrieves the moniker of the specified node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose moniker is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetName(System.IntPtr)">
      <summary>Retrieves the name of the database object to which the database refers.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose database object name is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetNextSiblingNode(System.IntPtr)">
      <summary>Retrieves the identifier of the next sibling node of a specified node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the child node of which the sibling node is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetOwner(System.IntPtr)">
      <summary>Retrieves the schema of the database object to which the database refers.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose owner schema is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetProperty(System.IntPtr,System.Guid@)">
      <summary>Retrieves the GUID and Variant property associated with the specified node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose property is to be retrieved.</param>
      <param name="guidProp">[in] REFGUID of the property to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetTimestamp">
      <summary>Returns the time that the DSRef is persisted.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetType(System.IntPtr)">
      <summary>Retrieves the type of a specified node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose type is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetVersion">
      <summary>Returns the version of the DSRef tree.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Interop.IDSRefProvider">
      <summary>Builds DSRef trees.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.Clear">
      <summary>Resets a specified tree to an empty state.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.CreateFirstChildNode(System.IntPtr)">
      <summary>Adds an initial child node to a parent node. </summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the parent node for which the first child node is to be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.CreateNextSiblingNode(System.IntPtr)">
      <summary>Creates another sibling node to a child node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code. </returns>
      <param name="drnidCurr">[in] DSREFNODEID of the child node to which the sibling node is to be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetExtendedType(System.IntPtr,System.Guid@)">
      <summary>Sets the extended type for a specified node.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose extended property is to be set.</param>
      <param name="pguidType">[in] Reference to the GUID of the extended type to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetMoniker(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IMoniker)">
      <summary>Sets the moniker of a specified node.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose moniker is to be set.</param>
      <param name="pIMoniker">[in] Reference to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IMoniker" /> interface that contains the moniker to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetName(System.IntPtr,System.String)">
      <summary>Sets the name of a specified node.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose name is to be set.</param>
      <param name="bstrName">[in] BSTR that contains the name to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetOwner(System.IntPtr,System.String)">
      <summary>Sets the schema name for a specified node.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose owner name is to be set.</param>
      <param name="bstrOwnerName">[in] BSTR that contains the owner name to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetProperty(System.IntPtr,System.Guid@,System.Object)">
      <summary>Sets the GUID and value of the catalog or database property for a specified node.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose property is to be set.</param>
      <param name="guidProp">[in] REFGUID of the property to be set for the specified node.</param>
      <param name="varPropValue">[in] VARIANT value of the property to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetType(System.IntPtr,Microsoft.VisualStudio.Data.Interop.__DSREFTYPE)">
      <summary>Sets the type of a node to specify the type of database object that the node references.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose type is to be set.</param>
      <param name="grfType">[in] DSREFTYPE enumeration that contains the value of the type to be set for the specified node.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Settings.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Settings</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Settings.ApplicationDataFolder">
      <summary>This enumeration is used to specify the folder that Visual Studio uses to keep various files for different purposes like cache files, backup files or template files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.ApplicationExtensions">
      <summary>Folder that Visual Studio specifies for installing per-machine Extensions </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.UserExtensions">
      <summary>Folder that Visual Studio uses for loading user extensions. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.Documents">
      <summary>Folder that Visual Studio uses for the user generated files like project, snippets or backup files. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.RoamingSettings">
      <summary>Folder that Visual Studio uses for storing the roaming files specific to user. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.LocalSettings">
      <summary>Folder that Visual Studio uses for storing the local files specific to user. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.Configuration">
      <summary>Folder that Visual Studio uses for storing the machine wide files. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.EnclosingScopes">
      <summary>Enumeration returned as a result of a querying call to GetPropertyScope or GetCollectionScope methods of the SettingsManager class to learn the enclosing scopes of the provided property or collection. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.EnclosingScopes.UserSettings">
      <summary>User Settings scope contains the property or the collection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.EnclosingScopes.None">
      <summary>None of the scopes contains the property or the collection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.EnclosingScopes.Configuration">
      <summary>Configuration scope contains the property or the collection.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.ExternalSettingsManager">
      <summary>This is the gateway class to reach for the settings stored inside Visual Studio. It provides two basic functionalities. It allows searches for properties and collections inside the scopes. It hands the <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> and <see cref="T:WritableSettingsStore" /> classes for further manipulation of the collections and properties within the scopes. This class implements the <see cref="T:System.IDisposable" /> pattern and as a result it needs to be disposed after it is no longer necessary.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForApplication(System.String)">
      <summary>Used to construct the SettingsManager AppID based Visual Studio applications.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForApplication(System.String,System.Boolean)">
      <summary>Used to construct the SettingsManager AppID based Visual Studio applications.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
      <param name="isLogged">Flag to control the logging of the package definition management operations at startup and shutdown.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForApplication(System.String,System.String)">
      <summary>Used to construct the SettingsManager AppID based Visual Studio applications with suffixed mode. In suffixed mode, any changes made to the settings are isolated from the normal running mode.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
      <param name="rootSuffix">Name of the suffix.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForApplication(System.String,System.String,System.Boolean)">
      <summary>Used to construct the SettingsManager AppID based Visual Studio applications with suffixed mode. In suffixed mode, any changes made to the settings are isolated from the normal running mode.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
      <param name="rootSuffix">Name of the suffix.</param>
      <param name="isLogged">Flag to control the logging of the package definition management operations at startup and shutdown.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForIsolatedApplication(System.String,System.String)">
      <summary>Used to construct the SettingsManager AppEnv based Visual Studio custom applications. Custom applications are isolated among themselves.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
      <param name="applicationName">Name of the custom application.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForIsolatedApplication(System.String,System.String,System.Boolean)">
      <summary>Used to construct the SettingsManager AppEnv based Visual Studio custom applications. Custom applications are isolated among themselves.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
      <param name="applicationName">Name of the custom application.</param>
      <param name="isLogged">Flag to control the logging of the package definition management operations at startup and shutdown.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Settings.ExternalSettingsManager" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetApplicationDataFolder(Microsoft.VisualStudio.Settings.ApplicationDataFolder)">
      <summary>Returns the folder that Visual Studio uses for storing various cache, backup, template, etc. files</summary>
      <param name="folder">Requested folder.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetCollectionScopes(System.String)">
      <summary>Outputs the scopes that contain the given collection. If more than one scope contains the collection, the corresponding bit flags of those scopes are set.</summary>
      <param name="collectionPath">Path of the collection to be searched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetCommonExtensionsSearchPaths">
      <summary>Returns the list of folders that Visual Studio uses for installing/discovering machine-wide extensions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetPropertyScopes(System.String,System.String)">
      <summary>Outputs the scopes that contain the given property. If more than one scope contains the property, the corresponding bit flags of those scopes are set.</summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property to be searched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetReadOnlySettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
      <summary>Provides the <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> class for the requested scope which can be used for read-only operations.</summary>
      <param name="scope">Requested scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetWritableSettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
      <summary>Provides the <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> class for the requested scope which can be used both for reading and writing.</summary>
      <param name="scope">Requested scope.</param>
      <exception cref="T:System.ArgumentException">If the given scope is not a writable one.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingsManager">
      <summary>This is the gateway class to reach for the settings stored inside the Visual Studio. It provides two basic functionality. It allows to search for properties and collections inside the scopes. It hands the <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> and <see cref="T:WritableSettingsStore" /> classes for further manipulation of the collections and properties within the scopes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetApplicationDataFolder(Microsoft.VisualStudio.Settings.ApplicationDataFolder)">
      <summary>Returns the folder that Visual Studio uses for storing various cache, backup, template, etc. files</summary>
      <returns>Full path of the requested folder.</returns>
      <param name="folder">Requested folder.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetCollectionScopes(System.String)">
      <summary>Outputs the scopes that contain the given collection. </summary>
      <returns>Enclosing scopes.</returns>
      <param name="collectionPath">Path of the collection to be searched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetCommonExtensionsSearchPaths">
      <summary>Returns the list of folders that Visual Studio uses for installing or discovering machine-wide extensions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetPropertyScopes(System.String,System.String)">
      <summary>Outputs the scopes that contain the given property. </summary>
      <returns>Enclosing scopes.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property to be searched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetReadOnlySettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
      <summary>Provides the <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> class for the requested scope which can be used for read-only operations.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> instance that can be used for accessing the scope.</returns>
      <param name="scope">Requested scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetWritableSettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
      <summary>Provides the <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> class for the requested scope which can be used both for reading and writing.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> instance that can be used for accessing the scope.</returns>
      <param name="scope">Requested scope.</param>
      <exception cref="T:System.ArgumentException">If the given scope is not a writable one.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingsScope">
      <summary>This enumeration is used to specify the scope of the settings that is retrieved from the SettingsManager class.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsScope.UserSettings">
      <summary>Denotes the user-configurable user settings scope.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsScope.Configuration">
      <summary>Denotes the installation specific configuration scope. This scope is read-only to the users.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingsStore">
      <summary>Abstract class for reading or enumerating the selected scope's collections and properties. It is obtained from <see cref="M:SettingsManager.GetReadOnlySettingsStore" /> method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.CollectionExists(System.String)">
      <summary>Checks the existence of the collection passed in to this method.</summary>
      <returns>Returns true if the collection exists and false otherwise.</returns>
      <param name="collectionPath">Path of the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetBoolean(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" /> as boolean.</summary>
      <returns>If the underling integer value for the property is non-zero, it returns true and false otherwise.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetBoolean(System.String,System.String,System.Boolean)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" /> as boolean.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in otherwise it returns true if the underling integer value is non-zero and false if it is zero.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt32(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" />.</summary>
      <returns>Value of the property. If the value was stored as an unsigned integer previously, then regular type conversion semantics applies.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt32(System.String,System.String,System.Int32)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" />.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an unsigned integer previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt64(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int64" />.</summary>
      <returns>Value of the property. If the value was stored as an unsigned long previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt64(System.String,System.String,System.Int64)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int64" />.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an unsigned long previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetLastWriteTime(System.String)">
      <summary>Provides the last write time of the properties and sub-collections immediate to the given collection. </summary>
      <returns>Last update time to the collection in <see cref="!:DateTimeKind.Local" /> format.</returns>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetMemoryStream(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Binary" />. In order to access the underlying byte array at once <see cref="!:MemoryStream.ToArray" /> method can be used.</summary>
      <returns>
        <see cref="T:System.IO.MemoryStream" /> for the stream of bytes this property.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetPropertyCount(System.String)">
      <summary>Returns the number of properties under the given collection.</summary>
      <returns>Number of properties is returned.</returns>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the collection does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetPropertyNames(System.String)">
      <summary>Returns the names of properties under the given collection.</summary>
      <returns>Names of properties are returned.</returns>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the collection does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetPropertyType(System.String,System.String)">
      <summary>Returns the type of the requested property.</summary>
      <returns>Type of the property.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetString(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.String" />.</summary>
      <returns>Value of the property.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetString(System.String,System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.String" />.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetSubCollectionCount(System.String)">
      <summary>Returns the number of sub-collections under the given collection.</summary>
      <returns>Number of sub-collections is returned.</returns>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the collection does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetSubCollectionNames(System.String)">
      <summary>Returns the names of sub-collections under the given collection.</summary>
      <returns>Names of sub collections is returned.</returns>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the collection does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt32(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" />.</summary>
      <returns>Value of the property. If the value was stored as a signed integer previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt32(System.String,System.String,System.UInt32)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" />.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as a signed integer previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt64(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int64" />.</summary>
      <returns>Value of the property. If the value was stored as a signed long previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt64(System.String,System.String,System.UInt64)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int64" />.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as a signed long previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.PropertyExists(System.String,System.String)">
      <summary>Checks the existance of the property passed in to this method.</summary>
      <returns>Returns true if the property exists and false otherwise.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingsType">
      <summary>Data types of the properties that are stored inside the collections.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Int64">
      <summary>Data type used to store 8-byte (64-bit) properties which are Int64 and UInt64.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Int32">
      <summary>Data type used to store 4 byte (32 bits) properties which are Boolean, Int32 and UInt32. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Invalid">
      <summary>Invalid data type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Binary">
      <summary>Data type used to store byte streams (arrays).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsType.String">
      <summary>Data type used to store the strings.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.WritableSettingsStore">
      <summary>Abstract class for both reading and writing the selected scope's collections and properties. It is obtained from <see cref="M:SettingsManager.GetWritableSettingsStore" /> method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.CreateCollection(System.String)">
      <summary>Creates the given collection path by creating each nested collection while skipping the ones that already exist. </summary>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">If empty string ("") which deis passed to the method it throws this exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.DeleteCollection(System.String)">
      <summary>Deletes the given collection recursively deleting all of the sub-collections and properties in it. If the collection does not exist or an empty string ("") is passed then the method returns false.</summary>
      <param name="collectionPath">Path of the collection to be deleted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.DeleteProperty(System.String,System.String)">
      <summary>Deletes the given property from the collection. If the property or the collection does not exist then the method returns false.</summary>
      <param name="collectionPath">Collection that contains the property to be deleted.</param>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetBoolean(System.String,System.String,System.Boolean)">
      <summary>Updates the value of the specified property to the given Boolean value while setting its data type to <see cref="!:SettingsType.Int32" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetInt32(System.String,System.String,System.Int32)">
      <summary>Updates the value of the specified property to the given integer value while setting its data type to <see cref="!:SettingsType.Int32" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetInt64(System.String,System.String,System.Int64)">
      <summary>Updates the value of the specified property to the given long value while setting its data type to <see cref="!:SettingsType.Int64" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetMemoryStream(System.String,System.String,System.IO.MemoryStream)">
      <summary>Updates the value of the specified property to the bits of the MemoryStream while setting its data type to <see cref="!:SettingsType.Binary" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">MemoryStream to set the bits of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetString(System.String,System.String,System.String)">
      <summary>Updates the value of the specified property to the given string value while setting its data type to <see cref="!:SettingsType.String" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetUInt32(System.String,System.String,System.UInt32)">
      <summary>Updates the value of the specified property to the given unsigned integer value while setting its data type to <see cref="!:SettingsType.Int32" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetUInt64(System.String,System.String,System.UInt64)">
      <summary>Updates the value of the specified property to the given unsigned long value while setting its data type to <see cref="!:SettingsType.Int64" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Shell.Immutable.10.0.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Shell.Immutable.10.0</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationMethod">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationMethod&quot;]/*"/>
            <summary>
            How should the assembly be registered/located
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.Default">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationMethod.Default&quot;]/*"/>
            <summary>
            Default should only be used by tools
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.CodeBase">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationMethod.CodeBase&quot;]/*"/>
            <summary>
            The path to the assembly should be stored in the registry and used to locate the assembly at runtime
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.Assembly">
            <summary>
            The assembly should be in the GAC or in PrivateAssemblies
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationAttribute&quot;]"/>
            <devdoc>
                This attribute is the basis for all other attributes that can be registered by RegPkg.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]"/>
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 It also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]"/>
            <devdoc>
                Called to unregister this attribute with the given context.  The context
                contains the location where the registration information should be removed.
                It also contains things such as the type being unregistered, and path information.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.GetPackageRegKeyPath(System.Guid)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;GetPackageRegKeyPath&quot;]"/>
            <devdoc>
                Returns the registry path (relative to this AppID's registry root) where the
                registration for the given package is located.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.TypeId">
            <summary>
            Override the TypeID property in order to let the RegistrationAttribute derived
            classes to work with System.ComponentModel.TypeDescriptor.GetAttributes(...).
            An attribute derived from this one will have to override this property only if
            it needs a better control on the instances that can be applied to a class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Key&quot;]"/>
            <devdoc>
                Abstraction around a registry key.  This may or may not actually
                point to a real registry key.  It could point to a file.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Key.Close&quot;]"/>
            <devdoc>
                Called to close this key.  Alternately, you may use the C# "using"
                syntax on keys, since they are IDisposable. Always close keys when you
                are done with them.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.CreateSubkey(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Key.CreateSubkey&quot;]"/>
            <devdoc>
                Creates a subkey of the given name.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.SetValue(System.String,System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Key.SetValue&quot;]"/>
            <devdoc>
                Sets the name to the given value. Pass an empty string or null into this to
                set the default value for a key.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.System#IDisposable#Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Key.IDisposable.Dispose&quot;]/*"/>
            <internalonly/>
            <devdoc>
            Closes the key.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext&quot;]"/>
            <devdoc>
                Abstraction around the registry itself.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.CreateKey(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.CreateKey&quot;]"/>
            <devdoc>
                Creates a new key of the given name.  The key is created at the appropriate registration
                point in the registry.  Always close or dispose this key when finished with it.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveKey(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.RemoveKey&quot;]"/>
            <devdoc>
            Removes the key of the given name.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveValue(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.RemoveValue&quot;]"/>
            <devdoc>
            Removes the value of the given name under the key of the given keyname
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveKeyIfEmpty(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.RemoveKey&quot;]"/>
            <devdoc>
            Removes the key of the given name if it has no child key and
            no value.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.EscapePath(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.EscapePath&quot;]"/>
            <devdoc>
            Escape the string if needed
            This is used by the implementation of the Register method on attributes so that paths be escaped when
            needed. The attribute itself does not know if we are writting to a .reg file or directly to the registry.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.ComponentPath">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.ComponentPath&quot;]"/>
            <devdoc>
                The path to the compnent that is being registered.  You should always use this rather than the 
                codebase of the component type, and you should never assume that this is a physical path on
                disk.  It may be a token that identifies the path at install time.  The "component"
                is the type that the registration attribute was found on.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.ComponentType">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.RegisteringType&quot;]"/>
            <devdoc>
                The type of the component that is being registered.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.InprocServerPath">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.InprocServerPath&quot;]"/>
            <devdoc>
                The path to the COM object supplying the class factory.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.CodeBase">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.CodeBase&quot;]"/>
            <devdoc>
                The path to the object being registered (including filename).
            </devdoc>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RootFolder" -->
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RegistrationMethod">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.RegistrationMethod&quot;]"/>
            <devdoc>
            Specify if the assembly should be located using CodeBase or Assembly
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.Log">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.Log&quot;]"/>
            <devdoc>
                Returns a text writer that can be used to log registration information.  This should 
                be a human readable (and ideally localized) bit of text that describes the
                current registration process.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SVsServiceProvider">
            <summary>
            Represents a Visual Studio service provider and intended for dynamic discovery of other VS services from MEF components.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Data.Core.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Data.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Data.Core.DataClientObjectAttribute">
      <summary>Specifies that instances of a DDEX support entity should not be directly returned to clients. Instead, they should be returned through a client wrapper object that interacts with the underlying provider object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.DataClientObjectAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Core.DataClientObjectAttribute" /> class, specifying the class ID.</summary>
      <param name="classId">A string that contains a GUID in one of the formats that is recognized by the <see cref="T:System.Guid" /> constructor that takes a string input.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.DataClientObjectAttribute.ClassId">
      <summary>Gets the class ID that identifies the client object class type.</summary>
      <returns>The class ID that identifies the client object class type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.DataDefaultObjectAttribute">
      <summary>Specifies that a DDEX support entity has a default implementation that should be returned when a provider does not supply an implementation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.DataDefaultObjectAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Core.DataDefaultObjectAttribute" /> class, using the specified class ID.</summary>
      <param name="classId">A string that contains a GUID in one of the formats recognized by the <see cref="T:System.Guid" /> constructor that takes a string input.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.DataDefaultObjectAttribute.ClassId">
      <summary>Gets the class ID that identifies the default object class type.</summary>
      <returns>The class ID that identifies the default object class type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.DataProviderException">
      <summary>Represents the exception that occurs when there is an unexpected problem with a DDEX provider, such as missing or invalid registration or support entities.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.DataProviderException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.DataProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.DataProviderException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException" /> class, specifying an error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.DataProviderException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException" /> class, specifying an error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataClientObject`1">
      <summary>Represents a client wrapper object that interacts with an underlying provider object.</summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataClientObject`1.Initialize(`0)">
      <summary>Initializes the client object with the underlying provider object implementation.</summary>
      <param name="providerObj">The underlying provider object implementation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="providerObj" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataDefaultObject">
      <summary>Represents the default implementation of a DDEX support entity.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataHostService">
      <summary>Provides the DDEX Host service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataHostService.BeginInvokeOnUIThread(System.Delegate,System.Object[])">
      <summary>Asynchronously executes a specified method on the main (UI) thread running in the Visual Studio process, with the specified list of arguments.</summary>
      <returns>An IAsyncResult instance that represents the result of this operation.</returns>
      <param name="method">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args" /> parameter.</param>
      <param name="args">An array of objects to pass as arguments to the specified method. This parameter can be null if the method takes no arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataHostService.GetService``2">
      <summary>Gets a global Visual Studio service of the specified type that implements the specified interface.</summary>
      <returns>The service instance.</returns>
      <typeparam name="TService">The service.</typeparam>
      <typeparam name="TInterface">The interface.</typeparam>
      <exception cref="T:Microsoft.VisualStudio.Data.ServiceNotFoundException">The service was not found.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataHostService.GetService``1">
      <summary>Gets a global Visual Studio service of the specified type.</summary>
      <returns>The service instance.</returns>
      <typeparam name="T">The service.</typeparam>
      <exception cref="T:Microsoft.VisualStudio.Data.ServiceNotFoundException">The service was not found.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataHostService.GetService``1(System.Guid)">
      <summary>Gets a global Visual Studio service that is registered with the specified class ID that implements the specified interface.</summary>
      <returns>The service instance.</returns>
      <param name="serviceGuid">The class ID of the service to retrieve.</param>
      <typeparam name="T">The interface.</typeparam>
      <exception cref="T:Microsoft.VisualStudio.Data.ServiceNotFoundException">The service was not found.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataHostService.InvokeOnUIThread(System.Delegate,System.Object[])">
      <summary>Synchronously executes a specified method on the main thread running in the Visual Studio process, with the specified list of arguments.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the return value from the delegate being invoked, or null if the delegate has no return value.</returns>
      <param name="method">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args" /> parameter.</param>
      <param name="args">An array of objects to pass as arguments to the specified method. This parameter can be null if the method takes no arguments.</param>
      <exception cref="any">The specified method threw an exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataHostService.TryGetService``1">
      <summary>Tries to get a global Visual Studio service of the specified type.</summary>
      <returns>The service instance, if found; otherwise, null.</returns>
      <typeparam name="T">The type.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataHostService.TryGetService``2">
      <summary>Tries to get a global Visual Studio service of the specified type that implements the specified interface.</summary>
      <returns>The service instance, if found; otherwise, null.</returns>
      <typeparam name="TService">The service.</typeparam>
      <typeparam name="TInterface">The type.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataHostService.TryGetService``1(System.Guid)">
      <summary>Tries to get a global Visual Studio service that is registered with the specified class ID that implements the specified interface.</summary>
      <returns>The service instance, if found; otherwise, null.</returns>
      <param name="serviceGuid">The class ID of the service to retrieve.</param>
      <typeparam name="T">The interface.</typeparam>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataHostService.UIThread">
      <summary>Gets the main (UI) thread running in the Visual Studio process.</summary>
      <returns>The main (UI) thread running in the Visual Studio process.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider">
      <summary>Provides a DDEX provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.CreateObject``1">
      <summary>Creates an instance of the specified DDEX support entity that is implemented by the DDEX provider.</summary>
      <returns>An instance of the specified DDEX support entity that is implemented by the DDEX provider.</returns>
      <typeparam name="TObject">The object.</typeparam>
      <exception cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException">The DDEX provider does not support the support entity, or instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.CreateObject``1(System.Guid)">
      <summary>Creates an instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider.</summary>
      <returns>An instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider.</returns>
      <param name="source">An identifier of a DDEX data source, or <see cref="F:System.Guid.Empty" /> for no specific data source.</param>
      <typeparam name="TObject">The object.</typeparam>
      <exception cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException">The DDEX provider does not support the support entity, or instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.CreateObject(System.Guid,System.Type)">
      <summary>Creates an instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider.</summary>
      <returns>An instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider.</returns>
      <param name="source">An identifier of a DDEX data source, or <see cref="F:System.Guid.Empty" /> for no specific data source.</param>
      <param name="objType">A type of DDEX support entity.</param>
      <exception cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException">The DDEX provider does not support the support entity, or instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.CreateObject``1(System.Guid,System.Type,``0)">
      <summary>Creates an instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider, sited with the specified site object.</summary>
      <returns>An instance of the specified DDEX support entity that is implemented by the DDEX provider, sited with the specified site object.</returns>
      <param name="source">An identifier of a DDEX data source, or <see cref="F:System.Guid.Empty" /> for no specific data source.</param>
      <param name="objType">A type of DDEX support entity.</param>
      <param name="site">An instance of an object that should site the new DDEX support entity.</param>
      <typeparam name="TSite">The site.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
      <exception cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException">The DDEX provider does not support the support entity, or instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.CreateObject``2(System.Guid,``1)">
      <summary>Creates an instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider, sited with the specified site object.</summary>
      <returns>An instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider, sited with the specified site object.</returns>
      <param name="source">An identifier of a DDEX data source, or <see cref="F:System.Guid.Empty" /> for no specific data source.</param>
      <param name="site">An instance of an object that should site the new DDEX support entity.</param>
      <typeparam name="TObject">The object.</typeparam>
      <typeparam name="TSite">The site.</typeparam>
      <exception cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException">The DDEX provider does not support the support entity, or instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.CreateObject(System.Type)">
      <summary>Creates an instance of the specified DDEX support entity that is implemented by the DDEX provider.</summary>
      <returns>An instance of the specified DDEX support entity that is implemented by the DDEX provider.</returns>
      <param name="objType">A type of DDEX support entity.</param>
      <exception cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException">The DDEX provider does not support the support entity, or instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.DeriveSource(System.String)">
      <summary>Derives a DDEX data source that is supported by the DDEX provider, given information about a target data source.</summary>
      <returns>The derived DDEX data source that is supported by the DDEX provider, or <see cref="F:System.Guid.Empty" /> if no data source can be derived.</returns>
      <param name="connectionString">A data connection string that contains information about a target data source.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataProvider.Description">
      <summary>Gets a description of the DDEX provider.</summary>
      <returns>A description of the DDEX provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataProvider.DisplayName">
      <summary>Gets the display name of the DDEX provider.</summary>
      <returns>The display name of the DDEX provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.GetAssembly(System.Guid,System.String)">
      <summary>Resolves a provider-specific assembly string to its corresponding <see cref="T:System.Reflection.Assembly" /> representation, for a specific DDEX data source.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object that represents the assembly that is resolved from the specified assembly string for the specified DDEX data source, if found; otherwise, null.</returns>
      <param name="source">A DDEX data source identifier.</param>
      <param name="assemblyString">A provider-specific assembly string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyString" /> parameter is null.</exception>
      <exception cref="&lt;ANY&gt;">The DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataSourceSpecializer.GetAssembly(System.Guid,System.String)" /> or <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.GetAssembly(System.String)" /> implementation threw an exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.GetAssembly(System.String)">
      <summary>Resolves a provider-specific assembly string to its corresponding <see cref="T:System.Reflection.Assembly" /> representation.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object that represents the assembly that is resolved from the specified assembly string, if found; otherwise, null.</returns>
      <param name="assemblyString">A provider-specific assembly string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyString" /> parameter is null.</exception>
      <exception cref="&lt;ANY&gt;">The DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.GetAssembly(System.String)" /> implementation threw an exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.GetMainAssembly">
      <summary>Gets the provider’s main assembly.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object that represents the provider’s main assembly.</returns>
      <exception cref="&lt;ANY&gt;">The DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.GetAssembly(System.String)" /> implementation threw an exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.GetProperty(System.String)">
      <summary>Gets a registered property of the DDEX provider.</summary>
      <returns>The value of the property, if exists; otherwise, null.</returns>
      <param name="name">The name of the property to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.GetString(System.String)">
      <summary>Gets a localized string from the DDEX provider.</summary>
      <returns>The localized value of the string resource, if the resource ID is valid and identifies an existing resource; otherwise, null.</returns>
      <param name="resourceId">The identifier of the string resource to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="resourceId" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.GetType(System.Guid,System.String)">
      <summary>Resolves a provider-specific type name to its corresponding <see cref="T:System.Type" /> representation, for a specific DDEX data source.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type that is resolved from the specified type name for the specified DDEX data source, if it is found; otherwise, null.</returns>
      <param name="source">A DDEX data source identifier.</param>
      <param name="typeName">A provider-specific type name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="&lt;ANY&gt;">The DDEX provider's <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataSourceSpecializer.GetType(System.Guid,System.String)" /> or <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.GetType(System.String)" /> implementation threw an exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.GetType(System.String)">
      <summary>Resolves a provider-specific type name to its corresponding <see cref="T:System.Type" /> representation.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type that is resolved from the specified type name, if it is found; otherwise, null.</returns>
      <param name="typeName">A provider-specific type name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="&lt;ANY&gt;">The DDEX provider's <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.GetType(System.String)" /> implementation threw an exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.GetUnsupportedReason(System.ComponentModel.Design.CommandID,System.Object)">
      <summary>Gets a localized string that explains why an operation is not supported.</summary>
      <returns>A localized string that explains why the specified operation is not supported, if the operation is in fact not supported; otherwise, null.</returns>
      <param name="command">A command that identifies the operation.</param>
      <param name="context">An object that represents the context in which the operation exists.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="&lt;ANY&gt;">The DDEX provider's <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderDynamicSupport.GetUnsupportedReason(System.Guid,System.ComponentModel.Design.CommandID,System.Object)" /> implementation threw an exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.GetUnsupportedReason(System.Guid,System.ComponentModel.Design.CommandID,System.Object)">
      <summary>Gets a localized string that explains why an operation is not supported for the specified DDEX data source.</summary>
      <returns>A localized string that explains why the specified operation is not supported, if the operation is in fact not supported; otherwise, null.</returns>
      <param name="source">A DDEX data source identifier.</param>
      <param name="command">A command that identifies the operation.</param>
      <param name="context">An object that represents the context in which the operation exists.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="&lt;ANY&gt;">The DDEX provider's <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderDynamicSupport.GetUnsupportedReason(System.Guid,System.ComponentModel.Design.CommandID,System.Object)" /> implementation threw an exception.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataProvider.Guid">
      <summary>Gets the unique identifier of the DDEX provider.</summary>
      <returns>The unique identifier of the DDEX provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.IsOperationSupported(System.ComponentModel.Design.CommandID,System.Object)">
      <summary>Determines whether a specific operation is supported by the provider in the current environment.</summary>
      <returns>true if the operation is supported by the provider in the current environment; otherwise, false.</returns>
      <param name="command">A command that identifies the operation.</param>
      <param name="context">An object that represents the context in which the operation exists.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="&lt;ANY&gt;">The DDEX provider's <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.IsOperationSupported(System.Guid,System.ComponentModel.Design.CommandID,System.Object)" /> implementation threw an exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.IsOperationSupported(System.Guid,System.ComponentModel.Design.CommandID,System.Object)">
      <summary>Determines whether a specific operation is supported by the provider in the current environment, for the specified DDEX data source.</summary>
      <returns>true if the operation is supported by the provider in the current environment; otherwise, false.</returns>
      <param name="source">A DDEX data source identifier.</param>
      <param name="command">A command that identifies the operation.</param>
      <param name="context">An object that represents the context in which the operation exists.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="&lt;ANY&gt;">The DDEX provider's <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderDynamicSupport.IsOperationSupported(System.Guid,System.ComponentModel.Design.CommandID,System.Object)" /> implementation threw an exception.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataProvider.Name">
      <summary>Gets the programmatic name of the DDEX provider.</summary>
      <returns>The programmatic name of the DDEX provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataProvider.ShortDisplayName">
      <summary>Gets a short display name of the DDEX provider.</summary>
      <returns>A short display name of the DDEX provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.SupportsObject(System.Guid,System.Type)">
      <summary>Determines whether a DDEX provider supports the specified type of DDEX support entity for the specified DDEX data source.</summary>
      <returns>true if the DDEX provider supports the specified type of DDEX support entity for the specified DDEX data source; otherwise, false.</returns>
      <param name="source">A DDEX data source identifier, or <see cref="F:System.Guid.Empty" /> for no specific data source.</param>
      <param name="objType">A type of DDEX support entity.</param>
      <exception cref="T:ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.SupportsObject(System.Type)">
      <summary>Determines whether a DDEX provider supports the specified type of DDEX support entity.</summary>
      <returns>true if the DDEX provider supports the specified type of DDEX support entity; otherwise, false.</returns>
      <param name="objType">A type of DDEX support entity.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataProvider.Technology">
      <summary>Gets the unique identifier of the underlying technology employed and targeted by the DDEX provider.</summary>
      <returns>The unique identifier of the underlying technology employed and targeted by the DDEX provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.TryCreateObject``1">
      <summary>Tries to create an instance of the specified DDEX support entity that is implemented by the DDEX provider.</summary>
      <returns>An instance of the specified DDEX support entity that is implemented by the DDEX provider, if the DDEX provider supports it; otherwise, the default instance of type <see cref="T:System.Object" />.</returns>
      <typeparam name="TObject">The object.</typeparam>
      <exception cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException">Instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.TryCreateObject``1(System.Guid)">
      <summary>Tries to create an instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider.</summary>
      <returns>An instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider, if the DDEX provider supports it. Otherwise, the default instance of type TObject.</returns>
      <param name="source">A DDEX data source identifier, or <see cref="F:System.Guid.Empty" /> for no specific data source.</param>
      <typeparam name="TObject">The object.</typeparam>
      <exception cref="DataProviderException">Instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataSourceSpecializer.CreateObject(System.Guid,System.Type)" /> or <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.TryCreateObject(System.Guid,System.Type)">
      <summary>Tries to create an instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider.</summary>
      <returns>An instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider, if the DDEX provider supports it; otherwise, null.</returns>
      <param name="source">A DDEX data source identifier, or <see cref="F:System.Guid.Empty" /> for no specific data source.</param>
      <param name="objType">A type of DDEX support entity.</param>
      <exception cref="T:System.ArgumentNullException">Instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataSourceSpecializer.CreateObject(System.Guid,System.Type)" /> or <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.TryCreateObject``1(System.Guid,System.Type,``0)">
      <summary>Tries to create an instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider, sited with the specified site object.</summary>
      <returns>An instance of the specified DDEX support entity that is implemented by the DDEX provider, sited with the specified site object, if the DDEX provider supports it; otherwise, null.</returns>
      <param name="source">A DDEX data source identifier, or <see cref="F:System.Guid.Empty" /> for no specific data source.</param>
      <param name="objType">A type of DDEX support entity.</param>
      <param name="site">An instance of an object that should site the new DDEX support entity.</param>
      <typeparam name="TSite">The site.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
      <exception cref="DataProviderException">Instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataSourceSpecializer.CreateObject(System.Guid,System.Type)" /> or <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.TryCreateObject``2(System.Guid,``1)">
      <summary>Tries to create an instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider, sited with the specified site object.</summary>
      <returns>An instance of the specified DDEX support entity for the specified DDEX data source that is implemented by the DDEX provider, sited with the specified site object, if the DDEX provider supports it. Otherwise, the default instance of type TObject.</returns>
      <param name="source">A DDEX data source identifier, or <see cref="F:System.Guid.Empty" /> for no specific data source.</param>
      <param name="site">An instance of an object that should site the new DDEX support entity.</param>
      <typeparam name="TObject">The object.</typeparam>
      <typeparam name="TSite">The site.</typeparam>
      <exception cref="DataProviderException">Instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataSourceSpecializer.CreateObject(System.Guid,System.Type)" /> or <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProvider.TryCreateObject(System.Type)">
      <summary>Tries to create an instance of the specified DDEX support entity that is implemented by the DDEX provider.</summary>
      <returns>An instance of the specified DDEX support entity that is implemented by the DDEX provider, if the DDEX provider supports it; otherwise, null.</returns>
      <param name="objType">A type of DDEX support entity.</param>
      <exception cref="T:Microsoft.VisualStudio.Data.Core.DataProviderException">Instantiation of a new instance of the support entity threw an exception, whether by way of a CreateInstance call through reflection or through the DDEX provider’s <see cref="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)" /> method implementation, or creation of the default or client object implementation (if there is one) failed.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataProviderDynamicSupport">
      <summary>Provides the ability to alter the support of a DDEX provider, its supported sources, and specific operations, based on the current environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderDynamicSupport.GetUnsupportedReason(System.Guid,System.ComponentModel.Design.CommandID,System.Object)">
      <summary>Gets a localized string describing the reason an operation is not supported, for the specified DDEX data source.</summary>
      <returns>A localized string describing why the specified operation is not supported, if the operation is in fact not supported; otherwise, null.</returns>
      <param name="source">A DDEX data source identifier.</param>
      <param name="command">A command identifying the operation.</param>
      <param name="context">An object representing the context in which the operation exists.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="context" /> parameter is not an expected value for the specified operation.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderDynamicSupport.IsOperationSupported(System.Guid,System.ComponentModel.Design.CommandID,System.Object)">
      <summary>Determines whether a specific operation is supported in the current environment, for the specified DDEX data source.</summary>
      <returns>true if the operation is supported by the provider in the current environment; otherwise, false.</returns>
      <param name="source">A DDEX data source identifier.</param>
      <param name="command">A command identifying the operation.</param>
      <param name="context">An object representing the context in which the operation exists.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="context" /> parameter is not an expected value for the specified operation.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataProviderDynamicSupport.IsProviderSupported">
      <summary>Gets a value indicating whether the provider is supported in the current environment.</summary>
      <returns>A value indicating whether the provider is supported in the current environment.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderDynamicSupport.IsSourceSupported(System.Guid)">
      <summary>Gets a value indicating whether a particular DDEX data source is supported by this DDEX provider in the current environment.</summary>
      <returns>true if the DDEX data source is supported by this DDEX provider in the current environment; otherwise, false.</returns>
      <param name="source">A DDEX data source identifier.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataProviderManager">
      <summary>Exposes the DDEX Provider Manager service, which allows discovery of registered DDEX providers.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataProviderManager.Providers">
      <summary>Gets a dictionary of all registered DDEX providers.</summary>
      <returns>A dictionary of all registered DDEX providers.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory">
      <summary>Provides the ability to create DDEX provider implementations of support entities.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.CreateObject(System.Type)">
      <summary>Creates an instance of the specified DDEX support entity that is implemented by the DDEX provider.</summary>
      <returns>An instance of the specified DDEX support entity that is implemented by the DDEX provider, if the DDEX provider supports it; otherwise, null.</returns>
      <param name="objType">A type of DDEX support entity.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.GetAssembly(System.String)">
      <summary>Resolves a provider-specific assembly string to its corresponding <see cref="T:System.Reflection.Assembly" /> representation.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object representing the assembly resolved from the specified assembly string, if found; otherwise, null.</returns>
      <param name="assemblyString">A provider-specific assembly string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyString" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataProviderObjectFactory.GetType(System.String)">
      <summary>Resolves a provider-specific type name to its corresponding <see cref="T:System.Type" /> representation.</summary>
      <returns>An <see cref="T:System.Type" /> object representing the type resolved from the specified type name, if found; otherwise, null.</returns>
      <param name="typeName">A provider-specific type name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataSiteableObject`1">
      <summary>Represents an object that can be sited with a specific type.</summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataSiteableObject`1.Site">
      <summary>Gets or sets the site.</summary>
      <returns>The site object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataSource">
      <summary>Represents a DDEX data source.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataSource.DefaultProvider">
      <summary>Gets the default provider that supports the DDEX data source.</summary>
      <returns>The default provider that supports the DDEX data source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataSource.Description">
      <summary>Gets the basic description of the DDEX data source.</summary>
      <returns>The basic description of the DDEX data source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataSource.DisplayName">
      <summary>Gets the display name of the DDEX data source.</summary>
      <returns>The display name of the DDEX data source.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataSource.GetDescription(System.Guid)">
      <summary>Gets a localized description of the selection of the DDEX data source combined with a specific supporting DDEX provider.</summary>
      <returns>A localized description of the selection of this DDEX data source combined with a specific supporting DDEX provider, or null if no description exists.</returns>
      <param name="provider">The identifier of a supporting DDEX provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataSource.GetProperty(System.Guid,System.String)">
      <summary>Gets a property of the DDEX data source as registered by a specific supporting DDEX provider.</summary>
      <returns>The value of the property, if exists; otherwise, null.</returns>
      <param name="provider">The identifier of a supporting DDEX provider.</param>
      <param name="name">The name of the property to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter was null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataSource.GetProperty(System.String)">
      <summary>Gets a property of the DDEX data source.</summary>
      <returns>The value of the property, if it exists; otherwise, null.</returns>
      <param name="name">The name of the property to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataSource.GetProviders">
      <summary>Gets the DDEX providers that support this DDEX data source.</summary>
      <returns>An array of DDEX provider identifiers that represent the valid, registered DDEX providers that support this DDEX data source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataSource.Guid">
      <summary>Gets the unique identifier of the DDEX data source.</summary>
      <returns>The unique identifier of the DDEX data source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataSource.Name">
      <summary>Gets the programmatic name of the DDEX data source.</summary>
      <returns>The programmatic name of the DDEX data source.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataSourceManager">
      <summary>Represents the DDEX Data Source Manager service, which enables discovery of registered DDEX data sources.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Core.IVsDataSourceManager.Sources">
      <summary>Gets a dictionary of all registered DDEX data sources.</summary>
      <returns>A dictionary of all registered DDEX data sources.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataSourceSpecializer">
      <summary>Provides the ability to specialize DDEX provider implementations of support entities for specific data sources based on a data connection string.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataSourceSpecializer.CreateObject(System.Guid,System.Type)">
      <summary>Creates an instance of the specified DDEX support entity that is implemented by the DDEX provider for a specific DDEX data source.</summary>
      <returns>An instance of the specified DDEX support entity that is implemented by the DDEX provider for a specific DDEX data source, if the DDEX provider supports it; otherwise, null.</returns>
      <param name="source">A DDEX data source identifier.</param>
      <param name="objType">A type of DDEX support entity.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataSourceSpecializer.DeriveSource(System.String)">
      <summary>Derives a DDEX data source, when possible, from a DDEX provider-specific data connection string.</summary>
      <returns>A valid, registered DDEX data source identifier that was determined to represent the type of the target data source identified by the connection string.</returns>
      <param name="connectionString">A DDEX provider-specific data connection string that defines a target data source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataSourceSpecializer.GetAssembly(System.Guid,System.String)">
      <summary>Resolves a provider-specific assembly string to its corresponding <see cref="T:System.Reflection.Assembly" /> representation, for a specific DDEX data source.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object representing the assembly resolved from the specified assembly string, for the specified DDEX data source, if found; otherwise, null.</returns>
      <param name="source">A DDEX data source identifier.</param>
      <param name="assemblyString">A provider-specific assembly string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyString" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataSourceSpecializer.GetType(System.Guid,System.String)">
      <summary>Resolves a provider-specific type name to its corresponding <see cref="T:System.Type" /> representation, for a specific DDEX data source.</summary>
      <returns>An <see cref="T:System.Type" /> object representing the type resolved from the specified type name, for the specified DDEX data source, if found; otherwise, null.</returns>
      <param name="source">A DDEX data source identifier.</param>
      <param name="typeName">A provider-specific type name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataSupport">
      <summary>Provides the ability to supply a stream of XML that drives support for a particular area of data designer extensibility (DDEX).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataSupport.OpenSupportStream">
      <summary>Opens and returns the stream of data support XML that is represented by the data support object.</summary>
      <returns>An open stream containing the data support XML that is represented by the data support object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataSupportImportResolver">
      <summary>Provides the ability to resolve Import statements in a stream of data support XML.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataSupportImportResolver.ImportSupportStream(System.String)">
      <summary>Imports and returns a stream of data support XML that is identified with a specified name.</summary>
      <returns>An open stream containing the data support XML to be imported, or null if there is no stream found with this name.</returns>
      <param name="name">The name of a stream to import.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Core.IVsDataSupportObject`1">
      <summary>Represents an object that was created based on reference information supplied in a data support XML stream.</summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Core.IVsDataSupportObject`1.Invoke(System.String,System.Object[],System.Object[])">
      <summary>Invokes a method on the object with additional parameters not present in the method signature.</summary>
      <returns>The return value of the method, if any; otherwise, null.</returns>
      <param name="name">The name of a method on the object.</param>
      <param name="args">The regular arguments to pass to the method.</param>
      <param name="parameters">Additional parameters to pass to the method.</param>
      <exception cref="any">The method called threw an exception.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Package.LanguageService.10.0.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Package.LanguageService.10.0</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Package.CodeWindowManager">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager&quot;]/*"/>
            <summary>
            CodeWindowManager provides a default implementation of the VSIP interface IVsCodeWindowManager
            and manages the LanguageService, Source, ViewFilter, and DocumentProperties objects associated
            with the given IVsCodeWindow.  It calls CreateViewFilter on your LanguageService for each new
            IVsTextView created by Visual Studio and installs the resulting filter into the command chain.
            You do not have to override this method, since a default view filter will be created.
            If your LanguageService returns an object from CreateDocumentProperties then you will have
            properties in the Properties Window associated with your source files.
            The CodeWindowManager also provides support for optional drop down combos in the IVsDropdownBar for 
            listing types and members by installing the TypeAndMemberDropdownBars object returned from your 
            LanguageService CreateDropDownHelper method.  The default return from CreateDropDownHelper is null, 
            which results in no drop down combos.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow,Microsoft.VisualStudio.Package.Source)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.CodeWindowManager&quot;]/*"/>
            <summary>
            The CodeWindowManager is constructed by the base LanguageService class when VS calls
            the IVsLanguageInfo.GetCodeWindowManager method.  You can override CreateCodeWindowManager
            on your LanguageService if you want to plug in a different CodeWindowManager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.Finalize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.Close&quot;]/*"/>
            <summary>Closes all view filters, and the document properties window</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.GetFilter(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.GetFilter;&quot;]/*"/>
            <summary>
            Returns the ViewFilter for the given view or null if no matching filter is found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.AddAdornments">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.AddAdornments&quot;]/*"/>
            <summary>Install the optional TypeAndMemberDropdownBars, and primary and secondary view filters</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.RemoveAdornments">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.RemoveAdornments&quot;]/*"/>
            <summary>Remove drop down combos, view filters, and notify the LanguageService that the Source and
            CodeWindowManager is now closed</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.OnNewView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.OnNewView&quot;]/*"/>
            <summary>Install a new view filter for the given view. This method calls your
            CreateViewFilter method.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.OnKillFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.OnKillFocus&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.OnSetFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.OnSetFocus&quot;]/*"/>
            <summary>Refresh the document properties</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.LanguageService">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.LanguageService;&quot;]/*"/>
            <summary>Returns the LanguageService object that created this code window manager</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.Source">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.Source;&quot;]/*"/>
            <summary>returns the Source object associated with the IVsTextLines buffer for this code window</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.Properties">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.Properties;&quot;]/*"/>
            <summary>Returns the DocumentProperties, if any.  You can update this property if you want to 
            change the document properties on the fly.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.DropDownHelper">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.DropDownHelper&quot;]/*"/>
            <summary>Return the optional TypeAndMemberDropdownBars object for the drop down combos</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.CodeWindow">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;CodeWindowManager.CodeWindow&quot;]/*"/>
            <summary>Return the IVsCodeWindow associated with this code window manager.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars&quot;]/*"/>
            <summary>
            Represents the two drop down bars on the top of a text editor window that allow 
            types and type members to be selected by name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.languageService">
            <summary>The language service object that created this object and calls its SynchronizeDropdowns method</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.dropDownBar">
            <summary>The correspoding VS object that represents the two drop down bars. The VS object uses call backs to pull information from
            this object and makes itself known to this object by calling SetDropdownBar</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.imageList">
            <summary>The icons that prefix the type names and member signatures</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.textView">
            <summary>The current text editor window</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.dropDownTypes">
            <summary>The list of types that appear in the type drop down list.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.dropDownMembers">
            <summary>The list of types that appear in the member drop down list. </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.#ctor(Microsoft.VisualStudio.Package.LanguageService)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.TypeAndMemberDropdownBars&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.Done">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.Done&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnSynchronizeDropdowns(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,System.Collections.ArrayList,System.Collections.ArrayList,System.Int32@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.OnSynchronizeDropdowns&quot;]/*"/>
            <summary>
            This method is called to update the drop down bars to match the current contents of the text editor window. 
            It is called during OnIdle when the caret position changes.  You can provide new drop down members here.
            It is up to you to sort the ArrayLists if you want them sorted in any particular order.
            </summary>
            <param name="languageService">The language service</param>
            <param name="textView">The editor window</param>
            <param name="line">The line on which the cursor is now positioned</param>
            <param name="col">The column on which the cursor is now position</param>
            <param name="dropDownTypes">The current list of types (you can update this)</param>
            <param name="dropDownMembers">The current list of members (you can update this)</param>
            <param name="selectedType">The selected type (you can update this)</param>
            <param name="selectedMember">The selected member (you can update this)</param>
            <returns>true if something was updated</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetComboAttributes(System.Int32,System.UInt32@,System.UInt32@,System.IntPtr@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.GetComboAttributes&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetComboTipText(System.Int32,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.GetComboTipText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryAttributes(System.Int32,System.Int32,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.GetEntryAttributes&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryImage(System.Int32,System.Int32,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.GetEntryImage&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryText(System.Int32,System.Int32,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.GetEntryText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnComboGetFocus(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.OnComboGetFocus&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetMember(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.GetMember&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnItemChosen(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.OnItemChosen&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.SetFocus(System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.SetFocus&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnItemSelected(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.OnItemSelected&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.SetDropdownBar(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;TypeAndMemberDropdownBars.SetDropdownBar&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.DropDownMember">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DropDownMember.#ctor(System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.DropDownMember&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DropDownMember.CompareTo(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.CompareTo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DropDownMember.CompareTo(System.Object,System.StringComparison)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.CompareTo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DropDownMember.Equals(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.Equals&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DropDownMember.GetHashCode">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.GetHashCode&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_Equality(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.Operator==&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_Inequality(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.Operator!=&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_LessThan(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.OperatorMT&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_GreaterThan(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.OperatorGT&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.DropDownMember.Label">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.Label;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.DropDownMember.Span">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.Span;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.DropDownMember.Glyph">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.Glyph;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.DropDownMember.FontAttr">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DropDownMember.FontAttr;&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.Colorizer">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.Package.IScanner)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.Colorizer&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;ColorableItem.Finalize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.Dispose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.CloseColorizer">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.CloseColorizer&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStateMaintenanceFlag(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.GetStateMaintenanceFlag&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStartState(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.GetStartState&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStateAtEndOfLine(System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.GetStateAtEndOfLine&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.ColorizeLine(System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.ColorizeLine&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetColorInfo(System.String,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.GetColorInfo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetLineInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.GetLineInfo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.Suspend">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.Suspend&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Colorizer.Resume">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.Resume&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Colorizer.Scanner">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.Scanner&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.ColorableItem">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;ColorableItem&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ColorableItem.#ctor(System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.COLORINDEX,Microsoft.VisualStudio.TextManager.Interop.COLORINDEX,System.Drawing.Color,System.Drawing.Color,Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;ColorableItem.ColorableItem&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDefaultColors(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;ColorableItem.GetDefaultColors&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDefaultFontFlags(System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;ColorableItem.GetDefaultFontFlags&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDisplayName(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;ColorableItem.GetDisplayName&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetColorData(System.Int32,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;Colorizer.GetColorData&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetCanonicalName(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;ColorableItem.GetCanonicalName&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDescription(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;ColorableItem.GetDescription&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetMergingPriority(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Colorizer.uex" path="docs/doc[@for=&quot;ColorableItem.GetMergingPriority&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.DocumentProperties">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties&quot;]/*"/>
            <summary>
            This class can be used as a base class for document properties which are 
            displayed in the Properties Window when the document is active.  Simply add
            some public properties and they will show up in the properties window.  
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.#ctor(Microsoft.VisualStudio.Package.CodeWindowManager)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.DocumentProperties&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Refresh">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.UpdateSelection&quot;]/*"/>
            <summary>
            Call this method when you want the document properties window updated with new information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetSource">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.GetSource&quot;]/*"/>
            This is not a property because all public properties show up in the Properties window.
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetCodeWindowManager">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.GetCodeWindowManager&quot;]/*"/>
            This is not a property because all public properties show up in the Properties window.
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.Close&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.Dispose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Dispose(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.Dispose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.Finalize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.CountObjects(System.UInt32,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.CountObjects&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetObjects(System.UInt32,System.UInt32,System.Object[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.GetObjects&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.SelectObjects(System.UInt32,System.Object[],System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.SelectObjects&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.DocumentProperties.Visible">
            <!-- Failed to insert some or all of included XML --><include file="doc\CodeWindowManager.uex" path="docs/doc[@for=&quot;DocumentProperties.Visible&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.DocumentTask">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.#ctor(System.IServiceProvider,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.DocumentTask&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.Finalize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;DocumentTask.Dispose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.Dispose(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;DocumentTask.Dispose1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnNavigate(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.OnNavigate&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnRemoved(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.OnRemoved&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.MarkerInvalidated">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.MarkerInvalidated&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnBufferSave(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.OnBufferSave&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnBeforeBufferClose">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.OnBeforeBufferClose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnAfterSpanReload">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.OnAfterSpanReload&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnAfterMarkerChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.OnAfterMarkerChange&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.String[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.GetTipText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32,System.String[],System.UInt32[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.GetMarkerCommandInfo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DocumentTask.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.ExecMarkerCommand&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.DocumentTask.IsMarkerValid">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;DocumentTask.IsMarkerValid&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.DocumentTask.Site">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;DocumentTask.Site&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.DocumentTask.Span">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.Span&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.DocumentTask.TextLineMarker">
            <!-- Failed to insert some or all of included XML --><include file="doc\DocumentTask.uex" path="docs/doc[@for=&quot;DocumentTask.TextLineMarker&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.EditSpan">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditSpan&quot;]/*"/>
            <summary>
            This class encapsulates one atomic edit operation.
            Add these to an EditArray then when you are ready call ApplyEdits().
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditSpan.#ctor(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditSpan.EditSpan&quot;]/*"/>
            <summary>
            Construct a new edit span object
            </summary>
            <param name="toReplace">The text span to remove from the buffer (can be empty)</param>
            <param name="insertText">The text to insert in it's place (can be null)</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditSpan.Span">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditSpan.Span&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditSpan.Text">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditSpan.Text&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditSpan.LineCount">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditSpan.LineCount&quot;]/*"/>
            <summary>
            Returns the number of lines in the new text being inserted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditSpan.LengthOfLastLine">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditSpan.LengthOfLastLine&quot;]/*"/>
            <summary>
            Returns the length of the last line of text being inserted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.EditArray">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditArray&quot;]/*"/>
            <summary>
            This class encapsulates a batch edit operation.  The reason this class exists is because
            performing thousands of tiny edits on a large document can be pretty slow, so the best thing
            to do is merge the edits into bigger chunks and that is exactly what this class will do
            for you.  The trick is that when merging edits you need to be careful not to include any 
            IVsTextLineMarkers in the merged chunks, because editing over the top of the marker
            will blow it away, which is not what the user wants.  The user wants to keep all their
            breakpoints and bookmarks, and red and blue squigglies and so on.  So this class also takes
            care of that.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditArray.#ctor(Microsoft.VisualStudio.Package.Source,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Boolean,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditArray.EditArray1&quot;]/*"/>
            <summary>
            This constructor takes a view and will use CompoundViewAction to make the updates
            and it will update the current selection accordingly.
            <param name="source">The buffer to operate on</param>
            <param name="view">The text view to use for CompoundViewAction and whose selection you want updated</param>
            <param name="merge">Whether to attempt to merge edits</param>
            <param name="description">Name used in compound action</param>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditArray.ToString">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditArray.ToString&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditArray.Add(Microsoft.VisualStudio.Package.EditSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditArray.Add&quot;]/*"/>
            <summary>
            Add a new atomic edit to the array.  The edits cannot intersect each other.  
            The spans in each edit must be based on the current state of the buffer, 
            and not based on post-edit spans.  This EditArray will calculate the
            post edit spans for you.
            </summary>
            <param name="editSpan"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditArray.ApplyEdits">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditArray.ApplyEdits&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditArray.GetEnumerator">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditArray.GetEnumerator&quot;]/*"/>
            <summary>Allows enumeration of EditSpan objects</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditArray.Count">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditArray.Count&quot;]/*"/>
            <summary>
            Return the number of edits in the array.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditArray.TextView">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditArray.TextView&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditArray.Source">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditArray.uex" path="docs/doc[@for=&quot;EditArray.Source&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.EditorFactory">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory&quot;]/*"/>
            <summary>
            You must inherit from this class and simply add a [ComVisible] and 
            [GuidAttribute] and then specify the EditorFactoryGuid, EditorFactoryGuid 
            and EditorName variables in your Registration class.
            This base class provides a default editor factory implementation
            that hosts the Visual Studio Core editor.  
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.EditorFactory.GuidVSBufferDetectLangSid">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.GUID_VsBufferDetectLangSID;&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.#ctor(Microsoft.VisualStudio.Shell.Package)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.EditorFactory&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.EditorFactory&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.Finalize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetSite">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.GetSite&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetPackage">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.GetPackage&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.IsRegisteredExtension(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.IsRegisteredExtension&quot;]/*"/>
            <summary>Returns true if the given extension is one of our registered extensions</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetExtensions">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.GetExtensions&quot;]/*"/>
            <summary>Return list of file extensions registered for this editor factory under 
            HKLM\Software\Microsoft\Visual Studio\8.0\Editors\\{" + this.GetType().GUID.ToString() + "}\\Extensions
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetLanguageService(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.GetLanguageService&quot;]/*"/>
            <summary>Returns the guid of the language service registered for this file extension
            HKLM\Software\Microsoft\Visual Studio\8.0\Language Services\Extensions</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetLanguageServiceGuid">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.GetLanguageServiceGuid&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetRegisteredEditor(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.GetRegisteredEditor&quot;]/*"/>
            <summary>Returns the guid of the highest priority editor registered for this extension.
            This will also pick up user defined file extension to editor associations</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetRegisteredEditorInfo(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.GetRegisteredEditor&quot;]/*"/>
            <summary>Returns the guid of the highest priority editor registered for this extension.
            This will also pick up user defined file extension to editor associations.
            You can then access all registered editors via the .Next property.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetUserDefinedEditor(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.GetUserDefinedEditor&quot;]/*"/>
            <summary>Returns the guid of the editor that the user has defined for this file extension or
            Guid.Empty if none is found</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.IsFileExtensionWeShouldEditAnyway(System.String)">
            <summary>Returns true if the file extension is one that you registered for this editor
            factory, or your have registered the "*" extension and (this file type matches your 
            GetLanguageServiceGuid() or there is no other language service registered for this file extension).</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.IsOurFileFormat(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.IsOurFileFormat&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.CreateEditorInstance&quot;]/*"/>
            <summary>
            This method checks to see if the specified file is one that your editor supports
            and if so, creates the core text editor and associated your language service 
            with it.  To figure out if the file is one that your editor supports it performs
            the following check:
            <list>
            <item>
            Call IsRegisteredExtension to see if the file extension is explicitly 
            registered to your editor.      
            </item>
            <item>
            Call GetUserDefinedEditor to see if the user has explicitly mapped the
            extension to your editor.
            </item>
            <item>
            If your editor registered the "*" extension, then it also calls 
            IsFileExtensionWeShouldEditAnyway and IsOurFileFormat to let you sniff
            the file and see if you think it contains stuff that your editor recognizes
            </item>
            </list>
            If all this is true then it goes ahead with the next step which is to
            get an IVsTextLines buffer and set it up as follows:
            <list>
            <item>
            If existingDocData is non-null then it checks to see if it can get an
            IVsTextLines buffer from this docData, and if not, returns VS_E_INCOMPATIBLEDOCDATA.
            Otherwise it creates a new VsTextBufferClass.
            </item>
            Calls IVsUserData.SetData on the IVsTextLines buffer with any code page prompt
            flags you have provided via the CodePagePrompt property.
            </list>
            <list>
            Calls SetLanguageServiceID to pass in your language service Guid and 
            sets the GuidVSBufferDetectLangSid IVsUserData to false to stop the core
            text editor from looking up a different language service.
            </list>
            Lastly it calls CreateEditorView to create the docView.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorView(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.String,System.String@,System.Guid@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.CreateEditorView&quot;]/*"/>
            <summary>Return docView IUnknown COM object.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.MapLogicalView(System.Guid@,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.MapLogicalView&quot;]/*"/>
            <devdoc>The default implementation supports LOGVIEWID_Code, LOGVIEWID_TextView,
            LOGVIEWID_Debugging, and LOGVIEWID_Primary returning null for
            the physicalView string.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.SetSite&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorFactory.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.Close&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditorFactory.CodePagePrompt">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.WithEncoding&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.EditorInfo&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo.Name">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.EditorInfo.Name&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo.Guid">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.EditorInfo.Guid&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo.Priority">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.EditorInfo.Priority&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo.Next">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorFactory.uex" path="docs/doc[@for=&quot;EditorFactory.EditorInfo.Next&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.SimpleEditorView">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView&quot;]/*"/>
            <summary>
            This class View provides an abstract base class for simple editor views
            that follow the VS simple embedding model.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.#ctor(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.SimpleEditorView&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.IOleCommandTarget.QueryStatus&quot;]/*"/>
            <internalonly/>
            <summary>
            IOleCommandTarget implementation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.IOleCommandTarget.Exec&quot;]/*"/>
            <internalonly/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.ClosePane">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.ClosePane&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.CreatePaneWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.CreatePaneWindow&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.GetDefaultSize(Microsoft.VisualStudio.OLE.Interop.SIZE[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.GetDefaultSize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.LoadViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.LoadViewState&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.SaveViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.SaveViewState&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.SetSite&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.TranslateAccelerator&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.IsSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.IsSupported&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.ItemPicked(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.ItemPicked&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.SetInfo">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.SetInfo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.CommitPendingEdit(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.CommitPendingEdit&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FDoIdle(System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.FDoIdle&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.Terminate">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.Terminate&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FPreTranslateMessage(Microsoft.VisualStudio.OLE.Interop.MSG[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.FPreTranslateMessage&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnEnterState(System.UInt32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.OnEnterState&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnAppActivate(System.Int32,System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.OnAppActivate&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnLoseActivation">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.OnLoseActivation&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.OnActivationChange&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.FContinueMessageLoop&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FQueryTerminate(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.FQueryTerminate&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.HwndGetWindow(System.UInt32,System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.HwndGetWindow&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FReserved1(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.FReserved1&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.Site">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.Site;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.Buffer">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.Buffer;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.ComponentManager">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.ComponentManager;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.ComponentId">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.ComponentId;&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.EditorControl">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;EditorControl&quot;]/*"/>
            <summary>
            This class wraps a managed WinForm control and uses that as the editor window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorControl.#ctor(System.IServiceProvider,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Windows.Forms.Control)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;EditorControl.EditorControl&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorControl.ClosePane">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;EditorControl.ClosePane&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorControl.CreatePaneWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;EditorControl.CreatePaneWindow&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorControl.CommitPendingEdit(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;EditorControl.CommitPendingEdit&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorControl.FDoIdle(System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;EditorControl.FDoIdle&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorControl.OnAppActivate(System.Int32,System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;EditorControl.OnAppActivate&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorControl.FQueryTerminate(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;EditorControl.FQueryTerminate&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorControl.OnLoseActivation">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;EditorControl.OnLoseActivation&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.EditorControl.HwndGetWindow(System.UInt32,System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;EditorControl.HwndGetWindow&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.EditorControl.Control">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;EditorControl.Control;&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.DefaultFieldValue">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;DefaultFieldValue&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.DefaultFieldValue.#ctor(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;DefaultFieldValue.DefaultFieldValue&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.DefaultFieldValue.Field">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;DefaultFieldValue.Field&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.DefaultFieldValue.Value">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;DefaultFieldValue.Value&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.ExpansionProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.#ctor(Microsoft.VisualStudio.Package.Source)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.ExpansionProvider&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.Finalize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.Dispose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandleQueryStatus(System.Guid@,System.UInt32,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.HandleQueryStatus&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionSpan">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.InTemplateEditingMode&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandlePreExec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.HandlePreExec&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandlePostExec(System.Guid@,System.UInt32,System.UInt32,System.Boolean,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.HandlePostExec&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.DisplayExpansionBrowser(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String[],System.Boolean,System.String[],System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.DisplayExpansionBrowser&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertSpecificExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Xml.XmlElement,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.InsertSpecificExpansion&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertNamedExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.InsertNamedExpansion&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.FindExpansionByShortcut(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean,System.String@,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.FindExpansionByShortcut&quot;]/*"/>
            <summary>Returns S_OK if match found, S_FALSE if expansion UI is shown, and error otherwise</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionFunction(System.Xml.XmlElement,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.GetExpansionFunction1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.PrepareTemplate(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.PrepareTemplate&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.BeginTemplateEditing(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.BeginTemplateEditing&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.EndTemplateEditing(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.EndTemplateEditing&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetFieldSpan(System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.GetFieldSpan&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetFieldValue(System.String,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.GetFieldValue&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.EndExpansion">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.EndExpansion&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.FormatSpan(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.FormatSpan&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.IsValidKind(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.IsValidKind&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.IsValidType(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String[],System.Int32,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.IsValidType&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnItemChosen(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.OnItemChosen&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.PositionCaretForEditing(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.PositionCaretForEditing&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnAfterInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.OnAfterInsertion&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnBeforeInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.OnBeforeInsertion&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionFunction(MSXML.IXMLDOMNode,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.GetExpansionFunction&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.Source">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.Source&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.TextView">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.TextView&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.Expansion">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.Expansion&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.ExpansionSession">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.ExpansionSession&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.InTemplateEditingMode">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionProvider.InTemplateEditingMode&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.ExpansionFunction">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.ExpansionFunction&quot;]/*"/>
            <summary>You must construct this object with an ExpansionProvider</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.#ctor(Microsoft.VisualStudio.Package.ExpansionProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.ExpansionFunction2&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetCurrentValue">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.GetCurrentValue&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetDefaultValue">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.GetDefaultValue&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetIntellisenseList">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.GetIntellisenseList&quot;]/*"/>
            <summary>Override this method if you want intellisense drop support on a list of possible values.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetArgument(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.GetArgument&quot;]/*"/>
            <summary>
            Gets the value of the specified argument, resolving any fields referenced in the argument.
            In the substitution, "$$" is replaced with "$" and any floating '$' signs are left unchanged,
            for example "$US 23.45" is returned as is.  Only if the two dollar signs enclose a string of
            letters or digits is this considered a field name (e.g. "$foo123$").  If the field is not found
            then the unresolved string "$foo" is returned.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetFieldValue(System.String,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.GetFieldValue&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetSelection">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;DefaultFieldValue.GetSelection&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.FieldChanged(System.String,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.FieldChanged&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetCurrentValue(System.String@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.GetCurrentValue1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetDefaultValue(System.String@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.GetDefaultValue1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetFunctionType(System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.GetFunctionType&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetListCount(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.GetListCount&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetListText(System.Int32,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.GetListText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.ReleaseFunction">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.ReleaseFunction&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ExpansionFunction.ExpansionProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.ExpansionProvider&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ExpansionFunction.Arguments">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.Arguments&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ExpansionFunction.FieldName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ExpansionFunction.FieldName&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.ParseReason">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.None">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.None&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.MemberSelect">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.MemberSelect&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.HighlightBraces">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.HighlightBraces&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.MemberSelectAndHighlightBraces">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.MemberSelectAndHighlightBraces&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.MatchBraces">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.MatchBraces&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.Check">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.Check&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.CompleteWord">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.CompleteWord&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.DisplayMemberList">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.DisplayMemberList&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.QuickInfo">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.QuickInfo&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.MethodTip">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.MethodTip&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.Autos">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.Autos&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.CodeSpan">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.CodeSpan&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.ParseReason.Goto">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseReason.Goto&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.LanguageService">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.LanguageService&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.Initialize">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.Initialize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.Done&quot;]/*"/>
            <summary>
            Cleanup the sources, uiShell, shell, preferences and imageList objects
            and unregister this language service with VS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguagePreferences">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetLanguagePreferences&quot;]/*"/>
            It is expected that you will have one static language preferences object
            for your package.
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetScanner(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetScanner&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.ParseSource(Microsoft.VisualStudio.Package.ParseRequest)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.ParseSource&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguageServiceGuid">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetLanguageServiceGuid&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetItemCount(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetItemCount&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetColorableItem(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetColorableItem&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft#VisualStudio#TextManager#Interop#IVsLanguageContextProvider#UpdateLanguageContext(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.IVsLanguageContextProvider.UpdateLanguageContext&quot;]/*"/>
            <internalonly/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.SetUserContextDirty(System.String)">
            <summary>
            Call this method if you want UpdateLanguageContext to be called again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.UpdateLanguageContext(Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.Shell.Interop.IVsUserContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.UpdateLanguageContext&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetImageList">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetImageList&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.IsMacroRecordingOn">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.IsMacroRecordingOn&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetIVsDebugger">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetIVsDebugger&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetIVsTextMacroHelperIfRecordingOn">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetIVsTextMacroHelperIfRecordingOn&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.OpenDocument(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.OpenDocument&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnIdle(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.OnIdle&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateDropDownHelper(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetDropDownHelper&quot;]/*"/>
            <devdoc>
            Return your implementation of TypeAndMemberDropdownBars if you want 
            drop down combos to appear at the top of your code window.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnActiveViewChanged(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.OnActiveViewChanged&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnCaretMoved(Microsoft.VisualStudio.Package.CodeWindowManager,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.OnCaretMoved&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.SynchronizeDropdowns">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.SynchronizeDropdowns&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnChangesCommitted(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.OnChangesCommitted&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetColorizer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetColorizer&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateSource(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.CreateSource&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSources">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetSources&quot;]/*"/>
            <summary>For enumerating all the known 'Source' objects.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSource(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetSource&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSource(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetSource2&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSource(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetSource1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnCloseSource(Microsoft.VisualStudio.Package.Source)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.OnCloseSource&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.IsSourceOpen(Microsoft.VisualStudio.Package.Source)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.IsSourceOpen&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateDocumentProperties(Microsoft.VisualStudio.Package.CodeWindowManager)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.CreateDocumentProperties&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateExpansionFunction(Microsoft.VisualStudio.Package.ExpansionProvider,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.CreateExpansionFunction&quot;]/*"/>
            If the functionName is supported, return a new IVsExpansionFunction object.
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateExpansionProvider(Microsoft.VisualStudio.Package.Source)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.CreateExpansionProvider&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetCodeWindowManager(Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow,Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetCodeWindowManager&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateCodeWindowManager(Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow,Microsoft.VisualStudio.Package.Source)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.CreateCodeWindowManager&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetColorizer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsColorizer@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetColorizer1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguageName(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetLanguageName&quot;]/*"/>        
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetFileExtensions(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetFileExtensions&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguageID(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.Guid@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetLanguageID&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLocationOfName(System.String,System.String@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetLocationOfName&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetNameOfLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.String@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetNameOfLocation&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetProximityExpressions(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetProximityExpressions&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.IsMappedLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.IsMappedLocation&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.ResolveName(System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.ResolveName&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.ValidateBreakpointLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.ValidateBreakpointLocation&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetService(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;LanguageService.GetService&quot;]"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.QueryService&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateViewFilter(Microsoft.VisualStudio.Package.CodeWindowManager,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.CreateViewFilter&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.AddCodeWindowManager(Microsoft.VisualStudio.Package.CodeWindowManager)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.AddCodeWindowManager&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.RemoveCodeWindowManager(Microsoft.VisualStudio.Package.CodeWindowManager)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.RemoveCodeWindowManager&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetCodeWindowManagerForView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetCodeWindowManagerForView&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetCodeWindowManagerForSource(Microsoft.VisualStudio.Package.Source)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetCodeWindowManagerForSource&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.DispatchCommand(System.Guid,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.DispatchCommand&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.DispatchCommand(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.DispatchCommand2&quot;]/*"/>
            <summary>Executes the given command if it is enabled and supported using the
            current SUIHostCommandDispatcher.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.ScrollToEnd(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.ScrollToEnd&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.ScrollToEnd(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.ScrollToEnd2&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.BeginParse(Microsoft.VisualStudio.Package.ParseRequest,Microsoft.VisualStudio.Package.ParseResultHandler)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.BeginParse&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateParseRequest(Microsoft.VisualStudio.Package.Source,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,System.String,System.String,Microsoft.VisualStudio.Package.ParseReason,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.CreateParseRequest&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnParseComplete(Microsoft.VisualStudio.Package.ParseRequest)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.OnParseComplete&quot;]/*"/>
            <summary>Override this method if you need to do any post-parse work on the main UI thread.
            Be sure to call this base method in order to get the dynamic help context updated.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSite(System.Guid@,System.IntPtr@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.IObjectWithSite.GetSite&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.SetSite(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.IObjectWithSite.SetSite&quot;]/*"/>
            <internalonly/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.BeginInvoke(System.Delegate,System.Object[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.BeginInvoke&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.Invoke(System.Delegate,System.Object[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.Invoke&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.EndInvoke(System.IAsyncResult)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.EndInvoke&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnModeChange(Microsoft.VisualStudio.Shell.Interop.DBGMODE)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.OnModeChange&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.QueryInvalidEncoding(Microsoft.VisualStudio.TextManager.Interop.__VSTFF,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.QueryInvalidEncoding&quot;]/*"/>
            Return true if the given encoding information is invalid for your language service
            Default always returns false.  If you return true, then also return an error
            message to display to the user.
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetFormatFilterList">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.GetFormatFilterList&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.CurFileExtensionFormat(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.CurFileExtensionFormat&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft#VisualStudio#TextManager#Interop#IVsFormatFilterProvider#QueryInvalidEncoding(System.UInt32,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.IVsFormatFilterProvider.QueryInvalidEncoding&quot;]/*"/>
            <internalonly/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft#VisualStudio#TextManager#Interop#IVsFormatFilterProvider#CurFileExtensionFormat(System.String,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.IVsFormatFilterProvider.CurFileExtensionFormat&quot;]/*"/>
            <internalonly/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft#VisualStudio#TextManager#Interop#IVsFormatFilterProvider#GetFormatFilterList(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.IVsFormatFilterProvider.GetFormatFilterList&quot;]/*"/>
            <internalonly/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguageService.Site">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.Site;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguageService.MainThreadId">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.MainThreadId&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguageService.Preferences">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.Preferences&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguageService.Name">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.Name&quot;]/*"/>
            <summary>Return the name of the language, such as "HTML" or "C++", and so on.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguageService.LastActiveTextView">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.LastActiveTextView&quot;]/*"/>
            <devdoc>
            Returns the last active IVsTextView that is managed by this language service.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguageService.IsActive">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.IsActive&quot;]/*"/>
            <devdoc>
            Return whether or not the last active text view is one of ours or not.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguageService.IsDebugging">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.IsDebugging&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguageService.IsParsing">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.OnParseComplete&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguageService.InvokeRequired">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;LanguageService.InvokeRequired&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.LanguageService.ParseWaitHandle">
            <summary>
            This class provides a special wrapper on WaitHandle that allows a caller
            to block on a parse request, while still pumping the RunTasks queue so they
            don't cause a deadlock.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.ParseResultHandler">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseResultHandler&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.ParseRequest">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ParseRequest.#ctor(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.ParseRequest&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ParseRequest.#ctor(System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,System.String,System.String,Microsoft.VisualStudio.Package.ParseReason,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.AuthoringSink,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.ParseRequest1&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.IsSynchronous">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.IsSynchronous;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Line">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.Line;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Col">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.Col;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.DirtySpan">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.DirtySpan;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.FileName">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.FileName;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Text">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.Text;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Reason">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.Reason;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.View">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.View;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Terminate">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.Terminate;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Callback">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.Callback;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Sink">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.Sink;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Scope">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.Scope;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.TokenInfo">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.TokenInfo;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Timestamp">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ParseRequest.Timestamp;&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.AuthoringScope">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringScope&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetDataTipText(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringScope.GetDataTipText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetDeclarations(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,Microsoft.VisualStudio.Package.ParseReason)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringScope.GetDeclarations&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetMethods(System.Int32,System.Int32,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringScope.GetMethods&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.Goto(Microsoft.VisualStudio.VSConstants.VSStd97CmdID,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringScope.Goto&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.Declarations">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.Declarations&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.Dispose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.GetCount">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.GetCount&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.GetDisplayText(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.GetDisplayText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.GetName(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.GetName&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.GetDescription(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.GetDescription&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.GetGlyph(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.GetGlyph&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.GetInitialExtent(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32@,System.Int32@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Declarations.GetInitialExtent&quot;]/*"/>
            <summary>Override this method if you want to customize how the initial extent
            is calculated.  If you do not implement this method the the Source object 
            GetWordExtent will be used by default.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.GetBestMatch(System.String,System.Int32@,System.Boolean@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.GetBestMatch&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.IsMatch(System.String,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.IsMatch&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.IsCommitChar(System.String,System.Int32,System.Char)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.IsCommitChar&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.OnCommit(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.Char,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.OnCommit&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Declarations.OnAutoComplete(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.Char,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.OnAutoComplete&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Declarations.LastBestMatch">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Declarations.LastBestMatch&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.Methods">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Methods.GetName(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.GetName&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Methods.GetCount">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.GetCount&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Methods.GetDescription(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.GetDescription&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Methods.GetType(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.GetType&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Methods.GetParameterCount(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.GetParameterCount&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Methods.GetParameterInfo(System.Int32,System.Int32,System.String@,System.String@,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.GetParameterInfo&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Methods.DefaultMethod">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.DefaultMethod&quot;]/*"/>
            <summary>Returns the method that should be selected first (based on what was found
            at parse time at the ParseRequest source location).</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Methods.OpenBracket">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.OpenBracket&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Methods.CloseBracket">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.CloseBracket&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Methods.Delimiter">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.Delimiter&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Methods.TypePrefixed">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.TypePrefixed&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Methods.TypePrefix">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.TypePrefix&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Methods.TypePostfix">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Methods.TypePostfix&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.AuthoringSink">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink&quot;]/*"/>
            <summary>
            AuthoringSink is used to gather information from the parser to help in the following:
            - error reporting
            - matching braces (ctrl-])
            - intellisense: Member Selection, CompleteWord, QuickInfo, MethodTips
            - management of the autos window in the debugger
            - breakpoint validation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.#ctor(Microsoft.VisualStudio.Package.ParseReason,System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.AuthoringSink&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.MatchPair(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.MatchPair&quot;]/*"/>
            <summary>
            Whenever a matching pair is parsed, e.g. '{' and '}', this method is called
            with the text span of both the left and right item. The
            information is used when a user types "ctrl-]" in VS
            to find a matching brace and when auto-highlight matching
            braces is enabled.  A priority can also be given so that multiple overlapping pairs 
            can be prioritized for brace matching.  The matching pair with the highest priority 
            (largest integer value) wins.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.MatchTriple(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.MatchTriple&quot;]/*"/>
            <summary>
            Matching tripples are used to highlight in bold a completed statement.  For example
            when you type the closing brace on a foreach statement VS highlights in bold the statement
            that was closed.  The first two source contexts are the beginning and ending of the statement that
            opens the block (for example, the span of the "foreach(...){" and the third source context
            is the closing brace for the block (e.g., the "}").  A priority can also be given so that
            multiple overlapping pairs can be prioritized for brace matching.  
            The matching pair with the highest priority  (largest integer value) wins.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.MatchMultiple(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.MatchMultiple&quot;]/*"/>
            <summary>
            Matching multiples are used to highlight in bold a completed statement.  For example
            a language can define a construct like if ... elif ... elif ... else ... endif
            A priority can also be given so that multiple overlapping pairs can be prioritized for 
            brace matching.
            The matching pair with the highest priority  (largest integer value) wins.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.StartName(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.StartName&quot;]/*"/>
            <summary>
            In support of Member Selection, CompleteWord, QuickInfo, 
            MethodTip, and Autos, the StartName and QualifyName methods
            are called.
            StartName is called for each identifier that is parsed (e.g. "Console")
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.QualifyName(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.QualifyName&quot;]/*"/>
            <summary>
            QualifyName is called for each qualification with both
            the text span of the selector (e.g. ".")  and the text span 
            of the name ("WriteLine").
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AutoExpression(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.AutoExpression&quot;]/*"/>
            <summary>
            AutoExpression is in support of IVsLanguageDebugInfo.GetProximityExpressions.
            It is called for each expression that might be interesting for
            a user in the "Auto Debugging" window. All names that are
            set using StartName and QualifyName are already automatically
            added to the "Auto" window! This means that AutoExpression
            is rarely used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.CodeSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.CodeSpan&quot;]/*"/>
            <summary>
            CodeSpan is in support of IVsLanguageDebugInfo.ValidateBreakpointLocation.
            It is called for each region that contains "executable" code.
            This is used to validate breakpoints. Comments are
            automatically taken care of based on TokenInfo returned from scanner. 
            Normally this method is called when a procedure is started/ended.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.StartParameters(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.StartParameters&quot;]/*"/>
            <summary>
            The StartParameters, Parameter and EndParameter methods are
            called in support of method tip intellisense (ECMD_PARAMINFO).
            [StartParameters] is called when the parameters of a method
            are started, ie. "(".
            [Parameter] is called on the start of a new parameter, ie. ",".
            [EndParameter] is called on the end of the paramters, ie. ")".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.NextParameter(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.NextParameter&quot;]/*"/>
            <summary>
            NextParameter is called after StartParameters on the start of each new parameter, ie. ",".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.EndParameters(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.EndParameters&quot;]/*"/>
            <summary>
            EndParameter is called on the end of the paramters, ie. ")".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AddError(System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.Package.Severity)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.AddTask&quot;]/*"/>
            <summary>
            Add an error message. This method also filters out duplicates so you only
            see the unique errors in the error list window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AddHiddenRegion(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.AddHiddenRegion&quot;]/*"/>
            <summary>
            This is in support of outlining.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AddHiddenRegion(Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.AddHiddenRegion&quot;]/*"/>
            <summary>
            AddHiddenRegion calls this for you, you can call it directly or override it
            to modify the default behavior.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.Line">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.Line&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.Column">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.Column&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.Reason">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.Reason&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.FoundMatchingBrace">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.FoundMatchingBrace&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.ProcessHiddenRegions">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.UpdateHiddenRegions&quot;]/*"/>
            <summary>Determines whether or not hidden regions should be updated
            or not based on the calls to AddHiddenRegion.  Default is false.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.BraceMatching">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.BraceMatching&quot;]/*"/>
            <summary>Use this property to find if your parser should call MatchPair or MatchTriple</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.FindNames">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.FindNames&quot;]/*"/>
            <summary>Use this property to find if your parser should call StartName or QualifyName</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.MethodParameters">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.MethodParameters&quot;]/*"/>
            <summary>Use this property to find if your parser should call StartParameters, NextParameter or EndParameters</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.HiddenRegions">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;AuthoringSink.HiddenRegions&quot;]/*"/>
            <summary>Use this property to find if your parser should call AddHiddenRegion</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.IndentingStyle">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;IndentingStyle&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.IndentingStyle.None">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;IndentingStyle.None&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.IndentingStyle.Block">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;IndentingStyle.Block&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.IndentingStyle.Smart">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;IndentingStyle.Smart&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.LanguagePreferences">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences&quot;]/*"/>
            <summary>
            LanguagePreferences encapsulates the standard General and Tab settings for a language service
            and provides a way of getting and setting the values.  It is expected that you
            will have one global LanguagePreferences created by your package.  The General and Tabs
            settings are automatically persisted in .vssettings files by the core editor package.
            All you need to do is register your language under AutomationProperties/TextEditor
            and specify:
            <code>
             YourLanguage = s '%YourLocalizedName%'
             {
                val Name = s 'YourLanguage'
                val Package = s '{F5E7E720-1401-11D1-883B-0000F87579D2}'
                val ProfileSave = d 1
                val ResourcePackage = s '%YourPackage%'
             }
            </code>
            Therefore this class hides all it's properties from user setting persistence using
            DesignerSerializationVisibility.Hidden.  This is so that if you give this object
            to the Package.ExportSettings method as the AutomationObject then it will only
            write out your new settings which is what you want, otherwise the General and Tab
            settings will appear in two places in the .vsssettings file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.#ctor(System.IServiceProvider,System.Guid,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.LanguagePreferences&quot;]/*"/>
            <summary>
            Gets the language preferences.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\Preferences.uex" path="docs/doc[@for=&quot;LanguagePreferences.LanguagePreferences1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetSite">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.Site;&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Init">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.Init&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.InitUserPreferences(Microsoft.Win32.RegistryKey,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.InitUserPreferences&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetIntegerValue(Microsoft.Win32.RegistryKey,System.String,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.GetIntegerValue&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetBooleanValue(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.GetBooleanValue&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.InitMachinePreferences(Microsoft.Win32.RegistryKey,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.InitMachinePreferences&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.Dispose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetLanguagePreferences">
            <!-- Failed to insert some or all of included XML --><include file="doc\Preferences.uex" path="docs/doc[@for=&quot;LanguagePreferences.GetLanguagePrefs&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Apply">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.Apply&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnRegisterMarkerType(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Preferences.uex" path="docs/doc[@for=&quot;LanguagePreferences.OnRegisterMarkerType&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnRegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Preferences.uex" path="docs/doc[@for=&quot;LanguagePreferences.OnRegisterView&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnUnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Preferences.uex" path="docs/doc[@for=&quot;LanguagePreferences.OnUnregisterView&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnReplaceAllInFilesBegin">
            <!-- Failed to insert some or all of included XML --><include file="doc\Preferences.uex" path="docs/doc[@for=&quot;LanguagePreferences.OnReplaceAllInFilesBegin&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnReplaceAllInFilesEnd">
            <!-- Failed to insert some or all of included XML --><include file="doc\Preferences.uex" path="docs/doc[@for=&quot;LanguagePreferences.OnReplaceAllInFilesEnd&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnUserPreferencesChanged2(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\Preferences.uex" path="docs/doc[@for=&quot;LanguagePreferences.OnUserPreferencesChanged2&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.LanguageName">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.LanguageName;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.Site">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.Site;&quot;]/*"/>
            <summary>
            This property is not public for a reason. If it were public it would
            get called during LoadSettingsFromStorage which will break it.  
            Instead use GetSite().
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableCodeSense">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.EnableCodeSense;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableMatchBraces">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.EnableMatchBraces;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableQuickInfo">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.EnableQuickInfo;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableShowMatchingBrace">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.EnableShowMatchingBrace;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableMatchBracesAtCaret">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.EnableMatchBracesAtCaret;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.MaxErrorMessages">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.MaxErrorMessages;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.CodeSenseDelay">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.CodeSenseDelay;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableAsyncCompletion">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.EnableAsyncCompletion;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableFormatSelection">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.EnableFormatSelection;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableCommenting">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.EnableCommenting;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.MaxRegionTime">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.MaxRegionTime;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.HighlightMatchingBraceFlags">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.HighlightMatchingBraceFlags;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.AutoListMembers">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.AutoListMembers&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.HideAdvancedMembers">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.HideAdvancedMembers&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.ParameterInformation">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.ParameterInformation&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.VirtualSpace">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.VirtualSpace&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.WordWrap">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.WordWrap&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.WordWrapGlyphs">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.WordWrapGlyphs&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.CutCopyBlankLines">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.CutCopyBlankLines&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.LineNumbers">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.LineNumbers&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableLeftClickForURLs">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.EnableLeftClickForURLs&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.IndentStyle">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.Indenting&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.TabSize">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.TabSize&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.IndentSize">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.IndentSize&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.InsertTabs">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.InsertSpaces&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.ShowNavigationBar">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.ShowNavigationBar&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.AutoOutlining">
            <!-- Failed to insert some or all of included XML --><include file="doc\PropertySheet.uex" path="docs/doc[@for=&quot;LanguagePreferences.EnableAutoOutlining&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSCTX_INPROC_SERVER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CLSCTX_INPROC_SERVER&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.S_FALSE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.S_OK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDOK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDCANCEL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDABORT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDRETRY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDIGNORE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDYES">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDNO">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDCLOSE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDHELP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDTRYAGAIN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDCONTINUE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ILD_NORMAL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ILD_TRANSPARENT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ILD_MASK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ILD_ROP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECMDERR_E_NOTSUPPORTED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECMDERR_E_UNKNOWNGROUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UNDO_E_CLIENTABORT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_OUTOFMEMORY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_INVALIDARG">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_FAIL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_NOINTERFACE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_POINTER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_NOTIMPL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_UNEXPECTED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_HANDLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_ABORT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_ACCESSDENIED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_PENDING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_UNSUPPORTEDFORMAT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_INCOMPATIBLEDOCDATA">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_PACKAGENOTLOADED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_PROJECTNOTLOADED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_SOLUTIONNOTOPEN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_SOLUTIONALREADYOPEN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_PROJECTMIGRATIONFAILED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_WIZARDBACKBUTTONPRESS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_S_PROJECTFORWARDED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_S_TBXMARKER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECLOSE_SAVEIFDIRTY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLECLOSE_SAVEIFDIRTY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECLOSE_NOSAVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLECLOSE_SAVEIFDIRTY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECLOSE_PROMPTSAVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLECLOSE_SAVEIFDIRTY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_PRIMARY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_SHOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_OPEN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_HIDE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_UIACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_INPLACEACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_DISCARDUNDOSTATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_PROPERTIES">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_OLEVERB">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_ADVF">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_ENUM_NOMORE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_ADVISENOTSUPPORTED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_NOCONNECTION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_NOTRUNNING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_NOCACHE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_BLANK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_CLASSDIFF">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_CANT_GETMONIKER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_CANT_BINDTOSOURCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_STATIC">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_PROMPTSAVECANCELLED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_INVALIDRECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_WRONGCOMPOBJ">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_INVALIDHWND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_NOT_INPLACEACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_CANTCONVERT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_NOSTORAGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_UNKNOWNINTERFACE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_MEMBERNOTFOUND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_PARAMNOTFOUND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_TYPEMISMATCH">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_UNKNOWNNAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_NONAMEDARGS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_BADVARTYPE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_EXCEPTION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_OVERFLOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_BADINDEX">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_UNKNOWNLCID">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_ARRAYISLOCKED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_BADPARAMCOUNT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_PARAMNOTOPTIONAL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_BADCALLEE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_NOTACOLLECTION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_DIVBYZERO">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_BUFFERTOOSMALL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSITEMID_NIL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VSITEMID_NIL&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSITEMID_ROOT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VSITEMID_NIL&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSITEMID_SELECTION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VSITEMID_NIL&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ALL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.ALL&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SELECTED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.ALL&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UndoManager">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WindowFrame">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DocumentFrame">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StartupProject">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PropertyBrowserSID">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UserContext">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ROSTATUS_NotReadOnly">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.ROSTATUS_NotReadOnly&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ROSTATUS_ReadOnly">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.ROSTATUS_NotReadOnly&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ROSTATUS_Unknown">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.ROSTATUS_NotReadOnly&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IEI_DoNotLoadDocData">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.IEI_DoNotLoadDocData&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CB_SETDROPPEDWIDTH">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GWL_STYLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GWL_EXSTYLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DWL_MSGRESULT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SW_SHOWNORMAL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.HTMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_POPUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_CHILD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_MINIMIZE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_VISIBLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_DISABLED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_CLIPSIBLINGS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_CLIPCHILDREN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_MAXIMIZE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_CAPTION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_BORDER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_DLGFRAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_VSCROLL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_HSCROLL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_SYSMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_THICKFRAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_TABSTOP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_MINIMIZEBOX">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_MAXIMIZEBOX">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_DLGMODALFRAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_MDICHILD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_TOOLWINDOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_CLIENTEDGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_CONTEXTHELP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_RIGHT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_LEFT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_RTLREADING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_LEFTSCROLLBAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_CONTROLPARENT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_STATICEDGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_APPWINDOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_LAYERED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_TOPMOST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_NOPARENTNOTIFY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LVM_SETEXTENDEDLISTVIEWSTYLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LVS_EX_LABELTIP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WH_JOURNALPLAYBACK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WH_GETMESSAGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WH_MOUSE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WSF_VISIBLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NULL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CREATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DELETEITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DESTROY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SIZE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WA_INACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WA_ACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WA_CLICKACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETFOCUS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_KILLFOCUS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ENABLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETREDRAW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETTEXT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETTEXT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETTEXTLENGTH">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PAINT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CLOSE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUERYENDSESSION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUIT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUERYOPEN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ERASEBKGND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSCOLORCHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ENDSESSION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SHOWWINDOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_WININICHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETTINGCHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DEVMODECHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ACTIVATEAPP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_FONTCHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_TIMECHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CANCELMODE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETCURSOR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSEACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHILDACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUEUESYNC">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETMINMAXINFO">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PAINTICON">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ICONERASEBKGND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NEXTDLGCTL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SPOOLERSTATUS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DRAWITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MEASUREITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_VKEYTOITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHARTOITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETFONT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETFONT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETHOTKEY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETHOTKEY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUERYDRAGICON">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COMPAREITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETOBJECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COMPACTING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COMMNOTIFY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_WINDOWPOSCHANGING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_WINDOWPOSCHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_POWER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COPYDATA">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CANCELJOURNAL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NOTIFY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_INPUTLANGCHANGEREQUEST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_INPUTLANGCHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_TCARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HELP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_USERCHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NOTIFYFORMAT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CONTEXTMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_STYLECHANGING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_STYLECHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DISPLAYCHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETICON">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETICON">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCCREATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCDESTROY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCCALCSIZE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCHITTEST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCPAINT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETDLGCODE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCMOUSEMOVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCLBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCLBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCLBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCRBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCRBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCRBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCMBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCMBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCMBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCXBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCXBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCXBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_KEYFIRST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_KEYDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_KEYUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DEADCHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLOR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSKEYDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSKEYUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSCHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSDEADCHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_KEYLAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_STARTCOMPOSITION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_ENDCOMPOSITION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_COMPOSITION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_KEYLAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_INITDIALOG">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COMMAND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSCOMMAND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_TIMER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HSCROLL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_VSCROLL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_INITMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_INITMENUPOPUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MENUSELECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MENUCHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ENTERIDLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHANGEUISTATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_UPDATEUISTATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUERYUISTATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORMSGBOX">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLOREDIT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORLISTBOX">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORBTN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORDLG">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORSCROLLBAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORSTATIC">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSEFIRST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSEMOVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_LBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_LBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_LBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_RBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_RBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_RBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_XBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_XBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_XBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSEWHEEL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSELAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PARENTNOTIFY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ENTERMENULOOP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_EXITMENULOOP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NEXTMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SIZING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CAPTURECHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOVING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_POWERBROADCAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DEVICECHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_SETCONTEXT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_NOTIFY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_CONTROL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_COMPOSITIONFULL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_SELECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_CHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_KEYDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_KEYUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDICREATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIDESTROY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIRESTORE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDINEXT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIMAXIMIZE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDITILE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDICASCADE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIICONARRANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIGETACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDISETMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ENTERSIZEMOVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_EXITSIZEMOVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DROPFILES">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIREFRESHMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSEHOVER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSELEAVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CUT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COPY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PASTE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CLEAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_UNDO">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_RENDERFORMAT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_RENDERALLFORMATS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DESTROYCLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DRAWCLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PAINTCLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_VSCROLLCLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SIZECLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ASKCBFORMATNAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHANGECBCHAIN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HSCROLLCLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUERYNEWPALETTE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PALETTEISCHANGING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PALETTECHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HOTKEY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PRINT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PRINTCLIENT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HANDHELDFIRST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HANDHELDLAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_AFXFIRST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_AFXLAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PENWINFIRST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PENWINLAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_APP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_USER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_REFLECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_OVERLAPPED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WPF_SETMINPOSITION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHOOSEFONT_GETLOGFONT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WHEEL_DELTA">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DWLP_MSGRESULT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSNRET_NOERROR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSNRET_INVALID">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSNRET_INVALID_NOCHANGEPAGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSN_APPLY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.PSN_APPLY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSN_KILLACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.PSN_APPLY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSN_RESET">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.PSN_APPLY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSN_SETACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.PSN_APPLY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GMEM_MOVEABLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GMEM_MOVEABLE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GMEM_ZEROINIT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GMEM_MOVEABLE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GMEM_DDESHARE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GMEM_MOVEABLE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SWP_NOACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SWP_NOACTIVATE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SWP_NOZORDER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SWP_NOACTIVATE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SWP_NOSIZE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SWP_NOACTIVATE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SWP_NOMOVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SWP_NOACTIVATE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SWP_FRAMECHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SWP_NOACTIVATE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.TVM_SETINSERTMARK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.TVM_SETINSERTMARK&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.TVM_GETEDITCONTROL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.TVM_SETINSERTMARK&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.FILE_ATTRIBUTE_READONLY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.FILE_ATTRIBUTE_READONLY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CEF_CLONEFILE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CEF_CLONEFILE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CEF_OPENFILE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CEF_CLONEFILE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CEF_SILENT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CEF_CLONEFILE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CEF_OPENASNEW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CEF_CLONEFILE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.cmdidToolsOptions">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.cmdidToolsOptions&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GWL_WNDPROC">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GWL_WNDPROC&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.InvalidIntPtr">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.InvalidIntPtr&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IID_IServiceProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.IID_IServiceProvider&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IID_IObjectWithSite">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.IID_IObjectWithSite&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IID_IUnknown">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.IID_IUnknown&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_PropertyBrowserToolWindow">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GUID_PropertyBrowserToolWindow&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VSStandardCommandSet97">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GUID_VSStandardCommandSet97&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_HtmDocData">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CLSID_HtmDocData&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_HtmedPackage">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CLSID_HtmedPackage&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_HtmlLanguageService">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CLSID_HtmlLanguageService&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_HtmlEditorFactory">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GUID_HtmlEditorFactory&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_TextEditorFactory">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GUID_TextEditorFactory&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_HTMEDAllowExistingDocData">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GUID_HTMEDAllowExistingDocData&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsEnvironmentPackage">
            <summary>GUID for the environment package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsNewProjectPseudoFolder">
            <summary>GUID for the "Visual Studio" pseudo folder in the registry.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_MiscellaneousFilesProject">
            <summary>GUID for the "Miscellaneous Files" project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_SolutionItemsProject">
            <summary>GUID for Solution Items project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SID_SVsGeneralOutputWindowPane">
            <summary>Pseudo service that returns a IID_IVsOutputWindowPane interface of the General output pane in the VS environment.
            Querying for this service will cause the General output pane to be created if it hasn't yet been created.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SID_SUIHostCommandDispatcher">
            <summary>
            SUIHostCommandDispatcher service returns an object that implements IOleCommandTarget.
            This object handles command routing for the Environment. Use this service if you need to
            route a command based on the current selection/state of the Environment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsUIHierarchyWindow">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_DefaultEditor">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_ExternalEditor">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_OutWindowGeneralPane">
            <summary>GUID of the general output pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.BuildOrder">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.BuildOrder&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.BuildOutput">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.BuildOutput&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DebugOutput">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.DebugOutput&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_ItemType_PhysicalFile">
            <summary>Physical file on disk or web (IVsProject::GetMkDocument returns a file path).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_ItemType_PhysicalFolder">
            <summary>Physical folder on disk or web (IVsProject::GetMkDocument returns a directory path).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_ItemType_VirtualFolder">
            <summary>Non-physical folder (folder is logical and not a physical file system directory).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_ItemType_SubProject">
            <summary>A nested hierarchy project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_SolutionBuilding">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_Debugging">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_Dragging">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_FullScreenMode">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_DesignMode">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_NoSolution">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_SolutionExists">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_EmptySolution">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_SolutionHasSingleProject">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_SolutionHasMultipleProjects">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_CodeWindow">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewAll">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewUserTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewShortcutTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewHTMLTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewCompilerTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewCommentTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewCurrentFileTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewCheckedTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewUncheckedTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsTaskList">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsTaskListPackage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SID_SVsToolboxActiveXDataProvider">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsDocOutlinePackage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsCfgProviderEventsHelper">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_COMPlusPage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_COMClassicPage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_SolutionPage">
            <summary></summary>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.Succeeded(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.Succeeded&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.Failed(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.Failed&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_Any">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_Any&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_Primary">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_Primary&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_Debugging">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_Debugging&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_Code">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_Code&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_Designer">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_Designer&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_TextView">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_TextView&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_UserChooseView">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_UserChooseView&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsUIHierarchyWindowCmds">
            <summary>Command Group GUID for commands that only apply to the UIHierarchyWindow.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IsSamePath(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.IsSamePath&quot;]/*"/>
            <devdoc>
            Please use this "approved" method to compare file names.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Places a message in the message queue associated with the thread that created the 
            specified window and then returns without waiting for the thread to process the message. 
            </summary>
            <param name="hwnd">Handle to the window whose window procedure is to receive the message.</param>
            <param name="msg">Specifies the message to be posted.</param>
            <param name="wparam">Specifies additional message-specific information.</param>
            <param name="lparam">Specifies additional message-specific information.</param>
            <returns>Nonzero indicates success. Zero indicates failure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GetWindowLong(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GetWindowLong&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.SetWindowLong(System.IntPtr,System.Int16,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SetWindowLong&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.SetParent(System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SetParent&quot;]/*"/>
            <summary>
            Changes the parent window of the specified child window.
            </summary>
            <param name="hWnd">Handle to the child window.</param>
            <param name="hWndParent">Handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.</param>
            <returns>A handle to the previous parent window indicates success. NULL indicates failure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.SetFocus(System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SetFocus&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GetClientRect(System.IntPtr,Microsoft.VisualStudio.NativeMethods.RECT@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GetClientRect&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IsSameComObject(System.Object,System.Object)">
            <summary>
            Compares two COM objects to see if they represent the same underlying object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.VSTASKBITMAP">
            <summary>
            Specifies options for a bitmap image associated with a task item.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds">
            <summary>
            The following commands are special commands that only apply to the UIHierarchyWindow.
            They are defined as part of the command group GUID: GUID_VsUIHierarchyWindowCmds.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_RightClick">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_DoubleClick">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_EnterKey">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_StartLabelEdit">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_CommitLabelEdit">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_CancelLabelEdit">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.VSSELELEMID">
            <summary>
            These element IDs are the only element IDs that can be used with the selection service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_UndoManager">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_WindowFrame">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_DocumentFrame">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_StartupProject">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_PropertyBrowserSID">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_UserContext">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_ResultList">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_LastWindowFrame">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.NMHDR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NMHDR&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.NMHDR.hwndFrom">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NMHDR.hwndFrom;&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.NMHDR.idFrom">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NMHDR.idFrom;&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.NMHDR.code">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NMHDR.code;&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.RECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;RECT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.RECT.left">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;RECT.left;&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.RECT.top">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;RECT.top;&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.RECT.right">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;RECT.right;&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.RECT.bottom">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;RECT.bottom;&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXT&quot;]/*"/>
            <devdoc>
            Helper class for setting the text parameters to OLECMDTEXT structures.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.OLECMDTEXTF">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXTF&quot;]/*"/>
            <summary>
            Flags for the OLE command text
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.OLECMDTEXTF.OLECMDTEXTF_NONE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXTF.OLECMDTEXTF_NONE&quot;]/*"/>
            <summary>No flag</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.OLECMDTEXTF.OLECMDTEXTF_NAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXTF.OLECMDTEXTF_NAME&quot;]/*"/>
            <summary>The name of the command is required.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.OLECMDTEXTF.OLECMDTEXTF_STATUS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXTF.OLECMDTEXTF_STATUS&quot;]/*"/>
            <summary>A description of the status is required.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.tagOLECMDF">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF&quot;]/*"/>
            <devdoc>
            OLECMDF enums for IOleCommandTarget
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.tagOLECMDF.OLECMDF_SUPPORTED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF.OLECMDF_SUPPORTED&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.tagOLECMDF.OLECMDF_ENABLED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF.OLECMDF_ENABLED&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.tagOLECMDF.OLECMDF_LATCHED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF.OLECMDF_LATCHED&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.tagOLECMDF.OLECMDF_NINCHED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF.OLECMDF_NINCHED&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.tagOLECMDF.OLECMDF_INVISIBLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF.OLECMDF_INVISIBLE&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.ConnectionPointCookie">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;ConnectionPointCookie&quot;]/*"/>
            <devdoc>
            Class that encapsulates a connection point cookie for COM event handling.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.ConnectionPointCookie.#ctor(System.Object,System.Object,System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;ConnectionPointCookie.ConnectionPointCookie&quot;]/*"/>
            <devdoc>
            Creates a connection point to of the given interface type.
            which will call on a managed code sink that implements that interface.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.ConnectionPointCookie.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.Finalize1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.ConnectionPointCookie.#ctor(System.Object,System.Object,System.Type,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;ConnectionPointCookie.ConnectionPointCookie1&quot;]/*"/>
            <devdoc>
            Creates a connection point to of the given interface type.
            which will call on a managed code sink that implements that interface.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.IEventHandler">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IEventHandler&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IEventHandler.AddHandler(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IEventHandler.AddHandler&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IEventHandler.RemoveHandler(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IEventHandler.RemoveHandler&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IEventHandler.GetHandledEvents">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IEventHandler.GetHandledEvents&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IEventHandler.HandlesEvent(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IEventHandler.HandlesEvent&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.IParameterKind">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IParameterKind.SetParameterPassingMode(Microsoft.VisualStudio.NativeMethods.PARAMETER_PASSING_MODE)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind.SetParameterPassingMode&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IParameterKind.SetParameterArrayDimensions(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind.SetParameterArrayDimensions&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IParameterKind.GetParameterArrayCount">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind.GetParameterArrayCount&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IParameterKind.GetParameterArrayDimensions(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind.GetParameterArrayDimensions&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IParameterKind.GetParameterPassingMode">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind.GetParameterPassingMode&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.PARAMETER_PASSING_MODE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;PARAMETER_PASSING_MODE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PARAMETER_PASSING_MODE.cmParameterTypeIn">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;PARAMETER_PASSING_MODE.cmParameterTypeIn&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PARAMETER_PASSING_MODE.cmParameterTypeOut">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;PARAMETER_PASSING_MODE.cmParameterTypeOut&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PARAMETER_PASSING_MODE.cmParameterTypeInOut">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;PARAMETER_PASSING_MODE.cmParameterTypeInOut&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.IMethodXML">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IMethodXML&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IMethodXML.GetXML(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IMethodXML.GetXML&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IMethodXML.SetXML(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IMethodXML.SetXML&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IMethodXML.GetBodyPoint(System.Object@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IMethodXML.GetBodyPoint&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.IVBFileCodeModelEvents">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IVBFileCodeModelEvents&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IVBFileCodeModelEvents.StartEdit">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IVBFileCodeModelEvents.StartEdit&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IVBFileCodeModelEvents.EndEdit">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IVBFileCodeModelEvents.EndEdit&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.ICodeClassBase">
            --------------------------------------------------------------------------
             ICodeClassBase:
            --------------------------------------------------------------------------
        </member>
        <member name="T:Microsoft.VisualStudio.Package.IScanner">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;IScanner&quot;]/*"/>
            <summary>
            Scans individual source lines and provides coloring and trigger information about tokens.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.IScanner.SetSource(System.String,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;IScanner.SetSource&quot;]/*"/>
            <summary>
            Used to (re)initialize the scanner before scanning a small portion of text, such as single source line for syntax coloring purposes
            </summary>
            <param name="source">The source text portion to be scanned</param>
            <param name="offset">The index of the first character to be scanned</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.IScanner.ScanTokenAndProvideInfoAboutIt(Microsoft.VisualStudio.Package.TokenInfo,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;IScanner.ScanTokenAndProvideInfoAboutIt&quot;]/*"/>
            <summary>
            Scan the next token and fill in syntax coloring details about it in tokenInfo.
            </summary>
            <param name="tokenInfo">Keeps information about token.</param>
            <param name="state">Keeps track of scanner state. In: state after last token. Out: state after current token.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.TokenColor">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenColor&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenColor.Text">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenColor.Text&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenColor.Keyword">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenColor.Keyword&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenColor.Comment">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenColor.Comment&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenColor.Identifier">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenColor.Identifier&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenColor.String">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenColor.String&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenColor.Number">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenColor.Number&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.TokenInfo">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenInfo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TokenInfo.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenInfo.TokenInfo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TokenInfo.#ctor(System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenType)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenInfo.TokenInfo1&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.TokenInfo.StartIndex">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenInfo.StartIndex;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.TokenInfo.EndIndex">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenInfo.EndIndex;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.TokenInfo.Color">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenInfo.Color;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.TokenInfo.Type">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenInfo.Type;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.TokenInfo.Trigger">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenInfo.Trigger;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.TokenInfo.Token">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenInfo.StartIndex;&quot;]/*"/>
            <summary>Language Specific</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.TokenTriggers">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenTriggers&quot;]/*"/>
            <summary>
            TokenTriggers:
            If a character has (a) trigger(s) associated with it, it may
            fire one or both of the following triggers:
            MemberSelect - a member selection tip window
            MatchBraces - highlight matching braces
            or the following trigger:
            MethodTip - a method tip window
                
            The following triggers exist for speed reasons: the (fast) lexer 
            determines when a (slow) parse might be needed. 
            The Trigger.MethodTip trigger is subdivided in 4 
            other triggers. It is the best to be as specific as possible;
            it is better to return Trigger.ParamStart than Trigger.Param
            (or Trigger.MethodTip) 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.None">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenTriggers.None&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.MemberSelect">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenTriggers.MemberSelect&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.MatchBraces">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenTriggers.MatchBraces&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.MethodTip">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenTriggers.MethodTip&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterStart">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenTriggers.ParamStart&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterNext">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenTriggers.ParamNext&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterEnd">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenTriggers.ParamEnd&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.Parameter">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenTriggers.Param&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.TokenType">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenType.Unknown">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType.Unknown&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenType.Text">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType.Text&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenType.Keyword">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType.Keyword&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenType.Identifier">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType.Identifier&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenType.String">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType.String&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenType.Literal">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType.Literal&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenType.Operator">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType.Operator&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenType.Delimiter">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType.Delimiter&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenType.WhiteSpace">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType.WhiteSpace&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenType.LineComment">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType.LineComment&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.TokenType.Comment">
            <!-- Failed to insert some or all of included XML --><include file="doc\Scanner.uex" path="docs/doc[@for=&quot;TokenType.Comment&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.Severity">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Severity&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Severity.Hint">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Severity.Hint&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Severity.Warning">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Severity.Warning&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Severity.Error">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Severity.Error&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Severity.Fatal">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Severity.Fatal&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.CommentInfo">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CommentInfo&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CommentInfo.LineStart">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CommentInfo.LineStart;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CommentInfo.BlockStart">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CommentInfo.BlockStart;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CommentInfo.BlockEnd">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CommentInfo.BlockEnd;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CommentInfo.UseLineComments">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CommentInfo.UseLineComments;&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.Source">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source&quot;]/*"/>
            <summary>
            Source represents one source file and manages the parsing and intellisense on this file
            and keeping things like the drop down combos in sync with the source and so on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.Package.Colorizer)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.Source&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.Finalize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.RegisterTextBufferEventHandlers(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.RegisterTextBufferEventHandlers&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetColorizer">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetColorizer&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.Recolorize(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.Recolorize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.CreateAuthoringSink(Microsoft.VisualStudio.Package.ParseReason,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.CreateAuthoringSink&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.CreateCompletionSet">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.CreateCompletionSet&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.CreateMethodData">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetMethodData&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetTaskProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetTaskProvider&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetExpansionProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetExpansionProvider&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.DismissCompletor">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.DismissCompletor&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.Open">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.Open&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.Close&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Source.Dispose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetTextLines">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetTextLines&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetLineLength(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetLineLength&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetLineCount">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetLineCount&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetPositionOfLineIndex(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetPositionOfLineIndex&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetLineIndexOfPosition&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetLine(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetLine&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetText">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetText1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetText(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetText2&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetTextUpToLine(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetTextUpToLine&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.SetText(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.SetText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.SetText(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.SetText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.SetText(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.SetText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetUserData(System.Guid@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetUserData&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.SetUserData(System.Guid@,System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.SetUserData&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.ReformatSpan(Microsoft.VisualStudio.Package.EditArray,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ViewFilter.Reformat&quot;]/*"/>
            <summary>
            This method formats the given span using the given EditArray. The default behavior does nothing.  
            So you need to override this method if you want formatting to work.  
            An empty input span means reformat the entire document.
            You also need to turn on Preferences.EnableFormatSelection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetCommentFormat">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Source.GetCommentFormat&quot;]/*"/>
            <summary>Override this method if you want to provide different comment dilimiters.
            You can turn off commenting by setting Preferences.EnableCommenting to false.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.CommentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;Source.CommentSpan&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.CommentLines(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;Source.CommentBlock&quot;]/*"/>
            <summary>
            Called from Comment Selection. Default behavior is to insert line style comments
            at beginning and end of selection. Override to add custome behavior.
            </summary>
            <param name="span"></param>
            <param name="lineComment"></param>
            <returns>The final span of the commented lines including the comment delimiters</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.CommentBlock(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;Source.CommentBlock&quot;]/*"/>
            <summary>
            Called from Comment Selection. Default behavior is to insert block style comments
            at beginning and end of selection. Override to add custome behavior.
            </summary>
            <returns>The final span of the commented block including the comment delimiters</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.UncommentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <summary>
            Uncomments the given span of text and returns the span of the uncommented block.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.UncommentLines(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.UncommentLines&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.UncommentBlock(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.UncommentBlock&quot;]/*"/>
            <summary>Uncomments the given block and returns the span of the uncommented block</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.OnChangeLineText(Microsoft.VisualStudio.TextManager.Interop.TextLineChange[],System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.OnChangeLineText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.OnChangeLineAttributes(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.OnChangeLineAttributes&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetFilePath">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetFilePath&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.ScanToNonWhitespaceChar(System.Int32)">
            <summary>
            Return the column position of 1st non whitespace character on line
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.ColumnToVisiblePosition(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.ColumnToVisiblePosition&quot;]/*"/>
            <summary>
            Return the column position that the user will see given the current
            tab size setting.  This is the opposite of VisiblePositionToColumn
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.VisiblePositionToColumn(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.VisiblePositionToColumn&quot;]/*"/>
            <summary>
            Convert a user visible position back to char position in the buffer.
            This is the opposite of ColumnToVisiblePosition. In this case the 
            visible position was off the end of the line, it just returns the 
            column position at the end of the line.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetDocumentSpan">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetDocumentSpan&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.CreateErrorTaskItem(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String,System.String,Microsoft.VisualStudio.Shell.TaskPriority,Microsoft.VisualStudio.Shell.TaskCategory,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.Shell.TaskErrorCategory)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.CreateErrorTaskItem&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.CreateErrorTaskItem(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.CreateErrorTaskItem2&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetNewLine(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetNewLine&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.NormalizeNewlines(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.NormalizeNewlines&quot;]/*"/>
            <summary>Convert the newlines in the given input string to the style of newline
            provided in the second argument.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetTokenInfoAt(Microsoft.VisualStudio.Package.TokenInfo[],System.Int32,Microsoft.VisualStudio.Package.TokenInfo@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetTokenInfoAt&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.OnIdle(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.OnIdle&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.BeginParse">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.BeginParse&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetTokenInfo(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetTokenInfo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.OnCommand(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.VSConstants.VSStd2KCmdID,System.Char)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.OnCommand&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetWordExtent(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS,System.Int32@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetWordExtent&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.TrimSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.TrimSpan(ref span);&quot;]/*"/>
            Trim whitespace from the beginning and ending of the given span.
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.Completion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.TokenInfo,Microsoft.VisualStudio.Package.ParseReason)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.Completion&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.MethodTip(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.MethodTip&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.MatchBraces(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.MatchBraces&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetPairExtents(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetPairExtents&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.BeginParse(System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,Microsoft.VisualStudio.Package.ParseReason,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.ParseResultHandler)">
            <summary>
            BeginParse is called when this Source object needs to be parsed.  The default implementation
            uses the LanguageService background parse thread to do the work.
            </summary>
            <param name="line">The line position where intellisense is being requested (if any)</param>
            <param name="idx">The column position where intellisense is being requested</param>
            <param name="info">The token at the line/col position or an empty token</param>
            <param name="reason">The reason for this parse request</param>
            <param name="view">The IVsTextView or null if the view is not known.</param>
            <param name="callback">A callback delegate to call when the parse is completed.  If a callback 
            delegate is provided then the ParseRequest will be processed asynchronously on a background thread 
            and this method will return immediately, then the callback will be called on the UI thread when the 
            parse is completed.  The completed ParseRequest will then contain an AuthoringScope object which can 
            be used to complete intellisense requests.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.RemoveTask(Microsoft.VisualStudio.Package.DocumentTask)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.RemoveTask&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.RemoveHiddenRegions">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.RemoveHiddenRegions&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.ProcessHiddenRegions(System.Collections.ArrayList)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.ProcessHiddenRegions&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetHiddenTextSession">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetHiddenTextSession&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.OnHiddenRegionChange(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.OnHiddenRegionChange&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.String[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetTipText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.Int32,System.String[],System.UInt32[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.GetMarkerCommandInfo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.ExecMarkerCommand&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.MakeBaseSpanVisible(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.MakeBaseSpanVisible&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.OnBeforeSessionEnd">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.OnBeforeSessionEnd&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Source.OnUserDataChange(System.Guid@,System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.OnUserDataChange&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Source.CompletedFirstParse">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.CompletedFirstParse&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Source.ColorState">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.ColorState;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Source.LanguageService">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.LanguageService&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Source.CompletionSet">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.CompletionSet&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Source.IsCompletorActive">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.IsCompletorActive&quot;]/*"/>
            <devdiv>returns true if either CompletionSet or MethodData is being displayed.</devdiv>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Source.IsClosed">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.IsClosed&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Source.LastParseTime">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.LastParseTime&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Source.IsDirty">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.Dirty&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Source.ChangeCount">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.ChangeCount&quot;]/*"/>
            Returns a number indicating whether the buffer has changed since you last called.
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Source.DirtySpan">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.DirtySpan&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Source.OutliningEnabled">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Source.OutliningEnabled&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.Completor">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Completor.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.Completor&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Completor.RefreshLine">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.RefreshLine&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Completor.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.Dispose&quot;]/*"/>
            <summary>This method calls Apply() if you have not already done it.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Completor.Apply">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.Apply&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Completor.TypeChar(System.Char)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.TypeChar&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Completor.TypeChars(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.TypeChars&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Completor.TypeLeft(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.TypeLeft&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Completor.TypeRight(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.TypeRight&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Completor.TypeBackspace(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.TypeBackspace&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Completor.TypeDelete(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.TypeDelete&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Completor.IsExpansionActive">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.IsExpansionActive&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Completor.AtEndOfLine">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;Completor.AtEndOfLine&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.FlushEditActions">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompoundActionBase.FlushEditActions&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompoundActionBase.Dispose&quot;]/*"/>
            <summary>This method calls Close if you have not already called Close</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompoundActionBase.Close&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.Abort">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompoundActionBase.Abort&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.CompoundAction">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompoundAction&quot;]/*"/>
            <summary>
            This class can be used in a using statement to open and close a compound edit action
            via IVsCompoundAction interface.  Be sure to call Close() at the end of your using
            statement, otherwise Dispose will call Abort.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompoundAction.#ctor(Microsoft.VisualStudio.Package.Source,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompoundAction.CompoundAction2&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompoundAction.FlushEditActions">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompoundAction.FlushEditActions&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompoundAction.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompoundAction.Close&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompoundAction.Abort">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompoundAction.Abort&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.CompoundViewAction">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompoundAction&quot;]/*"/>
            <summary>
            This class can be used in a using statement to open and close a compound edit action
            via IVsCompoundAction interface from an IVsTextView.  This allows the view to optimize 
            it's updates based on edits you are making on the buffer, so it's the preferred way of
            doing things if you have access to the IVsTextView.  If not, use CompoundAction.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompoundViewAction.#ctor(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompoundViewAction.CompoundViewAction&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.CompletionSet">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.#ctor(System.Windows.Forms.ImageList,Microsoft.VisualStudio.Package.Source)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.CompletionSet&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Init(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Declarations,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.Init&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.Dispose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.Close&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.OnAutoComplete">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.OnAutoComplete&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetImageList(System.IntPtr@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.GetImageList&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetFlags">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.GetFlags&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetCount">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.GetCount&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetDisplayText(System.Int32,System.String@,System.Int32[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.GetDisplayText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetDescriptionText(System.Int32,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.GetDescriptionText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetInitialExtent(System.Int32@,System.Int32@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.GetInitialExtent&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetBestMatch(System.String,System.Int32,System.Int32@,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.GetBestMatch&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.OnCommit(System.String,System.Int32,System.Int32,System.UInt16,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.OnCommit&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Dismiss">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.Dismiss&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CompletionSet.IsDisplayed">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.IsDisplayed&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CompletionSet.IsCommitted">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.IsCommitted&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CompletionSet.OnCommitText">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.OnCommitText&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.CompletionSet.Declarations">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;CompletionSet.Declarations&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.MethodData">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.#ctor(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.MethodData&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.Refresh(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Methods,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.Refresh&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.AdjustCurrentParameter(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.AdjustCurrentParameter&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.Close&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.Dismiss">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.Dismiss&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.Dispose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.GetOverloadCount">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.GetOverloadCount&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.GetCurMethod">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.GetCurMethod&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.NextMethod">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.NextMethod&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.PrevMethod">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.PrevMethod&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.GetParameterCount(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.GetParameterCount&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.GetCurrentParameter(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.GetCurrentParameter&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.OnDismiss">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.OnDismiss&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.UpdateView">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.UpdateView&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.GetContextStream(System.Int32@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.GetContextStream&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.GetMethodText(System.Int32,Microsoft.VisualStudio.TextManager.Interop.MethodTextType)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.GetMethodText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.MethodData.GetParameterText(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.ParameterTextType)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.GetParameterText&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.MethodData.Provider">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.Provider;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.MethodData.MethodTipWindow">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.MethodTipWindow;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.MethodData.Methods">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.Methods;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.MethodData.TextView">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.TextView;&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.MethodData.IsDisplayed">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;MethodData.IsDisplayed&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.CompoundActionFactory">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;CompoundActionHelpers&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.TextSpanHelper">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsAfterStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.StartsAfterStartOf&quot;]/*"/>
            <devdoc>Returns true if the first span starts after the start of the second span.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.StartsAfterEndOf&quot;]/*"/>
            <devdoc>Returns true if the first span starts after the end of the second span.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.StartsBeforeStartOf&quot;]/*"/>
            <devdoc>Returns true if the first span starts before the start of the second span.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsBeforeEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.StartsBeforeEndOf&quot;]/*"/>
            <devdoc>Returns true if the first span starts before the end of the second span.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.EndsBeforeStartOf&quot;]/*"/>
            <devdoc>Returns true if the first span ends before the start of the second span.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsBeforeEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.EndsBeforeEndOf&quot;]/*"/>
            <devdoc>Returns true if the first span starts before the end of the second span.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsAfterStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.EndsAfterStartOf&quot;]/*"/>
            <devdoc>Returns true if the first span ends after the start of the second span.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.EndsBeforeEndOf&quot;]/*"/>
            <devdoc>Returns true if the first span starts after the end of the second span.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Merge(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.Merge&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsPositive(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.IsPositive&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Clear(Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.ClearTextSpan&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsEmpty(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.IsEmpty&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.MakePositive(Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.MakePositive&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Normalize(Microsoft.VisualStudio.TextManager.Interop.TextSpan@,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.TextSpanNormalize&quot;]/*"/>
            <devdoc>Pins the text span to valid line bounds returned from IVsTextLines.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsSameSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.IsSameSpan&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.IsBeforeStartOf&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.IsAfterEndOf&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ContainsInclusive(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.ContainsInclusive&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ContainsExclusive(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.ContainsExclusive&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsEmbedded(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.IsEmbedded&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Intersects(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.Intersects&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ValidSpan(Microsoft.VisualStudio.Package.Source,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.ValidSpan&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ValidCoord(Microsoft.VisualStudio.Package.Source,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TextSpanHelper.ValidCoord&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.Variant">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Variant.ToVariant(System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.ToVariant&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.Variant.ToChar">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.ToChar&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Variant.Vt">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.Vt&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.Variant.Value">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.Value&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.Variant.VariantType">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_EMPTY">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_EMPTY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_NULL">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_NULL&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I2">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_I2&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I4">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_I4&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_R4">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_R4&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_R8">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_R8&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CY">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_CY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_DATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_DATE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BSTR">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_BSTR&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_DISPATCH">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_DISPATCH&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ERROR">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_ERROR&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BOOL">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_BOOL&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_VARIANT">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_VARIANT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UNKNOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_UNKNOWN&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_DECIMAL">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_DECIMAL&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I1">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_I1&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI1">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_UI1&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI2">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_UI2&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI4">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_UI4&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I8">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_I8&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI8">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_UI8&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_INT">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_INT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UINT">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_UINT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_VOID">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_VOID&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_HRESULT">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_HRESULT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_PTR">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_PTR&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_SAFEARRAY">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_SAFEARRAY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CARRAY">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_CARRAY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_USERDEFINED">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_USERDEFINED&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_LPSTR">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_LPSTR&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_LPWSTR">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_LPWSTR&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_FILETIME">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_FILETIME&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BLOB">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_BLOB&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STREAM">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_STREAM&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STORAGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_STORAGE&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STREAMED_OBJECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_STREAMED_OBJECT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STORED_OBJECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_STORED_OBJECT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BLOB_OBJECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_BLOB_OBJECT&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CF">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_CF&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CLSID">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_CLSID&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_VECTOR">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_VECTOR&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ARRAY">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_ARRAY&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BYREF">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_BYREF&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_RESERVED">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_RESERVED&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ILLEGAL">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_ILLEGAL&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ILLEGALMASKED">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_ILLEGALMASKED&quot;]/*"/>
        </member>
        <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_TYPEMASK">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;Variant.VariantType.VT_TYPEMASK&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.TimeUtilities">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;TimeUtilities&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.FilePathUtilities">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;FilePathUtilities&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.FilePathUtilities.GetFilePath(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;FilePathUtilities.GetFilePath&quot;]/*"/>
            <summary>
            Get path for text buffer.
            </summary>
            <param name="textLines">The text buffer.</param>
            <returns>The path of the text buffer.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.FilePathUtilities.GetFilePath(System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;FilePathUtilities.GetFilePath&quot;]/*"/>
            <summary>
            Get file path for an object that is implementing IVsUserData.
            </summary>
            <param name="unknown">Reference to an IUnknown interface.</param>
            <returns>The file path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.FilePathUtilities.GetFileExtension(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\HierarchyItem.uex" path="docs/doc[@for=&quot;VsShell.GetFilePath&quot;]/*"/>
            <summary>This method returns the file extension in lower case, including the "."
            and trims any blanks or null characters from the string.  Null's can creep in via
            interop if we get a badly formed BSTR</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.ViewFilter">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter&quot;]/*"/>
            <summary>
            ViewFilter provides a default implementation of IVsTextViewFilter providing a
            handling of the following VS commands:
            
            VsCommands.GotoDefn
            VsCommands.GotoDecl
            VsCommands.GotoRef
            VsCommands2K.COMMENT_BLOCK
            VsCommands2K.UNCOMMENT_BLOCK
            VsCommands2K.SHOWMEMBERLIST
            VsCommands2K.COMPLETEWORD
            VsCommands2K.PARAMINFO
            VsCommands2K.QUICKINFO
            VsCommands2K.OUTLN_STOP_HIDING_ALL
            VsCommands2K.OUTLN_START_AUTOHIDING
            VsCommands2K.SHOWCONTEXTMENU
            
            Most of the work is delegated to the Source object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.#ctor(Microsoft.VisualStudio.Package.CodeWindowManager,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.ViewFilter&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData.Finalize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.Dispose&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.Close&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.RegisterTextViewEventHandlers(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.RegisterTextViewEventHandlers&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.RegisterExpansionManagerEventHandlers(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.RegisterTextViewEventHandlers&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnAfterSnippetsKeyBindingChange(System.UInt32,System.UInt32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.OnAfterSnippetsKeyBindingChange&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnAfterSnippetsUpdate">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.OnAfterSnippetsUpdate&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetWordExtent(System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.GetWordExtent&quot;]/*"/>
            <summary>Returns the result of Source.GetWordExtent.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetDataTipText(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.GetDataTipText&quot;]/*"/>
            <summary>
            If Preferences.EnableQuickInfo is true then this method kicks of a parse with the 
            reason ParseReason.QuickInfo to find information about the current token.  If the
            parse finds something (returned via the AuthoringScope.GetDataTipText) then it is
            displayed using the TextTipData object.  When the asynchronous parse is finished
            GetFullDataTipText is called to pop up the tip.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetPairExtents(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.GetPairExtents&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnChangeCaretLine(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.OnChangeCaretLine&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnChangeScrollInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.OnChangeScrollInfo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnKillFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.OnKillFocus&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnSetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.OnSetBuffer&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnSetFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.OnSetFocus&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.QueryCommandStatus(System.Guid@,System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.QueryCommandStatus&quot;]/*"/>
            <summary>
            Override this method to intercept the IOleCommandTarget::QueryStatus call.
            </summary>
            <param name="guidCmdGroup"></param>
            <param name="nCmdId"></param>
            <returns>Usually returns a combination of OLECMDF flags, for example
            OLECMDF_ENABLED | OLECMDF_SUPPORTED.  
            Return E_FAIL if want to delegate to the next command target.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.QueryParameterList(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EditorView.uex" path="docs/doc[@for=&quot;SimpleEditorView.QueryParameterList&quot;]/*"/>
            <summary>
            The parameter list of a command is queried by calling Exec with the LOWORD
            of nCmdexecopt set to OLECMDEXECOPT_SHOWHELP (instead of the more usual
            OLECMDEXECOPT_DODEFAULT), the HIWORD of nCmdexecopt set to
            VSCmdOptQueryParameterList, pvaIn set to NULL, and pvaOut pointing to an
            empty VARIANT ready to receive the result BSTR.  This should be done only
            for commands that are marked with the ALLOWPARAMS flags in the command
            table.        
            </summary>
            <returns>Usually returns 0 if ok, or OLECMDERR_E_NOTSUPPORTED</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandlePreExec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.HandlePreExec&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandlePostExec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.HanelPostExec&quot;]/*"/>
            <summary>This method hooks up HandleSmartIndent and Source.OnCommand.  </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.ExecCommand(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.ExecCommand&quot;]/*"/>
            <summary>
            Override this method to intercept the IOleCommandTarget::Exec call.
            </summary>
            <returns>Usually returns 0 if ok, or OLECMDERR_E_NOTSUPPORTED</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnAutoComplete">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;ViewFilter.OnAutoComplete&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.TypeChar(System.Char)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;ViewFilter.TypeChar&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandleSmartIndent">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;ViewFilter.HandleSmartIndent&quot;]/*"/>
            Override this method if you want to support smart indenting.
            This will only be called if Preferences.Indenting == IndentingStyle.Smart which is
            only available if you set your language service registry key ShowSmartIndent to 1.
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.IOleCommandTarget.QueryStatus&quot;]/*"/>
            <internalonly/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.IOleCommandTarget.Exec&quot;]/*"/>
            <internalonly/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandleQuickInfo">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.HandleQuickInfo&quot;]/*"/>
            <summary>This method is called to handle the VsCommands2K.QUICKINFO command.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetFullDataTipText(System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.GetFullDataTipText&quot;]/*"/>
            <summary>This method checks to see if the IVsDebugger is running, and if so, 
            calls it to get additional information about the current token and returns a combined result.
            You can return an HRESULT here like TipSuccesses2.TIP_S_NODEFAULTTIP.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.CreateTextTipData">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.GetTextTipData&quot;]/*"/>
            <summary>Creates the TextTipData object and returns it</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandleGoto(Microsoft.VisualStudio.VSConstants.VSStd97CmdID)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.HandleGoto&quot;]/*"/>
            <summary>Handles VsCommands.GotoDefn, VsCommands.GotoDecl and VsCommands.GotoRef by
            calling OnSyncGoto on the Source object and opening the text editor on the resulting
            URL, then scrolling to the resulting span.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetExpansionProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.GetExpansionProvider&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ViewFilter.ShowContextMenu&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.CommentSelection">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;ViewFilter.CommentSelection&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetSelection">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;ViewFilter.GetSelection&quot;]/*"/>
            <summary>Returns the current selection, adjusted to become a positive text span</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.UncommentSelection">
            <!-- Failed to insert some or all of included XML --><include file="doc\Source.uex" path="docs/doc[@for=&quot;ViewFilter.UncommentSelection&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.ReformatDocument">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.ReformatDocument;&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.ReformatSelection">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.ReformatSelection;&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.ViewFilter.CanReformat">
            <!-- Failed to insert some or all of included XML --><include file="doc\LanguageService.uex" path="docs/doc[@for=&quot;ViewFilter.CanReformat&quot;]/*"/>
            <summary>This method returns true if the FormatDocument and FormatSelection commands
            are to be enabled.  Default returns false if debugging, otherwise it returns
            the result for Preferences.EnableFormatSelection.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ViewFilter.SnippetBound">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.SnippetBound&quot;]/*"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ViewFilter.CodeWindowManager">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.CodeWindowManager;&quot;]/*"/>
            <summary>Returnt the CodeWindowManager that created this view filter.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ViewFilter.Source">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.Source;&quot;]/*"/>
            <summary>Return the Source object encapsulating the text buffer.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ViewFilter.TextTipData">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.TextTipData;&quot;]/*"/>
            <summary>Get or set the TextTipData object used for displaying tool tips.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ViewFilter.TextView">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;ViewFilter.TextView;&quot;]/*"/>
            <summary>Return the IVsTextView associated with this filter.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Package.ViewFilter.IsExpansionUIActive">
            <!-- Failed to insert some or all of included XML --><include file="doc\ExpansionProvider.uex" path="docs/doc[@for=&quot;ViewFilter.IsExpansionUIActive&quot;]/*"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Package.TextTipData">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData&quot;]/*"/>
            <summary>This class provides a default implementation of IVsTextTipData for
            use in the IVsTextTipWindow for displaying tool tips.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextTipData.#ctor(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData.TextTipData&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextTipData.Close(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData.Close&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextTipData.IsActive">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData.IsActive&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextTipData.Update(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData.Update&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextTipData.CheckCaretPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData.CheckCaretPosition&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextTipData.GetTipText(System.String[],System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData.GetTipText&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextTipData.GetTipFontInfo(System.Int32,System.UInt32[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData.GetTipFontInfo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextTipData.GetContextStream(System.Int32@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData.GetContextStream&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextTipData.OnDismiss">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData.OnDismiss&quot;]/*"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Package.TextTipData.UpdateView">
            <!-- Failed to insert some or all of included XML --><include file="doc\ViewFilter.uex" path="docs/doc[@for=&quot;TextTipData.UpdateView&quot;]/*"/>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.QualityTools.Vsip.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>Microsoft.VisualStudio.QualityTools.Vsip</name>
	</assembly>
	<members>
		<member name="T:Microsoft.VisualStudio.TestTools.Vsip.IRunConfigurationCustomHostEditor">
			<summary>To display a new page in the test run configuration editor, implement the methods of the IRunConfigurationCustomHostEditor interface. The class that implements this interface must inherit from the UserControl class. This UserControl is displayed on the Hosts page in the test run configuration editor. For more information about the test run configuration editor, see Configuring Test Executionhttp://go.microsoft.com/fwlink/?LinkId=70666. </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TestTools.Vsip.IRunConfigurationCustomHostEditor.GetData">
			<summary>Use the IRunConfigurationCustomHostEditor.GetData method to persist data that you use in the test run configuration editor for your host adapter. For example, your test host can use SetData to persist a Visual Studio registry hive. Then, you can retrieve the hive later, if you have to, by using GetData. </summary>
			<returns>A value that represents the host-specific data to be retrieved. </returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TestTools.Vsip.IRunConfigurationCustomHostEditor.SetData(Microsoft.VisualStudio.TestTools.Common.IHostSpecificRunConfigurationData)">
			<summary>Use the IRunConfigurationCustomHostEditor.SetData method to retrieve data that you use in the test run configuration editor for your host adapter. For example, your test host can use SetData to persist a Visual Studio registry hive. Then, you can retrieve the hive later, if you have to, by using IRunConfigurationCustomHostEditor.GetData. </summary>
			<param name="data">The data to be persisted. </param>
		</member>
		<member name="P:Microsoft.VisualStudio.TestTools.Vsip.IRunConfigurationCustomHostEditor.HostType">
			<summary>Gets a value that indicates the name of the host. </summary>
			<returns>The <see cref="T:System.String"></see> that contains the name of the host.</returns>
		</member>
	</members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Shell.StartPage.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Shell.StartPage</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ContentLoadError">
      <summary>ContentLoadError</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ContentLoadError.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.ContentLoadError.Detail">
      <summary>Error details</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ContentLoadError.DetailProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.ContentLoadError.Heading">
      <summary>Error heading</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ContentLoadError.HeadingProperty"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ContentLoadError.InitializeComponent">
      <summary>InitializeComponent</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ContentLoadError.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <param name="connectionId"></param>
      <param name="target"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.ContentLoadError.Title">
      <summary>Error title</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ContentLoadError.TitleProperty"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MruListBox">
      <summary>MRU ListBox control to display project MRU items</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MruListBox.#ctor"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.MruListBox.DoNothingCommand">
      <summary>Do nothing routed command We bind to this command handler when we need to eat a UI gesture (ex. LeftDoubleClick)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.MruListBox.OpenFolderMruItem">
      <summary>OpenFolderMruItem routed command (opens the currently selected item's folder)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.MruListBox.OpenMruItem">
      <summary>OpenMruItem routed command (opens the currently selected item)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.MruListBox.RemoveMruItem">
      <summary>RemoveMruItem routed command</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.RssCommands">
      <summary>Provides the routed commands supported by the VS shell Rss feed reader.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssCommands.EnableDownload">
      <summary>Enable downloading of Rss content</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssCommands.PromptForCredentials">
      <summary>Prompt the user for web proxy credentials</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssCommands.SetUrl">
      <summary>Set Rss feed Url</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.StartPageHelper">
      <summary>Contains functionality shared by the start page package and public APIs for custom start pages.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StartPageHelper.GetCustomStartPageFullyQualifiedFilename(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="startPageDataSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StartPageHelper.GetUserStartPagesFolder"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageHelper.StartPagesDirectoryName"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.StartPageHelper.DataSourceId"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageHelper.DataSourceId.StartPage">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageHelper.DataSourceId.RssFeed">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.StartPageRelativeExtension"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StartPageRelativeExtension.#ctor(System.String)">
      <param name="relativePath"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StartPageRelativeExtension.ProvideValue(System.IServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.VSCommands">
      <summary>Provides the routed commands supported by the VS shell.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.VSCommands.Browse">
      <summary>Opens the Web Browser window in VS</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.VSCommands.ExecuteCommand">
      <summary>Executes a Visual Studio command table command</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDataSourceFactory"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDataSourceFactory.GetDataSource(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource@)">
      <param name="guid"></param>
      <param name="dw"></param>
      <param name="ppUIDataSource"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIDispatch"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDispatch.Invoke(System.String,System.Object,System.Object@)">
      <param name="verb"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIFactory"></member>
    <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
      <summary>A class generated by the workflow designer used to generate CLR types for XAML documents.</summary>
    </member>
    <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.#ctor">
      <summary>Creates a new instance of the <see cref="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper" /> class.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Text.Data.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Text.Data</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.ContinueProcessingPredicate`1">
            <summary>
            A predicate used by <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceService"/> that allows callers to stop differencing prematurely.
            </summary>
            <typeparam name="T">The type of sequences being differenced.</typeparam>
            <param name="leftIndex">The current index in the left sequence being differenced.</param>
            <param name="leftSequence">The left sequence being differenced.</param>
            <param name="longestMatchSoFar">The length of the longest match so far.</param>
            <returns><c>true</c> if the algorithm should continue processing, <c>false</c> to stop the algorithm.</returns>
            <remarks>
            When <c>false</c> is returned, the algorithm stops searching for matches and uses the information it has computed so
            far to create the <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1"/> that will be returned.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DetermineLocalityCallback">
            <summary>
            A delegate for determining the locality for a given difference type and left/right strings.
            </summary>
            <param name="differenceType">The type of difference to get the locality for.  This is
            guaranteed to be only a single type.</param>
            <param name="leftStrings">The left text, decomposed into a list of strings.</param>
            <param name="rightStrings">The right text, decomposed into a list of strings.</param>
            <returns>The locality, if desired, or <c>null</c>, to fallback to the default
            locality.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.Difference">
            <summary>
            Represents a single difference in the set of differences of two
            lists of elements.  
            </summary>
            <remarks>Each difference consists of a left span and a right span, either
            of which may have zero length (that is, the operation may be an add operation or a delete operation).
            The text before and after the difference matches.  
            In general, differencess are non-null. However, when the difference
            appears at the beginning of the lists of differences, the "before" is null, and when the difference appears at
            the end of the lists, the "after" is null.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Difference.#ctor(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Differencing.Match,Microsoft.VisualStudio.Text.Differencing.Match)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Differencing.Difference"/> with the specified left and right spans and before and after matches.
            </summary>
            <param name="left">The left side of the difference (may have zero length).</param>
            <param name="right">The right side of the difference (may have zero length).</param>
            <param name="before">The non-differing element range before this difference.</param>
            <param name="after">The non-differing element range after this difference.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Difference.ToString">
            <summary>
            The string representation of this difference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Difference.Equals(System.Object)">
            <summary>
            Determines whether two Difference objects are the same (have the same difference type and the same before and after matches).
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Difference.GetHashCode">
            <summary>
            Serves as a hash code for this type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Difference.Left">
            <summary>
            The left side of the difference (may be zero length).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Difference.Right">
            <summary>
            The right side of the difference (may be zero length).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Difference.Before">
            <summary>
            The match before this section. It is null at the beginning of
            the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Difference.After">
            <summary>
            The mtch after this difference. It is null at the end of the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Difference.DifferenceType">
            <summary>
            The type of the difference (Add, Remove, or Change).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceType">
            <summary>
            The types of differences.
            
            </summary>
            <remarks>Differences are read from left to right, so that Add means that only
            the right span has text, Remove means that only the left span has text, and
            Change means that both the left and right spans have text.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceType.Add">
            <summary>
            Lines were added, so the text is on the right-hand side
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceType.Remove">
            <summary>
            Lines were removed, so the text is on the left-hand side
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceType.Change">
            <summary>
            Lines were changed, so the text is on both sides
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceService">
            <summary>
            Determines the differences between two
            sequences, based on adding or removing elements (but not translating or copying elements).
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IDifferenceService diffService = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceService.DifferenceSequences``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Computes the differences between the two sequences.
            </summary>
            <typeparam name="T">The type of the sequences.</typeparam>
            <param name="left">The left sequence. In most cases this is the "old" sequence.</param>
            <param name="right">The right sequence. In most cases this is the "new" sequence.</param>
            <returns>A collection of the differences between the two sequences.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceService.DifferenceSequences``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},Microsoft.VisualStudio.Text.Differencing.ContinueProcessingPredicate{``0})">
            <summary>
            Computes the differences between the two sequences.  The supplied predicate will be called on each
            step through the <paramref name="left"/> sequence.
            </summary>
            <typeparam name="T">The type of the sequences.</typeparam>
            <param name="left">The left sequence. In most cases this is the "old" sequence.</param>
            <param name="right">The right sequence. In most cases this is the "new" sequence.</param>
            <param name="continueProcessingPredicate">A predicate that will be called on each step through the <paramref name="left"/> sequence,
            with the option of stopping the algorithm prematurely.</param>
            <returns>A collection of the differences between the two sequences.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection">
            <summary>
            Represents a difference collection in which the left and right
            sequences are <see cref="T:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList"/> objects, and each difference may itself contain
            an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection"/>.  
            </summary>
            <remarks>You can get this collection by using the <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService"/>. 
            When you request multiple types of string differencing
            (e.g. line and word), the first level of differences will be the lines,
            and each line difference may contain an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection"/>
            of word differences. See <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService"/>
            for more information and examples.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1">
            <summary>
            Represents a collection of <see cref="T:Microsoft.VisualStudio.Text.Differencing.Difference"/> objects extracted from two lists of same-typed elements,
            given a maximal match sequence generated from a difference algorithm.
            </summary>
            <typeparam name="T">The element type of the compared lists.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1.MatchSequence">
            <summary>
            Gets the original match sequence that was used to create this difference collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1.LeftSequence">
            <summary>
            Gets the left sequence that was used to create this difference collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1.RightSequence">
            <summary>
            Gets the right sequence that was used to create this difference collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1.Differences">
            <summary>
            Returns the difference collection as a list. 
            </summary>
            <remarks>Since the difference collection itself implements the IEnumerable interface,
            you can use it to iterate over the differences.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection.GetContainedDifferences(System.Int32)">
            <summary>
            Gets the contained difference collection for the given element, if
            it has any.  This forces an evaluation of the contained differences.
            </summary> 
            <param name="index">The index at which to compute the contained differences.</param>
            <returns>The contained differences at this level, or <c>null</c> if there are none.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection.HasContainedDifferences(System.Int32)">
            <summary>
            Determines whether or not the <see cref="T:Microsoft.VisualStudio.Text.Differencing.Difference"/> at the given index itself contains differences.  This forces an evaluation of the contained differences for the given element.
            </summary>
            <param name="index">The index at which to check for contained differences.</param>
            <returns><c>true</c> if the <see cref="T:Microsoft.VisualStudio.Text.Differencing.Difference"/> in question has contained differences, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection.LeftDecomposition">
            <summary>
            Gets the original left tokenized list.
            </summary>
            /// <remarks>
            This is the same as IDifferenceCollection.LeftSequence, except that
            it is typed as an <see cref="T:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection.RightDecomposition">
            <summary>
            Get the original right tokenized list.
            </summary>
            <remarks>
            This is the same as IDifferenceCollection.RightSequence, except that
            it is typed as an <see cref="T:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService">
            <summary>
            This service has several shortcut methods that compute
            differences over strings, snapshots, and spans.
            Differences are computed according to the specified <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes"/>,
            starting with the most general type 
            (line is more general than word, and word is more general than character).
            </summary>
            <example>
            Given string A:
            ---
            This is a
            line!
            ---
            And string B:
            ---
            This is but a
            line!
            ---
            
            The returned difference collection contains one line difference, which maps to line 1 of each string.
            This difference contains one
            word difference, which is the addition of the words "but" and " ".
            </example>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IHierarchicalStringDifferenceService diffService = null;
            </remarks>    
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService.DiffStrings(System.String,System.String,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Computes the differences between two strings, using the given difference options.
            </summary>
            <param name="left">The left string. In most cases this is the the "old" string.</param>
            <param name="right">The right string. In most cases this is the "new" string.</param>
            <param name="differenceOptions">The options to use in differencing</param>
            <returns>A hierarchical collection of differences.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService.DiffSnapshotSpans(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Computes the differences between two snapshot spans, using the given difference options.
            </summary>
            <param name="left">The left snapshot. In most cases this is the the "old" snapshot.</param>
            <param name="right">The right snapshot. In most cases this is the "new" snapshot.</param>
            <param name="differenceOptions">The options to use.</param>
            <returns>A hierarchical collection of differences.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList">
            <summary>
            A tokenized representation of a string into abutting and non-overlapping segments.
            </summary>
            <remarks>
            This interface implements IList so that it can be used with 
            <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceService"/>, which finds the differences between two sequences represented
            as ILists. </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList.GetElementInOriginal(System.Int32)">
            <summary>
            Maps the index of an element to its span in the original list.
            </summary>
            <param name="index">The index of the element in the element list.</param>
            <returns>The span of the element.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is either negative or exceeds the list's Count property.</exception>
            <remarks>This method returns a zero-length span at the end of the string if index
            is equal to the list's Count property.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList.GetSpanInOriginal(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Maps a span of elements in this list to the span in the original list.
            </summary>
            <param name="span">The span of elements in the elements list.</param>
            <returns>The span mapped onto the original list.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList.Original">
            <summary>
            The original string that was tokenized.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.Match">
             <summary>
             Represents a range of matches between two sequences as a pair of spans of equal length.
             </summary>
             <remarks>
             Given two sequences:
             abCCd (left)
             abFFd (right)
             The generated pairs of matches would be:
             (0, 0), (1, 1), (4, 4)
             Which would turn into the Matches (left-start, right-start, length):
             (0, 0, 2) and (4, 4, 1)
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Match.#ctor(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Creates a match from two spans of equal length.
            </summary>
            <param name="left">The span from the left sequence.</param>
            <param name="right">The span from the right sequence.</param>
            <exception cref="T:System.ArgumentNullException">The left span or right span is null.</exception>
            <exception cref="T:System.ArgumentException">The spans are not of equal length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Match.Equals(System.Object)">
            <summary>
            Determines whether two Match objects have the same left and right spans.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Match.GetHashCode">
            <summary>
            Provides a hash function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Match.GetEnumerator">
            <summary>
            Gets an enumerator typed as a <see cref="T:System.Tuple"/> of integers.
            </summary>
            <returns>The typed enumerator.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Match.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an untyped enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Match.Left">
            <summary>
            Get the left-side range
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Match.Right">
            <summary>
            Gets the right span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Match.Length">
            <summary>
            Gets the length of the spans. Both spans have equal lengths.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes">
            <summary>
            A bitwise combination of the enumeration values to use when computing differences with the various methods in 
            <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService"/>. 
            </summary>
            <remarks>
            See the comments on 
            <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService"/> for an explanation of how differences are computed.
            Since computing differences can be slow with large data sets, you should not use the Character type
            unless the given text is relatively small.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes.Line">
            <summary>
            Compute the line difference.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes.Word">
            <summary>
            Compute the word difference.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes.Character">
            <summary>
            Compute the character difference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions">
            <summary>
            Options to use in computing string differences.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.#ctor(Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes,System.Int32,System.Boolean)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/>.
            </summary>
            <param name="differenceType">The type of string differencing to do, as a combination of line, word, and character differencing.</param>
            <param name="locality">The greatest distance a differencing element (line, span, or character) can move and still be considered part of the same source.  A value of 0 disables locality checking.</param>
            <param name="ignoreTrimWhiteSpace">Determines whether whitespace should be ignored.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.#ctor(Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/> from a given <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/> to use in constructing a new <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.ToString">
            <summary>
            Provides a string representation of these difference options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.GetHashCode">
            <summary>
            Provides a hash function for the type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.Equals(System.Object)">
            <summary>
            Determines whether two StringDifferenceOptions are the same.
            </summary>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.op_Equality(Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Determines whether two StringDifferenceOptions are the same
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.op_Inequality(Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Determines whether two StringDifferenceOptions are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.DifferenceType">
            <summary>
            The type of string differencing to do, as a combination
            of line, word, and character differencing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.Locality">
            <summary>
            The greatest distance a differencing element (line, span, or character) can move 
            and still be considered part of the same source.  A value of 0 disables locality checking.
            </summary>
            <remarks>
            For example, if Locality is set to 100, a line is considered the same line 
            if it is separated by 100 or fewer lines from its neighboring lines. 
            If it is separated by more than 100 lines, it is considered a different line.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.IgnoreTrimWhiteSpace">
            <summary>
            Gets or sets whether to ignore white space.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.WordSplitBehavior">
            <summary>
            The behavior to use when splitting words, if word differencing is requested
            by the <see cref="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.DifferenceType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.DetermineLocalityCallback">
            <summary>
            An optional callback to override the locality for a specific round of differencing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.ContinueProcessingPredicate">
            <summary>
            An optional predicate that allows clients to cancel differencing before it has completely finished.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior">
            <summary>
            Behavior to use while splitting words in string differencing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior.Default">
            <summary>
            Split words by <see cref="F:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior.CharacterClass"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior.CharacterClass">
            <summary>
            Split words by character class.
            </summary>
            <remarks>
            The word split logic uses the following character classes:
            1) Whitespace and control characters
            2) Numbers/Digits
            3) Punctuation/Symbols
            4) Letters
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior.WhiteSpace">
            <summary>
            Split the text into words by whitespace only.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior.WhiteSpaceAndPunctuation">
            <summary>
            Split the text into words by whitespace and punctuation/symbols.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.EncodingChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.ITextDocument.EncodingChanged"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EncodingChangedEventArgs.#ctor(System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.EncodingChangedEventArgs"/>
            </summary>
            <param name="oldEncoding">The previous encoding.</param>
            <param name="newEncoding">The new encoding.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.EncodingChangedEventArgs.OldEncoding">
            <summary>
            Gets the previous encoding.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.EncodingChangedEventArgs.NewEncoding">
            <summary>
            Gets the new encoding.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IEncodingDetector">
            <summary>
            Attempts to detect a text encoding associated with a stream.
            </summary>
            <remarks>
            <para>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(NameSource=typeof(IEncodingDetector))]
            </para>
            <para>
            Exports must include a [Name] attribute and at least one [ContentType] attribute.
            Exports may optionally include the [Order] attribute.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IEncodingDetector.GetStreamEncoding(System.IO.Stream)">
            <summary>
            Attempts to detect an encoding associated with a stream.
            </summary>
            <remarks>
            The stream is read from its current position. The encoding sniffer does not need to reset the stream's position.
            </remarks>
            <param name="stream">The stream to read.</param>
            <returns>The detected encoding, or null if one could not be determined.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextDocument">
            <summary>
            Represents a document in the file system that persists an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SetEncoderFallback(System.Text.EncoderFallback)">
            <summary>
            Change the encoder fallback of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.Encoding"/>.
            </summary>
            <param name="fallback">The new encoder fallback</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.Rename(System.String)">
            <summary>
            Rename the document to the given new file path.
            </summary>
            <param name="newFilePath">The new file path for this document.</param>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.Reload">
            <summary>
            Reloads the contents of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> into <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/>.  
            If the load fails, the contents of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> remains unchanged.
            </summary>
            <returns>Indicates whether the reload took place and whether the encoding was sufficient.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred during file load.</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file load.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.Reload(Microsoft.VisualStudio.Text.EditOptions)">
            <summary>
            Reloads the contents of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> into <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/>,
            using the given <see cref="T:Microsoft.VisualStudio.Text.EditOptions"/>.  
            If the load fails, the contents of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> remains unchanged.
            </summary>
            <param name="options">The options to use for the text buffer edit.</param>
            <returns>Indicates whether the reload took place and whether the encoding was sufficient.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred during file load.</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file load.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.Save">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/>.  
            If the save operation fails, the value of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> remains unchanged.
            </summary>
            <exception cref="T:System.IO.IOException"> An I/O error occurred during file save.</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            If the save operation is successful, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> is set to <paramref name="filePath"/>, 
            and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> is set to <c>false</c>.  If the save operation fails,
            <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> remains unchanged.
            </summary>
            <param name="filePath">The name of the new file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is <c>false</c>).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveAs(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            If the save operation is successful, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> is set to <paramref name="filePath"/>, 
            and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> is set to <c>false</c>.  If the save operation fails,
            <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> remains unchanged.
            </summary>
            <param name="filePath">The name of the new file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <param name="createFolder"><c>true</c> if the folder containing <paramref name="filePath"/> should be created if it does not exist, otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is <c>false</c>).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveAs(System.String,System.Boolean,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            If the save is successful, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> is set to <paramref name="filePath"/>, 
            and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> is set to <c>false</c>.  If the save fails,
            <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> remains unchanged.
            </summary>
            <param name="filePath">The name of the new file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <param name="newContentType">The new <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> or <paramref name="newContentType"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is false).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
            <remarks>
            The order of events raised as a result of a successful file SaveAs
            operation is <see cref="E:Microsoft.VisualStudio.Text.ITextDocument.FileActionOccurred"/> followed by <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ContentTypeChanged"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveAs(System.String,System.Boolean,System.Boolean,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            If the save is successful, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> is set to <paramref name="filePath"/>, 
            and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> is set to <c>false</c>.  If the save fails,
            <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> remains unchanged.
            </summary>
            <param name="filePath">The name of the new file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <param name="createFolder"><c>true</c> if the folder containing <paramref name="filePath"/> should be created if it does not exist, otherwise <c>false</c>.</param>
            <param name="newContentType">The new <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> or <paramref name="newContentType"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is false).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
            <remarks>
            The order of events raised as a result of a successful file SaveAs
            operation is <see cref="E:Microsoft.VisualStudio.Text.ITextDocument.FileActionOccurred"/> followed by <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ContentTypeChanged"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveCopy(System.String,System.Boolean)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            </summary>
            <param name="filePath">The name of the file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is <c>false</c>).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <remarks>This call does not affect the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/>, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.LastSavedTime"/>, and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> properties.
            The <see cref="E:Microsoft.VisualStudio.Text.ITextDocument.FileActionOccurred"/> event is not raised.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveCopy(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            </summary>
            <param name="filePath">The name of the file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <param name="createFolder"><c>true</c> if the folder containing <paramref name="filePath"/> should be created if it does not exist, otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is <c>false</c>).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <remarks>This call does not affect the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/>, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.LastSavedTime"/>, and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> properties.
            The <see cref="E:Microsoft.VisualStudio.Text.ITextDocument.FileActionOccurred"/> event is not raised.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.UpdateDirtyState(System.Boolean,System.DateTime)">
            <summary>
            Updates the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.LastContentModifiedTime"/> properties.
            </summary>
            <param name="isDirty">The new value for <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/>.</param>
            <param name="lastContentModifiedTime">The new value for <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.LastContentModifiedTime"/>.</param>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath">
            <summary>
            The name and path of the file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> containing the document. This value is always non-null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty">
            <summary>
            Determines whether the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> is dirty.  
            </summary>
            <remarks>If <c>true</c>, the contents of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> have
            changed since the file was last loaded or saved. If <c>false</c>, the contents of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> have
            not changed since the file was last loaded or saved.</remarks>  
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.LastSavedTime">
            <summary>
            Gets the last <see cref="T:System.DateTime"/> the file was saved.  This time exactly matches the last file written 
            time on the file system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.LastContentModifiedTime">
            <summary>
            Gets the last <see cref="T:System.DateTime"/> a change was made to the contents of the document. If it has not been modified
            since it was loaded or reloaded from disk, this will be the last write time of the underlying file at the time the
            load or reload occurred; otherwise, it is the last time the contents of the text buffer were changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.Encoding">
            <summary>
            Gets or sets the encoding of the document when saved to disk.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDocument.EncodingChanged">
            <summary>
            Occurs when the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.Encoding"/> property changes.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDocument.FileActionOccurred">
            <summary>
            Occurs when the document has been loaded from or saved to disk.  
            You may not call Reload/Save/SaveAs to perform another file action while handling this event.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDocument.DirtyStateChanged">
            <summary>
            Occurs when the value of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> changes. 
            You may not call <see cref="M:Microsoft.VisualStudio.Text.ITextDocument.UpdateDirtyState(System.Boolean,System.DateTime)"/> in order to change 
            the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> property while handling this event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.IsReloading">
            <summary>
            Determines whether the document is currently being reloaded.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextDocumentFactoryService">
            <remarks>
            Represents a service that creates, load, and disposes text documents. This is a MEF component part, and should be imported as follows:
            [Import]
            ITextDocumentFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.CreateAndLoadTextDocument(System.String,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> that opens and loads the contents of <paramref name="filePath"/> into a new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="filePath">The full path to the file to be loaded.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> or <paramref name="contentType"/> is null.</exception>
            <remarks>This method is equivalent to CreateAndLoadTextDocument(filePath, contentType, true, out unusedBoolean).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.CreateAndLoadTextDocument(System.String,Microsoft.VisualStudio.Utilities.IContentType,System.Text.Encoding,System.Boolean@)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> that opens and loads the contents of <paramref name="filePath"/> into a new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="filePath">The full path to the file to be loaded.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <param name="encoding">The encoding to use. The decoder part of the Encoding object won't be used.</param>
            <param name="characterSubstitutionsOccurred">Set to true if some of the file bytes could not be directly translated using the given encoding.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/>, <paramref name="contentType"/>, or <paramref name="encoding"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.CreateAndLoadTextDocument(System.String,Microsoft.VisualStudio.Utilities.IContentType,System.Boolean,System.Boolean@)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> that opens and loads the contents of <paramref name="filePath"/> into a new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="filePath">The full path to the file to be loaded.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <param name="attemptUtf8Detection">Whether to attempt to load the document as a UTF-8 file.</param>
            <param name="characterSubstitutionsOccurred">Set to true if some of the file bytes could not be directly translated using the given encoding.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> or <paramref name="contentType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.CreateTextDocument(Microsoft.VisualStudio.Text.ITextBuffer,System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> with <paramref name="textBuffer"/>, which is to be saved to <paramref name="filePath"/>
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to be saved to <paramref name="filePath"/>.</param>
            <param name="filePath">The full path to the file.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> or <paramref name="filePath"/> is null.</exception>
            <remarks>This call does not save the contents of the buffer to the given path.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.TryGetTextDocument(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.ITextDocument@)">
            <summary>
            Retrieve an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> for the given buffer, if one exists.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to get a document for.</param>
            <param name="textDocument">The <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> for this buffer, if one exists.</param>
            <returns><c>true</c> if a document exists for this buffer, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> is null.</exception>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.TextDocumentCreated">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> is created.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.TextDocumentDisposed">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> is disposed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ReloadResult">
            <summary>
            The return value of Reload methods on <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.ReloadResult.Aborted">
            <summary>
            The reload was blocked by the text document buffer's read only regions or <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changing"/> event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.ReloadResult.Succeeded">
            <summary>
            The reload completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.ReloadResult.SucceededWithCharacterSubstitutions">
            <summary>
            The reload completed but some bytes could not be decoded and were replaced with a replacement character.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextDocumentEventArgs">
            <summary>
            Provides information for events when an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> has been created or disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextDocumentEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextDocument)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.TextDocumentEventArgs"/>.
            </summary>
            <param name="textDocument">The <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> that was created or disposed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDocumentEventArgs.TextDocument">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> that was created or disposed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.FileActionTypes">
            <summary>
            Describes the type of file action.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.FileActionTypes.ContentSavedToDisk">
            <summary>
            The content was saved to disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.FileActionTypes.ContentLoadedFromDisk">
            <summary>
            The content was loaded from disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.FileActionTypes.DocumentRenamed">
            <summary>
            The document was renamed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs">
            <summary>
            Provides information for events that are raised when an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> has loaded from or saved to disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs.#ctor(System.String,System.DateTime,Microsoft.VisualStudio.Text.FileActionTypes)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs"/> for a file action event.
            </summary>
            <param name="filePath">The path to the file.</param>
            <param name="time">The <see cref="T:System.DateTime"/> when the file action occurred.</param>
            <param name="fileActionType">The <see cref="T:Microsoft.VisualStudio.Text.FileActionTypes"/> that occurred.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs.FilePath">
            <summary>
            Gets the path to the file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs.Time">
            <summary>
            Gets the <see cref="T:System.DateTime"/> when the file action occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs.FileActionType">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.FileActionTypes"/> that occurred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs">
            <summary>
            Provides information about a change to the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> on an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs">
            <summary>
            Provides information about a transaction on a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> 
            that causes a new <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to be generated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs"/> for a Change event.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> immediately after the change occurred.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="beforeSnapshot"/> or <paramref name="afterSnapshot"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.Before">
            <summary>
            Gets the state of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> before the change occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.After">
            <summary>
            Gets the state of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> after the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.BeforeVersion">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/> associated with <see cref="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.Before"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.AfterVersion">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/>n associated with <see cref="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.After"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.EditTag">
            <summary>
            Gets an arbitrary object provided by the initiator of the changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Utilities.IContentType,Microsoft.VisualStudio.Utilities.IContentType,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs"/>
            with the specified before and after snapshots and before and after content types.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> immediately after the change occurred.</param>
            <param name="beforeContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> before the change occurred.</param>
            <param name="afterContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> after the change occurred.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException"> One of <paramref name="beforeSnapshot"/>, 
            <paramref name="afterSnapshot"/>, <paramref name="beforeContentType"/>, or
            <paramref name="afterContentType"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs.BeforeContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> before the change occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs.AfterContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> after the change occurred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CustomTrackToVersion">
            <summary>
            Provides a custom implementation of span tracking. This delegate should be implemented by custom tracking spans.
            </summary>
            <param name="customSpan">The span to be tracked.</param>
            <param name="currentVersion">The version to which <paramref name="currentSpan"/> belongs.</param>
            <param name="targetVersion">The version to which <paramref name="currentSpan"/> is to be tracked.</param>
            <param name="currentSpan">The span to track.</param>
            <param name="customState">The custom state that was provided when the span was created.</param>
            <returns>The span to which <paramref name="currentSpan"/> tracks.</returns>
            <remarks><paramref name="targetVersion"/> may be earlier than <paramref name="currentVersion"/>.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.EdgeInsertionMode">
            <summary>
            Specifies the edge insertion modes for read-only regions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.EdgeInsertionMode.Allow">
            <summary>
            Allows insertions at the edge of read-only regions. If
            there is a read-only region [3, 6) that allows edge insertions, an insertion at
            position 3 or position 6 will succeed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.EdgeInsertionMode.Deny">
            <summary>
            Prevents insertions at the edge of read-only regions. If
            there is a read-only region [3, 6) that allows edge insertions, an insertion at
            position 3 or position 6 will fail.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.EditOptions">
            <summary>
            Options applicable to text editing transactions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.EditOptions.None">
            <summary>
            Do nothing special with this edit.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.EditOptions.DefaultMinimalChange">
            <summary>
            Turn this edit into a minimal change, using line and word string differencing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.#ctor(Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Create a set of edit options for computing a minimal difference,
            with the given <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.#ctor(System.Boolean,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Create a set of edit options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.ToString">
            <summary>
            Provides a string representation of these edit options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.GetHashCode">
            <summary>
            Provides a hash function for the type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.Equals(System.Object)">
            <summary>
            Determines whether two spans are the same.
            </summary>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.op_Equality(Microsoft.VisualStudio.Text.EditOptions,Microsoft.VisualStudio.Text.EditOptions)">
            <summary>
            Determines whether two EditOptions are the same
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.op_Inequality(Microsoft.VisualStudio.Text.EditOptions,Microsoft.VisualStudio.Text.EditOptions)">
            <summary>
            Determines whether two EditOptions are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.EditOptions.ComputeMinimalChange">
            <summary>
            True if this edit computes minimal change using the differencing option <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/>, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.EditOptions.DifferenceOptions">
            <summary>
            The differencing options for this edit, if <see cref="P:Microsoft.VisualStudio.Text.EditOptions.ComputeMinimalChange"/> is true.
            </summary>
            <remarks>
            <see cref="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.IgnoreTrimWhiteSpace"/> will be
            ignored.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IExtensionErrorHandler">
            <summary>
            Allows editor hosts to detect exceptions that get captured at extension points.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IExtensionErrorHandler errorHandler = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IExtensionErrorHandler.HandleError(System.Object,System.Exception)">
            <summary>
            Notifies that an exception has occured.
            </summary>
            <param name="sender">The extension object or event handler that threw the exception.</param>
            <param name="exception">The exception that was thrown.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IMappingPoint">
            <summary>
            A position in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that can be mapped within a <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingPoint.GetPoint(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps the point to a particular <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="targetBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to which to map the point.</param>
            <param name="affinity">If the mapping is ambiguous (the position lies on a source span seam), this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the anchor buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the anchor buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the targeted buffer or null if the point and affinity do not appear in that buffer.</returns>
            <remarks>
            In general, a source span seam occurs at the end of a source span of nonzero length
            and the beginning of a source span of nonzero length, and
            coincides with zero or more source spans of zero length. Every span on a seam
            has a point in the result collection.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetBuffer"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingPoint.GetPoint(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps the point to a particular <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </summary>
            <param name="targetSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to which to map the point.</param>
            <param name="affinity">If the mapping is ambiguous (the position lies on a source span seam), this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the anchor buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the anchor buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the targeted buffer or null if the point and affinity do not appear in that buffer.</returns>
            <remarks>
            In general, a source span seam occurs at the end of a source span of nonzero length
            and the beginning of a source span of nonzero length, and
            coincides with zero or more source spans of zero length. Every span on a seam
            has a point in the result collection.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetSnapshot"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingPoint.GetPoint(System.Predicate{Microsoft.VisualStudio.Text.ITextBuffer},Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps the point to a matching <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="match">The predicate used to match the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <param name="affinity">If the mapping is ambiguous (the position lies on a source span seam), this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the anchor buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the anchor buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the matching buffer, or null if the point and affinity do not appear in that buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
            <remarks><paramref name="match"/> will be called as text buffers in the buffer graph are encountered, until a match is found. 
            This selects the buffer of interest and <paramref name="match"/> is not called again. 
            If no match is found with any of the buffers, the result is null.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingPoint.GetInsertionPoint(System.Predicate{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Maps the point to an insertion point in a matching <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="match">The predicate used to match the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the matching buffer or null if the point does not appear in that buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
            <remarks>In the usual case, this is a straightforward computation that maps through projection buffers, subject to
            caller approval using <paramref name="match"/>. If there is ambiguity in a projection mapping, the
            <see cref="M:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver.GetTypicalInsertionPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Text.SnapshotPoint})"/> method for the relevant projection buffer will be consulted.
            <paramref name="match"/> will be called as text buffers in the buffer graph are encountered, until a match is found. 
            This selects the buffer of interest and the predicate will not be called again. 
            If no match is found with any of encountered buffers, the result will be null.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingPoint.AnchorBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> from which this point was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingPoint.BufferGraph">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> that this point uses to perform the mapping.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IMappingSpan">
            <summary>
            A span in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that can be mapped within a <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingSpan.GetSpans(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Maps the span to a particular <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="targetBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to which to map the span.</param>
            <returns>The possibly empty collection of spans in the <paramref name="targetBuffer"/> to which the span maps.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetBuffer"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingSpan.GetSpans(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the span to a particular <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </summary>
            <param name="targetSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to which to map the span.</param>
            <returns>The possibly empty collection of spans in the <paramref name="targetSnapshot"/> to which the span maps.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetSnapshot"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingSpan.GetSpans(System.Predicate{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Maps the span to a matching <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="match">The predicate used to identify the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>A possibly empty collection of spans in the matching buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
            <remarks><paramref name="match"/> is called on each text buffer in the buffer graph until it
            returns <c>true</c>. The predicate will not be called again.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingSpan.Start">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/> for the start of this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingSpan.End">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/> for the end of this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingSpan.AnchorBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> from which this span was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingSpan.BufferGraph">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> that this span uses to perform mapping.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.INormalizedTextChangeCollection">
            <summary>
            A normalized list of <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> objects. Changes are sorted in ascending order of position,
            and abutting and overlapping changes are combined into a single change.
            </summary>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Text.INormalizedTextChangeCollection"/> objects are immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.INormalizedTextChangeCollection.IncludesLineChanges">
            <summary>
            Determines whether any of the <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> objects in this list have a nonzero <see cref="P:Microsoft.VisualStudio.Text.ITextChange.LineCountDelta"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IReadOnlyRegion">
            <summary>
            A handle that tracks a possibly empty read-only region of text.
            </summary>
            <remarks>
            <para>
            The text in a read-only region is not necessarily immutable; a read-only region created on a 
            projection buffer makes that region read-only to clients of the projection buffer but
            does not affect the source buffers for that text. </para>
            <para>
            Read-only regions prevent edits only on their owning buffer.
            A read-only region that does not prohibit edge insertions does not prevent any insertion if the
            region has (or shrinks to) zero length.
            A zero-length read-only region that prohibits edge insertions prevents insertions only at its starting
            position, but allows deletions and modifications that span that position.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IReadOnlyRegion.EdgeInsertionMode">
            <summary>
            The edge insertion behavior of the read-only region.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IReadOnlyRegion.Span">
            <summary>
            The span of text marked read-only by this region.
            </summary>
            <remarks>
            Not null.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IReadOnlyRegion.QueryCallback">
            <summary>
            The delegate that notifies the read-only region of read-only checks and edits.
            </summary>
            <remarks>
            <para>May be null.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit">
            <summary>
            Provides for an atomic set of read-only region editing operations on an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. 
            Edition positions are specified with respect to the state of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> 
            at the time the <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit"/> object was created.
            </summary>
            <remarks>
            <para>At most one <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object may be active for a particular <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. It is considered
            active as long as it has been neither applied nor canceled; calling Dispose() on an unapplied object is equivalent to calling Cancel. </para>
            <para>The operations performed using this object do not appear in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> until the <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> 
            method has been called.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextBufferEdit">
            <summary>
            Represents edit operations against a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply">
            <summary>
            Commits all the modifications made with this <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object to the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. 
            Depending on the type of edit, it may also cause the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to generate a new snapshot and raise its Changed 
            event if any modifications were made. This method may be called only 
            once. After it is called, any other calls on this object (other than Dispose) will result in an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <remarks>
            Canceled will be <c>true</c> after this method returns if a handler of the buffer's Changing event canceled the change.
            </remarks>
            <returns>
            A snapshot of the state of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> after the change is applied. 
            If there was no change, or edit was canceled, or the edit is of a type that does not generate snapshots, no new snapshot will be created,
            and the previous snapshot will be returned.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel">
            <summary>
            Abandons all modifications started using this <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object. Any further calls 
            on this object will result in an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object, or the edit has already been applied.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBufferEdit.Snapshot">
            <summary>
            A snapshot of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> at the time this ITextBufferEdit object was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBufferEdit.Canceled">
            <summary>
            Determines whether this edit has been canceled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit.CreateReadOnlyRegion(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Marks a span of text in this buffer as read-only. The span remains 
            read-only until the <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> is removed.
            </summary>
            <param name="span">
            The span to mark as read-only.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> used to track this read-only region. This object must be used
            to remove the read-only region.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/> is past the end of the buffer.</exception>
            <remarks>Insertions at the edge of the read-only region are allowed by default.</remarks>
            <remarks>The region is created edge exclusive by default.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit.CreateReadOnlyRegion(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.EdgeInsertionMode)">
            <summary>
            Marks a span of text in this buffer as read-only.  The span remains 
            read-only until it is marked as writable or forced writable again.
            </summary>
            <param name="span">
            The span to mark as read-only.
            </param>
            <param name="trackingMode">
            Specifies the tracking behavior of the read-only region.
            </param>
            <param name="edgeInsertionMode">
            Specifies the edge insertion behavior of the read-only region.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> used to track this read-only region. This object will be used
            to remove the read-only region.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/> is past the end of the buffer.</exception>
            <remarks>
            Zero-length read-only regions restrict inserts only at that point.  A deletion or modification over that span
            can still occur.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit.CreateDynamicReadOnlyRegion(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.EdgeInsertionMode,Microsoft.VisualStudio.Text.DynamicReadOnlyRegionQuery)">
            <summary>
            Marks a span of text in this buffer as as conditionally read-only,
            subject to a check performed when the region is queried.  The span remains 
            read-only until it is marked as writable or forced writable again.
            </summary>
            <param name="span">
            The span to mark as read-only.
            </param>
            <param name="trackingMode">
            Specifies the tracking behavior of the read-only region.
            </param>
            <param name="edgeInsertionMode">
            Specifies the edge insertion behavior of the read-only region.
            </param>
            <param name="callback">
            The delegate that notifies the read-only region of read-only checks and edits. May be null.
            See <see cref="P:Microsoft.VisualStudio.Text.IReadOnlyRegion.QueryCallback"/>.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> used to track this read-only region. This object will be used
            to remove the read-only region.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/> is past the end of the buffer.</exception>
            <remarks>
            Zero-length read-only regions restrict inserts only at that point.  A deletion or modification over that span
            can still occur.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit.RemoveReadOnlyRegion(Microsoft.VisualStudio.Text.IReadOnlyRegion)">
            <summary>
            Removes the read-only region from the list of read-only regions in this buffer.
            </summary>
            <param name="readOnlyRegion">
            The read-only region to remove.
            </param>
            <remarks>
            Removing a read-only region that has already been removed does nothing.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="readOnlyRegion"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="readOnlyRegion"/> was created on another buffer.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextBuffer">
            <summary>
            A mutable sequence of Unicode characters encoded using UTF-16.
            Positions withing the buffer are treated as a sequence of characters (starting at character zero) or
            as a sequence of lines (starting at line zero). An empty buffer has a single line containing no characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.CreateEdit(Microsoft.VisualStudio.Text.EditOptions,System.Nullable{System.Int32},System.Object)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object that handles compound edit operations on this buffer.
            </summary>
            <param name="options">Options to apply to the compound edit operation.</param>
            <param name="reiteratedVersionNumber">If not null, indicates that the version to be created by this edit operation is
            the product of an undo or redo operation.</param>
            <param name="editTag">An arbitrary object that will be associated with this edit transaction.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">Another <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object is active for this text buffer, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.CreateEdit">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object that handles compound edit operations on this buffer.
            </summary>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">Another <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object is active for this text buffer.</exception>
            <remarks>This method is equivalent to CreateEdit(EditOptions.None, null, null).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.CreateReadOnlyRegionEdit">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit"/> object that handles adding or removing read-only regions from this buffer.
            </summary>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">Another <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object is active for this text buffer, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership">
            <summary>
            Claims ownership of this buffer for the current thread. All subsequent modifications of this <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>
            must be made from the current thread, or else an <see cref="T:System.InvalidOperationException"/> will be raised.
            </summary>
            <exception cref="T:System.InvalidOperationException">This method has been called previously from a different thread, or a
            <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object is active for this text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess">
            <summary>
            Determines whether edit operations on this text buffer are permitted on the calling thread. If <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has
            previously been called, edit operations are permitted only from the same thread that made that call.
            </summary>
            <returns><c>true</c> if the calling thread is allowed to perform edit operations, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.ChangeContentType(Microsoft.VisualStudio.Utilities.IContentType,System.Object)">
            <summary>
            Changes the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for this <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="newContentType">The new <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>.</param>
            <param name="editTag">An arbitrary object that will be associated with this edit transaction.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newContentType"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Another <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object is active for this <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given <paramref name="text"/>at the specified <paramref name="position"/>in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="position">The buffer position at which the first character of the text will appear.</param>
            <param name="text">The text to be inserted.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to insert the text, and then applying it. If the insertion
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted insertion.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">A text edit is currently active, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.Delete(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Deletes a sequence of characters from the buffer.
            </summary>
            <param name="deleteSpan">The span of characters to delete.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to delete the text, and then applying it. If the deletion
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted deletion.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="deleteSpan"/>.End is greater than the length of the buffer.</exception>
            <exception cref="T:System.InvalidOperationException">A TextEdit is currently active, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.Replace(Microsoft.VisualStudio.Text.Span,System.String)">
            <summary>
            Replaces a sequence of characters with different text. This is equivalent to first deleting the text to be replaced and then
            inserting the new text.
            </summary>
            <param name="replaceSpan">The span of characters to replace.</param>
            <param name="replaceWith">The new text to replace the old.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to replace the text, and then applying it. If the replacement
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted replacement.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="replaceSpan"/>.End is greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="replaceWith"/>is null.</exception>
            <exception cref="T:System.InvalidOperationException">A text edit is currently active, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.IsReadOnly(System.Int32)">
            <summary>
            Determines whether a text insertion would be prohibited at <paramref name="position"/> due to an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/>.
            </summary>
            <param name="position">The position of the proposed text insertion.</param>
            <returns>
            <c>true</c> if an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> would prohibit insertions at this position, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is negative or greater than <see cref="P:Microsoft.VisualStudio.Text.ITextBuffer.CurrentSnapshot"/>.Length.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has previously been called, and this call is being made
            from a different thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.IsReadOnly(System.Int32,System.Boolean)">
            <summary>
            Determines whether a text insertion would be prohibited at <paramref name="position"/> due to an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/>.
            </summary>
            <param name="position">The position of the proposed text insertion.</param>
            <param name="isEdit"><c>true</c> if this check is part of an edit. <c>false</c> for a query without side effects.</param>
            <returns><c>true</c> if an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> would prohibit insertions at this position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is negative or greater than <see cref="P:Microsoft.VisualStudio.Text.ITextBuffer.CurrentSnapshot"/>.Length.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has previously been called, and this call is being made
            from a different thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.IsReadOnly(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether a text modification or deletion would be prohibited at <paramref name="span"/> due to an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/>
            </summary>
            <param name="span">The span to check.</param>
            <returns>
            <c>true</c> if the entire span could be deleted or replaced, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:Microsoft.VisualStudio.Text.Span.End"/> property of <paramref name="span"/> is greater than <see cref="P:Microsoft.VisualStudio.Text.ITextBuffer.CurrentSnapshot"/>.Length.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has previously been called, and this call is being made
            from a different thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.IsReadOnly(Microsoft.VisualStudio.Text.Span,System.Boolean)">
            <summary>
            Determines whether a text modification or deletion would be prohibited at <paramref name="span"/> due to an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/>
            </summary>
            <param name="span">The span to check.</param>
            <param name="isEdit"><c>true</c> if this check is part of an edit. <c>false</c> for a querry without side effects.</param>
            <returns><c>true</c> if the entire span could be deleted or replaced, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:Microsoft.VisualStudio.Text.Span.End"/> property of <paramref name="span"/> is greater than <see cref="P:Microsoft.VisualStudio.Text.ITextBuffer.CurrentSnapshot"/>.Length.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has previously been called, and this call is being made
            from a different thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.GetReadOnlyExtents(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Gets a list of read-only regions that overlap the given span.
            </summary>
            <param name="span">
            The span to check for read-only regions.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> of read-only regions that intersect the given span.
            </returns>
            <remarks>
            This method returns an empty list if there are no read-only 
            regions intersecting the span, or if the span is zero-length.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/> is past the end of the buffer.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has previously been called, and this call is being made
            from a different thread.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBuffer.ContentType">
            <summary>Gets the content type of the text in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBuffer.CurrentSnapshot">
            <summary>
            Gets the current content of the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBuffer.EditInProgress">
            <summary>
            Determines whether an edit operation is currently in progress on the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.ReadOnlyRegionsChanged">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit"/> has created or removed read-only regions.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed">
             <summary>
             Occurs when a non-empty <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> is successfully applied. 
             </summary>
             <remarks>
             This event is raised after <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority"/> events and before <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedLowPriority"/> events.
            
             In the case that a second edit is applied by a listener of the Changed event (or the
             ChangedLowPriority or ChangedHighPriority events), the Changed events for the second edit 
             won't be raised until all listeners have been notified of the first edit (via ChangedLowPriority, Changed, and 
             ChangedHighPriority events).  That is, the events for subsequent edits are queued.  This ensures listeners
             recieve the Changed events in the order the edits were applied.
             </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedLowPriority">
            <summary>
            Occurs when a non-empty <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> is successfully applied. 
            </summary>
            <remarks>
            This event is raised after <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority"/> and <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> events.
            
            Changed events for edits made within a ChangedLowPriority, <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/>, or 
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority"/> listener are queued. See <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> for more 
            information about event queuing.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority">
            <summary>
            Occurs when a non-empty <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> is successfully applied. 
            </summary>
            <remarks>
            This event is raised before <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> and <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority"/> events.
            
            Changed events for edits made within a ChangedLowPriority, <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/>, or 
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority"/> listener are queued. See <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> for more 
            information about event queuing.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.Changing">
            <summary>
            Occurs just before a non-empty <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> is applied.
            </summary>
            <remarks>
            <para>
            If the edit operation is canceled in this event, another edit operation can be be started immediately in the event handler.
            For example, this event may be used to provide checkout on edit as an implicit, user-cancelable source control functionality.
            </para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.PostChanged">
            <summary>
            Occurs after the Changed event and any resulting edits.
            </summary>
            <remarks>
            Once <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> events have been raised for an edit as well as any resulting
            edits (i.e. when an edit is made within a Changed listener), the PostChanged event is
            raised.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.ContentTypeChanged">
            <summary>
            Occurs whenever the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> has been changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextBufferFactoryService">
            <summary>
            The factory service for ordinary TextBuffers.
            </summary>
            <remarks>This is a MEF Component, and should be imported as follows:
            [Import]
            ITextBufferFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferFactoryService.CreateTextBuffer">
            <summary>
            Creates an empty <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> "text".
            </summary>
            <returns>
            An empty <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferFactoryService.CreateTextBuffer(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates an empty <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with the specified <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>.
            </summary>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>
            An empty <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with the given ContentType.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="contentType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferFactoryService.CreateTextBuffer(System.String,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with the specified <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> and populates it 
            with the given text.
            </summary>
            <param name="text">The initial text to add.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> object with the given text and <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="text"/> or <paramref name="contentType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferFactoryService.CreateTextBuffer(System.IO.TextReader,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with the given <paramref name="contentType"/> and populates it by 
            reading data from the specified TextReader.
            </summary>
            <param name="reader">The TextReader from which to read.</param>
            <param name="contentType">The <paramref name="contentType"/> for the text contained in the new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/></param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> object with the given TextReader and <paramref name="contentType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="contentType"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBufferFactoryService.TextContentType">
            <summary>
            Predefined default content type. This is the base type for most content types.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBufferFactoryService.PlaintextContentType">
            <summary>
            Predefined content type for plain text files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBufferFactoryService.InertContentType">
            <summary>
            A content type for which no associated artifacts are automatically created.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBufferFactoryService.TextBufferCreated">
            <summary>
            Raised when any <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> is created.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextChange">
            <summary>
            Describes a single contiguous text change operation on the Text Buffer.
            
            All text changes are considered to be the replacement of <c>oldText</c> with <c>newText</c>.
            <para>
            Insertion is a text change in which <c>oldText</c> is an empty string and <c>newText</c> a non-empty string.
            </para>
            <para>
            Deletion is a text change in which  <c>oldText</c> is a non-empty string and <c>newText</c> is an empty string.
            </para>
            <para>
            Modification is a text change in which both <c>oldText</c> and <c>newText</c> are non-empty strings.
            </para>
            </summary>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> objects are immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.OldSpan">
            <summary>
            The span of the text change in the snapshot immediately before the change. 
            </summary>
            <remarks>
            This span is empty for a pure insertion. Its start position may differ from NewSpan.Start only when there is more
            than one <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> included in moving from one snapshot to the next.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.NewSpan">
            <summary>
            The span of the <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> in the snapshot immediately after the change.
            </summary>
            <remarks>
            This span is empty for a pure deletion. Its start position may differ from OldSpan.Start only when there is more
            than one <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> included in moving from one snapshot to the next.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.OldPosition">
            <summary>
            The position of the text change in the snapshot immediately before the change. The position can differ from
            NewPosition only when there is more than one <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> included in moving from one snapshot to the next.
            </summary>
            <remarks>This is the equivalent of <c>OldSpan.Start</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.NewPosition">
            <summary>
            The position of the text change in the snapshot immediately after the change. The position can differ from
            OldPosition only when there is more than one <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> included in moving from one snapshot to the next.
            </summary>
            <remarks>This is the equivalent of <c>NewSpan.Start</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.Delta">
            <summary>
            The effect On the length of the buffer resulting from this change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.OldEnd">
            <summary>
            The end position of the <see cref="P:Microsoft.VisualStudio.Text.ITextChange.OldText"/> in the snapshot immediately before the change.
            </summary>
            <remarks>Equivalent to <c>OldSpan.End</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.NewEnd">
            <summary>
            The end position of the <see cref="P:Microsoft.VisualStudio.Text.ITextChange.NewText"/> in the snapshot immediately after the text change.
            </summary>
            <remarks>Equivalent to <c>NewSpan.End</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.OldText">
            <summary>
            The text that was replaced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.NewText">
            <summary>
            The text that replaced the old text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.OldLength">
            <summary>
            The length of <see cref="P:Microsoft.VisualStudio.Text.ITextChange.OldText"/>.
            </summary>
            <remarks>This is the equivalent of <c>OldSpan.Length</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.NewLength">
            <summary>
            The length of <see cref="P:Microsoft.VisualStudio.Text.ITextChange.NewText"/>.
            </summary>
            <remarks>This is the equivalent of <c>NewSpan.Length</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.LineCountDelta">
            <summary>
            The effect of this change on the number of lines in the snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextEdit">
            <summary>
            Represents a set of editing operations on an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. The positions of all edit operations are specified
            with respect to the state of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> at the time this object was created.
            </summary>
            <remarks>
            <para>At most one <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object may be active at a given time for a particular <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. 
            This object is considered
            active as long as it has been neither Applied nor Cancelled; calling Dispose on an unapplied object is equivalent to calling Cancel. </para>
            <para>The operations performed using this object are not reflected in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> until the <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> 
            method has been called.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given <paramref name="text"/> at the specified <paramref name="position"/>in the text buffer.
            </summary>
            <param name="position">The buffer position at which the first character of the text will appear.</param>
            <param name="text">The text to be inserted.</param>
            <returns><c>true</c> if the insertion succeeded, <c>false</c> if it failed due to a read-only region.</returns>
            <remarks>Inserting an empty string will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Inserts an array of characters at the specified <paramref name="position"/> in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="position">The buffer position at which the first character of the text will appear.</param>
            <param name="characterBuffer">The character array from which characters will be inserted.</param>
            <param name="startIndex">The index in <paramref name="characterBuffer"/> of the first character to insert.</param>
            <param name="length">The number of characters to insert from <paramref name="characterBuffer"/>.</param>
            <returns><c>true</c> if the insertion succeeded, <c>false</c> if it was prevented by a read-only region.</returns>
            <remarks>Inserting zero characters will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="characterBuffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the buffer, or
            <paramref name="startIndex"/> is less than zero, or <paramref name="length"/> is less than zero, or <paramref name="startIndex"/> + <paramref name="length"/> is 
            greater than the length of <paramref name="characterBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Delete(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Deletes a sequence of characters from the buffer.
            </summary>
            <param name="deleteSpan">The span of characters to delete.</param>
            <returns><c>true</c> if the deletion succeeded, <c>false</c> if it was prevented by a read-only region.</returns>
            <remarks>Deleting an empty span will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="deleteSpan"/>.End is greater than the length of the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes a equence of characters from the buffer.
            </summary>
            <param name="startPosition">The position of the first character to delete.</param>
            <param name="charsToDelete">The number of characters to delete.</param>
            <returns><c>true</c> if the deletion succeeded; <c>false</c> if it was prevented by a read-only region.</returns>
            <remarks>Deleting zero characters will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> is less than zero or greater than the length of the buffer, or
            <paramref name="charsToDelete"/> is less than zero, or <paramref name="startPosition"/> + <paramref name="charsToDelete"/>
            is greater than the length of the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Replace(Microsoft.VisualStudio.Text.Span,System.String)">
            <summary>
            Replaces a sequence of characters with different text. This method has the same effect as first deleting the characters in
            <paramref name="replaceSpan"/> and then inserting <paramref name="replaceWith"/>.
            </summary>
            <param name="replaceSpan">The span of characters to replace.</param>
            <param name="replaceWith">The new text.</param>
            <returns><c>true</c> if the replacement succeeded, <c>false</c> if it was prevented by a read-only region.</returns>
            <remarks>Replacing an empty span with an empty string will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="replaceSpan"/>.End is greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="replaceWith"/>is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces a sequence of characters with different text. This method has the same effect as first deleting the 
            <paramref name="charsToReplace"/> and then inserting <paramref name="replaceWith"/>.
            </summary>
            <param name="startPosition">The buffer position at which to start replacing.</param>
            <param name="charsToReplace">The number of characters to replace.</param>
            <param name="replaceWith">The new text.</param>
            <returns><c>true</c> if the replacement succeeded; <c>false</c> if it was prevented by a read-only region.</returns>
            <remarks>Replacing zero characters with an empty string will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> is less than zero or greater than the length of the buffer, or
            <paramref name="charsToReplace"/> is less than zero, or <paramref name="startPosition"/> + <paramref name="charsToReplace"/>
            is greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="replaceWith"/>is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextEdit.HasEffectiveChanges">
            <summary>
            Determines whether the edit has changes in non-read-only regions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextEdit.HasFailedChanges">
            <summary>
            Determines whether any changes failed to be added to this edit due to read-only regions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextSnapshot">
            <summary>
            Provides read access to an immutable snapshot of a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> containing a sequence of Unicode characters. 
            The first character in the sequence has index zero.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetText(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Gets text from the snapshot starting at the beginning of the span and having length equal to the length of the span.
            </summary>
            <param name="span">The span to return.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the span is greater than <see cref="P:Microsoft.VisualStudio.Text.ITextSnapshot.Length"/>.</exception>
            <returns>A non-null string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetText(System.Int32,System.Int32)">
            <summary>
            Gets text from the snapshot starting at <paramref name="startIndex"/> and having length equal to <paramref name="length"/>.
            </summary>
            <param name="startIndex">The starting index.</param>
            <param name="length">The length of text to get.</param>
            <returns>The string of length <paramref name="length"/> starting at <paramref name="startIndex"/> in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero or greater than the length of the snapshot,
            or <paramref name="length"/> is less than zero, or <paramref name="startIndex"/> plus <paramref name="length"/> is greater than the length of the snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetText">
            <summary>
            Gets all the text in the snapshot.
            </summary>
            <returns>A non-null string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.ToCharArray(System.Int32,System.Int32)">
            <summary>
            Converts a range of text to a character array.
            </summary>
            <param name="startIndex">
            The starting index of the range of text.
            </param>
            <param name="length">
            The length of the text.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero or greater than the length of the snapshot, or
            <paramref name="length"/> is less than zero, or <paramref name="startIndex"/> plus <paramref name="length"/> is greater than the length of the snapshot.</exception>
            <returns>The array of characters starting at <paramref name="startIndex"/> in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> and extend to its end.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies a range of text to a character array.
            </summary>
            <param name="sourceIndex">
            The starting index in the text snapshot.
            </param>
            <param name="destination">
            The destination array.
            </param>
            <param name="destinationIndex">
            The index in the destination array at which to start copying the text.
            </param>
            <param name="count">
            The number of characters to copy.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> is less than zero or greater than the length of the snapshot, or
            <paramref name="count"/> is less than zero, or <paramref name="sourceIndex"/> + <paramref name="count"/> is greater than the length of the snapshot, or
            <paramref name="destinationIndex"/> is less than zero, or <paramref name="destinationIndex"/> plus <paramref name="count"/> is greater than the length of <paramref name="destination"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingPoint(System.Int32,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> against this snapshot.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="trackingMode">The tracking mode of the point.</param>
            <returns>A non-null TrackingPoint.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingPoint(System.Int32,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> against this snapshot.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="trackingMode">The tracking mode of the point.</param>
            <param name="trackingFidelity">The tracking fidelity of the point.</param>
            <returns>A non-null TrackingPoint.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the snapshot.</exception>
            <remarks>This text point reprises its previous position when visiting a version that was created by undo or redo.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingSpan(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this snapshot.
            </summary>
            <param name="span">The span of text in this snapshot.</param>
            <param name="trackingMode">How the tracking span will react to changes at its boundaries.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the span is greater than the length of the text snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingSpan(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this snapshot.
            </summary>
            <param name="span">The span of text in this snapshot.</param>
            <param name="trackingMode">How the tracking span should react to changes at its boundaries.</param>
            <param name="trackingFidelity">The tracking fidelity of the span.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the span is greater than the length of the text snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingSpan(System.Int32,System.Int32,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this snapshot.
            </summary>
            <param name="start">The starting position of the tracking span.</param>
            <param name="length">The length of the tracking span.</param>
            <param name="trackingMode">How the tracking span should react to changes at its boundaries.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is negative or greater than <see cref="P:Microsoft.VisualStudio.Text.ITextSnapshot.Length"/>, or
            <paramref name="length"/> is negative, or <paramref name="start"/> plus <paramref name="length"/>
            is less than <paramref name="start"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingSpan(System.Int32,System.Int32,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this snapshot.
            </summary>
            <param name="start">The starting position of the tracking span.</param>
            <param name="length">The length of the tracking span.</param>
            <param name="trackingMode">How the tracking span should react to changes at its boundaries.</param>
            <param name="trackingFidelity">The tracking fidelilty mode.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>..</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is negative or greater than <see cref="P:Microsoft.VisualStudio.Text.ITextSnapshot.Length"/>, or
            <paramref name="length"/> is negative, or <paramref name="start"/> plus <paramref name="length"/>
            is less than <paramref name="start"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetLineFromLineNumber(System.Int32)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> for the given line number.
            </summary>
            <param name="lineNumber">The line number.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lineNumber"/> is less than zero or greater than or equal to LineCount/&gt;.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetLineFromPosition(System.Int32)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> for a line at the given position.
            </summary>
            <param name="position">The position.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than length of line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetLineNumberFromPosition(System.Int32)">
            <summary>
            Gets the number of the line that contains the character at the specified position.
            </summary>
            <returns>The line number of the line in which <paramref name="position"/> lies.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than Length/&gt;.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.Write(System.IO.TextWriter,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Writes a substring of the contents of the snapshot.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to use.</param>
            <param name="span">The span of text to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the span is greater than the length of the snapshot.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.Write(System.IO.TextWriter)">
            <summary>
            Writes the contents of the snapshot.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/>to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.TextBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> of which this is a snapshot.
            </summary>
            <remarks>
            This property always returns the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> object, but the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> is not itself immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.ContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <see cref="P:Microsoft.VisualStudio.Text.ITextSnapshot.TextBuffer"/> when this snapshot was current.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.Version">
            <summary>
            The version of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that this <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> represents.
            </summary>
            <remarks>
            This property always returns the same <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/>. The <see cref="P:Microsoft.VisualStudio.Text.ITextVersion.Changes"/> property is
            initially null and becomes populated when it ceases to be the most recent version.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.Length">
            <summary>
            Gets the number of UTF-16 characters contained in the snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.LineCount">
            <summary>
            Gets the positive number of lines in the snapshot. A snapshot whose <see cref="P:Microsoft.VisualStudio.Text.ITextSnapshot.Length"/> is zero is considered to have one line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.Item(System.Int32)">
            <summary>
            Gets a single character at the specified position.
            </summary>
            <param name="position">The position of the character.</param>
            <returns>The character at <paramref name="position"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than or equal to the length of the snapshot.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.Lines">
            <summary>
            An enumerator for the set of lines in the snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextSnapshotLine">
            <summary>
            Immutable information about a line of text from an ITextSnapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshotLine.GetText">
            <summary>
            The text of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshotLine.GetTextIncludingLineBreak">
            <summary>
            The text of the line, including any line break characters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshotLine.GetLineBreakText">
            <summary>
            The string consisting of the line break characters (if any) at the
            end of the line. Has zero length for the last line in the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.Snapshot">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> in which the line appears.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.Extent">
            <summary>
            The extent of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.ExtentIncludingLineBreak">
            <summary>
            The extent of the line, including any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.LineNumber">
            <summary>
            The 0-origin line number of the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.Start">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> of the first character in the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.Length">
            <summary>
            Length of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.LengthIncludingLineBreak">
            <summary>
            Length of the line, including any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.End">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> of the first character past the end of the line, excluding any
            line break characters (thus will address a line break character, except 
            for the last line in the buffer, in which case it addresses a
            position past the end of the buffer).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.EndIncludingLineBreak">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> of the first character past the end of the line, including any
            line break characters (thus will address the first character in 
            the succeeding line, unless this is the last line, in which case it addresses a
            position past the end of the buffer).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.LineBreakLength">
            <summary>
            Length of line break characters (always falls in the range [0..2]).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextVersion">
            <summary>
            Describes a version of an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. Each application of an <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> to a text buffer
            generates a new ITextVersion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingPoint(System.Int32,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> against this version.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="trackingMode">The tracking mode of the point.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of this version.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingPoint(System.Int32,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> against this version.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="trackingMode">The tracking mode of the point.</param>
            <param name="trackingFidelity">The tracking fidelity of the point.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the snapshot.</exception>
            <remarks>This text point reprises its previous position when visiting a version that was created by undo or redo.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingSpan(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this version.
            </summary>
            <param name="span">The span of text in this snapshot that the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> should represent.</param>
            <param name="trackingMode">How the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> will react to changes at its boundaries.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/>.End is greater than the length of this version, or
            <paramref name="trackingMode"/> is equal to <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingSpan(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this version.
            </summary>
            <param name="span">The span of text in this snapshot that the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> should represent.</param>
            <param name="trackingMode">How the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> will react to changes at its boundaries.</param>
            <param name="trackingFidelity">The tracking fidelity of the span.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/>.End is greater than <see cref="P:Microsoft.VisualStudio.Text.ITextVersion.Length"/>, or
            <paramref name="trackingMode"/> is equal to <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingSpan(System.Int32,System.Int32,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this version.
            </summary>
            <param name="start">The starting position of the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> in this version.</param>
            <param name="length">The length of the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> in this version.</param>
            <param name="trackingMode">How the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> will react to changes at its boundaries.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is negative or greater than the length of this version, or
            <paramref name="length"/> is negative, or <paramref name="start"/> + <paramref name="length"/>
            is less than <paramref name="start"/>, or
            <paramref name="trackingMode"/> is equal to <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingSpan(System.Int32,System.Int32,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this version.
            </summary>
            <param name="start">The starting position of the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> in this snapshot.</param>
            <param name="length">The length of the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> in this snapshot.</param>
            <param name="trackingMode">How the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> will react to changes at its boundaries.</param>
            <param name="trackingFidelity">The tracking fidelity mode.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is negative or greater than <see cref="P:Microsoft.VisualStudio.Text.ITextVersion.Length"/>, or
            <paramref name="length"/> is negative, or <paramref name="start"/> + <paramref name="length"/>
            is less than <paramref name="start"/>, or
            <paramref name="trackingMode"/> is equal to <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateCustomTrackingSpan(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.TrackingFidelityMode,System.Object,Microsoft.VisualStudio.Text.CustomTrackToVersion)">
            <summary>
            Creates a custom <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this version.
            </summary>
            <param name="span">The span of text in this snapshot that the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> should represent.</param>
            <param name="trackingFidelity">The tracking fidelity of the span.</param>
            <param name="customState">Client-defined state associated with the span.</param>
            <param name="behavior">The custom tracking behavior.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/>.End is greater than <see cref="P:Microsoft.VisualStudio.Text.ITextVersion.Length"/>.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.Next">
            <summary>
            Gets the next <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/>. Returns null if and only if this is the most recent version of its text buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.Length">
            <summary>
            Gets the length in characters of this <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.Changes">
            <summary>
            Gets the text changes that produce the next version. Returns null if and only if this is the most recent version of its text buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.TextBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to which this <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/> applies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.VersionNumber">
            <summary>
            The version number for this version. It is used for comparisons between versions of the same buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.ReiteratedVersionNumber">
             <summary>
             Gets the oldest version number for which all text changes between that version and this version have
             been canceled out by corresponding undo/redo operations.
             </summary>
             <remarks>
             If ReiteratedVersionNumber is not equal to <see cref="P:Microsoft.VisualStudio.Text.ITextVersion.VersionNumber"/>, then for every 
             <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> not originated by an undo operation between ReiteratedVersionNumber and VersionNumber, there is a
             corresponding <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> originated by an undo operation that cancels it out.  So the contents of the two 
             versions are necessarily identical.
            <para>
             Setting this property correctly is the responsibility of the undo system; aside from this
             property, the text buffer and related classes are unaware of undo and redo.
             </para>
             <para>
             Note that the <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/> objects created through <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.ChangeContentType(Microsoft.VisualStudio.Utilities.IContentType,System.Object)"/>
             have no text changes and will therefore keep the ReiteratedVersionNumber of the
             previous version.
             </para>
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITrackingPoint">
            <summary>
            A tracking position in an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingPoint.GetPoint(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the tracking point to a particular snapshot of its <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="snapshot">The snapshot to which to map the tracking point.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingPoint.GetPosition(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            The position of the tracking point in the specified <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </summary>
            <param name="snapshot">The snapshot to which to map the position.</param>
            <returns>An integer position in the given snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="P:Microsoft.VisualStudio.Text.ITrackingPoint.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingPoint.GetPosition(Microsoft.VisualStudio.Text.ITextVersion)">
            <summary>
            The position of the tracking point in the specified <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/>.
            </summary>
            <param name="version">The version to which to map the position.</param>
            <returns>An integer position in the given version.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="version"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="version"/> is not a version of <see cref="P:Microsoft.VisualStudio.Text.ITrackingPoint.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingPoint.GetCharacter(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps this tracking point to the specified snapshot and gets the character at that position.
            </summary>
            <param name="snapshot">The snapshot to which to map the position.</param>
            <returns>The character at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This ITrackingPoint denotes the end position of the snapshot.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingPoint.TextBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to which this point refers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingPoint.TrackingMode">
            <summary>
            Determines whether the tracking point shifts or remains stationary when insertions occur at its position.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingPoint.TrackingFidelity">
            <summary>
            Determines how the tracking point behaves when moving to a previous version or when
            encountering versions that are replications of previous versions (due to undo or redo).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITrackingSpan">
            <summary>
            A span of text in an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that grows or shrinks 
            with changes to the text buffer. The span may be empty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingSpan.GetSpan(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the tracking span to a particular snapshot of its text buffer.
            </summary>
            <param name="snapshot">The snapshot to which to map the tracking span.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingSpan.GetSpan(Microsoft.VisualStudio.Text.ITextVersion)">
            <summary>
            Maps the TrackingSpan to a particular version of its text buffer.
            </summary>
            <param name="version">The version to which to map the tracking span.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="version"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="version"/> is not a version of <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingSpan.GetText(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the tracking span to a particular snapshot of its text buffer and gets the text it designates.
            </summary>
            <param name="snapshot">The snapshot to which to map the tracking span.</param>
            <returns>The contents of the tracking span in the specified text snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingSpan.GetStartPoint(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the start of the tracking span to a particular snapshot of its text buffer.
            </summary>
            <param name="snapshot">The snapshot to which to map the start point.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> of the provided snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingSpan.GetEndPoint(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the end of the tracking span to a particular snapshot of its text buffer.
            </summary>
            <param name="snapshot">The snapshot to which to map the end point.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> of the provided snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer"/>.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to which this tracking span refers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingSpan.TrackingMode">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TrackingMode"/> of this tracking span, which determines how it behaves when insertions occur at its edges.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingSpan.TrackingFidelity">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.TrackingFidelityMode"/> of the tracking span, which determines how it behaves when moving to a previous version or when
            encountering versions that are replications of previous versions (due to undo or redo).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection">
            <summary>
            A read-only collection of <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> objects, all from the same snapshot. 
            </summary>
            <remarks>
            The snapshot spans are sorted by start position, 
            with adjacent and overlapping spans combined.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.#ctor">
            <summary>
            Initializes an empty <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> with a single element.
            </summary>
            <param name="span">The sole member of the collection.</param>
            <exception cref="T:System.ArgumentException"><paramref name="span"/> is not initialized.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> from a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> and a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </summary>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to apply to <paramref name="spans"/>.</param>
            <param name="spans">The normalized spans.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> or <paramref name="spans"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The spans in <paramref name="spans"/> extend beyond the end of <paramref name="snapshot"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> from a list of <see cref="T:Microsoft.VisualStudio.Text.Span"/>s and a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </summary>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to apply to <paramref name="spans"/>.</param>
            <param name="spans">An arbitrary set of <see cref="T:Microsoft.VisualStudio.Text.Span"/> objects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> or <paramref name="spans"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The spans in <paramref name="spans"/> extend beyond the end of <paramref name="snapshot"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.SnapshotSpan})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> from a list of <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> objects.
            </summary>
            <param name="snapshotSpans">An arbitrary set of <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> objects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshotSpans"/> is null.</exception>
            <exception cref="T:System.ArgumentException">A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> is uninitialized, or it
            does not refer to the same <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> as the other snapshot spans, or it refers to an uninitialized <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.op_Implicit(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)~Microsoft.VisualStudio.Text.NormalizedSpanCollection">
            <summary>
            Converts the specified <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> to a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/>.
            </summary>
            <param name="spans">The collection to convert.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> containing the corresponding normalized collection of <see cref="T:Microsoft.VisualStudio.Text.Span"/> objects.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Union(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Computes the union of two snapshot span collections and normalizes the result.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.</param>
            <param name="right">The second <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.</param>
            <returns>The normalized union of the input collections.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Overlap(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Computes the overlap of two normalized snapshot span collections and normalizes the result.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.</param>
            <param name="right">The second <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/></param>
            <returns>The normalized set of overlapping snapshot spans.</returns>
            <remarks>Empty SnapshotSpans never overlap any other SnapshotSpan.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The input collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Intersection(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Computes the intersection of two normalized snapshot span collections and normalizes the result.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.</param>
            <param name="right">The second<see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.</param>
            <returns>The normalized set of intersecting spans.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Difference(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Computes the difference between two normalized snapshot span collections and normalizes the result.
            </summary>
            <param name="left">The collection from which to subtract <paramref name="right"/>.</param>
            <param name="right">The collection to subtract from <paramref name="left"/>.</param>
            <returns>The normalized set difference.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The input collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.OverlapsWith(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Determines whether this collection overlaps with another normalized snapshot span collection.
            </summary>
            <param name="set">The collection.</param>
            <returns><c>true</c> if the collections refer to the same snapshot and their spans overlap, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.IntersectsWith(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Determines whether this collection intersects with another normalized snapshot span collection.
            </summary>
            <param name="set">The colllection.</param>
            <returns><c>true</c> if the collections intersect, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The input collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.IndexOf(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the index of the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
            <param name="item">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.</param>
            <returns>The index of the snapshot span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#IList{Microsoft#VisualStudio#Text#SnapshotSpan}#Insert(System.Int32,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Inserts a snapshot span into the list. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location at which to insert the snapshot span.</param>
            <param name="item">The snapshot span to insert.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#IList{Microsoft#VisualStudio#Text#SnapshotSpan}#RemoveAt(System.Int32)">
            <summary>
            Removes a snapshot span at the specified location. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location at which to remove the snapshot span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#ICollection{Microsoft#VisualStudio#Text#SnapshotSpan}#Add(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Adds a snapshot span to the collection. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item">The snapshot span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#ICollection{Microsoft#VisualStudio#Text#SnapshotSpan}#Clear">
            <summary>
            Clears the collection. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Contains(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether the collection contains the specified snapshot span.
            </summary>
            <param name="item">The snapshot span.</param>
            <returns><c>true</c> if the collection contains the snapshot span, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.CopyTo(Microsoft.VisualStudio.Text.SnapshotSpan[],System.Int32)">
            <summary>
            Copies the collection to an array of snapshot spans at the specified location.
            </summary>
            <param name="array">The array of snapshot spans.</param>
            <param name="arrayIndex">The location to which to copy the snapshot spans.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is negative or greater than the array length, 
            or the number of spans in the collection is greater than the length of the array minus the array index.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#ICollection{Microsoft#VisualStudio#Text#SnapshotSpan}#Remove(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Removes the specified span from the collection. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item">The snapshot span.</param>
            <returns><c>true</c> if it was possible to remove the span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an object to the list. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">The object to add.</param>
            <returns>The location at which the object was added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#Clear">
            <summary>
            Clears the list. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains the specified snapshot span.
            </summary>
            <param name="value">The snapshot span.</param>
            <returns><c>true</c> if the snapshot span is contained in the collection, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.IndexOf(System.Object)">
            <summary>
            Gets the index of the specified snapshot span.
            </summary>
            <param name="value">The snapshot span.</param>
            <returns>The location of the snapshot span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a snapshot span into the list at the specified location. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location.</param>
            <param name="value">The snapshot span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the specified snapshot span. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary> 
            <param name="value">The snapshot span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes a snapshot span at the specified location. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the snapshot spans in this collection to the specified array, starting at the specified index.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The location at which to start copying.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is negative, or greater than
            the length of the array, or the number of spans is greater than the length of the array less the index.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is not one-dimensional.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.op_Equality(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> objects are the same.
            </summary>
            <param name="left">The first collection.</param>
            <param name="right">The second collection.</param>
            <returns><c>true</c> if the two sets are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.op_Inequality(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> are different..
            </summary>
            <param name="left">The first collection.</param>
            <param name="right">The second collection.</param>
            <returns><c>true</c> if the two collections are different.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.GetHashCode">
            <summary>
            Gets a hash code for the collection.
            </summary>
            <returns>A 32-bit hash code associated with the collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Equals(System.Object)">
            <summary>
            Determines whether two snapshot span collections are equal
            </summary>
            <param name="obj">The second collection.</param>
            <returns><c>true</c> if the two collections are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.ToString">
            <summary>
            Converts the spans to a string..
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Item(System.Int32)">
            <summary>
            Gets the snapshot span at the specified location. The setter throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location at which to get the snapshot span.</param>
            <returns>The snapshot span.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Count">
            <summary>
            Gets the number of spans in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#ICollection{Microsoft#VisualStudio#Text#SnapshotSpan}#IsReadOnly">
            <summary>
            Determines whether the collection is read-only. Always returns <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#IsFixedSize">
            <summary>
            Determines whether the collection is of fixed size. Always returns <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets the snapshot span at the specified location. The setter throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location.</param>
            <returns>The snapshot span.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#IsReadOnly">
            <summary>
            Determines whether this collection is read-only. This property always returns <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Determines whether this collection is synchronized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronized access to this collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection">
            <summary>
            A collection of spans that are sorted by start position, with adjacent and overlapping spans combined.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> that is empty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.#ctor(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> that contains the specified span.
            </summary>
            <param name="span">Span contained by the span set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> that contains the specified list of spans.
            </summary>
            <param name="spans">The spans to be added.</param>
            <remarks>
            <para>The list of spans will be sorted and normalized (overlapping and adjoining spans will be combined).</para>
            <para>This constructor runs in O(N log N) time, where N = spans.Count.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="spans"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.Union(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Finds the union of two span sets.
            </summary>
            <param name="left">
            The first span set.
            </param>
            <param name="right">
            The second span set.
            </param>
            <returns>
            The new span set that corresponds to the union of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <remarks>This operator runs in O(N+M) time where N = left.Count, M = right.Count.</remarks>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="left"/> or <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.Overlap(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Findx the overlap of two span sets.
            </summary>
            <param name="left">The first span set.</param>
            <param name="right">The second span set.</param>
            <returns>The new span set that corresponds to the overlap of <paramref name="left"/> and <paramref name="right"/>.</returns>
            <remarks>This operator runs in O(N+M) time where N = left.Count, M = right.Count.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.Intersection(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Finds the intersection of two span sets.
            </summary>
            <param name="left">The first span set.</param>
            <param name="right">The second span set.</param>
            <returns>The new span set that corresponds to the intersection of <paramref name="left"/> and <paramref name="right"/>.</returns>
            <remarks>This operator runs in O(N+M) time where N = left.Count, M = right.Count.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.Difference(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Finds the difference between two sets. The difference is defined as everything in the first span set that is not in the second span set.
            </summary>
            <param name="left">The first span set.</param>
            <param name="right">The second span set.</param>
            <returns>The new span set that corresponds to the difference between <paramref name="left"/> and <paramref name="right"/>.</returns>
            <remarks>
            Empty spans in the second set do not affect the first set at all. This method returns empty spans in the first set that are not contained by any set in
            the second set.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.op_Equality(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Determines whether two span sets are the same. 
            </summary>
            <param name="left">The first set.</param>
            <param name="right">The second set.</param>
            <returns><c>true</c> if the two sets are equivalent, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.op_Inequality(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Determines whether two span sets are not the same.
            </summary>
            <param name="left">The first set.</param>
            <param name="right">The second set.</param>
            <returns><c>true</c> if the two sets are not equivalent, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.OverlapsWith(Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Determines whether this span set overlaps with another span set.
            </summary>
            <param name="set">The span set to test.</param>
            <returns><c>true</c> if the span sets overlap, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.IntersectsWith(Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Determines wheher this span set intersects with another span set.
            </summary>
            <param name="set">Set to test.</param>
            <returns><c>true</c> if the span sets intersect, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.GetHashCode">
            <summary>
            Gets a unique hash code for the span set.
            </summary>
            <returns>A 32-bit hash code associated with the set.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.Equals(System.Object)">
            <summary>
            Determines whether this span set is the same as another object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.ToString">
            <summary>
            Provides a string representation of the set.
            </summary>
            <returns>Thetring representation of the set.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.#ctor(Microsoft.VisualStudio.Text.NormalizedSpanCollection.OrderedSpanList)">
            <summary>
            Private ctor for use when the span list is already normalized.
            </summary>
            <param name="normalizedSpans">An already normalized span list.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PointTrackingMode">
            <summary>
            Represents tracking modes for <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PointTrackingMode.Positive">
            <summary>
            With this setting, a point tracks toward the end of the document, so that an
            insertion at the current position pushes the point to the end of the inserted text. 
            If a replacement contains the point, it will end up at the end of the replacement text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PointTrackingMode.Negative">
            <summary>
            With this setting, a point tracks toward the beginning of the document, 
            so that an insertion at the current position leaves the point unaffected.  If a
            replacement contains the point, it will end up at the beginning of the replacement text.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PositionAffinity">
            <summary>
            Describes whether a position in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that can be thought of as
            lying between two characters is coupled to the preceding character or the following character.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor">
            <summary>
            The position is coupled to with the preceding character.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor">
            <summary>
            The position is coupled to the following character.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PreContentChangedEventArgs">
            <summary>
            Information provided before content changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PreContentChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.INormalizedTextChangeCollection)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.PreContentChangedEventArgs"/>.
            </summary>
            <param name="beforeSnapshot">A text snapshot before the change.</param>
            <param name="changes">The collection of changes.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.PreContentChangedEventArgs.BeforeSnapshot">
            <summary>
            Gets the text snapshot before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.PreContentChangedEventArgs.Changes">
            <summary>
            Gets the collection of changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions">
            <summary>
            Options that apply to an <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions.None">
            <summary>
            No special treatment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions.FillInMappingMode">
            <summary>
            When mapping spans, include hidden text between the start point and the end point.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs">
            <summary>
            Provides data about an edit transaction on a <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/> in which the set of hidden source spans has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextContentChangedEventArgs">
            <summary>
            Provides information about an edit transaction on an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextContentChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.EditOptions,System.Object)">
            <summary>
            Initializes an new instance of <see cref="T:Microsoft.VisualStudio.Text.TextContentChangedEventArgs"/> for a Change event.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> immediately after the change occurred.</param>
            <param name="options">Edit options that were applied to this change.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="beforeSnapshot"/> or
            <paramref name="afterSnapshot"/> or
            <paramref name="options"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangedEventArgs.Changes">
            <summary>
            Gets the set of changes that occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangedEventArgs.Options">
            <summary>
            Gets the edit options that were applied to this change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection,System.Object)">
            <summary>
            Initialize a new instance of an <see cref="T:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs"/> object.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> immediately after the change occurred.</param>
            <param name="elidedSpans">Zero or more source spans that were hidden.</param>
            <param name="expandedSpans">Zero or more source spans that were expanded.</param>
            <param name="sourceToken">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException">One of <paramref name="beforeSnapshot"/>,  <paramref name="afterSnapshot"/>,
            <paramref name="elidedSpans"/>, or <paramref name="expandedSpans"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs.ElidedSpans">
            <summary>
            The set of source spans that were inserted into the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> by this edit transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs.ExpandedSpans">
            <summary>
            The set of source spans that were deleted from the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> by this edit transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs.Before">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> before the change occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs.After">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> after the change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs">
            <summary>
            Provides data about a change of <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> on a member of a <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Utilities.IContentType,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs"/> with the specified
            text buffer and the old and new content types.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> whose <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> has changed.</param>
            <param name="beforeContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> before the change.</param>
            <param name="afterContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> after the change.</param>
            <exception cref="T:System.ArgumentNullException">One of <paramref name="textBuffer"/>, <paramref name="beforeContentType"/>, 
            or <paramref name="afterContentType"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs.TextBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> whose <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> has changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs.BeforeContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs.AfterContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> after the change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.GraphBuffersChangedEventArgs">
            <summary>
            Information provided when a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> is added or removed from a <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.GraphBuffersChangedEventArgs.#ctor(System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITextBuffer},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Projection.GraphBuffersChangedEventArgs"/> with the provided buffers.
            </summary>
            <param name="addedBuffers">The list of buffers that were added.</param>
            <param name="removedBuffers">The list of buffers that were removed.</param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="addedBuffers"/> or <paramref name="removedBuffers"/>
            is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.GraphBuffersChangedEventArgs.AddedBuffers">
            <summary>
            The list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects that have been added to the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.GraphBuffersChangedEventArgs.RemovedBuffers">
            <summary>
            The list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects that have been removed from the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph">
            <summary>
            Represents a graph of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects. The 
            top level text buffer might or might not be a <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.GetTextBuffers(System.Predicate{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Finds all the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects in the graph that match the specified predicate.
            </summary>
            <param name="match">The predicate used for matching.</param>
            <returns>A non-null but possibly empty collection of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.CreateMappingPoint(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/> with the specified snapshot point and tracking mode.
            </summary>
            <param name="point">A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in one of the buffers of the graph.</param>
            <param name="trackingMode">How to track the point.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/> that can track within its buffer and map within the graph.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.CreateMappingSpan(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Initializes a new instance of a  <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/>.
            </summary>
            <param name="span">A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> in one of the buffers of the graph.</param>
            <param name="trackingMode">How to track the span.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/> that can track within its buffer and map within the graph.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToBuffer(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps a position in the graph to the corresponding position in a buffer lower in the graph. Source buffers are considered to be lower than 
            the projection buffers that consume them.
            </summary>
            <param name="position">The position in a buffer in the graph.</param>
            <param name="trackingMode">How <paramref name="position"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetBuffer">The buffer to which to map the <paramref name="position"/>.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting  has no effect if the mapping is unambiguous.</param>
            <returns>A point in a snapshot of the target buffer, or null if <paramref name="position"/> is not in this graph or does not map to 
            the target buffer with the given affinity.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>.Snapshot or <paramref name="targetBuffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps a position in the graph to the corresponding position in a snapshot lower in the graph. Source buffers are considered to be lower than 
            the projection buffers that consume them.
            </summary>
            <param name="position">The position in a buffer in the graph.</param>
            <param name="trackingMode">How <paramref name="position"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetSnapshot">The buffer to which to map the <paramref name="position"/>.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting has no effect if the mapping is unambiguous.</param>
            <returns>A point in a snapshot of the target buffer, or null if <paramref name="position"/> is not in this graph or does not map to the
            target buffer with the given affinity.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>.Snapshot or <paramref name="targetSnapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToFirstMatch(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,System.Predicate{Microsoft.VisualStudio.Text.ITextSnapshot},Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps a position in the graph to a position in a matching buffer that is lower in the graph. Source buffers are 
            considered to be lower than the projection buffers that consume them.
            </summary>
            <param name="position">The position in a buffer in the graph.</param>
            <param name="trackingMode">How <paramref name="position"/> is tracked to the current snapshot if necessary.</param>
            <param name="match">The predicate that identifies the target buffer.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting has no effect if the mapping is unambiguous.</param>
            <returns>A point in a snapshot of the target buffer, or null if <paramref name="position"/> does not map down to any buffer 
            selected by <paramref name="match"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>.Snapshot or <paramref name="match"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
            <remarks>The <paramref name="match"/> predicate is called on each text buffer in the buffer graph until it
            returns <c>true</c>. The predicate will not be called again.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToInsertionPoint(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,System.Predicate{Microsoft.VisualStudio.Text.ITextSnapshot})">
            <summary>
            Maps a position in some buffer in the graph to a position in a matching buffer that is lower in the graph and to which an
            insertion would be routed. Source buffers are considered to be lower than the projection buffers that consume them.
            </summary>
            <param name="position">the position in a buffer in the graph.</param>
            <param name="trackingMode">How <paramref name="position"/> is tracked to the current snapshot if necessary.</param>
            <param name="match">The predicate that identifies the target buffer.</param>
            <returns>A point in a snapshot of some source buffer, or null if <paramref name="position"/> is not in this graph or  does not
            map down to any buffer selected by <paramref name="match"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>.Snapshot or <paramref name="match"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToBuffer(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Maps a snapshot span in some buffer in the graph to a sequence of zero or more spans in a buffer that is lower in the graph.
            Source buffers are considered to be lower than the projection buffers that consume them.
            </summary>
            <param name="span">The span that is to be mapped.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetBuffer">The buffer to which to map the span.</param>
            <returns>A collection of zero or more snapshot spans in the target buffer to which the span maps.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot or <paramref name="targetBuffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToSnapshot(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps a snapshot span in some buffer in the graph to a sequence of zero or more spans in a buffer that is lower in the graph.
            Source buffers are considered to be lower than the projection buffers that consume them.
            </summary>
            <param name="span">The span that is to be mapped.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetSnapshot">The buffer to which to map the span.</param>
            <returns>A collection of zero or more snapshot spans in the target buffer to which the span maps.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot or <paramref name="targetSnapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToFirstMatch(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,System.Predicate{Microsoft.VisualStudio.Text.ITextSnapshot})">
            <summary>
            Maps a snapshot span in some buffer in the graph to a sequence of zero or more spans in some source snapshot selected by a predicate.
            </summary>
            <param name="span">The span that is to be mapped.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="match">The predicate that identifies the target buffer.</param>
            <returns>A collection of zero or more snapshot spans in the target buffer to which the topSpan maps.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot or <paramref name="match"/>  is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
            <remarks><paramref name="match"/> is called on each text buffer in the buffer graph until it
            returns <c>true</c>. The predicate will not be called again.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToBuffer(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.PositionAffinity,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Maps a position in the current snapshot of some buffer that is a member of the buffer graph to a snapshot of some buffer.
            </summary>
            <param name="point">A point in some buffer in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <param name="trackingMode">How <paramref name="point"/> is tracked to the current snapshot if necessary.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting has no effect if the mapping is unambiguous.</param>
            <param name="targetBuffer">The buffer to which to map.</param>
            <returns>The corresponding position in a snapshot of the target buffer, or null if the position does not map to the target buffer 
            using this graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="point"/>.Snapshot is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.PositionAffinity,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps a position in the current snapshot of some buffer that is a member of the buffer graph to specified snapshot.
            </summary>
            <param name="point">A point in some buffer in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <param name="trackingMode">How <paramref name="point"/> is tracked to the current snapshot if necessary.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting has no effect if the mapping is unambiguous.</param>
            <param name="targetSnapshot">The snapshot to which to map.</param>
            <returns>The corresponding position in <paramref name="targetSnapshot"/>, or null if the position does not map to <paramref name="targetSnapshot"/> 
            using this graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="point"/>.Snapshot is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToFirstMatch(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,System.Predicate{Microsoft.VisualStudio.Text.ITextSnapshot},Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps a position in the current snapshot of some buffer that is a member of the buffer graph to a snapshot of some buffer
            that is selected by a predicate.
            </summary>
            <param name="point">A point in some buffer in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <param name="trackingMode">How <paramref name="point"/> is tracked to the current snapshot if necessary.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting has no effect if the mapping is unambiguous.</param>
            <param name="match">The predicate that identifies the target buffer.</param>
            <remarks><paramref name="match"/> is called for each text buffer in the buffer graph until it
            returns <c>true</c>. The predicate will not be called again.</remarks>
            <returns>The corresponding position in a snapshot of the matching buffer, or null if does not map to the matching buffer using
            this graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="point"/>.Snapshot or <paramref name="match"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToBuffer(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Maps a span in the current snapshot of some buffer that is a member of the buffer graph to a sequence of spans in a snapshot of 
            a designated buffer.
            </summary>
            <param name="span">A span in some buffer in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetBuffer">The buffer to which to map.</param>
            <returns>A collection of zero or more snapshot spans in <paramref name="targetBuffer"/> to which the span maps using this graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToSnapshot(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps a span in the current snapshot of some buffer that is a member of the buffer graph to a sequence of spans in a snapshot of 
            a designated buffer.
            </summary>
            <param name="span">A span in some buffer in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetSnapshot">The snapshot to which to map.</param>
            <returns>A collection of zero or more snapshot spans in <paramref name="targetSnapshot"/> to which the span maps using this graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToFirstMatch(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,System.Predicate{Microsoft.VisualStudio.Text.ITextSnapshot})">
            <summary>
            Maps a span in the current snapshot of some buffer that is a member of the buffer graph up to a sequence of spans in a snapshot of 
            some buffer that is selected by a predicate.
            </summary>
            <param name="span">A span in some buffer in the IBufferGraph.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="match">The predicate that identifies the target buffer.</param>
            <returns>A collection of zero or more snapshot spans in the buffer selected by <paramref name="match"/>.</returns>
            <remarks><paramref name="match"/> is called on each text buffer in the graph until it
            returns <c>true</c>. The predicate will not be called again.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot or <paramref name="match"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IBufferGraph.TopBuffer">
            <summary>
            Gets the top text buffer in the buffer graph.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IBufferGraph.GraphBuffersChanged">
            <summary>
            Occurs when the set of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects in the buffer graph changes.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IBufferGraph.GraphBufferContentTypeChanged">
            <summary>
            Occurs when the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of any <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> in the buffer graph changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IBufferGraphFactoryService">
            <summary>
            Creates a buffer graph from a graph of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects created by projection.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IBufferGraphFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraphFactoryService.CreateBufferGraph(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of an <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> for the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</returns>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="textBuffer"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer">
            <summary>
            A restricted projection buffer that has exactly one source buffer. Spans from the source buffer
            must appear in the same order in the projection buffer as in the source buffer.
            </summary>
            <remarks>
            The source spans of an elision buffer are all <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgeInclusive"/>. Consequently,
            if all of the contents of a source span are deleted, and later an insertion is made at the location of that span
            in the source buffer, the insertion will appear in the elision buffer.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase">
            <summary>
            A text buffer that contains projections of other text buffers, composed
            of a list of text spans of those buffers. The other buffers that contribute to
            the projection buffer are called source buffers, and the text spans that describe
            the contributed regions are called source spans.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given <paramref name="text"/> at the specified <paramref name="position"/> in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="position">The buffer position at which the first character of the text will appear.</param>
            <param name="text">The text to be inserted.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to insert the text, and then applying it. If the insertion
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted insertion.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">A TextEdit is currently active.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase.Delete(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Deletes a span of characters from the buffer.
            </summary>
            <param name="deleteSpan">The span of characters to delete.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to delete the text, and then applying it. If the deletion
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted deletion.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="deleteSpan"/>.The end of the span is greater than the length of the buffer.</exception>
            <exception cref="T:System.InvalidOperationException">A TextEdit is currently active.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase.Replace(Microsoft.VisualStudio.Text.Span,System.String)">
            <summary>
            Replaces a span of characters with different text. This is equivalent to first deleting the text to be replaced and then
            inserting the new text.
            </summary>
            <param name="replaceSpan">The span of characters to replace.</param>
            <param name="replaceWith">The new text.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to replace the text, and then applying it. If the replacement
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted replacement.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="replaceSpan"/>.The end of the span is greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="replaceWith"/>is null.</exception>
            <exception cref="T:System.InvalidOperationException">A TextEdit is currently active.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase.CurrentSnapshot">
            <summary>
            The current snapshot of the contents of the projection buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase.SourceBuffers">
            <summary>
            The set of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects that directly contribute to the projection buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.ElideSpans(Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Hides the text designated by <paramref name="spansToElide"/>. 
            </summary>
            <param name="spansToElide">The spans of text to hide with respect to the current snapshot of the source buffer. 
            It is not an error if some of the designated text is already hidden. These spans are converted to EdgeExclusive
            tracking spans.</param>
            <returns>A newly generated snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="spansToElide"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the final span in <paramref name="spansToElide"/> is greater 
            than <see cref="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.SourceBuffer"/>.CurrentSnapshot.Length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.ExpandSpans(Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Expands the text specified by <paramref name="spansToExpand"/>.
            </summary>
            <param name="spansToExpand">The spans of text to expand, with respect to the current snapshot of the source buffer.
            It is not an error if some of the designated text is already expanded.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="spansToExpand"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the final spans in <paramref name="spansToExpand"/> is greater 
            than <see cref="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.SourceBuffer"/>.CurrentSnapshot.Length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.ModifySpans(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Modifies the exposed text by hiding <paramref name="spansToElide"/> and then expanding <paramref name="spansToExpand"/>
            in a single transaction.
            </summary>
            <param name="spansToElide">The spans of text to hide with respect to the current snapshot of the source buffer. 
            It is not an error if some of the designated text is already hidden. These spans are converted to EdgeExclusive
            tracking spans. This parameter may be null.</param>
            <param name="spansToExpand">The spans of text to expand, with respect to the current snapshot of the source buffer.
            It is not an error if some of the designated text is already expanded. This parameter may be null.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the final spans in <paramref name="spansToElide"/> or 
            <paramref name="spansToExpand"/> is greater than <see cref="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.SourceBuffer"/>.CurrentSnapshot.Length.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.SourceBuffer">
            <summary>
            Gets the source buffer of this elision buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.CurrentSnapshot">
            <summary>
            Gets the current snapshot of this elision buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.Options">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions"/> in effect for this <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/>.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.SourceSpansChanged">
            <summary>
            Occurs when the set of hidden spans changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IElisionSnapshot">
            <summary>
            A snapshot from an <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/> object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot">
            <summary>
            An immutable text snapshot that represents a state of an <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.
            This snapshot contains projections of other text snapshots, described
            by a list of tracking spans from those buffers. Every modification of a projection buffer
            or one of its source buffers generates a new projection snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.GetMatchingSnapshot(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the snapshot of the specified text buffer that corresponds to this snapshot.
            </summary>
            <param name="textBuffer"></param>
            <returns>The snapshot of the text buffer. Returns null if <paramref name="textBuffer"/> is not a text buffer of this projection buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.GetSourceSpans(System.Int32,System.Int32)">
            <summary>
            Gets a read-only collection of source snapshot spans starting at the specified span index.
            The <paramref name="startSpanIndex"/> is an index into the collection of source spans, not into the characters
            in the text buffer.
            </summary>
            <param name="startSpanIndex">The position at which to start getting snapshot spans.</param>
            <param name="count">The number of spans to get.</param>
            <returns>A read-only collection of <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> objects that are sources of the projection snapshot.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startSpanIndex"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than zero or <paramref name="count"/> plus <paramref name="startSpanIndex"/> 
            is greater than SpanCount.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.GetSourceSpans">
            <summary>
            Gets all the source spans for the projection snapshot.
            </summary>
            <returns>A read-only collection of source spans of the projection snapshot, listed in the order they have in the projection snapshot.
            The collection may be empty.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapToSourceSnapshot(System.Int32,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps a position in the projection snapshot to the corresponding position in a source snapshot. 
            </summary>
            <param name="position">The position in the projection snapshot .</param>
            <param name="affinity">
            If the mapping is ambiguous (the position lies on a source span seam), this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the projection buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the projection buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns>A snapshot point in one of the source snapshots.</returns>
            <remarks>
            In general, a source span seam occurs at the end of a source span of nonzero length
            and the beginning of a source span of nonzero length, and
            coincides with zero or more source spans of zero length. Every span on a seam
            has a point in the result collection.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than or equal to the length of the snapshot.</exception>
            <exception cref="T:System.InvalidOperationException">The projection snapshot has no source spans.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapToSourceSnapshots(System.Int32)">
            <summary>
            Maps a position in the projection snapshot to the corresponding position in one or more source snapshots.
            </summary>
            <param name="position">The position in the projection snapshot.</param>
            <returns>A read-only collection of snapshot points to which the position maps. This collection contains one snapshot point unless the position lies
            on a source span seam, in which case it can contain two or more points.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than or equal to the length of the snapshot.</exception>
            <remarks>
            In general, a source span seam occurs at the end of a source span of nonzero length
            and the beginning of a source span of nonzero length, and
            coincides with zero or more source spans of zero length. Every span on a seam
            has a point in the result collection.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapToSourceSnapshot(System.Int32)">
            <summary>
            Maps a position in the projection snapshot to the corresponding position in a source snapshot. If the mapping
            is ambiguous (occurs on a source span seam), see <see cref="M:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver.GetTypicalInsertionPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Text.SnapshotPoint})"/>
            to choose a source buffer.
            </summary>
            <param name="position">The position in the projection snapshot.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than or equal to the length of the snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapFromSourceSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps from a snapshot point in one of the source snapshots to the corresponding position in the projection snapshot.
            </summary>
            <param name="point">The snapshot point in a source buffer.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position lies between two source spans), this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the projection buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the projection buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns>A position in the projection snapshot, or null if the source point does not correspond
            to text belonging to a span that is a member of the projection snapshot.</returns>
            <remarks>
            In general, a source span seam occurs at the end of a source span of nonzero length
            and the beginning of a source span of nonzero length, and
            coincides with zero or more source spans of zero length. Every span on a seam
            has a point in the result collection.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="point"/> does not belong to a source snapshot of this projection snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapToSourceSnapshots(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Maps a span of the current projection snapshot to a list of snapshot spans belonging to source
            snapshots. The resulting spans will be ordered by the order of their appearance in the projection.
            </summary>
            <param name="span">The span in the projection snapshot.</param>
            <returns>A non-empty list of snapshot spans.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/> is not valid for this buffer.</exception>
            <remarks>If a null span occurs on a source span seam, it may map to more than one null source span.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapFromSourceSnapshot(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Maps a snapshot span of a source buffer to a list of spans of the projection snapshot. 
            The resulting ordered list may be empty, contain a single element, or contain multiple elements.
            </summary>
            <param name="span">The snapshot span in a source buffer to map.</param>
            <returns>A non-null list of spans. The list will be empty if none of the positions in <paramref name="span"/> are projected by a source span
            of the projection snapshot. This list is <b>not</b> normalized; the spans will be ordered by their original position in the
            source snapshot, not their position in the projection snapshot. Adjacent spans are not coalesced.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="span"/> does not belong to a source buffer of this projection buffer.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase"/> of which this is a snapshot.
            </summary>
            <remarks>
            This property always returns the same projection buffer, but the projection buffer is not itself immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.SpanCount">
            <summary>
            Gets the number of source spans in the projection snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.SourceSnapshots">
            <summary>
            Gets the set of one or more text snapshots that contribute source spans to this projection snapshot. 
            The ordering of the list is arbitrary. It does not contain duplicates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IElisionSnapshot.MapFromSourceSnapshotToNearest(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Maps from a snapshot point in the source buffer to the corresponding point in the elision snapshot.
            If the source buffer position is not exposed in the elision snapshot, returns the nearest point that is
            exposed. If nothing is exposed, returns position zero.
            </summary>
            <param name="point">The snapshot point in a source buffer to map.</param>
            <returns>A position in the elision snapshot.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="point"/> does not belong to the source snapshot of this elision snapshot.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IElisionSnapshot.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/> of which this is a snapshot.
            </summary>
            <remarks>
            This property always returns the same elision buffer, but that elision buffer is not itself immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IElisionSnapshot.SourceSnapshot">
            <summary>
            Gets the text snapshot on which this elision snapshot is based.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer">
            <summary>
            A text buffer that contains projections of other text buffers, composed
            of a list of tracking spans of those buffers. The buffers that contribute to
            the projection buffer are called source buffers, and the tracking spans that describe
            the contributed regions are called source spans.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.InsertSpan(System.Int32,Microsoft.VisualStudio.Text.ITrackingSpan)">
            <summary>
            Inserts a tracking span into the list of source spans. 
            </summary>
            <param name="position">The position at which to insert <paramref name="spanToInsert"/>.</param>
            <param name="spanToInsert">The span to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="spanToInsert"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="spanToInsert"/> would cause any duplicated projection.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="spanToInsert"/> is EdgeInclusive and does not cover its entire buffer,
            or is EdgePositive and does not abut the end of its buffer, or is EdgeNegative and does not abut the beginning of its
            buffer. 
            These checks are not performed if the projection buffer was created with the PermissiveEdgeInclusiveSourceSpans option.</exception>
            <exception cref="T:System.ArgumentException">Adding the TextBuffer containing <paramref name="spanToInsert"/> would create a cycle
            among a set of projection buffers by virtue of the SourceBuffer relationship.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.InsertSpan(System.Int32,System.String)">
            <summary>
            Inserts a literal string into the list of SourceSpans. 
            </summary>
            <param name="position">The position at which to insert <paramref name="literalSpanToInsert"/>.</param>
            <param name="literalSpanToInsert">The string to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="literalSpanToInsert"/> is null.
            These checks are not performed if the projection buffer was created with the PermissiveEdgeInclusiveSourceSpans option.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.InsertSpans(System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Inserts a list of <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects and/or literal strings into the list of source spans in the order in which they appear in the list. 
            </summary>
            <param name="position">The position at which to insert the spans.</param>
            <param name="spansToInsert">The list of spans to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="spansToInsert"/> is null or a span in that list is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <parmref name="spansToInsert"/> is neither an <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> nor a string.</exception>
            <exception cref="T:System.ArgumentException">A span in <paramref name="spansToInsert"/> would cause a duplicated projection.</exception>
            <exception cref="T:System.ArgumentException">A tracking span in <paramref name="spansToInsert"/> is EdgeInclusive and does not cover its entire buffer,
            or is EdgePositive and does not abut the end of its buffer, or is EdgeNegative and does not abut the beginning of its
            buffer.
            These checks are not performed if the projection buffer was created with the PermissiveEdgeInclusiveSourceSpans option.</exception>
            <exception cref="T:System.ArgumentException">Adding one of the text buffers containing any of the <paramref name="spansToInsert"/> would 
            create a cycle among a set of projection vuffers by virtue of the SourceBuffer relationship.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.DeleteSpans(System.Int32,System.Int32)">
            <summary>
            Deletes a sequence of source spans from the projection buffer.
            </summary>
            <param name="position">The position at which to begin deleting spans.</param>
            <param name="spansToDelete">The number of spans to delete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="spansToDelete"/> is less than zero or 
            <paramref name="position"/> + <paramref name="spansToDelete"/> is greater than SpanCount.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.ReplaceSpans(System.Int32,System.Int32,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.EditOptions,System.Object)">
            <summary>
            Replaces a sequence of source spans with a new list of <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects and/or literal strings.
            </summary>
            <param name="position">The position at which to begin replacing spans.</param>
            <param name="spansToReplace">The number of spans to replace.</param>
            <param name="spansToInsert">The new spans to insert.</param>
            <param name="options">Options to apply to the span edit.</param>
            <param name="editTag">An arbitrary object that will be associated with this edit transaction.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="spansToReplace"/> is less than zero or <paramref name="position"/> + <paramref name="spansToReplace"/>
            is greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="spansToInsert"/> is null or a span in the list are null.</exception>
            <exception cref="T:System.ArgumentException">An element of <parmref name="spansToInsert"/> is neither an <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> nor a string.</exception>
            <exception cref="T:System.ArgumentException">A span in <paramref name="spansToInsert"/> would cause a duplicated projection.</exception>
            <exception cref="T:System.ArgumentException">A tracking span in <paramref name="spansToInsert"/> is EdgeInclusive and does not cover its entire buffer,
            or is EdgePositive and does not abut the end of its buffer, or is EdgeNegative and does not abut the beginning of its
            buffer.
            These checks are not performed if the projection buffer was created with the PermissiveEdgeInclusiveSourceSpans option.</exception>
            <exception cref="T:System.ArgumentException">Adding a text buffer containing one of the <paramref name="spansToInsert"/> would 
            create a cycle among a set of projection buffers by virtue of the SourceBuffer relationship.</exception>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.SourceSpansChanged">
            <summary>
            Raised when source spans are added or deleted. It is not raised when
            the contents of a source span change, for example when a source span becomes empty. When
            a nonempty span is added or deleted, the <see cref="E:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.SourceBuffersChanged"/> event will be raised first. 
            The sequence of events is: 1) SourceBuffersChanged, 2) SourceSpansChanged, 3) ITextBuffer.Changed.
            The <see cref="E:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.SourceSpansChanged"/> event is raised first).
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.SourceBuffersChanged">
            <summary>
            Raised when source buffers are added or deleted by virtue of the addition or deletion
            of source spans. This event is raised before the <see cref="E:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.SourceSpansChanged"/> event is raised.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService">
            <summary>
            Used to create projection buffers.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IProjectionBufferFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.CreateProjectionBuffer(Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> object with a specified <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> and
            the specified list of <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects and/or literal strings.
            </summary>
            <param name="projectionEditResolver">The conflict resolver for this <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>. May be null.</param>
            <param name="sourceSpans">The initial set of source spans for the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="options">Options for this buffer.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the new <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <returns>A non-null projection buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceSpans"/> or any of its elements is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="sourceSpans"/> is neither a string nor an <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</exception>
            <exception cref="T:System.ArgumentException">A tracking span in <paramref name="sourceSpans"/> is EdgeInclusive and does not cover its entire buffer,
            or is EdgePositive and does not abut the end of its buffer, or is EdgeNegative and does not abut the beginning of its
            buffer.
            These checks are not performed if the projection buffer was created with the PermissiveEdgeInclusiveSourceSpans option.</exception>
            <exception cref="T:System.ArgumentException">Some of the tracking spans in <paramref name="sourceSpans"/> overlap.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.CreateProjectionBuffer(Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> object with the default projection <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> and  
            the specified list of source spans.
            </summary>
            <param name="projectionEditResolver">The conflict resolver for this <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>. May be null.</param>
            <param name="sourceSpans">The initial set of source spans for the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="options">Options for this buffer.</param>
            <returns>A non-null projection buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceSpans"/> or any of its elements is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="sourceSpans"/> is neither a string nor an <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</exception>
            <exception cref="T:System.ArgumentException">A tracking spans in <paramref name="sourceSpans"/> is EdgeInclusive and does not cover its entire buffer,
            or is EdgePositive and does not abut the end of its buffer, or is EdgeNegative and does not abut the beginning of its
            buffer.</exception>
            <exception cref="T:System.ArgumentException">Any of the tracking spans in <paramref name="sourceSpans"/> overlap.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.CreateElisionBuffer(Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Create an elision buffer initialized to expose the provided list of snapshot spans from a single source buffer.
            </summary>
            <param name="projectionEditResolver">The conflict resolver for this <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>. May be null.</param>
            <param name="exposedSpans">The set of spans (from a single source buffer) that are initially exposed in the elision buffer.</param>
            <param name="options">Options for this buffer.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the new <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/>.</param>
            <returns>A non-null elision buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="contentType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="exposedSpans"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.CreateElisionBuffer(Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions)">
            <summary>
            Create an ElisionBuffer with the default projection <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> and initialized to the provided list of snapshot spans from
            a single source buffer.
            </summary>
            <param name="projectionEditResolver">The conflict resolver for this <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>. May be null.</param>
            <param name="exposedSpans">The set of spans (from a single source buffer) that are initially exposed in the elision buffer.</param>
            <param name="options">Options for this buffer.</param>
            <returns>A non-null elision buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exposedSpans"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.ProjectionContentType">
            <summary>
            The default content type for projection buffers.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.ProjectionBufferCreated">
            <summary>
            Raised when any <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> or <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/> is created.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver">
            <summary>
            Allows the creator of a projection buffer to control behavior of certain edits to the buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver.FillInInsertionSizes(Microsoft.VisualStudio.Text.SnapshotPoint,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Text.SnapshotPoint},System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
            When text is inserted into the projection buffer at <paramref name="projectionInsertionPoint"/>, determine how many characters
            of the <paramref name="insertionText"/> are to be inserted into the source buffer at each source insertion point.
            If length of the <paramref name="sourceInsertionPoints"/> is greater than two, all but the first and last snapshot point will denote
            the boundary of an empty source span.
            </summary>
            <remarks>
            This call is made while an edit is in progress, so any attempt to change the projection buffer or its sources during
            this call will fail.
            </remarks>
            <param name="projectionInsertionPoint">The insertion point in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="sourceInsertionPoints">The list of insertion points in the source buffers (of length two or more).</param>
            <param name="insertionText">The text to be split between the insertion points.</param>
            <param name="insertionSizes">Filled in by the callee; the number of characters in the <paramref name="insertionText"/> to be inserted into the corresponding source insertion point.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver.FillInReplacementSizes(Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Text.SnapshotSpan},System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
            When text at <paramref name="projectionReplacementSpan"/> is replaced in a projection buffer, determine how many characters
            of the <paramref name="insertionText"/> are to be inserted into the source buffer at each source insertion point (which are
            the Start points of the <paramref name="sourceReplacementSpans"/>).
            </summary>
            <remarks>
            This call is made while an edit is in progress, so any attempt to change the projection buffer or its sources during
            this call will fail.
            </remarks>
            <param name="projectionReplacementSpan">The span of text that is to be replaced in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="sourceReplacementSpans">The spans of text that are to be replaced in the source buffers (of length two or more).</param>
            <param name="insertionText">The text to be split among the replacement spans.</param>
            <param name="insertionSizes">Filled in by the callee; the number of characters in the <paramref name="insertionText"/> to 
            be inserted into the corresponding source replacement span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver.GetTypicalInsertionPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Text.SnapshotPoint})">
            <summary>
            When a position in the projection buffer lies on a source buffer seam, determine which source insertion
            point would receive a typical insertion.
            </summary>
            <param name="projectionInsertionPoint">The insertion point in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="sourceInsertionPoints">The list of insertion points in the source buffers (of length two or more).</param>
            <returns>An integer between 0 and <paramref name="sourceInsertionPoints"/>.Length - 1.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions">
            <summary>
            Represents the options that apply to <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions.None">
            <summary>
            No special treatment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions.PermissiveEdgeInclusiveSourceSpans">
            <summary>
            Do not perform certain consistency checks on edge-inclusive source spans. 
            </summary>
            <remarks>
            See <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> for details.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions.WritableLiteralSpans">
            <summary>
            Allow source spans that are string literals to be edited.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.ProjectionSourceBuffersChangedEventArgs">
            <summary>
            Provides information for an edit transaction on a <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> in which the set of source <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs">
            <summary>
            Provides information for an edit transaction on a <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> in which the set of source <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects has changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan},System.Int32,Microsoft.VisualStudio.Text.EditOptions,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs"/>.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> immediately after the change occurred.</param>
            <param name="insertedSpans">Zero or more source spans that were inserted into the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="deletedSpans">Zero or more source spans that were deleted from the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="spanPosition">The position at which the span changes occurred.</param>
            <param name="options">The edit options that were applied to this change.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException">One of the parameters: <paramref name="beforeSnapshot"/>, <paramref name="afterSnapshot"/>,
            <paramref name="insertedSpans"/>, or <paramref name="deletedSpans"/>is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.SpanPosition">
            <summary>
            The position in the list of source spans at which the change occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.InsertedSpans">
            <summary>
            The set of source spans that were inserted into the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> by this edit transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.DeletedSpans">
            <summary>
            The set of source spans that were deleted from the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> by this edit transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.Before">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> before the change occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.After">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> after the change occurred.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.ProjectionSourceBuffersChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan},System.Int32,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITextBuffer},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITextBuffer},Microsoft.VisualStudio.Text.EditOptions,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Projection.ProjectionSourceBuffersChangedEventArgs"/> object.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> immediately after the change occurred.</param>
            <param name="insertedSpans">Zero or more source spans that were inserted into the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="deletedSpans">Zero or more source spans that were deleted from the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="spanPosition">The position in the list of source spans at which the buffer changes occurred.</param>
            <param name="addedBuffers">The list of added source <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects.</param>
            <param name="removedBuffers">The list of removed source <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects.</param>
            <param name="options">The edit options that were applied to this change.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="insertedSpans"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="deletedSpans"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="addedBuffers"/> or <paramref name="removedBuffers"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceBuffersChangedEventArgs.AddedBuffers">
            <summary>
            The source buffers that were added to the projection buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceBuffersChangedEventArgs.RemovedBuffers">
            <summary>
            The source buffers that were removed and no longer contribute spans to the projection buffer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.DynamicReadOnlyRegionQuery">
            <summary>
            The callback delegate for notifying read only regions of edits.
            </summary>
            <param name="isEdit">True if an edit is being attempted. False if the read-only check should be side-effect free.</param>
            <returns>Whether the read-only region is in effect.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.SnapshotPoint">
            <summary>
            An immutable text position in a particular text snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> with respect to a particular snapshot and position.
            </summary>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"> that contains the new point.</see></param>
            <param name="position">The position of the point.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Implicit(Microsoft.VisualStudio.Text.SnapshotPoint)~System.Int32">
            <summary>
            Implicitly converts the snapshot point to an integer equal to the position of the snapshot point in the snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.GetContainingLine">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> containing this snapshot point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.GetChar">
            <summary>
            Gets the character at the position of this snapshot point.
            </summary>
            <returns>The character at the position of this snapshot point.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the position of this point is equal to the length of the snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Translates this snapshot Point to a different snapshot of the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="targetSnapshot">The snapshot to which to translate.</param>
            <param name="trackingMode">The <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/> to use in the translation.</param>
            <returns>A new snapshot point that has been mapped to the requested snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetSnapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetSnapshot"/> does not refer to the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> as this snapshot point.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.ToString">
            <summary>
            Converts this snapshot point to a string, or to the string "uninit" if the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> is null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.Equals(System.Object)">
            <summary>
            Determines whether this snapshot point is the same as a second snapshot point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.Add(System.Int32)">
            <summary>
            Creates a new snapshot point at the specified offset from this point.
            </summary>
            <param name="offset">The offset of the new point.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new point is less than zero or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.Subtract(System.Int32)">
            <summary>
            Creates a new snapshot point at the specified negative offset from this point.
            </summary>
            <param name="offset">The offset of the new point.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new point is less than zero or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.Difference(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Computes the offset between this snapshot point and another snapshot point.
            </summary>
            <param name="other">The point from which to compute the offset.</param>
            <exception cref="T:System.ArgumentException">The two points do not belong to the same
            snapshot.</exception>
            <returns>The offset between the two points, equivalent to other.Position -
            this.Position.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Subtraction(Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32)">
            <summary>
            Decrements the position of a snapshot point.
            </summary>
            <param name="point">The point from which to calculate the new position.</param>
            <param name="offset">The offset of the new point.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new point is less than zero
            or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Subtraction(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Computes the offset between two <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> objects.
            </summary>
            <param name="start">The starting point.</param>
            <param name="other">The point from which to compute the offset.</param>
            <exception cref="T:System.ArgumentException">The two points do not belong to the same
            snapshot.</exception>
            <returns>The offset between the two points, equivalent to start.Position -
            other.Position.</returns>
            <remarks>The following should always be true:
            start == other + (start - other).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Equality(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether this snapshot point is the same as a second snapshot point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Inequality(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether this snapshot point is different from a second snapshot point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Addition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32)">
            <summary>
            Increments the position of a snapshot point.
            </summary>
            <param name="point">The point from which to calculate the new position.</param>
            <param name="offset">The offset of the new point.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new point is less than zero
            or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_GreaterThan(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether the position of one snapshot point is greater than the position of a second snapshot point.
            </summary>
            <returns><c>true</c> if the first position is greater than the second position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The two points do not belong to the same snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_LessThan(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determine if the position of the left point is less than the position of the right point.
            </summary>
            <returns><c>true</c> if left.Position is greater than right.Position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The two points do not belong to the same snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.CompareTo(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether this snapshot is the same as a second snapshot point.
            </summary>
            <param name="other">The snapshot point to which to compare.</param>
            <returns>A negative integer if the position of this snapshot point occurs before the second snapshot point, 
            a positive integer if the position of this snapshot point occurs before the second snapshot point, and 
            zero if the positions are the same.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotPoint.Position">
            <summary>
            Gets the position of the point.
            </summary>
            <value>A non-negative integer less than or equal to the length of the snapshot.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotPoint.Snapshot">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to which this snapshot point refers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.SnapshotSpan">
            <summary>
            An immutable text span in a particular text snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> with the specified snapshot and span.
            </summary>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> on which to base the snapshot span.</param>
            <param name="span">The span of the snapshot span.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/>.End is greater than <paramref name="snapshot"/>.Length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> with the specified snapshot, start point, and length.
            </summary>
            <param name="snapshot">The text snapshot on which to base the snapshot span.</param>
            <param name="start">The starting point of the snapshot span.</param>
            <param name="length">The length of the snapshot span.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is negative or greater than <paramref name="snapshot"/>.Length, or
            <paramref name="length"/> is negative or <paramref name="start"/> + <paramref name="length"/> is greater than
            <paramref name="snapshot"/>.Length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.#ctor(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> from two <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> objects.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point, which must be from the same <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>
            as the start point.</param>
            <exception cref="T:System.ArgumentException">The snapshot points belong to different 
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> objects.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end point comes before the start
            point.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.#ctor(Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> from an existing <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> and a specified length.
            </summary>
            <param name="start">The starting snapshot point.</param>
            <param name="length">The length of the span.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is negative or 
            <paramref name="start"/> + <paramref name="length"/> is greater than the length of the snapshot.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.op_Implicit(Microsoft.VisualStudio.Text.SnapshotSpan)~Microsoft.VisualStudio.Text.Span">
            <summary>
            Implicitly converts a snapshot span to a span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.GetText">
            <summary>
            The text contained by this snapshot span.
            </summary>
            <returns>A non-null string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Translates this snapshot span to a different snapshot of the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="targetSnapshot">The snapshot to which to translate.</param>
            <param name="spanTrackingMode">The <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/> to use in the translation.</param>
            <returns>A new snapshot span.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetSnapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetSnapshot"/> does not refer to the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> as this snapshot span.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Contains(System.Int32)">
            <summary>
            Determines whether the position lies within the span.
            </summary>
            <param name="position">
            The position to check.
            </param>
            <returns>
            <c>true</c> if the position is greater than or equal to parameter span.Start and strictly less than parameter span.End, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Contains(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether a given <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> lies within the span.
            </summary>
            <param name="point">
            The point to check.
            </param>
            <returns>
            <c>true</c> if the position is greater than or equal to parameter span.Start and strictly less than parameter span.End, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Contains(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="simpleSpan"/> falls completely within this span.
            </summary>
            <param name="simpleSpan">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the specified span falls completely within this span, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Contains(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether <paramref name="snapshotSpan"/> falls completely within this span.
            </summary>
            <param name="snapshotSpan">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the specified span falls completely within this span, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.OverlapsWith(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="simpleSpan"/> overlaps this span. Two spans are considered to overlap if they have positions in common and are not empty. 
            Empty spans do not overlap with any other span.
            </summary>
            <param name="simpleSpan">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the spans overlap, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.OverlapsWith(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether <paramref name="snapshotSpan"/> overlaps this span. 
            Two spans are considered to overlap if they have positions in common and are not empty. Empty spans do not overlap with any other span.
            </summary>
            <param name="snapshotSpan">
            The span to check for overlap.
            </param>
            <returns>
            <c>true</c> if the spans overlap, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Overlap(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Returns the overlap with the given span, or null if there is no overlap.
            </summary>
            <param name="simpleSpan">The span to check.</param>
            <returns>The overlap of the spans, or null if the overlap is empty.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Overlap(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Returns the overlap with the given <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>, or null if there is no overlap.
            </summary>
            <param name="snapshotSpan">The span to check.</param>
            <exception cref="T:System.ArgumentException"><paramref name="snapshotSpan"/> does not refer to the same
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> as this snapshot span.</exception>
            <returns>The overlap of the spans, or null if the overlap is empty.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.IntersectsWith(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="simpleSpan"/> intersects this span. Two spans are considered to 
            intersect if they have positions in common, or if the end of one span 
            coincides with the start of the other span, and neither is empty.
            </summary>
            <param name="simpleSpan">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the spans intersect, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.IntersectsWith(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether <paramref name="snapshotSpan"/> intersects this span. Two spans are considered to 
            intersect if they have positions in common, or the end of one span 
            coincides with the start of the other span, and neither is empty.
            </summary>
            <param name="snapshotSpan">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the spans intersect, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Intersection(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Computes the intersection with the given span, or null if there is no intersection.
            </summary>
            <param name="simpleSpan">
            The span to check.
            </param>
            <returns>
            The intersection of the spans, or null if the intersection is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Intersection(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Computes the intersection with the given <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>, or null if there is no intersection.
            </summary>
            <param name="snapshotSpan">
            The span to check.
            </param>
            <exception cref="T:System.ArgumentException"><paramref name="snapshotSpan"/> does not refer to the same snapshot. </exception>
            <returns>
            The intersection of the spans, or null if the intersection is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.ToString">
            <summary>
            Converts this snapshot span to a string, or to the string "uninit" if the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> is null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Equals(System.Object)">
            <summary>
            Determines whether two snapshot spans are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.op_Equality(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether two snapshot spans are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.op_Inequality(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether two snapshot spans are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.Snapshot">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to which this snapshot span refers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.Span">
            <summary>
            Gets the span covered by the snapshot span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.Start">
            <summary>
            Gets the starting index of the snapshot span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.End">
            <summary>
            Gets the end of the snapshot span. The span is open-ended on the right side, which is to say
            that Start + Length = End.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.Length">
            <summary>
            Gets the length of the span, which is always non-negative.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.IsEmpty">
            <summary>
            Determines whether or not this span is empty.
            </summary>
            <value><c>true</c> if the length of the span is zero, otherwise <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.SnapshotSpanEventArgs">
            <summary>
            Provides information for events that report changes affecting a span of text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpanEventArgs.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpanEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
            <param name="span">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpanEventArgs.Span">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Span">
            <summary>
            An immutable integer interval that describes a range of values from <see cref="P:Microsoft.VisualStudio.Text.Span.Start"/> to <see cref="P:Microsoft.VisualStudio.Text.Span.End"/> that is closed on 
            the left and open on the right: [Start .. End). A zpan is usually applied to an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to denote a span of text,
            but it is independent of any particular text buffer or snapshot. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Span"/> with the given start point and length.
            </summary>
            <param name="start">
            The starting point of the span.
            </param>
            <param name="length">
            The length of the span.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="length"/> is less than zero, or
            start + length is greater than the length of the text snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.FromBounds(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Span"/> with the given start and end positions.
            </summary>
            <param name="start">The start position of the new span.</param>
            <param name="end">The end position of the new Span.</param>
            <returns>The new span.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is less than zero, or
            <paramref name="end"/> is less than <paramref name="start"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.Contains(System.Int32)">
            <summary>
            Determines whether the position lies within the span.
            </summary>
            <param name="position">
            The position to check.
            </param>
            <returns>
            <c>true</c> if the position is greater than or equal to Start and strictly less 
            than End, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.Contains(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="span"/> falls completely within this span.
            </summary>
            <param name="span">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the specified span falls completely within this span, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.OverlapsWith(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="span"/> overlaps this span. Two spans are considered to overlap 
            if they have positions in common and neither is empty. Empty spans do not overlap with any 
            other span.
            </summary>
            <param name="span">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the spans overlap, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.Overlap(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Returns the overlap with the given span, or null if there is no overlap.
            </summary>
            <param name="span">
            The span to check.
            </param>
            <returns>
            The overlap of the spans, or null if the overlap is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.IntersectsWith(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="span"/> intersects this span. Two spans are considered to 
            intersect if they have positions in common or the end of one span 
            coincides with the start of the other span.
            </summary>
            <param name="span">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the spans intersect, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.Intersection(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Returns the intersection with the given span, or null if there is no intersection.
            </summary>
            <param name="span">
            The span to check.
            </param>
            <returns>
            The intersection of the spans, or null if the intersection is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.ToString">
            <summary>
            Provides a string representation of the span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.GetHashCode">
            <summary>
            Provides a hash function for the type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.Equals(System.Object)">
            <summary>
            Determines whether two spans are the same.
            </summary>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.op_Equality(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether two spans are the same
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.op_Inequality(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether two spans are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Span.Start">
            <summary>
            The starting index of the span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Span.End">
            <summary>
            The end of the span.  The span is open-ended on the right side, which is to say
            that Start + Length = End.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Span.Length">
            <summary>
            The length of the span, which is always non-negative.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Span.IsEmpty">
            <summary>
            Determines whether or not this span is empty.
            </summary>
            <value><c>true</c> if the length of the span is zero, otherwise <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.SpanTrackingMode">
            <summary>
            Represents tracking modes for <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgeExclusive">
            <summary>
            The leading edge of the span is positive tracking (insertions push the current position towards the end) 
            and the trailing edge is negative tracking (insertions push the current position towards the start).
            The span will not expand when text changes occur at the span boundaries. For example,
            if an EdgeExclusive Span has Start position 3, and a single character is inserted at position 3,
            the Span will then have Start position 4 and its length will be unchanged.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgeInclusive">
            <summary>
            The leading edge of the span is negative tracking (insertions push he current position toward the start) 
            and the trailing edge is positive tracking (insertions push the current position toward the end).
            The span will expand when text changes occur at the span boundaries. For example,
            if an EdgeInclusive Span has Start position 3, and a single character is inserted at position 3,
            the Span will then have Start position 3 and its length will be increased by one.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgePositive">
            <summary>
            Both edges of the span are positive tracking (insertions push the current position toward the start).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgeNegative">
            <summary>
            Both edges of the span are negative tracking (insertions push the current position toward the end).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom">
            <summary>
            Custom client-determined tracking behavior.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextBufferCreatedEventArgs">
            <summary>
            Provides information about a newly created <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextBufferCreatedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.TextBufferCreatedEventArgs"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> which was created.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextBufferCreatedEventArgs.TextBuffer">
            <summary>
            The newly created <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextContentChangingEventArgs">
            <summary>
            Provides information about an upcoming edit transaction on a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Object,System.Action{Microsoft.VisualStudio.Text.TextContentChangingEventArgs})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.TextContentChangingEventArgs"/> to be passed during a Changing event.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> before the change.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <param name="cancelAction">The action to execute when <see cref="M:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.Cancel"/> is called. Invoked at most once.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="beforeSnapshot"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.Cancel">
            <summary>
            Cancels the edit transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.Canceled">
            <summary>
            Determines whether the edit transaction has been canceled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.Before">
            <summary>
            The most recent <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.EditTag">
            <summary>
            Gets an arbitrary object provided by the initiator of the changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.BeforeVersion">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/> associated with <see cref="P:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.Before"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextSnapshotToTextReader">
            <summary>
            Provides a <see cref="T:System.IO.TextReader"/> facade over a text snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.Close">
            <summary>
            Closes the reader and releases any associated system resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the reader.
            </summary>
            <param name="disposing">Whether to release managed resources.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.Peek">
            <summary>
            Returns the next character without changing the state of the reader or the
            character source.
            </summary>
            <returns>The next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.Read">
            <summary>
            Reads the next character from the input stream and advances the character
            position by one character.
            </summary>
            <returns>The next character from the input stream, or -1 if no more characters are available.</returns>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of characters from the current stream and writes the
            data to the buffer, beginning at the specified location.
            </summary>
            <param name="buffer">When this method returns, contains the specified character array from the current source.</param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read.</param>
            <returns>The number of characters that have been read. The number will be less than
            or equal to <paramref name="count"/>, depending on whether the data is available within the
            stream. This method returns zero if called when no more characters are left to read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative, or
            the buffer length minus index is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a maximum of <paramref name="count"/> characters from the current stream and writes the
            data to buffer, beginning at index.
            </summary>
            <param name="buffer">When this method returns, contains the specified character array from the current source.</param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read.</param>
            <returns>The number of characters that have been read. The number will be less than
            or equal to <paramref name="count"/>, depending on whether the data is available within the
            stream. This method returns zero if called when no more characters are left to read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative, or
            the buffer length minus index is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.ReadLine">
            <summary>Reads a line of characters from the current stream and returns the data as a string.</summary>
            <returns>The next line from the input stream, or null if all characters have been read.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"/> is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.ReadToEnd">
            <summary>Reads all the characters from the current position to the end of the reader and returns them as a string.</summary>
            <returns>A string containing all the characters from the current position to the end of the reader.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"/> is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.TextSnapshotToTextReader"/> with the specified text snapshot.
            </summary>
            <param name="textSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to expose as a reader.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="textSnapshot"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TrackingFidelityMode">
            <summary>
            Represents special tracking behaviors for <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> and <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.TrackingFidelityMode.Forward">
            <summary>
            When moving back to a previous version (either by explicitly 
            moving to that version or by undo or redo operations), the result may be different from the result
            that was originally given for that version. This mode is suitable for most purposes, 
            and is the most space-efficient mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.TrackingFidelityMode.Backward">
            <summary>
            When mapping back to a previous version, the result is the same as the result from 
            mapping forward from the origin version. This mode should be used only 
            for short-lived points and spans.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.TrackingFidelityMode.UndoRedo">
            <summary>
            When mapping to a version that is the result of undo 
            or redo operations, the result will be the same as the result from mapping forward to the 
            version of which the undo or redo is a reiteration. This mode is more 
            expensive than <see cref="F:Microsoft.VisualStudio.Text.TrackingFidelityMode.Forward"/> in both space and time and should be used only
            if necessary.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.ArrayRankNotOne">
            <summary>
              Looks up a localized string similar to The array is not one-dimensional..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.CircularityInBufferVersion">
            <summary>
              Looks up a localized string similar to Circularity detected in text buffer version..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.InvalidSnapshot">
            <summary>
              Looks up a localized string similar to The specified ITextSnapshot doesn&apos;t belong to the correct TextBuffer..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.InvalidSnapshotPoint">
            <summary>
              Looks up a localized string similar to The specified SnapshotPoint is on a different ITextSnapshot than this SnapshotPoint..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.InvalidSnapshotSpan">
            <summary>
              Looks up a localized string similar to The specified SnapshotPoint or SnapshotSpan  is on a different ITextSnapshot than this SnapshotSpan..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.MismatchedSnapshotPoints">
            <summary>
              Looks up a localized string similar to The specified SnapshotPoints belong to different ITextSnapshots..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.MismatchedSnapshots">
            <summary>
              Looks up a localized string similar to The collections refer to different snapshots..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.MismatchedVersions">
            <summary>
              Looks up a localized string similar to The TextVersions do not belong to the same TextBuffer..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.SpansBeyondEnd">
            <summary>
              Looks up a localized string similar to The specified NormalizedSnapshotSpanCollection extends beyond the end of the TextSnapshot..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.UninitializedSnapshotPoint">
            <summary>
              Looks up a localized string similar to The SnapshotPoint is not initialized..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.UninitializedSnapshotSpan">
            <summary>
              Looks up a localized string similar to The SnapshotSpan is not initialized..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.VersionDoesNotBelongToBuffer">
            <summary>
              Looks up a localized string similar to The specified TextVersion does not belong to the specified TextBuffer..
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Text.UI.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Text.UI</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ErrorTypeDefinition">
            <summary>
            Defines error types.
            </summary>
            <remarks> This is a MEF component part, and should be exported as:
            [Export(typeof(ErrorTypeDefinition))]
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IErrorProviderFactory">
            <summary>
            Gets a error tagger (a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1"/> of type <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag"/>) for the given buffer, 
            or creates a new one if there is no error tagger already cached in the owned properties of the buffer.
            </summary>
            <remarks>This is a MEF somponent part, and should be exported with the following attribute:
            [Export(typeof(IErrorProviderFactory))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IErrorProviderFactory.GetErrorTagger(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the cached error tagger for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. 
            If one does not exist, creates and caches a new <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1"/> 
            with the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with which to get the error tagger.</param>
            <returns>The cached error tagger for the <paramref name="textBuffer"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory">
            <summary>
            Gets a text marker tagger (a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1"/> of type <see cref="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag"/> for a given buffer, or creates a new one if 
            no text marker tagger is already cached in the owned properties of the buffer.
            </summary>
            <remarks>This is a MEF Component, and should be exported with the following attribute:
            [Export(typeof(ITextMarkerProviderFactory))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory.GetTextMarkerTagger(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the cached text marker tagger for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. 
            If one does not exist, creates and caches a new <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1"/>
            with the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with which to get the text marker tagger.</param>
            <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1"/> for <paramref name="textBuffer"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider">
            <summary>
            Creates and displays tooltips, using an arbitrary object as content.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider.ShowToolTip(Microsoft.VisualStudio.Text.ITrackingSpan,System.Object)">
            <summary>
            Creates and displays a tooltip. 
            </summary>
            <param name="span">
            The range of text for which the tooltip is relevant.
            </param>
            <param name="toolTipContent">
            The content to be displayed in the tooltip. This must be a string or UIElement for the WPF tooltip adornment surface. 
            </param>
            <remarks>This is equivalent to ShowToolTip(..., PopupStyles.None).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider.ShowToolTip(Microsoft.VisualStudio.Text.ITrackingSpan,System.Object,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
            <summary>
            Creates and displays a tooltip. 
            </summary>
            <param name="span">
            The range of text for which the tooltip is relevant.
            </param>
            <param name="toolTipContent">
            The content to be displayed in the tooltip. This must be a string or UIElement for the WPF tooltip adornment surface.
            </param>
            <param name="style">
            <see cref="T:Microsoft.VisualStudio.Text.Adornments.PopupStyles"/> for the tooltip.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider.ClearToolTip">
            <summary>
            Removes the tooltip currently being displayed, if any.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProviderFactory">
            <summary>
            Gets an existing tooltip adornment provider from the cached list, or creates one if there is not one
            in the cache.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IToolTipProviderFactory))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProviderFactory.GetToolTipProvider(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the cached <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider"/> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. 
            If one does not exist, creates and caches a new <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider"/> with the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> with which to get the <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider"/>.</param>
            <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider"/> for <paramref name="textView"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.PopupStyles">
            <summary>
            Represents the styles associated with pop-up windows.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.None">
            <summary>
            Sets the default behavior: the pop-up window has no border, is not resizable, is not dismissed when the mouse moves,
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveText">
            <summary>
            Dismiss the pop-up window if the mouse leaves the associated text span.  
            This setting is mutually exclusive with <see cref="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveTextOrContent"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveTextOrContent">
            <summary>
            Dismiss the pop-up window if the mouse leaves the associated text span or the pop-up content.  
            This setting is mutually exclusive with <see cref="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveText"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PositionLeftOrRight">
            <summary>
            Try to position the pop-up window to the left or right of the visual span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PreferLeftOrTopPosition">
            <summary>
             Try to position the pop-up window to the left or above the visual span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.RightOrBottomJustify">
            <summary>
             Align the right or bottom edges of the pop-up window with those of the visual span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PositionClosest">
            <summary>
            Use the positioning preference specified, but if the opposite positioning can get the popup
            closer to the visual span, use the opposition positioning.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames">
            <summary>
            Enumerates the predefined error types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.SyntaxError">
            <summary>
            Represents syntax errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.CompilerError">
            <summary>
            Represents compiler errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.OtherError">
            <summary>
            Represents other errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.Warning">
            <summary>
            Represents compiler warnings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IViewClassifierAggregatorService">
            <summary>
            A service that returns an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/> that aggregates and normalizes all <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/>
            contributions for all <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>s in the buffer graph of a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>
            <para>The normalized classifications produced by this aggregator are sorted and do not overlap. If a span of text
            had multiple classifications based on the original classifier contributions, then in the normalized
            classification it has a transient classification (<see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService"/>) that corresponds to
            all of the original classifications.</para>
            <para>Classifier aggregators are cached for each <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> and <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> combination.</para>
            </remarks>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IViewClassifierAggregatorService aggregator = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IViewClassifierAggregatorService.GetClassifier(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            If one does not exist, an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/> will be created and cached for each <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> in the
            view's buffer graph.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> to use in retrieving or creating the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/>.</param>
            <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textView"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions">
            <summary>
            Provides methods for <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>-related options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsVirtualSpaceEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether virtual space is enabled for the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if virtual space is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsOverwriteModeEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether overwrite mode is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if overwrite mode is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsAutoScrollEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether auto-scroll is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if auto-scroll is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.WordWrapStyle(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the set of word wrap styles with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyles"/> of the set of editor options.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsVisibleWhitespaceEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether visible whitespace is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if visible whitespace is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.DoesViewProhibitUserInput(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the view prohibits all user input.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns>if <c>true</c> then all user input to the view is prohibited.</returns>
            <remarks>The view's underlying buffer can still be modified even if this option is set.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsOutliningUndoEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option for outlining undo enabled in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
            <returns><c>true</c> if the option is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsDragDropEditingEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option for drag/drop editing is enabled in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> used to look up the option value.</param>
            <returns><c>true</c> if the drag/drop editing option is enabled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsViewportLeftClipped(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the view's ViewportLeft property is clipped to the text width.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if ViewportLeft is clipped, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions">
            <summary>
            Provides methods for <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> host related options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsVerticalScrollBarEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the vertical scrollbar is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the vertical scrollbar is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsHorizontalScrollBarEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the horizontal scrollbar is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the horizontal scrollbar is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsGlyphMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
             Determines whether the glyph margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the glyph margin is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsSelectionMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the selection margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the selection margin is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsLineNumberMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the line number margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the line number margin is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsChangeTrackingEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether change tracking is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if change tracking is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsOutliningMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
             Determines whether the Outlining margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the Outlining margin is enabled, otherwise <c>false</c>.</returns>
            <remarks>Disabling the margin does NOT turn off Outlining (it just hides the margin</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsZoomControlEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the zoom control is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the zoom control is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions">
            <summary>
            Defines common <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.CutOrCopyBlankLineIfNoSelectionId">
            <summary>
            Determines whether cut and copy causes a blank line to be cut or copied when the selection is empty.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ViewProhibitUserInputId">
            <summary>
            Determines whether to prohibit user input. The text in the view's
            buffer can still be modified, and other views on the same buffer may allow user input.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.WordWrapStyleId">
            <summary>
            Gets the word wrap style for the underlying view.
            </summary>
            <remarks>Turning word wrap on will always hide the host's horizontal scroll bar. Turning word wrap off
            will always expose the host's horizontal scroll bar.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVirtualSpaceId">
            <summary>
            Determines whether to enable virtual space in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.IsViewportLeftClippedId">
            <summary>
            Determines whether the view's ViewportLeft property is clipped to the text width.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OverwriteModeId">
            <summary>
            Determines whether overwrite mode is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.AutoScrollId">
            <summary>
            Determines whether the view should auto-scroll on text changes.
            </summary>
            <remarks>
            If this option is enabled, whenever a text change occurs and the caret is on the last line,
            the view will be scrolled to make the caret visible.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVisibleWhitespaceId">
            <summary>
            Determines whether to show spaces and tabs as visible glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ProduceScreenReaderFriendlyTextId">
            <summary>
            Whether or not to replace the coding characters and special symbols (such as (,),{,},etc.) with their textual representation
            for automated objects to produce friendly text for screen readers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OutliningUndoOptionId">
            <summary>
            The default option that determines whether outlining is undoable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.DisplayUrlsAsHyperlinksId">
            <summary>
            Determines whether URLs should be displayed as hyperlinks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.DragDropEditingId">
            <summary>
            The default option that determines whether drag/drop editing is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions">
            <summary>
            Names of common <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> host-related options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.VerticalScrollBarId">
            <summary>
            Determines whether to have a vertical scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.HorizontalScrollBarId">
            <summary>
            Determines whether to have a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.GlyphMarginId">
            <summary>
            Determines whether to have a glyph margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.SelectionMarginId">
            <summary>
            Determines whether to have a selection margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.LineNumberMarginId">
            <summary>
            Determines whether to have a line number margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ChangeTrackingId">
            <summary>
            Determines whether to have the change tracking margin.
            </summary>
            <remarks>The change tracking margins will "reset" (lose the change history) when this option is turned off.
            If it is turned back on, it will track changes from the time the margin is turned on.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.OutliningMarginId">
            <summary>
            Determines whether to have an outlining margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ZoomControlId">
            <summary>
            Determines whether to have a zoom control.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDropEditing">
            <summary>
            Defines the view option for drag/drop editing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1">
            <summary>
            Defines a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>-specific editor option.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with:
            [Export(typeof(EditorOptionDefinition))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Determines whether the option is applicable to the specified scope.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDropEditing.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDropEditing.Key">
            <summary>
            Gets the default key for the drag/drop editing option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OverwriteMode">
            <summary>
            Defines the view option for overwrite mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OverwriteMode.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OverwriteMode.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace">
            <summary>
            Defines the Use Virtual Space option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace.Key">
            <summary>
            Gets the default text view value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped">
            <summary>
            Defines the Use Virtual Space option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped.Key">
            <summary>
            Gets the default text view value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput">
            <summary>
            Defines the Prohibit User Input option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput.Key">
            <summary>
            GGets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection">
            <summary>
            Defines the option to cut or copy a blank line if the selection is empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyle">
            <summary>
            Defines the word wrap style option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.WordWrapStyle.Default">
            <summary>
            Gets the default value, which is <c>WordWrapStyles.None</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.WordWrapStyle.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace">
            <summary>
            Defines the Use Visible Whitespace option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText">
            <summary>
            Defines the option to enable providing annotated text in automation controls so that screen readers can properly
            read contents of code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled">
            <summary>
            Defines the option to enable the vertical scroll bar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled">
            <summary>
            Defines the option to enable the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled">
            <summary>
            Defines the option to enable the glyph margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled">
            <summary>
            Defines the option to enable the selection margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled">
            <summary>
            Defines the option to enable the line number margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled">
            <summary>
            Defines the option to enable auto-scroll.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled">
            <summary>
            Defines the option to enable the change-tracking margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled">
            <summary>
            Defines the option to enable the Outlining margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled">
            <summary>
            The option definition that determines whether outlining is undoable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled.Default">
            <summary>
            Gets the default value (<c>true</c>)>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled">
            <summary>
            Defines the option to enable the Zoom Control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks">
            <summary>
            The option definition that determines if URLs should be displayed as hyperlinks.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks.Default">
            <summary>
            Gets the default value (<c>true</c>)>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CaretPosition">
            <summary>
            Represents the position of a caret in an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.#ctor(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.IMappingPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
            <param name="bufferPosition">The index of the caret. This corresponds to a gap between two characters in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <param name="mappingPoint">A mapping point for the caret that can be used to find its position in any buffer.</param>
            <param name="caretAffinity">The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/> of the caret. The caret can have an affinity with 
            the preceding edge of the gap or the following edge of the gap.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.ToString">
            <summary>
            Provides a string representation of the caret position.
            </summary>
            <returns>The string representation of the caret position.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.GetHashCode">
            <summary>
            Gets the hash code for the <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> objects are the same
            </summary>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.op_Equality(Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> objects are the same.
            </summary>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false.</c></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.op_Inequality(Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> objects are different.
            </summary>
            <returns><c>true</c> if the two objects are different, otherwise <c>false.</c></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.BufferPosition">
            <summary>
            Gets the position of the caret, corresponding to a gap between two characters in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> of the view.
            </summary>
            <remarks>
            This property gets the buffer position at the end of a line if the caret is positioned in virtual space.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.Point">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/>. This marks the position of the caret in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.Affinity">
            <summary>
            Gets the affinity of the caret. 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/> indicates that the caret is bound to the preceding edge of the gap. 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/> indicates that the caret is bound to the following edge of the gap.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.VirtualBufferPosition">
            <summary>
            Gets the virtual buffer position as a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.VirtualSpaces">
            <summary>
            Gets the number of spaces past the physical end of the line of the caret position.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.ITextCaret.PositionChanged"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs"/>.
            </summary>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that contains the caret.
            </param>
            <param name="oldPosition">
            The old <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </param>
            <param name="newPosition">
            The new <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that contains the caret.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.OldPosition">
            <summary>
            Gets the old <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.NewPosition">
            <summary>
            Gets the new <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IScrollMap">
            <summary>
            <para>Defines the mapping between character positions and scrollmap coordinates. This is not
            the same as the coordinate system in which the scrollbar is rendered.</para>
            </summary>
            <remarks>
            <para>Valid text positions range are [0...TextView.TextSnapshot.Length].</para>
            <para>Corresponding scrollmap coordinates are [0.0 ... CoordinateOfBufferEnd].</para>
            <para>Not every buffer position will have a distinct scrollmap coordinate. For example, every character on the same line of text will,
            generally, have the same scrollmap coordinate.</para>
            <para>Different scrollmap coordinates may map to the same buffer position. For example, scrollmap coordinates in the range [0.0, 1.0) will, generally,
            map to the first character of the buffer.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap">
            <summary>
            <para>Maps between character positions and fractions of the total vertical extent of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</para>
            </summary>
            <remarks>
            <para>Valid text positions range are [0...TextView.TextSnapshot.Length].
            Valid scrollbar coordinates are [0.0 ... 1.0].
            0.0 corresponds to the top of the first line in the text view; 1.0 corresponds to the bottom of the last line in the view.
            Not every text position will have a unique value. For example, every character on
            the same text buffer line will have the same value, assuming that word wrap is not enabled.</para>
            <para>This interface is the base type of the <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/> interface, 
            which is created using the <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.GetFractionAtBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the fraction of the vertical extent of the view that corresponds to the specified buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The corresponding fraction of the vertical extent of the view.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.GetBufferPositionAtFraction(System.Double)">
            <summary>
            Gets the buffer position that corresponds to a fraction of the vertical extent of the view,
            if it exists.
            </summary>
            <param name="fraction">The fraction of the vertical extent of the view.</param>
            <returns>The corresponding character position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fraction"/> is NaN, less than 0.0 or greater than 1.0.</exception>
            <remarks>Different buffer positions can have the same fractions. This method is guaranteed only to be consistent: it will
            return the same position for the same fraction. The exact character returned depends on the implementation of the fraction map.
            It will, generally, be the first character on the line, but this is not guaranteed.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.TextView">
            <summary>
            Gets the text view to which this fraction map applies.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.MappingChanged">
            <summary>
            Occurs when the mapping between character position and its vertical fraction has changed.
            For example, the view may have re-rendered some lines, changing their font size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMap.GetCoordinateAtBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the scrollmap coordinates of a buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The scrollmap coordinate, which will be between 0.0 and CoordinateOfBufferEnd inclusive.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMap.GetBufferPositionAtCoordinate(System.Double)">
            <summary>
            Gets the buffer position that corresponds to a scrollmap coordinate.
            </summary>
            <param name="coordinate">The scrollmap coordinate.</param>
            <returns>The corresponding buffer position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="coordinate"/> is NaN.</exception>
            <remarks>Different buffer positions can have the same scroll map coordinates. This method is guaranteed only to be consistent: it will
            return the same position for the same coordinate. The exact character returned will depend on the implementation of the scroll map.
            It will generally be the first character on the line.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.AreElisionsExpanded">
            <summary>
            Does the coordinate system used by this scroll map act as if all elisions are expanded?
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.Start">
            <summary>
            The scrollmap coordinate of the start of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.End">
            <summary>
            The scrollmap coordinate of the end of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.ThumbSize">
            <summary>
            Gets the size of the text visible in the view (in scrollmap coordinates).
            </summary>
            <remarks>
            This is equivalent to the scrollbar thumb size. The total height of the scroll map, in scrollmap coordinates, 
            is CoordinateOfBufferEnd + ThumbSize.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService">
            <summary>
            Creates or reuses an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IScrollMapFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates or reuses an existing scroll map for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView"><see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which to get an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/>.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/> for <paramref name="textView"/>.</returns>
            <remarks>The coordinate system returned by this scroll map will act as if elisions are not expanded.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView,System.Boolean)">
            <summary>
            Creates or reuses an existing scroll map for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView"><see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which to get an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/>.</param>
            <param name="areElisionsExpanded">Does the coordinate system used by this scroll map act as if all elisions are expanded?</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/> for <paramref name="textView"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent">
            <summary>
            Provides for computing the desired indentation for a line.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndent.GetDesiredIndentation(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Gets the desired indentation of an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.
            </summary>
            <param name="line">The line for which to compute the indentation.</param>
            <returns>The number of spaces to place at the start of the line, or null if there is no desired indentation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent"/> object for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            Component exporters must supply at least one content type attribute to specify the applicable content types.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attributes:
            [Export(NameSource=typeof(ISmartIndentProvider))]
            [ContentType("some content type")]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider.CreateSmartIndent(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent"/> object for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. 
            </summary>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> on which the <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent"/> will navigate.
            </param>
            <returns>
            A valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent"/>. This value will never be <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textView"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndentationService">
            <summary>
            Provides a Visual Studio service that determines automatic indentation when the enter key is pressed or
            when navigating to an empty line.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ISmartIndentationService selector = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndentationService.GetDesiredIndentation(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Gets the desired indentation of an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> as displayed in <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView">The text view in which the line is displayed.</param>
            <param name="line">The line for which to compute the indentation.</param>
            <returns>The number of spaces to place at the start of the line, or null if there is no desired indentation.</returns>
            <remarks>
            This service consumes <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider"/>s to determine how to perform the indentation.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextCaret">
            <summary>
            <para>Represents the caret associated with an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</para>
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.EnsureVisible">
            <summary>
            Makes the caret visible by scrolling the view up or down and left or right until the caret is visible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double)">
            <summary>
            Moves the caret to the best <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> for the specified x-coordinate and text line.
            </summary>
            <param name="textLine">
            The text line that will contain the caret.
            </param>
            <param name="xCoordinate">
            The x-coordinate of the caret in the text rendering coordinate system.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret after the move has occurred.
            </returns>
            <remarks>This is equivalent to calling MoveTo(textLine, xCoordinate, true).</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="xCoordinate"/> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,System.Boolean)">
            <summary>
            Moves the caret to the best <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>  for the given x-coordinate and text line.
            </summary>
            <param name="textLine">
            The text line that will contain the caret.
            </param>
            <param name="xCoordinate">
            The x-coordinate of the caret in the text rendering coordinate system.
            </param>
            <param name="captureHorizontalPosition"><c>true</c> if the caret should capture its horizontal position for subsequent moves up or down.
            <c>false</c> if the caret should retain its previously-captured horizontal position.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret after the move has occurred.
            </returns>
            <remarks>This method takes care of UTF-16 surrogate pairs and combining character sequences.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="xCoordinate"/> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
            <summary>
            Moves the caret to the specified <paramref name="textLine"/> while preserving its current x-coordinate.
            </summary>
            <param name="textLine">The text line that will contain the caret.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret after the move has occurred.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, PositionAffinity.Successor, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless 
            <paramref name="bufferPosition"/> specifies a location that is at the seam between two word-wrapped lines.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, caretAffinity, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity,System.Boolean)">
            <summary>
            Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless 
            <paramref name="bufferPosition"/> specifies a location that is at the seam between two word-wrapped lines.</param>
            <param name="captureHorizontalPosition"><c>true</c> if the caret should capture its horizontal position for subsequent moves up or down,
            <c>false</c> if the caret should retain its previously-captured horizontal position.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.  
            For example, if the text buffer consists of a high surrogate character at index 0 and a low surrogate character at index 1, 
            and <paramref name="bufferPosition"/> is 1 and 
            <paramref name="caretAffinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, 
            the actual valid caret index is 0 (since the high surrogate and low surrogate characters form one text element). 
            If <paramref name="caretAffinity"/> is<see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the actual valid caret index is 2.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Moves the caret to the specified <paramref name="bufferPosition"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, PositionAffinity.Successor, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Moves the caret to the specified <paramref name="bufferPosition"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless <paramref name="bufferPosition"/> 
            specifies a location that is at the seam between two word-wrapped lines.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, caretAffinity, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity,System.Boolean)">
            <summary>
            Moves the caret to the specified <paramref name="bufferPosition"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless <paramref name="bufferPosition"/> 
            specifies a location that is at the seam between two word-wrapped lines.</param>
            <param name="captureHorizontalPosition">If <c>true</c>, the caret will capture its horizontal position for subsequent moves up or down.
            If <c>false</c>, the caret retains its previously-captured horizontal position.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.  
            For example, if the text buffer consists of a high surrogate character at index 0 and a low surrogate character at index 1, 
            and <paramref name="bufferPosition"/> is 1 and <paramref name="caretAffinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, 
            the actual valid caret index is 0 (since the high surrogate and low surrogate characters form one text element). 
            If <paramref name="caretAffinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the actual valid caret index is 2.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToPreferredCoordinates">
            <summary>
            Moves the caret to the preferred x and y-coordinates.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>You cannot change the preferred coordinates by calling this method.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToNextCaretPosition">
            <summary>
            Moves the caret to the next valid <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> containing the valid values of the caret after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToPreviousCaretPosition">
            <summary>
            Moves the caret to the previous valid <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> containing the valid values of the caret after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.ContainingTextViewLine">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the caret, provided that that text line is visible
            in the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Left">
            <summary>
            Gets the position of the left edge of the caret in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Width">
            <summary>
            Gets the width of the caret in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Right">
            <summary>
            Gets the position of the right edge of the caret in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Top">
            <summary>
            Gets the position of the top edge of the caret in the text rendering coordinate system.
            </summary>
            <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Height">
            <summary>
            Gets the height of the caret in the text rendering coordinate system.
            </summary>
            <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Bottom">
            <summary>
            Gets the position of the bottom edge of the caret in the text rendering coordinate system.
            </summary>
            <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Position">
            <summary>
            Gets the current position of the caret.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.OverwriteMode">
            <summary>
            Determines whether the caret is in overwrite mode.
            </summary>
            <remarks>
            <para>When the caret is in overwrite mode, typed characters replace the character under the caret, 
            and a block is drawn instead of a vertical line.</para>
            <para>This is distinct from the IEditorOptions overwrite mode, 
            since the caret can switch modes based on its position in the view. 
            The caret is not in OverwriteMode when it is positioned at the end of the line in a view, or when there is a
            non-empty selection, even if IEditorOptions.OverwriteMode is true.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.InVirtualSpace">
            <summary>
            Determines whether the caret lies in virtual space. A virtual space is one that is after the physical end of a line.
            </summary>
            <remarks>
            <para>This is distinct from the <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> UseVirtualSpace, 
            since virtual space can be enabled even if the caret does not lie in virtual space.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.IsHidden">
            <summary>
            Gets or sets the visibility of the caret.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextCaret.PositionChanged">
            <summary>
            Occurs when the position of the caret has been explicitly changed.
            </summary>
            <remarks>
            The event is not raised if the caret position was changed as a consequence of tracking normal text edits.
            The normal behavior of the caret is to move after the typed character.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextSelection">
            <summary>
            Represents the selected text in an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Select(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Selects the text in the specified <paramref name="selectionSpan"/>.
            </summary>
            <param name="selectionSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> of text to select in the 
            underlying text buffer.</param>
            <param name="isReversed"><c>true</c> if the selection was made in a reverse direction, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Select(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Select from the anchor point to the active point.
            </summary>
            <param name="anchorPoint">The anchor point</param>
            <param name="activePoint">The active point</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.GetSelectionOnTextViewLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
            <summary>
            Get the selection on a particular <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
            <param name="line">Line for which to get the selection.</param>
            <returns>The selection on <paramref name="line"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Clear">
            <summary>
            Clears the selection.
            </summary>
            <remarks>
            After calling this method, <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsEmpty"/> will be <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.TextView">
            <summary>
            Gets the text view to which this selection belongs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.SelectedSpans">
            <summary>
            The currently-selected spans.
            </summary>
            <remarks>
            <para>This span collection will never be empty.  However, the spans in
            this collection may be 0-length.</para>
            <para>This value can be very expensive to compute the first time after the selection has changed.</para>
            <para>Use GetSelectionOnTextViewLine() unless you need the entire selection.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.VirtualSelectedSpans">
            <summary>
            The currently-selected spans, as <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan"/> objects.
            </summary>
            <remarks>
            <para>This span collection will never be empty.  However, the spans in
            this collection may be 0-length.</para>
            <para>This value can be very expensive to compute the first time after the selection has changed.</para>
            <para>Use GetSelectionOnTextViewLine() unless you need the entire selection.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.StreamSelectionSpan">
            <summary>
            Get the current selection as if it were a stream selection, regardless
            of the current selection mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.Mode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsReversed">
            <summary>
            Is <c>true</c> if the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivePoint"/> comes before the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.AnchorPoint"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsEmpty">
            <summary>
            Determines whether the selection is empty.
            </summary>
            <remarks>The selection is empty if the active and anchor points are
            the same point.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive">
            <summary>
            Whether or not the selection is active.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivationTracksFocus"/> is <c>true</c>, this property is automatically
            updated when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> gains and loses aggregate focus.  You can still
            override it while <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivationTracksFocus"/> is <c>false</c>, but the value will change
            whenever focus changes.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivationTracksFocus">
            <summary>
            Determines whether <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive"/> should track when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> gains and
            loses aggregate focus.  The default is <c>true</c>.
            </summary>
            <remarks>
            <para>
            While the value of this property is <c>true</c>, the value of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive"/> will track
            <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.HasAggregateFocus"/>.  When the value of this property changes to <c>true</c>,
            the value of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive"/> will be immediately updated.
            </para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextSelection.SelectionChanged">
            <summary>
            Occurs when Select or Clear start to be called.  The sender of the event will be this <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextSelection"/>.
            </summary>
            <remarks>
            This event is not raised if the selection shrinks or grows as a result of its associated span expanding or shrinking.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivePoint">
            <summary>
            Gets the active point of the selection.
            </summary>
            <remarks><para>This point normally corresponds to the end of the selection that contains to the caret position.</para>
            <para>If the selection is reversed, then this point will come before the AnchorPoint.</para></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.AnchorPoint">
            <summary>
            Gets the anchor point of the selection.
            </summary>
            <remarks><para>This normally corresponds to the end of the selection that does not contain to the caret position.</para>
            <para>If the selection is reversed, then this point will come after the ActivePoint.</para></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.Start">
            <summary>
            Gets the start point of the selection.
            </summary>
            <remarks>This is either the active point or the anchor point, whichever comes first.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.End">
            <summary>
            Gets the end point of the selection.
            </summary>
            <remarks>This is either the active point or the anchor point, whichever comes last.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextView">
            <summary>
            Represents a view of text in an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. It is the base class for a platform-specific interface
            that has methods to allow the formatted text to be rendered.
            </summary>
            <remarks>
            <para>A text view is a platform-independent representation of a contiguous block of formatted and adorned text,
            accessible through the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines"/> property.
            It also instantiates an instance of an IEditorOperations component part so that
            it can execute various commands.</para>
            <para>The text is formatted based on the classifiers attached to the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</para>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.DisplayTextLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition)">
            <summary>
            Formats and displays the contents of the text buffer so that the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> containing <paramref name="bufferPosition"/> 
            is displayed at the desired position.
            </summary>
            <param name="bufferPosition">
            The position of the character that is to be contained in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> displayed at the specified vertical position.
            </param>
            <param name="verticalDistance">
            The distance (in pixels) between the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the edge of the view. If <paramref name="relativeTo"/> is equal to
            <c>ViewRelativePosition.Top</c>, then the distance is from the top of the view to the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>. Otherwise,
            it is the distance from the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> to the bottom on the view.
            Negative values are allowed, which might cause the line to be displayed outside the viewport.
            This method can become quite expensive if <paramref name="verticalDistance"/> is large. You 
            should avoid making <paramref name="verticalDistance"/> greater than the height of the view.
            </param>
            <param name="relativeTo">
            Specifies whether the line offset is relative to the top or bottom of the view.
            </param>
            <returns>
            The vertical distance (from the top or bottom of the view) 
            at which the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> containing the specified position is to be displayed.
            </returns>
            <remarks>
            <para>If word wrap is disabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> 
            corresponds to the entire <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> that contains <paramref name="bufferPosition"/>.
            If word wrap is enabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> 
            corresponds to the portion of the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> that both
            contains <paramref name="bufferPosition"/> and fits into the view. <paramref name="bufferPosition"/> may not be the first
            character in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</para>
            <para>The returned value will generally be equal to <paramref name="verticalDistance"/>, except in cases where the view
            was repositioned to prevent a gap from appearing at the top or bottom of the view.</para>
            <para>Calling this method will cause the view to dispose of its current <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="bufferPosition"/> is from the wrong
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> or <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="relativeTo"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.DisplayTextLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Formats and displays the contents of the text buffer so that the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> containing <paramref name="bufferPosition"/> 
            is displayed at the desired position.
            </summary>
            <param name="bufferPosition">
            The position of the character that is to be contained in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> displayed at the specified vertical position.
            </param>
            <param name="verticalDistance">
            The distance (in pixels) between the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the edge of the view. If <paramref name="relativeTo"/> is equal to
            <c>ViewRelativePosition.Top</c>, then the distance is from the top of the view to the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>. Otherwise,
            it is the distance from the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> to the bottom on the view.
            Negative values are allowed, which might cause the line to be displayed outside the viewport.
            This method can become quite expensive if <paramref name="verticalDistance"/> is large. You 
            should avoid making <paramref name="verticalDistance"/> greater than the height of the view.
            </param>
            <param name="relativeTo">
            Specifies whether the line offset is relative to the top or bottom of the view.
            </param>
            <param name="viewportWidthOverride">
            If specified, the text is formatted as if the viewport had the specified width.
            </param>
            <param name="viewportHeightOverride">
            If specified, the text is formatted as if the viewport had the specified height.
            </param>
            <returns>
            The vertical distance (from the top or bottom of the view) 
            at which the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> containing the specified position is to be displayed.
            </returns>
            <remarks>
            <para>If word wrap is disabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> 
            corresponds to the entire <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> that contains <paramref name="bufferPosition"/>.
            If word wrap is enabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> 
            corresponds to the portion of the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> that both
            contains <paramref name="bufferPosition"/> and fits into the view. <paramref name="bufferPosition"/> may not be the first
            character in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</para>
            <para>The returned value will generally be equal to <paramref name="verticalDistance"/>, except in cases where the view
            was repositioned to prevent a gap from appearing at the top or bottom of the view.</para>
            <para>Calling this method will cause the view to dispose of its current <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines"/>.</para>
            <para>The viewport width override will have no effect unless word wrap is enabled in the view.</para>
            <para>The viewport height and width overrides only change how text is formatted for this call. Subsequent calls will use the
            width and height of the viewport (unless explicitly overriden a second time).</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="bufferPosition"/> is from the wrong
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> or <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="relativeTo"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> of text that constitutes a text element (a single visual representation)
            at the given <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/>.
            </summary>
            <param name="point">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the text snapshot at which to get the text element.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> containing the bounds of the text element.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="point"/> is from the wrong
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</exception>
            <remarks>A text element may be a UTF-16 surrogate pair, consisting of a high
            surrogate character and a low surrogate character. If a point in the text buffer
            lies between a high surrogate character and a low surrogate character, the text element span will 
            start at the high surrogate character and end at the low surrogate character.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.Close">
            <summary>
            Closes the text view and its view.
            </summary>
            <exception cref="T:System.InvalidOperationException">The text view host is already closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.QueueSpaceReservationStackRefresh">
            <summary>
            Requests a refresh of the space reservation stack.
            </summary>
            <remarks>
            Refreshing the space reservation stack involves asking each of the space reservation managers/agents to reposition
            themselves.  This method will be called mostly by space reservation agents that wish to reposition their content.  The
            space reservation stack is refreshed asynchronously.  Calling QueueSpaceReservationStackRefresh will perform a refresh
            of the space reservation stack, but the effects will not be visible immediately on return of the call.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer position used to search for a text line.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the specified buffer position.
            </returns>
            <remarks>
            <para>This method returns an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> if it exists in the view.</para>
            <para>If the line does not exist in the cache of formatted lines, it will be formatted and added to the cache.</para>
            <para>The returned <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> could be invalidated by either a layout by the view or by subsequent calls to this method.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> is not a valid buffer position.</exception>
            <exception cref="T:System.InvalidOperationException"> if the view has not completed initialization.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.InLayout">
            <summary>
            Determines whether the view is in the process of being laid out.
            </summary>
            <remarks>Attempting to get the text view lines of the view while it is being laid out will throw an exception.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewScroller">
            <summary>
            Gets a helper that provides various methods to scroll or manipulate the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines">
            <summary>
            Gets a read-only list of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects rendered in this view.
            </summary>
            <remarks>
            This list will be dense. That is, all characters between the first character of the first <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> through
            the last character of the last <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> will be represented in one of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects,
            except when the layout of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects is in progress.
            <para>
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects are disjoint. That is, a given character is part of only one <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </para>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects are sorted by the index of their first character.
            </para>
            <para>Some of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects may not be visible, 
            and all <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects will be disposed of when the view
            recomputes its layout.</para>
            <para>This property will be null during the view's initialization.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">View is in the process of being laid out.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Caret">
            <summary>
            Gets the caret element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Selection">
            <summary>
            Gets the selection element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ProvisionalTextHighlight">
            <summary>
            Gets the span of text covered by the provisional text highlight.
            </summary>
            <remarks>
            If there is no provisional text, this method returns null.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Roles">
            <summary>
            The roles which this view plays. Roles partially determine the extensions that are instantiated for the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> whose text is rendered in this view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.BufferGraph">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> that contains the set of source buffers that contribute to this view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextSnapshot">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> of the text that is currently rendered in the view.
            </summary>
            <remarks>
            This snapshot will be identical to the CurrentSnapshot of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer"/>, except when handling a
            Changed event on that buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.VisualSnapshot">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> of the visual buffer that is being rendered.
            </summary>
            <remarks>
            This snapshot should not be used in any method that requires a position in the text buffer, since
            those positions refer to <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextSnapshot"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewModel">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> of this text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextDataModel">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> of this text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.MaxTextRightCoordinate">
            <summary>
            Gets the right coordinate of the longest line, whether or not that line is currently visible, in logical pixels.
            </summary>
            <remarks>This value is cached and may not represent the width of the widest line
            in the underlying buffer. For example, if the widest line has never been formatted,
            then it is not in the cache.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportLeft">
            <summary>
            Gets or sets the position of the left edge of the viewport in the text rendering coordinate system.
            </summary>
            <remarks>
            When set, the horizontal offset is clipped to [0.0, Max(0.0, formatted text width - viewport width)] on non word-wrapped views,
            and [0,0] for views in which word-wrap is enabled.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportTop">
            <summary>
            Gets the position of the top edge of the viewport in the text rendering coordinate system.
            </summary>
            <remarks>
            Scrolling the text is done by changing the set of formatted lines and/or the vertical offset of those lines.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportRight">
            <summary>
            Gets the position of the right edge of the viewport in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportBottom">
            <summary>
            Gets the position of the bottom edge of the viewport in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportWidth">
            <summary>
            Gets the width of the visible content window in logical pixels.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportHeight">
            <summary>
            Gets the height of the visible content window in logical pixels.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.LineHeight">
            <summary>
            Gets the nominal height of a line of text in the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.IsClosed">
            <summary>
            Determines whether this text view has been closed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Options">
            <summary>
            Gets the options for this text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.IsMouseOverViewOrAdornments">
            <summary>
            Determines whether the mouse is over the view or any of its adornments.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.HasAggregateFocus">
            <summary>
            Determines whether the view or any of its adornments has focus.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.LayoutChanged">
            <summary>
            Occurs whenever the text displayed in the view changes.
            </summary>
            <remarks><para>This event is raised whenever the rendered text displayed in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> changes.</para>
            <para>It is raised whenever the view does a layout (which happens when DisplayTextLineContainingBufferPosition is called or in response to text or classification changes).</para>
            <para>It ia also raised whenever the view scrolls horizontally or when its size changes.</para></remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportLeftChanged">
            <summary>
            Occurs when the position of the viewport's left edge is changed. (e.g. when the view is horizontally scrolled)
            </summary>
            <remarks>Deprecated. Use LayoutChanged instead.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportHeightChanged">
            <summary>
            Occurs when the viewport's height is changed.
            </summary>
            <remarks>Deprecated. Use LayoutChanged instead.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportWidthChanged">
            <summary>
            Occurs when the viewport's width is changed.
            </summary>
            <remarks>Deprecated. Use LayoutChanged instead.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.MouseHover">
            <summary>
            Occurs when the mouse has hovered over the same character.
            </summary>
            <remarks>
            This event is raised only once, unless either the mouse moves or the text in the view changes.
            <para>The delay between the time when the mouse stops moving and the time when the event is raised 
            can be changed by adding a <see cref="T:Microsof