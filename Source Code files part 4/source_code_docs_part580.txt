e <see cref="T:System.Windows.Media.ArcSegment" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.IsLargeArc">
      <summary>
                    Gets or sets a value that indicates whether the arc should be greater than 180 degrees.
                </summary>
      <returns>true if the arc should be greater than 180 degrees; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.IsLargeArcProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> dependency property identifier.
                </returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.Point">
      <summary>
                    Gets or sets the endpoint of the elliptical arc.
                </summary>
      <returns>
                    The point to which the arc is drawn. The default is a <see cref="T:System.Windows.Point" /> with value 0,0. 
                </returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.PointProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.ArcSegment.Point" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Media.ArcSegment.Point" /> dependency property identifier.
                </returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.RotationAngle">
      <summary>
                    Gets or sets the amount (in degrees) by which the ellipse is rotated about the x-axis.  
                </summary>
      <returns>
                    The amount (in degrees) by which the ellipse is rotated about the x-axis. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.RotationAngleProperty">
      <summary>
                    Identifies the  <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> dependency property identifier.
                </returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.Size">
      <summary>
                    Gets or sets the x- and y-radius of the arc as a <see cref="T:System.Windows.Size" /> structure. 
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Size" /> structure that describes the x- and y-radius of the elliptical arc. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the arc's x-radius; its <see cref="P:System.Windows.Size.Height" /> property specifies the arc's y-radius. The default is a <see cref="T:System.Windows.Size" /> with value 0,0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.SizeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.ArcSegment.Size" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Media.ArcSegment.Size" /> dependency property identifier.
                </returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.SweepDirection">
      <summary>
                    Gets or sets a value that specifies whether the arc is drawn in the <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> or <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> direction.
                </summary>
      <returns>
                    One of the enumeration values that specifies the direction in which the arc is drawn. The default is <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.SweepDirectionProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> dependency property identifier.
                </returns>
    </member>
    <member name="T:System.Windows.Media.BezierSegment">
      <summary>
                    Represents a cubic Bezier curve drawn between two points. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.BezierSegment.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.BezierSegment" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point1">
      <summary>
                    Gets or sets the first control point of the curve. 
                </summary>
      <returns>
                    The first control point of the curve. The default is a <see cref="T:System.Windows.Point" /> with value 0,0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point1Property">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.BezierSegment.Point1" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.BezierSegment.Point1" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point2">
      <summary>
                    Gets or sets the second control point of the curve.
                </summary>
      <returns>
                    The second control point of the curve.
                </returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point2Property">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.BezierSegment.Point2" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.BezierSegment.Point2" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point3">
      <summary>
                    Gets or sets the end point of the curve.
                </summary>
      <returns>
                    The end point of the curve.
                </returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point3Property">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.BezierSegment.Point3" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.BezierSegment.Point3" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Brush">
      <summary>
                    Defines objects used to paint graphical objects. Classes that derive from <see cref="T:System.Windows.Media.Brush" /> describe how the area is painted.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Brush.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Brush" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Brush.Opacity">
      <summary>
                    Gets or sets the degree of opacity of a <see cref="T:System.Windows.Media.Brush" />.  
                </summary>
      <returns>
                    The value of the <see cref="P:System.Windows.Media.Brush.Opacity" /> property is expressed as a value between 0 and 1.0. The default value is 1.0. 
                </returns>
    </member>
    <member name="F:System.Windows.Media.Brush.OpacityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Brush.Opacity" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Media.Brush.Opacity" /> dependency property identifier.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Brush.RelativeTransform">
      <summary>
                    Gets or sets the transformation that is applied to the brush using relative coordinates. 
                </summary>
      <returns>
                    The transformation that is applied to the brush using relative coordinates. The default value is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Brush.RelativeTransformProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Brush.RelativeTransform" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Media.Brush.RelativeTransform" /> dependency property identifier.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Brush.Transform">
      <summary>
                    Gets or sets the transformation that is applied to the brush.
                </summary>
      <returns>
                    The transformation to apply to the brush.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Brush.TransformProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Brush.Transform" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Media.Brush.Transform" /> dependency property identifier.
                </returns>
    </member>
    <member name="T:System.Windows.Media.BrushMappingMode">
      <summary>
                    Specifies the coordinate system used by a <see cref="T:System.Windows.Media.Brush" />. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.BrushMappingMode.Absolute">
      <summary>
                    The coordinate system is not relative to a bounding box. Values are interpreted directly in local space.  
                </summary>
    </member>
    <member name="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox">
      <summary>
                    The coordinate system is relative to a bounding box: 0 indicates 0 percent of the bounding box, and 1 indicates 100 percent of the bounding box. For example, (0.5, 0.5) describes a point in the middle of the bounding box, and (1, 1) describes a point at the bottom right of the bounding box. 
                </summary>
    </member>
    <member name="T:System.Windows.Media.Color">
      <summary>
                    Describes a color in terms of alpha, red, green, and blue channels. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Color.A">
      <summary>
                    Gets or sets the sRGB alpha channel value of the color. 
                </summary>
      <returns>
                    The sRGB alpha channel value of the color, as a value between 0 and 255.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Color.B">
      <summary>
                    Gets or sets the sRGB blue channel value of the color. 
                </summary>
      <returns>
                    The sRGB blue channel value, as a value between 0 and 255.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Color.Equals(System.Object)">
      <summary>
                    Tests whether the specified object is a <see cref="T:System.Windows.Media.Color" /> structure and is equivalent to the current color. 
                </summary>
      <returns>true if the specified object is a <see cref="T:System.Windows.Media.Color" /> structure and is identical to the current <see cref="T:System.Windows.Media.Color" /> structure; otherwise, false.
                </returns>
      <param name="o">
                    The object to compare to the current <see cref="T:System.Windows.Media.Color" /> structure.
                </param>
    </member>
    <member name="M:System.Windows.Media.Color.Equals(System.Windows.Media.Color)">
      <summary>
                    Tests whether the specified <see cref="T:System.Windows.Media.Color" /> structure is identical to the current color.
                </summary>
      <returns>true if the specified <see cref="T:System.Windows.Media.Color" /> structure is identical to the current <see cref="T:System.Windows.Media.Color" /> structure; otherwise, false.
                </returns>
      <param name="color">
                    The <see cref="T:System.Windows.Media.Color" /> structure to compare to the current <see cref="T:System.Windows.Media.Color" /> structure.
                </param>
    </member>
    <member name="M:System.Windows.Media.Color.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
                    Creates a new <see cref="T:System.Windows.Media.Color" /> structure by using the specified sRGB alpha channel and color channel values. 
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Media.Color" /> structure with the specified values.
                </returns>
      <param name="a">
                    The alpha channel, <see cref="P:System.Windows.Media.Color.A" />, of the new color. The value must be between 0 and 255.
                </param>
      <param name="r">
                    The red channel, <see cref="P:System.Windows.Media.Color.R" />, of the new color. The value must be between 0 and 255.
                </param>
      <param name="g">
                    The green channel, <see cref="P:System.Windows.Media.Color.G" />, of the new color. The value must be between 0 and 255.
                </param>
      <param name="b">
                    The blue channel, <see cref="P:System.Windows.Media.Color.B" />, of the new color. The value must be between 0 and 255.
                </param>
    </member>
    <member name="P:System.Windows.Media.Color.G">
      <summary>
                    Gets or sets the sRGB green channel value of the color. 
                </summary>
      <returns>
                    The sRGB green channel value, as a value between 0 and 255.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Color.GetHashCode">
      <summary>
                    Gets a hash code for the current <see cref="T:System.Windows.Media.Color" /> structure. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Windows.Media.Color" /> structure.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Color.op_Equality(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>
                    Tests whether two <see cref="T:System.Windows.Media.Color" /> structures are identical. 
                </summary>
      <returns>true if <paramref name="color1" /> and <paramref name="color2" /> are exactly identical; otherwise, false.
                </returns>
      <param name="color1">
                    The first <see cref="T:System.Windows.Media.Color" /> structure to compare.
                </param>
      <param name="color2">
                    The second <see cref="T:System.Windows.Media.Color" /> structure to compare.
                </param>
    </member>
    <member name="M:System.Windows.Media.Color.op_Inequality(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>
                    Tests whether two <see cref="T:System.Windows.Media.Color" /> structures are not identical. 
                </summary>
      <returns>true if <paramref name="color1" /> and <paramref name="color2" /> are not equal; otherwise, false.
                </returns>
      <param name="color1">
                    The first <see cref="T:System.Windows.Media.Color" /> structure to compare.
                </param>
      <param name="color2">
                    The second <see cref="T:System.Windows.Media.Color" /> structure to compare.
                </param>
    </member>
    <member name="P:System.Windows.Media.Color.R">
      <summary>
                    Gets or sets the sRGB red channel value of the color. 
                </summary>
      <returns>
                    The sRGB red channel value, as a value between 0 and 255.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Color.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
                     
                </summary>
      <returns>
                     
                </returns>
      <param name="format">
                     
                </param>
      <param name="provider">
                     
                </param>
    </member>
    <member name="M:System.Windows.Media.Color.ToString">
      <summary>
                    Creates a string representation of the color using the ARGB channels in hex notation. 
                </summary>
      <returns>
                    The string representation of the color.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Color.ToString(System.IFormatProvider)">
      <summary>
                    Creates a string representation of the color by using the ARGB channels and the specified format provider. 
                </summary>
      <returns>
                    The string representation of the color.
                </returns>
      <param name="provider">
                    Culture-specific formatting information.
                </param>
    </member>
    <member name="T:System.Windows.Media.ColorInterpolationMode">
      <summary>
                    Determines how the colors in a gradient are interpolated. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.ColorInterpolationMode.ScRgbLinearInterpolation">
      <summary>
                    Colors are interpolated in the scRGB color space 
                </summary>
    </member>
    <member name="F:System.Windows.Media.ColorInterpolationMode.SRgbLinearInterpolation">
      <summary>
                    Colors are interpolated in the sRGB color space 
                </summary>
    </member>
    <member name="T:System.Windows.Media.Colors">
      <summary>
                    Implements a set of predefined colors. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Colors.Black">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FF000000. 
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Blue">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FF0000FF.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Brown">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FFA52A2A.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Cyan">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FF00FFFF.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkGray">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FFA9A9A9.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Gray">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FF808080.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Green">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FF008000.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightGray">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FFD3D3D3.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Magenta">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FFFF00FF.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Orange">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FFFFA500.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Purple">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FF800080.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Red">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FFFF0000.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Transparent">
      <summary>
                    Gets the system-defined color that has an ARGB value of #00FFFFFF.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.White">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FFFFFFFF.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Yellow">
      <summary>
                    Gets the system-defined color that has an ARGB value of #FFFFFF00.
                </summary>
      <returns>
                    Represents colors in terms of alpha, red, green, and blue channels.
                </returns>
    </member>
    <member name="T:System.Windows.Media.CompositionTarget">
      <summary>
                    Represents the display surface of a Silverlight-based application.
                </summary>
    </member>
    <member name="E:System.Windows.Media.CompositionTarget.Rendering">
      <summary>
                    Occurs when the core Silverlight rendering process renders a frame.
                </summary>
    </member>
    <member name="T:System.Windows.Media.DeepZoomImageTileSource">
      <summary>
                    Used to specify the source of a <see cref="T:System.Windows.Controls.MultiScaleImage" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.DeepZoomImageTileSource.#ctor">
      <summary>
                    Creates a new instance of the <see cref="T:System.Windows.Media.DeepZoomImageTileSource" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Media.DeepZoomImageTileSource.#ctor(System.Uri)">
      <summary>
                    Creates a new instance of the <see cref="T:System.Windows.Media.DeepZoomImageTileSource" /> class with the specified source Uri.
                </summary>
      <param name="sourceUri">
                    The source Uri.
                </param>
    </member>
    <member name="P:System.Windows.Media.DeepZoomImageTileSource.UriSource">
      <summary>
                    Gets or sets the source Uri of the <see cref="T:System.Windows.Media.DeepZoomImageTileSource" />.
                </summary>
      <returns>
                    The source Uri of the <see cref="T:System.Windows.Media.DeepZoomImageTileSource" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.DeepZoomImageTileSource.UriSourceProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.DeepZoomImageTileSource.UriSource" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.DeepZoomImageTileSource.UriSource" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.DoubleCollection">
      <summary>
                    Represents an ordered collection of <see cref="T:System.Double" /> values.
                </summary>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.DoubleCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.EllipseGeometry">
      <summary>
                    Represents the geometry of a circle or ellipse. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.EllipseGeometry.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.EllipseGeometry" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.EllipseGeometry.Center">
      <summary>
                    Gets or sets the center point of the <see cref="T:System.Windows.Media.EllipseGeometry" />. 
                </summary>
      <returns>
                    The center point of the <see cref="T:System.Windows.Media.EllipseGeometry" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.EllipseGeometry.CenterProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.EllipseGeometry.Center" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Media.EllipseGeometry.Center" /> dependency property identifier.
                </returns>
    </member>
    <member name="P:System.Windows.Media.EllipseGeometry.RadiusX">
      <summary>
                    Gets or sets the x-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry" />.  
                </summary>
      <returns>
                    The x-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry" />. 
                </returns>
    </member>
    <member name="F:System.Windows.Media.EllipseGeometry.RadiusXProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.EllipseGeometry.RadiusX" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Media.EllipseGeometry.RadiusX" /> dependency property identifier.
                </returns>
    </member>
    <member name="P:System.Windows.Media.EllipseGeometry.RadiusY">
      <summary>
                    Gets or sets the y-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry" />. 
                </summary>
      <returns>
                    The y-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.EllipseGeometry.RadiusYProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.EllipseGeometry.RadiusY" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Media.EllipseGeometry.RadiusY" /> dependency property identifier.
                </returns>
    </member>
    <member name="T:System.Windows.Media.FillRule">
      <summary>
                    Specifies how the intersecting areas of <see cref="T:System.Windows.Media.PathFigure" /> objects contained in a <see cref="T:System.Windows.Media.Geometry" /> are combined to form the area of the <see cref="T:System.Windows.Media.Geometry" />.
                </summary>
    </member>
    <member name="F:System.Windows.Media.FillRule.EvenOdd">
      <summary>
                    Rule that determines whether a point is in the fill region by drawing a ray from that point to infinity in any direction and counting the number of path segments within the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.
                </summary>
    </member>
    <member name="F:System.Windows.Media.FillRule.Nonzero">
      <summary>
                    Rule that determines whether a point is in the fill region of the path by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of 0, add one each time a segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is 0 then the point is outside the path. Otherwise, it is inside.
                </summary>
    </member>
    <member name="T:System.Windows.Media.FontFamily">
      <summary>
                    Represents a family of related fonts.
                </summary>
    </member>
    <member name="M:System.Windows.Media.FontFamily.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.FontFamily" /> class from the specified font family string.
                </summary>
      <param name="familyName">
                    The family name or names that comprise the new <see cref="T:System.Windows.Media.FontFamily" />. See "Font Family Grammar" in Remarks.
                </param>
    </member>
    <member name="M:System.Windows.Media.FontFamily.Equals(System.Object)">
      <summary>
                    Gets a value that indicates whether the current font family object and the specified font family object are the same.
                </summary>
      <returns>true if <paramref name="o" /> is equal to the current <see cref="T:System.Windows.Media.FontFamily" /> object; otherwise, false. If <paramref name="o" /> is not a <see cref="T:System.Windows.Media.FontFamily" /> object, false is returned.
                </returns>
      <param name="o">
                    The object to compare.
                </param>
    </member>
    <member name="M:System.Windows.Media.FontFamily.GetHashCode">
      <summary>
                    Serves as a hash function for <see cref="T:System.Windows.Media.FontFamily" />.
                </summary>
      <returns>
                    A hash value.
                </returns>
    </member>
    <member name="P:System.Windows.Media.FontFamily.Source">
      <summary>
                    Gets the font family name that is used to construct the <see cref="T:System.Windows.Media.FontFamily" /> object.
                </summary>
      <returns>
                    The font family name of the <see cref="T:System.Windows.Media.FontFamily" /> object.
                </returns>
    </member>
    <member name="M:System.Windows.Media.FontFamily.ToString">
      <summary>
                    Returns a string representation of this <see cref="T:System.Windows.Media.FontFamily" />.
                </summary>
      <returns>
                    The input font family string.
                </returns>
    </member>
    <member name="T:System.Windows.Media.GeneralTransform">
      <summary>
                    Provides generalized transformation support for objects, such as points and rectangles.
                </summary>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.Transform(System.Windows.Point)">
      <summary>
                    Transforms the specified point and returns the result.
                </summary>
      <returns>
                    The result of transforming <paramref name="point" />.
                </returns>
      <param name="point">
                    The point to transform.
                </param>
    </member>
    <member name="T:System.Windows.Media.Geometry">
      <summary>
                    Provides a base class for objects that define geometric shapes. <see cref="T:System.Windows.Media.Geometry" /> objects can be used for clipping regions and as geometry definitions for rendering two-dimensional graphic data as a <see cref="T:System.Windows.Shapes.Path" />.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Geometry.Bounds">
      <summary>
                    Gets a <see cref="T:System.Windows.Rect" /> that specifies the axis-aligned bounding box of the <see cref="T:System.Windows.Media.Geometry" />.
                </summary>
      <returns>
                    The axis-aligned bounding box of the <see cref="T:System.Windows.Media.Geometry" />.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Geometry.Empty">
      <summary>
                    Gets an empty geometry object.
                </summary>
      <returns>
                    The empty geometry object.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Geometry.StandardFlatteningTolerance">
      <summary>
                    Gets the standard tolerance used for polygonal approximation.
                </summary>
      <returns>
                    The standard tolerance. The default value is 0.25.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Geometry.Transform">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Transform" /> object applied to a <see cref="T:System.Windows.Media.Geometry" />. 
                </summary>
      <returns>
                    The transformation applied to the <see cref="T:System.Windows.Media.Geometry" />. Note that this value may be a single <see cref="T:System.Windows.Media.Transform" /> or a <see cref="T:System.Windows.Media.TransformCollection" /> cast as a <see cref="T:System.Windows.Media.Transform" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Geometry.TransformProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Geometry.Transform" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Geometry.Transform" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.GeometryCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.Geometry" /> objects.
                </summary>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.GeometryCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.GeometryGroup">
      <summary>
                    Represents a composite geometry, composed of other <see cref="T:System.Windows.Media.Geometry" /> objects. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.GeometryGroup.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.GeometryGroup" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.GeometryGroup.Children">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.GeometryCollection" /> that contains the objects that define this <see cref="T:System.Windows.Media.GeometryGroup" />.  
                </summary>
      <returns>
                    A collection containing the children of this <see cref="T:System.Windows.Media.GeometryGroup" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.GeometryGroup.ChildrenProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.GeometryGroup.Children" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.GeometryGroup.Children" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.GeometryGroup.FillRule">
      <summary>
                    Gets or sets how the intersecting areas of the objects contained in this <see cref="T:System.Windows.Media.GeometryGroup" /> are combined.  
                </summary>
      <returns>
                    One of the enumeration values that specifies how the intersecting areas are combined to form the resulting area. The default is <see cref="F:System.Windows.Media.FillRule.EvenOdd" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.GeometryGroup.FillRuleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.GeometryGroup.FillRule" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.GeometryGroup.FillRule" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.GradientBrush">
      <summary>
                    An abstract class that describes a gradient, composed of gradient stops. Classes that derive from <see cref="T:System.Windows.Media.GradientBrush" /> describe different ways of interpreting gradient stops. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.GradientBrush.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.GradientBrush" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.ColorInterpolationMode">
      <summary>
                    Gets or sets a <see cref="T:System.Windows.Media.ColorInterpolationMode" /> enumeration value that specifies how the gradient's colors are interpolated.  
                </summary>
      <returns>
                    Specifies how the colors in a gradient are interpolated. The default is <see cref="F:System.Windows.Media.ColorInterpolationMode.SRgbLinearInterpolation" />. 
                </returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.ColorInterpolationModeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.GradientBrush.ColorInterpolationMode" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.GradientBrush.ColorInterpolationMode" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.GradientStops">
      <summary>
                    Gets or sets the brush's gradient stops. 
                </summary>
      <returns>
                    A collection of the <see cref="T:System.Windows.Media.GradientStop" /> objects associated with the brush, each of which specifies a color and an offset along the brush's gradient axis. The default is an empty <see cref="T:System.Windows.Media.GradientStopCollection" />. 
                </returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.GradientStopsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.GradientBrush.GradientStops" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.GradientBrush.GradientStops" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.MappingMode">
      <summary>
                    Gets or sets a <see cref="T:System.Windows.Media.BrushMappingMode" /> enumeration value that specifies whether the positioning coordinates of the gradient brush are absolute or relative to the output area.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Media.BrushMappingMode" /> value that specifies how to interpret the gradient brush's positioning coordinates. The default is <see cref="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.MappingModeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.GradientBrush.MappingMode" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.GradientBrush.MappingMode" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.SpreadMethod">
      <summary>
                    Gets or sets the type of spread method that specifies how to draw a gradient that starts or ends inside the bounds of the object to be painted. 
                </summary>
      <returns>
                    The type of spread method used to paint the gradient. The default is <see cref="F:System.Windows.Media.GradientSpreadMethod.Pad" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.SpreadMethodProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.GradientBrush.SpreadMethod" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.GradientBrush.SpreadMethod" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.GradientSpreadMethod">
      <summary>
                    Specifies how to draw the gradient outside a gradient brush's gradient vector or space.  
                </summary>
    </member>
    <member name="F:System.Windows.Media.GradientSpreadMethod.Pad">
      <summary>
                    The color values at the ends of the gradient vector fill the remaining space. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.GradientSpreadMethod.Reflect">
      <summary>
                    The gradient is repeated in the reverse direction until the space is filled. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.GradientSpreadMethod.Repeat">
      <summary>
                    The gradient is repeated in the original direction until the space is filled. 
                </summary>
    </member>
    <member name="T:System.Windows.Media.GradientStop">
      <summary>
                    Describes the location and color of a transition point in a gradient. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.GradientStop.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.GradientStop" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.GradientStop.Color">
      <summary>
                    Gets or sets the color of the gradient stop. 
                </summary>
      <returns>
                    The color of the gradient stop. The default is <see cref="P:System.Windows.Media.Colors.Transparent" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.GradientStop.ColorProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.GradientStop.Color" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.GradientStop.Color" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.GradientStop.Offset">
      <summary>
                    Gets the location of the gradient stop within the gradient vector. 
                </summary>
      <returns>
                    The relative location of this gradient stop along the gradient vector. The default is 0. 
                </returns>
    </member>
    <member name="F:System.Windows.Media.GradientStop.OffsetProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.GradientStop.Offset" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.GradientStop.Offset" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.GradientStopCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.GradientStop" /> objects that can be individually accessed by index. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.GradientStopCollection" /> class. 
                </summary>
    </member>
    <member name="T:System.Windows.Media.ImageBrush">
      <summary>
                    Paints an area with an image. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.ImageBrush.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.ImageBrush" /> class. 
                </summary>
    </member>
    <member name="E:System.Windows.Media.ImageBrush.ImageFailed">
      <summary>
                    Occurs when there is an error associated with image retrieval or format.
                </summary>
    </member>
    <member name="P:System.Windows.Media.ImageBrush.ImageSource">
      <summary>
                    Gets or sets the image displayed by this <see cref="T:System.Windows.Media.ImageBrush" />.
                </summary>
      <returns>
                    The image displayed by this <see cref="T:System.Windows.Media.ImageBrush" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.ImageBrush.ImageSourceProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.ImageBrush.ImageSource" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.ImageBrush.ImageSource" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.ImageSource">
      <summary>
                    Provides an object source type for <see cref="P:System.Windows.Controls.Image.Source" />, <see cref="P:System.Windows.Controls.MultiScaleImage.Source" />, and <see cref="P:System.Windows.Media.ImageBrush.ImageSource" />.
                </summary>
    </member>
    <member name="T:System.Windows.Media.LicenseAcquirer">
      <summary>
                    This class handles acquiring licenses for DRM encrypted content.
                </summary>
    </member>
    <member name="M:System.Windows.Media.LicenseAcquirer.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.LicenseAcquirer" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.LicenseAcquirer.LicenseServerUriOverride">
      <summary>
                    Gets or sets a URI value that overrides whatever the license server URI is in the content header.
                </summary>
      <returns>
                    The URI that overrides the URI provided in the content header (if any). If this value is null (the default), then the system will use whatever license server URI is in the content header.  The default value is null. 
                </returns>
    </member>
    <member name="M:System.Windows.Media.LicenseAcquirer.OnAcquireLicense(System.IO.Stream,System.Uri)">
      <summary>
                    The default implementation of this method calls into the <see cref="T:System.Windows.Controls.MediaElement" /> to acquire a license. Developers should override this method if they want to handle the license acquisition themselves.
                </summary>
      <param name="licenseChallenge">
                    The SOAP license challenge.
                </param>
      <param name="licenseServerUri">
                    The URI of the License Server. In the case of PlayReady content with a license server, this value will be the value in the PlayReady header. In the case of WM DRM content and PlayReady content without a license server specified in the header, this value will be null unless the <see cref="P:System.Windows.Media.LicenseAcquirer.LicenseServerUriOverride" /> property has been set, then that value will passed in as the <paramref name="licenseServerUri" />.
                </param>
    </member>
    <member name="M:System.Windows.Media.LicenseAcquirer.SetLicenseResponse(System.IO.Stream)">
      <summary>
                    Developers call this to return the SOAP body from the http response to the license challenge. The SOAP body is passed in as a stream and contains the entire SOAP response.
                </summary>
      <param name="licenseResponse">
                    The SOAP body from the http response to the license challenge. The SOAP body is passed in as a stream and contains the entire SOAP response.
                </param>
    </member>
    <member name="T:System.Windows.Media.LinearGradientBrush">
      <summary>
                    Paints an area with a linear gradient. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.LinearGradientBrush" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.GradientStopCollection,System.Double)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.LinearGradientBrush" /> class that has the specified <see cref="T:System.Windows.Media.GradientStopCollection" /> and angle.
                </summary>
      <param name="gradientStopCollection">
                    The <see cref="P:System.Windows.Media.GradientBrush.GradientStops" /> to set on this brush.
                </param>
      <param name="angle">
                    A <see cref="T:System.Double" /> that represents the angle, in degrees, of the gradient. A value of 0 creates a horizontal gradient, and a value of 90 creates a vertical gradient. Negative values are permitted, as are values over 360 (will be treated as mod 360).
                </param>
    </member>
    <member name="P:System.Windows.Media.LinearGradientBrush.EndPoint">
      <summary>
                    Gets or sets the ending two-dimensional coordinates of the linear gradient. 
                </summary>
      <returns>
                    The ending two-dimensional coordinates of the linear gradient. The default is a <see cref="T:System.Windows.Point" /> with value 1,1.  
                </returns>
    </member>
    <member name="F:System.Windows.Media.LinearGradientBrush.EndPointProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint" /> dependency property.  
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.LinearGradientBrush.StartPoint">
      <summary>
                    Gets or sets the starting two-dimensional coordinates of the linear gradient. 
                </summary>
      <returns>
                    The starting two-dimensional coordinates for the linear gradient. The default is a <see cref="T:System.Windows.Point" /> with value 0,0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.LinearGradientBrush.StartPointProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.LineGeometry">
      <summary>
                    Represents the geometry of a line. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.LineGeometry.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.LineGeometry" /> class that has no length. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.LineGeometry.EndPoint">
      <summary>
                    Gets or sets the end point of a line. 
                </summary>
      <returns>
                    The end point of the line. The default is a <see cref="T:System.Windows.Point" /> with value 0,0. 
                </returns>
    </member>
    <member name="F:System.Windows.Media.LineGeometry.EndPointProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.LineGeometry.EndPoint" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.LineGeometry.EndPoint" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.LineGeometry.StartPoint">
      <summary>
                    Gets or sets the start point of the line. 
                </summary>
      <returns>
                    The start point of the line. The default is a <see cref="T:System.Windows.Point" /> with value 0,0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.LineGeometry.StartPointProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.LineGeometry.StartPoint" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.LineGeometry.StartPoint" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.LineSegment">
      <summary>
                    Represents a line drawn between two points, which can be part of a <see cref="T:System.Windows.Media.PathFigure" /> within <see cref="T:System.Windows.Shapes.Path" /> data.
                </summary>
    </member>
    <member name="M:System.Windows.Media.LineSegment.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.LineSegment" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.LineSegment.Point">
      <summary>
                    Gets or sets the end point of the line segment. 
                </summary>
      <returns>
                    The end point of the line segment. The default is a <see cref="T:System.Windows.Point" /> with value 0,0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.LineSegment.PointProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.LineSegment.Point" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.LineSegment.Point" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary>
                     Represents a 3x3 affine transformation matrix used for transformations in two-dimensional space. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
                    Initializes a <see cref="T:System.Windows.Media.Matrix" /> structure. 
                </summary>
      <param name="m11">
                    The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M11" /> coefficient.
                </param>
      <param name="m12">
                    The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M12" /> coefficient.
                </param>
      <param name="m21">
                    The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M21" /> coefficient.
                </param>
      <param name="m22">
                    The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M22" /> coefficient.
                </param>
      <param name="offsetX">
                    The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetX" /> coefficient.
                </param>
      <param name="offsetY">
                    The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetY" /> coefficient.
                </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" />. 
                </summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" /> structure; otherwise, false.
                </returns>
      <param name="o">
                    The <see cref="T:System.Object" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary>
                    Determines whether the specified <see cref="T:System.Windows.Media.Matrix" /> structure is identical to this instance. 
                </summary>
      <returns>true if instances are equal; otherwise, false. 
                </returns>
      <param name="value">
                    The instance of <see cref="T:System.Windows.Media.Matrix" /> to compare to this instance.
                </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary>
                    Returns the hash code for this <see cref="T:System.Windows.Media.Matrix" /> structure. 
                </summary>
      <returns>
                    The hash code for this instance.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary>
                    Gets an identity <see cref="T:System.Windows.Media.Matrix" />. 
                </summary>
      <returns>
                    An identity matrix.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary>
                    Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix. 
                </summary>
      <returns>true if the <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary>
                    Gets or sets the value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure. 
                </summary>
      <returns>
                    The value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 1.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary>
                     Gets or sets the value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. 
                </summary>
      <returns>
                    The value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary>
                    Gets or sets the value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.
                </summary>
      <returns>
                    The value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary>
                    Gets or sets the value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. 
                </summary>
      <returns>
                    The value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 1.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary>
                    Gets or sets the value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.  
                </summary>
      <returns>
                    The value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary>
                    Gets or sets the value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. 
                </summary>
      <returns>
                    The value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
                    Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are identical.
                </summary>
      <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are identical; otherwise, false.
                </returns>
      <param name="matrix1">
                    The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.
                </param>
      <param name="matrix2">
                    The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.
                </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
                    Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are not identical.
                </summary>
      <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are not identical; otherwise, false.
                </returns>
      <param name="matrix1">
                    The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.
                </param>
      <param name="matrix2">
                    The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.
                </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)"></member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary>
                    Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Matrix" /> structure. 
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" />, and <see cref="P:System.Windows.Media.Matrix.OffsetY" /> values of this <see cref="T:System.Windows.Media.Matrix" />.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary>
                    Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Matrix" /> structure with culture-specific formatting information. 
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" />, and <see cref="P:System.Windows.Media.Matrix.OffsetY" /> values of this <see cref="T:System.Windows.Media.Matrix" />.
                </returns>
      <param name="provider">
                    The culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary>
                    Transforms the specified point by the <see cref="T:System.Windows.Media.Matrix" /> and returns the result.
                </summary>
      <returns>
                    The result of transforming <paramref name="point" /> by this <see cref="T:System.Windows.Media.Matrix" />.
                </returns>
      <param name="point">
                    The point to transform.
                </param>
    </member>
    <member name="T:System.Windows.Media.MatrixTransform">
      <summary>
                    Creates an arbitrary affine matrix transformation that is used to manipulate objects or coordinate systems in a two-dimensional plane.
                </summary>
    </member>
    <member name="M:System.Windows.Media.MatrixTransform.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.MatrixTransform" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.MatrixTransform.Matrix">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Matrix" /> that defines this transformation. 
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Media.Matrix" /> structure that defines this transformation. The default is an identity <see cref="T:System.Windows.Media.Matrix" />. An identity matrix has a value of 1 in coefficients [1,1], [2,2], and [3,3]; and a value of 0 in the rest of the coefficients.
                </returns>
    </member>
    <member name="F:System.Windows.Media.MatrixTransform.MatrixProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.MatrixTransform.Matrix" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.MatrixTransform.Matrix" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.MediaElementState">
      <summary>
                    Defines the potential states of a <see cref="T:System.Windows.Controls.MediaElement" /> object.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Closed">
      <summary>
                    The <see cref="T:System.Windows.Controls.MediaElement" /> contains no media. The <see cref="T:System.Windows.Controls.MediaElement" /> displays a transparent frame.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Opening">
      <summary>
                    The <see cref="T:System.Windows.Controls.MediaElement" /> is validating and attempting to open the Uniform Resource Identifier (URI) specified by its <see cref="P:System.Windows.Controls.MediaElement.Source" /> property. While in this state, the <see cref="T:System.Windows.Controls.MediaElement" /> queues any <see cref="M:System.Windows.Controls.MediaElement.Play" />, <see cref="M:System.Windows.Controls.MediaElement.Pause" />, or <see cref="M:System.Windows.Controls.MediaElement.Stop" /> commands it receives and processes them if the media is successfully opened.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Individualizing">
      <summary>
                    The <see cref="T:System.Windows.Controls.MediaElement" /> is in the process of ensuring that proper individualization components (only applicable when playing DRM protected content) are installed on the user's computer. See Digital Rights Management (DRM) for more information.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.AcquiringLicense">
      <summary>
                    The <see cref="T:System.Windows.Controls.MediaElement" /> is acquiring a license required to play DRM protected content. Once <see cref="M:System.Windows.Media.LicenseAcquirer.OnAcquireLicense(System.IO.Stream,System.Uri)" /> has been called, the <see cref="T:System.Windows.Controls.MediaElement" /> will remain in this state until <see cref="M:System.Windows.Media.LicenseAcquirer.SetLicenseResponse(System.IO.Stream)" /> has been called.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Buffering">
      <summary>
                    The <see cref="T:System.Windows.Controls.MediaElement" /> is loading the media for playback. Its <see cref="P:System.Windows.Controls.MediaElement.Position" /> does not advance during this state. If the <see cref="T:System.Windows.Controls.MediaElement" /> was already playing video, it continues to display the last displayed frame.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Playing">
      <summary>
                    The <see cref="T:System.Windows.Controls.MediaElement" /> is playing the media specified by its source property. Its <see cref="P:System.Windows.Controls.MediaElement.Position" /> advances forward.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Paused">
      <summary>
                    The <see cref="T:System.Windows.Controls.MediaElement" /> does not advance its <see cref="P:System.Windows.Controls.MediaElement.Position" />. If the <see cref="T:System.Windows.Controls.MediaElement" /> was playing video, it continues to display the current frame.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Stopped">
      <summary>
                    The <see cref="T:System.Windows.Controls.MediaElement" /> contains media but is not playing or paused. Its <see cref="P:System.Windows.Controls.MediaElement.Position" /> is 0 and does not advance. If the loaded media is video, the <see cref="T:System.Windows.Controls.MediaElement" /> displays the first frame.
                </summary>
    </member>
    <member name="T:System.Windows.Media.MediaSampleAttributeKeys">
      <summary>
                    Describes the media sample.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaSampleAttributeKeys.KeyFrameFlag">
      <summary>
                    Data about the sample needed to decrypt it.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaSampleAttributeKeys.DRMInitializationVector">
      <summary>
                    A Boolean value describing whether or not the given video frame is a keyframe.
                </summary>
    </member>
    <member name="T:System.Windows.Media.MediaSourceAttributesKeys">
      <summary>
                    Describes the media source.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaSourceAttributesKeys.CanSeek">
      <summary>
                    A Boolean value that describes whether this source can seek.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaSourceAttributesKeys.Duration">
      <summary>
                    The length of playback time of this source as an integer in 100-nanosecond increments.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaSourceAttributesKeys.DRMHeader">
      <summary>
                    DRM data that the pipeline needs to initialize and decrypt correctly. This is the DRM header represented as a string.
                </summary>
    </member>
    <member name="T:System.Windows.Media.MediaStreamAttributeKeys">
      <summary>
                    Specifies an attribute name that describes the media stream.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamAttributeKeys.CodecPrivateData">
      <summary>
                    Codec data that the pipeline needs to initialize and render correctly.  For video, this is other header information. For audio, this is the base16-encoded WaveFormatEx structure.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamAttributeKeys.VideoFourCC">
      <summary>
                    Data needed to instantiate a video codec. This is the four-character value also known as a FourCC.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamAttributeKeys.Width">
      <summary>
                    The integer width a video frame is to be rendered at.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamAttributeKeys.Height">
      <summary>
                    The integer height a video frame is to be rendered at.
                </summary>
    </member>
    <member name="T:System.Windows.Media.MediaStreamDescription">
      <summary>
                    This class describes a media stream in enough detail to initialize the <see cref="T:System.Windows.Controls.MediaElement" /> and the underlying media pipeline.
                </summary>
    </member>
    <member name="M:System.Windows.Media.MediaStreamDescription.#ctor(System.Windows.Media.MediaStreamType,System.Collections.Generic.IDictionary{System.Windows.Media.MediaStreamAttributeKeys,System.String})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.MediaStreamDescription" /> class with the specified values.
                </summary>
      <param name="type">
                    A value from the enumeration, which is either audio or video.
                </param>
      <param name="mediaStreamAttributes">
                    A collection of pairs describing other attributes of the overall Media Stream.
                </param>
    </member>
    <member name="P:System.Windows.Media.MediaStreamDescription.MediaAttributes">
      <summary>
                    Gets a collection of attributes about the media stream. This collection only contains attributes that are used to initialize the media pipeline and the <see cref="T:System.Windows.Controls.MediaElement" />.
                </summary>
      <returns>
                    A collection of attributes about the media stream. The default value is Empty IDictionary&lt;MediaStreamAttributeKeys, string&gt;.
                </returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamDescription.StreamId">
      <summary>
                    Gets the stream ID of the stream being described.
                </summary>
      <returns>
                    The stream ID of the stream being described.
                </returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamDescription.Type">
      <summary>
                    Gets the type of stream that is being described which is either <see cref="F:System.Windows.Media.MediaStreamType.Audio" /> or <see cref="F:System.Windows.Media.MediaStreamType.Video" />.
                </summary>
      <returns>
                    The type of stream that is being described which is either <see cref="F:System.Windows.Media.MediaStreamType.Audio" /> or <see cref="F:System.Windows.Media.MediaStreamType.Video" />. The default value is <see cref="F:System.Windows.Media.MediaStreamType.Video" />.
                </returns>
    </member>
    <member name="T:System.Windows.Media.MediaStreamSample">
      <summary>
                    This class describes a media sample in enough detail to allow the <see cref="T:System.Windows.Controls.MediaElement" /> and underlying pipeline to render the sample.
                </summary>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSample.#ctor(System.Windows.Media.MediaStreamDescription,System.IO.Stream,System.Int64,System.Int64,System.Int64,System.Collections.Generic.IDictionary{System.Windows.Media.MediaSampleAttributeKeys,System.String})">
      <summary>
                    Instantiates a new instance of the <see cref="T:System.Windows.Media.MediaStreamSample" /> class.
                </summary>
      <param name="mediaStreamDescription">
                    A description of the stream this sample was pulled from.
                </param>
      <param name="stream">
                    A stream containing the desired media sample.
                </param>
      <param name="offset">
                    The offset into the stream where the actual sample data begins.
                </param>
      <param name="count">
                    The number of bytes that comprises the sample data.
                </param>
      <param name="timestamp">
                    The time from the beginning of the media file at which this sample should be rendered as expressed using 100 nanosecond increments.
                </param>
      <param name="attributes">
                    A collection of pairs describing other attributes of the media sample.
                </param>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.Attributes">
      <summary>
                    Gets a collection of attributes describing to the <see cref="T:System.Windows.Controls.MediaElement" /> and media pipeline how to render this sample.
                </summary>
      <returns>
                    A collection of attributes describing to the <see cref="T:System.Windows.Controls.MediaElement" /> and media pipeline how to render this sample. The default value is Empty IDictionary&lt;MediaSampleAttributeKeys, string&gt;</returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.Count">
      <summary>
                    Gets the number of bytes into the stream where the sample ends.
                </summary>
      <returns>
                    The number of bytes into the stream where the sample ends. The default value is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.MediaStreamDescription">
      <summary>
                    Gets the description of the stream that this sample came from.
                </summary>
      <returns>
                    The description of the stream that this sample came from. The default value is null.
                </returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.Offset">
      <summary>
                    Gets the byte offset into the stream where the sample comes from. For sample streams that contain a header as well, this is set to where the actual sample begins.
                </summary>
      <returns>
                    The byte offset into the stream where the sample comes from. The default value is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.Stream">
      <summary>
                    Gets the stream of data representing the sample. 
                </summary>
      <returns>
                    The stream of data representing the sample. The default value is null.
                </returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.Timestamp">
      <summary>
                    Gets the time at which a sample should be rendered as measured in 100 nanosecond increments.
                </summary>
      <returns>
                    The time at which a sample should be rendered as measured in 100 nanosecond increments. The default value is 0.
                </returns>
    </member>
    <member name="T:System.Windows.Media.MediaStreamSource">
      <summary>
                    Enables <see cref="T:System.Windows.Controls.MediaElement" /> to use a container format other than ASF.
                </summary>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.MediaStreamSource" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.CloseMedia">
      <summary>
                    Closes down the open media streams and otherwise cleans up the <see cref="T:System.Windows.Media.MediaStreamSource" />. The <see cref="T:System.Windows.Controls.MediaElement" /> can call this method when going through normal shutdown or as a result of an error.
                </summary>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ErrorOccurred(System.String)">
      <summary>
                    Developers call this method whenever an unrecoverable error has occurred in the <see cref="T:System.Windows.Media.MediaStreamSource" />. This will cause the <see cref="E:System.Windows.Controls.MediaElement.MediaFailed" /> event to be raised.
                </summary>
      <param name="errorDescription">
                    A string describing the error.
                </param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.GetDiagnosticAsync(System.Windows.Media.MediaStreamSourceDiagnosticKind)">
      <summary>
                    Gathers the diagnostic information requested.
                </summary>
      <param name="diagnosticKind">
                    A member of the <see cref="T:System.Windows.Media.MediaStreamSourceDiagnosticKind" /> enumeration describing what type of information is desired. 
                </param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.GetSampleAsync(System.Windows.Media.MediaStreamType)">
      <summary>
                    Causes the <see cref="T:System.Windows.Media.MediaStreamSource" /> to prepare a <see cref="T:System.Windows.Media.MediaStreamSample" /> describing the next media sample to be rendered by the media pipeline. This method can be responded to by both <see cref="M:System.Windows.Media.MediaStreamSource.ReportGetSampleCompleted(System.Windows.Media.MediaStreamSample)" /> and <see cref="M:System.Windows.Media.MediaStreamSource.ReportGetSampleProgress(System.Double)" />.
                </summary>
      <param name="mediaStreamType">
                    The description of the stream that the next sample should come from which will be either <see cref="F:System.Windows.Media.MediaStreamType.Audio" /> or <see cref="F:System.Windows.Media.MediaStreamType.Video" />.
                </param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.OpenMediaAsync">
      <summary>
                    Collects the metadata required to instantiate a collection of <see cref="T:System.Windows.Media.MediaStreamDescription" /> objects and then instantiates it.
                </summary>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportGetDiagnosticCompleted(System.Windows.Media.MediaStreamSourceDiagnosticKind,System.Int64)">
      <summary>
                    Developers call this method to pass the requested diagnostic information to the <see cref="T:System.Windows.Controls.MediaElement" />.
                </summary>
      <param name="diagnosticKind">
                    The type of diagnostic that you are returning a value for.
                </param>
      <param name="diagnosticValue">
                    If a request was made for DownloadProgress, then the percentage downloaded should be passed in as a value in the range [0:1].
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The int64 is outside of the range [0,1].
                </exception>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportGetSampleCompleted(System.Windows.Media.MediaStreamSample)">
      <summary>
                    Developers call this method to give the <see cref="T:System.Windows.Controls.MediaElement" /> a media sample to be rendered.
                </summary>
      <param name="mediaStreamSample">
                    The description of the media stream that this sample came from. Passing in null indicates that a stream has ended.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The int64 is outside of the range [0,1].
                </exception>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportGetSampleProgress(System.Double)">
      <summary>
                    Developers call this method to inform the <see cref="T:System.Windows.Controls.MediaElement" /> that it will not return a sample right now because it has dipped below its requested buffering level.
                </summary>
      <param name="bufferingProgress">
                    A value between 0 and 1 indicating what percentage of the buffer is filled.
                </param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportOpenMediaCompleted(System.Collections.Generic.IDictionary{System.Windows.Media.MediaSourceAttributesKeys,System.String},System.Collections.Generic.IEnumerable{System.Windows.Media.MediaStreamDescription})">
      <summary>
                    Call this method to report to a <see cref="T:System.Windows.Controls.MediaElement" /> that a <see cref="T:System.Windows.Media.MediaStreamSource" /> is attached to that the media has been opened and that the <see cref="T:System.Windows.Media.MediaStreamSource" /> has descriptions for the streams of content it contains.
                </summary>
      <param name="mediaStreamAttributes">
                    A collection of attributes describing features of the entire media stream. Currently supported attributes:
                Duration: What is the duration of the file 
                DRMHeader: The PlayReady DRM header describing the encryption of the file. Information from within this header will be used to post a license challenge to a PlayReady license server
                CanSeek: A Boolean indicating whether or not this stream is seekable.
                </param>
      <param name="availableMediaStreams">
                    A description of each audio and video stream contained within the content.
                </param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportSeekCompleted(System.Int64)">
      <summary>
                    Call this method to report to a <see cref="T:System.Windows.Controls.MediaElement" /> that a <see cref="T:System.Windows.Media.MediaStreamSource" /> is attached to that the requested Seek has now been handled.
                </summary>
      <param name="timeSeekedTo">
                    The number of ticks (nanoseconds) into the file where the actual seek took place.
                </param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportSwitchMediaStreamCompleted(System.Windows.Media.MediaStreamDescription)">
      <summary>
                    Call this method to report to a <see cref="T:System.Windows.Controls.MediaElement" /> that a <see cref="T:System.Windows.Media.MediaStreamSource" /> is attached to the requested stream switch which has now been completed and that samples returned will now be from the requested stream instead of the original stream. (Note: This is meant for the multiple audio stream case (language tracks) and not the adaptive streaming case)
                </summary>
      <param name="mediaStreamDescription">
                    The description of the stream actually switched to. This should be the same stream as what was requested by <see cref="M:System.Windows.Media.MediaStreamSource.SwitchMediaStreamAsync(System.Windows.Media.MediaStreamDescription)" />.
                </param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.SeekAsync(System.Int64)">
      <summary>
                    Takes the given offset and ensures that future calls to <see cref="M:System.Windows.Media.MediaStreamSource.GetSampleAsync(System.Windows.Media.MediaStreamType)" /> will be returned samples starting at that point.
                </summary>
      <param name="seekToTime">
                    The time as represented by 100 nanosecond increments since the beginning of the media file to seek to.
                </param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.SwitchMediaStreamAsync(System.Windows.Media.MediaStreamDescription)">
      <summary>
                    Called when a stream switch is requested on the <see cref="T:System.Windows.Controls.MediaElement" />.
                </summary>
      <param name="mediaStreamDescription">
                    The stream switched to.
                </param>
    </member>
    <member name="T:System.Windows.Media.MediaStreamSourceDiagnosticKind">
      <summary>
                    Describes the type of diagnostic information used by the media.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamSourceDiagnosticKind.BufferLevelInMilliseconds">
      <summary>
                    Represents a download buffer in milliseconds.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamSourceDiagnosticKind.BufferLevelInBytes">
      <summary>
                    Represents a download buffer in bytes.
                </summary>
    </member>
    <member name="T:System.Windows.Media.MediaStreamType">
      <summary>
                    Enumeration that specifies the type of stream.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamType.Audio">
      <summary>
                    The stream is an audio stream.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamType.Video">
      <summary>
                    The stream is a video stream.
                </summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamType.Script">
      <summary>
                    The stream is a script stream. Note: Currently script commands are not supported in <see cref="T:System.Windows.Media.MediaStreamSource" />.
                </summary>
    </member>
    <member name="T:System.Windows.Media.MultiScaleTileSource">
      <summary>
                    Used to specify the source of Deep Zoom images. The <see cref="T:System.Windows.Media.DeepZoomImageTileSource" /> which derives from this class, is used to specify the source of a <see cref="T:System.Windows.Controls.MultiScaleImage" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.MultiScaleTileSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Creates a new instance of the <see cref="T:System.Windows.Media.MultiScaleTileSource" /> class with the specified parameters.
                </summary>
      <param name="imageWidth">
                    The width of the Deep Zoom image.
                </param>
      <param name="imageHeight">
                    The height of the Deep Zoom image.
                </param>
      <param name="tileWidth">
                    The width of the tiles in the Deep Zoom image.
                </param>
      <param name="tileHeight">
                    The height of the tiles in the Deep Zoom image.
                </param>
      <param name="tileOverlap">
                    How much the tiles in the Deep Zoom image overlap.
                </param>
    </member>
    <member name="M:System.Windows.Media.MultiScaleTileSource.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Creates a new instance of the <see cref="T:System.Windows.Media.MultiScaleTileSource" /> class with the specified parameters.
                </summary>
      <param name="imageWidth">
                    The width of the Deep Zoom image.
                </param>
      <param name="imageHeight">
                    The height of the Deep Zoom image.
                </param>
      <param name="tileWidth">
                    The width of the tiles in the Deep Zoom image.
                </param>
      <param name="tileHeight">
                    The height of the tiles in the Deep Zoom image.
                </param>
      <param name="tileOverlap">
                    How much the tiles in the Deep Zoom image overlap.
                </param>
    </member>
    <member name="M:System.Windows.Media.MultiScaleTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
      <summary>
                    Gets a collection of the tiles that comprise the Deep Zoom image.
                </summary>
      <param name="tileLevel">
                    Level of the tile.
                </param>
      <param name="tilePositionX">
                    X-coordinate position of the tile.
                </param>
      <param name="tilePositionY">
                    Y-coordinate position of the tile.
                </param>
      <param name="tileImageLayerSources">
                    Source of the tile image layer.
                </param>
    </member>
    <member name="M:System.Windows.Media.MultiScaleTileSource.InvalidateTileLayer(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Invalidates specified tile layers.
                </summary>
      <param name="level">
                    Tile level.
                </param>
      <param name="tilePositionX">
                    X position of the tile.
                </param>
      <param name="tilePositionY">
                    Y position of the tile.
                </param>
      <param name="tileLayer">
                    Layer of the tile.
                </param>
    </member>
    <member name="P:System.Windows.Media.MultiScaleTileSource.TileBlendTime">
      <summary>
                    Gets or sets the amount of time it takes to blend a new level of detail when it becomes available.
                </summary>
      <returns>
                    The amount of time it takes to blend a new level of detail when it becomes available.
                </returns>
    </member>
    <member name="T:System.Windows.Media.PathFigure">
      <summary>
                    Represents a subsection of a geometry, a single connected series of two-dimensional geometric segments. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.PathFigure.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.PathFigure" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.PathFigure.IsClosed">
      <summary>
                    Gets or sets a value that indicates whether this figure's first and last segments are connected.  
                </summary>
      <returns>true if this figure's first and last segments are connected; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.IsClosedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.PathFigure.IsClosed" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.PathFigure.IsClosed" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.PathFigure.IsFilled">
      <summary>
                    Gets or sets a value that indicates whether the contained area of this <see cref="T:System.Windows.Media.PathFigure" /> is to be used for hit-testing, rendering, and clipping.  
                </summary>
      <returns>true if the contained area of this <see cref="T:System.Windows.Media.PathFigure" /> is to be used for hit-testing, rendering, and clipping; otherwise, false.  The default is true.
                </returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.IsFilledProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.PathFigure.IsFilled" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.PathFigure.IsFilled" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.PathFigure.Segments">
      <summary>
                    Gets or sets the collection of segments that define the shape of this <see cref="T:System.Windows.Media.PathFigure" /> object. 
                </summary>
      <returns>
                    The collection of segments that define the shape of this <see cref="T:System.Windows.Media.PathFigure" /> object. The default is an empty collection.
                </returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.SegmentsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.PathFigure.Segments" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.PathFigure.Segments" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.PathFigure.StartPoint">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Point" /> where the <see cref="T:System.Windows.Media.PathFigure" /> begins. 
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Point" /> where the <see cref="T:System.Windows.Media.PathFigure" /> begins. The default is a <see cref="T:System.Windows.Point" /> with value 0,0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.StartPointProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.PathFigure.StartPoint" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.PathFigure.StartPoint" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.PathFigureCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.PathFigure" /> objects that collectively make up the geometry of a <see cref="T:System.Windows.Media.PathGeometry" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.PathFigureCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.PathGeometry">
      <summary>
                    Represents a complex shape that may be composed of arcs, curves, ellipses, lines, and rectangles. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.PathGeometry" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.PathGeometry.Figures">
      <summary>
                    Gets or sets the collection of <see cref="T:System.Windows.Media.PathFigure" /> objects that describe the path's contents. 
                </summary>
      <returns>
                    A collection of <see cref="T:System.Windows.Media.PathFigure" /> objects that describe the path's contents. Each individual <see cref="T:System.Windows.Media.PathFigure" /> describes a shape.
                </returns>
    </member>
    <member name="F:System.Windows.Media.PathGeometry.FiguresProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.PathGeometry.Figures" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.PathGeometry.Figures" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.PathGeometry.FillRule">
      <summary>
                    Gets or sets a value that determines how the intersecting areas contained in the <see cref="T:System.Windows.Media.PathGeometry" /> are combined. 
                </summary>
      <returns>
                    Indicates how the intersecting areas of the <see cref="T:System.Windows.Media.PathGeometry" /> are combined.  The default is <see cref="F:System.Windows.Media.FillRule.EvenOdd" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.PathGeometry.FillRuleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.PathGeometry.FillRule" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.PathGeometry.FillRule" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.PathSegment">
      <summary>
                    Represents a segment of a <see cref="T:System.Windows.Media.PathFigure" /> object.
                </summary>
    </member>
    <member name="T:System.Windows.Media.PathSegmentCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.PathSegment" /> objects that can be individually accessed by index.
                </summary>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.PathSegmentCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.PenLineCap">
      <summary>
                    Describes the shape at the end of a line or segment. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Flat">
      <summary>
                    A cap that does not extend past the last point of the line. Comparable to no line cap.
                </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Square">
      <summary>
                    A rectangle that has a height equal to the line thickness and a length equal to half the line thickness. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Round">
      <summary>
                    A semicircle that has a diameter equal to the line thickness. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Triangle">
      <summary>
                    An isosceles right triangle whose base length is equal to the thickness of the line. 
                </summary>
    </member>
    <member name="T:System.Windows.Media.PenLineJoin">
      <summary>
                    Describes the shape that joins two lines or segments. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineJoin.Miter">
      <summary>
                    Line joins use regular angular vertices. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineJoin.Bevel">
      <summary>
                    Line joins use beveled vertices. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineJoin.Round">
      <summary>
                    Line joins use rounded vertices. 
                </summary>
    </member>
    <member name="T:System.Windows.Media.PointCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Point" /> values that can be individually accessed by index.
                </summary>
    </member>
    <member name="M:System.Windows.Media.PointCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.PointCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.PolyBezierSegment">
      <summary>
                    Represents one or more cubic Bezier curves.
                </summary>
    </member>
    <member name="M:System.Windows.Media.PolyBezierSegment.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.PolyBezierSegment" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.PolyBezierSegment.Points">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.PointCollection" /> that defines this <see cref="T:System.Windows.Media.PolyBezierSegment" /> object.  
                </summary>
      <returns>
                    The collection of points that defines this <see cref="T:System.Windows.Media.PolyBezierSegment" /> object.
                </returns>
    </member>
    <member name="F:System.Windows.Media.PolyBezierSegment.PointsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.PolyBezierSegment.Points" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.PolyBezierSegment.Points" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.PolyLineSegment">
      <summary>
                    Represents a set of line segments defined by a <see cref="T:System.Windows.Media.PointCollection" /> with each <see cref="T:System.Windows.Point" /> specifying the end point of a line segment. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.PolyLineSegment.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.PolyLineSegment" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.PolyLineSegment.Points">
      <summary>
                    Gets or sets the collection of <see cref="T:System.Windows.Point" /> values that defines this <see cref="T:System.Windows.Media.PolyLineSegment" /> object. 
                </summary>
      <returns>
                    The points that define this <see cref="T:System.Windows.Media.PolyLineSegment" /> object.
                </returns>
    </member>
    <member name="F:System.Windows.Media.PolyLineSegment.PointsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.PolyLineSegment.Points" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.PolyLineSegment.Points" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.PolyQuadraticBezierSegment">
      <summary>
                    Represents a set of quadratic Bezier segments. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.PolyQuadraticBezierSegment.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.PolyQuadraticBezierSegment.Points">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.PointCollection" /> that defines this <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> object. 
                </summary>
      <returns>
                    A collection of points that defines the shape of this <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> object. The default value is an empty collection.
                </returns>
    </member>
    <member name="F:System.Windows.Media.PolyQuadraticBezierSegment.PointsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.PolyQuadraticBezierSegment.Points" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.PolyQuadraticBezierSegment.Points" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.QuadraticBezierSegment">
      <summary>
                    Creates a quadratic Bezier curve between two points in a <see cref="T:System.Windows.Media.PathFigure" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.QuadraticBezierSegment.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.QuadraticBezierSegment.Point1">
      <summary>
                    Gets or sets the control point of the curve. 
                </summary>
      <returns>
                    The control point of this <see cref="T:System.Windows.Media.QuadraticBezierSegment" />. The default value is a <see cref="T:System.Windows.Point" /> with value 0,0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.QuadraticBezierSegment.Point1Property">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point1" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point1" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.QuadraticBezierSegment.Point2">
      <summary>
                    Gets or sets the end <see cref="T:System.Windows.Point" /> of this <see cref="T:System.Windows.Media.QuadraticBezierSegment" />. 
                </summary>
      <returns>
                    The end point of this <see cref="T:System.Windows.Media.QuadraticBezierSegment" />. The default value is a <see cref="T:System.Windows.Point" /> with value 0,0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.QuadraticBezierSegment.Point2Property">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point2" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point2" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.RadialGradientBrush">
      <summary>
                    Paints an area with a radial gradient. A focal point defines the beginning of the gradient, and a circle defines the end point of the gradient. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.RadialGradientBrush.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.RadialGradientBrush" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.RadialGradientBrush.#ctor(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.RadialGradientBrush" /> class with the specified start and stop colors. 
                </summary>
      <param name="startColor">
                    Color value at the focus (<see cref="P:System.Windows.Media.RadialGradientBrush.GradientOrigin" />) of the radial gradient.
                </param>
      <param name="endColor">
                    Color value at the outer edge of the radial gradient.
                </param>
    </member>
    <member name="M:System.Windows.Media.RadialGradientBrush.#ctor(System.Windows.Media.GradientStopCollection)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.RadialGradientBrush" /> class that has the specified gradient stops. 
                </summary>
      <param name="gradientStopCollection">
                    The gradient stops to set on this brush.
                </param>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.Center">
      <summary>
                    Gets or sets the center of the outer circle of the radial gradient. 
                </summary>
      <returns>
                    The two-dimensional point located at the center of the radial gradient. The default value is a <see cref="T:System.Windows.Point" /> with value 0.5,0.5.
                </returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.CenterProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.RadialGradientBrush.Center" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.RadialGradientBrush.Center" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.GradientOrigin">
      <summary>
                    Gets or sets the location of the focal point that defines the beginning of the gradient. 
                </summary>
      <returns>
                    The two-dimensional point located at the center of the radial gradient. The default value is a <see cref="T:System.Windows.Point" /> with value 0.5,0.5.
                </returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.GradientOriginProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.RadialGradientBrush.GradientOrigin" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.RadialGradientBrush.GradientOrigin" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.RadiusX">
      <summary>
                    Gets or sets the horizontal radius of the outer circle of the radial gradient. 
                </summary>
      <returns>
                    The horizontal radius of the outermost circle of the radial gradient. The default value is 0.5.
                </returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.RadiusXProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusX" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusX" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.RadiusY">
      <summary>
                    Gets or sets the vertical radius of the outer circle of a radial gradient. 
                </summary>
      <returns>
                    The vertical radius of the outer circle of a radial gradient. The default is 0.5.
                </returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.RadiusYProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusY" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusY" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.RectangleGeometry">
      <summary>
                    Describes a two-dimensional rectangular geometry. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.RectangleGeometry.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.RectangleGeometry" /> class, and creates a rectangle with zero area. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.RectangleGeometry.RadiusX">
      <summary>
                    Gets or sets the x-radius of the ellipse that is used to round the corners of the rectangle.
                </summary>
      <returns>
                    The x-radius of the ellipse used to round the corners of the rectangle geometry. The default is 0. 
                </returns>
    </member>
    <member name="F:System.Windows.Media.RectangleGeometry.RadiusXProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.RectangleGeometry.RadiusX" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.RectangleGeometry.RadiusX" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.RectangleGeometry.RadiusY">
      <summary>
                    Gets or sets the y-radius of the ellipse that is used to round the corners of the rectangle.  
                </summary>
      <returns>
                    The y-radius of the ellipse used to round the corners of the rectangle geometry. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.RectangleGeometry.RadiusYProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.RectangleGeometry.RadiusY" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.RectangleGeometry.RadiusY" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.RectangleGeometry.Rect">
      <summary>
                    Gets or sets the dimensions of the rectangle. 
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Rect" /> structure that describes the position and size of the rectangle. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.RectangleGeometry.RectProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.RectangleGeometry.Rect" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.RectangleGeometry.Rect" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.RenderingEventArgs">
      <summary>
                    Do not use.
                </summary>
    </member>
    <member name="P:System.Windows.Media.RenderingEventArgs.RenderingTime">
      <summary>
                    Do not use.
                </summary>
      <returns>
                     
                </returns>
    </member>
    <member name="T:System.Windows.Media.RotateTransform">
      <summary>
                    Rotates an object clockwise about a specified point in a two-dimensional x-y coordinate system. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.RotateTransform.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.RotateTransform" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.RotateTransform.Angle">
      <summary>
                    Gets or sets the angle, in degrees, of clockwise rotation.
                </summary>
      <returns>
                    The angle, in degrees, of clockwise rotation. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.RotateTransform.AngleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.RotateTransform.Angle" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.RotateTransform.Angle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.RotateTransform.CenterX">
      <summary>
                    Gets or sets the x-coordinate of the rotation center point.
                </summary>
      <returns>
                    The x-coordinate of the center of rotation. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.RotateTransform.CenterXProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.RotateTransform.CenterX" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.RotateTransform.CenterX" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.RotateTransform.CenterY">
      <summary>
                    Gets or sets the y-coordinate of the rotation center point. 
                </summary>
      <returns>
                    The y-coordinate of the center of rotation. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.RotateTransform.CenterYProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.RotateTransform.CenterY" /> dependency property.
                </summary>
    </member>
    <member name="T:System.Windows.Media.ScaleTransform">
      <summary>
                    Scales an object in the two-dimensional x-y coordinate system. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.ScaleTransform.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.ScaleTransform" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.ScaleTransform.CenterX">
      <summary>
                    Gets or sets the x-coordinate of the center point of this <see cref="T:System.Windows.Media.ScaleTransform" />. 
                </summary>
      <returns>
                    The x-coordinate of the center point of this <see cref="T:System.Windows.Media.ScaleTransform" />. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.ScaleTransform.CenterXProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.ScaleTransform.CenterX" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.ScaleTransform.CenterX" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.ScaleTransform.CenterY">
      <summary>
                    Gets or sets the y-coordinate of the center point of this <see cref="T:System.Windows.Media.ScaleTransform" />.
                </summary>
      <returns>
                    The y-coordinate of the center point of this <see cref="T:System.Windows.Media.ScaleTransform" />. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.ScaleTransform.CenterYProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.ScaleTransform.CenterY" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.ScaleTransform.CenterY" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.ScaleTransform.ScaleX">
      <summary>
                    Gets or sets the x-axis scale factor.
                </summary>
      <returns>
                    The scale factor along the x-axis. The default is 1.
                </returns>
    </member>
    <member name="F:System.Windows.Media.ScaleTransform.ScaleXProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.ScaleTransform.ScaleX" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.ScaleTransform.ScaleX" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.ScaleTransform.ScaleY">
      <summary>
                    Gets or sets the y-axis scale factor.
                </summary>
      <returns>
                    The scale factor along the y-axis. The default is 1.
                </returns>
    </member>
    <member name="F:System.Windows.Media.ScaleTransform.ScaleYProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.ScaleTransform.ScaleY" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.ScaleTransform.ScaleY" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.SkewTransform">
      <summary>
                    Represents a two-dimensional skew. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.SkewTransform.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.SkewTransform" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.SkewTransform.AngleX">
      <summary>
                    Gets or sets the x-axis skew angle, which is measured in degrees counterclockwise from the y-axis. 
                </summary>
      <returns>
                    The skew angle, which is measured in degrees counterclockwise from the y-axis. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.SkewTransform.AngleXProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.SkewTransform.AngleX" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.SkewTransform.AngleX" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.SkewTransform.AngleY">
      <summary>
                    Gets or sets the y-axis skew angle, which is measured in degrees counterclockwise from the x-axis.
                </summary>
      <returns>
                    The skew angle, which is measured in degrees counterclockwise from the x-axis. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.SkewTransform.AngleYProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.SkewTransform.AngleY" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.SkewTransform.AngleY" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.SkewTransform.CenterX">
      <summary>
                    Gets or sets the x-coordinate of the transform center. 
                </summary>
      <returns>
                    The x-coordinate of the transform center. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.SkewTransform.CenterXProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.SkewTransform.CenterX" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.SkewTransform.CenterX" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.SkewTransform.CenterY">
      <summary>
                    Gets or sets the y-coordinate of the transform center.
                </summary>
      <returns>
                    The y-coordinate of the transform center. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.SkewTransform.CenterYProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.SkewTransform.CenterY" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.SkewTransform.CenterY" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.SolidColorBrush">
      <summary>
                    Paints an area with a solid color. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.SolidColorBrush.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.SolidColorBrush" /> class with no color. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.SolidColorBrush.#ctor(System.Windows.Media.Color)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.SolidColorBrush" /> class with the specified <see cref="T:System.Windows.Media.Color" />. 
                </summary>
      <param name="color">
                    The color to apply to the brush.
                </param>
    </member>
    <member name="P:System.Windows.Media.SolidColorBrush.Color">
      <summary>
                    Gets or sets the color of this <see cref="T:System.Windows.Media.SolidColorBrush" />.
                </summary>
      <returns>
                    The brush's color. The default value is <see cref="P:System.Windows.Media.Colors.Transparent" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.SolidColorBrush.ColorProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Stretch">
      <summary>
                    Describes how content is resized to fill its allocated space.
                </summary>
    </member>
    <member name="F:System.Windows.Media.Stretch.None">
      <summary>
                    The content preserves its original size. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.Stretch.Fill">
      <summary>
                    The content is resized to fill the destination dimensions. The aspect ratio is not preserved. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.Stretch.Uniform">
      <summary>
                    The content is resized to fit in the destination dimensions while it preserves its native aspect ratio. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.Stretch.UniformToFill">
      <summary>
                    The content is resized to fill the destination dimensions while it preserves its native aspect ratio. If the aspect ratio of the destination rectangle differs from the source, the source content is clipped to fit in the destination dimensions.
                </summary>
    </member>
    <member name="T:System.Windows.Media.StyleSimulations">
      <summary>
                    Describes the simulation style of a font.
                </summary>
    </member>
    <member name="F:System.Windows.Media.StyleSimulations.None">
      <summary>
                    No font style simulation. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.StyleSimulations.BoldSimulation">
      <summary>
                    Bold style simulation. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.StyleSimulations.ItalicSimulation">
      <summary>
                    Italic style simulation. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.StyleSimulations.BoldItalicSimulation">
      <summary>
                    Bold and Italic style simulation. 
                </summary>
    </member>
    <member name="T:System.Windows.Media.SweepDirection">
      <summary>
                    Specifies the direction an elliptical arc is drawn.
                </summary>
    </member>
    <member name="F:System.Windows.Media.SweepDirection.Counterclockwise">
      <summary>
                    Aarcs are drawn in a counterclockwise (negative-angle) direction.
                </summary>
    </member>
    <member name="F:System.Windows.Media.SweepDirection.Clockwise">
      <summary>
                    Arcs are drawn in a clockwise (positive-angle) direction.
                </summary>
    </member>
    <member name="T:System.Windows.Media.TileBrush">
      <summary>
                    Describes a way to paint a region by using one or more tiles. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.TileBrush.#ctor">
      <summary>
                    Provides initialization for base class values when called by the constructor of a derived class.  
                </summary>
    </member>
    <member name="P:System.Windows.Media.TileBrush.AlignmentX">
      <summary>
                    Gets or sets the horizontal alignment of content in the <see cref="T:System.Windows.Media.TileBrush" /> base tile. 
                </summary>
      <returns>
                    A value that specifies the horizontal position of <see cref="T:System.Windows.Media.TileBrush" /> content in its base tile. The default value is <see cref="F:System.Windows.Media.AlignmentX.Center" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.TileBrush.AlignmentXProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.TileBrush.AlignmentX" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.TileBrush.AlignmentX" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.TileBrush.AlignmentY">
      <summary>
                    Gets or sets the vertical alignment of content in the <see cref="T:System.Windows.Media.TileBrush" /> base tile. 
                </summary>
      <returns>
                    A value that specifies the vertical position of <see cref="T:System.Windows.Media.TileBrush" /> content in its base tile. The default value is <see cref="F:System.Windows.Media.AlignmentY.Center" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.TileBrush.AlignmentYProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.TileBrush.AlignmentY" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.TileBrush.AlignmentY" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.TileBrush.Stretch">
      <summary>
                    Gets or sets a value that specifies how the content of this <see cref="T:System.Windows.Media.TileBrush" /> stretches to fit its tiles.
                </summary>
      <returns>
                    A value that specifies how this <see cref="T:System.Windows.Media.TileBrush" /> content is projected onto its base tile. The default value is <see cref="F:System.Windows.Media.Stretch.Fill" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.TileBrush.StretchProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.TileBrush.Stretch" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.TileBrush.Stretch" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.TimelineMarker">
      <summary>
                    Represents metadata associated with a specific point in a media file.
                </summary>
    </member>
    <member name="M:System.Windows.Media.TimelineMarker.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.TimelineMarker" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.TimelineMarker.Text">
      <summary>
                    Gets or sets the text value of a <see cref="T:System.Windows.Media.TimelineMarker" />.
                </summary>
      <returns>
                    The text value of the <see cref="T:System.Windows.Media.TimelineMarker" />. The default value is an empty string.
                </returns>
    </member>
    <member name="F:System.Windows.Media.TimelineMarker.TextProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.TimelineMarker.Text" /> dependency property.
                </summary>
    </member>
    <member name="P:System.Windows.Media.TimelineMarker.Time">
      <summary>
                    Gets or sets the time at which a <see cref="T:System.Windows.Media.TimelineMarker" /> is reached.
                </summary>
      <returns>
                    The time at which the TimelineMarker is reached. The default value is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.TimelineMarker.TimeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.TimelineMarker.Time" /> dependency property.
                </summary>
    </member>
    <member name="P:System.Windows.Media.TimelineMarker.Type">
      <summary>
                    Gets or sets the marker type of a <see cref="T:System.Windows.Media.TimelineMarker" />.
                </summary>
      <returns>
                    A string that describes the type of this TimelineMarker. The default value is an empty string.
                </returns>
    </member>
    <member name="F:System.Windows.Media.TimelineMarker.TypeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.TimelineMarker.Type" /> dependency property.
                </summary>
    </member>
    <member name="T:System.Windows.Media.TimelineMarkerCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.TimelineMarker" /> objects that can be individually accessed by index.
                </summary>
    </member>
    <member name="M:System.Windows.Media.TimelineMarkerCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.TimelineMarkerCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.TimelineMarkerRoutedEventArgs">
      <summary>
                    Provides event data for the <see cref="E:System.Windows.Controls.MediaElement.MarkerReached" /> event.
                </summary>
    </member>
    <member name="M:System.Windows.Media.TimelineMarkerRoutedEventArgs.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.TimelineMarkerRoutedEventArgs" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.TimelineMarkerRoutedEventArgs.Marker">
      <summary>
                    Gets the <see cref="T:System.Windows.Media.TimelineMarker" /> that triggered this event.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Media.TimelineMarker" /> that triggered this event.
                </returns>
    </member>
    <member name="T:System.Windows.Media.TimelineMarkerRoutedEventHandler">
      <summary>
                    Represents methods that will handle various routed events related to timeline markers.
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data. 
                </param>
    </member>
    <member name="T:System.Windows.Media.Transform">
      <summary>
                    Defines functionality that enables transformations in a two-dimensional plane. 
                </summary>
    </member>
    <member name="T:System.Windows.Media.TransformCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.Transform" /> objects that can be individually accessed by index. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.TransformCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.TransformCollection" /> class. 
                </summary>
    </member>
    <member name="T:System.Windows.Media.TransformGroup">
      <summary>
                    Represents a composite <see cref="T:System.Windows.Media.Transform" /> composed of other <see cref="T:System.Windows.Media.Transform" /> objects. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.TransformGroup.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.TransformGroup" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.TransformGroup.Children">
      <summary>
                    Gets or sets the collection of child <see cref="T:System.Windows.Media.Transform" /> objects.
                </summary>
      <returns>
                    The collection of child <see cref="T:System.Windows.Media.Transform" /> objects. The default is an empty collection. 
                </returns>
    </member>
    <member name="F:System.Windows.Media.TransformGroup.ChildrenProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.TransformGroup.Children" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.TransformGroup.Children" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.TransformGroup.Value">
      <summary>
                    Gets the <see cref="T:System.Windows.Media.Matrix" /> structure that describes the transformation represented by this <see cref="T:System.Windows.Media.TransformGroup" />.
                </summary>
      <returns>
                    A composite of the <see cref="T:System.Windows.Media.Transform" /> objects in this <see cref="T:System.Windows.Media.TransformGroup" />.
                </returns>
    </member>
    <member name="T:System.Windows.Media.TranslateTransform">
      <summary>
                    Translates (moves) an object in the two-dimensional x-y coordinate system. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.TranslateTransform.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.TranslateTransform" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.TranslateTransform.X">
      <summary>
                    Gets or sets the distance to translate along the x-axis.
                </summary>
      <returns>
                    The distance to translate (move) an object along the x-axis, in pixels. 
                
                    This property is read/write. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.TranslateTransform.XProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.TranslateTransform.X" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.TranslateTransform.X" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.TranslateTransform.Y">
      <summary>
                    Gets or sets the distance to translate (move) an object along the y-axis.
                </summary>
      <returns>
                    The distance to translate (move) an object along the y-axis, in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.TranslateTransform.YProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.TranslateTransform.Y" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.TranslateTransform.Y" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.VideoBrush">
      <summary>
                    Paints an area with video content.
                </summary>
    </member>
    <member name="M:System.Windows.Media.VideoBrush.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.VideoBrush" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Media.VideoBrush.SetSource(System.Windows.Controls.MediaElement)">
      <summary>
                    Sets the source of the <see cref="T:System.Windows.Media.VideoBrush" />.
                </summary>
      <param name="source">
                    The element used as the source for the <see cref="T:System.Windows.Media.VideoBrush" />.
                </param>
    </member>
    <member name="P:System.Windows.Media.VideoBrush.SourceName">
      <summary>
                    Gets or sets the name of the <see cref="T:System.Windows.Controls.MediaElement" /> to use as the source of the <see cref="T:System.Windows.Media.VideoBrush" />.
                </summary>
      <returns>
                    The name of the <see cref="T:System.Windows.Controls.MediaElement" /> to use as the source of the <see cref="T:System.Windows.Media.VideoBrush" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.VideoBrush.SourceNameProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.VideoBrush.SourceName" /> dependency property.
                </summary>
    </member>
    <member name="T:System.Windows.Media.VisualTreeHelper">
      <summary>
                    Provides utility methods that can used to traverse object relationships (along child object or parent object axes) in the Silverlight visual tree.
                </summary>
    </member>
    <member name="M:System.Windows.Media.VisualTreeHelper.FindElementsInHostCoordinates(System.Windows.Point,System.Windows.UIElement)">
      <summary>
                    Retrieves a set of objects that are located within a specified point of an object's coordinate space.
                </summary>
      <returns>
                    An enumerable set of <see cref="T:System.Windows.UIElement" /> objects that are determined to be located in the visual tree composition at the specified point and within the specified subtee.
                </returns>
      <param name="intersectingPoint">
                    The point to use as the determination point.
                </param>
      <param name="subtree">
                    The object to search within. May be null; see Remarks.
                </param>
    </member>
    <member name="M:System.Windows.Media.VisualTreeHelper.FindElementsInHostCoordinates(System.Windows.Rect,System.Windows.UIElement)">
      <summary>
                    Retrieves a set of objects that are located within a specified <see cref="T:System.Windows.Rect" /> of an object's coordinate space.
                </summary>
      <returns>
                    An enumerable set of <see cref="T:System.Windows.UIElement" /> objects that are determined to be located in the visual tree composition at the specified point and within the specified subtee.
                </returns>
      <param name="intersectingRect">
                    The <see cref="T:System.Windows.Rect" /> to use as the determination area.
                </param>
      <param name="subtree">
                    The object to search within. May be null; see Remarks.
                </param>
    </member>
    <member name="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)">
      <summary>
                    Using the provided index, obtains a specific child object of the provided object by examining the visual tree.
                </summary>
      <returns>
                    The child object as referenced by <paramref name="childIndex" />.
                </returns>
      <param name="reference">
                    The object that holds the child collection.
                </param>
      <param name="childIndex">
                    The index of the requested child object in the <paramref name="reference" /> child collection.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    Specified an invalid child index.
                </exception>
    </member>
    <member name="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)">
      <summary>
                    Returns the number of children that exists in an object's child collection in the visual tree.
                </summary>
      <returns>
                    The number of visual children for the provided source visual.
                </returns>
      <param name="reference">
                    The source visual.
                </param>
    </member>
    <member name="M:System.Windows.Media.VisualTreeHelper.GetParent(System.Windows.DependencyObject)">
      <summary>
                    Returns an object's parent object in the visual tree.
                </summary>
      <returns>
                    The parent object of <paramref name="reference" /> in the visual tree.
                </returns>
      <param name="reference">
                    The object to get the parent object for.
                </param>
    </member>
    <member name="T:System.Windows.Media.Animation.BeginStoryboard">
      <summary>
                    A trigger action that begins a <see cref="T:System.Windows.Media.Animation.Storyboard" /> and distributes its animations to their targeted objects and properties.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.BeginStoryboard.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.BeginStoryboard.Storyboard">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Animation.Storyboard" /> that this <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> starts. 
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Media.Animation.Storyboard" /> that the <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> starts. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.BeginStoryboard.StoryboardProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.BeginStoryboard.Storyboard" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.BeginStoryboard.Storyboard" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ClockState">
      <summary>
                    Describes the potential states of an animation.
                </summary>
    </member>
    <member name="F:System.Windows.Media.Animation.ClockState.Active">
      <summary>
                    The current animation changes in direct relation to that of its parent.
                </summary>
    </member>
    <member name="F:System.Windows.Media.Animation.ClockState.Filling">
      <summary>
                    The animation continues and does not change in relation to that of its parent.
                </summary>
    </member>
    <member name="F:System.Windows.Media.Animation.ClockState.Stopped">
      <summary>
                    The animation is stopped.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.ColorAnimation">
      <summary>
                    Animates the value of a  <see cref="T:System.Windows.Media.Color" /> property between two target values using linear interpolation over a specified <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ColorAnimation.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorAnimation" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorAnimation.By">
      <summary>
                    Gets or sets the total amount by which the animation changes its starting value.  
                </summary>
      <returns>
                    The total amount by which the animation changes its starting value.     The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ColorAnimation.ByProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.ColorAnimation.By" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.ColorAnimation.By" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorAnimation.From">
      <summary>
                    Gets or sets the animation's starting value. 
                </summary>
      <returns>
                    The starting value of the animation. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ColorAnimation.FromProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.ColorAnimation.From" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.ColorAnimation.From" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorAnimation.To">
      <summary>
                    Gets or sets the animation's ending value. 
                </summary>
      <returns>
                    The ending value of the animation. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ColorAnimation.ToProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.ColorAnimation.To" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.ColorAnimation.To" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames">
      <summary>
                    Animates the value of a <see cref="T:System.Windows.Media.Color" /> property along a set of <see cref="P:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.KeyFrames" /> over a specified <see cref="T:System.Windows.Duration" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.KeyFrames">
      <summary>
                    Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.ColorKeyFrame" /> objects that define the animation. 
                </summary>
      <returns>
                    The collection of <see cref="T:System.Windows.Media.Animation.ColorKeyFrame" /> objects that define the animation. The default is an empty collection.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ColorKeyFrame">
      <summary>
                    Provides a base class for specific animation key-frame techniques that define an animation segment with a <see cref="T:System.Windows.Media.Color" /> target value. Derived classes each provide a different key-frame interpolation method for a <see cref="T:System.Windows.Media.Color" /> value that is provided for a <see cref="T:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames" /> animation. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ColorKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorKeyFrame" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorKeyFrame.KeyTime">
      <summary>
                    Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> should be reached. 
                </summary>
      <returns>
                    The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> property. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ColorKeyFrame.KeyTimeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.KeyTime" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.KeyTime" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorKeyFrame.Value">
      <summary>
                    Gets or sets the key frame's target value. 
                </summary>
      <returns>
                    The key frame's target value, which is the value at its specified <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.KeyTime" />. The default is a <see cref="T:System.Windows.Media.Color" /> with an ARBG value of #00000000.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ColorKeyFrame.ValueProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ColorKeyFrameCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.Animation.ColorKeyFrame" /> objects that can be individually accessed by index. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ColorKeyFrameCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorKeyFrameCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.DiscreteColorKeyFrame">
      <summary>
                    Animates from the <see cref="T:System.Windows.Media.Color" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> using discrete values.  
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscreteColorKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteColorKeyFrame" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.DiscreteDoubleKeyFrame">
      <summary>
                    Animates from the <see cref="T:System.Double" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> using discrete values.  
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscreteDoubleKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteDoubleKeyFrame" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.DiscreteObjectKeyFrame">
      <summary>
                    Animates from the <see cref="T:System.Object" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value" /> using discrete values.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscreteObjectKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteObjectKeyFrame" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.DiscretePointKeyFrame">
      <summary>
                    Animates from the <see cref="T:System.Windows.Point" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> using discrete frames.  
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscretePointKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscretePointKeyFrame" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.DoubleAnimation">
      <summary>
                    Animates the value of a  <see cref="T:System.Double" /> property between two target values using linear interpolation over a specified <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DoubleAnimation.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleAnimation" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleAnimation.By">
      <summary>
                    Gets or sets the total amount by which the animation changes its starting value.
                </summary>
      <returns>
                    The total amount by which the animation changes its starting value. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.DoubleAnimation.ByProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.By" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.By" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleAnimation.From">
      <summary>
                    Gets or sets the animation's starting value.
                </summary>
      <returns>
                    The starting value of the animation. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.DoubleAnimation.FromProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.From" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.From" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleAnimation.To">
      <summary>
                    Gets or sets the animation's ending value.
                </summary>
      <returns>
                    The ending value of the animation. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.DoubleAnimation.ToProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.To" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.To" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames">
      <summary>
                    Animates the value of a <see cref="T:System.Double" /> property along a set of <see cref="P:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.KeyFrames" />.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.KeyFrames">
      <summary>
                    Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame" /> objects that define the animation. 
                </summary>
      <returns>
                    The collection of <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame" /> objects that define the animation. The default is an empty collection.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.DoubleKeyFrame">
      <summary>
                    An abstract class that defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DoubleKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleKeyFrame.KeyTime">
      <summary>
                    Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> should be reached.
                </summary>
      <returns>
                    The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> property. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.DoubleKeyFrame.KeyTimeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.KeyTime" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.KeyTime" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleKeyFrame.Value">
      <summary>
                    Gets or sets the key frame's target value. 
                </summary>
      <returns>
                    The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.KeyTime" />. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.DoubleKeyFrame.ValueProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.DoubleKeyFrameCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame" /> objects that can be individually accessed by index. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DoubleKeyFrameCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleKeyFrameCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.FillBehavior">
      <summary>
                    Specifies how a <see cref="T:System.Windows.Media.Animation.Timeline" /> behaves when it is outside its active period but its parent is inside its active or hold period. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.Animation.FillBehavior.HoldEnd">
      <summary>
                    After it reaches the end of its active period, the timeline holds its progress until the end of its parent's active and hold periods. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.Animation.FillBehavior.Stop">
      <summary>
                    The timeline stops if it is outside its active period while its parent is inside its active period.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.KeySpline">
      <summary>
                    This class is used by a spline key frame to define animation progress. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.KeySpline.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.KeySpline" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.KeySpline.ControlPoint1">
      <summary>
                    Gets or sets the first control point used to define a Bezier curve that describes a <see cref="T:System.Windows.Media.Animation.KeySpline" />.
                </summary>
      <returns>
                    The first control point used to define a Bezier curve that describes a <see cref="T:System.Windows.Media.Animation.KeySpline" />.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.KeySpline.ControlPoint2">
      <summary>
                    Gets or sets the second control point used to define a Bezier curve that describes a <see cref="T:System.Windows.Media.Animation.KeySpline" />.
                </summary>
      <returns>
                    The second control point used to define a Bezier curve that describes a <see cref="T:System.Windows.Media.Animation.KeySpline" />.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.KeyTime">
      <summary>
                    Specifies when a particular key frame should take place during an animation. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.Equals(System.Object)">
      <summary>
                    Indicates whether a <see cref="T:System.Windows.Media.Animation.KeyTime" /> is equal to this <see cref="T:System.Windows.Media.Animation.KeyTime" />.
                </summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.Windows.Media.Animation.KeyTime" /> that represents the same length of time as this <see cref="T:System.Windows.Media.Animation.KeyTime" />; otherwise, false.
                </returns>
      <param name="value">
                    The <see cref="T:System.Windows.Media.Animation.KeyTime" /> to compare with this <see cref="T:System.Windows.Media.Animation.KeyTime" />.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.Equals(System.Windows.Media.Animation.KeyTime)">
      <summary>
                    Indicates whether a specified <see cref="T:System.Windows.Media.Animation.KeyTime" /> is equal to this <see cref="T:System.Windows.Media.Animation.KeyTime" />.
                </summary>
      <returns>true if <paramref name="value" /> is equal to this <see cref="T:System.Windows.Media.Animation.KeyTime" />; otherwise, false.
                </returns>
      <param name="value">
                    The <see cref="T:System.Windows.Media.Animation.KeyTime" />  to compare with this <see cref="T:System.Windows.Media.Animation.KeyTime" />.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.Equals(System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeyTime)">
      <summary>
                    Indicates whether two <see cref="T:System.Windows.Media.Animation.KeyTime" /> values are equal.
                </summary>
      <returns>true if the values of <paramref name="keyTime1" /> and <paramref name="keyTime2" /> are equal; otherwise, false.
                </returns>
      <param name="keyTime1">
                    The first value to compare.
                </param>
      <param name="keyTime2">
                    The second value to compare.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.FromTimeSpan(System.TimeSpan)">
      <summary>
                    Creates a new <see cref="T:System.Windows.Media.Animation.KeyTime" />, using the supplied <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>
                    A new <see cref="T:System.Windows.Media.Animation.KeyTime" />, initialized to the value of <paramref name="timeSpan" />.
                </returns>
      <param name="timeSpan">
                    The value of the new <see cref="T:System.Windows.Media.Animation.KeyTime" />.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.GetHashCode">
      <summary>
                    Returns a hash code representing this <see cref="T:System.Windows.Media.Animation.KeyTime" />.
                </summary>
      <returns>
                    A hash code identifier.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.op_Equality(System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeyTime)">
      <summary>
                    Compares two <see cref="T:System.Windows.Media.Animation.KeyTime" /> values for equality.
                </summary>
      <returns>true if <paramref name="keyTime1" /> and <paramref name="keyTime2" /> are equal; otherwise, false.
                </returns>
      <param name="keyTime1">
                    The first value to compare.
                </param>
      <param name="keyTime2">
                    The second value to compare.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.op_Implicit(System.TimeSpan)~System.Windows.Media.Animation.KeyTime">
      <summary>
                    Implicitly converts a <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan" /> to a <see cref="T:System.Windows.Media.Animation.KeyTime" />.
                </summary>
      <returns>
                    The created <see cref="T:System.Windows.Media.Animation.KeyTime" />.
                </returns>
      <param name="timeSpan">
                    The <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan" /> value to convert.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.op_Inequality(System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeyTime)">
      <summary>
                    Compares two <see cref="T:System.Windows.Media.Animation.KeyTime" /> values for inequality.
                </summary>
      <returns>true if <paramref name="keyTime1" /> and <paramref name="keyTime2" /> are not equal; otherwise, false. 
                </returns>
      <param name="keyTime1">
                    The first value to compare.
                </param>
      <param name="keyTime2">
                    The second value to compare.
                </param>
    </member>
    <member name="P:System.Windows.Media.Animation.KeyTime.TimeSpan">
      <summary>
                    Gets the time when the key frame ends, expressed as a time relative to the beginning of the animation.
                </summary>
      <returns>
                    A <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan" /> value.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.ToString">
      <summary>
                    Returns a string representation of this <see cref="T:System.Windows.Media.Animation.KeyTime" />. 
                </summary>
      <returns>
                    A string representation of this <see cref="T:System.Windows.Media.Animation.KeyTime" />.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.KeyTime.Type">
      <summary>
                    Gets the <see cref="T:System.Windows.Media.Animation.KeyTimeType" /> value this instance represents. 
                </summary>
      <returns>
                    One of the enumeration values.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.KeyTime.Uniform">
      <summary>
                    Gets the <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" /> value which divides the allotted time of the animation evenly between key frames.
                </summary>
      <returns>
                    A <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" /> value.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.KeyTimeType">
      <summary>
                    Represents the different types that may represent a <see cref="T:System.Windows.Media.Animation.KeyTime" /> instance.
                </summary>
    </member>
    <member name="F:System.Windows.Media.Animation.KeyTimeType.Uniform">
      <summary>
                    The allotted total time for an animation sequence is divided evenly amongst each of the key frames.
                </summary>
    </member>
    <member name="F:System.Windows.Media.Animation.KeyTimeType.TimeSpan">
      <summary>
                    Each <see cref="T:System.Windows.Media.Animation.KeyTime" /> is expressed as a <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan" /> value relative to the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> of an animation sequence. 
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.LinearColorKeyFrame">
      <summary>
                    Animates from the <see cref="T:System.Windows.Media.Color" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> using linear interpolation.  
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.LinearColorKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearColorKeyFrame" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.LinearDoubleKeyFrame">
      <summary>
                    Animates from the <see cref="T:System.Double" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> using linear interpolation.  
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.LinearDoubleKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearDoubleKeyFrame" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.LinearPointKeyFrame">
      <summary>
                    Animates from the <see cref="T:System.Windows.Point" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> using linear interpolation.  
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.LinearPointKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearPointKeyFrame" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames">
      <summary>
                    Animates the value of an <see cref="T:System.Object" /> property along a set of <see cref="P:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.KeyFrames" /> over a specified <see cref="T:System.Windows.Duration" />.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.KeyFrames">
      <summary>
                    Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame" /> objects that define the animation. 
                </summary>
      <returns>
                    The collection of <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame" /> objects that define the animation. The default is an empty collection.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ObjectKeyFrame">
      <summary>
                    Defines an animation segment with its own target value and interpolation method for an <see cref="T:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames" />.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ObjectKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime">
      <summary>
                    Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value" /> should be reached. 
                </summary>
      <returns>
                    The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value" /> property. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ObjectKeyFrame.KeyTimeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ObjectKeyFrame.Value">
      <summary>
                    Gets or sets the key frame's target value. 
                </summary>
      <returns>
                    The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime" />. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ObjectKeyFrame.ValueProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ObjectKeyFrameCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame" /> objects that can be individually accessed by index.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ObjectKeyFrameCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.PointAnimation">
      <summary>
                    Animates the value of a <see cref="T:System.Windows.Point" /> property between two target values using linear interpolation over a specified <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.PointAnimation.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointAnimation" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.PointAnimation.By">
      <summary>
                    Gets or sets the total amount by which the animation changes its starting value.
                </summary>
      <returns>
                    The total amount by which the animation changes its starting value.  The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PointAnimation.ByProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.PointAnimation.By" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.PointAnimation.By" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.PointAnimation.From">
      <summary>
                    Gets or sets the animation's starting value.
                </summary>
      <returns>
                    The starting value of the animation. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PointAnimation.FromProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.PointAnimation.From" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.PointAnimation.From" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.PointAnimation.To">
      <summary>
                    Gets or sets the animation's ending value.
                </summary>
      <returns>
                    The ending value of the animation. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PointAnimation.ToProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.PointAnimation.To" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.PointAnimation.To" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.PointAnimationUsingKeyFrames">
      <summary>
                    Animates the value of a <see cref="T:System.Windows.Point" /> property along a set of <see cref="P:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.KeyFrames" />.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointAnimationUsingKeyFrames" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.KeyFrames">
      <summary>
                    Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.PointKeyFrame" /> objects that define the animation. 
                </summary>
      <returns>
                    The collection of <see cref="T:System.Windows.Media.Animation.PointKeyFrame" /> objects that define the animation. The default is an empty collection.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.PointKeyFrame">
      <summary>
                    Defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.PointAnimationUsingKeyFrames" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.PointKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointKeyFrame" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.PointKeyFrame.KeyTime">
      <summary>
                    Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> should be reached. 
                </summary>
      <returns>
                    The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> property. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PointKeyFrame.KeyTimeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.PointKeyFrame.KeyTime" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.PointKeyFrame.KeyTime" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.PointKeyFrame.Value">
      <summary>
                    Gets or sets the key frame's target value.
                </summary>
      <returns>
                    The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.PointKeyFrame.KeyTime" />. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PointKeyFrame.ValueProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.PointKeyFrameCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.Animation.PointKeyFrame" /> objects that can be individually accessed by index. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.PointKeyFrameCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointKeyFrameCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.RepeatBehavior">
      <summary>
                    Describes how a <see cref="T:System.Windows.Media.Animation.Timeline" /> repeats its simple duration.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.#ctor(System.Double)">
      <summary>
                    Initializes a <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> with the specified iteration count. 
                </summary>
      <param name="count">
                    A number greater than or equal to 0 that specifies the number of iterations for an animation. 
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.#ctor(System.TimeSpan)">
      <summary>
                    Initializes a <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> with the specified repeat duration. 
                </summary>
      <param name="duration">
                    The total length of time that the <see cref="T:System.Windows.Media.Animation.Timeline" /> should play (its active duration). 
                </param>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.Count">
      <summary>
                    Gets the number of times a <see cref="T:System.Windows.Media.Animation.Timeline" /> should repeat. 
                </summary>
      <returns>
                    The numeric value representing the number of iterations to repeat.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.Duration">
      <summary>
                    Gets the total length of time a <see cref="T:System.Windows.Media.Animation.Timeline" /> should play. 
                </summary>
      <returns>
                    The total length of time a timeline should play. 
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    This <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> does not describe a repeat duration; it describes an iteration count.
                </exception>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Object)">
      <summary>
                    Indicates whether the specified object is equal to this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />. 
                </summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> that represents the same repeat behavior as this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />; otherwise, false.
                </returns>
      <param name="value">
                    The object to compare with this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> .
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Windows.Media.Animation.RepeatBehavior)">
      <summary>
                    Returns a value that indicates whether the specified <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> is equal to this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />. 
                </summary>
      <returns>true if both the type and repeat behavior of <paramref name="repeatBehavior" /> are equal to this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />; otherwise, false.
                </returns>
      <param name="repeatBehavior">
                    The value to compare to this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>
                    Indicates whether the two specified <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> values are equal. 
                </summary>
      <returns>true if both the type and repeat behavior of <paramref name="repeatBehavior1" /> are equal to that of <paramref name="repeatBehavior2" />; otherwise, false.
                </returns>
      <param name="repeatBehavior1">
                    The first value to compare.
                </param>
      <param name="repeatBehavior2">
                    The second value to compare.
                </param>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.Forever">
      <summary>
                    Gets a <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> that specifies an infinite number of repetitions.  
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> that specifies an infinite number of repetitions.   
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.GetHashCode">
      <summary>
                    Returns the hash code of this instance.
                </summary>
      <returns>
                    A hash code.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.HasCount">
      <summary>
                    Gets a value that indicates whether the repeat behavior has a specified iteration count.
                </summary>
      <returns>true if the specified type refers to an iteration count; otherwise, false. 
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.HasDuration">
      <summary>
                    Gets a value that indicates whether the repeat behavior has a specified repeat duration. 
                </summary>
      <returns>true if the specified type refers to a repeat duration; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.op_Equality(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>
                    Indicates whether the two specified <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> values are equal. 
                </summary>
      <returns>true if both the type and repeat behavior of <paramref name="repeatBehavior1" /> are equal to that of <paramref name="repeatBehavior2" />; otherwise, false.
                </returns>
      <param name="repeatBehavior1">
                    The first value to compare.
                </param>
      <param name="repeatBehavior2">
                    The second value to compare.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.op_Inequality(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>
                    Indicates whether the two <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> values are not equal. 
                </summary>
      <returns>true if <paramref name="repeatBehavior1" /> and <paramref name="repeatBehavior2" /> are different types or the repeat behavior properties are not equal; otherwise false.
                </returns>
      <param name="repeatBehavior1">
                    The first value to compare.
                </param>
      <param name="repeatBehavior2">
                    The second value to compare.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <param name="format"></param>
      <param name="formatProvider"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.ToString">
      <summary>
                    Returns a string representation of this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />. 
                </summary>
      <returns>
                    A string representation of this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.ToString(System.IFormatProvider)">
      <summary>
                    Returns a string representation of this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> with the specified format. 
                </summary>
      <returns>
                    A string representation of this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />.
                </returns>
      <param name="formatProvider">
                    The format used to construct the return value.
                </param>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineColorKeyFrame">
      <summary>
                    Animates from the <see cref="T:System.Windows.Media.Color" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> using splined interpolation.  
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineColorKeyFrame.KeySpline">
      <summary>
                    Gets or sets the two control points that define animation progress for this key frame. 
                </summary>
      <returns>
                    The two control points that specify the cubic Bezier curve which defines the progress of the key frame.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineColorKeyFrame.KeySplineProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.SplineColorKeyFrame.KeySpline" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.SplineColorKeyFrame.KeySpline" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineDoubleKeyFrame">
      <summary>
                    Animates from the <see cref="T:System.Double" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> using splined interpolation.  
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySpline">
      <summary>
                    Gets or sets the two control points that define animation progress for this key frame.
                </summary>
      <returns>
                    The two control points that specify the cubic Bezier curve which defines the progress of the key frame.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySplineProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySpline" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySpline" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplinePointKeyFrame">
      <summary>
                    Animates from the <see cref="T:System.Windows.Point" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> using splined interpolation.  
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.SplinePointKeyFrame.KeySpline">
      <summary>
                    Gets or sets the two control points that define animation progress for this key frame. 
                </summary>
      <returns>
                    The two control points that specify the cubic Bezier curve that defines the progress of the key frame.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplinePointKeyFrame.KeySplineProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.SplinePointKeyFrame.KeySpline" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.SplinePointKeyFrame.KeySpline" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.Storyboard">
      <summary>
                    Controls animations with a timeline, and provides object and property targeting information for its child animations. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Storyboard" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin">
      <summary>
                    Initiates the set of animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard" />.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Storyboard.Children">
      <summary>
                    Gets the collection of child <see cref="T:System.Windows.Media.Animation.Timeline" /> objects.
                </summary>
      <returns>
                    The collection of child <see cref="T:System.Windows.Media.Animation.Timeline" /> objects.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentState">
      <summary>
                    Gets the <see cref="T:System.Windows.Media.Animation.ClockState" /> of the <see cref="T:System.Windows.Media.Animation.Storyboard" />.
                </summary>
      <returns>
                    The current state of the animation: <see cref="F:System.Windows.Media.Animation.ClockState.Active" />, <see cref="F:System.Windows.Media.Animation.ClockState.Filling" />, or <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime">
      <summary>
                    Gets the <see cref="T:System.TimeSpan" /> of the <see cref="T:System.Windows.Media.Animation.Storyboard" />.
                </summary>
      <returns>
                    A null reference (Nothing in Visual Basic) if this storyboard's clock is <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />; otherwise, the current time of the <see cref="T:System.Windows.Media.Animation.Storyboard" />.
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetTargetName(System.Windows.Media.Animation.Timeline)">
      <summary>
                    Gets the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> of the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> object.
                </summary>
      <returns>
                    The string name of the target object.
                </returns>
      <param name="element">
                    The <see cref="T:System.Windows.Media.Animation.Timeline" /> object to get the target name from.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetTargetProperty(System.Windows.Media.Animation.Timeline)">
      <summary>
                    Gets the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> of the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> object. 
                </summary>
      <returns>
                    The property path information for the animated property.
                </returns>
      <param name="element">
                    The <see cref="T:System.Windows.Media.Animation.Timeline" /> object to get the target property from.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Pause">
      <summary>
                    Pauses the clock that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Resume">
      <summary>
                    Resumes the animation clock, or runtime-state, associated with this <see cref="T:System.Windows.Media.Animation.Storyboard" /> instance. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan)">
      <summary>
                    Seeks this <see cref="T:System.Windows.Media.Animation.Storyboard" /> to the specified position. The <see cref="T:System.Windows.Media.Animation.Storyboard" /> performs the requested seek when the next clock tick occurs. 
                </summary>
      <param name="offset">
                    A positive or negative time value that describes the amount by which the timeline should move forward or backward from the beginning of the animation. By using the <see cref="T:System.TimeSpan" /> Parse behavior, a <see cref="T:System.TimeSpan" /> can be specified as a string in the following format (in this syntax, the [] characters denote optional components of the string, but the quotes, colons and periods are all a literal part of the syntax):
                 Copy Code"[days.]hours:minutes:seconds[.fractionalSeconds]"
- or -
"days"
</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan)">
      <summary>
                    Seeks this <see cref="T:System.Windows.Media.Animation.Storyboard" /> to a new position immediately (synchronously). 
                </summary>
      <param name="offset">
                    A positive or negative time value that describes the amount by which the timeline should move forward or backward from the beginning of the animation. . By using the <see cref="T:System.TimeSpan" /> Parse behavior, a <see cref="T:System.TimeSpan" /> can be specified as a string in the following format (in this syntax, the [] characters denote optional components of the string, but the quotes, colons and periods are all a literal part of the syntax):
                 Copy Code"[days.]hours:minutes:seconds[.fractionalSeconds]"
- or -
"days"
</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetTarget(System.Windows.Media.Animation.Timeline,System.Windows.DependencyObject)">
      <summary>
                    Makes the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> target the specified object.
                </summary>
      <param name="timeline">
                    The <see cref="T:System.Windows.Media.Animation.Timeline" /> that targets the specified dependency object.
                </param>
      <param name="target">
                    The actual instance of the object to target.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetTargetName(System.Windows.Media.Animation.Timeline,System.String)">
      <summary>
                    Makes the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> target the object with the specified name.
                </summary>
      <param name="element">
                    The <see cref="T:System.Windows.Media.Animation.Timeline" /> that targets the specified dependency object.
                </param>
      <param name="name">
                    The name of the of the object to target.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetTargetProperty(System.Windows.Media.Animation.Timeline,System.Windows.PropertyPath)">
      <summary>
                    Makes the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> target the specified dependency property.
                </summary>
      <param name="element">
                    The <see cref="T:System.Windows.Media.Animation.Timeline" /> with which to associate the specified dependency property.
                </param>
      <param name="path">
                    A path that describe the dependency property to be animated.
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SkipToFill">
      <summary>
                    Advances the current time of this storyboard's clock to the end of its active period.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Stop">
      <summary>
                    Stops this <see cref="T:System.Windows.Media.Animation.Storyboard" />.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Storyboard.TargetName">
      <summary>
                    Gets or sets the name of the object to animate.
                </summary>
      <returns>
                    The name of the object to animate.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Storyboard.TargetNameProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> attached property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> attached property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Storyboard.TargetProperty">
      <summary>
                    Gets or sets the name of the property that should be animated. 
                </summary>
      <returns>
                    The property to animate.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Storyboard.TargetPropertyProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> attached property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> attached property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.Timeline">
      <summary>
                    Defines a segment of time. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Timeline" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.AutoReverse">
      <summary>
                    Gets or sets a value that indicates whether the timeline plays in reverse after it completes a forward iteration.
                </summary>
      <returns>true if the timeline plays in reverse at the end of each iteration; otherwise, false. The default value is false.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.AutoReverseProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.AutoReverse" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.AutoReverse" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.BeginTime">
      <summary>
                    Gets or sets the time at which this <see cref="T:System.Windows.Media.Animation.Timeline" /> should begin. 
                </summary>
      <returns>
                    The start time of the time line. The default value is zero.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.BeginTimeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Media.Animation.Timeline.Completed">
      <summary>
                    Occurs when the <see cref="T:System.Windows.Media.Animation.Storyboard" /> object has completed playing. 
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.Duration">
      <summary>
                    Gets or sets the length of time for which this timeline plays, not counting repetitions.
                </summary>
      <returns>
                    The timeline's simple duration: the amount of time this timeline takes to complete a single forward iteration. The default value is <see cref="P:System.Windows.Duration.Automatic" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.DurationProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.FillBehavior">
      <summary>
                    Gets or sets a value that specifies how the animation behaves after it reaches the end of its active period.
                </summary>
      <returns>
                    A value that specifies how the timeline behaves after it reaches the end of its active period but its parent is inside its active or fill period. The default value is <see cref="F:System.Windows.Media.Animation.FillBehavior.HoldEnd" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.FillBehaviorProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.RepeatBehavior">
      <summary>
                    Gets or sets the repeating behavior of this timeline. 
                </summary>
      <returns>
                    An iteration <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Count" /> that specifies the number of times the timeline should play, a <see cref="T:System.TimeSpan" /> value that specifies the total length of this timeline's active period, or the special value <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Forever" />, which specifies that the timeline should repeat indefinitely. The default value is a <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> with a <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Count" /> of 1, which indicates that the timeline plays once.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.SpeedRatio">
      <summary>
                    Gets or sets the rate, relative to its parent, at which time progresses for this <see cref="T:System.Windows.Media.Animation.Timeline" />. 
                </summary>
      <returns>
                    A finite value greater than 0 that specifies the rate at which time progresses for this timeline, relative to the speed of the timeline's parent. If this timeline is a root timeline, specifies the default timeline speed. The value is expressed as a factor where 1 represents normal speed, 2 is double speed, 0.5 is half speed, and so on. The default value is 1.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.SpeedRatioProperty">
      <summary>
                    Identifies for the <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.TimelineCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.Animation.Timeline" /> objects.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapImage">
      <summary>
                    Provides the practical object source type for the <see cref="P:System.Windows.Controls.Image.Source" /> and <see cref="P:System.Windows.Media.ImageBrush.ImageSource" /> properties.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.#ctor(System.Uri)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> class, using the supplied URI. 
                </summary>
      <param name="uriSource">
                    The URI that references the source graphics file for the image.
                </param>
    </member>
    <member name="E:System.Windows.Media.Imaging.BitmapImage.DownloadProgress">
      <summary>
                    Occurs when a significant change has occurred in the download progress of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> content.
                </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.SetSource(System.IO.Stream)">
      <summary>
                    Populates the graphics source file for a <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> from a stream.
                </summary>
      <param name="streamSource">
                    The stream that contains the graphics source file.
                </param>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.UriSource">
      <summary>
                    Gets or sets the URI of the graphics source file that generated this <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.
                </summary>
      <returns>
                    The URI of the graphics source file that generated this <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.
                </returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.UriSourceProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriSource" /> dependency property.
                </summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.DownloadProgressEventArgs">
      <summary>
                    Provides event data for the <see cref="E:System.Windows.Media.Imaging.BitmapImage.DownloadProgress" /> event.
                </summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.DownloadProgressEventArgs.Progress">
      <summary>
                    Gets download progress as a value that is either 0 or 1.
                </summary>
      <returns>
                    The download progress. A value of 0 indicates no progress; 1 indicates the download is complete. 
                </returns>
    </member>
    <member name="T:System.Windows.Resources.StreamResourceInfo">
      <summary>
                    Provides resource stream information for application resources or other packages obtained through the <see cref="M:System.Windows.Application.GetResourceStream(System.Windows.Resources.StreamResourceInfo,System.Uri)" /> method. 
                </summary>
    </member>
    <member name="M:System.Windows.Resources.StreamResourceInfo.#ctor(System.IO.Stream,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Resources.StreamResourceInfo" /> class.
                </summary>
      <param name="stream">
                    The stream to use to create the resource.
                </param>
      <param name="contentType">
                    The MIME type of the content.
                </param>
    </member>
    <member name="P:System.Windows.Resources.StreamResourceInfo.ContentType">
      <summary>
                    Gets the MIME type of the content in the stream.
                </summary>
      <returns>
                    The MIME type of the content in the stream, as a string.
                </returns>
    </member>
    <member name="P:System.Windows.Resources.StreamResourceInfo.Stream">
      <summary>
                    Gets the stream that is contained by the resource.
                </summary>
      <returns>
                    The stream that is contained by the resource.
                </returns>
    </member>
    <member name="T:System.Windows.Shapes.Ellipse">
      <summary>
                    Draws an ellipse. 
                </summary>
    </member>
    <member name="M:System.Windows.Shapes.Ellipse.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Shapes.Ellipse" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Shapes.Line">
      <summary>
                    Draws a straight line between two points. 
                </summary>
    </member>
    <member name="M:System.Windows.Shapes.Line.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Shapes.Line" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Shapes.Line.X1">
      <summary>
                    Gets or sets the x-coordinate of the <see cref="T:System.Windows.Shapes.Line" /> start point.
                </summary>
      <returns>
                    The x-coordinate for the start point of the line, in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Line.X1Property">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Line.X1" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Line.X1" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Line.X2">
      <summary>
                    Gets or sets the x-coordinate of the <see cref="T:System.Windows.Shapes.Line" /> end point.  
                </summary>
      <returns>
                    The x-coordinate for the end point of the line, in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Line.X2Property">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Line.X2" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Line.X2" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Line.Y1">
      <summary>
                    Gets or sets the y-coordinate of the <see cref="T:System.Windows.Shapes.Line" /> start point. 
                </summary>
      <returns>
                    The y-coordinate for the start point of the line, in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Line.Y1Property">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Line.Y1" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Line.Y1" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Line.Y2">
      <summary>
                    Gets or sets the y-coordinate of the <see cref="T:System.Windows.Shapes.Line" /> end point. 
                </summary>
      <returns>
                    The y-coordinate for the end point of the line, in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Line.Y2Property">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Line.Y2" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Line.Y2" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Shapes.Path">
      <summary>
                    Draws a series of connected lines and curves. The line and curve dimensions are declared through the <see cref="P:System.Windows.Shapes.Path.Data" /> property, and can be specified either with a Path-specific mini-language, or with an object model.
                </summary>
    </member>
    <member name="M:System.Windows.Shapes.Path.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Shapes.Path" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Shapes.Path.Data">
      <summary>
                    Gets or sets a <see cref="T:System.Windows.Media.Geometry" /> that specifies the shape to be drawn.
                </summary>
      <returns>
                    A description of the shape to be drawn.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Path.DataProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Path.Data" /> dependency property.  
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Path.Data" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Shapes.Polygon">
      <summary>
                    Draws a polygon, which is a connected series of lines that form a closed shape.
                </summary>
    </member>
    <member name="M:System.Windows.Shapes.Polygon.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Shapes.Polygon" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Shapes.Polygon.FillRule">
      <summary>
                    Gets or sets a value that specifies how the interior fill of the shape is determined.
                </summary>
      <returns>
                    A value of the enumeration. The default is <see cref="F:System.Windows.Media.FillRule.EvenOdd" />.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Polygon.FillRuleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Polygon.FillRule" /> dependency property.  
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Polygon.FillRule" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Polygon.Points">
      <summary>
                    Gets or sets a collection that contains the vertex points of the polygon.
                </summary>
      <returns>
                    A collection of <see cref="T:System.Windows.Point" /> structures that describes the vertex points of the polygon. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Polygon.PointsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Polygon.Points" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Polygon.Points" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Shapes.Polyline">
      <summary>
                    Draws a series of connected straight lines. 
                </summary>
    </member>
    <member name="M:System.Windows.Shapes.Polyline.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Shapes.Polyline" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Shapes.Polyline.FillRule">
      <summary>
                    Gets or sets a value that specifies how the interior fill of the shape is determined.
                </summary>
      <returns>
                    A value of the enumeration that specifies the fill behavior. The default is <see cref="F:System.Windows.Media.FillRule.EvenOdd" />.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Polyline.FillRuleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Polyline.FillRule" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Polyline.FillRule" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Polyline.Points">
      <summary>
                    Gets or sets a collection that contains the vertex points of the <see cref="T:System.Windows.Shapes.Polyline" />.
                </summary>
      <returns>
                    A collection of <see cref="T:System.Windows.Point" /> structures that describe the vertex points of the <see cref="T:System.Windows.Shapes.Polyline" />. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Polyline.PointsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Polyline.Points" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Polyline.Points" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Shapes.Rectangle">
      <summary>
                    Draws a rectangle shape, which can have a stroke and a fill.
                </summary>
    </member>
    <member name="M:System.Windows.Shapes.Rectangle.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Shapes.Rectangle" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Shapes.Rectangle.RadiusX">
      <summary>
                    Gets or sets the x-axis radius of the ellipse that is used to round the corners of the rectangle.
                </summary>
      <returns>
                    The x-axis radius of the ellipse that is used to round the corners of the rectangle.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Rectangle.RadiusXProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Rectangle.RadiusX" /> dependency property.  
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Rectangle.RadiusX" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Rectangle.RadiusY">
      <summary>
                    Gets or sets the y-axis radius of the ellipse that is used to round the corners of the rectangle. 
                </summary>
      <returns>
                    The y-axis radius of the ellipse that is used to round the corners of the rectangle. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Rectangle.RadiusYProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Rectangle.RadiusY" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Rectangle.RadiusY" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Shapes.Shape">
      <summary>
                    Provides a base class for shape elements, such as <see cref="T:System.Windows.Shapes.Ellipse" />, <see cref="T:System.Windows.Shapes.Polygon" />, and <see cref="T:System.Windows.Shapes.Rectangle" />.
                </summary>
    </member>
    <member name="M:System.Windows.Shapes.Shape.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Shapes.Shape" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Shapes.Shape.Fill">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.FillProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Shape.Fill" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Shape.Fill" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.GeometryTransform">
      <summary>
                    Gets a value that represents a <see cref="T:System.Windows.Media.Transform" /> that is applied to the geometry of a <see cref="T:System.Windows.Shapes.Shape" /> prior to when it is drawn.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Media.Transform" /> that is applied to the geometry of a <see cref="T:System.Windows.Shapes.Shape" /> prior to when it is drawn.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.Stretch">
      <summary>
                    Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.
                </summary>
      <returns>
                    One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StretchProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Shape.Stretch" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Shape.Stretch" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.Stroke">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted. The default is null.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeDashArray">
      <summary>
                    Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. 
                </summary>
      <returns>
                    A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. 
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeDashArrayProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeDashArray" /> dependency property.  
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeDashArray" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeDashCap">
      <summary>
                    Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. 
                </summary>
      <returns>
                    One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. 
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeDashCapProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeDashCap" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeDashCap" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeDashOffset">
      <summary>
                    Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeDashOffsetProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeDashOffset" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeDashOffset" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeEndLineCap">
      <summary>
                    Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. 
                </summary>
      <returns>
                    One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeEndLineCapProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeEndLineCap" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeEndLineCap" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeLineJoin">
      <summary>
                    Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.
                </summary>
      <returns>
                    A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. The default value is <see cref="F:System.Windows.Media.PenLineJoin.Miter" />. 
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeLineJoinProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeLineJoin" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeLineJoin" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeMiterLimit">
      <summary>
                    Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. 
                </summary>
      <returns>
                    The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeMiterLimitProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeMiterLimit" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeMiterLimit" /> dependency property.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Shape.Stroke" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Shape.Stroke" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeStartLineCap">
      <summary>
                    Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. 
                </summary>
      <returns>
                    A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeStartLineCapProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeStartLineCap" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeStartLineCap" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeThickness">
      <summary>
                    Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. 
                </summary>
      <returns>
                    The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels. 
                
                    The default value is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeThicknessProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary>
                    Provides services for managing the queue of work items for a thread. 
                </summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Action)">
      <summary>
                    Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.
                </summary>
      <returns>
                    An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that represents the operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.
                </returns>
      <param name="a">
                    A delegate to a method that takes no arguments and does not return a value, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.
                </param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary>
                    Executes the specified delegate asynchronously with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.
                </summary>
      <returns>
                    An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that represents the operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.
                </returns>
      <param name="d">
                    A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.
                </param>
      <param name="args">
                    An array of objects to pass as arguments to the specified method.
                </param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary>
                    Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />. 
                </summary>
      <returns>true if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, false.
                </returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary>
                    Represents an operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" /> queue. 
                </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary>
                    Provides a synchronization context for Silverlight.
                </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> class by using the current <see cref="T:System.Windows.Threading.Dispatcher" />.
                </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> class by using the specified <see cref="T:System.Windows.Threading.Dispatcher" />.
                </summary>
      <param name="dispatcher">
                    The <see cref="T:System.Windows.Threading.Dispatcher" /> to associate this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> with.
                </param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary>
                    Creates a copy of this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.
                </summary>
      <returns>
                    The copy of this synchronization context.
                </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
                    Invokes the callback in the synchronization context asynchronously.
                </summary>
      <param name="d">
                    The delegate to call.
                </param>
      <param name="state">
                    The object passed to the delegate.
                </param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
                    Invokes the callback in the synchronization context synchronously. 
                </summary>
      <param name="d">
                    The delegate to call.
                </param>
      <param name="state">
                    The object passed to the delegate.
                </param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary>
                    A timer that is integrated into the <see cref="T:System.Windows.Threading.Dispatcher" /> queue, which is processed at a specified interval of time and at a specified priority. 
                </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary>
                    Gets or sets the amount of time between timer ticks. 
                </summary>
      <returns>
                    The amount of time between ticks. The default is 00:00:00.
                </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary>
                    Gets a value that indicates whether the timer is running. 
                </summary>
      <returns>true if the timer is enabled; otherwise, false.  
                </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary>
                    Starts the <see cref="T:System.Windows.Threading.DispatcherTimer" />.
                </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary>
                    Stops the <see cref="T:System.Windows.Threading.DispatcherTimer" />. 
                </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary>
                    Occurs when the timer interval has elapsed. 
                </summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.ComponentModel.DataAnnotations.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.DataAnnotations</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.AssociationAttribute">
      <summary>Specifies that an entity member represents a data relationship, such as a foreign key relationship. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociationAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociationAttribute" /> class. </summary>
      <param name="name">The name of the association. For bidirectional associations, the name must be the same on both sides of the association.</param>
      <param name="thisKey">A comma-separated list of the property names of the key values on this side of the association.</param>
      <param name="otherKey">A comma-separated list of the property names of the key values on the other side of the association.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.IsForeignKey">
      <summary>Gets or sets the member as the foreign key in an association that represents a data relationship.</summary>
      <returns>true if the member is a foreign key in a data relationship; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.Name">
      <summary>Gets the name used to identify the association. </summary>
      <returns>The name of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey">
      <summary>Gets a comma-separated list of the property names of the key values on the other side of the association.</summary>
      <returns>A comma-separated list of property names of the key values on the other side of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKeyMembers">
      <summary>Gets the collection of individual key values specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" /> property.</summary>
      <returns>A collection of key values for the other side of the association. </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey">
      <summary>Gets a comma-separated list of property names of the key values on this side of the association.</summary>
      <returns>A comma-separated list of property names of the key values on this side of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKeyMembers">
      <summary>Gets the collection of individual key values specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" /> property.</summary>
      <returns>A collection of key values for this side of the association.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute">
      <summary>Designates that a property participates in optimistic concurrency checks.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> class. </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute">
      <summary>Designates a customized method to execute to validate the entity member.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute" /> class. </summary>
      <param name="validatorType">The type that contains the method to invoke when validating the member. </param>
      <param name="method">The name of the method to invoke when validating the member.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message based on the data field where the error occurred.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name to include in the formatted string which is the typically the value of the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.DisplayName" /> property.</param>
      <exception cref="T:System.InvalidOperationException">The attribute is not well-formed.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.Method">
      <summary>Gets the name of the method to invoke for validation.</summary>
      <returns>The name of the method to invoke for validation.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.ValidatorType">
      <summary>Gets the type that contains the method for validating the member.</summary>
      <returns>The type that contains the method specified in the <see cref="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.Method" /> property.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataType">
      <summary>Represents data types that are associated with data properties.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Custom">
      <summary>Represents a data type that is not one of the known types. </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.DateTime">
      <summary>Represents an instant in time, expressed as a date and time of day.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Date">
      <summary>Represents a data value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Time">
      <summary>Represents a time value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Duration">
      <summary>Represents a continuous time during which an object exists.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.PhoneNumber">
      <summary>Represents a phone number value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Currency">
      <summary>Represents a currency value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Text">
      <summary>Represents text that is displayed.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Html">
      <summary>Represents an HTML file.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.MultilineText">
      <summary>Represents multiline text.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.EmailAddress">
      <summary>Represents an e-mail address.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Password">
      <summary>Represents a password value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Url">
      <summary>Represents a URL value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.ImageUrl">
      <summary>Represents a URL value that is displayed as an image instead of text.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataTypeAttribute">
      <summary>Specifies the name of an additional type to associate with an entity member.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" /> class with the specified data type enumeration. </summary>
      <param name="dataType">The type of data object to associate with the member.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" /> class with the specified name of a customized data type. </summary>
      <param name="customDataType">The name of a customized data type to associate with the member.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType">
      <summary>Gets a string that represents the name of the customized data type to associate with the member.</summary>
      <returns>The name of the customized data type to associate with the member.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType">
      <summary>Gets the type of the data object to associate with the member.</summary>
      <returns>The type of the data object to associate with the member.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat">
      <summary>Gets the object that represents the format of the data type.</summary>
      <returns>The object that represents the format of the data type.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName">
      <summary>Retrieves the name of the data type that is associated with the member.</summary>
      <returns>The value of the <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType" /> property if the <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType" /> property is set to <see cref="F:System.ComponentModel.DataAnnotations.DataType.Custom" />; otherwise, the name of the value in the <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType" /> property.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType" /> is set to <see cref="F:System.ComponentModel.DataAnnotations.DataType.Custom" />, but <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType" /> does not contain a value.</exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayAttribute">
      <summary>Specifies localizable strings for entity types and members that are used in the user interface.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute" /> class. </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField">
      <summary>Gets or sets a value that indicates whether the field is automatically displayed in the user interface.</summary>
      <returns>true if the field is automatically displayed in the user interface; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The property does not contain a value when trying to retrieve the value.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter">
      <summary>Gets or sets a value that indicates whether filtering is automatically displayed for this field.</summary>
      <returns>true if filtering is automatically displayed; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The property does not contain a value when trying to retrieve the value.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description">
      <summary>Gets or sets either a resource name or non-localized text, such as a tool tip, that is displayed to users to help them understand a member.</summary>
      <returns>Either a resource name or the non-localized text to display to users to help them understand a member. The resource name is used with the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property to retrieve localized text to display to users to help them understand a member.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateField">
      <summary>Retrieves the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" /> property.</summary>
      <returns>The value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" /> property when the property has been set, or null if the property has not been set.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateFilter">
      <summary>Retrieves the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter" /> property.</summary>
      <returns>The value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter" /> property if the property has been set, or null if the property has not been set.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription">
      <summary>Retrieves the localized or non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property.</summary>
      <returns>The localized value for the description when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property is specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property represents a resource name; otherwise, the non-localized value specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName">
      <summary>Retrieves the localized or non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> property.</summary>
      <returns>The localized value for the group name when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property is specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> property represents a resource name; otherwise, the non-localized value specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> property.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName">
      <summary>Retrieves the localized or non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property.</summary>
      <returns>The localized value for the group name when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property is specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property represents a resource name; otherwise, the non-localized value specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetOrder">
      <summary>Retrieves the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> property.</summary>
      <returns>The value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> property if the property is set, or null if the property is not set.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt">
      <summary>Retrieves the localized or non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property.</summary>
      <returns>The localized value for the group name when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property is specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property represents a resource name; otherwise, the non-localized value specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName">
      <summary>Retrieves the localized or non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property.</summary>
      <returns>The localized value for the group name when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property is specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property represents a resource name; otherwise, the non-localized value specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName">
      <summary>Gets or sets either a resource name or non-localized text that is displayed to users when grouping fields in the user interface.</summary>
      <returns>Either a resource name or the non-localized text that is displayed to users when grouping fields in the user interface. The resource name is used with the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property to retrieve localized text that is displayed to users when grouping fields in the user interface.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name">
      <summary>Gets or sets either a resource name or non-localized text that is used as a member label for elements that are bound to the member.</summary>
      <returns>Either a resource name or the non-localized text that is used as a member label for elements that are bound to the member. The resource name is used with the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property to retrieve localized text that is used as a member label for elements that are bound to the member.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order">
      <summary>Gets or sets a value that indicates the order in which columns are sorted.</summary>
      <returns>A value that indicates the order in which columns are sorted.</returns>
      <exception cref="T:System.InvalidOperationException">The get accessor is called when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> property has not been set.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt">
      <summary>Gets or sets either a resource name or non-localized text, such as a watermark, that suggests a user action for an element that is bound to the member.</summary>
      <returns>Either a resource name or the non-localized text that suggests a user action for an element that is bound to the member. The resource name is used with the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property to retrieve localized text that suggests a user action for an element that is bound to the member.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType">
      <summary>Gets or sets the type that contains the resources for other localizable property values.</summary>
      <returns>The type that contains the resources for other localizable property values.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName">
      <summary>Gets or sets either a resource name or non-localized text that is used as the column label for an element that is bound to the member.</summary>
      <returns>Either a resource name or the non-localized text that is used as the column label for an element that is bound to the member.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute">
      <summary>Designates the property to display, the property to use for sorting, and the sort order when a table is used as a parent table in a foreign key relationship.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class with the specified column to display. </summary>
      <param name="displayColumn">The name of the column to display.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class with the specified display column and the specified sort column. </summary>
      <param name="displayColumn">The name of the column to display.</param>
      <param name="sortColumn">The name of the column to use for sorting.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class with the specified display column, sort column, and sort order. </summary>
      <param name="displayColumn">The name of the column to display.</param>
      <param name="sortColumn">The name of the column to use for sorting.</param>
      <param name="sortDescending">true to sort in descending order; otherwise, false.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.DisplayColumn">
      <summary>Gets the name of the column to the display.</summary>
      <returns>The name of the column to display.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortColumn">
      <summary>Gets the name of the column to use for sorting.</summary>
      <returns>The name of the column to use for sorting.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortDescending">
      <summary>Gets a value that indicates whether the data is sorted in descending order.</summary>
      <returns>true if the data is sorted in descending order; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute">
      <summary>Specifies how data fields are displayed and formatted.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" /> class. </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ApplyFormatInEditMode">
      <summary>Gets or sets a value that indicates whether the formatting string that is specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" /> property is applied to the member when in edit mode.</summary>
      <returns>true if the formatting string that is specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" /> property is applied to the member when in edit mode; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ConvertEmptyStringToNull">
      <summary>Gets or sets a value that indicates whether empty string values ("") are automatically converted to null.</summary>
      <returns>true if empty string values are automatically converted to null; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString">
      <summary>Gets or sets the string value that specifies how to display values for the member.</summary>
      <returns>The string value that specifies how to display values for the member.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.NullDisplayText">
      <summary>Gets or sets the text to display for a member when the value of the member is null.</summary>
      <returns>The text to display for a member when the value of the member is null.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.EditableAttribute">
      <summary>Specifies whether users should be able to change the value of the entity property.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EditableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute" /> class. </summary>
      <param name="allowEdit">The value that indicates whether users should be able to change the existing value of the property and set a value when inserting a new record.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit">
      <summary>Gets a value that indicates whether a client application should allow users to change the value of the property.</summary>
      <returns>true if users should be able to change the value of the property; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue">
      <summary>Gets or sets a value that indicates whether users should be able to set a value for the property when adding a new record in the data set.</summary>
      <returns>true if users should be able to set the value; otherwise, false. The default value is the value you set for the <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit" /> property.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute">
      <summary>Specifies that an entity member corresponds to an enumeration type. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute" /> class. </summary>
      <param name="enumType">The enumeration type to associate with the entity member.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.EnumType">
      <summary>Gets the enumeration type associated with the entity member.</summary>
      <returns>The enumeration type for the entity member.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute">
      <summary>Designates the filtering behavior for a column.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class with the specified control to use for filtering. </summary>
      <param name="filterUIHint">The control to use for filtering.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class with the specified control to use for filtering and the presentation layer. </summary>
      <param name="filterUIHint">The control to use for filtering.</param>
      <param name="presentationLayer">The name of the presentation layer that supports the control.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class with the specified control to use for filtering, the presentation layer, and the collection of parameters to use when creating an instance of the control.</summary>
      <param name="filterUIHint">The control to use for filtering.</param>
      <param name="presentationLayer">The name of the presentation layer that supports the control.</param>
      <param name="controlParameters">The collection of parameters to use when creating an instance of the control.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.ControlParameters">
      <summary>Gets the collection of values to use when creating an instance of the control used for filtering.</summary>
      <returns>The collection of values to use when creating an instance of the filtering control.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance has the same value as the specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> object and its value is the same as this instance; otherwise false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.FilterUIHint">
      <summary>Gets the name of the control to use for filtering.</summary>
      <returns>The name of the control to use for filtering.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.PresentationLayer">
      <summary>Gets the name of the presentation layer that supports the filtering control type.</summary>
      <returns>The name of the presentation layer that supports the filtering control type.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.KeyAttribute">
      <summary>Specifies one or more entity properties to use as the unique identity for the entity.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.KeyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> class. </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RangeAttribute">
      <summary>Designates the minimum and maximum constraints for the associated member.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class with specified double values as the minimum and maximum limits. </summary>
      <param name="minimum">The minimum value.</param>
      <param name="maximum">The maximum value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class with specified integer values as the minimum and maximum limits.</summary>
      <param name="minimum">The minimum value.</param>
      <param name="maximum">The maximum value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class with the specified minimum and maximum values converted to the specified type.</summary>
      <param name="type">The type of <paramref name="minimum" /> and <paramref name="maximum" />. The type must implement the <see cref="T:System.IComparable" /> interface.</param>
      <param name="minimum">The minimum value.</param>
      <param name="maximum">The maximum value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message based on the data field where the error occurred.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name to include in the formatted string.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum" /> is null.-or-<see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum" /> is null.-or-<see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.OperandType" /> does not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum">
      <summary>Gets the maximum allowed value for the range.</summary>
      <returns>The maximum allowed value for the range.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum">
      <summary>Gets the minimum allowed value for the range.</summary>
      <returns>The minimum allowed value for the range.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.OperandType">
      <summary>Gets the type of the <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum" /> and <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum" /> values.</summary>
      <returns>The type of the <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum" /> and <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum" /> values.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute">
      <summary>Designates a regular expression to use for validation of the associated member. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> class. </summary>
      <param name="pattern">The regular expression to use for validation.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message based on the data field where the error occurred.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name to include in the formatted string.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern" /> does not contain a valid regular expression.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern" /> is null or an empty string ("").</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern">
      <summary>Gets the regular expression to use for validation of the associated member.</summary>
      <returns>The regular expression to use for validation of the associated member.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RequiredAttribute">
      <summary>Specifies that a value must be provided for a property. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> class. </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.StringLengthAttribute">
      <summary>Specifies the maximum and minimum number of characters that are allowed for an entity member.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> class. </summary>
      <param name="maximumLength">The maximum length of a string.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message that is displayed when the string value is not within the specified length.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name to include in the formatted error message.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength" /> is less than zero.-or-<see cref="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength" /> is less than <see cref="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength" />.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength">
      <summary>Gets the maximum length of a string.</summary>
      <returns>The maximum length of the input string.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength">
      <summary>Gets or sets the minimum length of a string.</summary>
      <returns>The minimum length of the input string. The default value is 0.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.TimestampAttribute">
      <summary>Designates a member as a time stamp value. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.TimestampAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> class. </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.UIHintAttribute">
      <summary>Designates the control and values to use to display the associated entity member.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class with the specified name of the control to use to display the member. </summary>
      <param name="uiHint">The name of the control to use to display the member.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class with the specified name of the control to use to display the member and the presentation layer for the control. </summary>
      <param name="uiHint">The name of the control to use to display the member.</param>
      <param name="presentationLayer">The name of the presentation layer that supports this control.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class with the specified name of the control to use to display the member, the presentation layer for the control, and the parameters to use when creating an instance of the control.</summary>
      <param name="uiHint">The name of the control to use to display the member.</param>
      <param name="presentationLayer">The name of the presentation layer that supports this control.</param>
      <param name="controlParameters">The list of parameters to use when creating an instance of the control.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters">
      <summary>Gets a collection of values to use as parameters when creating an instance of the presentation control.</summary>
      <returns>A collection of values to use as parameters when creating an instance of the presentation control.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance has the same value as the specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> object and its value is the same as this instance; otherwise false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer">
      <summary>Gets the name of the presentation layer that supports the control type in the <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint" /> property.</summary>
      <returns>A value that represents the name of the presentation layer.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint">
      <summary>Gets the name of the control to use to display the associated member.</summary>
      <returns>The name of the control to use to display the associated member.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationAttribute">
      <summary>Serves as the base class for all validation attributes.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.Func{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class with the specified function to retrieve the error message.</summary>
      <param name="errorMessageAccessor">A function to retrieve the error message.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class with the specified error message.</summary>
      <param name="errorMessage">A non-localizable error message.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage">
      <summary>Gets or sets the non-localizable error message to display when validation fails.</summary>
      <returns>The non-localizable error message.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName">
      <summary>Gets or sets the property name on the resource type that provides the localizable error message.</summary>
      <returns>The property name on the resource type that provides the localizable error message.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType">
      <summary>Gets or sets the resource type that provides the localizable error message.</summary>
      <returns>The resource type that provides the localizable error message.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString">
      <summary>Gets the localized or non-localized error message.</summary>
      <returns>The localized or non-localized error message.</returns>
      <exception cref="T:System.InvalidOperationException">Both <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" /> and <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage" /> are set.-or-Neither <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" /> nor <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage" /> is set.-or-Either <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" /> or <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> is set, but the other is not.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to the error message.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name to include in the formatted error message.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid and returns an object that includes the results of the validation check.</summary>
      <returns>
        <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success" /> if the value is valid; otherwise, an instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class with the error message.</returns>
      <param name="value">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validationContext" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid.</summary>
      <returns>true if <paramref name="value" /> is valid; otherwise, false.</returns>
      <param name="value">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <exception cref="T:System.NotImplementedException">The <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> method is not overridden in the derived class.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid and throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the object is not valid.</summary>
      <param name="value">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validationContext" /> is null.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="value" /> is not valid.</exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationContext">
      <summary>Provides information about a type or member to validate.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object,System.IServiceProvider,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> class with the specified object to validate, a service provider that enables validation methods to access external services, and a collection of values related to validation.</summary>
      <param name="instance">The object to validate.</param>
      <param name="serviceProvider">A service provider that enables validation methods to access external services. This value can be null.</param>
      <param name="items">A collection of values related to validation. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.DisplayName">
      <summary>Gets or sets the name to display to users for the member to validate.</summary>
      <returns>The name of member to validate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null or an empty string ("").</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)">
      <summary>Retrieves an instance of the service to use during validation.</summary>
      <returns>An instance of that service or null if the service is not available.</returns>
      <param name="serviceType">The type of the service to use during validation.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.Items">
      <summary>Gets the collection of values associated with the validation request.</summary>
      <returns>The collection of values associated with the validation request</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName">
      <summary>Gets or sets the programmatic name of the member to validate.</summary>
      <returns>The programmatic name of the member to validate.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance">
      <summary>Gets the object to validate.</summary>
      <returns>The object to validate.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectType">
      <summary>Gets the type of the object to validate.</summary>
      <returns>The type of the object to validate.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationException">
      <summary>Represents the exception that occurred during validation of a member that is marked with a validation attribute.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.ComponentModel.DataAnnotations.ValidationResult,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class with the specified validation result, the attribute that triggered the exception, and the invalid value.</summary>
      <param name="validationResult">An object containing information about the validation error.</param>
      <param name="validatingAttribute">The attribute that caused the validation exception.</param>
      <param name="value">The value that caused the validating attribute to trigger the exception.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class with the specified error message. </summary>
      <param name="message">The localized message describing the exception.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class with the specified error message, the attribute that triggered the exception, and the invalid value.</summary>
      <param name="errorMessage">The localized message describing the exception.</param>
      <param name="validatingAttribute">The attribute that caused the validation exception.</param>
      <param name="value">The value that caused the validating attribute to trigger the exception.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class with the specified error message and an inner exception.</summary>
      <param name="message">The localized message describing the exception.</param>
      <param name="innerException">The object representing an exception that caused the current validation exception.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationAttribute">
      <summary>Gets the validation attribute that caused the validation exception.</summary>
      <returns>The validation attribute that caused the validation exception.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult">
      <summary>Gets the object containing information about the validation error.</summary>
      <returns>This object containing information about the validation error.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.Value">
      <summary>Gets the value that caused the validating attribute to trigger the exception.</summary>
      <returns>The value that caused the validating attribute to trigger the exception.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationResult">
      <summary>Contains the results of a validation request. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class with the specified error message. </summary>
      <param name="errorMessage">The error message to display to the user. If null, the <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> method uses the <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" /> method to create the error message.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class with the specified error message and a collection of member names that are associated with the validation result. </summary>
      <param name="errorMessage">The error message to display to the user. If null, the <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> method uses the <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" /> method to create the error message.</param>
      <param name="memberNames">The collection of member names associated with the validation result. If empty, <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> will construct this list from the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName" /> property. </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage">
      <summary>Gets or sets the error message for the validation result.</summary>
      <returns>The error message for the validation result.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.MemberNames">
      <summary>Gets the collection of member names associated with the validation result.</summary>
      <returns>The collection of member names associated with the validation result.</returns>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.ValidationResult.Success">
      <summary>A value that indicates the entity member successfully validated.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Validator">
      <summary>Provides members to help validate objects and members using values from the associated <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
      <summary>Determines whether the specified object is valid.</summary>
      <returns>true if the object is valid; otherwise, false.</returns>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validationResults">A collection to store validation results.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" /> does not equal the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" /> on <paramref name="validationContext" />.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean)">
      <summary>Determines whether the specified object is valid and, if requested, validates all of the properties of the object.</summary>
      <returns>true if the object is valid; otherwise, false.</returns>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validationResults">A collection to store validation results.</param>
      <param name="validateAllProperties">A value that indicates whether all immediate properties of the object are validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" /> does not equal the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" /> on <paramref name="validationContext" />.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
      <summary>Determines whether the specified property value is valid.</summary>
      <returns>true if the property is valid; otherwise, false.</returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validationResults">A collection to store validation results.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName" /> of <paramref name="validationContext" /> is not a valid property.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
      <summary>Determines whether a specified value is valid against a collection of validation attributes.</summary>
      <returns>true if <paramref name="value" /> is valid against the validation attributes; otherwise, false.</returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validationResults">A collection to store validation results.</param>
      <param name="validationAttributes">The collection of validation attributes to use to determine if <paramref name="value" /> is valid.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid and throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the object is not valid.</summary>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.-or-<paramref name="validationContext" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" /> does not equal the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" /> on <paramref name="validationContext" />.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="instance" /> is not valid.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)">
      <summary>Determines whether the specified object is valid and, if requested, whether all of the properties on the object are valid, and throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the object is not valid.</summary>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validateAllProperties">A value that indicates whether all immediate properties of the object are validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.-or-<paramref name="validationContext" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" /> does not equal the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" /> on <paramref name="validationContext" />.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="instance" /> or at least one of its properties is not valid.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified property value is valid and throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the property is not valid.</summary>
      <param name="value">The value to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName" /> of <paramref name="validationContext" /> is not a valid property.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="value" /> is not valid.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
      <summary>Determines whether a specified value is valid against a collection of validation attributes and throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the value is not valid.</summary>
      <param name="value">The value to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validationAttributes">The collection of validation attributes to use to determine if <paramref name="value" /> is valid.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validationContext" /> is null.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="value" /> is not valid.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Runtime.Serialization.Json.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.Runtime.Serialization.Json</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Runtime.Serialization.Json.dll</relpath>
    <extension downloadUri="System.Runtime.Serialization.Json.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Data.Services.Client.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Services.Client</name>
  </assembly>
  <members>
    <member name="T:System.Data.Services.Client.ChangeOperationResponse">
      <summary>Results that are returned after a call to the <see cref="M:System.Data.Services.Client.DataServiceContext.EndSaveChanges(System.IAsyncResult)" /> method when enumerating operation responses that are returned by the <see cref="T:System.Data.Services.Client.DataServiceResponse" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Client.ChangeOperationResponse.Descriptor">
      <summary>Gets the <see cref="T:System.Data.Services.Client.EntityDescriptor" /> or <see cref="T:System.Data.Services.Client.LinkDescriptor" /> modified by a change operation.</summary>
      <returns>An <see cref="T:System.Data.Services.Client.EntityDescriptor" /> or <see cref="T:System.Data.Services.Client.LinkDescriptor" /> modified by a change operation.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceClientException">
      <summary>Represents errors from ADO.NET Data Services client applications.</summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class by using a system-supplied message that describes the error. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class by using a specified message that describes the error. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class by using a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Exception,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class. </summary>
      <param name="message">The string value that contains the error message.</param>
      <param name="innerException">The System.Exception object that contains the inner exception.</param>
      <param name="statusCode">The integer value that contains the status code.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class. </summary>
      <param name="message">The string value that contains the error message.</param>
      <param name="statusCode">The integer value that contains the status code.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceClientException.StatusCode">
      <summary>Gets the HTTP error status code returned after a <see cref="T:System.Data.Services.Client.DataServiceClientException" />.</summary>
      <returns>An integer value that represents the exception.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceContext">
      <summary>The <see cref="T:System.Data.Services.Client.DataServiceContext" /> represents the runtime context of an ADO.NET data service. ADO.NET Data Services are stateless, but the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is not. State on the client is maintained between interactions in order to support features such as update management. This class, and the <see cref="T:System.Data.Services.Client.DataServiceQuery" /> class that represents a particular HTTP request to a data service, are the two main classes in the client library. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceContext" /> class by using the specified <paramref name="baseURI" />.</summary>
      <param name="serviceRoot">An absolute URI that identifies the root of a data service.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="serviceRoot" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="serviceRoot" /> is not an absolute, well-formed URI, does not begin with http or https, or contains a query or query fragment.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AddLink(System.Object,System.String,System.Object)">
      <summary>Adds the specified link to the set of objects the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is tracking.</summary>
      <param name="source">The source object for the new link.</param>
      <param name="sourceProperty">The property on the source object that identifies the object to which the source adds a link.</param>
      <param name="target">The object in the new link to which the source will be linked. The target object must be of the type identified by the <paramref name="sourceProperty" /> parameter or a subtype of the type.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty" /> or <paramref name="target" /> are null.</exception>
      <exception cref="T:System.InvalidOperationException">When the link already exists.-or-When the source or target objects are in a <see cref="F:System.Data.Services.Client.EntityStates.Detached" /> or <see cref="F:System.Data.Services.Client.EntityStates.Deleted" /> state.-or-When <paramref name="sourceProperty" /> is not property that returns a collection.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AddObject(System.String,System.Object)">
      <summary>Adds the specified object to the set of objects that the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is tracking.</summary>
      <param name="entitySetName">The name of the entity set to which the resource will be added.</param>
      <param name="entity">The resource to be tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> in the added state.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> or <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is an empty string.-or-When <paramref name="entity" /> does not have a key property.</exception>
      <exception cref="T:System.InvalidOperationException">When <paramref name="entity" /> is already being tracked by the context.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AttachLink(System.Object,System.String,System.Object)">
      <summary>Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to start tracking the specified link between the source and the specified target entity.</summary>
      <param name="source">The source object in the new link.</param>
      <param name="sourceProperty">The name of the property on the source object that represents the link between the source and target object.</param>
      <param name="target">The target object in the link that is bound to the source object specified in this call. The target object must be of the type identified by the source property or a subtype.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty" /> or <paramref name="target" /> are null.</exception>
      <exception cref="T:System.InvalidOperationException">When the link binding already exists.-or-When the source or target objects are in an <see cref="F:System.Data.Services.Client.EntityStates.Added" /> or <see cref="F:System.Data.Services.Client.EntityStates.Deleted" /> state.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AttachTo(System.String,System.Object)">
      <summary>Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to start tracking the specified resource and supplies the location of the resource within the specified resource set.</summary>
      <param name="entitySetName">The name of the set that contains the resource.</param>
      <param name="entity">The resource to be tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />. The resource is attached in the Unchanged state.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> or <paramref name="entitySetName" /> are null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is an empty string.-or-When <paramref name="entity" /> does not have a key property.</exception>
      <exception cref="T:System.InvalidOperationException">When <paramref name="entity" /> is already being tracked by the context.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AttachTo(System.String,System.Object,System.String)">
      <summary>Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to start tracking the specified resource and supplies the location of the resource within the specified resource set.</summary>
      <param name="entitySetName">The string value that contains the name of the entity set to which the entity is attached.</param>
      <param name="entity">The entity to add.</param>
      <param name="etag">An eTag value that represents the state of the entity the last time that it was retrieved from the data service. This value is treated as an opaque string; no validation is performed on it by the client library.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> or <paramref name="entitySetName" /> are null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is an empty string.-or-When <paramref name="entity" /> does not have a key property.</exception>
      <exception cref="T:System.InvalidOperationException">When <paramref name="entity" /> is already being tracked by the context.</exception>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.BaseUri">
      <summary>Gets the absolute URI identifying the root of the target data service. </summary>
      <returns>An absolute URI that identifies the root of an ADO.NET data service.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object)">
      <summary>Asynchronously sends the request so that this call does not block processing while waiting for the results from the service.</summary>
      <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI; it can contain $ query parameters.</param>
      <param name="callback">Delegate to invoke when results are available for client consumption.</param>
      <param name="state">User-defined state object that was passed to the callback.</param>
      <typeparam name="TElement">The type returned by the query.</typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginExecuteBatch(System.AsyncCallback,System.Object,System.Data.Services.Client.DataServiceRequest[])">
      <summary>Asynchronously submits a group of queries as a batch to the data service.</summary>
      <param name="callback">The delegate that is called when a response to the batch request is received.</param>
      <param name="state">User-defined state object that is used to pass context data to the callback method.</param>
      <param name="queries">The array of query requests to include in the batch request.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the operation to load the value of the specified property from the data service.</summary>
      <returns>An IAsyncResult that represents the status of the asynchronous operation.</returns>
      <param name="entity">The entity that contains the property to load.</param>
      <param name="propertyName">The name of the property on the specified entity to load.</param>
      <param name="callback">The delegate called when a response to the request is received.</param>
      <param name="state">The user-defined state object used to pass context data to the callback method.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)">
      <summary>Asynchronously submits the pending changes to the data service collected by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> since the last time changes were saved.</summary>
      <returns>An IAsyncResult that represents the status of the asynchronous operation.</returns>
      <param name="callback">The delegate to call when the operation finishes.</param>
      <param name="state">The user-defined state object used to pass context data to the callback method.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.Data.Services.Client.SaveChangesOptions,System.AsyncCallback,System.Object)">
      <summary>Asynchronously submits the pending changes to the data service collected by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> since the last time changes were saved.</summary>
      <returns>An IAsyncResult that represents the status of the asynchronous operation.</returns>
      <param name="options">The options for how the client can save the pending set of changes. For more information, see <see cref="T:System.Data.Services.Client.SaveChangesOptions." /></param>
      <param name="callback">The delegate to call when the operation finishes.</param>
      <param name="state">The user-defined state object used to pass context data to the callback method.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.CancelRequest(System.IAsyncResult)">
      <summary>Cancels a request to the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <param name="asyncResult">The status of the asynchronous operation to be cancelled.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.CreateQuery``1(System.String)">
      <summary>Creates a data service query for data of a specified generic type.</summary>
      <returns>A new <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> instance that represents a data service query.</returns>
      <param name="entitySetName">A string that resolves to a URI.</param>
      <typeparam name="T">The type returned by the query</typeparam>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.DataNamespace">
      <summary>Gets or sets the XML namespace for data items, not metadata items, of an Atom payload.</summary>
      <returns>A string representing the XML namespace for data items of a payload in the ATOM format.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.DeleteLink(System.Object,System.String,System.Object)">
      <summary>Changes the state of the link to Deleted in the list of links being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <param name="source">The source object in the link to be marked for deletion.</param>
      <param name="sourceProperty">The name of the property on the source object that represents the source in the link between the source and the target.</param>
      <param name="target">The target object involved in the link that is bound to the source object. The target object must be of the type identified by the source property or a subtype.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty" /> or <paramref name="target" /> are null.</exception>
      <exception cref="T:System.InvalidOperationException">When the source or target objects are in an <see cref="F:System.Data.Services.Client.EntityStates.Added" /> or <see cref="F:System.Data.Services.Client.EntityStates.Detached" /> state.-or-When <paramref name="sourceProperty" /> is not property that returns a collection.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.DeleteObject(System.Object)">
      <summary>Changes the state of the specified object to Deleted in the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <param name="entity">The tracked entity to be changed to the <see cref="F:System.Data.Services.Client.EntityStates.Deleted" /> state.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When <paramref name="entity" /> is not being tracked by the context.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.Detach(System.Object)">
      <summary>Removes the entity from the list of entities that the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is tracking.</summary>
      <returns>Returns true if the specified entity was detached; otherwise false.</returns>
      <param name="entity">The tracked entity to be detached from the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.DetachLink(System.Object,System.String,System.Object)">
      <summary>Removes the specified link from the list of links being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <returns>Returns true if the specified entity was detached; otherwise false.</returns>
      <param name="source">The source object participating in the link to be marked for deletion.</param>
      <param name="sourceProperty">The name of the property on the source object that represents the source in the link between the source and the target.</param>
      <param name="target">The target object involved in the link that is bound to the source object. The target object must be of the type identified by the source property or a subtype.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" /> or <paramref name="sourceProperty" /> are null.</exception>
      <exception cref="T:System.ArgumentException">When sourceProperty is empty.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndExecute``1(System.IAsyncResult)">
      <summary>Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object)" />.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> object.</param>
      <typeparam name="TElement">The type returned by the query.</typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="asyncResult" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="asyncResult" /> did not originate from this instance or <see cref="M:System.Data.Services.Client.DataServiceContext.EndExecute``1(System.IAsyncResult)" /> was previously called.</exception>
      <exception cref="T:System.InvalidOperationException">When an error occurrs in the request or when materializing the results of query into objects.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndExecuteBatch(System.IAsyncResult)">
      <summary>Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginExecuteBatch(System.AsyncCallback,System.Object,System.Data.Services.Client.DataServiceRequest[])" />.</summary>
      <returns>The <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object that indicates the result of the batch operation.</returns>
      <param name="asyncResult">An IAsyncResult that represents the status of the asynchronous operation.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndLoadProperty(System.IAsyncResult)">
      <summary>Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.AsyncCallback,System.Object)" /> operation.</summary>
      <param name="asyncResult">An IAsyncResult that represents the status of the asynchronous operation.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndSaveChanges(System.IAsyncResult)">
      <summary>Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" /> operation.</summary>
      <returns>A <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object that indicates the result of the batch operation.</returns>
      <param name="asyncResult">An IAsyncResult that represents the status of the asynchronous operation.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.Entities">
      <summary>Gets a list of all the resources currently being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <returns>A list of all the resources currently being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />. </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.GetMetadataUri">
      <summary>Gets a URI of the location of .edmx metadata.</summary>
      <returns>A URI that identifies the location of the metadata description, in .edmx format, for the data service identified by the base URI that is passed to the constructor.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.IgnoreMissingProperties">
      <summary>Gets or sets whether the properties read from the type must be mapped to properties on the client-side type.</summary>
      <returns>A Boolean value that indicates whether the properties read from the type must be mapped to properties on the client-side type.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.Links">
      <summary>Gets the collection of all associations or links currently being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> object.</summary>
      <returns>A collection of all associations or links currently being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> object.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.MergeOption">
      <summary>Gets or sets the synchronization option for receiving entities from a data service.</summary>
      <returns>One of the members of the <see cref="T:System.Data.Services.Client.MergeOption" /> enumeration.</returns>
    </member>
    <member name="E:System.Data.Services.Client.DataServiceContext.ReadingEntity">
      <summary>Occurs after the entity has been completely read into the target entity.</summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.ResolveName">
      <summary>Gets or sets a function to override the default type resolution strategy used by the client library when sending entities to a data service.</summary>
      <returns>Returns a string that contains the name of the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.ResolveType">
      <summary>Gets or sets a function that is used to override the default type resolution option that is used by the client library when receiving entities from a data service.</summary>
      <returns>A function delegate that identifies an override function that is used to override the default type resolution option that is used by the client library.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.SaveChangesDefaultOptions">
      <summary>Gets or sets the <see cref="T:System.Data.Services.Client.SaveChangesOptions" /> values used by the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" /> method.</summary>
    </member>
    <member name="E:System.Data.Services.Client.DataServiceContext.SendingRequest">
      <summary>Occurs when a new HttpWebRequest has been created.</summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.SetLink(System.Object,System.String,System.Object)">
      <summary>Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> that a new link exists between the objects specified and that the link is represented by the property specified by the <paramref name="sourceProperty" /> parameter.</summary>
      <param name="source">The source object for the new link.</param>
      <param name="sourceProperty">The property on the source object that identifies the target object of the new link.</param>
      <param name="target">The child object involved in the new link that is to be initialized by calling this method. The target object must be a subtype of the type identified by the <paramref name="sourceProperty" /> parameter. If <paramref name="target" /> is set to null, the call represents a delete link operation.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty," /> or <paramref name="target" /> are null.</exception>
      <exception cref="T:System.InvalidOperationException">When the link already exists.-or-When the source or target objects are in a <see cref="F:System.Data.Services.Client.EntityStates.Detached" /> or <see cref="F:System.Data.Services.Client.EntityStates.Deleted" /> state.-or-When <paramref name="sourceProperty" /> is not a property that returns a reference.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.TryGetEntity``1(System.Uri,``0@)">
      <summary>Tests retrieval of an entity being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> by reference to the URI of the entity.</summary>
      <returns>If an entity is found at <paramref name="resourceUri" />, the entity is returned in the out parameter <paramref name="entity" /> and true is returned. If no entity is found, false is returned.</returns>
      <param name="identity">The URI of the tracked entity to be retrieved.</param>
      <param name="entity">The entity to be retrieved.</param>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="identity" /> is null.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.TryGetUri(System.Object,System.Uri@)">
      <summary>Retrieves the canonical URI associated with the specified entity, if available.</summary>
      <returns>Returns true if the canonical URI is returned in the out parameter. If the specified entity is not tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> or is in the added state, no URI is available and false is returned.</returns>
      <param name="entity">The entity identified by the <paramref name="identity" />.</param>
      <param name="identity">The URI of the entity.</param>
      <exception cref="T:System.ArgumentNullException">entity is null</exception>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.TypeScheme">
      <summary>Gets or sets the URI that is used to indicate what type scheme is used by the service.</summary>
      <returns>A <see cref="T:System.Uri" /> object that contains the type scheme.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.UpdateObject(System.Object)">
      <summary>Changes the state of the specified object in the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to <see cref="F:System.Data.Services.Client.EntityStates.Modified" />.</summary>
      <param name="entity">The tracked entity to be assigned to the <see cref="F:System.Data.Services.Client.EntityStates.Modified" />  state.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entity" /> is in a <see cref="F:System.Data.Services.Client.EntityStates.Detached" /> state.</exception>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.UsePostTunneling">
      <summary>Gets or sets a Boolean value that indicates whether to use post tunneling.</summary>
      <returns>A Boolean value that indicates whether to use post tunneling.</returns>
    </member>
    <member name="E:System.Data.Services.Client.DataServiceContext.WritingEntity">
      <summary>Occurs after an entity has been fully serialized into XML (Atom), and allows the developer to change the XML before it is sent.</summary>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceQuery">
      <summary>An abstract class that represents a single query request to a data service. </summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery.Expression">
      <summary>Represents an expression that contains the query to the data service.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.Expression" /> object that represents the query.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery.Provider">
      <summary>Represents the query provider instance.</summary>
      <returns>An <see cref="T:System.Linq.IQueryProvider" /> that represents the data source provider.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets the <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection returned by the query.</summary>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceQuery`1">
      <summary>Represents a single query request to a data service.</summary>
      <typeparam name="TElement">Type of results returned by the query.</typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.AddQueryOption(System.String,System.Object)">
      <summary>Creates a new <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> that includes the query option in the URI that is generated by the returned query.</summary>
      <param name="name">The string value that contains the name of the query string option to add.</param>
      <param name="value">The object that contains the value of the query string option.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.BeginExecute(System.AsyncCallback,System.Object)">
      <summary>Starts an asynchronous network operation that executes the query that is represented by this object instance.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</returns>
      <param name="callback">The delegate to invoke when the operation finishes.</param>
      <param name="state">User-defined object used to transfer state between the start of the operation and the callback defined by <paramref name="callback" />.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.ElementType">
      <summary>Returns the type of the object used in the template to create the DataServiceQuery instance.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that represents the type that is used in the template when the query is created.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.EndExecute(System.IAsyncResult)">
      <summary>Ends an asynchronous query request to a data service.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance that contains the results of the query operation.</returns>
      <param name="asyncResult">The pending asynchronous query request.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.Expand(System.String)">
      <summary>Creates a new <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> that includes the expand option in the URI that is generated by the returned query.</summary>
      <param name="path">A string value that contains the requested URI.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.Expression">
      <summary>Represents an expression that contains the query to the data service.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.Expression" /> object that represents the query.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.Provider">
      <summary>Represents the query provider instance.</summary>
      <returns>A <see cref="T:System.Linq.IQueryProvider" /> representing the data source provider.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.RequestUri">
      <summary>Gets the URI for the query.</summary>
      <returns>A <see cref="T:System.Uri" /> object that contains the URI of the request.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Executes the query and returns the results as a collection.</summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.ToString">
      <summary>Represents the URI of the query to the data service.</summary>
      <returns>A URI as a string that represents the query to the data service for this DataServiceQuery instance.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceQueryException">
      <summary>Exception that indicates an error occurred while loading the property value from the data service. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class by using a system-supplied message that describes the error. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class by using a specified message that describes the error. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class by using a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String,System.Exception,System.Data.Services.Client.QueryOperationResponse)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class. </summary>
      <param name="message">The string value that contains the error message.</param>
      <param name="innerException">The inner exception object.</param>
      <param name="response">The <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> object.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQueryException.Response">
      <summary>Gets the <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> that indicates the exception results.</summary>
      <returns>A <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> object that indicates the exception results.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceRequest">
      <summary>Represents request objects that are submitted as a batch to the data service.</summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest.ElementType">
      <summary>Gets the type of object submitted as a batch to the data service.</summary>
      <returns>Type object.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest.RequestUri">
      <summary>Gets the URI of the request object submitted to a data service.</summary>
      <returns>URI of the request object.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequest.ToString">
      <summary>Represents the URI of the query to the data service. </summary>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceRequest`1">
      <summary>Represents request objects submitted as a batch to the data service. </summary>
      <typeparam name="TElement">Represents the type of objects submitted to the data service.</typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequest`1.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequest`1" /> class. </summary>
      <param name="requestUri">The URI object that contains the request string.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest`1.ElementType">
      <summary>Gets the type of the object used to create the <see cref="T:System.Data.Services.Client.DataServiceRequest`1" /> instance.</summary>
      <returns>A <see cref="T:System.Type" /> value that indicates the type of data returned.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest`1.RequestUri">
      <summary>Gets the URI object that contains the request string.</summary>
      <returns>A <see cref="T:System.Uri" /> object that contains the request string.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceRequestException">
      <summary>Represents the error thrown if the data service returns a response code less than 200 or greater than 299 or if the top-level element in the response is &lt;error&gt;. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class by using a system-supplied message that describes the error. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class by using a specified message that describes the error. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture.The error message text.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class by using a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String,System.Exception,System.Data.Services.Client.DataServiceResponse)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class. </summary>
      <param name="message">Error message text.</param>
      <param name="innerException">Exception object that contains the inner exception.</param>
      <param name="response">
        <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequestException.Response">
      <summary>Gets the response as a <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object.</summary>
      <returns>A <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceResponse">
      <summary>Represents the response to operations that were sent to the data service by calling <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" />.</summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceResponse.BatchHeaders">
      <summary>The headers from an HTTP response associated with a batch request.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> object that contains the name-value pairs of an HTTP response.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceResponse.BatchStatusCode">
      <summary>The status code from an HTTP response associated with a batch request.</summary>
      <returns>An integer based on status codes defined in Hypertext Transfer Protocol.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceResponse.GetEnumerator">
      <summary>Gets an enumerator that enables retrieval of responses to operations being tracked by <see cref="T:System.Data.Services.Client.OperationResponse" /> objects within the <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceResponse.IsBatchResponse">
      <summary>Gets a Boolean value that indicates whether the response contains multiple results.</summary>
      <returns>A Boolean value that indicates whether the response contains multiple results.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceResponse.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an enumerator that enables retrieval of responses to operations being tracked by <see cref="T:System.Data.Services.Client.OperationResponse" /> objects within the <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
    </member>
    <member name="T:System.Data.Services.Client.Descriptor">
      <summary>Abstract class from which <see cref="T:System.Data.Services.Client.EntityDescriptor" /> is derived.</summary>
    </member>
    <member name="P:System.Data.Services.Client.Descriptor.State">
      <summary>When overridden in a derived class, gets the state of the object at the time this instance was constructed.</summary>
      <returns>The <see cref="T:System.Data.Services.Client.EntityStates" /> of the object returned at the time this instance was constructed. </returns>
    </member>
    <member name="T:System.Data.Services.Client.EntityDescriptor">
      <summary>Description of modifications done to entities by operations returned in a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.Entity">
      <summary>Gets the entity that contains the update data.</summary>
      <returns>An object that contains update data.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.ETag">
      <summary>Gets an eTag value that indicates the state of data targeted for update since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" />.</summary>
      <returns>A string value that indicates the state of data.</returns>
    </member>
    <member name="T:System.Data.Services.Client.EntityStates">
      <summary>Represents the enumeration that identifies the state of an entity being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />. </summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Detached">
      <summary>The entity was detached since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" />.</summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Unchanged">
      <summary>The entity is unchanged since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" />.</summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Added">
      <summary>The entity was added since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" />.</summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Deleted">
      <summary>The entity was deleted since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" />.</summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Modified">
      <summary>The entity was modified since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" />.</summary>
    </member>
    <member name="T:System.Data.Services.Client.LinkDescriptor">
      <summary>Provides a description of modifications that were made to links by operations returned in a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
    </member>
    <member name="P:System.Data.Services.Client.LinkDescriptor.Source">
      <summary>A source entity in a link returned by a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
      <returns>
        <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Data.Services.Client.LinkDescriptor.SourceProperty">
      <summary>The identifier property of the source entity in a link returned by a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
      <returns>The string identifier of an identity property in a source entity.</returns>
    </member>
    <member name="P:System.Data.Services.Client.LinkDescriptor.Target">
      <summary>The source entity in a link returned by a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
      <returns>
        <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Data.Services.Client.MediaEntryAttribute">
      <summary>Signifies that the specified class is to be treated as a media link entry.</summary>
    </member>
    <member name="M:System.Data.Services.Client.MediaEntryAttribute.#ctor(System.String)">
      <summary>Creates a new instance of <see cref="T:System.Data.Services.Client.MediaEntryAttribute" />.</summary>
      <param name="mediaMemberName">A string value that identifies the property that holds media data.</param>
    </member>
    <member name="P:System.Data.Services.Client.MediaEntryAttribute.MediaMemberName">
      <summary>The name of the property on the class that holds the media, usually binary data.</summary>
      <returns>A string value that identifies the property that holds media data.</returns>
    </member>
    <member name="T:System.Data.Services.Client.MergeOption">
      <summary>Determines the synchronization option for sending or receiving entities to or from a data service. </summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.AppendOnly">
      <summary>Append new entities only. Existing entities or their original values will not be modified. No client-side changes are lost in this merge. This is the default behavior.</summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.OverwriteChanges">
      <summary>All current values on the client are overwritten with current values from the data service regardless of whether they have been changed on the client. </summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.PreserveChanges">
      <summary>Current values that have been changed on the client are not modified, but any unchanged values are updated with current values from the data service. No client-side changes are lost in this merge.</summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.NoTracking">
      <summary>Objects are always loaded from the data source. Any property changes made to objects in the object context are overwritten by the data source values.</summary>
    </member>
    <member name="T:System.Data.Services.Client.MimeTypePropertyAttribute">
      <summary>Annotates a property on a class that was annotated with the <see cref="T:System.Data.Services.Client.MediaEntryAttribute" />.</summary>
    </member>
    <member name="M:System.Data.Services.Client.MimeTypePropertyAttribute.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the MimeTypePropertyAttribute.</summary>
      <param name="dataPropertyName">A string that contains the name of the new property attribute.</param>
      <param name="mimeTypePropertyName">A string that contains the Mime type of the new property attribute.</param>
    </member>
    <member name="P:System.Data.Services.Client.MimeTypePropertyAttribute.DataPropertyName">
      <summary>Gets the name of the MimeTypePropertyAttribute.</summary>
      <returns>A string that contains the name of the property attribute. </returns>
    </member>
    <member name="P:System.Data.Services.Client.MimeTypePropertyAttribute.MimeTypePropertyName">
      <summary>Gets the Mime type of the MimeTypePropertyAttribute</summary>
      <returns>A string that contains the Mime type of the property attribute.</returns>
    </member>
    <member name="T:System.Data.Services.Client.OperationResponse">
      <summary>Abstract class that represents the response of a single query or create, update, or delete operation. </summary>
    </member>
    <member name="P:System.Data.Services.Client.OperationResponse.Error">
      <summary>Gets error thrown by the operation.</summary>
      <returns>An <see cref="T:System.Exception" /> object that contains the error.</returns>
    </member>
    <member name="P:System.Data.Services.Client.OperationResponse.Headers">
      <summary>When overridden in a derived class, contains the HTTP response headers associated with a single operation.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> object that contains name value pairs of headers and values.</returns>
    </member>
    <member name="P:System.Data.Services.Client.OperationResponse.StatusCode">
      <summary>When overridden in a derived class, gets or sets the HTTP response code associated with a single operation.</summary>
      <returns>Integer value that contains response code.</returns>
    </member>
    <member name="T:System.Data.Services.Client.QueryOperationResponse">
      <summary>Represents the responses to a <see cref="T:System.Data.Services.Client.DataServiceQuery" />.</summary>
    </member>
    <member name="M:System.Data.Services.Client.QueryOperationResponse.GetEnumerator">
      <summary>Executes the <see cref="T:System.Data.Services.Client.DataServiceQuery" /> and gets <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> items. </summary>
      <returns>The enumerator to a collection of <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> items.</returns>
    </member>
    <member name="P:System.Data.Services.Client.QueryOperationResponse.Query">
      <summary>Gets the <see cref="T:System.Data.Services.Client.DataServiceQuery" /> that generates the <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> items. </summary>
      <returns>A <see cref="T:System.Data.Services.Client.DataServiceQuery" /> object.</returns>
    </member>
    <member name="T:System.Data.Services.Client.QueryOperationResponse`1">
      <summary>Represents the responses to a <see cref="T:System.Data.Services.Client.DataServiceQuery`1" />.</summary>
      <typeparam name="T">The type of the response.</typeparam>
    </member>
    <member name="M:System.Data.Services.Client.QueryOperationResponse`1.GetEnumerator">
      <summary>Executes the <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> and gets <see cref="T:System.Data.Services.Client.QueryOperationResponse`1" /> items.</summary>
      <returns>An enumerator to a collection of <see cref="T:System.Data.Services.Client.QueryOperationResponse`1" /> items.</returns>
    </member>
    <member name="T:System.Data.Services.Client.ReadingWritingEntityEventArgs">
      <summary>Gives access to the entity and an XLinq object that represents an Atom entry. <see cref="T:System.Data.Services.Client.ReadingWritingEntityEventArgs" /> is used with the <see cref="E:System.Data.Services.Client.DataServiceContext.ReadingEntity" /> and <see cref="E:System.Data.Services.Client.DataServiceContext.WritingEntity" /> events. </summary>
    </member>
    <member name="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Data">
      <summary>Gets an XML Atom entry or feed data represented as <see cref="T:System.Xml.Linq.XElement" />.</summary>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" />
      </returns>
    </member>
    <member name="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Entity">
      <summary>Gets the object representation of data returned from the <see cref="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Data" /> property. </summary>
      <returns>
        <see cref="T:System.Object" /> representation of <see cref="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Data" /> property.</returns>
    </member>
    <member name="T:System.Data.Services.Client.SaveChangesOptions">
      <summary>Indicates change options when <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" /> is called. </summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.None">
      <summary>Pending changes are saved using multiple requests to the server, but the operation stops on the first failure (default).</summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.Batch">
      <summary>All pending changes are saved in a single batch request.</summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.ContinueOnError">
      <summary>Pending changes are saved using multiple requests to the server, and the operation continues after an error occurs</summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.ReplaceOnUpdate">
      <summary>Pending updates are made by replacing all values of the entity in the data source with values from the updated entity.</summary>
    </member>
    <member name="T:System.Data.Services.Client.SendingRequestEventArgs">
      <summary>Used with the <see cref="E:System.Data.Services.Client.DataServiceContext.SendingRequest" /> event to provide access to the <see cref="T:System.Net.HttpWebRequest" /> instance that the client is about to send to the target data service.</summary>
    </member>
    <member name="P:System.Data.Services.Client.SendingRequestEventArgs.RequestHeaders">
      <summary>Represents the text of the headers of the <see cref="T:System.Net.HttpWebRequest" /> instance that the client is about to send to the target data service.</summary>
      <returns>A string value that contains the headers.</returns>
    </member>
    <member name="T:System.Data.Services.Common.DataServiceKeyAttribute">
      <summary>Indicates the key property or properties of an entity.</summary>
    </member>
    <member name="M:System.Data.Services.Common.DataServiceKeyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Common.DataServiceKeyAttribute" /> class. </summary>
      <param name="keyName">The string that contains the name of the key attribute.</param>
    </member>
    <member name="M:System.Data.Services.Common.DataServiceKeyAttribute.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Common.DataServiceKeyAttribute" /> class. </summary>
      <param name="keyNames">An array of string values that contain key attribute names.</param>
    </member>
    <member name="P:System.Data.Services.Common.DataServiceKeyAttribute.KeyNames">
      <summary>Gets the names of the key attributes.</summary>
      <returns>String value that contains names of key attributes.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\system.json.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Json</name>
  </assembly>
  <members>
    <member name="T:System.Json.JsonArray">
      <summary>A <see cref="T:System.Json.JsonArray" /> is an ordered sequence of zero or more <see cref="T:System.Json.JsonValue" /> objects.</summary>
    </member>
    <member name="M:System.Json.JsonArray.#ctor(System.Collections.Generic.IEnumerable{System.Json.JsonValue})">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonArray" /> class initialized by an <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumeration of objects of type <see cref="T:System.Json.JsonValue" />.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumeration of objects of type <see cref="T:System.Json.JsonValue" /> used to initialize the JavaScript Object Notation (JSON) array.</param>
    </member>
    <member name="M:System.Json.JsonArray.#ctor(System.Json.JsonValue[])">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonArray" /> class, initialized by an array of type <see cref="T:System.Json.JsonValue" />.</summary>
      <param name="items">The array of type <see cref="T:System.Json.JsonValue" /> used to initialize the JavaScript Object Notation (JSON) array.</param>
    </member>
    <member name="M:System.Json.JsonArray.Add(System.Json.JsonValue)">
      <summary>Adds a <see cref="T:System.Json.JsonValue" /> object to the end of the array.</summary>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> object to add.</param>
    </member>
    <member name="M:System.Json.JsonArray.AddRange(System.Collections.Generic.IEnumerable{System.Json.JsonValue})">
      <summary>Adds the elements from a collection of type <see cref="T:System.Json.JsonValue" /> to the <see cref="T:System.Json.Array" />.</summary>
      <param name="items">Collection of types to add.</param>
    </member>
    <member name="M:System.Json.JsonArray.AddRange(System.Json.JsonValue[])">
      <summary>Adds the elements from an array of type <see cref="T:System.Json.JsonValue" /> to the <see cref="T:System.Json.Array" />.</summary>
      <param name="items">The array of type <see cref="T:System.Json.JsonValue" /> to be added to the <see cref="T:System.Json.Array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonArray.Clear">
      <summary>Removes all JSON CLR types from the <see cref="T:System.Json.JsonArray" />.</summary>
    </member>
    <member name="M:System.Json.JsonArray.Contains(System.Json.JsonValue)">
      <summary>Checks whether a specified JSON CLR type is in the <see cref="T:System.Json.JsonArray" />.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Json.JsonArray" />; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> to check for in the array. </param>
    </member>
    <member name="M:System.Json.JsonArray.CopyTo(System.Json.JsonValue[],System.Int32)">
      <summary>Copies the contents of the current JSON CLR array instance into a specified destination array beginning at the specified index.</summary>
      <param name="array">The destination <see cref="T:System.Json.JsonArray" /> to which the elements of the current <see cref="T:System.Json.JsonArray" /> object are copied</param>
      <param name="arrayIndex">The zero-based index in the destination array at which the copying of the elements of the JSON CLR array begins.</param>
    </member>
    <member name="P:System.Json.JsonArray.Count">
      <summary>Returns the number of <see cref="T:System.Json.JsonValue" /> elements in the array.</summary>
      <returns>The number of <see cref="T:System.Json.JsonValue" /> objects in the <see cref="T:System.Json.JsonArray" />.
</returns>
    </member>
    <member name="M:System.Json.JsonArray.IndexOf(System.Json.JsonValue)">
      <summary>Searches for a specified object and returns the zero-based index of its first occurrence within the <see cref="T:System.Json.JsonArray" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the <see cref="T:System.Json.JsonArray" />, if found; otherwise, –1.</returns>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> object to look up. </param>
    </member>
    <member name="M:System.Json.JsonArray.Insert(System.Int32,System.Json.JsonValue)">
      <summary>Insert a JSON CLR type into the array at a specified index.</summary>
      <param name="index">The zero-based index at which the item should be inserted.</param>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="items" /> is less than zero or larger than the size of the array.</exception>
    </member>
    <member name="P:System.Json.JsonArray.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Json.JsonArray" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Json.JsonArray" />is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Json.JsonArray.Item(System.Int32)">
      <summary>Gets or sets the JSON value at a specified index.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index for the array.</exception>
      <exception cref="T:System.ArgumentException">The property is set and the <paramref name="value" /> is of a type that is not assignable to the array.</exception>
    </member>
    <member name="P:System.Json.JsonArray.JsonType">
      <summary>Gets the JSON type of the <see cref="T:System.Json.JsonArray" />.</summary>
      <returns>Returns <see cref="F:System.Json.JsonType.Array" />.</returns>
    </member>
    <member name="M:System.Json.JsonArray.Remove(System.Json.JsonValue)">
      <summary>Removes the first occurrence of the specified JSON value from the array.</summary>
      <returns>true if <paramref name="item" /> is successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the <see cref="T:System.Json.JsonArray" />.</returns>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> to remove from the <see cref="T:System.Json.JsonArray" />.</param>
    </member>
    <member name="M:System.Json.JsonArray.RemoveAt(System.Int32)">
      <summary>Remove the JSON value at a specified index of <see cref="T:System.Json.JsonArray" />.</summary>
      <param name="index">The zero-based index at which to remove the <see cref="T:System.Json.JsonValue" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or <paramref name="index" /> is equal or larger than the size of the array.</exception>
    </member>
    <member name="M:System.Json.JsonArray.Save(System.IO.Stream)">
      <summary>Serializes a JSON CLR array type into a stream of text-based JSON.</summary>
      <param name="stream">The stream to which the text-based JSON is written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonArray.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:System.Json.JsonArray.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Json.JsonValue" /> objects in the array.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> object that iterates through the <see cref="T:System.Json.JsonValue" /> elements in the <see cref="T:System.Json.JsonArray" />.
</returns>
    </member>
    <member name="T:System.Json.JsonObject">
      <summary>A <see cref="T:System.Json.JsonObject" /> is an unordered collection of zero or more key/value pairs.</summary>
    </member>
    <member name="M:System.Json.JsonObject.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}})">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonObject" /> class initialized with a <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of key/value pairs.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> used to initialize the key/value pairs</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[])">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonObject" /> class initialized with a collection of key/value pairs.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> object used to initialize the key/value pairs.</param>
    </member>
    <member name="M:System.Json.JsonObject.#ctor(System.DateTimeOffset)">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonObject" /> class initialized with a <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="dto">The <see cref="T:System.DateTimeOffset" /> used to initialize the object.</param>
    </member>
    <member name="M:System.Json.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue})">
      <summary>Adds a key/value pair to the JSON CLR object.</summary>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to add.</param>
    </member>
    <member name="M:System.Json.JsonObject.Add(System.String,System.Json.JsonValue)">
      <summary>Adds a key/value pair to the JSON CLR object type.</summary>
      <param name="key">The key for the element added.</param>
      <param name="value">The <see cref="T:System.Json.JsonValue" /> for the element added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}})">
      <summary>Adds a specified collection of key/value pairs to the current instance of the <see cref="T:System.Json.JsonObject" />.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of key/value pairs to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.AddRange(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[])">
      <summary>Adds a specified array of key/value pairs to the current instance of <see cref="T:System.Json.JsonObject" />.</summary>
      <param name="items">Collection of key/value pairs.</param>
    </member>
    <member name="M:System.Json.JsonObject.Clear">
      <summary>Removes all key/value pairs from the JSON CLR object.</summary>
    </member>
    <member name="M:System.Json.JsonObject.ContainsKey(System.String)">
      <summary>Checks whether a key/value pair with a specified key exists in the JSON CLR object type.</summary>
      <returns>true if the JSON CLR object contains the <paramref name="key" />; otherwise, false.
</returns>
      <param name="key">The key to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[],System.Int32)">
      <summary>Copies the contents of the JSON CLR object into a specified key/value destination array beginning at a specified index.</summary>
      <param name="array">The destination array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to which the elements of the <see cref="T:System.Json.JsonObject" /> are copied</param>
      <param name="arrayIndex">The zero-based index at which to begin the insertion of the contents from the JSON CLR object type.</param>
    </member>
    <member name="P:System.Json.JsonObject.Count">
      <summary>Returns the number of key/value pairs in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>The number of key/value pairs in the JSON CLR object.</returns>
    </member>
    <member name="M:System.Json.JsonObject.GetEnumerator">
      <summary>Returns an enumerator over the key/value pairs contained in the JSON CLR object type.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="P:System.Json.JsonObject.Item(System.String)">
      <summary>Gets or sets an indexer used to look up a key/value pair based on a specified key.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> that contains the key/value pair looked up.</returns>
      <param name="key">The key of the pair to look up.</param>
    </member>
    <member name="P:System.Json.JsonObject.JsonType">
      <summary>Gets the JSON type of the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>Returns <see cref="F:System.Json.JsonType.Object" />.</returns>
    </member>
    <member name="P:System.Json.JsonObject.Keys">
      <summary>Returns a collection that contains the keys in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the keys from the JSON CLR object.</returns>
    </member>
    <member name="M:System.Json.JsonObject.Remove(System.String)">
      <summary>Removes the key/value pair with a specified key from the JSON CLR object type.</summary>
      <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if <paramref name="key" /> is not found in the JSON CLR object.</returns>
      <param name="key">The key of the item to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.Save(System.IO.Stream)">
      <summary>Serializes a JSON CLR object into text-based JSON.</summary>
      <param name="stream">The stream to which the text-based JSON is written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue})"></member>
    <member name="P:System.Json.JsonObject.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:System.Json.JsonObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue})"></member>
    <member name="M:System.Json.JsonObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the key/value pairs in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>
an <see cref="T:System.Collections.IEnumerator" /> object that iterates through the key/value pairs in the <see cref="T:System.Json.JsonObject" />.
</returns>
    </member>
    <member name="M:System.Json.JsonObject.TryGetValue(System.String,System.Json.JsonValue@)">
      <summary>Attempts to get the value that corresponds to the specified key.</summary>
      <returns>true if the instance of the <see cref="T:System.Json.JsonObject" /> contains an element with the specified <paramref name="key" />; otherwise, false.</returns>
      <param name="key">The key of the value to retrieve.</param>
      <param name="value">The primitive or structured <see cref="T:System.Json.JsonValue" /> object that has the <paramref name="key" /> specified. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Json.JsonObject.Values">
      <summary>Returns a collection that contains the values in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the set of <see cref="T:System.Json.JsonValues" /> from the JSON CLR object.</returns>
    </member>
    <member name="T:System.Json.JsonPrimitive">
      <summary>Represents a JavaScript Object Notation (JSON) primitive type in the common language runtime (CLR).</summary>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Boolean)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Boolean" /> type.</summary>
      <param name="value">The <see cref="T:System.Boolean" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Byte)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Byte" /> type.</summary>
      <param name="value">The <see cref="T:System.Byte" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Char)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Char" /> type.</summary>
      <param name="value">The <see cref="T:System.Char" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.DateTime)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.DateTime" /> type.</summary>
      <param name="value">The <see cref="T:System.DateTime" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Decimal)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Decimal" /> type.</summary>
      <param name="value">The <see cref="T:System.Decimal" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Double)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Double" /> type.</summary>
      <param name="value">The <see cref="T:System.Double" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Guid)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Guid" /> type.</summary>
      <param name="value">The <see cref="T:System.Guid" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Int16)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Int16" /> type.</summary>
      <param name="value">The <see cref="T:System.Int16" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Int32)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Int32" /> type.</summary>
      <param name="value">The <see cref="T:System.Int32" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Int64)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Int64" /> type.</summary>
      <param name="value">The <see cref="T:System.Int64" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.SByte)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.SByte" /> type.</summary>
      <param name="value">The <see cref="T:System.SByte" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Single)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Single" /> type.</summary>
      <param name="value">The <see cref="T:System.Single" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.String)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.String" /> type.</summary>
      <param name="value">The <see cref="T:System.String" /> object that initializes the new instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.TimeSpan" /> type.</summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt16)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.UInt16" /> type.</summary>
      <param name="value">The <see cref="T:System.UInt16" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt32)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.UInt32" /> type.</summary>
      <param name="value">The <see cref="T:System.UInt32" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt64)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.UInt64" /> type.</summary>
      <param name="value">The <see cref="T:System.UInt64" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Uri)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Uri" /> type.</summary>
      <param name="value">The <see cref="T:System.Uri" /> object that initializes the new instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Json.JsonPrimitive.JsonType">
      <summary>Gets the <see cref="T:System.JsonType" /> that is associated with this <see cref="T:System.Json.JsonPrimitive" /> object.</summary>
      <returns>Each <see cref="T:System.Json.JsonPrimitive" /> object is associated with a <see cref="T:System.JsonType" /> that is determined by the type of common language runtime (CLR) object used to initiate it.
</returns>
    </member>
    <member name="M:System.Json.JsonPrimitive.Save(System.IO.Stream)">
      <summary>Serializes the <see cref="T:System.Json.JsonPrimitive" /> object into text-based JSON.</summary>
      <param name="stream">The stream to which the text-based JSON is written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="T:System.Json.JsonType">
      <summary>An enumeration that specifies primitive and structured JavaScript Object Notation (JSON) common language runtime (CLR) types.</summary>
    </member>
    <member name="F:System.Json.JsonType.String">
      <summary>Specifies the JSON string CLR type.</summary>
    </member>
    <member name="F:System.Json.JsonType.Number">
      <summary>Specifies the JSON number CLR type.</summary>
    </member>
    <member name="F:System.Json.JsonType.Object">
      <summary>Specifies the JSON object CLR type that consists of an unordered collection of key/value pairs, where the key is of type <see cref="T:System.String" /> and the value is of type <see cref="T:System.Json.JsonValue" />, which can, in turn, be either a primitive or a structured JSON type. </summary>
    </member>
    <member name="F:System.Json.JsonType.Array">
      <summary>Specifies the JSON array CLR type that consists of an ordered collection of <see cref="T:System.Json.JsonValue" /> types, which can, in turn, be either primitive or structured JSON types.</summary>
    </member>
    <member name="F:System.Json.JsonType.Boolean">
      <summary>Specifies the JSON Boolean CLR type.</summary>
    </member>
    <member name="T:System.Json.JsonValue">
      <summary>This is the abstract base class for JavaScript Object Notation (JSON) common language runtime (CLR) types. </summary>
    </member>
    <member name="M:System.Json.JsonValue.ContainsKey(System.String)">
      <summary>Throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="key">The key to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Json.JsonValue.Count">
      <summary>This method is not supported and throws an exception when called.</summary>
      <returns>
Returns <see cref="T:System.Int32" />. 
</returns>
    </member>
    <member name="P:System.Json.JsonValue.Item(System.Int32)">
      <summary>This indexer is not supported for this base class and throws an exception.</summary>
      <returns>
A <see cref="T:System.Json.JsonValue" />.
</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="P:System.Json.JsonValue.Item(System.String)">
      <summary>This indexer is not supported for this base class and throws an exception.</summary>
      <returns>
Returns <see cref="T:System.Json.JsonValue" />.
</returns>
      <param name="key">The key of the element to get or set.</param>
    </member>
    <member name="P:System.Json.JsonValue.JsonType">
      <summary>When implemented in a derived class, indicates the JSON CLR type represented by the derived type.</summary>
      <returns>
Returns <see cref="T:System.Json.JsonType" /> .
</returns>
    </member>
    <member name="M:System.Json.JsonValue.Load(System.IO.Stream)">
      <summary>Deserializes text-based JSON from a stream into a JSON CLR type.</summary>
      <returns>
Returns a class derived from <see cref="T:System.Json.JsonValue" /> that contains the deserialized text-based JSON.</returns>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains text-based JSON content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.Load(System.IO.TextReader)">
      <summary>Deserializes text-based JSON from a text reader into a JSON CLR type.</summary>
      <returns>
Returns a class derived from <see cref="T:System.Json.JsonValue" /> that contains the deserialized text-based JSON.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> over text-based JSON content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Boolean)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Boolean" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Boolean" /> specified.</returns>
      <param name="value">The <see cref="T:System.Boolean" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Byte)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System. Byte" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System. Byte" /> specified.
</returns>
      <param name="value">The <see cref="T:System.Byte" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Char)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Char" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System. Char" /> specified.
</returns>
      <param name="value">The <see cref="T:System.Char" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.DateTime)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.DateTime" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.DateTime" /> specified.</returns>
      <param name="value">The <see cref="T:System.DateTime" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.DateTimeOffset)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.JsonObject" />.</summary>
      <returns>The <see cref="T:System.Json.JsonObject" /> initialized with the <see cref="T:System.DateTimeOffset" /> specified.</returns>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> instance used to initialize the <see cref="T:System.JsonObject" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Decimal)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Decimal" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Decimal" /> specified.</returns>
      <param name="value">The <see cref="T:System.Decimal" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Double)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Double" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Double" /> specified.</returns>
      <param name="value">The <see cref="T:System.Double" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Guid)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Guid" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Guid" /> specified.</returns>
      <param name="value">The <see cref="T:System.Guid" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Int16)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Int16" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Int16" /> specified.</returns>
      <param name="value">The <see cref="T:System.Int16" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Int32)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Int32" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Int32" /> specified.</returns>
      <param name="value">The <see cref="T:System.Int32" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Int64)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Int64" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Int64" /> specified.</returns>
      <param name="value">The <see cref="T:System.Int64" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.DateTime">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Datetime" /> object.</summary>
      <returns>The <see cref="T:System.DateTime" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.DateTime" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.TimeSpan">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.TimeSpan" /> object.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.TimeSpan" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.TimeSpan" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Boolean">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Boolean" /> object.</summary>
      <returns>The <see cref="T:System.Boolean" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Boolean" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Boolean" /> and so cannot be cast to <see cref="T:System.Boolean" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Char">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Char" /> object.</summary>
      <returns>The <see cref="T:System.Char" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Char" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.Boolean" />, or there is not exactly one character in the <paramref name="value" /> parameter.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Int64">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Int64" /> object.</summary>
      <returns>The <see cref="T:System.Int64" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Int64" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Int64" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Decimal">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The <see cref="T:System.Decimal" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Decimal" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Int32">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Int32" /> object.</summary>
      <returns>The <see cref="T:System.Int32" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Int32" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.UInt64">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.UInt64" /> object.</summary>
      <returns>The <see cref="T:System.UInt64" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.UInt64" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.UInt64" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.String">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.String" /> object.</summary>
      <returns>The <see cref="T:System.String" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified or null if <paramref name="value" /> is null.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.String" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.String" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.DateTimeOffset">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.DateTimeOffset" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Object" /> and the object does not contain two fields that are called “DateTime” and “OffsetMinutes”. </exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Single">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Single" /> object.</summary>
      <returns>The <see cref="T:System.Single" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Single" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Single" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Double">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Double" /> object.</summary>
      <returns>The <see cref="T:System.Double" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Double" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.SByte">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.SByte" /> object.</summary>
      <returns>The <see cref="T:System.SByte" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.SByte" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.SByte" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Byte">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Byte" /> object.</summary>
      <returns>The <see cref="T:System.Byte" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Byte" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Byte" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Uri">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Uri" /> object.</summary>
      <returns>The <see cref="T:System.Uri" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified, or null if <paramref name="value" /> is null.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Uri" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.Uri" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.UInt16">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.UInt16" /> object.</summary>
      <returns>The <see cref="T:System.UInt16" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.UInt16" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.UInt16" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.UInt32">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.UInt32" /> object.</summary>
      <returns>The <see cref="T:System.UInt32" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.UInt32" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.UInt32" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Int16">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Int16" /> object.</summary>
      <returns>The <see cref="T:System.Int16" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Int16" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Int16" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Guid">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Guid" /> object.</summary>
      <returns>The <see cref="T:System.Guid" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Guid" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.SByte)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.SByte" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.SByte" /> specified.</returns>
      <param name="value">The <see cref="T:System.SByte" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Single)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Single" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Single" /> specified.</returns>
      <param name="value">The <see cref="T:System.Single" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.String)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.String" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.String" /> specified, or null if <paramref name="value" /> is null.</returns>
      <param name="value">The <see cref="T:System.String" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.TimeSpan)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Timespan" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Timespan" /> specified.</returns>
      <param name="value">The <see cref="T:System.Timespan" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.UInt16)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.UInt16" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.UInt16" /> specified.</returns>
      <param name="value">The <see cref="T:System.UInt16" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.UInt32)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.UInt32" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.UInt32" /> specified.</returns>
      <param name="value">The <see cref="T:System.UInt32" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.UInt64)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.UInt64" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.UInt64" /> specified.</returns>
      <param name="value">The <see cref="T:System.UInt64" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Uri)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Uri" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Uri" /> specified, or null if <paramref name="value" /> is null.</returns>
      <param name="value">The <see cref="T:System.Uri" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.Parse(System.String)">
      <summary>Deserializes text-based JSON into a JSON CLR type.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> object that represents the parsed text-based JSON as a CLR type. </returns>
      <param name="jsonString">The text-based JSON to be parsed into a JSON CLR type.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="jsonString" /> is zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="jsonString" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.Save(System.IO.Stream)">
      <summary>When implemented in a derived class, serializes the <see cref="T:System.Json.JsonValue" /> CLR type into text-based JSON using a stream.</summary>
      <param name="stream">Stream to which to write text-based JSON.</param>
    </member>
    <member name="M:System.Json.JsonValue.Save(System.IO.TextWriter)">
      <summary>Serializes the <see cref="T:System.Json.JsonValue" /> CLR type into text-based JSON using a text writer.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write text-based JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.System#Collections#IEnumerable#GetEnumerator">
      <summary>This method is not supported for this base class and throws an exception. </summary>
      <returns>
An <see cref="T:System.Collections.IEnumerator" />.
</returns>
    </member>
    <member name="M:System.Json.JsonValue.ToString">
      <summary>Saves (serializes) this JSON CLR type into text-based JSON.</summary>
      <returns>
Returns <see cref="T:System.String" />, which contains text-based JSON.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Runtime.Serialization.Json.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Serialization.Json</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
      <summary>Produces instances of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset, and produces instances of <see cref="T:System.Xml.XmlDictionaryWriter" /> that can map an XML Infoset to JSON and write JSON-encoded data to a stream. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map a buffer encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JSON.</returns>
      <param name="buffer">The input <see cref="T:System.Byte" /> buffer array from which to read.</param>
      <param name="offset">Starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">Number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> must be set to <see cref="P:System.Xml.XmlDictionaryReaderQuotas.Max" /> in Silverlight version 3 applications.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is negative or exceeds the <paramref name="buffer" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative or exceeds the <paramref name="buffer" /> length minus the <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map a specified buffer encoded with JavaScript Object Notation (JSON) to an XML Infoset.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> that can process JavaScript Object Notation (JSON) data from the buffer specified.</returns>
      <param name="buffer">The input <see cref="T:System.Byte" /> buffer array from which to read.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> must be set to <see cref="P:System.Xml.XmlDictionaryReaderQuotas.Max" /> in Silverlight version 3 applications used to prevent Denial of Service (DoS) attacks when reading untrusted data. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map a specified stream encoded with JavaScript Object Notation (JSON) to an XML Infoset.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JSON.</returns>
      <param name="stream">The input <see cref="T:System.IO.Stream" /> from which to read.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> must be set to <see cref="P:System.Xml.XmlDictionaryReaderQuotas.Max" /> in Silverlight version 3 applications. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream using a UTF-8 character encoding.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream from an XML Infoset.</returns>
      <param name="stream">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character encoding.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream from an XML Infoset.</returns>
      <param name="stream">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer. The default encoding is UTF-8.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character encoding and that specifies whether the output stream is closed by the writer when it is done.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream from an XML Infoset.</returns>
      <param name="stream">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer. The default encoding is UTF-8.</param>
      <param name="ownsStream">If true, the output stream is closed by the writer when done; otherwise, false. The default value is true.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.ServiceModel.PollingDuplex.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.ServiceModel.PollingDuplex</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.ServiceModel.PollingDuplex.dll</relpath>
    <extension downloadUri="System.ServiceModel.PollingDuplex.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.ServiceModel.Syndication.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.ServiceModel.Syndication</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.ServiceModel.Syndication.dll</relpath>
    <extension downloadUri="System.ServiceModel.Syndication.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.ServiceModel.PollingDuplex.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.PollingDuplex</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.DuplexChannelFactory`1">
      <summary>Provides the means to create and manage duplex channels of different types that are used by clients to send and receive messages to and from service endpoints.</summary>
      <typeparam name="TChannel">The type of channel produced by the channel factory.</typeparam>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> class with a context that implements the callback contract and a specified binding.</summary>
      <param name="callbackInstance">The <see cref="T:System.ServiceModel.InstanceContext" /> that the client uses to listen for messages from the connected service.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> used to connect to the service by channels produced by the factory.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" /> or <paramref name="binding" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> class with an object that implements the callback contract and a specified binding and endpoint address.</summary>
      <param name="callbackInstance">The <see cref="T:System.ServiceModel.InstanceContext" /> that the client uses to listen for messages from the connected service.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> used to connect to the service by channels produced by the factory.</param>
      <param name="remoteAddress">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" />, <paramref name="binding" />, or <paramref name="remoteAddress" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> class with the specified instance context, binding, and remote address.</summary>
      <param name="callbackInstance">The <see cref="T:System.ServiceModel.InstanceContext" /> that the client uses to listen for messages from the connected service.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> used to connect to the service by channels produced by the factory.</param>
      <param name="remoteAddress">The remote address that provides the location of the service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" />, <paramref name="binding" />, or <paramref name="remoteAddress" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>Creates a duplex channel between a service and a callback instance on the client.</summary>
      <returns>A duplex channel of type <paramref name="TChannel" />, the generic parameter for the factory, between the client and service.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext)">
      <summary>Creates a duplex channel between a service and a callback instance on the client.</summary>
      <returns>A duplex channel of type <paramref name="TChannel" />, the generic parameter for the factory, between the client and service.</returns>
      <param name="callbackInstance">The <see cref="T:System.ServiceModel.InstanceContext" /> that the client uses to listen for messages from the connected service.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> or <paramref name="callbackInstance" /> UserObject is null.</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress)">
      <summary>Creates a duplex channel between a service and a callback instance on the client.</summary>
      <returns>A duplex channel of type <paramref name="TChannel" />, the generic parameter for the factory, between the client and service.</returns>
      <param name="callbackInstance">The <see cref="T:System.ServiceModel.InstanceContext" /> that the client uses to listen for messages from the connected service.</param>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> or <paramref name="callbackInstance" />.UserObject is null.</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>Creates a duplex channel between a service and a callback instance on the client.</summary>
      <returns>A channel of type <paramref name="TChannel" />, the generic parameter for the factory, between the client and service.</returns>
      <param name="callbackInstance">The <see cref="T:System.ServiceModel.InstanceContext" /> that the client uses to listen for messages from the connected service.</param>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> or <paramref name="callbackInstance" />.UserObject is null.</exception>
    </member>
    <member name="T:System.ServiceModel.DuplexClientBase`1">
      <summary>Provides the base implementation from which Silverlight version 3 client objects can call duplex services.</summary>
      <typeparam name="TChannel">The type of the channel to be created.</typeparam>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.DuplexClientBase`1" /> class using the specified callback object, binding, and service endpoint address.</summary>
      <param name="callbackInstance">An <see cref="T:System.ServiceModel.InstanceContext" /> object that associates the callback object with the channel to the service.</param>
      <param name="binding">The binding with which to call the service.</param>
      <param name="remoteAddress">The service endpoint address to use.</param>
      <exception cref="T:System.ArgumentNullException">The callback instance is null.</exception>
      <exception cref="T:System.ArgumentNullException">The binding is null.</exception>
      <exception cref="T:System.ArgumentNullException">The address is null.</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.CreateChannel">
      <summary>Returns a channel to the service associated with the callback object passed to the constructor.</summary>
      <returns>A channel to the service of the type of the service contract interface.</returns>
    </member>
    <member name="T:System.ServiceModel.InstanceContext">
      <summary>Represents the context information for a service instance.</summary>
    </member>
    <member name="M:System.ServiceModel.InstanceContext.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.InstanceContext" /> class for a specified object that implements the service instance.</summary>
      <param name="implementation">The object that implements the serviceinstance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementation" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.InstanceContext.GetServiceInstance(System.ServiceModel.Channels.Message)">
      <summary>Returns the instance of the service for the instance context in response to an incoming message.</summary>
      <returns>The object that represents the service instance.</returns>
      <param name="message">The incoming message that triggered the creation of a service object.</param>
      <exception cref="T:System.InvalidOperationException">The service instance is in a created or opening state or is not initialized.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">The service instance is aborted.</exception>
      <exception cref="T:System.ObjectDisposedException">The service instance has been closed already and cannot be modified in these states.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The service instance is faulted and cannot be modified in these states.</exception>
    </member>
    <member name="P:System.ServiceModel.InstanceContext.SynchronizationContext">
      <summary>Gets or sets the context used for thread synchronization with the current instance context.</summary>
      <returns>The <see cref="T:System.Threading.SynchronizationContext" /> used for thread synchronization with the current instance context.</returns>
      <exception cref="T:System.InvalidOperationException">The communication object is opened or closing and cannot be modified in these states.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">The communication object has been aborted and cannot be modified in these states.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object has been closed already and cannot be modified in these states.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is faulted and cannot be modified in these states.</exception>
    </member>
    <member name="T:System.ServiceModel.PollingDuplexHttpBinding">
      <summary>Represents a binding that a Silverlight version 3 client can use to configure endpoints that can communicate with Windows Communication Foundation (WCF) services that are similarly configured for duplex communication with a polling client.</summary>
    </member>
    <member name="M:System.ServiceModel.PollingDuplexHttpBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PollingDuplexHttpBinding" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.PollingDuplexHttpBinding.#ctor(System.ServiceModel.PollingDuplexHttpSecurityMode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PollingDuplexHttpBinding" /> class with a specified type of security used by the binding.</summary>
      <param name="securityMode">The value of <see cref="T:System.ServiceModel.PollingDuplexHttpSecurityMode" /> that specifies the type of security that is used with the SOAP message and for the client.</param>
    </member>
    <member name="M:System.ServiceModel.PollingDuplexHttpBinding.CreateBindingElements">
      <summary>Returns an ordered collection of binding elements contained in the current binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the ordered stack of binding elements described by the <see cref="T:System.PollingDuplexHttpBinding.BasicHttpBinding" />.</returns>
    </member>
    <member name="P:System.ServiceModel.PollingDuplexHttpBinding.EnvelopeVersion">
      <summary>Gets the version of SOAP that is used for messages that are processed by this binding.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.EnvelopeVersion" /> that is used with this binding. The value is always SOAP 1.2.</returns>
    </member>
    <member name="P:System.ServiceModel.PollingDuplexHttpBinding.InactivityTimeout">
      <summary>Gets or sets the maximum interval of time that can pass without activity on a channel before the client or server channel enters a faulted state. The default value is 10 minutes.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> value that specifies the maximum interval of time that can pass without activity on a channel before the channel enters a faulted state.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero, or it is larger than the maximum time allowed.</exception>
    </member>
    <member name="P:System.ServiceModel.PollingDuplexHttpBinding.MaxBufferSize">
      <summary>Gets or sets the maximum size for a buffer that receives messages from the channel.</summary>
      <returns>The maximum size, in bytes, of a buffer that stores messages while they are processed for an endpoint configured with this binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:System.ServiceModel.PollingDuplexHttpBinding.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size for a message that can be received on a channel configured with this binding.</summary>
      <returns>The maximum size, in bytes, for a message that is processed by the binding. The default value is 65,536 bytes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero.</exception>
    </member>
    <member name="P:System.ServiceModel.PollingDuplexHttpBinding.Scheme">
      <summary>Gets the URI transport scheme for the channels and listeners that are configured with this binding.</summary>
      <returns>"https" if the security mode in the transport binding element is set to <see cref="F:System.ServiceModel.BasicHttpSecurityMode.Transport" /> or <see cref="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredentials" />; otherwise, "http".</returns>
    </member>
    <member name="P:System.ServiceModel.PollingDuplexHttpBinding.Security">
      <summary>Gets the type of security used with this binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.PollingDuplexHttpSecurity" /> that is used with this binding. The default value is <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />. </returns>
    </member>
    <member name="P:System.ServiceModel.PollingDuplexHttpBinding.TextEncoding">
      <summary>Gets or sets the character encoding that is used for the message text.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> that indicates the character encoding that is used. The default is <see cref="T:System.Text.UTF8Encoding" />.</returns>
    </member>
    <member name="P:System.ServiceModel.PollingDuplexHttpBinding.UseTextEncoding">
      <summary>Gets or sets a value that indicates whether text or binary encoding is used for the message.</summary>
      <returns>true if text encoding is used; false if binary encoding is used.</returns>
    </member>
    <member name="T:System.ServiceModel.PollingDuplexHttpSecurity">
      <summary>Specifies the security used for a Silverlight client configured with a <see cref="T:System.ServiceModel.PollingDuplexHttpBinding" />.</summary>
    </member>
    <member name="P:System.ServiceModel.PollingDuplexHttpSecurity.Mode">
      <summary>Gets or sets the mode of security for a client configured with a <see cref="T:System.ServiceModel.PollingDuplexHttpBinding" />.</summary>
      <returns>A value in the <see cref="T:System.ServiceModel.PollingDuplexHttpSecurityMode" /> enumeration. The default value for this property is <see cref="F:System.ServiceModel.PollingDuplexHttpSecurityMode.None" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is not a legal value for <see cref="T:System.ServiceModel.PollingDuplexHttpSecurityMode" />.</exception>
    </member>
    <member name="T:System.ServiceModel.PollingDuplexHttpSecurityMode">
      <summary>Specifies the types of security that can be used with the system-provided <see cref="T:System.ServiceModel.PollingDuplexHttpBinding" />.</summary>
    </member>
    <member name="F:System.ServiceModel.PollingDuplexHttpSecurityMode.None">
      <summary>The SOAP message is not secured during transfer. This is the default behavior.</summary>
    </member>
    <member name="F:System.ServiceModel.PollingDuplexHttpSecurityMode.Transport">
      <summary>Security is provided using HTTPS. The service must be configured with SSL certificates. The SOAP message is protected as a whole using HTTPS. The service is authenticated by the client using the service’s SSL certificate.</summary>
    </member>
    <member name="F:System.ServiceModel.PollingDuplexHttpSecurityMode.TransportWithMessageCredential">
      <summary>This mode provides integrity, confidentiality, and server authentication using HTTPS. The service must be configured with a certificate. Client authentication is provided by SOAP message security.
This mode is applicable when the user is authenticating with a UserName or Certificate credential and there is an existing HTTPS deployment for securing message transfer.</summary>
    </member>
    <member name="F:System.ServiceModel.PollingDuplexHttpSecurityMode.TransportCredentialOnly">
      <summary>This mode provides only HTTP-based client authentication. It does not provide message integrity or confidentiality.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.PollingDuplexBindingElement">
      <summary>Represents the binding element that enables duplex communication between a Silverlight version 3 client and a service.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.PollingDuplexBindingElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.#ctor(System.ServiceModel.Channels.PollingDuplexBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.PollingDuplexBindingElement" /> class.</summary>
      <param name="elementToBeCloned"> The instance of the <see cref="T:System.ServiceModel.Channels.PollingDuplexBindingElement" /> class to be cloned.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory that can be used to create a channel.</summary>
      <returns>A channel factory of the specified type.</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> members that describe bindings, behaviors, contracts and other information required to create the channel factory.</param>
      <typeparam name="TChannel">Type of channel factory.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> cannot be null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Determines whether a channel factory of the specified type can be built.</summary>
      <returns>true if a channel factory can be built; otherwise, false.</returns>
      <param name="context"> The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel to be built.</param>
      <typeparam name="TChannel">The type of channel to check.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.PollingDuplexBindingElement.ClientPollTimeout">
      <summary>The interval of time that a client polling request has to complete before timing out.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long a request has to complete before timing out.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.Clone">
      <summary>Creates a copy of the current binding element.</summary>
      <returns>A copy of the current binding element.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</summary>
      <returns>The property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</returns>
      <param name="context">A <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T">The property to get.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.PollingDuplexBindingElement.InactivityTimeout">
      <summary>Gets or sets the maximum interval of time that can pass without activity on a channel before the client channel enters a faulted state.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> object that specifies the maximum interval of time that can pass without activity on a channel before the client channel enters a faulted state.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Windows.Controls.Data.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Windows.Controls.Data</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Windows.Controls.Data.dll</relpath>
    <extension downloadUri="System.Windows.Controls.Data.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Windows.Controls.Data.Input.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Windows.Controls.Data.Input</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Windows.Controls.Data.Input.dll</relpath>
    <extension downloadUri="System.Windows.Controls.Data.Input.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Windows.Controls.Data.Input.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Controls.Data.Input</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.DescriptionViewer" /> types to UI automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer.#ctor(System.Windows.Controls.DescriptionViewer)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.DescriptionViewer" /> to associate with this <see cref="T:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for this <see cref="T:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type as a value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class that is associated with this <see cref="T:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The type name of the <paramref name="owner" /> value that the automation peer is constructed with.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.Controls.DescriptionViewer" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string name value from the owner control's <see cref="P:System.Windows.Controls.DescriptionViewer.Description" /> property if available.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ValidationSummary" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.#ctor(System.Windows.Controls.ValidationSummary)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ValidationSummary" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the validation summary.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.Controls.ValidationSummary" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string name value from the owner control's header if available.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for this <see cref="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>Invokes a selection on the current item.</summary>
    </member>
    <member name="T:System.Windows.Controls.DescriptionViewer">
      <summary>Displays a description and tracks error state for an associated control.</summary>
    </member>
    <member name="M:System.Windows.Controls.DescriptionViewer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DescriptionViewer" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.DescriptionViewer.Description">
      <summary>Gets or sets the description text displayed by the viewer.</summary>
      <returns>The description text displayed by the viewer.</returns>
    </member>
    <member name="F:System.Windows.Controls.DescriptionViewer.DescriptionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DescriptionViewer.Description" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DescriptionViewer.Description" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DescriptionViewer.GlyphTemplate">
      <summary>Gets or sets the template that is used to display the description viewer glyph.</summary>
      <returns>The template that is used to display the description viewer glyph.</returns>
    </member>
    <member name="F:System.Windows.Controls.DescriptionViewer.GlyphTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DescriptionViewer.GlyphTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DescriptionViewer.GlyphTemplate" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DescriptionViewer.IsFocused">
      <summary>Gets a value that indicates whether the control that is the <see cref="P:System.Windows.Controls.DescriptionViewer.Target" /> of the <see cref="T:System.Windows.Controls.DescriptionViewer" /> has focus.</summary>
      <returns>true if the <see cref="P:System.Windows.Controls.DescriptionViewer.Target" /> control has focus; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DescriptionViewer.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DescriptionViewer.IsFocused" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DescriptionViewer.IsFocused" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DescriptionViewer.IsValid">
      <summary>Gets a value that indicates whether the <see cref="P:System.Windows.Controls.DescriptionViewer.Target" /> field data is valid.</summary>
      <returns>true if the field data is valid; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DescriptionViewer.IsValidProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DescriptionViewer.IsValid" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DescriptionViewer.IsValid" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DescriptionViewer.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.DescriptionViewer" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.DescriptionViewer.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer" /> for the <see cref="T:System.Windows.Controls.DescriptionViewer" /> object.</returns>
    </member>
    <member name="P:System.Windows.Controls.DescriptionViewer.PropertyPath">
      <summary>Gets or sets the path to the dependency property on the <see cref="P:System.Windows.FrameworkElement.DataContext" /> of the <see cref="P:System.Windows.Controls.DescriptionViewer.Target" /> control that this <see cref="T:System.Windows.Controls.DescriptionViewer" /> is associated with.</summary>
      <returns>The path to the dependency property on the <see cref="P:System.Windows.FrameworkElement.DataContext" /> of the <see cref="P:System.Windows.Controls.DescriptionViewer.Target" /> control that this <see cref="T:System.Windows.Controls.DescriptionViewer" /> is associated with.</returns>
    </member>
    <member name="F:System.Windows.Controls.DescriptionViewer.PropertyPathProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DescriptionViewer.PropertyPath" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DescriptionViewer.PropertyPath" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DescriptionViewer.Refresh">
      <summary>Reloads the metadata from the <see cref="P:System.Windows.Controls.DescriptionViewer.Target" /> element.</summary>
    </member>
    <member name="P:System.Windows.Controls.DescriptionViewer.Target">
      <summary>Gets or sets the control that this <see cref="T:System.Windows.Controls.DescriptionViewer" /> is associated with.</summary>
      <returns>The control that this <see cref="T:System.Windows.Controls.DescriptionViewer" /> is associated with.</returns>
    </member>
    <member name="F:System.Windows.Controls.DescriptionViewer.TargetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DescriptionViewer.Target" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DescriptionViewer.Target" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DescriptionViewer.ToolTipStyle">
      <summary>Gets or sets the style used to display tooltips.</summary>
      <returns>The style used to display tooltips.</returns>
    </member>
    <member name="F:System.Windows.Controls.DescriptionViewer.ToolTipStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DescriptionViewer.ToolTipStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DescriptionViewer.ToolTipStyle" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.FocusingInvalidControlEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.ValidationSummary.FocusingInvalidControl" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.FocusingInvalidControlEventArgs.#ctor(System.Windows.Controls.ValidationSummaryItem,System.Windows.Controls.ValidationSummaryItemSource)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.FocusingInvalidControlEventArgs" /> class.</summary>
      <param name="item">The error that is selected in the <see cref="T:System.Windows.Controls.ValidationSummary" /> list.</param>
      <param name="target">The control/property pair that will receive focus.</param>
    </member>
    <member name="P:System.Windows.Controls.FocusingInvalidControlEventArgs.Handled">
      <summary>Gets or sets a value that indicates whether setting the focus was handled.</summary>
      <returns>true if setting the focus was handled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Controls.FocusingInvalidControlEventArgs.Item">
      <summary>Gets the error that is selected in the <see cref="T:System.Windows.Controls.ValidationSummary" /> error list.</summary>
      <returns>The error that is selected in the <see cref="T:System.Windows.Controls.ValidationSummary" /> error list.</returns>
    </member>
    <member name="P:System.Windows.Controls.FocusingInvalidControlEventArgs.Target">
      <summary>Gets or sets the control/property pair that will receive focus.</summary>
      <returns>The control/property pair that will receive focus.</returns>
    </member>
    <member name="T:System.Windows.Controls.Label">
      <summary>Displays a caption, required field indicator, and validation error indicator for an associated control.</summary>
    </member>
    <member name="M:System.Windows.Controls.Label.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Label" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.Label.IsRequired">
      <summary>Gets or sets a value that indicates whether the property bound to the <see cref="P:System.Windows.Controls.Label.Target" /> field is required.</summary>
      <returns>true if the field is required; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Label.IsRequiredProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Label.IsRequired" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Label.IsRequired" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Label.IsValid">
      <summary>Gets a value that indicates whether the <see cref="P:System.Windows.Controls.Label.Target" /> field data is valid.</summary>
      <returns>true if the field data is valid; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.Label.IsValidProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Label.IsValid" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Label.IsValid" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Label.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Label" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.Label.OnContentChanged(System.Object,System.Object)">
      <summary>Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</summary>
      <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
      <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
    </member>
    <member name="P:System.Windows.Controls.Label.PropertyPath">
      <summary>Gets or sets the path to the dependency property on the <see cref="P:System.Windows.FrameworkElement.DataContext" /> of the <see cref="P:System.Windows.Controls.Label.Target" /> control that this <see cref="T:System.Windows.Controls.Label" /> is associated with.</summary>
      <returns>The path to the dependency property on the <see cref="P:System.Windows.FrameworkElement.DataContext" /> of the <see cref="P:System.Windows.Controls.Label.Target" /> control that this <see cref="T:System.Windows.Controls.Label" /> is associated with. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.Label.PropertyPathProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Label.PropertyPath" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Label.PropertyPath" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Label.Refresh">
      <summary>Reloads the metadata from the <see cref="P:System.Windows.Controls.Label.Target" /> element.</summary>
    </member>
    <member name="P:System.Windows.Controls.Label.Target">
      <summary>Gets or sets the control that this <see cref="T:System.Windows.Controls.Label" /> is associated with.</summary>
      <returns>The control that this <see cref="T:System.Windows.Controls.Label" /> is associated with.</returns>
    </member>
    <member name="F:System.Windows.Controls.Label.TargetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Label.Target" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Label.Target" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ValidationSummary">
      <summary>Displays a summary of the validation errors on a form.</summary>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ValidationSummary" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.DisplayedErrors">
      <summary>Gets the collection of errors that are displayed after the <see cref="P:System.Windows.Controls.ValidationSummary.Filter" /> is applied.</summary>
      <returns>The collection of errors that are displayed after the <see cref="P:System.Windows.Controls.ValidationSummary.Filter" /> is applied.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.Errors">
      <summary>Gets the collection of errors.</summary>
      <returns>The collection of errors.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.ErrorStyle">
      <summary>Gets or sets the style used for the error's item container.</summary>
      <returns>The style used for the error's item container.</returns>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummary.ErrorStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ValidationSummary.ErrorStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ValidationSummary.ErrorStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.Filter">
      <summary>Gets or sets a value that indicates which types of errors are displayed.</summary>
      <returns>One of the enumeration values that indicates which types of errors are displayed. The default is <see cref="F:System.Windows.Controls.ValidationSummaryFilters.All" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummary.FilterProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ValidationSummary.Filter" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ValidationSummary.Filter" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.FocusControlsOnClick">
      <summary>Gets or sets a value that indicates whether focus is set on the input control when an error message is clicked.</summary>
      <returns>true if focus is set on the input control when an error message is clicked; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummary.FocusControlsOnClickProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ValidationSummary.FocusControlsOnClick" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ValidationSummary.FocusControlsOnClick" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.ValidationSummary.FocusingInvalidControl">
      <summary>Occurs when an error in the error summary list is clicked.</summary>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummary.GetShowErrorsInSummary(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.ValidationSummary.ShowErrorsInSummary" /> attached property of the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The <see cref="P:System.Windows.Controls.ValidationSummary.ShowErrorsInSummary" /> property value of the specified object.</returns>
      <param name="inputControl">The input control from which the property value is read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputControl" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.HasDisplayedErrors">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.ValidationSummary" /> has displayed errors.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.ValidationSummary" /> has displayed errors; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummary.HasDisplayedErrorsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ValidationSummary.HasDisplayedErrors" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ValidationSummary.HasDisplayedErrors" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.HasErrors">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.ValidationSummary" /> has errors.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.ValidationSummary" /> has errors; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummary.HasErrorsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ValidationSummary.HasErrors" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ValidationSummary.HasErrors" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.Header">
      <summary>Gets or sets the content of the <see cref="T:System.Windows.Controls.ValidationSummary" /> header.</summary>
      <returns>The content of the <see cref="T:System.Windows.Controls.ValidationSummary" /> header. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummary.HeaderProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ValidationSummary.Header" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ValidationSummary.Header" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.HeaderTemplate">
      <summary>Gets or sets the template that is used to display the content of the header.</summary>
      <returns>The template that is used to display the content of the header.</returns>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummary.HeaderTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ValidationSummary.HeaderTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ValidationSummary.HeaderTemplate" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummary.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ValidationSummary" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummary.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ValidationSummary" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummary.OnFocusingInvalidControl(System.Windows.Controls.FocusingInvalidControlEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.ValidationSummary.FocusingInvalidControl" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="E:System.Windows.Controls.ValidationSummary.SelectionChanged">
      <summary>Occurs when the currently selected item in the error summary list changes.</summary>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummary.SetShowErrorsInSummary(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.ValidationSummary.ShowErrorsInSummary" /> attached property of the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="inputControl">The input control with which to associate the attached property.</param>
      <param name="value">true if errors on the input control should be shown in the summary; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputControl" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.ShowErrorsInSummary">
      <summary>Gets or sets a value that indicates whether a control's errors should be displayed in the <see cref="T:System.Windows.Controls.ValidationSummary" />.</summary>
      <returns>true if errors on the input control should be shown in the summary; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummary.ShowErrorsInSummaryProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ValidationSummary.ShowErrorsInSummary" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ValidationSummary.ShowErrorsInSummary" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.SummaryListBoxStyle">
      <summary>Gets or sets the style applied to the <see cref="T:System.Windows.Controls.ListBox" /> that displays the errors.</summary>
      <returns>The style applied to the <see cref="T:System.Windows.Controls.ListBox" /> that displays the errors. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummary.SummaryListBoxStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ValidationSummary.SummaryListBoxStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ValidationSummary.SummaryListBoxStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummary.Target">
      <summary>Gets or sets the <see cref="T:System.Windows.UIElement" /> for which validation errors will be displayed in the summary.</summary>
      <returns>The <see cref="T:System.Windows.UIElement" /> for which validation errors will be displayed in the summary. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummary.TargetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ValidationSummary.Target" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ValidationSummary.Target" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ValidationSummaryFilters">
      <summary>Specifies the types of errors displayed in an <see cref="T:System.Windows.Controls.ValidationSummary" /> control.</summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummaryFilters.None">
      <summary>No errors are displayed.</summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummaryFilters.ObjectErrors">
      <summary>Only object level errors are displayed.</summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummaryFilters.PropertyErrors">
      <summary>Only property level errors are displayed.</summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummaryFilters.All">
      <summary>All errors are displayed. </summary>
    </member>
    <member name="T:System.Windows.Controls.ValidationSummaryItem">
      <summary>Represents an individual validation error.</summary>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummaryItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ValidationSummaryItem" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummaryItem.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ValidationSummaryItem" /> class with the specified error message.</summary>
      <param name="message">The text of the error message.</param>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummaryItem.#ctor(System.String,System.String,System.Windows.Controls.ValidationSummaryItemType,System.Windows.Controls.ValidationSummaryItemSource,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ValidationSummaryItem" /> class with the specified error message, header, item type, source, and context.</summary>
      <param name="message">The text of the error message.</param>
      <param name="messageHeader">The header of the item, such as the property name.</param>
      <param name="itemType">Specifies whether the error originated from an object or a property.</param>
      <param name="source">The source of the error message, including the originating control or property name.</param>
      <param name="context">The context in which the error occurred.</param>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummaryItem.Context">
      <summary>Gets or sets the object that is the context in which the error occurred.</summary>
      <returns>The object that is the context in which the error occurred, or null if no value is set.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummaryItem.ItemType">
      <summary>Gets a value that specifies whether the error originated from an object or a property.</summary>
      <returns>One of the enumeration values that specifies whether the error originated from an object or a property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummaryItem.Message">
      <summary>Gets or sets the text of the error message.</summary>
      <returns>The text of the error message.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummaryItem.MessageHeader">
      <summary>Gets or sets the text of the error message header.</summary>
      <returns>The text of the error message header.</returns>
    </member>
    <member name="E:System.Windows.Controls.ValidationSummaryItem.PropertyChanged">
      <summary>Occurs when a property value for this <see cref="T:System.Windows.Controls.ValidationSummaryItem" /> changes.</summary>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummaryItem.Sources">
      <summary>Gets the sources of the validation errors.</summary>
      <returns>A collection of <see cref="T:System.Windows.Controls.ValidationSummaryItemSource" /> objects that represent the sources of validation errors.</returns>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummaryItem.ToString">
      <summary>The string representation of this <see cref="T:System.Windows.Controls.ValidationSummaryItem" />.</summary>
      <returns>The string representation of this <see cref="T:System.Windows.Controls.ValidationSummaryItem" />.</returns>
    </member>
    <member name="T:System.Windows.Controls.ValidationSummaryItemSource">
      <summary>Represents the source of a <see cref="T:System.Windows.Controls.ValidationSummaryItem" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummaryItemSource.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ValidationSummaryItemSource" /> class with the specified property associated with this error.</summary>
      <param name="propertyName">The name of the property associated with this error.</param>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummaryItemSource.#ctor(System.String,System.Windows.Controls.Control)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ValidationSummaryItemSource" /> class with the specified property and control associated with this error.</summary>
      <param name="propertyName">The name of the property associated with this error.</param>
      <param name="control">The control associated with this error.</param>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummaryItemSource.Control">
      <summary>Gets the control that is the source of this error.</summary>
      <returns>The control that is the source of this error.</returns>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummaryItemSource.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Controls.ValidationSummaryItemSource" /> is equal to the current <see cref="T:System.Windows.Controls.ValidationSummaryItemSource" />.</summary>
      <returns>true if the specified <see cref="T:System.Windows.Controls.ValidationSummaryItemSource" /> is equal to the current <see cref="T:System.Windows.Controls.ValidationSummaryItemSource" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.Controls.ValidationSummaryItemSource" /> to compare to the current <see cref="T:System.Windows.Controls.ValidationSummaryItemSource" />.</param>
    </member>
    <member name="M:System.Windows.Controls.ValidationSummaryItemSource.GetHashCode">
      <summary>Returns a hash code based on the <see cref="P:System.Windows.Controls.ValidationSummaryItemSource.PropertyName" /> and the <see cref="P:System.Windows.Controls.ValidationSummaryItemSource.Control" /><see cref="P:System.Windows.FrameworkElement.Name" />.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationSummaryItemSource.PropertyName">
      <summary>Gets the name of the property that is the source of this error.</summary>
      <returns>The name of the property that is the source of this error.</returns>
    </member>
    <member name="T:System.Windows.Controls.ValidationSummaryItemType">
      <summary>Specifies whether a validation error came from object-level or property-level validation.</summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummaryItemType.ObjectError">
      <summary>The error came from object-level validation.</summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationSummaryItemType.PropertyError">
      <summary>The error came from property-level validation.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Windows.Controls.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Windows.Controls</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Windows.Controls.dll</relpath>
    <extension downloadUri="System.Windows.Controls.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Windows.Controls.Input.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Windows.Controls.Input</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Windows.Controls.Input.dll</relpath>
    <extension downloadUri="System.Windows.Controls.Input.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\system.servicemodel.syndication.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.Syndication</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.Syndication.Atom10FeedFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to and from Atom 1.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> class.</summary>
      <param name="feedTypeToCreate">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance to be serialized.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication feed.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication feed.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.CreateFeedInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.FeedType">
      <summary>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</summary>
      <returns>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.PreserveAttributeExtensions">
      <summary>Gets and sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.PreserveElementExtensions">
      <summary>Gets and sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an Atom 1.0 syndication feed from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadItem(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Reads a syndication item from <see cref="T:System.Xml.XmlReader" /> instance using the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadItems(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Boolean@)">
      <summary>Reads in a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use to create the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</param>
      <param name="areAllItemsRead">A value that specifies whether all of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances have been read from the <see cref="T:System.Xml.XmlReader" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteItem(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.Uri)">
      <summary>Writes the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteItems(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem},System.Uri)">
      <summary>Writes a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived classes to and from Atom 1.0 format.</summary>
      <typeparam name="TSyndicationFeed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived type to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance.</summary>
      <param name="feedToWrite">The feed to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.CreateFeedInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10ItemFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to and from Atom 1.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> class.</summary>
      <param name="itemTypeToCreate">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived instance to associate with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication item.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication item.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.CreateItemInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.ItemType">
      <summary>Gets the type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" />.</summary>
      <returns>The type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.PreserveAttributeExtensions">
      <summary>Gets or sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.PreserveElementExtensions">
      <summary>Gets or sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an Atom 1.0 syndication item from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived classes to and from Atom 1.0 format.</summary>
      <typeparam name="TSyndicationItem">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived class to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.CreateItemInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20FeedFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to and from RSS 2.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class.</summary>
      <param name="feedTypeToCreate">The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to be serialized.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication feed.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication feed.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.CreateFeedInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.FeedType">
      <summary>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.PreserveAttributeExtensions">
      <summary>Gets and sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.PreserveElementExtensions">
      <summary>Gets and sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an RSS 2.0 syndication feed from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadItem(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Reads a syndication item from an <see cref="T:System.Xml.XmlReader" /> instance using the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadItems(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Boolean@)">
      <summary>Reads in a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use to create the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</param>
      <param name="areAllItemsRead">A value that specifies whether all of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances have been read from the <see cref="T:System.Xml.XmlReader" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.SerializeExtensionsAsAtom">
      <summary>Gets and sets a value that specifies whether to serialize extensions within the Atom 1.0 namespace.</summary>
      <returns>A value that specifies whether to serialize extensions within the Atom 1.0 namespace.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.SetFeed(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Sets the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" />.</summary>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to associate with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteItem(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.Uri)">
      <summary>Writes the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteItems(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem},System.Uri)">
      <summary>Writes a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived classes to RSS 2.0 format.</summary>
      <typeparam name="TSyndicationFeed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived type to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance.</summary>
      <param name="feedToWrite">The feed to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor(`0,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance.</summary>
      <param name="feedToWrite">The feed to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification, but not in the RSS 2.0 specification. The default is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.CreateFeedInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20ItemFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to and from RSS 2.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemTypeToCreate">The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to associate with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication item.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication item.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.CreateItemInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.ItemType">
      <summary>Gets the type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</summary>
      <returns>The type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.PreserveAttributeExtensions">
      <summary>Gets or sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.PreserveElementExtensions">
      <summary>Gets or sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an RSS 2.0 syndication item from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.SerializeExtensionsAsAtom">
      <summary>Gets and sets a value that specifies whether to serialize extensions within the Atom 1.0 namespace.</summary>
      <returns>A value that specifies whether to serialize extensions within the Atom 1.0 namespace.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived classes to and from RSS 2.0 format.</summary>
      <typeparam name="TSyndicationItem">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived type to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor(`0,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.CreateItemInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationCategory">
      <summary>A class that represents the category of a syndication feed. </summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.ServiceModel.Syndication.SyndicationCategory)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to initialize the new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the given name.</summary>
      <param name="name">The name of the category.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the specified name, scheme, and label.</summary>
      <param name="name">The name of the category.</param>
      <param name="scheme">A Uniform Resource Identifier (URI) that represents the categorization scheme to which this category belongs.</param>
      <param name="label">A human-readable attribute that describes the category.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.AttributeExtensions">
      <summary>Gets the attribute extensions for this category.</summary>
      <returns>The attribute extensions for this category.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.Clone">
      <summary>Creates a copy of a <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.ElementExtensions">
      <summary>Gets the element extensions for this category.</summary>
      <returns>A collection of element extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Label">
      <summary>Gets or sets the label of the category.</summary>
      <returns>The label of the category.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Name">
      <summary>Gets or sets the name of the category.</summary>
      <returns>The name of the category.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Scheme">
      <summary>Gets or sets the scheme of the category.</summary>
      <returns>The scheme of the category.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension has been parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationContent">
      <summary>A base class that represents syndication content.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.#ctor(System.ServiceModel.Syndication.SyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance to use to initialize the new instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationContent.AttributeExtensions">
      <summary>Gets the attribute extensions for this content.</summary>
      <returns>A dictionary that contains the attribute extensions for this object.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.Clone">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <returns>A copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateHtmlContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified HTML content.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The text of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreatePlaintextContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified plain text content.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The plain text content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateUrlContent(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</returns>
      <param name="url">The <see cref="T:System.Uri" /> of the content.</param>
      <param name="mediaType">The media type of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXhtmlContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified XHTML content.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The XHTML content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified data contract object.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="dataContractObject">The data contract object.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified data contract object and data contract serializer.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="dataContractObject">The data contract object.</param>
      <param name="dataContractSerializer">The data contract serializer.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified object and XML serializer.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="xmlSerializerObject">The object.</param>
      <param name="serializer">The XML serializer.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Xml.XmlReader)">
      <summary>Creates XML syndication content.</summary>
      <returns>An instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> class that contains the new content.</returns>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationContent.Type">
      <summary>Gets the syndication content type.</summary>
      <returns>The name of the type of syndication content.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of this <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> object to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.WriteTo(System.Xml.XmlWriter,System.String,System.String)">
      <summary>Writes the contents of this object to the specified <see cref="T:System.Xml.XmlWriter" /> within the specified element and element namespace.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="outerElementName">The name of the element.</param>
      <param name="outerElementNamespace">The namespace of the element.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationElementExtension">
      <summary>A class that represents a syndication element extension.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object.</summary>
      <param name="dataContractExtension">The data contract object used to initialize the extension. </param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object and data contract serializer.</summary>
      <param name="dataContractExtension">The data contract object used to initialize the extension.</param>
      <param name="dataContractSerializer">The data contract serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object and XML serializer.</summary>
      <param name="xmlSerializerExtension">The object used to initialize the extension.</param>
      <param name="serializer">The XML serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.String,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified outer name, outer namespace, and object.</summary>
      <param name="outerName">The name of the enclosing XML element.</param>
      <param name="outerNamespace">The namespace of the enclosing XML element.</param>
      <param name="dataContractExtension">The object used to initialize the extension.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified outer name, outer namespace, object, and data contract serializer.</summary>
      <param name="outerName">The name of the enclosing XML element.</param>
      <param name="outerNamespace">The namespace of the enclosing XML element.</param>
      <param name="dataContractExtension">The object used to initialize the extension.</param>
      <param name="dataContractSerializer">The data contract serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> that contains the content of the new <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetReader">
      <summary>Gets the <see cref="T:System.Xml.XmlReader" /> associated with the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlReader" /> associated with the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationElementExtension.OuterName">
      <summary>Gets the outer name of the element extension.</summary>
      <returns>The outer name of the element extension.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationElementExtension.OuterNamespace">
      <summary>Gets the outer namespace of the element extension.</summary>
      <returns>The outer namespace of the element extension.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the current extension to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection">
      <summary>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object)">
      <summary>Adds the specified <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> object to the collection.</summary>
      <param name="extension">The <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> object to add.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object,System.Runtime.Serialization.DataContractSerializer)">
      <summary>Adds the specified object to the collection using the specified data contract serializer.</summary>
      <param name="dataContractExtension">The object to add to the collection.</param>
      <param name="serializer">The serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Adds the specified object to the collection using the specified XML serializer.</summary>
      <param name="xmlSerializerExtension">The object to add to the collection.</param>
      <param name="serializer">The XML serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.String,System.String,System.Object)">
      <summary>Adds the specified object to the collection with the specified outer name and outer namespace.</summary>
      <param name="outerName">The outer name.</param>
      <param name="outerNamespace">The outer namespace.</param>
      <param name="dataContractExtension">The object to add to the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Adds the specified object to the collection with the specified outer name and outer namespace using the specified data contract serializer.</summary>
      <param name="outerName">The outer name.</param>
      <param name="outerNamespace">The outer namespace.</param>
      <param name="dataContractExtension">The object to add to the collection.</param>
      <param name="dataContractSerializer">The serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Xml.XmlReader)">
      <summary>Adds a new syndication element extension to the collection.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to read the syndication element extension from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.GetReaderAtElementExtensions">
      <summary>Gets an <see cref="T:System.Xml.XmlReader" /> with the element extensions.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> that contains the element extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String,System.Xml.Serialization.XmlSerializer)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationFeed">
      <summary>Represents a top-level feed object, &lt;feed&gt; in Atom 1.0 and &lt;rss&gt; in RSS 2.0.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</summary>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.ServiceModel.Syndication.SyndicationFeed,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified feed.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to initialize the new instance.</param>
      <param name="cloneItems">A value that specifies whether to clone the items in the source instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified title, description, and Uniform Resource Identifier (URI).</summary>
      <param name="title">The title of the feed.</param>
      <param name="description">The description of the feed.</param>
      <param name="feedAlternateLink">The URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified title, description, URI, and collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</summary>
      <param name="title">The title of the feed.</param>
      <param name="description">The description of the feed.</param>
      <param name="feedAlternateLink">The URI for the feed.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <param name="title">The syndication feed title.</param>
      <param name="description">The syndication feed description.</param>
      <param name="feedAlternateLink">The alternate URI for the syndication feed.</param>
      <param name="id">The ID of the syndication feed.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication feed was updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <param name="title">The syndication feed title.</param>
      <param name="description">The syndication feed description.</param>
      <param name="feedAlternateLink">The alternate URI for the syndication feed.</param>
      <param name="id">The ID of the syndication feed.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication feed was updated.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.AttributeExtensions">
      <summary>Gets a collection of attribute extensions.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Authors">
      <summary>Gets a collection of authors of the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represents the authors of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.BaseUri">
      <summary>Gets or sets the base URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>The base URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Categories">
      <summary>Gets a collection of categories for the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> objects that represent the categories for the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Clone(System.Boolean)">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A duplicate <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> object.</returns>
      <param name="cloneItems">A value that specifies whether the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects are cloned.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Contributors">
      <summary>Gets a collection of the contributors to the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represents the contributors to the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Copyright">
      <summary>Gets or sets copyright information for the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> object that represents copyright information for the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateCategory">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateItem">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateLink">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreatePerson">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Description">
      <summary>Gets or sets a description of the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> object that represents the description of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.ElementExtensions">
      <summary>Gets the element extensions for the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> instance that contains the element extensions in the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Generator">
      <summary>Gets or sets the generator of the feed.</summary>
      <returns>The name of the tool that generated the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetAtom10Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetRss20Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetRss20Formatter(System.Boolean)">
      <summary>Gets a new <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize element and attribute extensions with an Atom 1.0 namespace.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Id">
      <summary>Gets or sets the ID of the feed.</summary>
      <returns>The ID of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.ImageUrl">
      <summary>Gets or sets the image URL for the feed.</summary>
      <returns>The URL for the image for the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Items">
      <summary>Gets a collection of the feed items contained in the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Language">
      <summary>Gets or sets the language of the feed.</summary>
      <returns>The name of the language the feed is written in. </returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.LastUpdatedTime">
      <summary>Gets or sets the time the feed was last updated.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> instance set to the time the feed was last updated.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Links">
      <summary>Gets the links associated with the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> objects.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Load(System.Xml.XmlReader)">
      <summary>Loads a syndication feed from the specified XML reader.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that contains the loaded contents.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to load the feed from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Load``1(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived instance from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived instance that contains the feed.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <typeparam name="TSyndicationFeed">The syndication feed type.</typeparam>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.SaveAsAtom10(System.Xml.XmlWriter)">
      <summary>Write the syndication feed to the specified <see cref="T:System.Xml.XmlWriter" /> in Atom 1.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.SaveAsRss20(System.Xml.XmlWriter)">
      <summary>Write the syndication feed to the specified <see cref="T:System.Xml.XmlWriter" /> in RSS 2.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Title">
      <summary>Gets or sets the title of the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance that contains the title of the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML Encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationFeedFormatter">
      <summary>An abstract class used as a base class for other formatters, (for example <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" />).</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to write. </param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies that the specified <see cref="T:System.Xml.XmlReader" /> contains a valid syndication feed.</summary>
      <returns>true, if the XML reader contains a valid syndication feed; otherwise, false.</returns>
      <param name="reader">An XML reader to check.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateFeedInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateItem(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeedFormatter.Feed">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the formatter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads in a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.SetFeed(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Associates a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance with the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" />.</summary>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to associate with the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.ToString">
      <summary>Gets a string representation of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> instance.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseContent(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse syndication item content using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="contentType">The content type.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <param name="content">The content to parse.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeedFormatter.Version">
      <summary>Gets the syndication version of the formatter.</summary>
      <returns>The syndication version of the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the element extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the element extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the element extensions to.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the element extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the element extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the element extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the element extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the element extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the element extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the element extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to the specified <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationItem">
      <summary>Represents a feed item, for example an RSS &lt;item&gt; or an Atom &lt;entry&gt;.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <param name="source">A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to initialize the new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.ServiceModel.Syndication.SyndicationContent,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <param name="title">The title of the syndication item.</param>
      <param name="content">A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance that contains the content of the syndication item.</param>
      <param name="itemAlternateLink">The alternate URI for the syndication item.</param>
      <param name="id">The ID of the syndication item.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication item was last updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class with the specified title, content, and link.</summary>
      <param name="title">The item title.</param>
      <param name="content">The item content.</param>
      <param name="itemAlternateLink">The item URL.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <param name="title">The title of the syndication item.</param>
      <param name="content">The content of the syndication item.</param>
      <param name="itemAlternateLink">The alternate URI for the syndication item.</param>
      <param name="id">The ID of the syndication item.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication item was last updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.AddPermalink(System.Uri)">
      <summary>Adds a permalink to the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</summary>
      <param name="permalink">The <see cref="T:System.Uri" /> that points to the content.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.AttributeExtensions">
      <summary>Gets the attribute extensions for the syndication item.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Authors">
      <summary>Gets the authors of the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represent the authors of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.BaseUri">
      <summary>Gets and sets the base Uniform Resource Identifier (URI) for the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>The base URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Categories">
      <summary>Gets the syndication categories for the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> objects that represent the categories of the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Clone">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Content">
      <summary>Gets and sets the content of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance that contains the content of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Contributors">
      <summary>Gets the contributors of the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represent the contributors of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Copyright">
      <summary>Gets and sets the copyright information for the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance that represents copyright information.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreateCategory">
      <summary>Creates a new category.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> object.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreateLink">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreatePerson">
      <summary>Creates a new person.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> object.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.ElementExtensions">
      <summary>Gets the element extensions contained in the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetAtom10Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetRss20Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetRss20Formatter(System.Boolean)">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize element and attribute extensions with an Atom 1.0 namespace.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Id">
      <summary>Gets and sets the ID of the syndication item.</summary>
      <returns>The ID of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.LastUpdatedTime">
      <summary>Gets and sets the last updated time for the syndication item.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> instance that represents the time the syndication item was last updated.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Links">
      <summary>Gets the links contained in the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> objects.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Load``1(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived object from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived object that contains the syndication item.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <typeparam name="TSyndicationItem">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived class to load.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Load(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from. </param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.PublishDate">
      <summary>Gets and sets the publish date for the syndication item.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that represents the publish date for the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.SaveAsAtom10(System.Xml.XmlWriter)">
      <summary>Write the syndication item to the specified <see cref="T:System.Xml.XmlWriter" /> in Atom 1.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.SaveAsRss20(System.Xml.XmlWriter)">
      <summary>Write the syndication item to the specified <see cref="T:System.Xml.XmlWriter" /> in RSS 2.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.SourceFeed">
      <summary>Gets and sets the source feed of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance where the syndication item is located.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Summary">
      <summary>Gets and sets the summary of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> that contains a summary of the item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Title">
      <summary>Gets and sets the title of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> object that contains the title of the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseContent(System.Xml.XmlReader,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse content.</summary>
      <returns>A value that specifies whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="contentType">The content type of the content.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <param name="content">The <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance to load the parsed content into.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specific syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationItemFormatter">
      <summary>An abstract class used as a base class for other formatters, (for example, <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" />).</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to write.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid syndication item.</summary>
      <returns>true if the XML reader contains a valid syndication item; otherwise, false.</returns>
      <param name="reader">An XML reader to check.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateItemInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItemFormatter.Item">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the formatter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads in a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.SetItem(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Associates a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance with the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" />.</summary>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to associate with the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.ToString">
      <summary>Gets a string representation of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> instance.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseContent(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse syndication item content using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="contentType">The content type.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <param name="content">The content to parse.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItemFormatter.Version">
      <summary>Gets the syndication version of the formatter.</summary>
      <returns>The syndication version of the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to the specified <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationLink">
      <summary>Represents a link within a syndication feed or item.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.ServiceModel.Syndication.SyndicationLink)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance used to initialize the new instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.Uri" />.</summary>
      <param name="uri">The URI to the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.Uri,System.String,System.String,System.String,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.Uri" />, relation type, title, media type, and length.</summary>
      <param name="uri">The URI to the linked resource.</param>
      <param name="relationshipType">The relationship type.</param>
      <param name="title">The title of the link.</param>
      <param name="mediaType">The media type of the link.</param>
      <param name="length">The length of the linked content.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.AttributeExtensions">
      <summary>Gets the attribute extensions of the link.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.BaseUri">
      <summary>Gets or sets the base URI of the syndication link.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the base URI of the syndication link.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.Clone">
      <summary>Creates a copy of the current <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateAlternateLink(System.Uri)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> object with the specified <see cref="T:System.Uri" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateAlternateLink(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> object with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateMediaEnclosureLink(System.Uri,System.String,System.Int64)">
      <summary>Creates a media enclosure link with the specified URI, media type, and length.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
      <param name="length">The length of the linked content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateSelfLink(System.Uri)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> with the specified URI and relationship type set to self.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI to the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateSelfLink(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> with the specified URI, media type, and relationship type set to self.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI to the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.ElementExtensions">
      <summary>Gets the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.GetAbsoluteUri">
      <summary>Gets the absolute URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the absolute URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Length">
      <summary>Gets or sets the length of the linked resource in bytes.</summary>
      <returns>The length of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.MediaType">
      <summary>Gets or sets the media type of the linked resource.</summary>
      <returns>The media type of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.RelationshipType">
      <summary>Gets or sets the relationship type of the linked resource.</summary>
      <returns>The relationship type of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Title">
      <summary>Gets or sets the title of the linked resource.</summary>
      <returns>The title of the linked resource.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Uri">
      <summary>Gets or sets the URI for the linked resource.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the URI for the linked resource.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationPerson">
      <summary>Represents an author or contributor of syndication content.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.ServiceModel.Syndication.SyndicationPerson)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> class with the specified instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to initialize the new instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.String)">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified e-mail address.</summary>
      <param name="email">The e-mail address of the person.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified e-mail address, name, and Uniform Resource Identifier (URI).</summary>
      <param name="email">The e-mail address of the person.</param>
      <param name="name">The name of the person.</param>
      <param name="uri">The URI of the person's Web page.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.AttributeExtensions">
      <summary>Gets the attribute extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.ElementExtensions">
      <summary>Gets the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Email">
      <summary>Gets or sets the e-mail address of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The e-mail address of the person.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Name">
      <summary>Gets or sets the name of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The name of the person.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Uri">
      <summary>Gets or sets the URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The URI of the person's Web site.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationVersions">
      <summary>A class that represents the syndication versions supported by Silverlight version 3.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.SyndicationVersions.Atom10">
      <summary>Represents support for the Atom 1.0 specification.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.SyndicationVersions.Rss20">
      <summary>Represents support for the RSS 2.0 specification.</summary>
    </member>
    <member name="T:System.ServiceModel.Syndication.TextSyndicationContent">
      <summary>Represents any <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> content intended to be displayed to an end user.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.ServiceModel.Syndication.TextSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified text.</summary>
      <param name="text">The text of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.String,System.ServiceModel.Syndication.TextSyndicationContentKind)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified text and <see cref="T:System.ServiceModel.Syndication.TextSyndicationContentKind" />.</summary>
      <param name="text">The text of the content.</param>
      <param name="textKind">The <see cref="T:System.ServiceModel.Syndication.TextSyndicationContentKind" /> that describes the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.TextSyndicationContent.Text">
      <summary>Gets the text of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</summary>
      <returns>The text of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.TextSyndicationContent.Type">
      <summary>Gets the content type of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</summary>
      <returns>The kind of text syndication content.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.TextSyndicationContentKind">
      <summary>An enumeration that represents the supported types of text syndication content.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.Plaintext">
      <summary>Plain text.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.Html">
      <summary>HTML (escaped markup).</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.XHtml">
      <summary>XML (not escaped).</summary>
    </member>
    <member name="T:System.ServiceModel.Syndication.UrlSyndicationContent">
      <summary>Represents syndication content that consists of a URL to another resource.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.#ctor(System.ServiceModel.Syndication.UrlSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> class with the specified <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.#ctor(System.Uri,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> class with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <param name="url">The <see cref="T:System.Uri" />.</param>
      <param name="mediaType">The media type of the resource referenced by the <see cref="T:System.Uri" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance that contains the new copy of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.UrlSyndicationContent.Type">
      <summary>Gets the content type of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</summary>
      <returns>The content type of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.UrlSyndicationContent.Url">
      <summary>Gets the <see cref="T:System.Uri" /> for the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the URI for the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.XmlSyndicationContent">
      <summary>Represents XML syndication content that is not intended to be displayed in a browser.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.ServiceModel.Syndication.XmlSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type, object, and <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</summary>
      <param name="type">The type of content.</param>
      <param name="dataContractExtension">The data contract extension.</param>
      <param name="dataContractSerializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type, object and <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <param name="type">The type of content.</param>
      <param name="xmlSerializerExtension">The XML serializer extension.</param>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.ServiceModel.Syndication.SyndicationElementExtension)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type and <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <param name="type">The type of the content, typically expressed as a MIME content type, for example application/xml or application/xml+customer.</param>
      <param name="extension">The <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> to place in the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> class.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.XmlSyndicationContent.Extension">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.GetReaderAtContent">
      <summary>Gets a reader from the content of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> from the content of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</summary>
      <returns>An object of the specified type.</returns>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> using the specified serializer.</summary>
      <returns>An object of the specified type.</returns>
      <param name="dataContractSerializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> using the specified serializer.</summary>
      <returns>An object of the specified type.</returns>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.XmlSyndicationContent.Type">
      <summary>Gets the type of the XML syndication content.</summary>
      <returns>The XML syndication content type.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Write the contents of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\system.windows.controls.data.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Controls.Data</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.InvalidEnumArgumentException">
      <summary>The exception that is thrown when you pass an enumeration value that is not valid as a method argument. </summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> class without a message.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> with the specified error message. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> class with the specified argument name, value, and type. </summary>
      <param name="argumentName">The name of the argument that is not valid.</param>
      <param name="invalidValue">The argument value that is not valid.</param>
      <param name="enumClass">The expected enumeration type.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.DataGrid" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.#ctor(System.Windows.Controls.DataGrid)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.DataGrid" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.GetChildrenCore">
      <summary>Gets the collection of child elements of the <see cref="T:System.Windows.Controls.DataGrid" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the data grid.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.GetNameCore">
      <summary>Gets the name of the class of the object associated with this <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label from the base implementation; otherwise, from the <paramref name="owner" /> value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern interface implementation for this <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IGridProvider#ColumnCount">
      <summary>Gets the total number of columns in a grid.</summary>
      <returns>The total number of columns in a grid.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IGridProvider#GetItem(System.Int32,System.Int32)">
      <summary>Retrieves the UI automation provider for the specified cell.</summary>
      <returns>The UI automation provider for the specified cell.</returns>
      <param name="row">The ordinal number of the row of interest.</param>
      <param name="column">The ordinal number of the column of interest.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IGridProvider#RowCount">
      <summary>Gets the total number of rows in a grid.</summary>
      <returns>The total number of rows in a grid.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll horizontally.</summary>
      <returns>true if the control can scroll vertically; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontalScrollPercent">
      <summary>Gets the current horizontal scroll position.</summary>
      <returns>The horizontal scroll position as a percentage of the total content area within the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontalViewSize">
      <summary>Gets the current horizontal view size.</summary>
      <returns>The horizontal size of the viewable region as a percentage of the total content area within the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the visible region of the content area horizontally and vertically.</summary>
      <param name="horizontalAmount">The horizontal increment specific to the control.</param>
      <param name="verticalAmount">The vertical increment specific to the control.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#SetScrollPercent(System.Double,System.Double)">
      <summary>Sets the horizontal and vertical scroll position as a percentage of the total content area within the control.</summary>
      <param name="horizontalPercent">The horizontal position as a percentage of the content area's total range.</param>
      <param name="verticalPercent">The vertical position as a percentage of the content area's total range.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll vertically.</summary>
      <returns>true if the control can scroll vertically; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticalScrollPercent">
      <summary>Gets the current vertical scroll position.</summary>
      <returns>The vertical scroll position as a percentage of the total content area within the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticalViewSize">
      <summary>Gets the vertical view size.</summary>
      <returns>The vertical size of the viewable region as a percentage of the total content area within the control. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>Gets a value that indicates whether the UI automation provider allows more than one child element to be selected concurrently.</summary>
      <returns>true if multiple selection is allowed; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>Retrieves a UI automation provider for each child element that is selected.</summary>
      <returns>A collection of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>Gets a value that indicates whether the UI automation provider requires at least one child element to be selected.</summary>
      <returns>true if multiple selection is allowed; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ITableProvider#GetColumnHeaders">
      <summary>Gets a collection of UI automation providers that represents all the column headers in a table.</summary>
      <returns>A collection of UI automation providers. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ITableProvider#GetRowHeaders">
      <summary>Retrieves a collection of UI automation providers that represents all row headers in the table.</summary>
      <returns>A collection of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ITableProvider#RowOrColumnMajor">
      <summary>Retrieves the primary direction of traversal for the table.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.DataGridCell" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.#ctor(System.Windows.Controls.DataGridCell)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.DataGridCell" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the data grid cell.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.Controls.DataGridCell" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for this <see cref="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.IsKeyboardFocusableCore">
      <summary>Retrieves a value that indicates whether the data grid cell can accept keyboard focus</summary>
      <returns>true if the element can accept keyboard focus; otherwise, false. The default implementation returns true in all cases.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Column">
      <summary>Gets the ordinal number of the column that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the column containing the cell or item. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ColumnSpan">
      <summary>Gets the number of columns spanned by a cell or item.</summary>
      <returns>The number of columns spanned. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ContainingGrid">
      <summary>Gets a UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> and represents the container of the cell or item.</summary>
      <returns>A UI Automation provider that implements the GridPattern control pattern and represents the cell or item container. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Row">
      <summary>Gets the ordinal number of the row that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the row containing the cell or item. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#RowSpan">
      <summary>Gets the number of rows spanned by a cell or item.</summary>
      <returns>The number of rows spanned. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>Sends a request to activate a control and initiate its single, unambiguous action.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>Gets a value that indicates whether an item is selected.</summary>
      <returns>true if the element is selected; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>Deselects any selected items and then selects the current element.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.</summary>
      <returns>The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ITableItemProvider#GetColumnHeaderItems">
      <summary>Retrieves a collection of UI Automation providers representing all the column headers associated with a table item or cell.</summary>
      <returns>A collection of UI Automation providers.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ITableItemProvider#GetRowHeaderItems">
      <summary>Retrieves a collection of UI Automation providers representing all the row headers associated with a table item or cell.</summary>
      <returns>A collection of UI Automation providers.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridColumnHeader)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the data grid column header.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetHelpTextCore">
      <summary>Retrieves a resource that indicates to automation whether sorting is active and sorted by ascending or descending value.</summary>
      <returns>A value that indicates whether sorting is active and sorted by ascending or descending value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> instance that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values that indicates the control pattern.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.IsContentElementCore">
      <summary>Retrieves a value that indicates whether the data grid item contains data that is presented to the user.</summary>
      <returns>true if the element is a content element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>Sends a request to activate a control and initiate its single, unambiguous action.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the control within the visible region (the viewport) of the container.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanMove">
      <summary>Gets a value that indicates whether the control can be moved.</summary>
      <returns>true if the element can be moved; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanResize">
      <summary>Gets a value that indicates whether the UI Automation element can be resized.</summary>
      <returns>true if the element can be resized; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanRotate">
      <summary>Gets a value that indicates whether the control can be rotated.</summary>
      <returns>true if the element can be rotated; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Move(System.Double,System.Double)">
      <summary>Moves the control.</summary>
      <param name="x">Absolute screen coordinates of the left side of the control.</param>
      <param name="y">Absolute screen coordinates of the top of the control.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Resize(System.Double,System.Double)">
      <summary>Resizes the control.</summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Rotate(System.Double)">
      <summary>Rotates the control.</summary>
      <param name="degrees">The number of degrees to rotate the control. A positive number rotates clockwise; a negative number rotates counterclockwise.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter" /> to associate with the <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.ChildWindowAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.IsContentElementCore">
      <summary>Retrieves a value that indicates whether the element contains data that is presented to the user.</summary>
      <returns>true if the element is a content element; otherwise, false. By default, returns false in all cases.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridDetailsPresenter)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter" /> to associate with the <see cref="T:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the <see cref="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.IsContentElementCore">
      <summary>Retrieves a value that indicates whether the element contains data that is presented to the user.</summary>
      <returns>true if the element is a content element; otherwise, false. By default, returns false in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.IsControlElementCore">
      <summary>Retrieves a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.</summary>
      <returns>true if the element is a control; otherwise, false. By default, returns true in all cases.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer">
      <summary>Exposes the items in <see cref="T:System.Windows.Data.CollectionViewGroup" /> views of a <see cref="T:System.Windows.Controls.DataGrid" /> to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.#ctor(System.Windows.Data.CollectionViewGroup,System.Windows.Controls.DataGrid)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer" /> class.</summary>
      <param name="group">The data grid item group to associate with this peer.</param>
      <param name="dataGrid">The <see cref="T:System.Windows.Controls.DataGrid" /> that contains this item.</param>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">
        <paramref name="item" /> or <paramref name="dataGrid" /> are null.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetAcceleratorKeyCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, the accelerator key combinations.</summary>
      <returns>The accelerator key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetAccessKeyCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, the access key.</summary>
      <returns>The access key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetAutomationIdCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, the string that uniquely identifies the group of items to UI automation.</summary>
      <returns>The identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetBoundingRectangleCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, the object that represents the screen coordinates of the group of items.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetChildrenCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, the collection of child elements that are represented in the UI automation tree as immediate child elements of the automation peer.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the <see cref="T:System.Windows.Data.CollectionViewGroup" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetClickablePointCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, the point on the group of items that responds to a mouse click.</summary>
      <returns>A point in the clickable area of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetHelpTextCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, text that describes the functionality of the group of items.</summary>
      <returns>The help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetItemStatusCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, text that conveys the visual status of the group of items.</summary>
      <returns>A string value that describes the status, such as "Busy" or "Online".</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetItemTypeCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, a value that describes what kind of item the group of items represents.</summary>
      <returns>A string value that describes the kind of item, such as "Mail Message", "Contact", and "Document".</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetLabeledByCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, the automation peer for the element designated as the label for the group of items.</summary>
      <returns>The object that exposes the element designated as the label to UI automation.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetLocalizedControlTypeCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, a localized string that represents the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the group of items.</summary>
      <returns>The type of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetNameCore">
      <summary>Gets the text label of the data grid item that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetOrientationCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, a value that indicates the explicit control orientation, if any.</summary>
      <returns>The orientation of the control as a value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the item of the <see cref="T:System.Windows.Controls.DataGrid" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.HasKeyboardFocusCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, a value that indicates whether the group of items currently has keyboard focus.</summary>
      <returns>true if the element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsContentElementCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, a value that indicates whether the group of items contains data that is presented to the user.</summary>
      <returns>true if the element is a content element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsControlElementCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, a value that indicates whether the group of items is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.</summary>
      <returns>true if the element is a control; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsEnabledCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, a value that indicates whether the group of items supports interaction.</summary>
      <returns>true if the element supports interaction; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsKeyboardFocusableCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, a value that indicates whether the group of items can accept keyboard focus.</summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsOffscreenCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, a value that indicates whether the data grid item is off the screen.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsPasswordCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, a value that indicates whether the group of items contains sensitive content.</summary>
      <returns>true if the element contains sensitive content, such as a password; otherwise, false</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsRequiredForFormCore">
      <summary>Retrieves, from the data grid group header that contains the group of items, a value that indicates whether the group of items must be completed on a form.</summary>
      <returns>true if the element must be completed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.SetFocusCore">
      <summary>Sets, through the data grid group header that contains the group of items, the keyboard focus on the data grid item.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
      <summary>Hides all nodes, controls, or content that are descendants of the control.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
      <summary>Displays all child nodes, controls, or content of the control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
      <summary>Gets the state (expanded or collapsed) of the control.</summary>
      <returns>The state (expanded or collapsed) of the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.System#Windows#Automation#Provider#IGridProvider#ColumnCount">
      <summary>Gets the total number of columns in a grid.</summary>
      <returns>The total number of columns in a grid.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.System#Windows#Automation#Provider#IGridProvider#GetItem(System.Int32,System.Int32)">
      <summary>Retrieves the UI automation provider for the specified cell.</summary>
      <returns>The UI automation provider for the specified cell.</returns>
      <param name="row">The ordinal number of the row that contains the cell.</param>
      <param name="column">The ordinal number of the column that contains the cell.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.System#Windows#Automation#Provider#IGridProvider#RowCount">
      <summary>Gets the total number of rows in a grid.</summary>
      <returns>The total number of rows in a grid.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>Gets a value that indicates whether the UI automation provider allows more than one child element to be selected concurrently.</summary>
      <returns>true if multiple selection is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>Retrieves a UI automation provider for each child element that is selected.</summary>
      <returns>An array of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>Gets a value that indicates whether the UI automation provider requires at least one child element to be selected.</summary>
      <returns>true if selection is required; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridItemAutomationPeer">
      <summary>Exposes items in the <see cref="T:System.Windows.Controls.DataGrid" /> to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.#ctor(System.Object,System.Windows.Controls.DataGrid)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridItemAutomationPeer" /> class.</summary>
      <param name="item">The data grid item to associate with this peer.</param>
      <param name="dataGrid">The <see cref="T:System.Windows.Controls.DataGrid" /> that contains this item.</param>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">
        <paramref name="item" /> or <paramref name="dataGrid" /> are null.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAcceleratorKeyCore">
      <summary>Retrieves, from the row that contains the data grid item, the accelerator key combinations.</summary>
      <returns>The accelerator key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAccessKeyCore">
      <summary>Retrieves, from the row that contains the data grid item, the access key.</summary>
      <returns>The access key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataGridItemAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAutomationIdCore">
      <summary>Retrieves, from the row that contains the data grid item, the string that uniquely identifies the data grid item to UI automation.</summary>
      <returns>The identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetBoundingRectangleCore">
      <summary>Retrieves, from the row that contains the data grid item, the object that represents the screen coordinates of the data grid item.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetChildrenCore">
      <summary>Retrieves, from the row that contains the data grid item, the collection of child elements that are represented in the UI automation tree as immediate child elements of the automation peer.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.DataGridItemAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the data grid item.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetClickablePointCore">
      <summary>Retrieves, from the row that contains the data grid item, the point on the data grid item that responds to a mouse click.</summary>
      <returns>A point in the clickable area of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetHelpTextCore">
      <summary>Retrieves, from the row that contains the data grid item, text that describes the functionality of the data grid item.</summary>
      <returns>The help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetItemStatusCore">
      <summary>Retrieves, from the row that contains the data grid item, text that conveys the visual status of the data grid item.</summary>
      <returns>A string value that describes the status, such as "Busy" or "Online".</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetItemTypeCore">
      <summary>Retrieves, from the row that contains the data grid item, a value that describes what kind of item the data grid item represents.</summary>
      <returns>A string value that describes the kind of item, such as "Mail Message", "Contact", and "Document".</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetLabeledByCore">
      <summary>Retrieves, from the row that contains the data grid item, the automation peer for the element designated as the label for the data grid item.</summary>
      <returns>The object that exposes the element designated as the label to UI automation.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetLocalizedControlTypeCore">
      <summary>Retrieves, from the row that contains the data grid item, a localized string that represents the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the data grid item.</summary>
      <returns>The type of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetNameCore">
      <summary>Gets the text label of the data grid item that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridItemAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetOrientationCore">
      <summary>Retrieves, from the row that contains the data grid item, a value that indicates the explicit control orientation, if any.</summary>
      <returns>The orientation of the control as a value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the item of the <see cref="T:System.Windows.Controls.DataGrid" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridItemAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.HasKeyboardFocusCore">
      <summary>Retrieves, from the row that contains the data grid item, a value that indicates whether the data grid item currently has keyboard focus.</summary>
      <returns>true if the element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsContentElementCore">
      <summary>Retrieves, from the row that contains the data grid item, a value that indicates whether the data grid item contains data that is presented to the user.</summary>
      <returns>true if the element is a content element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsControlElementCore">
      <summary>Retrieves, from the row that contains the data grid item, a value that indicates whether the data grid item is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.</summary>
      <returns>true if the element is a control; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsEnabledCore">
      <summary>Retrieves, from the row that contains the data grid item, a value that indicates whether the data grid item supports interaction.</summary>
      <returns>true if the element supports interaction; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsKeyboardFocusableCore">
      <summary>Retrieves, from the row that contains the data grid item, a value that indicates whether the data grid item can accept keyboard focus.</summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsOffscreenCore">
      <summary>Retrieves, from the row that contains the data grid item, a value that indicates whether the data grid item is off the screen.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsPasswordCore">
      <summary>Retrieves, from the row that contains the data grid item, a value that indicates whether the data grid item contains sensitive content.</summary>
      <returns>true if the element contains sensitive content, such as a password; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsRequiredForFormCore">
      <summary>Retrieves, from the row that contains the data grid item, a value that indicates whether the data grid item must be completed on a form.</summary>
      <returns>true if the element must be completed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.SetFocusCore">
      <summary>Sets, through the row that contains the data grid item, the keyboard focus on the data grid item.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>Sends a request to activate a control and initiate its single, unambiguous action.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>Gets a value that indicates whether an item is selected.</summary>
      <returns>true if the element is selected; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>Deselects any selected items and then selects the current element.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>Gets the UI automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.</summary>
      <returns>The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>Gets a value that specifies whether the UI automation provider allows more than one child element to be selected concurrently.</summary>
      <returns>true if multiple selection is allowed; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>Retrieves a UI automation provider for each child element that is selected.</summary>
      <returns>A collection of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>Gets a value that specifies whether the UI automation provider requires at least one child element to be selected.</summary>
      <returns>true if multiple selection is required; otherwise, false. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer">
      <summary>Exposes the <see cref="T:System.Windows.Controls.DataGridRow" /> types to UI automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowAutomationPeer.#ctor(System.Windows.Controls.DataGridRow)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.DataGridRow" /> to associate with the <see cref="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the <see cref="T:System.Windows.Controls.DataGridRow" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer">
      <summary>Exposes the items in <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" /> item types to UI automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer.#ctor(System.Windows.Controls.DataGridRowGroupHeader)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer" /> class.</summary>
      <param name="owner">The row group header to associate with this peer.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> types to UI automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridRowHeader)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.IsContentElementCore">
      <summary>Retrieves a value that indicates whether the element contains data that is presented to the user.</summary>
      <returns>true if the element is a content element; otherwise, false. By default, returns false in all cases.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.DataGridRowsPresenter" /> types to UI automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridRowsPresenter)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.DataGridRowsPresenter" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer.GetChildrenCore">
      <summary>Retrieves the collection of child elements that are represented in the UI automation tree as immediate child elements of the automation peer.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the <see cref="T:System.Windows.Controls.Primitives.DataGridRowsPresenter" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer.IsContentElementCore">
      <summary>Retrieves a value that indicates whether the element contains data that is presented to the user.</summary>
      <returns>true if the element is a content element; otherwise, false. By default, returns false in all cases.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataPagerAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.DataPager" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.#ctor(System.Windows.Controls.DataPager)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataPagerAutomationPeer" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.DataPager" /> to associate with this <see cref="T:System.Windows.Automation.Peers.DataPagerAutomationPeer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.DataPagerAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.DataPagerAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the <see cref="T:System.Windows.Controls.DataPager" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetClickablePointCore">
      <summary>Retrieves the <see cref="T:System.Windows.Point" /> object that represents the clickable space of the paging element.</summary>
      <returns>The object that represents the clickable space of the paging element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.Controls.DataPager" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataPagerAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer; such as, "Page N" when the total page count is unknown or "Page N of M" when the total count is known.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.DataPager" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataPagerAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
      <summary>Gets a value that indicates whether the associated data pager control allows page changes.</summary>
      <returns>true if the data pager control allows page changes; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
      <summary>Gets the value that is added to or subtracted from the page number of the <see cref="T:System.Windows.Controls.DataPager" /> control when a large change is made.</summary>
      <returns>The large-change value that is supported by the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
      <summary>Gets the maximum page number value that is supported by the data pager control.</summary>
      <returns>The maximum page number value that is supported by the data pager control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
      <summary>Gets the minimum page number value that is supported by the data pager control.</summary>
      <returns>The minimum page number value that is supported by the data pager control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
      <summary>Sets the page number of the associated data pager control.</summary>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
      <summary>Gets the value that is added to or subtracted from the page number of the <see cref="T:System.Windows.Controls.DataPager" /> control when a small change is made.</summary>
      <returns>The small-change value supported by the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Value">
      <summary>Gets the page number value of the associated data pager control.</summary>
      <returns>The page number value of the associated data pager control.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGrid">
      <summary>Displays data in a customizable grid.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGrid" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.AlternatingRowBackground">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint the background of odd-numbered rows.</summary>
      <returns>The brush that is used to paint the background of odd-numbered rows. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of white (ARGB value #00FFFFFF).</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.AlternatingRowBackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.AlternatingRowBackground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.AlternatingRowBackground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.AreRowDetailsFrozen">
      <summary>Gets or sets a value that indicates whether the row details sections remain fixed at the width of the display area or can scroll horizontally.</summary>
      <returns>true if the row details sections are prevented from scrolling horizontally; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.AreRowDetailsFrozenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.AreRowDetailsFrozen" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.AreRowDetailsFrozen" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.AreRowGroupHeadersFrozen">
      <summary>Gets or sets a value that indicates whether the row group header sections remain fixed at the width of the display area or can scroll horizontally.</summary>
      <returns>true if the row group headers are prevented from scrolling horizontally; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.AreRowGroupHeadersFrozenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.AreRowGroupHeadersFrozen" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.AreRowGroupHeadersFrozen" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges the content of the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
      <returns>The actual size used by the <see cref="T:System.Windows.Controls.DataGrid" />.</returns>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.AutoGenerateColumns">
      <summary>Gets or sets a value that indicates whether columns are created automatically when the <see cref="P:System.Windows.Controls.DataGrid.ItemsSource" /> property is set.</summary>
      <returns>true if columns are generated automatically; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.AutoGenerateColumnsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.AutoGenerateColumns" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.AutoGenerateColumns" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.AutoGeneratingColumn">
      <summary>Occurs one time for each public, non-static property in the bound data type when the <see cref="P:System.Windows.Controls.DataGrid.ItemsSource" /> property is changed and the <see cref="P:System.Windows.Controls.DataGrid.AutoGenerateColumns" /> property is true. </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.BeginEdit">
      <summary>Causes the data grid to enter editing mode for the current cell and current row, unless the data grid is already in editing mode.</summary>
      <returns>true if the data grid enters editing mode; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.BeginEdit(System.Windows.RoutedEventArgs)">
      <summary>Causes the data grid to enter editing mode for the current cell and current row in the specified keyboard and mouse state.</summary>
      <returns>true if the data grid enters editing mode; otherwise, false.</returns>
      <param name="editingEventArgs">Provides information about the keyboard or mouse gesture that prompted the method call. Can be null.</param>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.BeginningEdit">
      <summary>Occurs before a cell or row enters editing mode. </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.CancelEdit">
      <summary>Causes the data grid to cancel the current edit, restore the original value, and exit editing mode.</summary>
      <returns>true if the cancellation was successful; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.CancelEdit(System.Windows.Controls.DataGridEditingUnit)">
      <summary>Causes the data grid to cancel the current edit, restore the original value, and exit editing mode.</summary>
      <returns>true if the operation was successful; otherwise, false.</returns>
      <param name="editingUnit">Specifies whether to cancel editing for a <see cref="F:System.Windows.Controls.DataGridEditingUnit.Row" /> or <see cref="F:System.Windows.Controls.DataGridEditingUnit.Cell" />.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CanUserReorderColumns">
      <summary>Gets or sets a value that indicates whether the user can change the column display order by dragging column headers with the mouse.</summary>
      <returns>true if the user can reorder columns; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.CanUserReorderColumnsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.CanUserReorderColumns" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.CanUserReorderColumns" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CanUserResizeColumns">
      <summary>Gets or sets a value that indicates whether the user can adjust column widths using the mouse.</summary>
      <returns>true if the user can resize columns; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.CanUserResizeColumnsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.CanUserResizeColumns" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.CanUserResizeColumns" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CanUserSortColumns">
      <summary>Gets or sets a value that indicates whether the user can sort columns by clicking the column header.</summary>
      <returns>true if the user can sort columns; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.CanUserSortColumnsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.CanUserSortColumns" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.CanUserSortColumns" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.CellEditEnded">
      <summary>Occurs when a cell edit has been committed or canceled.</summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.CellEditEnding">
      <summary>Occurs when a cell edit is ending.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CellStyle">
      <summary>Gets or sets the style that is used when rendering the data grid cells.</summary>
      <returns>The style applied to cells. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.CellStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.CellStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.CellStyle" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.CollapseRowGroup(System.Windows.Data.CollectionViewGroup,System.Boolean)">
      <summary>Collapses data grid row groups.</summary>
      <param name="collectionViewGroup">The row group to collapse.</param>
      <param name="collapseAllSubgroups">true to collapse all subgroups of the row group; otherwise, false.</param>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.DataGridColumn.DisplayIndex" /> property of a column changes. </summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnHeaderDragCompleted">
      <summary>Occurs when the user drops a column header that was being dragged using the mouse. </summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnHeaderDragDelta">
      <summary>Occurs one or more times while the user drags a column header using the mouse. </summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnHeaderDragStarted">
      <summary>Occurs when the user begins dragging a column header using the mouse. </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.ColumnHeaderHeight">
      <summary>Gets or sets the height of the column headers row.</summary>
      <returns>The height of the column headers row in pixels. The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">When setting this property, the specified value is less than 4 or greater than 32768.</exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.ColumnHeaderHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.ColumnHeaderHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.ColumnHeaderHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.ColumnHeaderStyle">
      <summary>Gets or sets the style that is used when rendering the column headers.</summary>
      <returns>The style applied to column headers. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.ColumnHeaderStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.ColumnHeaderStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.ColumnHeaderStyle" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnReordered">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.DataGrid" /> column has moved to a new position in the display order. </summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnReordering">
      <summary>Occurs before a <see cref="T:System.Windows.Controls.DataGrid" /> column moves to a new position in the display order.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.Columns">
      <summary>Gets a collection that contains all the columns in the control.</summary>
      <returns>The columns in the control.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.ColumnWidth">
      <summary>Gets or sets the standard width or automatic sizing mode of columns in the control.</summary>
      <returns>A structure that represents the standard width or automatic sizing mode of columns in the <see cref="T:System.Windows.Controls.DataGrid" />. The default is <see cref="P:System.Windows.Controls.DataGridLength.Auto" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.ColumnWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.ColumnWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.ColumnWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.CommitEdit">
      <summary>Causes the data grid to commit the current edit to the data source and exit editing mode.</summary>
      <returns>true if the edit was commit successfully; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.CommitEdit(System.Windows.Controls.DataGridEditingUnit,System.Boolean)">
      <summary>Causes the data grid to commit the current edit to the data source, and optionally exit editing mode.</summary>
      <returns>true if the operation was successful; otherwise, false.</returns>
      <param name="editingUnit">Specifies whether to commit the edit for a <see cref="F:System.Windows.Controls.DataGridEditingUnit.Row" /> or <see cref="F:System.Windows.Controls.DataGridEditingUnit.Cell" />.</param>
      <param name="exitEditingMode">true to exit editing mode; otherwise, false.</param>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.CurrentCellChanged">
      <summary>Occurs when a different cell becomes the current cell. </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CurrentColumn">
      <summary>Gets or sets the column that contains the current cell.</summary>
      <returns>The column that contains the current cell.</returns>
      <exception cref="T:System.ArgumentNullException">When setting this property, the specified value is null.</exception>
      <exception cref="T:System.ArgumentException">When setting this property, the specified column is not in this <see cref="T:System.Windows.Controls.DataGrid" />.</exception>
      <exception cref="T:System.InvalidOperationException">When setting this property, the specified column has a <see cref="P:System.Windows.Controls.DataGridColumn.Visibility" /> property value of <see cref="F:System.Windows.Visibility.Collapsed" />.-or-When changing the value of this property while the control is in editing mode, the edit cannot be committed or reverted.</exception>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CurrentItem">
      <summary>Gets the data item bound to the row that contains the current cell.</summary>
      <returns>The data item bound to the row that contains the current cell.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.DragIndicatorStyle">
      <summary>Gets or sets the style that is used when rendering the drag indicator that is displayed while dragging column headers.</summary>
      <returns>The style applied to column headers.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.DragIndicatorStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.DragIndicatorStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.DragIndicatorStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.DropLocationIndicatorStyle">
      <summary>Gets or sets the style that is used when rendering the column headers.</summary>
      <returns>The style applied to column headers.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.DropLocationIndicatorStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.DropLocationIndicatorStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.DropLocationIndicatorStyle" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.ExpandRowGroup(System.Windows.Data.CollectionViewGroup,System.Boolean)">
      <summary>Expands data grid row groups.</summary>
      <param name="collectionViewGroup">The data in the row group.</param>
      <param name="expandAllSubgroups">true to expand all subgroups of the row group; otherwise, false.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.FrozenColumnCount">
      <summary>Gets or sets the number of columns that the user cannot scroll horizontally.</summary>
      <returns>The number of non-scrolling columns. </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.FrozenColumnCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.FrozenColumnCount" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.FrozenColumnCount" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.GetGroupFromItem(System.Object,System.Int32)">
      <summary>Gets the row group that the specified item belongs to.</summary>
      <returns>The row group that the specified item belongs to.</returns>
      <param name="item">The item to find the group for.</param>
      <param name="groupLevel">The group sub level that the item is in.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.GridLinesVisibility">
      <summary>Gets or sets a value that indicates which grid lines separating inner cells are shown.</summary>
      <returns>One of the enumeration values indicating which grid lines are shown. The default is <see cref="F:System.Windows.Controls.DataGridGridLinesVisibility.All" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.GridLinesVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.GridLinesVisibility" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.GridLinesVisibility" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.HeadersVisibility">
      <summary>Gets or sets a value that indicates the visibility of row and column headers.</summary>
      <returns>One of the enumeration values that indicates the visibility of row and column headers. The default is <see cref="F:System.Windows.Controls.DataGridHeadersVisibility.Column" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.HeadersVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.HeadersVisibility" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.HeadersVisibility" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.HorizontalGridLinesBrush">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint grid lines separating rows.</summary>
      <returns>The brush that is used to paint horizontal grid lines. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of opaque grey (ARGB value #FFDFE3E6).</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.HorizontalGridLinesBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.HorizontalGridLinesBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.HorizontalGridLinesBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.HorizontalScrollBarVisibility">
      <summary>Gets or sets a value that indicates how the horizontal scroll bar is displayed.</summary>
      <returns>One of the enumeration values that specifies the horizontal scroll bar visibility. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Auto" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.HorizontalScrollBarVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.HorizontalScrollBarVisibility" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.HorizontalScrollBarVisibility" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.IsReadOnly">
      <summary>Gets or sets a value that indicates whether the user can edit the values in the control.</summary>
      <returns>true if the control is read-only; otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">When setting this property to true while the control is in editing mode, the edit cannot be committed or reverted. </exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.IsReadOnly" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.IsReadOnly" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.IsValid">
      <summary>Gets a value that indicates whether data in the grid is valid.</summary>
      <returns>true if the data is valid; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.IsValidProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.IsValid" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.IsValid" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.ItemsSource">
      <summary>Gets or sets a collection that is used to generate the content of the control.</summary>
      <returns>The collection that is used to generate the content of the control. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.ItemsSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.ItemsSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.ItemsSource" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.LoadingRow">
      <summary>Occurs after a <see cref="T:System.Windows.Controls.DataGridRow" /> is instantiated, so that you can customize it before it is used.</summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.LoadingRowDetails">
      <summary>Occurs when a new row details template is applied to a row, so that you can customize the details section before it is used.</summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.LoadingRowGroup">
      <summary>Occurs when a row group header is loading, so that you can customize the header before it is used.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.MaxColumnWidth">
      <summary>Gets or sets the maximum width of columns in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
      <returns>The maximum column width in pixels. The default is <see cref="F:System.Double.PositiveInfinity" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">When setting this property, the specified value is less than zero or less than <see cref="P:System.Windows.Controls.DataGrid.MinColumnWidth" />.</exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.MaxColumnWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.MaxColumnWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.MaxColumnWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.MeasureOverride(System.Windows.Size)">
      <summary>Measures the children of a <see cref="T:System.Windows.Controls.DataGrid" /> in preparation of arranging them during the <see cref="M:System.Windows.Controls.DataGrid.ArrangeOverride(System.Windows.Size)" /> pass. </summary>
      <returns>The size that the <see cref="T:System.Windows.Controls.DataGrid" /> determines it needs during layout, based on its calculations of child object allotted sizes.</returns>
      <param name="availableSize">The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.MinColumnWidth">
      <summary>Gets or sets the minimum width of columns in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
      <returns>The minimum column width in pixels. The default is 20.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">When setting this property, the specified value is less than zero or greater than <see cref="P:System.Windows.Controls.DataGrid.MaxColumnWidth" />.</exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.MinColumnWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.MinColumnWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.MinColumnWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.DataGrid" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnAutoGeneratingColumn(System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.AutoGeneratingColumn" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnBeginningEdit(System.Windows.Controls.DataGridBeginningEditEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.BeginningEdit" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnCellEditEnded(System.Windows.Controls.DataGridCellEditEndedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.CellEditEnded" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnCellEditEnding(System.Windows.Controls.DataGridCellEditEndingEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.CellEditEnding" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnColumnDisplayIndexChanged(System.Windows.Controls.DataGridColumnEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged" /> event. </summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnColumnReordered(System.Windows.Controls.DataGridColumnEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnReordered" /> event. </summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnColumnReordering(System.Windows.Controls.DataGridColumnReorderingEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnReordering" /> event. </summary>
      <param name="e">The event data. </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" /> for the <see cref="T:System.Windows.Controls.DataGrid" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnCurrentCellChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.CurrentCellChanged" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnLoadingRow(System.Windows.Controls.DataGridRowEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.LoadingRow" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnLoadingRowDetails(System.Windows.Controls.DataGridRowDetailsEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.LoadingRowDetails" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnLoadingRowGroup(System.Windows.Controls.DataGridRowGroupHeaderEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.LoadingRowGroup" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnPreparingCellForEdit(System.Windows.Controls.DataGridPreparingCellForEditEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.PreparingCellForEdit" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnRowDetailsVisibilityChanged(System.Windows.Controls.DataGridRowDetailsEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnRowEditEnded(System.Windows.Controls.DataGridRowEditEndedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.RowEditEnded" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnRowEditEnding(System.Windows.Controls.DataGridRowEditEndingEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.RowEditEnding" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.SelectionChanged" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnUnloadingRow(System.Windows.Controls.DataGridRowEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.UnloadingRow" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnUnloadingRowDetails(System.Windows.Controls.DataGridRowDetailsEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.UnloadingRowDetails" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnUnloadingRowGroup(System.Windows.Controls.DataGridRowGroupHeaderEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.UnloadingRowGroup" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.PreparingCellForEdit">
      <summary>Occurs when a cell in a <see cref="T:System.Windows.Controls.DataGridTemplateColumn" /> enters editing mode.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowBackground">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint row backgrounds.</summary>
      <returns>The brush that is used to paint row backgrounds. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of semi-opaque light grey (ARGB value #55E9EEF4).</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowBackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowBackground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowBackground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowDetailsTemplate">
      <summary>Gets or sets the template that is used to display the content of the details section of rows.</summary>
      <returns>The template that is used to display row details. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowDetailsTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsTemplate" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode" /> property value changes.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode">
      <summary>Gets or sets a value that indicates when the details sections of rows are displayed.</summary>
      <returns>An enumeration value that specifies the visibility of row details. The default is <see cref="F:System.Windows.Controls.DataGridRowDetailsVisibilityMode.VisibleWhenSelected" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowDetailsVisibilityModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.RowEditEnded">
      <summary>Occurs when a row edit has been committed or canceled.</summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.RowEditEnding">
      <summary>Occurs when a row edit is ending.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowGroupHeaderStyles">
      <summary>Gets the style that is used when rendering the row group header.</summary>
      <returns>The style applied to row group headers.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowHeaderStyle">
      <summary>Gets or sets the style that is used when rendering the row headers.</summary>
      <returns>The style applied to row headers. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowHeaderStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowHeaderStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowHeaderStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowHeaderWidth">
      <summary>Gets or sets the width of the row header column.</summary>
      <returns>The width of the row header column in pixels. The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">When setting this property, the specified value is less than 4 or greater than 32768.</exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowHeaderWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowHeaderWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowHeaderWidth" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowHeight">
      <summary>Gets or sets the standard height of rows in the control.</summary>
      <returns>The standard height of rows in pixels. The default is 22.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">When setting this property, the specified value is greater than 65536.</exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowStyle">
      <summary>Gets or sets the style that is used when rendering the rows.</summary>
      <returns>The style applied to rows. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowStyle" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.ScrollIntoView(System.Object,System.Windows.Controls.DataGridColumn)">
      <summary>Scrolls the <see cref="T:System.Windows.Controls.DataGrid" /> vertically to display the row for the specified data item and scrolls the <see cref="T:System.Windows.Controls.DataGrid" /> horizontally to display the specified column.</summary>
      <param name="item">The data item (row) to scroll to.</param>
      <param name="column">The column to scroll to.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.SelectedIndex">
      <summary>Gets or sets the index of the current selection.</summary>
      <returns>The index of the current selection, or -1 if the selection is empty.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.SelectedIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.SelectedIndex" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.SelectedIndex" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.SelectedItem">
      <summary>Gets or sets the data item corresponding to the selected row.</summary>
      <returns>The data item corresponding to the selected row.</returns>
      <exception cref="T:System.InvalidOperationException">When setting this property to a new value while the control is in editing mode, the edit cannot be committed or reverted. </exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.SelectedItemProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.SelectedItem" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.SelectedItem" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.SelectedItems">
      <summary>Gets a list that contains the data items corresponding to the selected rows.</summary>
      <returns>A list of the data items corresponding to the selected rows.</returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.SelectionChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.DataGrid.SelectedItem" /> or <see cref="P:System.Windows.Controls.DataGrid.SelectedItems" /> property value changes.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.SelectionMode">
      <summary>Gets or sets the selection behavior of the data grid.</summary>
      <returns>One of the enumeration values specifying the selection behavior. The default is <see cref="F:System.Windows.Controls.DataGridSelectionMode.Extended" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.SelectionModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.SelectionMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.SelectionMode" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.UnloadingRow">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.DataGridRow" /> object becomes available for reuse.</summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.UnloadingRowDetails">
      <summary>Occurs when a row details element becomes available for reuse.</summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.UnloadingRowGroup">
      <summary>Occurs when a row group is unloading.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.VerticalGridLinesBrush">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint grid lines separating columns.</summary>
      <returns>The brush that is used to paint vertical grid lines. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of opaque grey (ARGB value #FFDFE3E6).</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.VerticalGridLinesBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.VerticalGridLinesBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.VerticalGridLinesBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.VerticalScrollBarVisibility">
      <summary>Gets or sets a value that indicates how the vertical scroll bar is displayed.</summary>
      <returns>One of the enumeration values that specifies the vertical scroll bar visibility. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Auto" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.VerticalScrollBarVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGrid.VerticalScrollBarVisibility" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGrid.VerticalScrollBarVisibility" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.DataGrid.AutoGeneratingColumn" /> event. </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.#ctor(System.String,System.Type,System.Windows.Controls.DataGridColumn)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs" /> class.</summary>
      <param name="propertyName">The name of the property bound to the generated column.</param>
      <param name="propertyType">The <see cref="T:System.Type" /> of the property bound to the generated column.</param>
      <param name="column">The generated column.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.Column">
      <summary>Gets the generated column.</summary>
      <returns>The generated column.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.PropertyName">
      <summary>Gets the name of the property bound to the generated column.</summary>
      <returns>The name of the property bound to the generated column.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.PropertyType">
      <summary>Gets the <see cref="T:System.Type" /> of the property bound to the generated column.</summary>
      <returns>The <see cref="T:System.Type" /> of the property bound to the generated column.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridBeginningEditEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.DataGrid.BeginningEdit" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridBeginningEditEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridRow,System.Windows.RoutedEventArgs)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridBeginningEditEventArgs" /> class.</summary>
      <param name="column">The column that contains the cell to be edited.</param>
      <param name="row">The row that contains the cell to be edited.</param>
      <param name="editingEventArgs">Information about the user gesture that caused the cell to enter edit mode.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridBeginningEditEventArgs.Column">
      <summary>Gets the column that contains the cell to be edited.</summary>
      <returns>The column that contains the cell to be edited.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridBeginningEditEventArgs.EditingEventArgs">
      <summary>Gets information about the user gesture that caused the cell to enter edit mode.</summary>
      <returns>Information about the user gesture that caused the cell to enter edit mode.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridBeginningEditEventArgs.Row">
      <summary>Gets the row that contains the cell to be edited.</summary>
      <returns>The row that contains the cell to be edited.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridBoundColumn">
      <summary>Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that can bind to a property in the grid's data source.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridBoundColumn.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridBoundColumn" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataGridBoundColumn.Binding">
      <summary>Gets or sets the binding that associates the column with a property in the data source.</summary>
      <returns>The binding to the column's display property in the data source. The default is null.</returns>
      <exception cref="T:System.InvalidOperationException">When changing the value of this property, the current cell edit cannot be committed or reverted. </exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridBoundColumn.EditingElementStyle">
      <summary>Gets or sets the style that is used when rendering the element that the column displays for a cell in editing mode.</summary>
      <returns>The style that is used when rendering an editing element. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridBoundColumn.ElementStyle">
      <summary>Gets or sets the style that is used when rendering the element that the column displays for a cell that is not in editing mode.</summary>
      <returns>The style that is used when rendering a display-only element. The default is null.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridCell">
      <summary>Represents an individual <see cref="T:System.Windows.Controls.DataGrid" /> cell.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridCell.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridCell" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataGridCell.IsValid">
      <summary>Gets a value that indicates whether the data in a cell is valid.</summary>
      <returns>true if the data is valid; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridCell.IsValidProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridCell.IsValid" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridCell.IsValid" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridCell.OnApplyTemplate">
      <summary>Builds the visual tree for the cell control when a new template is applied.</summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridCellEditEndedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.DataGrid.CellEditEnded" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridCellEditEndedEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridRow,System.Windows.Controls.DataGridEditAction)">
      <summary>Instantiates a new instance of the <see cref="T:System.Windows.Controls.DataGridCellEditEndedEventArgs" /> class.</summary>
      <param name="column">The column that contains the cell that has just exited edit mode.</param>
      <param name="row">The row that contains the cell that has just exited edit mode.</param>
      <param name="editAction">The <see cref="T:System.Windows.Controls.DataGridEditAction" /> that indicates whether the edit was committed or canceled.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridCellEditEndedEventArgs.Column">
      <summary>The column that contains the cell that has just exited edit mode.</summary>
      <returns>The column that contains the cell that has just exited edit mode.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridCellEditEndedEventArgs.EditAction">
      <summary>The <see cref="T:System.Windows.Controls.DataGridEditAction" /> that indicates whether the edit was committed or canceled.</summary>
      <returns>One of the <see cref="T:System.Windows.Controls.DataGridEditAction" /> enumeration values that indicates whether this edit event was committed or canceled.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridCellEditEndedEventArgs.Row">
      <summary>The row that contains the cell that has just exited edit mode.</summary>
      <returns>The row that contains the cell that has just exited edit mode.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridCellEditEndingEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.DataGrid.CellEditEnding" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridCellEditEndingEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridRow,System.Windows.FrameworkElement,System.Windows.Controls.DataGridEditAction)">
      <summary>Instantiates a new instance of the <see cref="T:System.Windows.Controls.DataGridCellEditEndingEventArgs" /> class.</summary>
      <param name="column">The column that contains the cell that is about to exit edit mode.</param>
      <param name="row">The row that contains the cell that is about to exit edit mode.</param>
      <param name="editingElement">The element displayed when the cell is in edit mode.</param>
      <param name="editAction">The <see cref="T:System.Windows.Controls.DataGridEditAction" /> that indicates whether the edit will be committed or canceled.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridCellEditEndingEventArgs.Column">
      <summary>Gets the column that contains the cell that is about to exit edit mode.</summary>
      <returns>The column that contains the cell that is about to exit edit mode.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridCellEditEndingEventArgs.EditAction">
      <summary>The <see cref="T:System.Windows.Controls.DataGridEditAction" /> that indicates whether the edit will be committed or canceled.</summary>
      <returns>One of the <see cref="T:System.Windows.Controls.DataGridEditAction" /> enumeration values that indicates whether this edit event will be committed or canceled.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridCellEditEndingEventArgs.EditingElement">
      <summary>Gets the element displayed when the cell is in edit mode.</summary>
      <returns>The element displayed when the cell is in edit mode.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridCellEditEndingEventArgs.Row">
      <summary>Gets the row that contains the cell that is about to exit edit mode.</summary>
      <returns>The row that contains the cell that is about to exit edit mode.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridCheckBoxColumn">
      <summary>Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that hosts <see cref="T:System.Windows.Controls.CheckBox" /> controls in its cells.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridCheckBoxColumn" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
      <summary>Causes the column cell being edited to revert to the specified value.</summary>
      <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
      <param name="uneditedValue">The previous, unedited value in the cell being edited.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>Gets a <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</summary>
      <returns>A new <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
      <param name="cell">The cell that will contain the generated element.</param>
      <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>Gets a read-only <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</summary>
      <returns>A new, read-only <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
      <param name="cell">The cell that will contain the generated element.</param>
      <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridCheckBoxColumn.IsThreeState">
      <summary>Gets or sets a value that indicates whether the hosted <see cref="T:System.Windows.Controls.CheckBox" /> controls allow three states or two. </summary>
      <returns>true if the hosted controls support three states; false if they support two states. The default is false. </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
      <summary>Called when a cell in the column enters editing mode.</summary>
      <returns>The unedited value. </returns>
      <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
      <param name="editingEventArgs">Information about the user gesture that is causing a cell to enter editing mode.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
      <summary>Refreshes the contents of a cell in the column in response to a column property value change.</summary>
      <param name="element">The <see cref="T:System.Windows.Controls.CheckBox" /> returned by the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property of the cell to update.</param>
      <param name="propertyName">The name of the column property that has changed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is not a <see cref="T:System.Windows.Controls.CheckBox" />.</exception>
    </member>
    <member name="T:System.Windows.Controls.DataGridColumn">
      <summary>Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridColumn" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.ActualWidth">
      <summary>Gets the current width of the column in pixels.</summary>
      <returns>The width of the column in pixels. Returns 0 if the column has not been added to a <see cref="T:System.Windows.Controls.DataGrid" />.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
      <summary>When overridden in a derived class, causes the column cell being edited to revert to the unedited value.</summary>
      <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
      <param name="uneditedValue">The previous, unedited value in the cell being edited.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.CanUserReorder">
      <summary>Gets or sets a value that indicates whether the user can change the column display position by dragging the column header.</summary>
      <returns>true if the user can drag the column header to a new position; otherwise, false. The default is the current <see cref="P:System.Windows.Controls.DataGrid.CanUserReorderColumns" /> property value.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.CanUserResize">
      <summary>Gets or sets a value that indicates whether the user can adjust the column width using the mouse.</summary>
      <returns>true if the user can resize the column; false if the user cannot resize the column. The default is the current <see cref="P:System.Windows.Controls.DataGrid.CanUserResizeColumns" /> property value.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.CanUserSort">
      <summary>Gets or sets a value that indicates whether the user can sort the column by clicking the column header.</summary>
      <returns>true if the user can sort the column; false if the user cannot sort the column. The default is the current <see cref="P:System.Windows.Controls.DataGrid.CanUserSortColumns" /> property value.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.CellStyle">
      <summary>Gets or sets the style that is used when rendering cells in the column.</summary>
      <returns>The style that is used when rendering cells in the column. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.DisplayIndex">
      <summary>Gets or sets the display position of the column relative to the other columns in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
      <returns>The zero-based position of the column as it is displayed in the associated <see cref="T:System.Windows.Controls.DataGrid" />. The default is the index of the corresponding <see cref="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)" /> in the <see cref="P:System.Windows.Controls.DataGrid.Columns" /> collection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">When setting this property, the specified value is less than -1 or equal to <see cref="F:System.Int32.MaxValue" />.-or-When setting this property on a column in a <see cref="T:System.Windows.Controls.DataGrid" />, the specified value is less than zero or greater than or equal to the number of columns in the <see cref="T:System.Windows.Controls.DataGrid" />.</exception>
      <exception cref="T:System.InvalidOperationException">When setting this property, the <see cref="T:System.Windows.Controls.DataGrid" /> is already making <see cref="P:System.Windows.Controls.DataGridColumn.DisplayIndex" /> adjustments. For example, this exception is thrown when you attempt to set <see cref="P:System.Windows.Controls.DataGridColumn.DisplayIndex" /> in a <see cref="E:System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged" /> event handler.-or-When setting this property, the specified value would result in a frozen column being displayed in the range of unfrozen columns, or an unfrozen column being displayed in the range of frozen columns.</exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.DragIndicatorStyle">
      <summary>Gets or sets the style that is used to render the column while it is being dragged.</summary>
      <returns>The style applied while the column is being dragged.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>When overridden in a derived class, gets an editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</summary>
      <returns>A new editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
      <param name="cell">The cell that will contain the generated element.</param>
      <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>When overridden in a derived class, gets a read-only element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</summary>
      <returns>A new, read-only element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
      <param name="cell">The cell that will contain the generated element.</param>
      <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.GetCellContent(System.Object)">
      <summary>Gets the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property value for the cell at the intersection of this column and the row that represents the specified data item.</summary>
      <returns>The cell content. Returns null if the row containing <paramref name="dataItem" /> is not found.</returns>
      <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataItem" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This column has not been added to a <see cref="T:System.Windows.Controls.DataGrid" />.</exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.GetCellContent(System.Windows.Controls.DataGridRow)">
      <summary>Gets the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property value for the cell at the intersection of this column and the specified row.</summary>
      <returns>The cell content.</returns>
      <param name="dataGridRow">The row that contains the intended cell.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataGridRow" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This column has not been added to a <see cref="T:System.Windows.Controls.DataGrid" />.</exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.GetColumnContainingElement(System.Windows.FrameworkElement)">
      <summary>Returns the column that contains the specified element.</summary>
      <returns>The column that contains the element, or null if the element was not found.</returns>
      <param name="element">An element contained in a column.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.Header">
      <summary>Gets or sets the content of the column header.</summary>
      <returns>The column header content. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.HeaderStyle">
      <summary>Gets or sets the style that is used when rendering the column header.</summary>
      <returns>The style that is used when rendering the column header, or null to use the <see cref="P:System.Windows.Controls.DataGrid.ColumnHeaderStyle" /> setting. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.IsAutoGenerated">
      <summary>Gets a value that indicates whether the column is auto-generated.</summary>
      <returns>true if the column is auto-generated; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.IsFrozen">
      <summary>Gets a value that indicates whether the column is prevented from scrolling horizontally.</summary>
      <returns>true if the column cannot be scrolled horizontally; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.IsReadOnly">
      <summary>Gets or sets a value that indicates whether cells in the column can be edited.</summary>
      <returns>true if cells in the column cannot be edited; otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">When setting this property to false on a column derived from <see cref="T:System.Windows.Controls.DataGridBoundColumn" />, the column <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property indicates a data source that is read-only.-or-When setting this property to true on a column with a cell that is in edit mode, the cell edit cannot be committed or reverted. </exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.MaxWidth">
      <summary>Gets or sets the maximum column width in pixels.</summary>
      <returns>The maximum column width in pixels. The default is <see cref="F:System.Double.PositiveInfinity" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">When setting this property, the specified value is less than 0.-or-The specified value is less than the <see cref="P:System.Windows.Controls.DataGridColumn.MinWidth" />.-or-The specified value is less than the <see cref="P:System.Windows.Controls.DataGrid.MinColumnWidth" /> and the <see cref="P:System.Windows.Controls.DataGridColumn.MinWidth" /> is not set.</exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.MinWidth">
      <summary>Gets or sets the minimum column width in pixels.</summary>
      <returns>The minimum column width in pixels, or 0 if the value is not set. The default is 0.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">When setting this property, the specified value is less than 0.-or-The specified value is greater than the <see cref="P:System.Windows.Controls.DataGridColumn.MaxWidth" />.-or-The specified value is greater than the <see cref="P:System.Windows.Controls.DataGrid.MaxColumnWidth" /> and the <see cref="P:System.Windows.Controls.DataGridColumn.MaxWidth" /> is not set.</exception>
      <exception cref="T:System.ArgumentException">The specified value is <see cref="F:System.Double.NaN" />.-or-The specified value is <see cref="F:System.Double.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.NotifyPropertyChanged(System.String)">
      <summary>Called by a specific column type when one of its properties changes and its current cells need to be updated.</summary>
      <param name="propertyName">The name of the column property that has changed.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
      <summary>When overridden in a derived class, called when a cell in the column enters editing mode.</summary>
      <returns>The unedited value.</returns>
      <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
      <param name="editingEventArgs">Information about the user gesture that is causing a cell to enter editing mode.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
      <summary>Refreshes the contents of a cell in the column in response to a column property value change.</summary>
      <param name="element">The element returned by the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property of the cell to refresh.</param>
      <param name="propertyName">The name of the column property that has changed.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.SortMemberPath">
      <summary>Gets or sets a property name, or a period-delimited hierarchy of property names, that indicates the member to sort by.</summary>
      <returns>The path to the data-item member to sort by.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.Visibility">
      <summary>Gets or sets the visibility of the column.</summary>
      <returns>An enumeration value that specifies the column visibility. The default is <see cref="F:System.Windows.Visibility.Visible" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.Width">
      <summary>Gets or sets the column width or automatic sizing mode.</summary>
      <returns>A structure that represents the column width or automatic sizing mode. The default is the <see cref="P:System.Windows.Controls.DataGrid.ColumnWidth" /> property value.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridColumnEventArgs">
      <summary>Provides data for <see cref="T:System.Windows.Controls.DataGrid" /> column-related events.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumnEventArgs.#ctor(System.Windows.Controls.DataGridColumn)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridColumnEventArgs" /> class.</summary>
      <param name="column">The column that the event occurs for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumnEventArgs.Column">
      <summary>Gets the column that the event occurs for.</summary>
      <returns>The column that the event occurs for.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridColumnReorderingEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.DataGrid.ColumnReordering" /> event. </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumnReorderingEventArgs.#ctor(System.Windows.Controls.DataGridColumn)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridColumnReorderingEventArgs" /> class. </summary>
      <param name="dataGridColumn">The column that is being moved.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumnReorderingEventArgs.Column">
      <summary>Gets the column that is being moved.</summary>
      <returns>The column that is being moved.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumnReorderingEventArgs.DragIndicator">
      <summary>Gets or sets the template that is used to display the visual indicator of a column header while the user drags it.</summary>
      <returns>The template that is used to display a dragged column header. </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumnReorderingEventArgs.DropLocationIndicator">
      <summary>Gets or sets the template that is used to display the visual indicator of the current drop location during a column drag operation.</summary>
      <returns>The template that is used to display the drop location indicator during a column drag operation. </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridEditAction">
      <summary>Specifies constants that define what action was taken to end an edit.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridEditAction.Cancel">
      <summary>The edit was canceled.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridEditAction.Commit">
      <summary>The edit was committed.</summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridEditingUnit">
      <summary>Specifies constants that define whether editing is enabled on a cell level or on a row level.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridEditingUnit.Cell">
      <summary>Cell editing is enabled.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridEditingUnit.Row">
      <summary>Row editing is enabled.</summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridGridLinesVisibility">
      <summary>Specifies constants that define which grid lines separating <see cref="T:System.Windows.Controls.DataGrid" /> inner cells are shown.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridGridLinesVisibility.None">
      <summary>No grid lines are shown.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridGridLinesVisibility.Horizontal">
      <summary>Only horizontal grid lines, which separate rows, are shown.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridGridLinesVisibility.Vertical">
      <summary>Only vertical grid lines, which separate columns, are shown.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridGridLinesVisibility.All">
      <summary>Both horizontal and vertical grid lines are shown.</summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridHeadersVisibility">
      <summary>Specifies constants that define which <see cref="T:System.Windows.Controls.DataGrid" /> header cells are displayed. </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridHeadersVisibility.All">
      <summary>Both column and row header cells are displayed.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridHeadersVisibility.Column">
      <summary>Only column header cells are displayed.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridHeadersVisibility.Row">
      <summary>Only row header cells are displayed.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridHeadersVisibility.None">
      <summary>No header cells are displayed.</summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridLength">
      <summary>Represents the lengths of elements within the <see cref="T:System.Windows.Controls.DataGrid" /> control.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridLength" /> class. </summary>
      <param name="value">The absolute pixel value to initialize the length to.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.Auto">
      <summary>Gets a <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the standard automatic sizing mode.</summary>
      <returns>A <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the standard automatic sizing mode.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Windows.Controls.DataGridLength" />.</summary>
      <returns>true if the specified object is a <see cref="T:System.Windows.Controls.DataGridLength" /> with the same value or sizing mode as the current <see cref="T:System.Windows.Controls.DataGridLength" />; otherwise, false.</returns>
      <param name="obj">The object to compare to the current instance.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.Equals(System.Windows.Controls.DataGridLength)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Controls.DataGridLength" /> is equal to the current <see cref="T:System.Windows.Controls.DataGridLength" />.</summary>
      <returns>true if the specified object is a <see cref="T:System.Windows.Controls.DataGridLength" /> with the same value or sizing mode as the current <see cref="T:System.Windows.Controls.DataGridLength" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Windows.Controls.DataGridLength" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.GetHashCode">
      <summary>Gets a hash code for the <see cref="T:System.Windows.Controls.DataGridLength" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Windows.Controls.DataGridLength" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.IsAbsolute">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Controls.DataGridLength" /> instance holds an absolute value.</summary>
      <returns>true if this instance holds an absolute value; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.IsAuto">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Controls.DataGridLength" /> instance uses the standard automatic sizing mode.</summary>
      <returns>true if this instance uses the standard automatic sizing mode; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.IsSizeToCells">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Controls.DataGridLength" /> instance uses the cell-based automatic sizing mode.</summary>
      <returns>true if this instance uses the cell-based automatic sizing mode; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.IsSizeToHeader">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Controls.DataGridLength" /> instance uses the header-based automatic sizing mode.</summary>
      <returns>true if this instance uses the header-based automatic sizing mode; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.op_Equality(System.Windows.Controls.DataGridLength,System.Windows.Controls.DataGridLength)">
      <summary>Compares two <see cref="T:System.Windows.Controls.DataGridLength" /> structures for equality.</summary>
      <returns>true if the two <see cref="T:System.Windows.Controls.DataGridLength" /> instances have the same value or sizing mode; otherwise, false.</returns>
      <param name="gl1">The first <see cref="T:System.Windows.Controls.DataGridLength" /> instance to compare.</param>
      <param name="gl2">The second <see cref="T:System.Windows.Controls.DataGridLength" /> instance to compare.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.op_Inequality(System.Windows.Controls.DataGridLength,System.Windows.Controls.DataGridLength)">
      <summary>Compares two <see cref="T:System.Windows.Controls.DataGridLength" /> structures to determine whether they are not equal.</summary>
      <returns>true if the two <see cref="T:System.Windows.Controls.DataGridLength" /> instances do not have the same value or sizing mode; otherwise, false.</returns>
      <param name="gl1">The first <see cref="T:System.Windows.Controls.DataGridLength" /> instance to compare.</param>
      <param name="gl2">The second <see cref="T:System.Windows.Controls.DataGridLength" /> instance to compare.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.SizeToCells">
      <summary>Gets a <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the cell-based automatic sizing mode.</summary>
      <returns>A <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the cell-based automatic sizing mode.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.SizeToHeader">
      <summary>Gets a <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the header-based automatic sizing mode.</summary>
      <returns>A <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the header-based automatic sizing mode.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.Value">
      <summary>Gets the absolute value of the <see cref="T:System.Windows.Controls.DataGridLength" /> in pixels.</summary>
      <returns>The absolute value of the <see cref="T:System.Windows.Controls.DataGridLength" /> in pixels.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridLengthConverter">
      <summary>Converts instances of other types to and from <see cref="T:System.Windows.Controls.DataGridLength" /> instances.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridLengthConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridLengthConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridLengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether conversion is possible from the specified type to a <see cref="T:System.Windows.Controls.DataGridLength" />.</summary>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
      <param name="context">An object that provides a format context.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridLengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether conversion is possible to the specified type from a <see cref="T:System.Windows.Controls.DataGridLength" />.</summary>
      <returns>true if <paramref name="destinationType" /> is a <see cref="T:System.String" /> type; otherwise, false.</returns>
      <param name="context">An object that provides a format context.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridLengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified value to a <see cref="T:System.Windows.Controls.DataGridLength" /> instance.</summary>
      <returns>The converted value.</returns>
      <param name="context">An object that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The value to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridLengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified <see cref="T:System.Windows.Controls.DataGridLength" /> instance to an instance of the specified type.</summary>
      <returns>The converted value.</returns>
      <param name="context">An object that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Windows.Controls.DataGridLength" /> to convert.</param>
      <param name="destinationType">The type to convert the value to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destinationType" /> is not a <see cref="T:System.String" />.- or -<paramref name="value" /> is not a <see cref="T:System.Windows.Controls.DataGridLength" />.</exception>
    </member>
    <member name="T:System.Windows.Controls.DataGridPreparingCellForEditEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.DataGrid.PreparingCellForEdit" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridRow,System.Windows.RoutedEventArgs,System.Windows.FrameworkElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridPreparingCellForEditEventArgs" /> class.</summary>
      <param name="column">The column that contains the cell to be edited.</param>
      <param name="row">The row that contains the cell to be edited.</param>
      <param name="editingEventArgs">Information about the user gesture that caused the cell to enter edit mode.</param>
      <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.Column">
      <summary>Gets the column that contains the cell to be edited.</summary>
      <returns>The column that contains the cell to be edited.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.EditingElement">
      <summary>Gets the element that the column displays for a cell in editing mode.</summary>
      <returns>The element that the column displays for a cell in editing mode.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.EditingEventArgs">
      <summary>Gets information about the user gesture that caused the cell to enter edit mode.</summary>
      <returns>Information about the user gesture that caused the cell to enter edit mode.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.Row">
      <summary>Gets the row that contains the cell to be edited.</summary>
      <returns>The row that contains the cell to be edited.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridRow">
      <summary>Represents a <see cref="T:System.Windows.Controls.DataGrid" /> row.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridRow" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges the content of the <see cref="T:System.Windows.Controls.DataGridRow" />.</summary>
      <returns>The actual size used by the <see cref="T:System.Windows.Controls.DataGridRow" />.</returns>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridRow.DetailsTemplate">
      <summary>Gets or sets the template that is used to display the details section of the row. </summary>
      <returns>The template that is used to display the row details section or null to use the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsTemplate" /> setting. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRow.DetailsTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridRow.DetailsTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridRow.DetailsTemplate" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRow.DetailsVisibility">
      <summary>Gets or sets a value that indicates when the details section of the row is displayed.</summary>
      <returns>An enumeration value that specifies the visibility of row details. The default is <see cref="F:System.Windows.Visibility.Collapsed" />.</returns>
      <exception cref="T:System.InvalidOperationException">The row has not been added to a <see cref="T:System.Windows.Controls.DataGrid" />.</exception>
    </member>
    <member name="F:System.Windows.Controls.DataGridRow.DetailsVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridRow.DetailsVisibility" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridRow.DetailsVisibility" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.GetIndex">
      <summary>Returns the index of the current row.</summary>
      <returns>The index of the current row.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.GetRowContainingElement(System.Windows.FrameworkElement)">
      <summary>Returns the <see cref="T:System.Windows.Controls.DataGridRow" /> that contains the specified element.</summary>
      <returns>The <see cref="T:System.Windows.Controls.DataGridRow" /> that contains the specified element.</returns>
      <param name="element">An element contained in a row to be found.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridRow.Header">
      <summary>Gets or sets the row header.</summary>
      <returns>The row header. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRow.HeaderProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridRow.Header" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridRow.Header" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRow.HeaderStyle">
      <summary>Gets or sets the style that is used when rendering the row header.</summary>
      <returns>The style that is used when rendering the row header. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRow.HeaderStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridRow.HeaderStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridRow.HeaderStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRow.IsValid">
      <summary>Gets a value that indicates whether the data in a row is valid.</summary>
      <returns>true if the data is valid; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRow.IsValidProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridRow.IsValid" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridRow.IsValid" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.MeasureOverride(System.Windows.Size)">
      <summary>Measures the children of a <see cref="T:System.Windows.Controls.DataGridRow" /> to prepare for arranging them during the <see cref="M:System.Windows.Controls.DataGridRow.ArrangeOverride(System.Windows.Size)" /> pass. </summary>
      <returns>The size that the <see cref="T:System.Windows.Controls.DataGridRow" /> determines it needs during layout, based on its calculations of child object allocated sizes.</returns>
      <param name="availableSize">The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.OnApplyTemplate">
      <summary>Builds the visual tree for the column header when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer" /> for the <see cref="T:System.Windows.Controls.DataGridRow" /> object.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridRowDetailsEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.DataGrid.LoadingRowDetails" />, <see cref="E:System.Windows.Controls.DataGrid.UnloadingRowDetails" />, and <see cref="E:System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged" /> events.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowDetailsEventArgs.#ctor(System.Windows.Controls.DataGridRow,System.Windows.FrameworkElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridRowDetailsEventArgs" /> class. </summary>
      <param name="row">The row that the event occurs for.</param>
      <param name="detailsElement">The row details section as a framework element.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowDetailsEventArgs.DetailsElement">
      <summary>Gets the row details section as a framework element.</summary>
      <returns>The row details section.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowDetailsEventArgs.Row">
      <summary>Gets the row that the event occurs for.</summary>
      <returns>The row that the event occurs for.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridRowDetailsVisibilityMode">
      <summary>Specifies constants that define when <see cref="T:System.Windows.Controls.DataGrid" /> row details are displayed.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridRowDetailsVisibilityMode.Collapsed">
      <summary>The row details section is not displayed for any rows.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridRowDetailsVisibilityMode.Visible">
      <summary>The row details section is displayed for all rows.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridRowDetailsVisibilityMode.VisibleWhenSelected">
      <summary>The row details section is displayed only for selected rows.</summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridRowEditEndedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.DataGrid.RowEditEnded" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowEditEndedEventArgs.#ctor(System.Windows.Controls.DataGridRow,System.Windows.Controls.DataGridEditAction)">
      <summary>Instantiates a new instance of the <see cref="T:System.Windows.Controls.DataGridRowEditEndedEventArgs" /> class.</summary>
      <param name="row">The row that has just exited edit mode.</param>
      <param name="editAction">The <see cref="T:System.Windows.Controls.DataGridEditAction" /> that indicates whether the edit was committed or canceled.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowEditEndedEventArgs.EditAction">
      <summary>The <see cref="T:System.Windows.Controls.DataGridEditAction" /> that indicates whether the edit was committed or canceled.</summary>
      <returns>One of the <see cref="T:System.Windows.Controls.DataGridEditAction" /> enumeration values that indicates whether this edit event was committed or canceled.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowEditEndedEventArgs.Row">
      <summary>The row has just exited edit mode.</summary>
      <returns>The row that has just exited edit mode.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridRowEditEndingEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.DataGrid.RowEditEnding" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowEditEndingEventArgs.#ctor(System.Windows.Controls.DataGridRow,System.Windows.Controls.DataGridEditAction)">
      <summary>Instantiates a new instance of the <see cref="T:System.Windows.Controls.DataGridRowEditEndingEventArgs" /> class.</summary>
      <param name="row">The row that contains the cell that is about to exit edit mode.</param>
      <param name="editAction">The <see cref="T:System.Windows.Controls.DataGridEditAction" /> that indicates whether the edit will be committed or canceled.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowEditEndingEventArgs.EditAction">
      <summary>The <see cref="T:System.Windows.Controls.DataGridEditAction" /> that indicates whether the edit will be committed or canceled.</summary>
      <returns>One of the <see cref="T:System.Windows.Controls.DataGridEditAction" /> enumeration values that indicates whether this edit event will be committed or canceled.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowEditEndingEventArgs.Row">
      <summary>The row that is about to exit edit mode.</summary>
      <returns>The row that is about to exit edit mode.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridRowEventArgs">
      <summary>Provides data for <see cref="T:System.Windows.Controls.DataGrid" /> row-related events.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowEventArgs.#ctor(System.Windows.Controls.DataGridRow)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridRowEventArgs" /> class.</summary>
      <param name="dataGridRow">The row that the event occurs for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataGridRow" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowEventArgs.Row">
      <summary>Gets the row that the event occurs for.</summary>
      <returns>The row that the event occurs for.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridRowGroupHeader">
      <summary>Represents the header of a <see cref="T:System.Windows.Controls.DataGrid" /> row group.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowGroupHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowGroupHeader.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges the contents of the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" />.</summary>
      <returns>The actual size used by the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" />.</returns>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowGroupHeader.HeaderStyle">
      <summary>The style applied to the header cell of a <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" />.</summary>
      <returns>The style applied to the header cell.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRowGroupHeader.HeaderStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridRowGroupHeader.HeaderStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridRowGroupHeader.HeaderStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowGroupHeader.ItemCountVisibility">
      <summary>Gets or sets a value that indicates whether the item count is visible.</summary>
      <returns>One of the enumeration values that indicates whether the item count is visible.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRowGroupHeader.ItemCountVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridRowGroupHeader.ItemCountVisibility" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridRowGroupHeader.ItemCountVisibility" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowGroupHeader.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowGroupHeader.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer" /> for the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowGroupHeader.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Updates the state when the mouse is over the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" />.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowGroupHeader.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Updates the state when the mouse leaves the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" />.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowGroupHeader.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Updates the state when the left mouse button is pressed on the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" />.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowGroupHeader.PropertyName">
      <summary>Gets or sets the name of the property that this <see cref="T:System.Windows.Controls.DataGrid" /> row is bound to.</summary>
      <returns>The name of the property that this <see cref="T:System.Windows.Controls.DataGrid" /> row is bound to.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRowGroupHeader.PropertyNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridRowGroupHeader.PropertyName" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridRowGroupHeader.PropertyName" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowGroupHeader.PropertyNameVisibility">
      <summary>Gets or sets a value that indicates whether the property name is visible.</summary>
      <returns>One of the enumeration values that indicates whether the property name is visible.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRowGroupHeader.PropertyNameVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridRowGroupHeader.PropertyNameVisibility" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridRowGroupHeader.PropertyNameVisibility" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowGroupHeader.SublevelIndent">
      <summary>Gets or sets a value that indicates the amount that the children of the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" /> are indented.</summary>
      <returns>The amount that the children of the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" /> are indented.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRowGroupHeader.SublevelIndentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridRowGroupHeader.SublevelIndent" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridRowGroupHeader.SublevelIndent" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridRowGroupHeaderEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.DataGrid.LoadingRowGroup" /> and <see cref="E:System.Windows.Controls.DataGrid.UnloadingRowGroup" /> events.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowGroupHeaderEventArgs.#ctor(System.Windows.Controls.DataGridRowGroupHeader)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridRowGroupHeaderEventArgs" /> class.</summary>
      <param name="rowGroupHeader">The <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" /> that is being loaded or unloaded.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowGroupHeaderEventArgs.RowGroupHeader">
      <summary>Gets the <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" /> that is being loaded or unloaded.</summary>
      <returns>The <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" /> that is being loaded or unloaded.</returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridSelectionMode">
      <summary>Specifies constants that define the <see cref="T:System.Windows.Controls.DataGrid" /> selection modes.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridSelectionMode.Extended">
      <summary>The user can select multiple items while holding down the SHIFT or CTRL keys.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridSelectionMode.Single">
      <summary>The user can select only one item at a time.</summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridTemplateColumn">
      <summary>Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that hosts template-specified content in its cells.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridTemplateColumn.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridTemplateColumn" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridTemplateColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
      <summary>Ends the edit on a data grid cell and reverts any changes.</summary>
      <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
      <param name="uneditedValue">The value of the data prior to the edit.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate">
      <summary>Gets or sets the template that is used to display the contents of a cell that is in editing mode.</summary>
      <returns>The template that is used to display the contents of a cell that is in editing mode. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridTemplateColumn.CellTemplate">
      <summary>Gets or sets the template that is used to display the contents of a cell that is not in editing mode. </summary>
      <returns>The template that is used to display the contents of a cell that is not in editing mode. The default is null.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridTemplateColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>Gets an element defined by the <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate" /> that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</summary>
      <returns>A new editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
      <param name="cell">The cell that will contain the generated element.</param>
      <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
      <exception cref="T:System.TypeInitializationException">The <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridTemplateColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>Gets an element defined by the <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellTemplate" /> that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</summary>
      <returns>A new, read-only element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
      <param name="cell">The cell that will contain the generated element.</param>
      <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
      <exception cref="T:System.TypeInitializationException">The <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellTemplate" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridTemplateColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
      <summary>Called when a cell in the column enters editing mode.</summary>
      <returns>null in all cases.</returns>
      <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
      <param name="editingEventArgs">Information about the user gesture that is causing a cell to enter editing mode.</param>
    </member>
    <member name="T:System.Windows.Controls.DataGridTextColumn">
      <summary>Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that hosts textual content in its cells.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridTextColumn" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
      <summary>Causes the column cell being edited to revert to the specified value.</summary>
      <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
      <param name="uneditedValue">The previous, unedited value in the cell being edited.</param>
    </member>
    <member name="P:System.Windows.Controls.DataGridTextColumn.FontFamily">
      <summary>Gets or sets the font family of the content of cells in the column.</summary>
      <returns>The font family of the content of cells in the column. The default is null.</returns>
      <exception cref="T:System.NullReferenceException">The <see cref="P:System.Windows.Controls.DataGridTextColumn.FontFamily" /> value has not been set.</exception>
    </member>
    <member name="F:System.Windows.Controls.DataGridTextColumn.FontFamilyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataGridTextColumn.FontFamily" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataGridTextColumn.FontFamily" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridTextColumn.FontSize">
      <summary>Gets or sets the font size of the content of cells in the column.</summary>
      <returns>The font size of the content of cells in the column. The default is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridTextColumn.FontStyle">
      <summary>Gets or sets the font style of the content of cells in the column.</summary>
      <returns>The font style of the content of cells in the column. The default is <see cref="P:System.Windows.FontStyles.Normal" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridTextColumn.FontWeight">
      <summary>Gets or sets the font weight of the contents of cells in the column.</summary>
      <returns>The font weight of the contents of cells in the column. The default is <see cref="P:System.Windows.FontWeights.Normal" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridTextColumn.Foreground">
      <summary>Gets or sets the brush that is used to paint the text contents of cells in the column.</summary>
      <returns>The brush that is used to paint the contents of cells in the column. The default is null.</returns>
      <exception cref="T:System.NullReferenceException">The <see cref="P:System.Windows.Controls.DataGridTextColumn.Foreground" /> value has not been set.</exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>Gets a <see cref="T:System.Windows.Controls.TextBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</summary>
      <returns>A new <see cref="T:System.Windows.Controls.TextBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
      <param name="cell">The cell that will contain the generated element.</param>
      <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>Gets a read-only <see cref="T:System.Windows.Controls.TextBlock" /> element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</summary>
      <returns>A new, read-only <see cref="T:System.Windows.Controls.TextBlock" /> element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
      <param name="cell">The cell that will contain the generated element.</param>
      <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
      <summary>Called when a cell in the column enters editing mode.</summary>
      <returns>The unedited value. </returns>
      <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
      <param name="editingEventArgs">Information about the user gesture that is causing a cell to enter editing mode.</param>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
      <summary>Refreshes the contents of a cell in the column in response to a column property value change.</summary>
      <param name="element">The <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.TextBox" /> returned by the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property of the cell to refresh.</param>
      <param name="propertyName">The name of the column property that has changed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is not a <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.TextBox" />.</exception>
    </member>
    <member name="T:System.Windows.Controls.DataPager">
      <summary>Provides a user interface for paging through a collection of data.</summary>
    </member>
    <member name="M:System.Windows.Controls.DataPager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataPager" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.DataPager.AutoEllipsis">
      <summary>Gets or sets a value that indicates whether to use an ellipsis as the last numeric button.</summary>
      <returns>true if an ellipsis should be used as the last numeric button; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.AutoEllipsisProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.AutoEllipsis" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.AutoEllipsis" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.CanChangePage">
      <summary>Gets a value that indicates whether the user can move to another page.</summary>
      <returns>true if the user can move to another page; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.CanChangePageProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.CanChangePage" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.CanChangePage" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.CanMoveToFirstPage">
      <summary>Gets a value that indicates whether the user can move to the first page.</summary>
      <returns>true if the user can move to the first page; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.CanMoveToFirstPageProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.CanMoveToFirstPage" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.CanMoveToFirstPage" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.CanMoveToLastPage">
      <summary>Gets a value that indicates whether the user can move to the last page.</summary>
      <returns>true if the user can move to the last page; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.CanMoveToLastPageProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.CanMoveToLastPage" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.CanMoveToLastPage" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.CanMoveToNextPage">
      <summary>Gets a value that indicates whether the user can move to the next page.</summary>
      <returns>true if the user can move to the next page; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.CanMoveToNextPageProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.CanMoveToNextPage" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.CanMoveToNextPage" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.CanMoveToPreviousPage">
      <summary>Gets a value that indicates whether the user can move to the previous page.</summary>
      <returns>true if the user can move to the previous page; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.CanMoveToPreviousPageProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.CanMoveToPreviousPage" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.CanMoveToPreviousPage" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.DisplayMode">
      <summary>Gets or sets a value that indicates how the <see cref="T:System.Windows.Controls.DataPager" /> user interface is displayed.</summary>
      <returns>An enumeration value that indicates how the <see cref="T:System.Windows.Controls.DataPager" /> user interface is displayed.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.DisplayModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.DisplayMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.DisplayMode" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.IsTotalItemCountFixed">
      <summary>Gets or sets a value that indicates whether the total number of items in the collection is fixed.</summary>
      <returns>true if the total number of items in the paged collection is fixed; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.IsTotalItemCountFixedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.IsTotalItemCountFixed" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.IsTotalItemCountFixed" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.ItemCount">
      <summary>Gets the current number of known items in the source data collection.</summary>
      <returns>The current number of known items in the source data collection.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.ItemCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.ItemCount" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.ItemCount" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.NumericButtonCount">
      <summary>Gets or sets a value that indicates the number of page buttons shown on the <see cref="T:System.Windows.Controls.DataPager" /> user interface.</summary>
      <returns>The number of page buttons shown on the <see cref="T:System.Windows.Controls.DataPager" /> user interface.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.NumericButtonCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.NumericButtonCount" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.NumericButtonCount" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.NumericButtonStyle">
      <summary>Gets or sets the style that will be used for the numeric buttons.</summary>
      <returns>The style that will be used for the numeric buttons.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.NumericButtonStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.NumericButtonStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.NumericButtonStyle" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DataPager.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.DataPager" /> control when a new template is applied.</summary>
      <exception cref="T:System.InvalidOperationException">The numeric button panel contains invalid child elements.</exception>
    </member>
    <member name="M:System.Windows.Controls.DataPager.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.DataPagerAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.DataPagerAutomationPeer" /> for the <see cref="T:System.Windows.Controls.DataPager" /> object.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.PageCount">
      <summary>Gets the current number of known pages if the source is an <see cref="T:System.ComponentModel.IPagedCollectionView" />.</summary>
      <returns>The current number of known pages if the source is an <see cref="T:System.ComponentModel.IPagedCollectionView" />; otherwise, 1.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.PageCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.PageCount" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.PageCount" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.PageIndex">
      <summary>Gets or sets the index of the current page.</summary>
      <returns>The index of the current page if the source is an <see cref="T:System.ComponentModel.IPagedCollectionView" />; otherwise, 0. The default is -1. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Windows.Controls.DataPager.Source" /> is null or <see cref="P:System.Windows.Controls.DataPager.PageSize" /> is 0, and <see cref="P:System.Windows.Controls.DataPager.PageIndex" /> is not -1.-or-<see cref="P:System.Windows.Controls.DataPager.Source" /> is not null or <see cref="P:System.Windows.Controls.DataPager.PageSize" /> is not 0, and <see cref="P:System.Windows.Controls.DataPager.PageIndex" /> is less than 0.</exception>
    </member>
    <member name="E:System.Windows.Controls.DataPager.PageIndexChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.DataPager.PageIndex" /> has changed.</summary>
    </member>
    <member name="E:System.Windows.Controls.DataPager.PageIndexChanging">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.DataPager.PageIndex" /> is changing.</summary>
    </member>
    <member name="F:System.Windows.Controls.DataPager.PageIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.PageIndex" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.PageIndex" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.PageSize">
      <summary>Gets or sets a value that indicates the number of items displayed on a page.</summary>
      <returns>A value that indicates the number of items displayed on a page.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Page size is less than 0.</exception>
    </member>
    <member name="F:System.Windows.Controls.DataPager.PageSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.PageSize" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.PageSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DataPager.Source">
      <summary>Gets or sets the data collection that the <see cref="T:System.Windows.Controls.DataPager" /> controls paging for.</summary>
      <returns>The data collection associated with this pager control.</returns>
    </member>
    <member name="F:System.Windows.Controls.DataPager.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DataPager.Source" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DataPager.Source" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.PagerDisplayMode">
      <summary>Specifies how the page controls are displayed on a <see cref="T:System.Windows.Controls.DataPager" /> control.</summary>
    </member>
    <member name="F:System.Windows.Controls.PagerDisplayMode.FirstLastNumeric">
      <summary>Shows the First and Last buttons, and the numeric display.</summary>
    </member>
    <member name="F:System.Windows.Controls.PagerDisplayMode.FirstLastPreviousNext">
      <summary>Shows the First, Last, Previous, and Next buttons.</summary>
    </member>
    <member name="F:System.Windows.Controls.PagerDisplayMode.FirstLastPreviousNextNumeric">
      <summary>Shows the First, Last, Previous, and Next buttons, and the numeric display.</summary>
    </member>
    <member name="F:System.Windows.Controls.PagerDisplayMode.Numeric">
      <summary>Shows the numeric display.</summary>
    </member>
    <member name="F:System.Windows.Controls.PagerDisplayMode.PreviousNext">
      <summary>Shows the Previous and Next buttons.</summary>
    </member>
    <member name="F:System.Windows.Controls.PagerDisplayMode.PreviousNextNumeric">
      <summary>Shows the Previous and Next buttons, and the numeric display.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridCellsPresenter">
      <summary>Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" /> to specify the location in the control's visual tree where the cells are to be added.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridCellsPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridCellsPresenter" /> class. </summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridColumnHeader">
      <summary>Represents an individual <see cref="T:System.Windows.Controls.DataGrid" /> column header.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnApplyTemplate">
      <summary>Builds the visual tree for the column header when a new template is applied. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnContentChanged(System.Object,System.Object)">
      <summary>Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</summary>
      <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
      <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="newContent" /> is not null and is not a primitive data type.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> object.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrush">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint the column header separator lines.</summary>
      <returns>The brush used to paint column header separator lines.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibility">
      <summary>Gets or sets a value indicating whether the column header separator lines are visible.</summary>
      <returns>One of the enumeration values that specifies the visibility of the column header separator lines. The default is <see cref="F:System.Windows.Visibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibility" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibility" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter">
      <summary>Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" /> to specify the location in the control's visual tree where the column headers are to be added.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter" /> class.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter">
      <summary>Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" /> to specify the location in the control's visual tree where the row details are to be added.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridDetailsPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridDetailsPresenter.ContentHeight">
      <summary>Gets or sets the height of the content.</summary>
      <returns>The height of the content.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridDetailsPresenter.ContentHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridDetailsPresenter.ContentHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.DataGridDetailsPresenter.ContentHeight" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridFrozenGrid">
      <summary>Represents a non-scrollable grid that contains <see cref="T:System.Windows.Controls.DataGrid" /> row headers.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridFrozenGrid.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridFrozenGrid" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridFrozenGrid.GetIsFrozen(System.Windows.DependencyObject)">
      <summary>Gets a value that indicates whether the grid is frozen.</summary>
      <returns>true if the grid is frozen; otherwise, false. The default is true.</returns>
      <param name="element">The object to get the <see cref="P:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozen" /> value from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozen">
      <summary>Gets or sets a values that indicates whether the grid is frozen.</summary>
      <returns>true if the grid is frozen; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozen" /> dependency property.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridFrozenGrid.SetIsFrozen(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets a value that indicates whether the grid is frozen.</summary>
      <param name="element">The object to set the <see cref="P:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozen" /> value on.</param>
      <param name="value">true if <paramref name="element" /> is frozen; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridRowHeader">
      <summary>Represents an individual <see cref="T:System.Windows.Controls.DataGrid" /> row header.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.MeasureOverride(System.Windows.Size)">
      <summary>Measures the children of a <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> to prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.</summary>
      <returns>The size that the <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> determines it needs during layout, based on its calculations of child object allocated sizes.</returns>
      <param name="availableSize">The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.OnApplyTemplate">
      <summary>Builds the visual tree for the row header when a new template is applied. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> object.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrush">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint the row header separator lines.</summary>
      <returns>The brush used to paint row header separator lines.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibility">
      <summary>Gets or sets a value indicating whether the row header separator lines are visible.</summary>
      <returns>One of the enumeration values that specifies the visibility of the row header separator lines. The default is <see cref="F:System.Windows.Visibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibility" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibility" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridRowsPresenter">
      <summary>Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" /> to specify the location in the control's visual tree where the rows are to be added.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridRowsPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridRowsPresenter" /> class.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Windows.Controls.Input.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Controls.Input</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.AutoCompleteBox" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.#ctor(System.Windows.Controls.AutoCompleteBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.AutoCompleteBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern interface implementation for this <see cref="T:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
      <summary>Hides all nodes, controls, or content that are descendants of the control.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
      <summary>Displays all child nodes, controls, or content of the control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
      <summary>Gets the state (expanded or collapsed) of the control.</summary>
      <returns>The state (expanded or collapsed) of the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>Gets a value that indicates whether the UI automation provider allows more than one child element to be selected concurrently.</summary>
      <returns>true if multiple selection is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>Retrieves a UI automation provider for each child element that is selected.</summary>
      <returns>An array of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>Gets a value that indicates whether the UI automation provider requires at least one child element to be selected.</summary>
      <returns>true if selection is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>Gets a value that indicates whether the value of a control is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>Sets the value of a control.</summary>
      <param name="value">The value to set. The provider is responsible for converting the value to the appropriate data type.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control.</returns>
    </member>
    <member name="T:System.Windows.Controls.AutoCompleteBox">
      <summary>Represents a control that provides a text box for user input and a drop-down that contains possible matches based on the input in the text box.</summary>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges and sizes the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control and its contents.</summary>
      <returns>The <paramref name="finalSize" />, unchanged.</returns>
      <param name="finalSize">The size allowed for the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</param>
    </member>
    <member name="E:System.Windows.Controls.AutoCompleteBox.DropDownClosed">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.AutoCompleteBox.IsDropDownOpen" /> property was changed from true to false and the drop-down is open.</summary>
    </member>
    <member name="E:System.Windows.Controls.AutoCompleteBox.DropDownClosing">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.AutoCompleteBox.IsDropDownOpen" /> property is changing from true to false. </summary>
    </member>
    <member name="E:System.Windows.Controls.AutoCompleteBox.DropDownOpened">
      <summary>Occurs when the value of the <see cref="P:System.Windows.Controls.AutoCompleteBox.IsDropDownOpen" /> property has changed from false to true and the drop-down is open.</summary>
    </member>
    <member name="E:System.Windows.Controls.AutoCompleteBox.DropDownOpening">
      <summary>Occurs when the value of the <see cref="P:System.Windows.Controls.AutoCompleteBox.IsDropDownOpen" /> property is changing from false to true. </summary>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.FilterMode">
      <summary>Gets or sets how the text in the text box is used to filter items specified by the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" /> property for display in the drop-down.</summary>
      <returns>One of the <see cref="T:System.Windows.Controls.AutoCompleteFilterMode" /> values The default is <see cref="F:System.Windows.Controls.AutoCompleteFilterMode.StartsWith" />.</returns>
      <exception cref="T:System.ArgumentException">The specified value is not a valid <see cref="T:System.Windows.Controls.AutoCompleteFilterMode" />.</exception>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.FilterModeProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.FilterMode" /> dependency property.</summary>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.FormatValue(System.Object)">
      <summary>Converts the specified object to a string by using the property values of the binding object specified by the <see cref="P:System.Windows.Controls.AutoCompleteBox.ValueMemberBinding" /> property.</summary>
      <returns>The string representation of the specified object.</returns>
      <param name="value">The object to format as a string.</param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.GetSelectionAdapterPart">
      <summary>Returns the specified object as an <see cref="T:System.Windows.Controls.ISelectionAdapter" />, if possible.</summary>
      <returns>A <see cref="T:System.Windows.Controls.ISelectionAdapter" /> if possible; otherwise, null.</returns>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.HasFocus">
      <summary>Determines whether the text box or drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control has focus.</summary>
      <returns>true to indicate the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> has focus; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.IsDropDownOpen">
      <summary>Gets or sets a value that indicates whether the drop-down portion of the control is open.</summary>
      <returns>true if the drop-down is open; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.IsDropDownOpenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.IsDropDownOpen" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.IsDropDownOpen" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.IsTextCompletionEnabled">
      <summary>Gets or sets a value that indicates whether the first possible match found during the filtering process will be displayed automatically in the text box.</summary>
      <returns>true if the first possible match found will be displayed automatically in the text box; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.IsTextCompletionEnabled" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.IsTextCompletionEnabled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.ItemContainerStyle">
      <summary>Gets or sets the <see cref="T:System.Windows.Style" /> that is applied to the selection adapter contained in the drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</summary>
      <returns>The <see cref="T:System.Windows.Style" /> applied to the selection adapter contained in the drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.ItemContainerStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemContainerStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemContainerStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.ItemFilter">
      <summary>Gets or sets the custom method that uses the user-entered text to filter the items specified by the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" /> property for display in the drop-down.</summary>
      <returns>The custom method that uses the user-entered text to filter the items specified by the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" /> property. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.ItemFilterProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemFilter" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemFilter" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.ItemsSource">
      <summary>Gets or sets a collection that is used to generate the items for the drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</summary>
      <returns>The collection that is used to generate the items of the drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.ItemsSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.ItemTemplate">
      <summary>Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used to display each item in the drop-down portion of the control.</summary>
      <returns>The <see cref="T:System.Windows.DataTemplate" /> used to display each item in the drop-down. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.ItemTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemTemplate" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.MaxDropDownHeight">
      <summary>Gets or sets the maximum height of the drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</summary>
      <returns>The maximum height of the drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control. The default is <see cref="F:System.Double.PositiveInfinity" />.</returns>
      <exception cref="T:System.ArgumentException">The specified value is less than 0.</exception>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.MaxDropDownHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.MaxDropDownHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.MaxDropDownHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.MinimumPopulateDelay">
      <summary>Gets or sets the minimum delay, in milliseconds, after text is typed in the text box before the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control populates the list of possible matches in the drop-down.</summary>
      <returns>The minimum delay, in milliseconds, after text is typed in the text box, but before the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> populates the list of possible matches in the drop-down. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">The set value is less than 0.</exception>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.MinimumPopulateDelayProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.MinimumPopulateDelay" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.MinimumPopulateDelay" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.MinimumPrefixLength">
      <summary>Gets or sets the minimum number of characters required to be entered in the text box before the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> displays possible matches.</summary>
      <returns>The minimum number of characters to be entered in the text box before the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> displays possible matches. The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.MinimumPrefixLengthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.MinimumPrefixLength" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.MinimumPrefixLength" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer" /> for the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
      <summary>Raises the <see cref="E:System.Windows.Controls.AutoCompleteBox.DropDownClosed" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" /> which contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnDropDownClosing(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
      <summary>Raises the <see cref="E:System.Windows.Controls.AutoCompleteBox.DropDownClosing" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Controls.RoutedPropertyChangingEventArgs`1" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
      <summary>Raises the <see cref="E:System.Windows.Controls.AutoCompleteBox.DropDownOpened" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnDropDownOpening(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
      <summary>Raises the <see cref="E:System.Windows.Controls.AutoCompleteBox.DropDownOpening" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Controls.RoutedPropertyChangingEventArgs`1" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnPopulated(System.Windows.Controls.PopulatedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.AutoCompleteBox.Populated" /> event </summary>
      <param name="e">A <see cref="T:System.Windows.Controls.PopulatedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnPopulating(System.Windows.Controls.PopulatingEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.AutoCompleteBox.Populating" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Controls.PopulatingEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.AutoCompleteBox.SelectionChanged" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Controls.SelectionChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.OnTextChanged(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.AutoCompleteBox.TextChanged" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.AutoCompleteBox.PopulateComplete">
      <summary>Notifies the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> that the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" /> property has been set and the data can be filtered to provide possible matches in the drop-down.</summary>
    </member>
    <member name="E:System.Windows.Controls.AutoCompleteBox.Populated">
      <summary>Occurs when the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> has populated the drop-down with possible matches based on the <see cref="P:System.Windows.Controls.AutoCompleteBox.Text" /> property.</summary>
    </member>
    <member name="E:System.Windows.Controls.AutoCompleteBox.Populating">
      <summary>Occurs when the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> is populating the drop-down with possible matches based on the <see cref="P:System.Windows.Controls.AutoCompleteBox.Text" /> property.</summary>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.SearchText">
      <summary>Gets the text that is used to filter items in the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" /> item collection. </summary>
      <returns>The text that is used to filter items in the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" /> item collection.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.SearchTextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.SearchText" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.SearchText" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.SelectedItem">
      <summary>Gets or sets the selected item in the drop-down.</summary>
      <returns>The selected item in the drop-down.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.SelectedItemProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.SelectedItem" /> dependency property.</summary>
      <returns>The identifier the <see cref="P:System.Windows.Controls.AutoCompleteBox.SelectedItem" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.SelectionAdapter">
      <summary>Gets or sets the selection adapter used to populate the drop-down with a list of selectable items. </summary>
      <returns>The selection adapter used to populate the drop-down with a list of selectable items. </returns>
    </member>
    <member name="E:System.Windows.Controls.AutoCompleteBox.SelectionChanged">
      <summary>Occurs when the selected item in the drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> has changed.</summary>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.Text">
      <summary>Gets or sets the text in the text box portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</summary>
      <returns>The text in the text box portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.TextBoxStyle">
      <summary>Gets or sets the <see cref="T:System.Windows.Style" /> applied to the text box portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</summary>
      <returns>The <see cref="T:System.Windows.Style" /> applied to the text box portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.TextBoxStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.TextBoxStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.TextBoxStyle" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.AutoCompleteBox.TextChanged">
      <summary>Occurs when the text in the text box portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> changes.</summary>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.TextFilter">
      <summary>Gets or sets the custom method that uses the user-entered text to filter items specified by the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" /> property in a text-based way for display in the drop-down.</summary>
      <returns>The custom method that uses the user-entered text to filter items specified by the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" /> property in a text-based way for display in the drop-down.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.TextFilterProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.TextFilter" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.TextFilter" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteBox.TextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.AutoCompleteBox.Text" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.AutoCompleteBox.Text" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.ValueMemberBinding">
      <summary>Gets or sets the <see cref="T:System.Windows.Data.Binding" /> that is used to get the value for display in the text box portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control, and to filter items for display in the drop-down.</summary>
      <returns>The <see cref="T:System.Windows.Data.Binding" /> object used when binding to a collection property, and to filter items for display in the drop-down.</returns>
    </member>
    <member name="P:System.Windows.Controls.AutoCompleteBox.ValueMemberPath">
      <summary>Gets or sets the property path that is used to get the value for display in the text box portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control, and to filter items for display in the drop-down.</summary>
      <returns>The property path that is used to get values for display in the text box portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control, and to filter items for display in the drop-down.</returns>
    </member>
    <member name="T:System.Windows.Controls.AutoCompleteFilterMode">
      <summary>Specifies how text in the text box portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control is used to filter items specified by the <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" /> property for display in the drop-down.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.None">
      <summary>Specifies that no filter is used. All items are returned.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.StartsWith">
      <summary>Specifies a culture-sensitive, case-insensitive filter where the returned items start with the specified text. The filter uses the <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> method, specifying <see cref="P:System.StringComparer.CurrentCultureIgnoreCase" /> as the string comparison criteria. </summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.StartsWithCaseSensitive">
      <summary>Specifies a culture-sensitive, case-sensitive filter where the returned items start with the specified text. The filter uses the <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> method, specifying <see cref="P:System.StringComparer.CurrentCulture" /> as the string comparison criteria.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.StartsWithOrdinal">
      <summary>Specifies an ordinal, case-insensitive filter where the returned items start with the specified text. The filter uses the <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> method, specifying <see cref="P:System.StringComparer.OrdinalIgnoreCase" /> as the string comparison criteria.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.StartsWithOrdinalCaseSensitive">
      <summary>Specifies an ordinal, case-sensitive filter where the returned items start with the specified text. The filter uses the <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> method, specifying <see cref="P:System.StringComparer.Ordinal" /> as the string comparison criteria.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.Contains">
      <summary>Specifies a culture-sensitive, case-insensitive filter where the returned items contain the specified text.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.ContainsCaseSensitive">
      <summary>Specifies a culture-sensitive, case-sensitive filter where the returned items contain the specified text.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.ContainsOrdinal">
      <summary>Specifies an ordinal, case-insensitive filter where the returned items contain the specified text.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.ContainsOrdinalCaseSensitive">
      <summary>Specifies an ordinal, case-sensitive filter where the returned items contain the specified text.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.Equals">
      <summary>Specifies a culture-sensitive, case-insensitive filter where the returned items equal the specified text. The filter uses the <see cref="M:System.String.Equals(System.String,System.StringComparison)" /> method, specifying <see cref="P:System.StringComparer.CurrentCultureIgnoreCase" /> as the search comparison criteria.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.EqualsCaseSensitive">
      <summary>Specifies a culture-sensitive, case-sensitive filter where the returned items equal the specified text. The filter uses the <see cref="M:System.String.Equals(System.String,System.StringComparison)" /> method, specifying <see cref="P:System.StringComparer.CurrentCulture" /> as the string comparison criteria.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.EqualsOrdinal">
      <summary>Specifies an ordinal, case-insensitive filter where the returned items equal the specified text. The filter uses the <see cref="M:System.String.Equals(System.String,System.StringComparison)" /> method, specifying <see cref="P:System.StringComparer.OrdinalIgnoreCase" /> as the string comparison criteria.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.EqualsOrdinalCaseSensitive">
      <summary>Specifies an ordinal, case-sensitive filter where the returned items equal the specified text. The filter uses the <see cref="M:System.String.Equals(System.String,System.StringComparison)" /> method, specifying <see cref="P:System.StringComparer.Ordinal" /> as the string comparison criteria.</summary>
    </member>
    <member name="F:System.Windows.Controls.AutoCompleteFilterMode.Custom">
      <summary>Specifies that a custom filter is used. This mode is used when the <see cref="P:System.Windows.Controls.AutoCompleteBox.TextFilter" /> or <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemFilter" /> properties are set.</summary>
    </member>
    <member name="T:System.Windows.Controls.AutoCompleteFilterPredicate`1">
      <summary>Represents the filter used by the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control to determine whether an item is a possible match for the specified text.</summary>
      <returns>true to indicate <paramref name="item" /> is a possible match for <paramref name="search" />; otherwise false.</returns>
      <param name="search">The string used as the basis for filtering.</param>
      <param name="item">The item that is compared with the <paramref name="search" /> parameter.</param>
      <typeparam name="T">The type used for filtering the <see cref="T:System.Windows.Controls.AutoCompleteBox" />. This type can be either a string or an object.</typeparam>
    </member>
    <member name="T:System.Windows.Controls.ISelectionAdapter">
      <summary>Defines an item collection, selection members, and key handling for the selection adapter contained in the drop-down portion of an <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</summary>
    </member>
    <member name="E:System.Windows.Controls.ISelectionAdapter.Cancel">
      <summary>Occurs when a selection has been canceled.</summary>
    </member>
    <member name="E:System.Windows.Controls.ISelectionAdapter.Commit">
      <summary>Occurs when a selected item is not cancelled and is committed as the selected item. </summary>
    </member>
    <member name="M:System.Windows.Controls.ISelectionAdapter.CreateAutomationPeer">
      <summary>Returns an automation peer for the selection adapter, for use by the Silverlight automation infrastructure.</summary>
      <returns>An automation peer for the selection adapter, if one is available; otherwise, null.</returns>
    </member>
    <member name="M:System.Windows.Controls.ISelectionAdapter.HandleKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event that occurs when a key is pressed while the drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> has focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains data about the <see cref="E:System.Windows.UIElement.KeyDown" /> event.</param>
    </member>
    <member name="P:System.Windows.Controls.ISelectionAdapter.ItemsSource">
      <summary>Gets or sets a collection that is used to generate content for the selection adapter.</summary>
      <returns>The collection that is used to generate content for the selection adapter.</returns>
    </member>
    <member name="P:System.Windows.Controls.ISelectionAdapter.SelectedItem">
      <summary>Gets or sets the selected item.</summary>
      <returns>The currently selected item.</returns>
    </member>
    <member name="E:System.Windows.Controls.ISelectionAdapter.SelectionChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.ISelectionAdapter.SelectedItem" /> property value changes.</summary>
    </member>
    <member name="T:System.Windows.Controls.PopulatedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.AutoCompleteBox.Populated" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.PopulatedEventArgs.#ctor(System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.PopulatedEventArgs" />.</summary>
      <param name="data">The list of possible matches added to the drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</param>
    </member>
    <member name="P:System.Windows.Controls.PopulatedEventArgs.Data">
      <summary>Gets the list of possible matches added to the drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</summary>
      <returns>The list of possible matches added to the <see cref="T:System.Windows.Controls.AutoCompleteBox" />.</returns>
    </member>
    <member name="T:System.Windows.Controls.PopulatedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.AutoCompleteBox.Populated" /> event of a <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Controls.PopulatedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Windows.Controls.PopulatingEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.AutoCompleteBox.Populating" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.PopulatingEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.PopulatingEventArgs" />.</summary>
      <param name="parameter">The value of the <see cref="P:System.Windows.Controls.AutoCompleteBox.SearchText" /> property, which is used to filter items for the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</param>
    </member>
    <member name="P:System.Windows.Controls.PopulatingEventArgs.Cancel">
      <summary>Gets or sets a value that indicates whether the <see cref="E:System.Windows.Controls.AutoCompleteBox.Populating" /> event should be canceled.</summary>
      <returns>true to cancel the event, otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Controls.PopulatingEventArgs.Parameter">
      <summary>Gets the text that is used to determine which items to display in the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</summary>
      <returns>The text that is used to determine which items to display in the <see cref="T:System.Windows.Controls.AutoCompleteBox" />.</returns>
    </member>
    <member name="T:System.Windows.Controls.PopulatingEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.AutoCompleteBox.Populating" /> event of a <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control. </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Controls.PopulatingEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Windows.Controls.SelectorSelectionAdapter">
      <summary>Represents the selection adapter contained in the drop-down portion of an <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</summary>
    </member>
    <member name="M:System.Windows.Controls.SelectorSelectionAdapter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.SelectorSelectionAdapter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.SelectorSelectionAdapter.#ctor(System.Windows.Controls.Primitives.Selector)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.SelectorSelectionAdapter" /> class with the specified <see cref="T:System.Windows.Controls.Primitives.Selector" /> control.</summary>
      <param name="selector">The <see cref="T:System.Windows.Controls.Primitives.Selector" /> control to wrap as a <see cref="T:System.Windows.Controls.SelectorSelectionAdapter" />.</param>
    </member>
    <member name="E:System.Windows.Controls.SelectorSelectionAdapter.Cancel">
      <summary>Occurs when a selection is canceled before it is committed.</summary>
    </member>
    <member name="E:System.Windows.Controls.SelectorSelectionAdapter.Commit">
      <summary>Occurs when an item is selected and is committed to the underlying <see cref="T:System.Windows.Controls.Primitives.Selector" /> control.</summary>
    </member>
    <member name="M:System.Windows.Controls.SelectorSelectionAdapter.CreateAutomationPeer">
      <summary>Returns an automation peer for the underlying <see cref="T:System.Windows.Controls.Primitives.Selector" /> control, for use by the Silverlight automation infrastructure.</summary>
      <returns>An automation peer for use by the Silverlight automation infrastructure.</returns>
    </member>
    <member name="M:System.Windows.Controls.SelectorSelectionAdapter.HandleKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event that occurs when a key is pressed while the drop-down portion of the <see cref="T:System.Windows.Controls.AutoCompleteBox" /> has focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains data about the <see cref="E:System.Windows.UIElement.KeyDown" /> event.</param>
    </member>
    <member name="P:System.Windows.Controls.SelectorSelectionAdapter.ItemsSource">
      <summary>Gets or sets a collection that is used to generate the content of the selection adapter.</summary>
      <returns>The collection used to generate content for the selection adapter.</returns>
    </member>
    <member name="M:System.Windows.Controls.SelectorSelectionAdapter.OnCancel">
      <summary>Raises the <see cref="E:System.Windows.Controls.SelectorSelectionAdapter.Cancel" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.SelectorSelectionAdapter.OnCommit">
      <summary>Raises the <see cref="E:System.Windows.Controls.SelectorSelectionAdapter.Commit" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.SelectorSelectionAdapter.SelectedIndexDecrement">
      <summary>Decrements the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedIndex" /> property of the underlying <see cref="T:System.Windows.Controls.Primitives.Selector" /> control.</summary>
    </member>
    <member name="M:System.Windows.Controls.SelectorSelectionAdapter.SelectedIndexIncrement">
      <summary>Increments the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedIndex" /> property of the underlying <see cref="T:System.Windows.Controls.Primitives.Selector" /> control.</summary>
    </member>
    <member name="P:System.Windows.Controls.SelectorSelectionAdapter.SelectedItem">
      <summary>Gets or sets the selected item of the selection adapter.</summary>
      <returns>The selected item of the underlying selection adapter.</returns>
    </member>
    <member name="E:System.Windows.Controls.SelectorSelectionAdapter.SelectionChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.SelectorSelectionAdapter.SelectedItem" /> property value changes.</summary>
    </member>
    <member name="P:System.Windows.Controls.SelectorSelectionAdapter.SelectorControl">
      <summary>Gets or sets the underlying <see cref="T:System.Windows.Controls.Primitives.Selector" /> control.</summary>
      <returns>The underlying <see cref="T:System.Windows.Controls.Primitives.Selector" /> control.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\ReferenceAssemblies\System.ServiceModel.Xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Generic.KeyedByTypeCollection`1">
      <summary>Provides a collection whose items are types that serve as keys.</summary>
      <typeparam name="TItem">The item types contained in the collection that also serve as the keys for the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> class. </summary>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Find``1">
      <summary>Returns the first item in the collection of a specified type.</summary>
      <returns>The object of type <paramref name="T" /> if it is a reference type and the value of type <paramref name="T" /> if it is a value type. The default value of the type is returned if no object of type <paramref name="T" /> is contained in the collection; null if it is a reference type and 0 if it is a value type.</returns>
      <typeparam name="T">The type of item in the collection to find.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1">
      <summary>Returns a collection of objects of type <paramref name="T" /> that are contained in the <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <paramref name="T" /> that contains the objects of type <paramref name="T" /> from the original collection.</returns>
      <typeparam name="T">The type of item in the collection to find.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)">
      <summary>Gets the type of an item contained in the collection.</summary>
      <returns>The type of the specified <paramref name="item" /> in the collection.</returns>
      <param name="item">The item in the collection whose type is to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an element into the collection at a specific location.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Remove``1">
      <summary>Removes an object of a specified type from the collection.</summary>
      <returns>The object removed from the collection.</returns>
      <typeparam name="T">The type of item in the collection to remove.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1">
      <summary>Removes all of the elements of a specified type from the collection.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> that contains the objects of type <paramref name="T" /> from the original collection.</returns>
      <typeparam name="T">The type of item in the collection to remove.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the item at the specified index with a new object.</summary>
      <param name="index">The zero-based index of the <paramref name="item" /> to be replaced.</param>
      <param name="item">The object to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1">
      <summary>Provides a thread-safe, read-only collection that contains objects of a type specified by the generic parameter as elements.</summary>
      <typeparam name="T">The type of object contained as items in the thread-safe, read-only collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" /> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe, read-only collection.</summary>
      <param name="syncRoot">The object used to synchronize access to the thread-safe, read-only collection.</param>
      <param name="list">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of elements used to initialize the thread-safe, read-only collection.</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)">
      <summary>Determines whether the collection contains an element with a specific value.</summary>
      <returns>true if the element <paramref name="value" /> is found in the collection; otherwise, false.</returns>
      <param name="value">The object to locate in the collection.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an object of the type contained in the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the collection to a specified array, starting at a particular index.</summary>
      <param name="array">The <see cref="T:System.Array" /> that is the destination for the elements copied from the collection.</param>
      <param name="index">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count">
      <summary>Gets the number of elements contained in the thread-safe, read-only collection.</summary>
      <returns>The number of elements contained in the thread-safe, read-only collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the synchronized, read-only collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for objects of the type stored in the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)">
      <summary>Returns the index of the first occurrence of a value in the collection.</summary>
      <returns>The zero-based index of the first occurrence of the <paramref name="value" /> in the collection.</returns>
      <param name="value">The element whose index is being retrieved.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)">
      <summary>Gets an element from the thread-safe, read-only collection with a specified index.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items">
      <summary>Gets the list of elements contained in the thread-safe, read-only collection.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IList`1" /> of elements that are contained in the thread-safe, read-only collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="value">The element to be added to the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be added to a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <exception cref="T:System.NotSupportedException">Items cannot be cleared from a read-only collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Returns true.</summary>
      <returns>true.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <returns>The method returns false to indicate that the item was not removed from the read-only collection.</returns>
      <param name="value">The value to be removed from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> is to be inserted.</param>
      <param name="value">The object to insert into the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be inserted into a read-only collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to a specified array, starting at a specified index.</summary>
      <param name="array">The <see cref="T:System.Array" /> that is the destination for the elements copied from the collection.</param>
      <param name="index">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the synchronized, read-only collection.</summary>
      <returns>The <see cref="T:System.Collections.IEnumerator" />  that iterates through the synchronized, read-only collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Throws a <see cref="T:System.NotSupportedException" />.</summary>
      <returns>The <see cref="T:System.NotSupportedException" />.</returns>
      <param name="value">The element to be added to the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be added to a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Items cannot be cleared from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the collection contains an element with a specific value.</summary>
      <returns>Returns true if the element <paramref name="value" /> is found in the collection; otherwise, false.</returns>
      <param name="value">The object to locate in the collection.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an object of the type contained in the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the collection.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The element whose index is being retrieved.</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> is to be inserted.</param>
      <param name="value">The object to insert into the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be inserted into a read-only collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the collection has a fixed size.</summary>
      <returns>true</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets the element at the specified index and throws an exception if an element is set.</summary>
      <returns>The object at the specified location in the collection.</returns>
      <param name="index">The zero-based index of the element in the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be set in a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <param name="value">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="T:System.ServiceModel.ActionNotSupportedException">
      <summary>This exception is thrown on the client when the action related to the invoked operation does not match the action of any operation available in the service.</summary>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ActionNotSupportedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ActionNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown. </param>
    </member>
    <member name="T:System.ServiceModel.BasicHttpBinding">
      <summary>Represents a binding that a Silverlight version 2 client can use to configure endpoints that can communicate with ASMX-based Web services and other services that conform to the WS-I Basic Profile 1.1.</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class with a specified type of security used by the binding.</summary>
      <param name="securityMode">The value of <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> that specifies the type of security that is used with the SOAP message and for the client.</param>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements">
      <summary>Returns an ordered collection of binding elements contained in the current binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the ordered stack of binding elements described by the <see cref="T:System.ServiceModel.BasicHttpBinding" />.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.EnvelopeVersion">
      <summary>Gets the version of SOAP that is used for messages that are processed by this binding.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.EnvelopeVersion" /> that is used with this binding. The value is always SOAP 1.1.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.MaxBufferSize">
      <summary>Gets or sets the maximum size for a buffer that receives messages from the channel.</summary>
      <returns>The maximum size, in bytes, of a buffer that stores messages while they are processed for an endpoint configured with this binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size for a message that can be received on a channel configured with this binding.</summary>
      <returns>The maximum size, in bytes, for a message that is processed by the binding. The default value is 65,536 bytes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero.</exception>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.Scheme">
      <summary>Gets the URI transport scheme for the channels and listeners that are configured with this binding.</summary>
      <returns>"https" if the security mode in the transport binding element is set to <see cref="F:System.ServiceModel.BasicHttpSecurityMode.Transport" />; "http" otherwise.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.Security">
      <summary>Gets the type of security used with this binding.  </summary>
      <returns>The <see cref="T:System.ServiceModel.BasicHttpSecurity" /> that is used with this binding. The default value is <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />. </returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.TextEncoding">
      <summary>Gets or sets the character encoding that is used for the message text.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> that indicates the character encoding that is used. The default is <see cref="T:System.Text.UTF8Encoding" />.</returns>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurity">
      <summary>Specifies the security used for a Silverlight client configured with a <see cref="T:System.ServiceModel.BasicHttpBinding" />.</summary>
    </member>
    <member name="P:System.ServiceModel.BasicHttpSecurity.Mode">
      <summary>Gets or sets the mode of security for a client configured with a <see cref="T:System.ServiceModel.BasicHttpBinding" />.</summary>
      <returns>A value in the <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> enumeration. The default value for this property is <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is not a legal value for <see cref="T:System.ServiceModel.BasicHttpSecurityMode" />.</exception>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurityMode">
      <summary>Specifies the types of security that can be used with the system-provided <see cref="T:System.ServiceModel.BasicHttpBinding" /> binding or the <see cref="T:System.ServiceModel.PollingDuplexHttpBinding" /> binding derived from it.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.None">
      <summary>The SOAP message is not secured during transfer. This is the default behavior.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.Transport">
      <summary>Security is provided using HTTPS. The service must be configured with SSL certificates. The SOAP message is protected as a whole using HTTPS. The service is authenticated by the client using the service’s SSL certificate.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly">
      <summary>This mode provides only HTTP-based client authentication. It does not provide message integrity and confidentiality.</summary>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory">
      <summary>Creates and manages the channels that are used by clients to send messages to service endpoints.</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)">
      <summary>Initializes the channel factory with the behaviors provided by a specified configuration file and with those in the service endpoint of the channel factory.</summary>
      <param name="configurationName">The name of the configuration file.</param>
      <exception cref="T:System.InvalidOperationException">The service endpoint of the channel factory is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateDescription">
      <summary>When implemented in a derived class, creates a description of the service endpoint associated with the channel factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> associated with the channel factory.</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateFactory">
      <summary>Builds the channel factory for the current endpoint of the factory.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory" /> for the endpoint of the current factory.</returns>
      <exception cref="T:System.InvalidOperationException">The endpoint of the service that the factory channels connect to is null or the endpoint's binding is null or is missing the element with the configuration name specified.</exception>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout">
      <summary>Gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout">
      <summary>Gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Endpoint">
      <summary>Gets the service endpoint to which the channels produced by the factory connect.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to which the channels produced by the factory connect.</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.EnsureOpened">
      <summary>Opens the current channel factory if it is not yet opened.</summary>
      <exception cref="T:System.ObjectDisposedException">The current factory is either closing or closed and so cannot be opened.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.GetProperty``1">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack, or null if not present.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes the service endpoint of the channel factory with a specified binding and address.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> with which to initialize endpoint for the channel factory.</param>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> with which to initialize the endpoint for the channel factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)">
      <summary>Initializes the service endpoint of the channel factory with a specified configuration address.</summary>
      <param name="configurationName">The name of the file that contains the endpoint configuration with which to initialize the channel factory.</param>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> with which to initialize endpoints for the channel factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnAbort">
      <summary>Terminates the inner channel factory of the current channel factory.</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous close operation on the inner channel factory of the current channel factory that has a state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous open operation on the inner channel factory of the current channel factory that has a state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)">
      <summary>Calls close on the inner channel factory with a specified time-out for the completion of the operation.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the operation has to complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous close operation on the inner channel factory of the current channel factory. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous open operation on the inner channel factory of the current channel factory. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)">
      <summary>Calls open on the inner channel factory of the current channel factory with a specified time-out for the completion of the operation.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</param>
      <exception cref="T:System.InvalidOperationException">The inner channel of the current channel is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpened">
      <summary>Initializes a read-only copy of the <see cref="T:System.ServiceModel.Description.ClientCredentials" /> object for the channel factory.</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpening">
      <summary>Builds the inner channel factory for the current channel.</summary>
      <exception cref="T:System.InvalidOperationException">The inner channel factory for the channel factory is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose">
      <summary>Closes the current channel factory.</summary>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory`1">
      <summary>A factory that creates channels of different types that are used by clients to send messages to variously configured service endpoints.</summary>
      <typeparam name="TChannel">The type of channel produced by the channel factory. This type must be either <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> or <see cref="T:System.ServiceModel.Channels.IRequestChannel" />.</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory`1" /> class with a specified endpoint address and binding configuration.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> used to configure the channels created by the factory.</param>
      <param name="remoteAddress">The destination <see cref="T:System.ServiceModel.EndpointAddress" /> for channels created by the factory.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="binding" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory`1" /> class and configures the endpoint.</summary>
      <param name="endpointConfigurationName">The name of the file that contains the service endpoint configuration for the channels created by the factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory`1" /> class with a specified endpoint address and endpoint configuration.</summary>
      <param name="endpointConfigurationName">The name of the file that contains the service endpoint configuration for the channels created by the factory.</param>
      <param name="remoteAddress">The destination <see cref="T:System.ServiceModel.EndpointAddress" /> for channels created by the factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel">
      <summary>Creates a channel that is used to send messages to a service.</summary>
      <returns>The <paramref name="TChannel" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> created by the factory.</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>Creates a channel that is used to send messages to a service at a specific endpoint address.</summary>
      <returns>The <paramref name="TChannel" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> created by the factory.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>Creates a channel that is used to send messages to a service at a specific endpoint address through a specified transport address.</summary>
      <returns>The <paramref name="TChannel" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> created by the factory.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which the channel sends messages.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.ServiceModel.ChannelFactory" /> has duplex operations it does not support.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateDescription">
      <summary>Creates a description of the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> of the service.</returns>
      <exception cref="T:System.InvalidOperationException">The callback contract is null but the service endpoint requires one that is non-null.</exception>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1">
      <summary>Provides the base implementation used to create Silverlight version 2 client objects that can call services.</summary>
      <typeparam name="TChannel">The channel to be used to connect to the service.</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using the default target endpoint from the application configuration file. </summary>
      <exception cref="T:System.InvalidOperationException">Either there is no default endpoint information in the configuration file, more than one endpoint in the file, or no configuration file.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using a specified binding and target address. </summary>
      <param name="binding">The binding used to configure the way that calls are made to the service.</param>
      <param name="remoteAddress">The address of the service endpoint.</param>
      <exception cref="T:System.ArgumentNullException">The binding is null.</exception>
      <exception cref="T:System.ArgumentNullException">The remote address is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using the configuration information specified in the application configuration file by <paramref name="endpointConfigurationName" />. </summary>
      <param name="endpointConfigurationName">The name of the endpoint in the application configuration file.</param>
      <exception cref="T:System.ArgumentNullException">The specified endpoint information is null.</exception>
      <exception cref="T:System.InvalidOperationException">The endpoint cannot be found or the endpoint contract is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using the specified target address and endpoint information. </summary>
      <param name="endpointConfigurationName">The name of the endpoint in the application configuration file.</param>
      <param name="remoteAddress">The address of the service.</param>
      <exception cref="T:System.ArgumentNullException">The endpoint is null.</exception>
      <exception cref="T:System.ArgumentNullException">The remote address is null.</exception>
      <exception cref="T:System.InvalidOperationException">The endpoint cannot be found or the endpoint contract is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class.</summary>
      <param name="endpointConfigurationName">The name of the endpoint in the application configuration file.</param>
      <param name="remoteAddress">The address of the service.</param>
      <exception cref="T:System.ArgumentNullException">The endpoint is null.</exception>
      <exception cref="T:System.ArgumentNullException">The remote address is null.</exception>
      <exception cref="T:System.InvalidOperationException">The endpoint cannot be found or the endpoint contract is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.Abort">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition immediately from its current state into the closed state.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Channel">
      <summary>Gets the inner channel used to communicate with the service.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelFactory">
      <summary>Gets the underlying <see cref="T:System.ServiceModel.ChannelFactory`1" /> object.</summary>
      <returns>A <see cref="T:System.ServiceModel.ChannelFactory`1" /> object.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.CreateChannel">
      <summary>Returns a new channel from the client to the service.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Endpoint">
      <summary>Gets the target endpoint for the service to which the Silverlight version 2 client can connect.</summary>
      <returns>The target endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1">
      <summary>Replicates the behavior of the default keyword in C#.</summary>
      <returns>Returns null if T is a reference type and zero if T is a numeric value type.</returns>
      <typeparam name="T">A C# type.</typeparam>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InnerChannel">
      <summary>Gets the underlying <see cref="T:System.ServiceModel.IClientChannel" /> implementation.</summary>
      <returns>The client channel for the Silverlight version 2 client object.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)">
      <summary>Provides support for implementing the event-based asynchronous pattern. 
    
                    For more information about 
                
   this pattern, see Event-based Asynchronous Pattern Overview.</summary>
      <param name="beginOperationDelegate">A delegate that is used for calling the asynchronous operation.</param>
      <param name="inValues">The input values to the asynchronous call.</param>
      <param name="endOperationDelegate">A delegate that is used to end the asynchronous call after it has completed.</param>
      <param name="operationCompletedCallback">A client-supplied callback that is invoked when the asynchronous method is complete. The callback is passed to the <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />.</param>
      <param name="userState">The <paramref name="userState" /> object to associate with the asynchronous call.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.State">
      <summary>Gets the current state of the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.CommunicationState" /> of the object.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close the <see cref="T:System.ServiceModel.ClientBase`1" />.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="callback">The method that receives the callback on completion.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close the <see cref="T:System.ServiceModel.ClientBase`1" /> with a specified timeout.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous begin close operation.</returns>
      <param name="timeout">The period within which the call must complete.</param>
      <param name="callback">The callback object invoked when the operation completes.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The method that receives the callback on completion.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open the <see cref="T:System.ServiceModel.ClientBase`1" /> object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation.</returns>
      <param name="timeout">The time within which the call must complete.</param>
      <param name="callback">The method that receives the callback on completion.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from its current state into the closed state.</summary>
      <param name="timeout">The time within which the call must complete.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object has transitioned from its current state to the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object transitions from its current state to the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> used to complete the asynchronous close operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> used to complete the asynchronous end open operation.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>The event handler that is invoked when a fault occurs while performing an operation on the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from the created state into the opened state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The time period within which the call must complete.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object has transitioned from the created state to the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object transitions from the created state to the opened state.</summary>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate">
      <summary>A delegate that is used by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> for calling asynchronous operations on the client. </summary>
      <param name="inValues">The input values to the asynchronous call.</param>
      <param name="asyncCallback">Reference to the method to be called when the corresponding asynchronous operation completes.</param>
      <param name="state">An <see cref="T:System.Object" /> that lets the client distinguish between different asynchronous calls. It is made available to the client in the <paramref name="arguments" /> parameter of the event completion callback.</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.ChannelBase`1">
      <summary>This class is used by automatically generated client proxies to call services and should not be used otherwise. 
</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.#ctor(System.ServiceModel.ClientBase{`1})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class from an existing instance of the class.</summary>
      <param name="client">The <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> object used to initialize the new instance of the class.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
      <summary>Starts an asynchronous call of a specified method by name.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous method invoked.</returns>
      <param name="methodName">The name of the method to be called asynchronously.</param>
      <param name="args">An array of arguments for the method invoked.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">The <see cref="T:System.AsyncCallback" /> delegate. </param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.EndInvoke(System.String,System.Object[],System.IAsyncResult)">
      <summary>Completes an asynchronous invocation by name of a specified method. </summary>
      <returns>
The <see cref="T:System.Object" /> output by the method invoked.
</returns>
      <param name="methodName">The name of the method called asynchronously.</param>
      <param name="args">An array of arguments for the method invoked.</param>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#IDisposable#Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources associated with the channel.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IChannel#GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <typeparam name="TProperty"></typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel. </param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous send operation.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation send completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#EndSend(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to transmit a message to the destination of the output channel. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IOutputChannel.BeginSend" />  method.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#RemoteAddress">
      <summary>Gets the destination of the service to which messages are sent out on the output channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the service to which the output channel sends messages.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message)">
      <summary>Transmits a message to the destination of the output channel. </summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message on the current output channel within a specified interval of time.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the output channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received. (On the defaults, see the remarks.)</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#EndRequest(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to return a message-based response to a transmitted request. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#RemoteAddress">
      <summary>Gets the remote address to which the request channel sends messages. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> to which the request channel sends messages. </returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message)">
      <summary>Sends a message-based request and returns the correlated message-based response. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message-based request and returns the correlated message-based response within a specified interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Via">
      <summary>Gets the transport address to which the request is sent.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#AllowInitializationUI">
      <summary>The <see cref="T:System.ServiceModel.EndpointAddress" /> serves as both the ultimate destination and the physical address if a <see cref="P:System.ServiceModel.Channels.IOutputChannel.Via" /> is not specified. If the <see cref="P:System.ServiceModel.Channels.IOutputChannel.Via" /> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>An asynchronous call to begin using a user interface to obtain credential information.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> to use to call back when processing has completed.</returns>
      <param name="callback">The method that is called when this method completes.</param>
      <param name="state">Information about the state of the channel.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DidInteractiveInitialization">
      <summary>Gets a value that indicates whether a call was done to a user interface to obtain credential information. </summary>
      <returns>true if the <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> method was called (or the <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> and <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> methods); otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DisplayInitializationUI">
      <summary>A call to a user interface to obtain credential information.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>Called when the call to <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> has finished.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" />.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#UnknownMessageReceived">
      <summary>Reserved.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the client channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the channel.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Abort">
      <summary>Causes a communication object to transition immediately from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object with a specified time-out.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object has transitioned from its current state to the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object transitions from its current state to the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginOpen" /> method.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>The event handler that is invoked when a fault occurs while performing an operation on the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open">
      <summary>Causes a communication object to transition from the created state into the opened state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object has transitioned from the created state to the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object transitions from the created state to the opened state.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#State">
      <summary>Gets the current state of the communication-oriented object.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.CommunicationState" /> of the object.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#AllowOutputBatching">
      <summary>Gets or sets a value that instructs Silverlight version 2 to store a set of messages before giving the messages to the transport.</summary>
      <returns>true if the batching of outgoing messages is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#InputSession">
      <summary>Gets the input session for the channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IInputSession" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#LocalAddress">
      <summary>Gets the local endpoint for the channel.</summary>
      <returns>The local <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OperationTimeout">
      <summary>Gets or sets the time period within which an operation must complete or an exception is thrown.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that specifies the time period within which an operation must complete.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OutputSession">
      <summary>Gets the output session associated with the channel, if any.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.IOutputSession" /> implementation if an input session exists; otherwise, null.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#RemoteAddress">
      <summary>Gets the remote address associated with the channel.</summary>
      <returns>The remote <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#SessionId">
      <summary>Returns an identifier for the current session, if any.</summary>
      <returns>The current session identifier, if any.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IExtensibleObject{T}#Extensions">
      <summary>Gets a collection of extension objects for this extensible object.</summary>
      <returns>A <see cref="T:System.ServiceModel.IExtensionCollection`1" /> of extension objects.</returns>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.EndOperationDelegate">
      <summary>A delegate that is invoked by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> on successful completion of the call made by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> to <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />.</summary>
      <returns>An array of <see cref="T:System.Object" /> that contains the results of the call to the asynchronous method. The operation may have multiple return values, which are all returned in this object array.</returns>
      <param name="result">The result returned by the call made by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" />to <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />.</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs">
      <summary>Stores the results from an asynchronous call made by the client.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs.Results">
      <summary>Gets the results from an asynchronous call made by the client.</summary>
    </member>
    <member name="T:System.ServiceModel.CommunicationException">
      <summary>Represents a communication error in either the service or client application.</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationException" /> class, using the specified message.</summary>
      <param name="message">The description of the error condition.</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationException" /> class, using the specified message and the inner exception.</summary>
      <param name="message">The description of the error condition.</param>
      <param name="innerException">The inner exception to be used.</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectAbortedException">
      <summary>The exception that is thrown when the call is to an <see cref="T:System.ServiceModel.ICommunicationObject" /> object that has aborted.</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> class with the specified message. </summary>
      <param name="message">The message carried in the exception.</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> class using the specified message and inner exception. </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectFaultedException">
      <summary>The exception that is thrown when a call is made to a communication object that has faulted. </summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> class using the specified message.</summary>
      <param name="message">The message that describes the exception.</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> class using the specified message and inner exception.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationState">
      <summary>Defines the states in which an <see cref="T:System.ServiceModel.ICommunicationObject" /> can exist. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Created">
      <summary>Indicates that the communication object has been instantiated and is configurable, but not yet open or ready for use.</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opening">
      <summary>Indicates that the communication object is being transitioned from the <see cref="F:System.ServiceModel.CommunicationState.Created" /> state to the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opened">
      <summary>Indicates that the communication object is now open and ready to be used. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closing">
      <summary>Indicates that the communication object is transitioning to the <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closed">
      <summary>Indicates that the communication object has been closed and is no longer usable. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Faulted">
      <summary>Indicates that the communication object has encountered an error or fault from which it cannot recover and from which it is no longer usable. </summary>
    </member>
    <member name="T:System.ServiceModel.DataContractFormatAttribute">
      <summary>Instructs the Silverlight version 2 infrastructure to use the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.ServiceModel.DataContractFormatAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.DataContractFormatAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.DataContractFormatAttribute.Style">
      <summary>Gets or sets the SOAP style of the serialized data.</summary>
      <returns>One of the <see cref="T:System.ServiceModel.OperationFormatStyle" /> values. The default is <see cref="F:System.ServiceModel.OperationFormatStyle.Document" />.</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointAddress">
      <summary>Provides a unique network address that a client uses to communicate with a service endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointAddress" /> class with a specified URI string.</summary>
      <param name="uri">The URI that identifies the endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.Channels.AddressHeader[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointAddress" /> class with a specified URI and headers.</summary>
      <param name="uri">The <see cref="T:System.Uri" /> that identifies the endpoint location.</param>
      <param name="addressHeaders">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.AddressHeader" /> that contains address information used to interact with the endpoint.</param>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.AnonymousUri">
      <summary>Gets a version-neutral representation of the anonymous URI.</summary>
      <returns>A <see cref="T:System.Uri" /> with the value http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/Anonymous.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ApplyTo(System.ServiceModel.Channels.Message)">
      <summary>Assigns the URI and properties of the endpoint address to the values of the headers of a specified message.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> whose header values are being assigned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.Equals(System.Object)">
      <summary>Returns a value that indicates whether a specified object is equivalent to the current endpoint address.</summary>
      <returns>true if the specified object is equivalent to the current address; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to be compared to the current endpoint address.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.GetHashCode">
      <summary>Provides a unique hash code for the current endpoint address. </summary>
      <returns>A unique hash code for the current endpoint address.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Headers">
      <summary>Gets the collection of address headers for the endpoints that the builder can create.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> that contains address information for the endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsAnonymous">
      <summary>Gets a value that indicates whether the endpoint is anonymous.</summary>
      <returns>true if the endpoint is <see cref="P:System.ServiceModel.EndpointAddress.AnonymousUri" />; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsNone">
      <summary>Gets a value that indicates whether the URI for the endpoint is the <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" />.</summary>
      <returns>true if the URI of the endpoint is <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" />; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.NoneUri">
      <summary>Gets a version-neutral URI used for the address of an endpoint to which a message must not be sent.</summary>
      <returns>A <see cref="T:System.Uri" /> with the value http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/None.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Equality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>Returns a value that indicates whether specified endpoint addresses are not equivalent.</summary>
      <returns>true if the endpoint addresses are equivalent; otherwise, false.</returns>
      <param name="address1">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
      <param name="address2">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Inequality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>Returns a value that indicates whether specified endpoint addresses are not equivalent.</summary>
      <returns>true if the endpoint addresses are not equivalent; otherwise, false.</returns>
      <param name="address1">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
      <param name="address2">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ToString">
      <summary>Returns a canonical string representation of the URI that is contained in the endpoint address.</summary>
      <returns>The URI that identifies the endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Uri">
      <summary>Gets the URI for the endpoint.</summary>
      <returns>The <see cref="T:System.Uri" /> for the endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)">
      <summary>Saves all the child nodes of the node to the XML dictionary writer specified.</summary>
      <param name="addressingVersion">The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> of the current endpoint address.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> to which the endpoint address is saved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> or <paramref name="addressingVersion" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.EndpointNotFoundException">
      <summary>The exception that is thrown when a remote endpoint could not be found or reached.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointNotFoundException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointNotFoundException" /> class with a specified error message and the inner exception that caused the current exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.EnvelopeVersion">
      <summary>Contains information related to the version of SOAP associated with a message and its exchange.</summary>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.NextDestinationActorValue">
      <summary>Gets a string that contains the URI name for the SOAP role associated with the current message version for the next destination.</summary>
      <returns>A string that contains http://schemas.xmlsoap.org/soap/actor/next if SOAP 1.1 is used; an empty string is used if the message version is none.</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.None">
      <summary>Gets the envelope version not using a version of SOAP.</summary>
      <returns>The envelope version not using SOAP formatting.</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap11">
      <summary>Gets the SOAP 1.1 envelope version.</summary>
      <returns>The SOAP 1.1 <see cref="T:System.ServiceModel.EnvelopeVersion" />.</returns>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.ToString">
      <summary>Gets a string that represents the current envelope version.</summary>
      <returns>The current envelope version.</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException">
      <summary>Represents a SOAP fault.</summary>
    </member>
    <member name="T:System.ServiceModel.IClientChannel">
      <summary>Defines the behavior of outbound request and request/reply channels used by client applications.</summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.AllowInitializationUI">
      <summary>Gets or sets a value that indicates whether <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> attempts to call the <see cref="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" /> objects in the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers" /> property or throws and exception if that collection is not empty. </summary>
      <returns>true if Windows Communication Foundation (WCF) is permitted to invoke interactive channel initializers; otherwise, false. </returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>An asynchronous call to begin using a user interface to obtain credential information.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> to use to call back when processing has completed.</returns>
      <param name="callback">The method that is called when this method completes.</param>
      <param name="state">Information about the state of the channel.</param>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization">
      <summary>Gets a value that indicates whether a call was done to a user interface to obtain credential information. </summary>
      <returns>true if the <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> method was called (or the <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> and <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> methods); otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.DisplayInitializationUI">
      <summary>A call to a user interface to obtain credential information.</summary>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>Called when the call to <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> has finished.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" />.</param>
    </member>
    <member name="E:System.ServiceModel.IClientChannel.UnknownMessageReceived">
      <summary>Reserved. </summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the client channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the channel.</returns>
    </member>
    <member name="T:System.ServiceModel.ICommunicationObject">
      <summary>Defines the contract for the basic state machine for all communication-oriented objects in the system, including channels, the channel managers, factories, listeners, and dispatchers, and service hosts.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Abort">
      <summary>Causes a communication object to transition immediately from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object with a specified time-out.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The specified time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default open time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The specified time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default close time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closed">
      <summary>Occurs when the communication object completes its transition from the closing state into the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closing">
      <summary>Occurs when the communication object first enters the closing state.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> method.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginOpen" /> method.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Faulted">
      <summary>Occurs when the communication object first enters the faulted state.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open">
      <summary>Causes a communication object to transition from the created state into the opened state.</summary>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default open time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
      <summary>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The specified time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opened">
      <summary>Occurs when the communication object completes its transition from the opening state into the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opening">
      <summary>Occurs when the communication object first enters the opening state.</summary>
    </member>
    <member name="P:System.ServiceModel.ICommunicationObject.State">
      <summary>Gets the current state of the communication-oriented object.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.CommunicationState" /> of the object.</returns>
    </member>
    <member name="T:System.ServiceModel.IContextChannel">
      <summary>Defines the interface for the context control of a channel.</summary>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.AllowOutputBatching">
      <summary>Gets or sets a value that instructs Silverlight version 2 to store a set of messages before giving the messages to the transport.</summary>
      <returns>true if the batching of outgoing messages is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.InputSession">
      <summary>Gets the input session for the channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IInputSession" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.LocalAddress">
      <summary>Gets the local endpoint for the channel.</summary>
      <returns>The local <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OperationTimeout">
      <summary>Gets or sets the time period within which an operation must complete or an exception is thrown.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that specifies the time period within which an operation must complete.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OutputSession">
      <summary>Gets the output session associated with the channel, if any.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IOutputSession" /> implementation if an input session exists; otherwise, null.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.RemoteAddress">
      <summary>Gets the remote address associated with the channel.</summary>
      <returns>The remote <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.SessionId">
      <summary>Returns an identifier for the current session, if any.</summary>
      <returns>The current session identifier, if any.</returns>
    </member>
    <member name="T:System.ServiceModel.IDefaultCommunicationTimeouts">
      <summary>Defines the interface for specifying the communication time-outs used by channels and channel managers, such as channel factories.</summary>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout">
      <summary>Gets the interval of time after which the close method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the close method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout">
      <summary>Gets the interval of time after which the open method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the open method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout">
      <summary>Gets the interval of time after which the receive method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the receive method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout">
      <summary>Gets the interval of time after which the send method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the send method to time out.</returns>
    </member>
    <member name="T:System.ServiceModel.IExtensibleObject`1">
      <summary>Enables an object to participate in custom behavior, such as registering for events, or watching state transitions.</summary>
      <typeparam name="T">The type of the extension class.</typeparam>
    </member>
    <member name="P:System.ServiceModel.IExtensibleObject`1.Extensions">
      <summary>Gets a collection of extension objects for this extensible object.</summary>
      <returns>A <see cref="T:System.ServiceModel.IExtensionCollection`1" /> of extension objects.</returns>
    </member>
    <member name="T:System.ServiceModel.IExtension`1">
      <summary>Enables an object to extend another object through aggregation.</summary>
      <typeparam name="T">The object that participates in the custom behavior.</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Attach(`0)">
      <summary>Enables an extension object to find out when it has been aggregated. Called when the extension is added to the <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> property.</summary>
      <param name="owner">The extensible object that aggregates this extension.</param>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Detach(`0)">
      <summary>Enables an object to find out when it is no longer aggregated. Called when an extension is removed from the <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> property.</summary>
      <param name="owner">The extensible object that aggregates this extension.</param>
    </member>
    <member name="T:System.ServiceModel.IExtensionCollection`1">
      <summary>A collection of the <see cref="T:System.ServiceModel.IExtension`1" /> objects that allow for retrieving the <see cref="T:System.ServiceModel.IExtension`1" /> objects by their type.</summary>
      <typeparam name="T">The type of the extension objects.</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.Find``1">
      <summary>Finds the specified extension object in the collection.</summary>
      <returns>The extension object that was found.</returns>
      <typeparam name="E">The type of extension object.</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.FindAll``1">
      <summary>Finds all extension objects in the collection specified by <paramref name="E" />.</summary>
      <returns>A collection of all extension objects in the collection that implements the specified type.</returns>
      <typeparam name="E">The type of extension object.</typeparam>
    </member>
    <member name="T:System.ServiceModel.InvalidMessageContractException">
      <summary>Represents a message contract that is not valid.</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.InvalidMessageContractException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.InvalidMessageContractException" /> class using the specified message.</summary>
      <param name="message">The message for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.InvalidMessageContractException" /> class that uses the specified message and inner exception.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.ServiceModel.MessageBodyMemberAttribute">
      <summary>Specifies that a member is serialized as an element inside the SOAP body.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.MessageBodyMemberAttribute.Order">
      <summary>Gets or sets a value that indicates the position in which the member is serialized into the SOAP body.</summary>
      <returns>The location of the element in the SOAP body.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value passed to the property setter is a negative integer.</exception>
    </member>
    <member name="T:System.ServiceModel.MessageContractAttribute">
      <summary>Defines a strongly typed class that corresponds to a SOAP message.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.IsWrapped">
      <summary>Gets or sets a value that specifies whether the message body has a wrapper element.</summary>
      <returns>true if the message body has a wrapper element; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperName">
      <summary>Gets or sets the name of the wrapper element of the message body.</summary>
      <returns>The name of the wrapper element in the message body.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperNamespace">
      <summary>Gets or sets the namespace of the message body wrapper element.</summary>
      <returns>The wrapper element namespace.</returns>
    </member>
    <member name="T:System.ServiceModel.MessageContractMemberAttribute">
      <summary>Declares the base members for <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> and <see cref="T:System.ServiceModel.MessageHeaderAttribute" />.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Name">
      <summary>Specifies the name of the element that corresponds to this member. </summary>
      <returns>The name of the element that corresponds to this member. This string must be a valid XML element name. </returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Namespace">
      <summary>Specifies the namespace of the element that corresponds to this member. </summary>
      <returns>A namespace URI of the element that corresponds to this member. </returns>
    </member>
    <member name="T:System.ServiceModel.MessageHeaderException">
      <summary>The exception that is thrown when the expectations regarding headers of a SOAP message are not satisfied when the message is processed.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class with the specified message.</summary>
      <param name="message">The message carried in the exception.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message and a value that indicates whether the message header is a duplicate or is missing.</summary>
      <param name="message">The exception message.</param>
      <param name="isDuplicate">true if the multiple message header is a duplicate; false if there are no message headers.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message and the inner exception that caused the exception.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that contains the inner exception that caused the exception.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace, and a value that indicates whether the message header is a duplicate or is missing.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
      <param name="isDuplicate">true if the multiple message header is a duplicate; false if there are no message headers.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace, a value that indicates whether the message header is a duplicate or is missing, and the inner exception that caused the exception.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
      <param name="isDuplicate">true if the multiple message header is a duplicate; false if there are no message headers.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that contains the inner exception that caused the exception.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace, and the inner exception that caused the exception.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that contains the inner exception that caused the exception.</param>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderName">
      <summary>Gets the name of the SOAP header that caused the exception.</summary>
      <returns>The name of the SOAP header.</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderNamespace">
      <summary>Gets the namespace of the SOAP header that caused the exception.</summary>
      <returns>The namespace of the SOAP header.</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.IsDuplicate">
      <summary>Gets a value that indicates whether there are multiple message headers or no message headers.</summary>
      <returns>true if the multiple message header is a duplicate; false if there are no message headers.</returns>
    </member>
    <member name="T:System.ServiceModel.MessageParameterAttribute">
      <summary>Controls the name of the request and response parameter names. Cannot be used with <see cref="T:System.ServiceModel.Channels.Message" /> or message contracts.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageParameterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageParameterAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.MessageParameterAttribute.Name">
      <summary>Obtains or sets the name attribute of the parameter in the XML Schema (XSD).</summary>
      <returns>The name attribute of the parameter in the XSD.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="T:System.ServiceModel.OperationContext">
      <summary>Provides access to the execution context of a service method.</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContext" /> class that uses the specified <see cref="T:System.ServiceModel.IContextChannel" /> in a client application. </summary>
      <param name="channel">The <see cref="T:System.ServiceModel.IContextChannel" /> used to create a new client <see cref="T:System.ServiceModel.OperationContext" />.</param>
      <exception cref="T:System.ArgumentNullException">The channel is null.</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Current">
      <summary>Gets or sets the execution context for the current thread.</summary>
      <returns>The <see cref="T:System.ServiceModel.OperationContext" /> that represents the messaging and execution context of the current method.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageHeaders">
      <summary>Gets the incoming message headers for the <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> object that contains the incoming message headers.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageProperties">
      <summary>Gets the message properties for the incoming message in the <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageProperties" /> object that contains the message properties on the incoming message.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageVersion">
      <summary>Gets the incoming SOAP message version for the <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>The SOAP version of the incoming message.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IsUserContext">
      <summary>This property is intended for system use and should not be called by users.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageHeaders">
      <summary>Gets the outgoing message headers for the active <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> object that contains outbound message headers for the active <see cref="T:System.ServiceModel.OperationContext" />.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageProperties">
      <summary>Gets the message properties for the outbound message in the active <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageProperties" /> object that contains the message properties on the outbound message.</returns>
    </member>
    <member name="T:System.ServiceModel.OperationContextScope">
      <summary>Creates a block within which an <see cref="T:System.ServiceModel.OperationContext" /> object is in scope.</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class that uses the specified <see cref="T:System.ServiceModel.IContextChannel" /> to create a new <see cref="T:System.ServiceModel.OperationContext" /> for the scope.</summary>
      <param name="channel">The channel to use when creating the scope for a new <see cref="T:System.ServiceModel.OperationContext" />.</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class to create a scope for the specified <see cref="T:System.ServiceModel.OperationContext" /> object.</summary>
      <param name="context">The active <see cref="T:System.ServiceModel.OperationContext" /> in the created scope.</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.Dispose">
      <summary>Restores the original <see cref="T:System.ServiceModel.OperationContext" /> to the active context and recycles the <see cref="T:System.ServiceModel.OperationContextScope" /> object.</summary>
    </member>
    <member name="T:System.ServiceModel.OperationContractAttribute">
      <summary>Indicates that a method defines an operation that is part of a service contract in a Silverlight application. </summary>
    </member>
    <member name="M:System.ServiceModel.OperationContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Action">
      <summary>Gets or sets the WS-Addressing action of the request message. </summary>
      <returns>The action to use in generating the WS-Addressing Action header.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.AsyncPattern">
      <summary>Indicates that an operation is implemented asynchronously using a Begin&lt;methodName&gt; and End&lt;methodName&gt; method pair in a service contract. </summary>
      <returns>true if the Begin&lt;methodName&gt;method is matched by an End&lt;methodName&gt; method and can be treated by the infrastructure as an operation that is implemented as an asynchronous method pair on the service interface; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.IsOneWay">
      <summary>Gets or sets a value that indicates whether an operation returns a reply message.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Name">
      <summary>Gets or sets the name of the operation.</summary>
      <returns>The name of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.ReplyAction">
      <summary>Gets or sets the value of the SOAP action for the reply message of the operation.</summary>
      <returns>The value of the SOAP action for the reply message.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.OperationFormatStyle">
      <summary>Represents the SOAP style that determines how the WSDL metadata for the service is formatted.</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Document">
      <summary>Causes the WSDL representation to contain a single element that represents the document that is exchanged for the operation.</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Rpc">
      <summary>Causes the WSDL representation of messages exchanged for an operation and contains parameters as if it were a remote procedure call.</summary>
    </member>
    <member name="T:System.ServiceModel.ProtocolException">
      <summary>The exception seen on the client that is thrown when communication with the remote party is impossible due to mismatched data transfer protocols.</summary>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ProtocolException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ProtocolException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown. </param>
    </member>
    <member name="T:System.ServiceModel.QuotaExceededException">
      <summary>The exception that is thrown when a message quota has been exceeded.</summary>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.QuotaExceededException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.QuotaExceededException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.ServerTooBusyException">
      <summary>The exception that is thrown when a server is too busy to accept a message.</summary>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServerTooBusyException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServerTooBusyException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.ServiceActivationException">
      <summary>The exception that is thrown when a service fails to activate.</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceActivationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceActivationException" /> class with a specified error message and the inner exception provided.  </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown. </param>
    </member>
    <member name="T:System.ServiceModel.ServiceContractAttribute">
      <summary>Indicates that an interface or a class defines a service contract in a Silverlight client application. </summary>
    </member>
    <member name="M:System.ServiceModel.ServiceContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
      <summary>Gets or sets the name used to locate the service in an application configuration file.</summary>
      <returns>The name used to locate the service element in an application configuration file. The default is the name of the service implementation class.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Name">
      <summary>Gets or sets the name for the &lt;portType&gt; element in Web Services Description Language (WSDL). </summary>
      <returns>The default value is the name of the class or interface to which the <see cref="T:System.ServiceModel.ServiceContractAttribute" /> is applied. </returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Namespace">
      <summary>Gets or sets the namespace of the &lt;portType&gt; element in Web Services Description Language (WSDL).</summary>
      <returns>The WSDL namespace of the &lt;portType&gt; element. The default value is "http://tempuri.org". </returns>
    </member>
    <member name="T:System.ServiceModel.ServiceKnownTypeAttribute">
      <summary>Specifies known types to be used by a service when serializing or deserializing.</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> class and specifies the name of a method that returns the known types.</summary>
      <param name="methodName">The name of a method that returns the known types.</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> class with the name of a method that returns the known types and the type that contains the method (or methods) that returns the known types.</summary>
      <param name="methodName">The name of a method that returns the known types.</param>
      <param name="declaringType">The type that can use the known types in its object graph.</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> class with the specified known type.</summary>
      <param name="type">Specifies a known type that can be used in a parameter or return value defined by the service.</param>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType">
      <summary>Gets the type that contains the methods that return the known types.</summary>
      <returns>The methods that return the known types.</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName">
      <summary>Gets the name of a method that returns the collection of known types.</summary>
      <returns>The name of the method that returns the known types.</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.Type">
      <summary>The known type that can be included in an object graph.</summary>
      <returns>The <see cref="T:System.Type" /> of the known type.</returns>
    </member>
    <member name="T:System.ServiceModel.UnknownMessageReceivedEventArgs">
      <summary>Contains the message received by a channel and cannot be associated with any pending request.</summary>
    </member>
    <member name="P:System.ServiceModel.UnknownMessageReceivedEventArgs.Message">
      <summary>Gets the unknown message that caused the event.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that caused the event.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeader">
      <summary>Represents a header that encapsulates an address information item used to identify or interact with an endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeader" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeader" /> class with a specified value, name and namespace.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeader" /> with the specified <paramref name="name" /> and <paramref name="ns" /> that contains the information item specified by <paramref name="value" />.</returns>
      <param name="name">The name of the address header.</param>
      <param name="ns">The namespace of the address header.</param>
      <param name="value">The information item for the address header.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> is null or <paramref name="name" />.Length == 0.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeader" /> class with a specified name and namespace that uses a specified formatter to serialize the information item from a specified object.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeader" /> with the specified <paramref name="name" /> and <paramref name="ns" /> that contains the information item specified by <paramref name="value" />.</returns>
      <param name="name">The name of the address header.</param>
      <param name="ns">The namespace of the address header.</param>
      <param name="value">The information item for the address header.</param>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> used to serialize the specified object in the <paramref name="value" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="serializer" /> is null or <paramref name="name" />.Length == 0.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.Equals(System.Object)">
      <summary>Determines whether the information item in a specified object is equal to the object contained in the current address header.</summary>
      <returns>true if the information item in a specified <paramref name="obj" /> is equivalent to the information item contained in the current address header; otherwise, false. In particular, returns false if <paramref name="obj" /> is null.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the object contained in the current address header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetAddressHeaderReader">
      <summary>Returns an XML reader that can serialize the current address header object.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can serialize the current address header object.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetHashCode">
      <summary>Provides a unique hash code for an address header. </summary>
      <returns>A unique hash code for the current address header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1">
      <summary>Deserializes the information item from the current address header to an object of a specified type.</summary>
      <returns>An instance of a class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</returns>
      <typeparam name="T">A class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Deserializes the information item from the current address header to an object of a specified type that uses a specified formatter to serialize this information.</summary>
      <returns>An instance of a class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</returns>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> used to deserialize the information item from the current address header object.</param>
      <typeparam name="T">A class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serializer" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Name">
      <summary>When implemented, gets the name of the address header.</summary>
      <returns>The name of the address header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Namespace">
      <summary>When implemented, gets the namespace of the address header.</summary>
      <returns>The namespace of the address header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>When overridden in a derived class, is invoked when the address header contents are written to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header contents to a stream or file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>When overridden in a derived class, is invoked when the address header contents begin to be written to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.ToMessageHeader">
      <summary>Wraps the address header as a message header.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageHeader" /> that wraps the current address header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the address header to a stream or file using a specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlWriter)">
      <summary>Writes the address header to a stream or file using a specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the address header contents to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header contents to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>Starts to write the address header contents to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeaderCollection">
      <summary>Represents a thread-safe, read-only collection of address headers.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.AddressHeader})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> class from an enumerable set of address headers.</summary>
      <param name="addressHeaders">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> set of <see cref="T:System.ServiceModel.Channels.AddressHeader" /> objects used to initialize the collection.</param>
      <exception cref="T:System.ArgumentException">One of the address headers in the <paramref name="addressHeaders" /> parameter is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.AddHeadersTo(System.ServiceModel.Channels.Message)">
      <summary>Adds the headers in the collection to the headers of a specified message.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to which the headers are added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindAll(System.String,System.String)">
      <summary>Finds all the address headers in the collection with the specified name and namespace.</summary>
      <returns>The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.AddressHeader" /> that contains all the headers in the collection with the specified name and namespace.</returns>
      <param name="name">The name of the address header to be found.</param>
      <param name="ns">The namespace of the address header to be found.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="ns" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindHeader(System.String,System.String)">
      <summary>Finds the first address header in the collection with a specified name and namespace.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeader" /> in the collection with the specified name and namespace.</returns>
      <param name="name">The name of the address header to be found.</param>
      <param name="ns">The namespace of the address header to be found.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="ns" /> is null.</exception>
      <exception cref="T:System.ArgumentException">There is more than one header that has the specified <paramref name="name" /> and <paramref name="ns" />.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressingVersion">
      <summary>The WS-Addressing version associated with a SOAP message or understood by an endpoint.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.None">
      <summary>Gets the addressing version that indicates that no version of WS-Addressing is being used.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> that does not use a version of WS-Addressing.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressingVersion.ToString">
      <summary>A string that represents the current addressing version.</summary>
      <returns>The current addressing version.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.Binding">
      <summary>Contains the binding elements that specify the protocols, transports, and message encoders used for communication between clients and services.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.Binding" /> class with a default name and namespace. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.Binding" /> class from a specified binding of the service.</summary>
      <param name="name">The <see cref="P:System.ServiceModel.Channels.Binding.Name" /> of the binding.</param>
      <param name="ns">The <see cref="P:System.ServiceModel.Channels.Binding.Namespace" /> of the binding.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or an empty string.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ns" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel and that satisfies the features specified by an object array.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> that satisfies the features specified by the collection.</returns>
      <param name="parameters">The object array that specifies requirements for the channel factory that is built.</param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
      <exception cref="T:System.InvalidOperationException">Transport element is missing or out of order or scheme is invalid or the message version is not specified.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel and that satisfies the features specified by a collection of binding parameters.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> that satisfies the features specified by the collection.</returns>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> that specifies requirements for the channel factory built.</param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
      <exception cref="T:System.InvalidOperationException">Transport element is missing or out of order or scheme is invalid or the message version is not specified.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])">
      <summary>Returns a value that indicates whether the current binding can build a channel factory stack on the client that satisfies the requirements specified by an object array.</summary>
      <returns>true if the specified channel factory stack can be build on the client; otherwise, false.</returns>
      <param name="parameters">The object array that specifies requirements for the channel factory that is built.</param>
      <typeparam name="TChannel">The type of channel for which the factory is being tested.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Returns a value that indicates whether the current binding can build a channel factory stack on the client that satisfies the collection of binding parameters specified.</summary>
      <returns>true if the specified channel factory stack can be build on the client; otherwise, false.</returns>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> that specifies requirements for the channel factory that is built.</param>
      <typeparam name="TChannel">The type of channel for which the factory is being tested.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.CloseTimeout">
      <summary>Gets or sets the interval of time provided for a connection to close before the transport raises an exception.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out. The default value is 1 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
      <summary>When overridden in a derived class, creates a collection that contains the binding elements that are part of the current binding. </summary>
      <returns>A <see cref="T:System.Collections.Generic.ICollection`1" /> object of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> that contains the binding elements from the current binding object in the correct order.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> that specifies requirements for the channel that is built.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.MessageVersion">
      <summary>Gets the message version used by clients and services configured with the binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> used by clients and services configured with the binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Name">
      <summary>Gets or sets the name of the binding.</summary>
      <returns>The name of the binding. The default name is null.</returns>
      <exception cref="T:System.ArgumentException">The value set cannot be null or an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Namespace">
      <summary>Gets or sets the XML namespace of the binding.</summary>
      <returns>The XML namespace of the binding. The default value is "http://tempuri.org/".</returns>
      <exception cref="T:System.ArgumentNullException">The value set cannot be null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.OpenTimeout">
      <summary>Gets or sets the interval of time provided for a connection to open before the transport raises an exception.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out. The default value is 1 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.ReceiveTimeout">
      <summary>Gets or sets the interval of time that a connection can remain inactive, during which no application messages are received, before it is dropped.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the application has to receive a message before timing out. The default value is 10 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Scheme">
      <summary>When implemented in a derived class, sets the URI scheme that specifies the transport used by the channel factories that are built by the bindings.</summary>
      <returns>The URI scheme that is used by the channels that are created by the factories built by the current binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.SendTimeout">
      <summary>Gets or sets the interval of time provided for a write operation to complete before the transport raises an exception.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the write operation has to complete before timing out. The default value is 1 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingContext">
      <summary>Provides information about the addresses, bindings, binding elements and binding parameters required to build the channel factories on a Silverlight version 2 client.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.#ctor(System.ServiceModel.Channels.CustomBinding,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingContext" /> class for a specified binding and collection of binding parameters.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.CustomBinding" /> for the channel.</param>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> for the channel.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.Binding">
      <summary>Gets the binding for the channel built in the current context.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.CustomBinding" /> for the channel built in the current context.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.BindingParameters">
      <summary>Gets the collection of binding parameters for the channel built in the current context.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> for the channel built in the current context.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.BuildInnerChannelFactory``1">
      <summary>Builds the inner channel factory for channels of a specified type below the current channel factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> that represents the inner channel factory of the current channel factory.</returns>
      <typeparam name="TChannel">The type of <see cref="T:System.ServiceModel.Channels.IChannel" /> object the inner channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.CanBuildInnerChannelFactory``1">
      <summary>Returns a value that indicates whether the inner channel factory can produce a specified type of channel.</summary>
      <returns>true if the inner channel factory can produce the specified <paramref name="TChannel" />; otherwise, false.</returns>
      <typeparam name="TChannel">The type of <see cref="T:System.ServiceModel.Channels.IChannel" /> object the inner channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.Clone">
      <summary>Returns a copy of the current channel build context.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BindingContext" /> object that is a copy of the current channel build context.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.GetInnerProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The typed object <paramref name="T " />requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.RemainingBindingElements">
      <summary>Gets the binding elements that are used by other binding elements to construct the channel stack.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the binding elements that are used by other binding elements to construct the channel stack.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElement">
      <summary>The elements of the bindings that build the channel factories for various types of channels that are used to process outgoing messages on a Silverlight client.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor(System.ServiceModel.Channels.BindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElement" /> class from a specified binding element.</summary>
      <param name="elementToBeCloned">The <see cref="T:System.ServiceModel.Channels.BindingElement" /> to be cloned.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Initializes a channel factory for producing channels of a specified type from the binding context.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> initialized from the <paramref name="context" />.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides context for the binding element. </param>
      <typeparam name="TChannel">The type of channel the factory builds.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether the binding element can build a channel factory for a specific type of channel.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> can be built by the binding element; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides context for the binding element. </param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.Clone">
      <summary>When overridden in a derived class, returns a copy of the binding element object.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BindingElement" /> object that is a deep clone of the original.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>When overridden in a derived class, returns a typed object requested, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not present.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the binding element.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElementCollection">
      <summary>Represents the collection of binding elements used in a binding.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> class from an enumerable set of binding elements.</summary>
      <param name="elements">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> of generic type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> class from an array of binding elements.</summary>
      <param name="elements">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.AddRange(System.ServiceModel.Channels.BindingElement[])">
      <summary>Adds binding elements from an array to the collection of binding elements.</summary>
      <param name="elements">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> to be added to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Clone">
      <summary>Creates a copy of the binding element collection.</summary>
      <returns>A copy of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Contains(System.Type)">
      <summary>Returns a value that indicates whether a specified type of binding element belongs to the collection of binding elements.</summary>
      <returns>true if the type of binding element specified is contained in the collection; otherwise, false.</returns>
      <param name="bindingElementType">The type of binding element being tested for inclusion in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementType" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Find``1">
      <summary>Returns the first item of a specified type from the collection of binding elements.</summary>
      <returns>The item of type <see cref="T:System.Type" /> if found; if not found, 0 if <paramref name="T" /> is a value type and null if <paramref name="T" /> is a reference type.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.FindAll``1">
      <summary>Returns all of the items of a specified type from the collection of binding elements.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of all of the items of type <see cref="T:System.Type" /> if found; if none are found, 0 if <paramref name="T" /> is a value type and null if <paramref name="T" /> is a reference type.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.InsertItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>Inserts a binding element at a specified location within a collection of binding elements.</summary>
      <param name="index">The location at which to insert the binding element in the collection.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Channels.BindingElement" /> to be inserted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Remove``1">
      <summary>Removes a binding element of a specified type from the collection of binding elements.</summary>
      <returns>The item of type <see cref="T:System.Type" /> removed.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.RemoveAll``1">
      <summary>Removes all of the binding elements of a specified type from the collection of binding elements.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of all of the items of type <see cref="T:System.Type" /> found.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.SetItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>Replaces a binding element at the specified index in the collection of binding elements.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the <see cref="T:System.ServiceModel.Channels.BindingElement" /> item at the specified <paramref name="index" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingParameterCollection">
      <summary>Represents a collection of binding parameters that store information used by binding elements to build factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> class. </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.BodyWriter">
      <summary>Represents the writer of the message body.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BodyWriter" /> class that explicitly indicates whether to buffer.</summary>
      <param name="isBuffered">true if the body writer can be called multiple times; otherwise false.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.BodyWriter.IsBuffered">
      <summary>Gets a value that indicates whether the write method can be called multiple times.</summary>
      <returns>true if the body writer can be called multiple times; otherwise false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>When implemented, provides an extensibility point when the body contents are written.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write out the message body.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>Writes out the contents of the message body.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write out the message body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BufferManager">
      <summary>When implemented in a derived class, you can use the <see cref="T:System.ServiceModel.Channels.BufferManager" /> class to manage a buffer pool. The pool and its buffers are created when you instantiate this class and destroyed when the buffer pool is reclaimed by garbage collection. Every time you need to use a buffer, you take one from the pool, use it, and return it to the pool when done. This process is much faster and uses fewer resources than creating and destroying a buffer every time you need to use one.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BufferManager" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.Clear">
      <summary>Releases the buffers currently cached in the manager.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.CreateBufferManager(System.Int64,System.Int32)">
      <summary>Creates a new BufferManager with a specified maximum buffer pool size and a maximum size for each individual buffer in the pool.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.BufferManager" /> object with the specified parameters.</returns>
      <param name="maxBufferPoolSize">The maximum size of the pool.</param>
      <param name="maxBufferSize">The maximum size of an individual buffer.</param>
      <exception cref="T:System.InsufficientMemoryException">There was insufficient memory to create the requested buffer pool.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferPoolSize" /> or <paramref name="maxBufferSize" /> was less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.ReturnBuffer(System.Byte[])">
      <summary>Returns a buffer to the pool.</summary>
      <param name="buffer">A reference to the buffer being returned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> reference cannot be null.</exception>
      <exception cref="T:System.ArgumentException">Length of <paramref name="buffer" /> does not match the pool's buffer length property.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.TakeBuffer(System.Int32)">
      <summary>Gets a buffer of at least the specified size from the pool. </summary>
      <returns>A byte array that is the requested size of the buffer.</returns>
      <param name="bufferSize">The size, in bytes, of the requested buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> cannot be less than zero.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelBase">
      <summary>Provides the base implementation for custom channels.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.#ctor(System.ServiceModel.Channels.ChannelManagerBase)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelBase" /> class. </summary>
      <param name="channelManager">The <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> that provides default timeouts for the channel operations (send, receive, open, and close).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="channelManager" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultCloseTimeout">
      <summary>Gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultOpenTimeout">
      <summary>Gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultReceiveTimeout">
      <summary>Gets the default interval of time provided for a receive operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the receive operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout">
      <summary>Gets the default interval of time provided for a send operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.GetProperty``1">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested, if it is present, or null, if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.Manager">
      <summary>Gets the channel manager that is associated with the current channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> that is associated with the current channel.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>Gets the interval of time after which the close method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the close method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>Gets the interval of time after which the open method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the open method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>Gets the interval of time after which the receive method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the receive method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>Gets the interval of time after which the send method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the send method to time out.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase">
      <summary>Provides a common base implementation for all custom channel factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> class with specified default communication timeouts.</summary>
      <param name="timeouts">The <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" /> that specifies the default timeouts for open, send, receive, and close operations when exchanging messages. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultCloseTimeout">
      <summary>Gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultOpenTimeout">
      <summary>Gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultReceiveTimeout">
      <summary>Gets the default interval of time provided for a receive operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the receive operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultSendTimeout">
      <summary>Gets the default interval of time provided for a send operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.GetProperty``1">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnAbort">
      <summary>Inserts processing on a communication object after it transitions to the closing state due to the invocation of a synchronous abort operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close each of the channels that were created by the factory.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on close operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation on close completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on close operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnClose(System.TimeSpan)">
      <summary>Inserts processing on a communication object after it transitions into the opening state, which must complete within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnEndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close channels that were opened by the factory.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase`1">
      <summary>Provides a common base implementation for channel factories on the client to create channels of a specified type connected to a specified address.</summary>
      <typeparam name="TChannel">The type of channel the factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> class with the default communication timeouts specified.</summary>
      <param name="timeouts">The <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" /> that specifies the default timeouts for open, send, receive, and close operations when exchanging messages.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>Creates a particular type of channel with a specified endpoint address.</summary>
      <returns>A channel of type <paramref name="TChannel" /> with the specified <paramref name="address" />.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> of the remote endpoint to which the channel sends messages.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>Creates a particular type of channel with specified transport and endpoint addresses.</summary>
      <returns>A channel of type <paramref name="TChannel" /> with the specified remote and transport addresses.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> of the remote endpoint to which the channel sends messages.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> or <paramref name="via" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnAbort">
      <summary>Aborts each channel managed by the channel factory.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close all the channels associated with the channel factory within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on-close operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on-close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous completion of the on-close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on-close operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnClose(System.TimeSpan)">
      <summary>Closes all the channels associated with the channel factory within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on-close operation has to complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnCreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>When implemented in a derived class, provides an extensibility point when creating channels.</summary>
      <returns>A channel of type <paramref name="TChannel" /> with the specified addresses.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> of the remote endpoint to which the channel sends messages.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnEndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close all the channels associated with the channel factory within a specified interval of time.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.ValidateCreateChannel">
      <summary>Confirms that the channel factory is opened and ready to create channels.</summary>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.InvalidOperationException">The current channel factory is not in the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelManagerBase">
      <summary>Provides a base implementation for managing the default timeouts that are associated with channel and listener factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelManagerBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultReceiveTimeout">
      <summary>When overridden in a derived class, gets the default interval of time a channel has to complete the reception of a message.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the channel has to complete the reception of a message before timing out once the receive method has been invoked.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultSendTimeout">
      <summary>When overridden in a derived class, gets the default interval of time a channel has to complete the sending of a message.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the channel has to complete the sending of a message before timing out once the send method has been invoked.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>Gets the interval of time after which the close method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the close method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>Gets the interval of time after which the open method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the open method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>Gets the interval of time after which the receive method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the receive method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>Gets the interval of time after which the send method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the send method to time out.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelParameterCollection">
      <summary>Represents a collection of channel parameters.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor(System.ServiceModel.Channels.IChannel)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> class. </summary>
      <param name="channel">The channel whose parameters are in this collection.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelParameterCollection.Channel">
      <summary>Gets the channel whose parameters are in this collection. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IChannel" /> whose parameters are in this collection.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.ClearItems">
      <summary>Clears the collection of parameters.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.InsertItem(System.Int32,System.Object)">
      <summary>Inserts the specified item into the collection using the specified index.</summary>
      <param name="index">The index of the item in the collection.</param>
      <param name="item">The item to add to the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.PropagateChannelParameters(System.ServiceModel.Channels.IChannel)">
      <summary>Adds the parameters in the current collection to a specified channel's <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" />.</summary>
      <param name="innerChannel">The channel that receives the current collection's parameters.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.RemoveItem(System.Int32)">
      <summary>Removes a parameter from the collection.</summary>
      <param name="index">Index of the parameter to remove.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.SetItem(System.Int32,System.Object)">
      <summary>Replaces an item in the collection at a specified index.</summary>
      <param name="index">Index of the item to replace.</param>
      <param name="item">Value of the replacement item.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.CommunicationObject">
      <summary>Provides a common base implementation for the basic state machine common to all communication-oriented objects in the system, including channels and the channel factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> class with the mutually exclusive lock to protect the state transitions specified.</summary>
      <param name="mutex">The mutually exclusive lock that protects the class instance during a state transition.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Abort">
      <summary>Causes a communication object to transition immediately from its current state into the closing state.</summary>
      <exception cref="T:System.InvalidOperationException">Either the base class <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" /> method or the base class <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnClosed" /> method is not called.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object with a specified timeout.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)">
      <summary>Causes a communication object to transition from its current state into the closed state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closed">
      <summary>Occurs when a communication object transitions into the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closing">
      <summary>Occurs when a communication object transitions into the closing state.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultCloseTimeout">
      <summary>When overridden in a derived class, gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultOpenTimeout">
      <summary>When overridden in a derived class, gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Fault">
      <summary>Causes a communication object to transition from its current state into the faulted state.</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Faulted">
      <summary>Occurs when a communication object transitions into the faulted state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType">
      <summary>Gets the type of communication object.</summary>
      <returns>The type of communication object.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed">
      <summary>Gets a value that indicates whether the communication object has been disposed.</summary>
      <returns>true if the communication object is in a closed state; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnAbort">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions to the closing state due to the invocation of a synchronous abort operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, inserts processing after a communication object transitions to the closing state due to the invocation of an asynchronous close operation.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on close operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous on close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on close operation.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions to the opening state due to the invocation of an asynchronous open operation.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on open operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous on open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on open operation.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClose(System.TimeSpan)">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions to the closing state due to the invocation of a synchronous close operation.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosed">
      <summary>Invoked during the transition of a communication object into the closing state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosing">
      <summary>Invoked during the transition of a communication object into the closing state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)">
      <summary>When implemented in a derived class, completes an asynchronous operation on the close of a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)" /> method.</param>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)">
      <summary>When implemented in a derived class, completes an asynchronous operation on the open of a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)" /> method.</param>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted">
      <summary>Inserts processing on a communication object after it transitions to the faulted state due to the invocation of a synchronous fault operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpen(System.TimeSpan)">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions into the opening state which must complete within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on open operation has to complete before timing out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpened">
      <summary>Invoked during the transition of a communication object into the opened state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpening">
      <summary>Invoked during the transition of a communication object into the opening state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open">
      <summary>Causes a communication object to transition from the created state into the opened state.</summary>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)">
      <summary>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opened">
      <summary>Occurs when a communication object transitions into the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opening">
      <summary>Occurs when a communication object transitions into the opening state.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.State">
      <summary>Gets a value that indicates the current state of the communication object.</summary>
      <returns>A value from the <see cref="T:System.ServiceModel.CommunicationState" /> enumeration that indicates the current state of the object.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.ThisLock">
      <summary>Gets the mutually exclusive lock that protects the class instance during a state transition.</summary>
      <returns>The mutually exclusive lock that protects the class instance during a state transition.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed">
      <summary>Throws an exception if the communication object is disposed.</summary>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable">
      <summary>Throws an exception if the communication object the <see cref="P:System.ServiceModel.Channels.CommunicationObject.State" /> property is not set to the <see cref="F:System.ServiceModel.CommunicationState.Created" /> state.</summary>
      <exception cref="T:System.InvalidOperationException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Opening" /> or <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen">
      <summary>Throws an exception if the communication object is not in the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state.</summary>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Created" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be used.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.CustomBinding">
      <summary>Defines a binding from a list of binding elements. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class with the binding elements from a complete channel stack.</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> that contains the binding elements of the channel stack in top-down order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.Binding)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class from the values of a specified binding.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> that is used to initialize the custom binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class from an array of binding elements.</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the custom binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.String,System.String,System.ServiceModel.Channels.BindingElement[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class from an array of binding elements with a specified name and namespace.</summary>
      <param name="name">The name of the binding.</param>
      <param name="ns">The namespace of the binding.</param>
      <param name="bindingElementsInTopDownChannelStackOrder">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the custom binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.CreateBindingElements">
      <summary>Returns a generic collection of the binding elements from the custom binding.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> object of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> that contains the binding elements from the custom binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Elements">
      <summary>Gets the binding elements from the custom binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the binding elements from the custom binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Scheme">
      <summary>Gets the URI scheme for transport used by the custom binding.</summary>
      <returns>The URI scheme for transport used by the custom binding; or an empty string if there is no transport (<see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> is null).</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpsTransportBindingElement">
      <summary>Represents the binding element used to specify an HTTPS transport for transmitting messages. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpsTransportBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> class.</summary>
      <param name="elementToBeCloned">An instance of the <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> class.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory of a specified type that can be used to create a channel.</summary>
      <returns>A channel factory of the specified type that is configured based on the values set in the transport binding element.</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> members that describe bindings, behaviors, contracts and other information required to create the channel factory.</param>
      <typeparam name="TChannel">Type of channel.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> cannot be null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.Clone">
      <summary>Creates a copy of the current binding element.</summary>
      <returns>A copy of the current binding element.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpsTransportBindingElement.Scheme">
      <summary>Returns the URI scheme for the transport.</summary>
      <returns>The URI scheme for the transport, which is "HTTPS".</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpTransportBindingElement">
      <summary>Represents the binding element used to specify an HTTP transport for transmitting messages. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpTransportBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> class. </summary>
      <param name="elementToBeCloned">An instance of the <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> class.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory that can be used to create a channel.</summary>
      <returns>A channel factory of the specified type.</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> members that describe bindings, behaviors, contracts and other information required to create the channel factory.</param>
      <typeparam name="TChannel">Type of channel factory.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> cannot be null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Determines whether a channel factory of the specified type can be built.</summary>
      <returns>true if a channel factory can be built; otherwise false.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" />for the channel to be built.</param>
      <typeparam name="TChannel">The type of channel to check.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.Clone">
      <summary>Creates a copy of the current binding element.</summary>
      <returns>A copy of the current binding element.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</summary>
      <returns>The property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</returns>
      <param name="context">A <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T">The property to get.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.MaxBufferSize">
      <summary>Gets or sets the maximum size of the buffer to use. For buffered messages this value is the same as <see cref="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize" />. For streamed messages, this value is the maximum size of the SOAP headers, which must be read in buffered mode.</summary>
      <returns>The maximum size, in bytes, of the buffer. </returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>Returns <see cref="F:System.Uri.UriSchemeHttp" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannel">
      <summary>Defines the basic interface that all channel objects must implement. It requires that they implement the state machine interface shared by all communication objects and that they implement a method to retrieve objects from the channel stack. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannel.GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory">
      <summary>Defines the interface that must be implemented by a channel factory to produce channels.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory.GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested, if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory`1">
      <summary>Defines the interface that must be implemented by channel factories that create type-specific channels.</summary>
      <typeparam name="TChannel">The type of channel that the channel factory creates.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>Creates a channel of a specified type to a specified endpoint address.</summary>
      <returns>A channel of type <paramref name="TChannel" /> to the specified endpoint address.</returns>
      <param name="to">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>Creates a channel of a specified type to a specified endpoint address and transport address to which messages are sent.</summary>
      <returns>A channel of type <paramref name="TChannel" /> to the specified endpoint address and transport address.</returns>
      <param name="to">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexChannel">
      <summary>Defines the interface that a channel must implement to both send and receive messages.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSession">
      <summary>Defines the interface for the session implemented on each side of a bi-directional communication between messaging endpoints.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to terminate the outbound session.</summary>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object that contains state information for this request.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to terminate the outbound session with a specified timeout within which the operation must complete.</summary>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which the operation must complete.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object that contains state information for this request. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession">
      <summary>Terminates the outbound session that indicates that no more messages will be sent from this endpoint on the channel associated with the session. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession(System.TimeSpan)">
      <summary>Terminates the outbound session that indicates that no more messages will be sent from this endpoint on the channel associated with the session within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which the operation must complete.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.EndCloseOutputSession(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to terminate the outbound session that indicates that no more messages will be sent from this endpoint on the channel associated with the session. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession" /> methods.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSessionChannel">
      <summary>Defines the interface that associates a duplex channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputChannel">
      <summary>Defines the interface that a channel must implement to receive a message. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message that has a state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message reception. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for a message to become available.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for a message to become available.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a message to arrive.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for a message to become available.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to receive a message. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received. </returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
      <summary>Completes the specified asynchronous operation to receive a message.</summary>
      <returns>true if a message is received before the specified interval of time elapses; otherwise false.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> received. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
      <summary>Completes the specified asynchronous wait-for-a-message operation.</summary>
      <returns>true if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise false.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
      <summary>Gets the address on which the input channel receives messages. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> on which the input channel receives messages. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive">
      <summary>Returns the message received, if one is available. If a message is not available, blocks for a default interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
      <summary>Returns the message received, if one is available. If a message is not available, blocks for a specified interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the receive operation has to complete before timing out and throwing a <see cref="T:System.TimeoutException" />.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
      <summary>Tries to receive a message within a specified interval of time. </summary>
      <returns>true if a message is received before the <paramref name="timeout" /> has been exceeded; otherwise false.</returns>
      <param name="timeout">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</param>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> received. </param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
      <summary>Returns a value that indicates whether a message has arrived within a specified interval of time.</summary>
      <returns>true if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise false.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> specifies the maximum interval of time to wait for a message to arrive before timing out.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSession">
      <summary>Defines the interface for the session implemented on the receiving side of a one-way communication between messaging endpoints. </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSessionChannel">
      <summary>Defines the interface that associates an input channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IMessageProperty">
      <summary>Defines an interface that you can implement to describe a set of properties for a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IMessageProperty.CreateCopy">
      <summary>Creates a copy of the current instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.IMessageProperty" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputChannel">
      <summary>Defines the interface that a channel must implement to send a message. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel. </param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous send operation.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation send completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.EndSend(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to transmit a message to the destination of the output channel. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IOutputChannel.BeginSend" /> method. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.RemoteAddress">
      <summary>Gets the destination of the service to which messages are sent out on the output channel. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the service to which the output channel sends messages. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message)">
      <summary>Transmits a message to the destination of the output channel. </summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message on the current output channel within a specified interval of time.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the output channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSession">
      <summary>Defines the interface for the session implemented on the sending side of a one-way communication between messaging endpoints. </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSessionChannel">
      <summary>Defines the interface that associates an output channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestChannel">
      <summary>Defines the contract that a channel must implement to be on the requesting side of a request-reply communication between messaging endpoints. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received. (On the defaults, see the remarks.)</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to return a message-based response to a transmitted request. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.RemoteAddress">
      <summary>Gets the remote address to which the request channel sends messages. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> to which the request channel sends messages. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message)">
      <summary>Sends a message-based request and returns the correlated message-based response. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message-based request and returns the correlated message-based response within a specified interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.Via">
      <summary>Gets the transport address to which the request is send.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestSessionChannel">
      <summary>Defines the interface to associate a request channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.ISession">
      <summary>Defines the interface to establish a shared context among parties that exchange messages by providing an ID for the communication session. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ISession.Id">
      <summary>Gets the ID that uniquely identifies the session. </summary>
      <returns>The ID that uniquely identifies the session. </returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ISessionChannel`1">
      <summary>Defines the interface that associates a channel with a specific type of session.</summary>
      <typeparam name="TSession">The type of <see cref="T:System.ServiceModel.Channels.ISession" /> associated with the channel.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ISessionChannel`1.Session">
      <summary>Gets the type of session associated with this channel.</summary>
      <returns>The type of <see cref="T:System.ServiceModel.Channels.ISession" /> associated with this channel.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.Message">
      <summary>Represents the unit of communication between endpoints in a distributed environment. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.Message" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.Close">
      <summary>Closes the <see cref="T:System.ServiceModel.Channels.Message" /> and releases any resources. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String)">
      <summary>Creates a message that contains a version and an action.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message.</param>
      <param name="action">A description of how the message should be processed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> or <paramref name="action" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object)">
      <summary>Creates a message with the specified version, action and body. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a message using the specified version, action, message body and serializer.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The body of the message. </param>
      <param name="serializer">A <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="fault" /> or <paramref name="action" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.ServiceModel.Channels.BodyWriter)">
      <summary>Creates a message with a body that consists of an array of bytes. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">A <see cref="T:System.ServiceModel.Channels.BodyWriter" /> of type byte. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlDictionaryReader)">
      <summary>Creates a message with the specified version, action and body. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlReader)">
      <summary>Creates a message using the specified reader, action and version. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The <see cref="T:System.Xml.XmlReader" /> object to be used for reading the SOAP message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1">
      <summary>Retrieves the body of this <see cref="T:System.ServiceModel.Channels.Message" /> instance.</summary>
      <returns>An object of type <paramref name="T" /> that contains the body of this message.</returns>
      <typeparam name="T">The body of the message.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Retrieves the body of this <see cref="T:System.ServiceModel.Channels.Message" /> using the specified serializer.</summary>
      <returns>An object of type <paramref name="T" /> that contains the body of this message.</returns>
      <param name="serializer">A <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <typeparam name="T">The body of the message.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBodyAttribute(System.String,System.String)">
      <summary>Retrieves the attributes of the message body.</summary>
      <returns>The attributes of the message body.</returns>
      <param name="localName">The local name of the XML node.The name of the element that corresponds to this member. This string must be a valid XML element name.</param>
      <param name="ns">The namespace to which this XML element belongs.The namespace URI of the element that corresponds to this member. The system does not validate any URIs other than transport addresses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> or <paramref name="ns" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetReaderAtBodyContents">
      <summary>Gets the XML dictionary reader that accesses the body content of this message.</summary>
      <returns>A <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message is empty, or has been copied, read or written.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Headers">
      <summary>When overridden in a derived class, gets the headers of the message. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> object that represents the headers of the message. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsDisposed">
      <summary>Returns a value that indicates whether the <see cref="T:System.ServiceModel.Channels.Message" /> is disposed. </summary>
      <returns>true if the message is disposed; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsEmpty">
      <summary>Returns a value that indicates whether the <see cref="T:System.ServiceModel.Channels.Message" /> is empty. </summary>
      <returns>true if the message is empty; otherwise, false. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsFault">
      <summary>Gets a value that indicates whether this message generates any SOAP faults.</summary>
      <returns>true if this message generates any SOAP faults; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnBodyToString(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the message body is converted to a string.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to convert the message body to a string. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnClose">
      <summary>Called when the message is closing.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetBodyAttribute(System.String,System.String)">
      <summary>Called when the attributes of the message body is retrieved.</summary>
      <returns>The attributes of the message body.</returns>
      <param name="localName">The local name of the XML node.The name of the element that corresponds to this member. This string must be a valid XML element name.</param>
      <param name="ns">The namespace to which this XML element belongs.The namespace URI of the element that corresponds to this member. The system does not validate any URIs other than transport addresses.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetReaderAtBodyContents">
      <summary>Called when an XML dictionary reader that can access the body content of this message can be retrieved.</summary>
      <returns>A <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the message body is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write this message body to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the entire message is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write this message to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the start body is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write the start body to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the start envelope is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write the start envelope to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartHeaders(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the start header is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write the start header to an XML file.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Properties">
      <summary>When overridden in a derived class, gets a set of processing-level annotations to the message. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageProperties" /> that contains a set of processing-level annotations to the message.</returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.State">
      <summary>Gets the current state of this <see cref="T:System.ServiceModel.Channels.Message" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageState" /> that contains the current state of this <see cref="T:System.ServiceModel.Channels.Message" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.System#IDisposable#Dispose">
      <summary>Closes all the resources used by this message. This method cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.ServiceModel.Channels.Message" />. </summary>
      <returns>The current <see cref="T:System.ServiceModel.Channels.Message" />. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Version">
      <summary>When overridden in a derived class, gets the SOAP version of the message. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that represents the SOAP version. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the body element using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the body element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlWriter)">
      <summary>Serializes the message body using the specified <see cref="T:System.Xml.XmlWriter" />. </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to be used to write the body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is disposed. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the body content using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the body element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the entire message using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlWriter)">
      <summary>Serializes the entire message using the specified <see cref="T:System.Xml.XmlWriter" />. </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to be used to write the body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the start body using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the start body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlWriter)">
      <summary>Serializes the start body using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the start body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the start envelope using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the start envelope.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageBuffer">
      <summary>Represents a memory buffer that stores an entire message for future consumption.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.BufferSize">
      <summary>Gets the approximate number of bytes accessed by this <see cref="T:System.ServiceModel.Channels.MessageBuffer" />. </summary>
      <returns>The approximate number of bytes accessed by this <see cref="T:System.ServiceModel.Channels.MessageBuffer" />. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.Close">
      <summary>Finishes working with the buffer.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.CreateMessage">
      <summary>Returns a copy of the original message.</summary>
      <returns>An identical copy of the original <see cref="T:System.ServiceModel.Channels.Message" /> instance you previously provided to the <see cref="M:System.ServiceModel.Channels.Message.CreateBufferedCopy(System.Int32)" /> method of a <see cref="T:System.ServiceModel.Channels.Message" /> instance. </returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.MessageContentType">
      <summary>Gets the type of message content stored in this buffer.</summary>
      <returns>The type of message content stored in this buffer.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.System#IDisposable#Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> and optionally releases the managed resources. This method cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.WriteMessage(System.IO.Stream)">
      <summary>Writes the entire content of this buffer to the specified I/O stream.</summary>
      <param name="stream">An I/O stream that the entire content of this buffer is written to.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoder">
      <summary>The encoder is the component that is used to write messages to a stream and to read messages from a stream.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
      <summary>When overridden in a derived class, gets the MIME content type used by the encoder.</summary>
      <returns>The content type that is supported by the message encoder.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T " />requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
      <summary>Returns a value that indicates whether a specified message-level content-type value is supported by the message encoder.</summary>
      <returns>true if the message-level content-type specified is supported; otherwise false.</returns>
      <param name="contentType">The message-level content-type being tested.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MediaType">
      <summary>When overridden in a derived class, gets the media type value that is used by the encoder.</summary>
      <returns>The media type that is supported by the message encoder.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
      <summary>When overridden in a derived class, gets the message version value that is used by the encoder.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that is used by the encoder.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
      <summary>When overridden in a derived class, reads a message from a specified buffer.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the buffer specified.</returns>
      <param name="buffer">A <see cref="T:System.ArraySegment`1" /> of type <see cref="T:System.Byte" /> that provides the buffer from which the message is deserialized.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer from which the message is deserialized.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
      <summary>When overridden in a derived class, reads a message from a specified stream.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the stream specified.</returns>
      <param name="buffer">A <see cref="T:System.ArraySegment`1" /> of type <see cref="T:System.Byte" /> that provides the buffer from which the message is deserialized.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer from which the message is deserialized.</param>
      <param name="contentType">The Multipurpose Internet Mail Extensions (MIME) message-level content-type.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32)">
      <summary>When overridden in a derived class, reads a message from a specified stream.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the stream specified.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object from which the message is read.</param>
      <param name="maxSizeOfHeaders">The maximum size of the headers that can be read from the message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
      <summary>When overridden in a derived class, reads a message from a specified stream.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the stream specified.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object from which the message is read.</param>
      <param name="maxSizeOfHeaders">The maximum size of the headers that can be read from the message.</param>
      <param name="contentType">The Multipurpose Internet Mail Extensions (MIME) message-level content-type.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ToString">
      <summary>Returns the content type that is used by the message encoder.</summary>
      <returns>The content type that is used by the message encoder.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
      <summary>Writes a message less than a specified size to a byte array buffer.</summary>
      <returns>A <see cref="T:System.ArraySegment`1" /> of type byte that provides the buffer to which the message is serialized.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to write to the message buffer.</param>
      <param name="maxMessageSize">The maximum message size that can be written.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer to which the message is written.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
      <summary>When overridden in a derived class, writes a message of less than a specified size to a byte array buffer at the specified offset.</summary>
      <returns>A <see cref="T:System.ArraySegment`1" /> of type byte that provides the buffer to which the message is serialized.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to write to the message buffer.</param>
      <param name="maxMessageSize">The maximum message size that can be written.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer to which the message is written.</param>
      <param name="messageOffset">The offset of the segment that begins from the start of the byte array that provides the buffer.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
      <summary>When overridden in a derived class, writes a message to a specified stream.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to write to the <paramref name="stream" />.</param>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object to which the <paramref name="message" /> is written.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoderFactory">
      <summary>An abstract base class that represents the factory for producing message encoders that can read messages from a stream and write them to a stream for various types of message encoding.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.CreateSessionEncoder">
      <summary>Returns a message encoder that can be used to correlate messages in session-based exchanges.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> that is used in session-based exchanges of messages.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.Encoder">
      <summary>When overridden in a derived class, gets the message encoder that is produced by the factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> used by the factory.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.MessageVersion">
      <summary>When overridden in a derived class, gets the message version that is used by the encoders produced by the factory to encode messages.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> used by the factory.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncodingBindingElement">
      <summary>The binding element that specifies the message version used to encode messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> class initialized from an existing element.</summary>
      <param name="elementToBeCloned">The <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> to be cloned.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>When overridden in a derived class, creates a factory for producing message encoders.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> used to produce message encoders.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the current binding element.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncodingBindingElement.MessageVersion">
      <summary>When overridden in a derived class, gets or sets the message version that can be handled by the message encoders produced by the message encoder factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> used by the encoders produced by the message encoder factory.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeader">
      <summary>Represents the content of a SOAP header.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeader" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Actor">
      <summary>Gets or sets the targeted recipient of the message header.</summary>
      <returns>The targeted recipient of the message header. The default is an empty string ("").</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
      <param name="relay">A value that indicates whether the header should be relayed.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a header from an object to be serialized using the XmlFormatter. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
      <param name="relay">A value that indicates whether the header should be relayed.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.IsMessageVersionSupported(System.ServiceModel.Channels.MessageVersion)">
      <summary>Verifies whether the specified message version is supported.</summary>
      <returns>true if the specified message version is supported; otherwise, false.</returns>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.IsReferenceParameter">
      <summary>Gets a value that specifies whether this message header contains reference parameters of an endpoint reference.</summary>
      <returns>true if this message header contains reference parameters of an endpoint reference; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.MustUnderstand">
      <summary>Gets or sets a value that indicates whether the header must be understood, according to SOAP 1.1 or 1.2 specification. </summary>
      <returns>true if the header must be understood; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Called when the header content is serialized using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Called when the start header is serialized using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Relay">
      <summary>Gets a value that indicates whether the header should be relayed.</summary>
      <returns>true if the header should be relayed; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.ToString">
      <summary>Converts this message header to a string.</summary>
      <returns>The message header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderAttributes(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header contents using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header contents using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the start header using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaderInfo">
      <summary>Represents system information regarding a SOAP message header.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaderInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Actor">
      <summary>Gets or sets the intended recipient of the message header.</summary>
      <returns>A URI that indicates the intended recipient of the message header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.IsReferenceParameter">
      <summary>Gets a value that specifies whether the message header represents reference parameters of an endpoint reference.</summary>
      <returns>true if the message header represents reference parameters of an endpoint reference; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.MustUnderstand">
      <summary>Gets or sets a value that indicates whether processing the message header is mandatory or optional.</summary>
      <returns>true if processing the message header is mandatory; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Name">
      <summary>Gets the name of the message header.</summary>
      <returns>The name of the message header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Namespace">
      <summary>Gets the namespace of the message header.</summary>
      <returns>The namespace of the message header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Relay">
      <summary>Gets or sets a value that indicates whether the message header can be relayed.</summary>
      <returns>true if the message header can be relayed; otherwise, false.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaders">
      <summary>Represents a collection of message headers for a message. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageHeaders)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> class with the specified collection of message headers.</summary>
      <param name="collection">A collection of message headers.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> class with the specified message version.</summary>
      <param name="version">The SOAP version of the message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> class with the specified message version and size.</summary>
      <param name="version">The SOAP version of the message.</param>
      <param name="initialSize">The size of the header.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Action">
      <summary>Gets or sets a description of how the message should be processed.</summary>
      <returns>A description of how the message should be processed.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Add(System.ServiceModel.Channels.MessageHeader)">
      <summary>Adds the specified message header to the collection.</summary>
      <param name="header">A message header to be added.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Clear">
      <summary>Removes all the headers from the collection.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>Copies the header content located at the specified index from the specified message to this instance.</summary>
      <param name="message">A message.</param>
      <param name="headerIndex">The location of the original message header, from which the content is copied over.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.MessageHeaders,System.Int32)">
      <summary>Copies the header content located at the specified index from the specified message header collection to this instance.</summary>
      <param name="collection">A <see cref="T:System.ServiceModel.Channels.MessageHeaders" />.</param>
      <param name="headerIndex">The location of the original message header, from which the content is copied over.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.Message)">
      <summary>Copies the content of all the headers from the specified message to this instance.</summary>
      <param name="message">A message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.MessageHeaders)">
      <summary>Copies the content from the specified header collection to this instance.</summary>
      <param name="collection">A <see cref="T:System.ServiceModel.Channels.MessageHeaders" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyTo(System.ServiceModel.Channels.MessageHeaderInfo[],System.Int32)">
      <summary>Copies the headers from this collection to an array, starting at a particular index of the array. </summary>
      <param name="array">The one-dimensional array that is the destination of the message header objects copied from this instance. The array must have zero-based indexing. </param>
      <param name="index">The zero-based index in the array at which copying begins. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Count">
      <summary>Gets the number of message headers in this collection.</summary>
      <returns>The number of message headers in this collection.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String)">
      <summary>Finds a message header in this collection by the specified LocalName and namespace URI of the header element.</summary>
      <returns>The index of the message header in this collection.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String,System.String[])">
      <summary>Finds a message header in this collection by the specified LocalName, namespace URI and actors of the header element.</summary>
      <returns>The index of the message header in this collection.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="actors">The targeted recipient of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetEnumerator">
      <summary>Returns an enumerator that can iterate through a collection. This method cannot be inherited.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32)">
      <summary>Retrieves a message header at a specific position in this collection.</summary>
      <returns>A message header.</returns>
      <param name="index">The zero-based index of the header to get.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Retrieves a message header at a specific position in this collection.</summary>
      <returns>A message header.</returns>
      <param name="index">The zero-based index of the header to get.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String)">
      <summary>Finds a message header in this collection by the specified LocalName and namespace URI of the header element.</summary>
      <returns>A message header.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Retrieves a message header in this collection by the specified LocalName, namespace URI and serializer.</summary>
      <returns>A message header.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />,</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.String[])">
      <summary>Retrieves a message header in this collection by the specified LocalName, namespace URI and actors of the header element.</summary>
      <returns>A message header.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="actors">The targeted recipient of the message header.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetReaderAtHeader(System.Int32)">
      <summary>Gets a XML dictionary reader that accesses the message header at the specified location of the collection.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="headerIndex">The zero-based index of the header to get.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood">
      <summary>Verifies whether all the message headers marked with MustUnderstand are properly interpreted and processed. </summary>
      <returns>true if the recipients specified by <paramref name="actors" /> have properly interpreted and processed all the message headers marked with MustUnderstand; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood(System.String[])">
      <summary>Verifies whether the specified recipients have properly interpreted and processed all the message headers marked with MustUnderstand. </summary>
      <returns>true if the recipients specified by <paramref name="actors" /> have properly interpreted and processed all the message headers marked with MustUnderstand; otherwise, false.</returns>
      <param name="actors">The targeted recipient of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Insert(System.Int32,System.ServiceModel.Channels.MessageHeader)">
      <summary>Inserts a message header into the collection at the specified index.</summary>
      <param name="headerIndex">The zero-based index at which <paramref name="header" /> should be inserted.</param>
      <param name="header">A message header to insert.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Item(System.Int32)">
      <summary>Retrieves a header at the given index.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> in the collection. If <paramref name="index" /> is greater than or equal to the number of headers in the list, this returns null.</returns>
      <param name="index">Zero-based index of the list of headers.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageVersion">
      <summary>Gets the SOAP version of the message.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageVersion" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAll(System.String,System.String)">
      <summary>Removes all headers with the specified name and namespace from the collection.</summary>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAt(System.Int32)">
      <summary>Removes the message header at the specified index from the collection.</summary>
      <param name="headerIndex">The zero-based index of the header to remove.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.SetAction(System.Xml.XmlDictionaryString)">
      <summary>Sets the action element of the header.</summary>
      <param name="action">A description of how the message should be processed.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through a collection. This method cannot be inherited.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.To">
      <summary>Gets or sets the destination endpoint of a message.</summary>
      <returns>A URI that contains the destination endpoint of a message.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the header from the specified location using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>Serializes the header from the specified location using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the specified header content using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlWriter)">
      <summary>Serializes the specified header content using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the start header using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>Serializes the start header using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageProperties">
      <summary>Represents a set of properties for a message. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor(System.ServiceModel.Channels.MessageProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> class with preset properties.</summary>
      <param name="properties">A <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Add(System.String,System.Object)">
      <summary>Adds an element with the specified name and property into the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. This method cannot be inherited.</summary>
      <param name="name">The name of the element to add.</param>
      <param name="property">The value of the element to add. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.AllowOutputBatching">
      <summary>Gets or sets a value that specifies whether to store this message before giving it to the transport. </summary>
      <returns>true if the batching of outgoing messages is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Clear">
      <summary>Removes all elements from the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. This method cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.ContainsKey(System.String)">
      <summary>Determines whether the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains a specific name. This method cannot be inherited.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains an element with the specified <paramref name="name" />; otherwise, false.</returns>
      <param name="name">The name to locate in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.CopyProperties(System.ServiceModel.Channels.MessageProperties)">
      <summary>Copies the content of the specified <see cref="T:System.ServiceModel.Channels.MessageProperties" /> to this instance.</summary>
      <param name="properties">A <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Count">
      <summary>Gets the total number of properties in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</summary>
      <returns>The total number of properties in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Encoder">
      <summary>Gets the encoder that is used to write messages to a stream and to read messages from a stream.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> that is used to write messages to a stream and to read messages from a stream.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.IsReadOnly">
      <summary>Gets a value that indicates whether this set of properties is read-only.</summary>
      <returns>true if this set of properties is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Item(System.String)">
      <summary>Retrieves a property at the given index.</summary>
      <returns>The property with the specified <paramref name="name" />, or null if the property does not exist.</returns>
      <param name="name">The name of the property to get from the collection.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Remove(System.String)">
      <summary>Removes the element with the specified name from the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. This method cannot be inherited.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains an element with the specified <paramref name="name" /> and can be removed; otherwise, false.</returns>
      <param name="name">The name of the element to remove.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds an element with the specified name and property into the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. This method cannot be inherited.</summary>
      <param name="pair">A key/value pair that contains the name and value of the element to add.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the content of the specified <see cref="T:System.ServiceModel.Channels.MessageProperties" /> to an array, starting at the specified index. This method cannot be inherited.</summary>
      <param name="array">The <see cref="T:System.Array" /> to copy the collection to.</param>
      <param name="index">The index to start from.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the element with the specified name from the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. This method cannot be inherited.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains an element with the specified name and value in the <paramref name="pair" /> parameter and can be removed; otherwise, false.</returns>
      <param name="pair">A key/value pair that contains the name and value of the element to be removed.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that can iterate through a collection. This method cannot be inherited.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through a collection. This method cannot be inherited.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.TryGetValue(System.String,System.Object@)">
      <summary>Determines whether the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains a specific name, and retrieves its value. This method cannot be inherited.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains an element with the specified <paramref name="name" />; otherwise, false.</returns>
      <param name="name">The name of the element to locate.</param>
      <param name="value"></param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Values">
      <summary>Gets the values in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the values in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Via">
      <summary>Gets or sets the transport address that is used to send messages.</summary>
      <returns>A URI that contains the transport address that is used to send messages.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageState">
      <summary>Specifies the status of a message. </summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Created">
      <summary>The message has been created. </summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Read">
      <summary>The message is being read.</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Written">
      <summary>The message has been written.</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Copied">
      <summary>The message has been copied.</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Closed">
      <summary>The message has been closed and can no longer be accessed.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageVersion">
      <summary>Specifies the versions of SOAP and WS-Addressing associated with a message and its exchange.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Addressing">
      <summary>Gets the version of WS-Addressing that is associated with the current message version.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> that is associated with the current message version. This is always <see cref="P:System.ServiceModel.Channels.AddressingVersion.None" /></returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Envelope">
      <summary>Gets the SOAP version associated with the current message version.</summary>
      <returns>The <see cref="T:System.ServiceModel.EnvelopeVersion" /> associated with the current message version.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current message version is equal to a specified object.</summary>
      <returns>true if the specified object is equal to the current <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current message version.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.GetHashCode">
      <summary>Gets a hash code for the current message version.</summary>
      <returns>A unique hash code for the current <see cref="T:System.ServiceModel.Channels.MessageVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.None">
      <summary>Gets the message version that does not use SOAP or WS-Addressing.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that does not use SOAP or WS-Addressing.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap11">
      <summary>Gets the message version using SOAP 1.1.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> using SOAP 1.1 but no version of WS-Addressing.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.ToString">
      <summary>The current message version.</summary>
      <returns>The current <see cref="T:System.ServiceModel.Channels.MessageVersion" />. </returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement">
      <summary>The binding element that specifies the character encoding and message versioning used for text-based SOAP messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageVersion,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> class with a specified message version and encoding.</summary>
      <param name="messageVersion">The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that is used for the message version.</param>
      <param name="writeEncoding">The <see cref="T:System.Text.Encoding" /> that is used to format the message characters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageVersion" /> or <paramref name="writeEncoding" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> value is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel for a specified context.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> for the specified context.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel.</param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.Clone">
      <summary>Creates a new <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> object initialized from the current one.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> object with property values equal to those of the current element.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>Creates a factory for text message encoders that employs the message version and character encoding specified by the current encoding binding element.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> that this factory creates.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.MessageVersion">
      <summary>Gets or sets the SOAP and WS-Addressing versions that are used to format the text message.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that is used to format messages. The default value is <see cref="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10" />.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.WriteEncoding">
      <summary>Gets or sets the encoding that is used to format the characters in the text message.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> that is used to format the characters in the text message. The default text encoding is the UTF-8 format.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> value is not valid.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportBindingElement">
      <summary>An abstract base class that represents a transport binding element.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor">
      <summary>Creates a new instance of this class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor(System.ServiceModel.Channels.TransportBindingElement)">
      <summary>Creates a new instance of this class from an existing instance.</summary>
      <param name="elementToBeCloned">The <see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> to be cloned. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</summary>
      <returns>The property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</returns>
      <param name="context">A <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T">The property to get.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> cannot be null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.ManualAddressing">
      <summary>Gets or sets a value that indicates whether manual addressing of the message is required.</summary>
      <returns>true if manual addressing of the message is required; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize">
      <summary>Gets and sets the maximum allowable message size that can be received.</summary>
      <returns>The maximum allowable message size that can be received. The default is 65,536 bytes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value" /> set cannot be negative.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>Returns the URI scheme for the transport, which varies depending on which derived class implements this method.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ContractDescription">
      <summary>Describes a contract that specifies what an endpoint communicates to the outside world.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ContractDescription" /> class with a specified name.</summary>
      <param name="name">The name of the contract.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is empty.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ContractDescription" /> class with a namespace-qualified name specified.</summary>
      <param name="name">The name of the contract.</param>
      <param name="ns">The namespace that contains the name of the contract.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is empty.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ConfigurationName">
      <returns>
Returns <see cref="T:System.String" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ContractType">
      <summary>Gets or sets the contract type that the contract description specifies.</summary>
      <returns>The <see cref="T:System.Type" /> of contract that the contract description specifies.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Name">
      <summary>Gets or sets the name of the contract.</summary>
      <returns>The name of the contract description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Namespace">
      <summary>Gets or sets the namespace for the contract.</summary>
      <returns>The namespace of the contract.</returns>
      <exception cref="T:System.ArgumentNullException">The value set is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Operations">
      <returns>
Returns <see cref="T:System.ServiceModel.Description.OperationDescriptionCollection" />.
</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageBodyDescription">
      <summary>Represents the body of a SOAP message.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageBodyDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.MessageBodyDescription" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.Parts">
      <summary>Gets the parts for the body of the SOAP message.</summary>
      <returns>The body parts that you can inspect or modify.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.ReturnValue">
      <summary>Gets or sets the portion of the SOAP message that contains the return value.</summary>
      <returns>The return value, if any.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperName">
      <summary>Gets or sets the name of the wrapper element inside the SOAP body element if there is one.</summary>
      <returns>The wrapper element if there is one.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperNamespace">
      <summary>Gets or sets the namespace of the wrapper element in the SOAP body if there is one.</summary>
      <returns>The namespace of the wrapper element if there is one.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescription">
      <summary>Represents the description of a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescription.#ctor(System.String,System.ServiceModel.Description.MessageDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.MessageDescription" /> class with a specified action and direction.</summary>
      <param name="action">The action parameter of the SOAP message that identifies the intent of the message.</param>
      <param name="direction">
        <see cref="F:System.ServiceModel.Description.MessageDirection.Input" /> if the message is incoming or <see cref="F:System.ServiceModel.Description.MessageDirection.Output" /> if the message is outgoing.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="direction" /> is neither <see cref="F:System.ServiceModel.Description.MessageDirection.Input" /> or <see cref="F:System.ServiceModel.Description.MessageDirection.Output" />.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Action">
      <summary>Gets or sets the action parameter of the SOAP message that identifies the intent of the message.</summary>
      <returns>The action URI.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Body">
      <summary>Gets the body of the SOAP message.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.MessagePartDescriptionCollection" /> that contains the body of the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Direction">
      <summary>Gets the direction that indicates whether the message is incoming or outgoing.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.MessageDirection" /> that indicates whether the message is incoming to or outgoing from the service.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.MessageType">
      <summary>Gets or sets a type that identifies the type of message contract.</summary>
      <returns>The type of the message contract.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescriptionCollection">
      <summary>Provides a collection that is used to store descriptions of the messages that make up an operation that belongs to a contract.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.Find(System.String)">
      <summary>Finds and returns the first message description in a collection for a message with a specified action.</summary>
      <returns>The first <see cref="T:System.ServiceModel.Description.MessageDescription" /> from the collection whose message has the specified <paramref name="action" /> and null if no matching <paramref name="action" /> is found.</returns>
      <param name="action">The action of the message being found.</param>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.FindAll(System.String)">
      <summary>Finds and returns all of the message descriptions in a collection whose messages have a specified action.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" /> that contains the collection message descriptions from the current collection whose messages have the specified <paramref name="action" />. If no matching <see cref="T:System.ServiceModel.Description.MessageDescription" /> objects are found, an empty collection is returned.</returns>
      <param name="action">The action of the messages being found.</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDirection">
      <summary>Specifies the direction of the message.</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Input">
      <summary>The message is incoming.</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Output">
      <summary>The message is outgoing.</summary>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescription">
      <summary>Represents a description of a SOAP message part.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescription.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> class. </summary>
      <param name="name">The XML name of the message part.</param>
      <param name="ns">The XML namespace of the message part.</param>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Index">
      <summary>Gets or sets the index of the message part.</summary>
      <returns>The index of the message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.MemberInfo">
      <summary>Gets or sets the member information for the message part.</summary>
      <returns>The member information for this message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Name">
      <summary>Gets or sets the name of the message part.</summary>
      <returns>The name of the message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Namespace">
      <summary>Gets or sets the namespace of the message part.</summary>
      <returns>The namespace of the message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Type">
      <summary>Gets or sets the type of the message part.</summary>
      <returns>The type of the message part.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescriptionCollection">
      <summary>Represents a collection of <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescriptionCollection.GetKeyForItem(System.ServiceModel.Description.MessagePartDescription)">
      <summary>When called by a derived class, returns the <see cref="T:System.Xml.XmlQualifiedName" /> of the <see cref="T:System.ServiceModel.Description.MessagePartDescription" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> of the <see cref="T:System.ServiceModel.Description.MessagePartDescription" />.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> to locate.</param>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescription">
      <summary>Represents the description of a contract operation that provides a description of the messages that make up the operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescription.#ctor(System.String,System.ServiceModel.Description.ContractDescription)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.OperationDescription" /> class with a specified name and contract description.</summary>
      <param name="name">The name of the operation description.</param>
      <param name="declaringContract">The <see cref="T:System.ServiceModel.Description.ContractDescription" /> used to initialize the operation description.</param>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.BeginMethod">
      <summary>Gets or sets the begin method of the operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that provides access to the attributes and metadata of the method.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.DeclaringContract">
      <summary>Gets or sets the contract to which the operation belongs.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ContractDescription" /> for the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.EndMethod">
      <summary>Gets or sets the end method of the operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that provides access to the attributes and metadata of the method.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.IsOneWay">
      <summary>Gets or sets a value that indicates whether an operation returns a reply message.</summary>
      <returns>true if this method receives a request message and returns no reply message; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.KnownTypes">
      <summary>Gets the known types associated with the operation description.</summary>
      <returns>The collection of known types associated with the operation description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Messages">
      <summary>Gets or sets the descriptions of the messages that make up the operation.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" /> that contains descriptions of the messages that makes up the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Name">
      <summary>Gets or sets the name of the operation description.</summary>
      <returns>The name of the operation description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.SyncMethod">
      <summary>Gets or sets the service synchronization method of the operation description.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that provides access the attributes and metadata of the method.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescriptionCollection">
      <summary>Represents a collection that contains operation descriptions.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.Find(System.String)">
      <summary>Returns an operation description with a specified name from the collection of operation descriptions.</summary>
      <returns>An <see cref="T:System.ServiceModel.Description.OperationDescription" /> with the name specified.</returns>
      <param name="name">The name of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.FindAll(System.String)">
      <summary>Returns a collection of all the operation descriptions from the collection that have the specified name.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <see cref="T:System.ServiceModel.Description.OperationDescription" /> that contains the operation descriptions with the specified name.</returns>
      <param name="name">The name of the operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.InsertItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>Inserts an element into the operation description collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Description.OperationDescription" /> to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.SetItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>Replaces the operation description element in the collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Description.OperationDescription" /> to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceEndpoint">
      <summary>Represents the endpoint for a service that allows clients of the service to find and communicate with the service.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> class for a specified contract.</summary>
      <param name="contract">The <see cref="T:System.ServiceModel.Description.ContractDescription" /> for the service endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> class with a specified contract, binding, and address.</summary>
      <param name="contract">The <see cref="T:System.ServiceModel.Description.ContractDescription" /> for the service endpoint.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> that specifies how the service endpoint communicates with the world.</param>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> for the service endpoint.</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Address">
      <summary>Gets or sets the endpoint address for the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> that specifies the location of the service endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Binding">
      <summary>Gets or sets the binding for the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Binding" /> for the service endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Contract">
      <summary>Gets the contract for the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ContractDescription" /> that specifies the contract for the service endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Name">
      <summary>Gets or sets the name of the service endpoint.</summary>
      <returns>The name of the service endpoint. The default value is the concatenation of the binding name and the contract description name. For example, <see cref="P:System.ServiceModel.Channels.Binding.Name" /> + '_' + <see cref="P:System.ServiceModel.Description.ContractDescription.Name" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientOperation">
      <summary>Used to modify or extend the execution behavior of a specific contract operation in a client object or client channel object. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> class using the specified <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />, name, and action values. </summary>
      <param name="parent">The containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</param>
      <param name="name">The name of the operation.</param>
      <param name="action">The action of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> class using the specified <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />, name, action, and reply action values. </summary>
      <param name="parent">The containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</param>
      <param name="name">The name of the operation.</param>
      <param name="action">The action of the operation.</param>
      <param name="replyAction">The action of the reply message.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Action">
      <summary>Gets the action of the operation.</summary>
      <returns>The action of the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod">
      <summary>Gets or sets the method associated with an asynchronous operation.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that represents the method handling the begin portion of an asynchronous method pair, or null if the operation is not part of an asynchronous method pair.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply">
      <summary>Gets or sets a value that indicates whether the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> property value is used to deserialize the reply message.</summary>
      <returns>true if the return type is not a <see cref="T:System.ServiceModel.Channels.Message" />; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod">
      <summary>Gets or sets the method that implements the asynchronous end method for the operation.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents the end method for the operation, or null if the operation is not asynchronous.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter">
      <summary>Gets or sets the formatter that serializes objects into messages and deserializes messages into objects.</summary>
      <returns>An <see cref="T:System.ServiceModel.Dispatcher.IClientMessageFormatter" /> implementation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsInitiating">
      <summary>Gets or sets a value that indicates whether a session can be started by a message to this operation.</summary>
      <returns>true if a message to this operation can initiate a session; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsOneWay">
      <summary>Gets or sets a value that indicates whether the operation is a one-way operation.</summary>
      <returns>true if the WCF client should not expect a reply; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsTerminating">
      <summary>Gets or sets a value that indicates whether this operation is the last one in a session.</summary>
      <returns>true if the associated session is closed after the operation is invoked; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Name">
      <summary>Gets the name of the operation.</summary>
      <returns>The name of the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Parent">
      <summary>Gets the containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</summary>
      <returns>The containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ReplyAction">
      <summary>Gets the action of the reply message for this operation.</summary>
      <returns>The action of the reply.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest">
      <summary>Gets or sets a value that specifies whether the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> object serializes an outbound message.</summary>
      <returns>true if the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> property serializes the return values into a reply message; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SyncMethod">
      <summary>Gets or sets the method that is associated with this operation.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents the method that implements the operation. If the operation is asynchronous, this value is null and the implementing methods are stored in the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod" /> and <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod" /> properties.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientRuntime">
      <summary>The insertion point for classes that extend the functionality of Silverlight client objects for all messages handled by a client application.</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractClientType">
      <summary>Gets the type of the contract associated with a client.</summary>
      <returns>The <see cref="T:System.Type" /> object that represents the contract associated with this client.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractName">
      <summary>Gets the name of the contract associated with a client.</summary>
      <returns>The contract name for a client.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractNamespace">
      <summary>Gets the namespace of the contract associated with a client.</summary>
      <returns>The namespace of the contract associated with a client.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ManualAddressing">
      <summary>Gets or sets a value that indicates whether the client adds addressing headers to request-reply messages.</summary>
      <returns>true if the client does not add any addressing headers; otherwise, false. The default is false. See the Remarks section for further information.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MaxFaultSize">
      <summary>Gets or sets the maximum fault size. </summary>
      <returns>The maximum fault size.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.OperationSelector"></member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.UnhandledClientOperation">
      <summary>Returns the client operation for methods that do not have a corresponding <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> in the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.Operations" /> collection.</summary>
      <returns>A <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> that represents the method to which the current message contents are routed when the operation selector cannot find an operation that matches the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.Via">
      <summary>Gets or sets the transport address that is used to send messages through the client.</summary>
      <returns>A <see cref="T:System.Uri" /> that is the destination address for the transport. The default value is the <see cref="P:System.ServiceModel.EndpointAddress.Uri" /> value of the client.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientMessageFormatter">
      <summary>Defines methods that are used to control the conversion of messages into objects and objects into messages for client applications.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.DeserializeReply(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>Converts a message into a return value and <paramref name="out" /> parameters that are passed back to the calling operation.</summary>
      <returns>The return value of the operation.</returns>
      <param name="message">The inbound message.</param>
      <param name="parameters">Any <paramref name="out" /> values.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.SerializeRequest(System.ServiceModel.Channels.MessageVersion,System.Object[])">
      <summary>Converts an <see cref="T:System.Object" /> array into an outbound <see cref="T:System.ServiceModel.Channels.Message" />. </summary>
      <returns>The SOAP message sent to the service operation.</returns>
      <param name="messageVersion">The version of the SOAP message to use.</param>
      <param name="parameters">The parameters passed to the Silverlight client operation.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientOperationSelector">
      <summary>Defines the contract for an operation selector.</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.IClientOperationSelector.AreParametersRequiredForSelection">
      <summary>Gets a value that indicates whether parameters are required to determine the selection.</summary>
      <returns>true if parameters are required; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientOperationSelector.SelectOperation(System.Reflection.MethodBase,System.Object[])">
      <summary>Returns the selected operation.</summary>
      <returns>The operation selected by the custom operation selector.</returns>
      <param name="method">The method invoked.</param>
      <param name="parameters">The parameters passed to the method.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Windows.Data.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Windows.Data</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Windows.Data.dll</relpath>
    <extension downloadUri="System.Windows.Data.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Windows.Controls.Navigation.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Windows.Controls.Navigation</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Windows.Controls.Navigation.dll</relpath>
    <extension downloadUri="System.Windows.Controls.Navigation.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Windows.Controls.Navigation.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Controls.Navigation</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.Peers.FrameAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Frame" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameAutomationPeer.#ctor(System.Windows.Controls.Frame)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.FrameAutomationPeer" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Frame" /> to associate with this <see cref="T:System.Windows.Automation.Peers.FrameAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.FrameAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.FrameAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the frame.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameAutomationPeer.GetNameCore"></member>
    <member name="T:System.Windows.Controls.Frame">
      <summary>Represents a control that supports navigation to and from Silverlight pages.</summary>
    </member>
    <member name="M:System.Windows.Controls.Frame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Frame" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.Frame.CacheSize">
      <summary>Gets or sets the number of pages that can be cached for the frame.</summary>
      <returns>The number of pages that can be cached for the frame. The default value is 10.</returns>
    </member>
    <member name="F:System.Windows.Controls.Frame.CacheSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Frame.CacheSize" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Frame.CacheSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Frame.CanGoBack">
      <summary>Gets a value that indicates whether there is at least one entry in the back navigation history.</summary>
      <returns>true if there is at least one entry in the back navigation history; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Frame.CanGoBackProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Frame.CanGoBack" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Frame.CanGoBack" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Frame.CanGoForward">
      <summary>Gets a value that indicates whether there is at least one entry in the forward navigation history.</summary>
      <returns>true if there is at least one entry in the forward navigation history; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Frame.CanGoForwardProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Frame.CanGoForward" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Frame.CanGoForward" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Frame.CurrentSource">
      <summary>Gets the uniform resource identifier (URI) of the content that is currently displayed.</summary>
      <returns>A value that represents the URI of content that is currently displayed.</returns>
    </member>
    <member name="F:System.Windows.Controls.Frame.CurrentSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Frame.CurrentSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Frame.CurrentSource" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.Frame.FragmentNavigation">
      <summary>Occurs when navigation to a content fragment begins.</summary>
    </member>
    <member name="M:System.Windows.Controls.Frame.GoBack">
      <summary>Navigates to the most recent entry in the back navigation history, or throws an exception if no entry exists in back navigation.</summary>
      <exception cref="T:System.InvalidOperationException">There are no entries in the back navigation history.</exception>
    </member>
    <member name="M:System.Windows.Controls.Frame.GoForward">
      <summary>Navigates to the most recent entry in the forward navigation history, or throws an exception if no entry exists in forward navigation.</summary>
      <exception cref="T:System.InvalidOperationException">There are no entries in the forward navigation history.</exception>
    </member>
    <member name="P:System.Windows.Controls.Frame.JournalOwnership">
      <summary>Gets or sets whether a frame is responsible for managing its own navigation history, or whether it integrates with the Web browser journal.</summary>
      <returns>A value that specifies whether frame manages its own journal. The default value is <see cref="F:System.Windows.Navigation.JournalOwnership.Automatic" />.</returns>
      <exception cref="T:System.InvalidOperationException">A nested frame or more than one frame attempts to integrate with browser journal.</exception>
    </member>
    <member name="F:System.Windows.Controls.Frame.JournalOwnershipProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Frame.JournalOwnership" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Frame.JournalOwnership" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Frame.Navigate(System.Uri)">
      <summary>Navigates to the content specified by the uniform resource identifier (URI).</summary>
      <returns>true if the navigation started successfully; otherwise, false.</returns>
      <param name="source">The URI representing a page to display in the frame.</param>
    </member>
    <member name="E:System.Windows.Controls.Frame.Navigated">
      <summary>Occurs when the content that is being navigated to has been found and is available.</summary>
    </member>
    <member name="E:System.Windows.Controls.Frame.Navigating">
      <summary>Occurs when a new navigation is requested.</summary>
    </member>
    <member name="E:System.Windows.Controls.Frame.NavigationFailed">
      <summary>Occurs when an error is encountered while navigating to the requested content.</summary>
    </member>
    <member name="E:System.Windows.Controls.Frame.NavigationStopped">
      <summary>Occurs when a navigation is terminated by either calling the <see cref="M:System.Windows.Controls.Frame.StopLoading" /> method, or when a new navigation is requested while the current navigation is in progress.</summary>
    </member>
    <member name="M:System.Windows.Controls.Frame.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Frame" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.Frame.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.FrameAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.FrameAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Frame" /> object.</returns>
    </member>
    <member name="P:System.Windows.Controls.Frame.Source">
      <summary>Gets or sets the uniform resource identifier (URI) of the current content or the content that is being navigated to.</summary>
      <returns>A value that represents the URI of the current content or the content that is being navigated to.</returns>
    </member>
    <member name="F:System.Windows.Controls.Frame.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Frame.Source" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Frame.Source" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Frame.StopLoading">
      <summary>Stops asynchronous navigations that have not yet been processed.</summary>
    </member>
    <member name="P:System.Windows.Controls.Frame.UriMapper">
      <summary>Gets or sets the object to manage converting a uniform resource identifier (URI) to another URI for this frame.</summary>
      <returns>The object to convert URIs for this frame.</returns>
    </member>
    <member name="F:System.Windows.Controls.Frame.UriMapperProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Frame.UriMapper" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Frame.UriMapper" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Page">
      <summary>Encapsulates content that can be navigated to by a <see cref="T:System.Windows.Controls.Frame" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.Page.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Page" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.Page.NavigationCacheMode">
      <summary>Gets or sets a value that indicates whether this page is cached and whether it is cached indefinitely.</summary>
      <returns>The value that specifies the caching behavior for this page.</returns>
    </member>
    <member name="P:System.Windows.Controls.Page.NavigationContext">
      <summary>Gets an object that contains information about the navigation request.</summary>
      <returns>An object that contains information about the navigation request.</returns>
    </member>
    <member name="P:System.Windows.Controls.Page.NavigationService">
      <summary>Gets the service that the host used to navigate to this page.</summary>
      <returns>The service the host used to navigate to this page.</returns>
    </member>
    <member name="M:System.Windows.Controls.Page.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)">
      <summary>Called when navigating to a fragment on a page.</summary>
      <param name="e">An object that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Page.OnNavigatedFrom(System.Windows.Navigation.NavigationEventArgs)">
      <summary>Called when a page is no longer the active page in a frame. </summary>
      <param name="e">An object that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Page.OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs)">
      <summary>Called when a page becomes the active page in a frame. </summary>
      <param name="e">An object that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Page.OnNavigatingFrom(System.Windows.Navigation.NavigatingCancelEventArgs)">
      <summary>Called just before a page is no longer the active page in a frame.</summary>
      <param name="e">An object that contains the event data.</param>
    </member>
    <member name="P:System.Windows.Controls.Page.Title">
      <summary>Gets or sets the name for the page.</summary>
      <returns>The name for the page.</returns>
    </member>
    <member name="T:System.Windows.Navigation.FragmentNavigationEventArgs">
      <summary>Provides data for the <see cref="M:System.Windows.Controls.Page.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)" /> method and <see cref="E:System.Windows.Navigation.NavigationService.FragmentNavigation" /> event.</summary>
    </member>
    <member name="P:System.Windows.Navigation.FragmentNavigationEventArgs.Fragment">
      <summary>Gets the uniform resource identifier (URI) fragment.</summary>
      <returns>The URI fragment. </returns>
    </member>
    <member name="T:System.Windows.Navigation.FragmentNavigationEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Navigation.NavigationService.FragmentNavigation" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The data for the event.</param>
    </member>
    <member name="T:System.Windows.Navigation.JournalOwnership">
      <summary>Specifies the type of journal used by the frame. </summary>
    </member>
    <member name="F:System.Windows.Navigation.JournalOwnership.Automatic">
      <summary>If the <see cref="T:System.Windows.Controls.Frame" /> control is a top-level frame, it integrates with the browser journal; otherwise, it maintains its own journal.</summary>
    </member>
    <member name="F:System.Windows.Navigation.JournalOwnership.OwnsJournal">
      <summary>The <see cref="T:System.Windows.Controls.Frame" /> maintains its own journal. This option can be used with any <see cref="T:System.Windows.Controls.Frame" />.</summary>
    </member>
    <member name="F:System.Windows.Navigation.JournalOwnership.UsesParentJournal">
      <summary>The <see cref="T:System.Windows.Controls.Frame" /> integrates with the browser journal. This option can be used only with a top-level <see cref="T:System.Windows.Controls.Frame" />; otherwise, an exception is thrown.</summary>
    </member>
    <member name="T:System.Windows.Navigation.NavigatedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Navigation.NavigationService.Navigated" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The data for the event.</param>
    </member>
    <member name="T:System.Windows.Navigation.NavigatingCancelEventArgs">
      <summary>Provides data for the <see cref="M:System.Windows.Controls.Page.OnNavigatingFrom(System.Windows.Navigation.NavigatingCancelEventArgs)" /> method and the <see cref="E:System.Windows.Navigation.NavigationService.Navigating" /> event. </summary>
    </member>
    <member name="P:System.Windows.Navigation.NavigatingCancelEventArgs.NavigationMode">
      <summary>Gets a value that indicates the type of navigation that is occurring.</summary>
      <returns>A value that indicates the type of navigation (<see cref="F:System.Windows.Navigation.NavigationMode.Back" />, <see cref="F:System.Windows.Navigation.NavigationMode.Forward" />, or <see cref="F:System.Windows.Navigation.NavigationMode.New" />) that is occurring.</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigatingCancelEventArgs.Uri">
      <summary>Gets the uniform resource identifier (URI) for the content that is being navigated to.</summary>
      <returns>A value that represents the URI for the content.</returns>
    </member>
    <member name="T:System.Windows.Navigation.NavigatingCancelEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Navigation.NavigationService.Navigating" /> event, which is a cancelable event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The data for the event.</param>
    </member>
    <member name="T:System.Windows.Navigation.NavigationCacheMode">
      <summary>Specifies how the page is cached when used within a frame.</summary>
    </member>
    <member name="F:System.Windows.Navigation.NavigationCacheMode.Disabled">
      <summary>The page is never cached and a new instance of the page is created on each visit.</summary>
    </member>
    <member name="F:System.Windows.Navigation.NavigationCacheMode.Required">
      <summary>The page is cached and the cached instance is reused for every visit regardless of the cache size for the frame.</summary>
    </member>
    <member name="F:System.Windows.Navigation.NavigationCacheMode.Enabled">
      <summary>The page is cached, but the cached instance is discarded when the size of the cache for the frame is exceeded.</summary>
    </member>
    <member name="T:System.Windows.Navigation.NavigationContext">
      <summary>Represents the state of a navigation operation.</summary>
    </member>
    <member name="P:System.Windows.Navigation.NavigationContext.QueryString">
      <summary>Gets a collection of query string values.</summary>
      <returns>A collection that contains the query string values.</returns>
    </member>
    <member name="T:System.Windows.Navigation.NavigationEventArgs">
      <summary>Provides data for navigation methods and event handlers that cannot cancel the navigation request.</summary>
    </member>
    <member name="P:System.Windows.Navigation.NavigationEventArgs.Content">
      <summary>Gets the content of the target being navigated to.</summary>
      <returns>An object that represents the target content.</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationEventArgs.Uri">
      <summary>Gets the uniform resource identifier (URI) of the target.</summary>
      <returns>A value that represents the URI.</returns>
    </member>
    <member name="T:System.Windows.Navigation.NavigationFailedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Navigation.NavigationService.NavigationFailed" /> event of the <see cref="T:System.Windows.Navigation.NavigationService" /> class and the <see cref="E:System.Windows.Controls.Frame.NavigationFailed" /> event of the <see cref="T:System.Windows.Controls.Frame" /> class.</summary>
    </member>
    <member name="P:System.Windows.Navigation.NavigationFailedEventArgs.Exception">
      <summary>Gets the error from the failed navigation.</summary>
      <returns>A value that represents the error.</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationFailedEventArgs.Handled">
      <summary>Gets or sets a value that indicates whether the failure event has been handled.</summary>
      <returns>true if the event has been handled; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationFailedEventArgs.Uri">
      <summary>Gets the uniform resource identifier (URI) for the content that could not be navigated to.</summary>
      <returns>A value that represents the URI.</returns>
    </member>
    <member name="T:System.Windows.Navigation.NavigationFailedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Navigation.NavigationService.NavigationFailed" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The data for the event.</param>
    </member>
    <member name="T:System.Windows.Navigation.NavigationMode">
      <summary>Specifies the type of navigation that is occurring. </summary>
    </member>
    <member name="F:System.Windows.Navigation.NavigationMode.New">
      <summary>Navigating to new content. This value is used when the <see cref="M:System.Windows.Navigation.NavigationService.Navigate(System.Uri)" /> method is called or when the <see cref="P:System.Windows.Navigation.NavigationService.Source" /> property is set. It is also used for any navigation request that the user initiates from the Web browser (including the back or forward buttons in a Web browser).</summary>
    </member>
    <member name="F:System.Windows.Navigation.NavigationMode.Back">
      <summary>Navigating to the most recent content in the back navigation history. This value is used when the <see cref="M:System.Windows.Navigation.NavigationService.GoBack" /> method is called.</summary>
    </member>
    <member name="F:System.Windows.Navigation.NavigationMode.Forward">
      <summary>Navigating to the most recent content in the forward navigation history. This value is used when the <see cref="M:System.Windows.Navigation.NavigationService.GoForward" /> method is called.</summary>
    </member>
    <member name="T:System.Windows.Navigation.NavigationService">
      <summary>Provides methods, properties, and events to support navigation within a Silverlight application.</summary>
    </member>
    <member name="P:System.Windows.Navigation.NavigationService.CanGoBack">
      <summary>Gets a value that indicates whether there is at least one entry in the back navigation history.</summary>
      <returns>true if there is at least one entry in the back navigation history; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationService.CanGoForward">
      <summary>Gets a value that indicates whether there is at least one entry in the forward navigation history.</summary>
      <returns>true if there is at least one entry in the forward navigation history; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationService.CurrentSource">
      <summary>Gets the uniform resource identifier (URI) of the content that is currently displayed.</summary>
      <returns>A value that represents the URI of content that is currently displayed.</returns>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.FragmentNavigation">
      <summary>Occurs when navigation to a content fragment begins.</summary>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.GoBack">
      <summary>Navigates to the most recent entry in the back navigation history, or throws an exception if no entry exists in back navigation.</summary>
      <exception cref="T:System.InvalidOperationException">There are no entries in the back navigation history.</exception>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.GoForward">
      <summary>Navigates to the most recent entry in the forward navigation history, or throws an exception if no entry exists in forward navigation.</summary>
      <exception cref="T:System.InvalidOperationException">There are no entries in the forward navigation history.</exception>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.Navigate(System.Uri)">
      <summary>Navigates to the content specified by the uniform resource identifier (URI).</summary>
      <returns>true if the navigation started successfully; otherwise, false.</returns>
      <param name="source">The URI of the content to navigate to.</param>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.Navigated">
      <summary>Occurs when the content that is being navigated to has been found and is available.</summary>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.Navigating">
      <summary>Occurs when a new navigation is requested.</summary>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.NavigationFailed">
      <summary>Occurs when an error is encountered while navigating to the requested content.</summary>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.NavigationStopped">
      <summary>Occurs when the <see cref="M:System.Windows.Navigation.NavigationService.StopLoading" /> method is called, or when a new navigation is requested while the current navigation is in progress.</summary>
    </member>
    <member name="P:System.Windows.Navigation.NavigationService.Source">
      <summary>Gets or sets the uniform resource identifier (URI) of the current content or the content that is being navigated to.</summary>
      <returns>A value that represents the URI of the current content or the content that is being navigated to.</returns>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.StopLoading">
      <summary>Stops asynchronous navigations that have not yet been processed.</summary>
    </member>
    <member name="T:System.Windows.Navigation.NavigationStoppedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Navigation.NavigationService.NavigationStopped" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The data for the event.</param>
    </member>
    <member name="T:System.Windows.Navigation.UriMapper">
      <summary>Converts a uniform resource identifier (URI) into a new URI based on the rules of a matching object specified in a collection of mapping objects.</summary>
    </member>
    <member name="M:System.Windows.Navigation.UriMapper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Navigation.UriMapper" /> class. </summary>
    </member>
    <member name="M:System.Windows.Navigation.UriMapper.MapUri(System.Uri)">
      <summary>Converts a specified uniform resource identifier (URI) into a new URI based on the rules of a matching object in the <see cref="P:System.Windows.Navigation.UriMapper.UriMappings" /> collection.</summary>
      <returns>A URI to use for handling the request instead of the value of the <paramref name="uri" /> parameter. If no object in the <see cref="P:System.Windows.Navigation.UriMapper.UriMappings" /> collection matches <paramref name="uri" />, the original value for <paramref name="uri" /> is returned.</returns>
      <param name="uri">Original URI value to be converted to a new URI.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Navigation.UriMapper.UriMappings" /> property is null.</exception>
    </member>
    <member name="P:System.Windows.Navigation.UriMapper.UriMappings">
      <summary>Gets a collection of objects that are used to convert a uniform resource identifier (URI) into a new URI.</summary>
      <returns>A collection of objects that are used to convert URI values.</returns>
    </member>
    <member name="T:System.Windows.Navigation.UriMapperBase">
      <summary>Represents the base class for classes that convert a requested uniform resource identifier (URI) into a new URI based on mapping rules.</summary>
    </member>
    <member name="M:System.Windows.Navigation.UriMapperBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Navigation.UriMapperBase" /> class. </summary>
    </member>
    <member name="M:System.Windows.Navigation.UriMapperBase.MapUri(System.Uri)">
      <summary>When overridden in a derived class, converts a requested uniform resource identifier (URI) to a new URI.</summary>
      <returns>A URI to use for the request instead of the value in the <paramref name="uri" /> parameter.</returns>
      <param name="uri">The original URI value to be mapped to a new URI.</param>
    </member>
    <member name="T:System.Windows.Navigation.UriMapping">
      <summary>Defines the pattern for converting a requested uniform resource identifier (URI) into a new URI.</summary>
    </member>
    <member name="M:System.Windows.Navigation.UriMapping.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Navigation.UriMapping" /> class. </summary>
    </member>
    <member name="P:System.Windows.Navigation.UriMapping.MappedUri">
      <summary>Gets or sets the uniform resource identifier (URI) that is navigated to instead of the originally requested URI.</summary>
      <returns>The URI that the requested URI is converted to.</returns>
    </member>
    <member name="M:System.Windows.Navigation.UriMapping.MapUri(System.Uri)">
      <summary>Converts the specified uniform resource identifier (URI) to a new URI, if the specified URI matches the defined template for converting.</summary>
      <returns>The URI that has been converted or null if the URI cannot be converted.</returns>
      <param name="uri">The URI to convert.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Navigation.UriMapping.Uri" /> is null.-or-<see cref="P:System.Windows.Navigation.UriMapping.MappedUri" /> is null.-or-<see cref="P:System.Windows.Navigation.UriMapping.Uri" /> includes a query string.-or-<see cref="P:System.Windows.Navigation.UriMapping.Uri" /> includes a content fragment.</exception>
    </member>
    <member name="P:System.Windows.Navigation.UriMapping.Uri">
      <summary>Gets or sets the pattern to match when determining if the requested uniform resource identifier (URI) is converted to a mapped URI.</summary>
      <returns>The URI that will be converted.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\system.windows.controls.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Controls</name>
  </assembly>
  <members>
    <member name="T:System.Windows.HierarchicalDataTemplate">
      <summary>Represents a <see cref="T:System.Windows.DataTemplate" /> that supports <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> objects, such as <see cref="T:System.Windows.Controls.TreeViewItem" />.</summary>
    </member>
    <member name="M:System.Windows.HierarchicalDataTemplate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.HierarchicalDataTemplate" /> class.</summary>
    </member>
    <member name="P:System.Windows.HierarchicalDataTemplate.ItemContainerStyle">
      <summary>Gets or sets the <see cref="T:System.Windows.Style" /> that is applied to the item container for each child item.</summary>
      <returns>The style that is applied to the item container for each child item.</returns>
    </member>
    <member name="P:System.Windows.HierarchicalDataTemplate.ItemsSource">
      <summary>Gets or sets the binding that is used to generate content for the next sublevel in the data hierarchy.</summary>
      <returns>The binding that is used to generate content for the next sublevel in the data hierarchy. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.HierarchicalDataTemplate.ItemTemplate">
      <summary>Gets or sets the <see cref="T:System.Windows.DataTemplate" /> to apply to the <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> property on a generated <see cref="T:System.Windows.Controls.HeaderedItemsControl" />, such as a <see cref="T:System.Windows.Controls.TreeViewItem" />, to indicate how to display items in the next sublevel in the data hierarchy.</summary>
      <returns>The <see cref="T:System.Windows.DataTemplate" /> to apply to the <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> property on a generated <see cref="T:System.Windows.Controls.HeaderedItemsControl" />, such as a <see cref="T:System.Windows.Controls.TreeViewItem" />, to indicate how to display items in the next sublevel in the data hierarchy.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.CalendarAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Calendar" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.#ctor(System.Windows.Controls.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Calendar" /> instance to associate with the <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Calendar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Calendar" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.Calendar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>By default, the type name of the <paramref name="owner" /> value that the automation peer is constructed with.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.GetNameCore">
      <summary>Gets the name of the class of the object associated with this <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>A name from a "Labeled By" value if it exists, otherwise from the <paramref name="owner" /> value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for this <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IGridProvider#ColumnCount">
      <summary>Gets the total number of columns in a grid.</summary>
      <returns>The total number of columns in a grid. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IGridProvider#GetItem(System.Int32,System.Int32)">
      <summary>Retrieves the UI automation provider for the specified cell.</summary>
      <returns>The UI automation provider for the specified cell. </returns>
      <param name="row">The ordinal number of the row.</param>
      <param name="column">The ordinal number of the column.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IGridProvider#RowCount">
      <summary>Gets the total number of rows in a grid.</summary>
      <returns>The total number of rows in a grid. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#CurrentView">
      <summary>Gets the current control-specific view.</summary>
      <returns>The value for the current view of the UI automation element. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#GetSupportedViews">
      <summary>Retrieves a collection of control-specific view identifiers.</summary>
      <returns>A collection of values that identifies the views that are available for a UI automation element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#GetViewName(System.Int32)">
      <summary>Retrieves the name of a control-specific view. </summary>
      <returns>A localized name for the view. </returns>
      <param name="viewId">The view identifier.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#SetCurrentView(System.Int32)">
      <summary>Sets the current control-specific view.</summary>
      <param name="viewId">A view identifier.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>Gets a value that specifies whether the UI automation provider allows more than one child element to be selected at the same time.</summary>
      <returns>true if multiple selection is allowed; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>Retrieves a UI automation provider for each child element that is selected.</summary>
      <returns>A collection of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>Gets a value that specifies whether the UI automation provider requires at least one child element to be selected.</summary>
      <returns>true if selection is required; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ITableProvider#GetColumnHeaders">
      <summary>Gets a collection of UI automation providers that represents all the column headers in a table.</summary>
      <returns>A collection of UI automation providers. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ITableProvider#GetRowHeaders">
      <summary>Retrieves a collection of UI automation providers that represents all row headers in the table.</summary>
      <returns>A collection of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ITableProvider#RowOrColumnMajor">
      <summary>Retrieves the primary direction of traversal for the table.</summary>
      <returns>The primary direction of traversal. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.CalendarButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.CalendarButton)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.CalendarButtonAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> to associate with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for this <see cref="T:System.Windows.Automation.Peers.CalendarButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type as a value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class that is associated with this <see cref="T:System.Windows.Automation.Peers.CalendarButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>By default, the type name of the <paramref name="owner" /> value that the automation peer is constructed with.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.GetHelpTextCore">
      <summary>Returns the string that describes the functionality of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.CalendarButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The help text, or <see cref="F:System.String.Empty" /> if there is no help text. By default, provides a DateTime.ToString behavior.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.GetLocalizedControlTypeCore">
      <summary>Returns the localized version of the control type for the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.CalendarButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.</summary>
      <returns>The string that contains the type of control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.GetNameCore">
      <summary>Gets the name of the class of the object associated with this <see cref="T:System.Windows.Automation.Peers.CalendarButtonAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>A name from a "Labeled By" value if it exists, otherwise from the <paramref name="owner" /> value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for this <see cref="T:System.Windows.Automation.Peers.CalendarButtonAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Column">
      <summary>Gets the ordinal number of the column that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the column that contains the cell or item.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ColumnSpan">
      <summary>Gets the number of columns that are spanned by a cell or item.</summary>
      <returns>The number of columns spanned.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ContainingGrid">
      <summary>Gets a UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> and that represents the container of the cell or item.</summary>
      <returns>A UI automation provider that implements the <see cref="F:System.Windows.Automation.Peers.PatternInterface.Grid" /> control pattern and that represents the cell or item container.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Row">
      <summary>Gets the ordinal number of the row that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the row that contains the cell or item.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#RowSpan">
      <summary>Gets the number of rows that are spanned by a cell or item.</summary>
      <returns>The number of rows that are spanned. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>Sends a request to activate the control and initiate its single, unambiguous action.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>Gets a value that indicates whether an item is selected.</summary>
      <returns>true if the element is selected; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>Clears any existing selection and then selects the current element.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and that acts as the container for the calling object.</summary>
      <returns>The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> types to UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.CalendarDayButton)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> instance that is associated with this <see cref="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for this <see cref="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type as a value of the enumeration. By default, this method returns <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Button" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class that is associated with this <see cref="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>By default, the type name of the <paramref name="owner" /> value that the automation peer is constructed with.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.GetHelpTextCore">
      <summary>Returns the string that describes the functionality of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The help text, or <see cref="F:System.String.Empty" /> if there is no help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.GetLocalizedControlTypeCore">
      <summary>Returns the localized version of the control type for the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.</summary>
      <returns>The string that contains the type of control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.GetNameCore">
      <summary>Gets the text label of the object associated with this <see cref="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern implementation for this <see cref="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Column">
      <summary>Gets the ordinal number of the column that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the column that contains the cell or item. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ColumnSpan">
      <summary>Gets the number of columns that are spanned by a cell or item.</summary>
      <returns>The number of columns. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ContainingGrid">
      <summary>Gets a UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> and that represents the container of the cell or item. </summary>
      <returns>The UI Automation provider.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Row">
      <summary>Gets the ordinal number of the row that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the row that contains the cell or item. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#RowSpan">
      <summary>Gets the number of rows that are spanned by a cell or item. </summary>
      <returns>The number of rows. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>Sends a request to activate the control and to initiate its single, unambiguous action.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>Gets a value that indicates whether an item is selected.</summary>
      <returns>true if the element is selected; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>Clear any existing selection and then selects the current element.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and that acts as the container for the calling object.</summary>
      <returns>The UI Automation provider.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ITableItemProvider#GetColumnHeaderItems">
      <summary>Retrieves a collection of UI Automation providers that represent all the column headers that are associated with a table item or cell.</summary>
      <returns>A collection of UI Automation providers.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ITableItemProvider#GetRowHeaderItems">
      <summary>Retrieves a collection of UI Automation providers that represent all the row headers that are associated with a table item or cell.</summary>
      <returns>A collection of UI Automation providers.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ChildWindowAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ChildWindow" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ChildWindowAutomationPeer.#ctor(System.Windows.Controls.ChildWindow)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ChildWindowAutomationPeer" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ChildWindow" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ChildWindowAutomationPeer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.ChildWindowAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.ChildWindowAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ChildWindowAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.ChildWindowAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value that represents the type of the child window.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ChildWindowAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.Controls.ChildWindow" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ChildWindowAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ChildWindowAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for this <see cref="T:System.Windows.Automation.Peers.ChildWindowAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanMove">
      <summary>Gets a value that indicates whether the element can be moved.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanResize">
      <summary>Gets a value that indicates whether the element can be resized.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanRotate">
      <summary>Gets a value that indicates whether the element can be rotated.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Move(System.Double,System.Double)">
      <summary>Moves the control.</summary>
      <param name="x">The absolute screen coordinates of the left side of the control.</param>
      <param name="y">The absolute screen coordinates of the top of the control.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Resize(System.Double,System.Double)">
      <summary>Resizes the control.</summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Rotate(System.Double)">
      <summary>Rotates the control.</summary>
      <param name="degrees">The number of degrees to rotate the control. A positive number rotates the control clockwise. A negative number rotates the control counterclockwise.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#IWindowProvider#Close">
      <summary>Closes the window.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#IWindowProvider#InteractionState">
      <summary>Gets the interaction state of the window.</summary>
      <returns>The interaction state of the control, as a value of the enumeration.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#IWindowProvider#IsModal">
      <summary>Gets a value that specifies whether the window is modal.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#IWindowProvider#IsTopmost">
      <summary>Gets a value that specifies whether the window is the topmost element in the z-order of layout.</summary>
      <returns>true if the window is topmost; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#IWindowProvider#Maximizable">
      <summary>Gets a value that specifies whether the window can be maximized.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#IWindowProvider#Minimizable">
      <summary>Gets a value that specifies whether the window can be minimized.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#IWindowProvider#SetVisualState(System.Windows.Automation.WindowVisualState)">
      <summary>Changes the visual state of the window (such as minimizing or maximizing it).</summary>
      <param name="state">The visual state of the window to change to, as a value of the enumeration.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#IWindowProvider#VisualState">
      <summary>Gets the visual state of the window.</summary>
      <returns>
        <see cref="F:System.Windows.Automation.WindowVisualState.Normal" /> in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ChildWindowAutomationPeer.System#Windows#Automation#Provider#IWindowProvider#WaitForInputIdle(System.Int32)">
      <summary>Blocks the calling code for the specified time or until the associated process enters an idle state, whichever completes first.</summary>
      <returns>true if the window has entered the idle state; false if the timeout occurred.</returns>
      <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to become idle.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.DatePickerAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.DatePicker" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.#ctor(System.Windows.Controls.DatePicker)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.DatePicker" /> to associate with the <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for this <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type as a value of the enumeration. By default, this method returns <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Calendar" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class that is associated with this <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>By default, the type name of the <paramref name="owner" /> value that the automation peer is constructed with.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.GetLocalizedControlTypeCore">
      <summary>Returns the localized version of the control type for the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.</summary>
      <returns>The string that contains the type of control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.GetNameCore">
      <summary>Gets the name of the class of the object associated with this <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>A name from a "Labeled By" value if it exists, otherwise from the <paramref name="owner" /> value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.DatePicker" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
      <summary>Hides all nodes, controls, or content that are descendants of the control.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
      <summary>Displays all child nodes, controls, or content of the control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
      <summary>Gets the state, expanded or collapsed, of the control.</summary>
      <returns>The state, expanded or collapsed, of the control. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>Gets a value that specifies whether the value of a control is read-only.</summary>
      <returns>Returns false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>Sets the value of a control.</summary>
      <param name="value">The value to set. The provider is responsible for converting the value to the appropriate data type. </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control as a string. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.GridSplitter" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.#ctor(System.Windows.Controls.GridSplitter)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.GridSplitter" /> to associate with the <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for this <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type as a value of the enumeration. By default, this method returns <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Thumb" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class that is associated with this <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>By default, the type name of the <paramref name="owner" /> value that the automation peer is constructed with.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.GridSplitter" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanMove">
      <summary>Gets a value that specifies whether the control can be moved.</summary>
      <returns>true if the element can be moved; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanResize">
      <summary>Gets a value that specifies whether the UI automation element can be resized.</summary>
      <returns>true if the element can be resized; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanRotate">
      <summary>Gets a value that specifies whether the control can be rotated.</summary>
      <returns>true if the element can be rotated; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Move(System.Double,System.Double)">
      <summary>Moves the control.</summary>
      <param name="x">Absolute screen coordinates of the left side of the control.</param>
      <param name="y">Absolute screen coordinates of the top of the control.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Resize(System.Double,System.Double)">
      <summary>Resizes the control.</summary>
      <param name="width">The new width of the window, in pixels. </param>
      <param name="height">The new height of the window, in pixels. </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Rotate(System.Double)">
      <summary>Rotates the control.</summary>
      <param name="degrees">The number of degrees to rotate the control. A positive number rotates clockwise; a negative number rotates counterclockwise. </param>
    </member>
    <member name="T:System.Windows.Automation.Peers.TabControlAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.TabControl" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabControlAutomationPeer.#ctor(System.Windows.Controls.TabControl)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.TabControl" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabControlAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for this <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type as a value of the enumeration. By default, this method returns <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Tab" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabControlAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class that is associated with this <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>By default, the type name of the <paramref name="owner" /> value that the automation peer is constructed with.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabControlAutomationPeer.GetClickablePointCore">
      <summary>Gets a clickable point on the control.</summary>
      <returns>A point with <see cref="F:System.Double.NaN" /> coordinates, which indicates to automation that the tab itself has no clickable points (rather, the item in the tab is the element that should be reported as clickable).</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabControlAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.TabControl" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.TabControlAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>Gets a value that indicates whether the UI automation provider allows more than one child element to be selected concurrently.</summary>
      <returns>true if multiple selection is allowed; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabControlAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>Retrieves a UI automation provider for each child element that is selected.</summary>
      <returns>An array of UI automation providers.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.TabControlAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>Gets a value that indicates whether the UI automation provider requires at least one child element to be selected.</summary>
      <returns>true if selection is required; otherwise, false. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.TabItemAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.TabItem" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TabItemAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.TabItem" /> to associate with the <see cref="T:System.Windows.Automation.Peers.TabItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for this <see cref="T:System.Windows.Automation.Peers.TabItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type as a value of the enumeration. By default, this method returns <see cref="F:System.Windows.Automation.Peers.AutomationControlType.TabItem" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.GetChildrenCore">
      <summary>Gets the collection of child elements of the <see cref="T:System.Windows.Controls.TabItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TabItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>The collection of child elements of automation peers, for cases where the <see cref="P:System.Windows.Controls.ContentControl.Content" /> of a <see cref="T:System.Windows.Controls.TabControl" /> is a collection of elements and not a single element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class that is associated with this <see cref="T:System.Windows.Automation.Peers.TabItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>By default, the type name of the <paramref name="owner" /> value that the automation peer is constructed with.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.GetNameCore">
      <summary>Gets the name of the class of the object associated with this <see cref="T:System.Windows.Automation.Peers.TabItemAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string value from the tab item's <see cref="P:System.Windows.Controls.TabItem.Header" /> if available.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.TabItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TabItemAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner element is not enabled.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.TabItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>Gets a value that indicates whether an item is selected.</summary>
      <returns>true if the element is selected; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>Deselects any selected items and then selects the current element.</summary>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner element is not enabled.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.TabItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>Gets the UI automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.</summary>
      <returns>The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.TreeViewAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.TreeView" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.#ctor(System.Windows.Controls.TreeView)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.TreeView" /> to associate with the <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.TreeView" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Tree" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.GetChildrenCore">
      <summary>Gets the collection of child elements of the <see cref="T:System.Windows.Controls.TreeView" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />. </summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.TreeView" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains TreeView.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets a control pattern for the <see cref="T:System.Windows.Controls.TreeView" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values that indicates the control pattern.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.TreeViewAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>Gets a value that indicates whether the UI automation provider allows more than one child element to be selected at the same time.</summary>
      <returns>true if multiple selection is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>Retrieves a UI automation provider for each child element that is selected.</summary>
      <returns>An array of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.TreeViewAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>Gets a value that indicates whether the UI automation provider requires at least one child element to be selected. </summary>
      <returns>true if selection is required; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer">
      <summary>Exposes the items in <see cref="T:System.Windows.Controls.TreeViewItem" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.#ctor(System.Windows.Controls.TreeViewItem)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.TreeViewItem" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.TreeViewItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.TreeItem" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.TreeViewItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains TreeViewItem.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.TreeViewItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
      <summary>Hides all nodes, controls, or content that are descendants of the control.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
      <summary>Displays all child nodes, controls, or content of the control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
      <summary>Gets the state (expanded or collapsed) of the control.</summary>
      <returns>The state (expanded or collapsed) of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>Gets a value that indicates whether an item is selected. </summary>
      <returns>true if an item is selected; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>Clears any selection and then selects the current element. </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>Gets the UI automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.</summary>
      <returns>The UI automation provider.</returns>
    </member>
    <member name="T:System.Windows.Controls.Calendar">
      <summary>Represents a control that enables a user to select a date by using a visual calendar display. </summary>
    </member>
    <member name="M:System.Windows.Controls.Calendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Calendar" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.Calendar.BlackoutDates">
      <summary>Gets or sets a collection of dates that are marked as not selectable.</summary>
      <returns>A collection of dates that cannot be selected. The default value is an empty collection.</returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.CalendarButtonStyle">
      <summary>Gets or sets the <see cref="T:System.Windows.Style" /> associated with the control's internal <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> object.</summary>
      <returns>The current style of the <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> object.</returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.CalendarButtonStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Calendar.CalendarButtonStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Calendar.CalendarButtonStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.CalendarDayButtonStyle">
      <summary>Gets or sets the <see cref="T:System.Windows.Style" /> associated with the control's internal <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> object.</summary>
      <returns>The current style of the <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> object.</returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.CalendarDayButtonStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Calendar.CalendarDayButtonStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Calendar.CalendarDayButtonStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.CalendarItemStyle">
      <summary>Gets or sets the <see cref="T:System.Windows.Style" /> associated with the control's internal <see cref="T:System.Windows.Controls.Primitives.CalendarItem" /> object.</summary>
      <returns>The current style of the <see cref="T:System.Windows.Controls.Primitives.CalendarItem" /> object.</returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.CalendarItemStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Calendar.CalendarItemStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Calendar.CalendarItemStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.DisplayDate">
      <summary>Gets or sets the date to display.</summary>
      <returns>The date to display.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The given date is not in the range specified by <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" /> and <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" />.</exception>
    </member>
    <member name="E:System.Windows.Controls.Calendar.DisplayDateChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.Calendar.DisplayDate" /> property is changed.</summary>
    </member>
    <member name="P:System.Windows.Controls.Calendar.DisplayDateEnd">
      <summary>Gets or sets the last date to be displayed.</summary>
      <returns>The last date to display.</returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.DisplayDateEndProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.DisplayDateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Calendar.DisplayDate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Calendar.DisplayDate" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.DisplayDateStart">
      <summary>Gets or sets the first date to be displayed.</summary>
      <returns>The first date to display.</returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.DisplayDateStartProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.DisplayMode">
      <summary>Gets or sets a value indicating whether the calendar is displayed in months, years, or decades.</summary>
      <returns>A value indicating what length of time the <see cref="T:System.Windows.Controls.Calendar" /> should display.</returns>
    </member>
    <member name="E:System.Windows.Controls.Calendar.DisplayModeChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.Calendar.DisplayMode" /> property is changed. </summary>
    </member>
    <member name="F:System.Windows.Controls.Calendar.DisplayModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Calendar.DisplayMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Calendar.DisplayMode" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.FirstDayOfWeek">
      <summary>Gets or sets the day that is considered the beginning of the week.</summary>
      <returns>A <see cref="T:System.DayOfWeek" /> representing the beginning of the week. The default is <see cref="F:System.DayOfWeek.Sunday" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.FirstDayOfWeekProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Calendar.FirstDayOfWeek" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Calendar.FirstDayOfWeek" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.IsTodayHighlighted">
      <summary>Gets or sets a value indicating whether the current date is highlighted.</summary>
      <returns>true if the current date is highlighted; otherwise, false. The default is true. </returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.IsTodayHighlightedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Calendar.IsTodayHighlighted" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Calendar.IsTodayHighlighted" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Calendar.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Calendar" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.Calendar.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Calendar" /> object.</returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.SelectedDate">
      <summary>Gets or sets the currently selected date.</summary>
      <returns>The date currently selected. The default is null.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The given date is outside the range specified by <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" /> and <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" />-or-The given date is in the <see cref="P:System.Windows.Controls.Calendar.BlackoutDates" /> collection.</exception>
      <exception cref="T:System.InvalidOperationException">If set to anything other than null when <see cref="P:System.Windows.Controls.Calendar.SelectionMode" /> is set to <see cref="F:System.Windows.Controls.CalendarSelectionMode.None" />.</exception>
    </member>
    <member name="F:System.Windows.Controls.Calendar.SelectedDateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Calendar.SelectedDate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Calendar.SelectedDate" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.SelectedDates">
      <summary>Gets a collection of selected dates.</summary>
      <returns>A <see cref="T:System.Windows.Controls.SelectedDatesCollection" /> object that contains the currently selected dates. The default is an empty collection.</returns>
    </member>
    <member name="E:System.Windows.Controls.Calendar.SelectedDatesChanged">
      <summary>Occurs when the collection returned by the <see cref="P:System.Windows.Controls.Calendar.SelectedDates" /> property is changed. </summary>
    </member>
    <member name="P:System.Windows.Controls.Calendar.SelectionMode">
      <summary>Gets or sets a value that indicates what kind of selections are allowed.</summary>
      <returns>A value that indicates the current selection mode. The default is <see cref="F:System.Windows.Controls.CalendarSelectionMode.SingleDate" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.SelectionModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Calendar.SelectionMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Calendar.SelectionMode" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Calendar.ToString">
      <summary>Provides a text representation of the selected date.</summary>
      <returns>A text representation of the selected date, or an empty string if <see cref="P:System.Windows.Controls.Calendar.SelectedDate" /> is null.</returns>
    </member>
    <member name="T:System.Windows.Controls.CalendarBlackoutDatesCollection">
      <summary>Represents a collection of non-selectable dates in a <see cref="T:System.Windows.Controls.Calendar" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.CalendarBlackoutDatesCollection.#ctor(System.Windows.Controls.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.CalendarBlackoutDatesCollection" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Calendar" /> whose dates this object represents.</param>
    </member>
    <member name="M:System.Windows.Controls.CalendarBlackoutDatesCollection.AddDatesInPast">
      <summary>Adds all dates before <see cref="P:System.DateTime.Today" /> to the collection.</summary>
    </member>
    <member name="M:System.Windows.Controls.CalendarBlackoutDatesCollection.Contains(System.DateTime)">
      <summary>Returns a value that represents whether this collection contains the specified date.</summary>
      <returns>true if the collection contains the specified date; otherwise, false.</returns>
      <param name="date">The date to search for.</param>
    </member>
    <member name="M:System.Windows.Controls.CalendarBlackoutDatesCollection.Contains(System.DateTime,System.DateTime)">
      <summary>Returns a value that represents whether this collection contains the specified range of dates.</summary>
      <returns>true if all dates in the range are contained in the collection; otherwise, false.</returns>
      <param name="start">The start of the date range.</param>
      <param name="end">The end of the date range.</param>
    </member>
    <member name="M:System.Windows.Controls.CalendarBlackoutDatesCollection.ContainsAny(System.Windows.Controls.CalendarDateRange)">
      <summary>Returns a value that represents whether this collection contains any date in the specified range.</summary>
      <returns>true if any date in the range is contained in the collection; otherwise, false.</returns>
      <param name="range">The range of dates to search for.</param>
    </member>
    <member name="T:System.Windows.Controls.CalendarDateChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Calendar.DisplayDateChanged" /> event. </summary>
    </member>
    <member name="P:System.Windows.Controls.CalendarDateChangedEventArgs.AddedDate">
      <summary>Gets or sets the date to be newly displayed.</summary>
      <returns>The new date to display.</returns>
    </member>
    <member name="P:System.Windows.Controls.CalendarDateChangedEventArgs.RemovedDate">
      <summary>Getsor sets the date that was previously displayed.</summary>
      <returns>The date previously displayed. </returns>
    </member>
    <member name="T:System.Windows.Controls.CalendarDateRange">
      <summary>Represents a range of dates in a <see cref="T:System.Windows.Controls.Calendar" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.CalendarDateRange.#ctor(System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.CalendarDateRange" /> class with a single date.</summary>
      <param name="day">The date to be represented by the range.</param>
    </member>
    <member name="M:System.Windows.Controls.CalendarDateRange.#ctor(System.DateTime,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.CalendarDateRange" /> class with a range of dates.</summary>
      <param name="start">The start of the range to be represented.</param>
      <param name="end">The end of the range to be represented.</param>
    </member>
    <member name="P:System.Windows.Controls.CalendarDateRange.End">
      <summary>Gets the last date in the represented range.</summary>
      <returns>The last date in the represented range.</returns>
    </member>
    <member name="P:System.Windows.Controls.CalendarDateRange.Start">
      <summary>Gets the first date in the represented range.</summary>
      <returns>The first date in the represented range.</returns>
    </member>
    <member name="T:System.Windows.Controls.CalendarMode">
      <summary>Specifies values for the different modes of operation of a <see cref="T:System.Windows.Controls.Calendar" />. </summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarMode.Month">
      <summary>The <see cref="T:System.Windows.Controls.Calendar" /> displays a month at a time.</summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarMode.Year">
      <summary>The <see cref="T:System.Windows.Controls.Calendar" /> displays a year at a time.</summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarMode.Decade">
      <summary>The <see cref="T:System.Windows.Controls.Calendar" /> displays a decade at a time.</summary>
    </member>
    <member name="T:System.Windows.Controls.CalendarModeChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Calendar.DisplayModeChanged" /> event. </summary>
    </member>
    <member name="M:System.Windows.Controls.CalendarModeChangedEventArgs.#ctor(System.Windows.Controls.CalendarMode,System.Windows.Controls.CalendarMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.CalendarModeChangedEventArgs" /> class. </summary>
      <param name="oldMode">The previous mode.</param>
      <param name="newMode">The new mode.</param>
    </member>
    <member name="P:System.Windows.Controls.CalendarModeChangedEventArgs.NewMode">
      <summary>Gets the new mode of the <see cref="T:System.Windows.Controls.Calendar" />.</summary>
      <returns>A <see cref="T:System.Windows.Controls.CalendarMode" /> representing the new mode. </returns>
    </member>
    <member name="P:System.Windows.Controls.CalendarModeChangedEventArgs.OldMode">
      <summary>Gets the previous mode of the <see cref="T:System.Windows.Controls.Calendar" />.</summary>
      <returns>A <see cref="T:System.Windows.Controls.CalendarMode" /> representing the previous mode. </returns>
    </member>
    <member name="T:System.Windows.Controls.CalendarSelectionMode">
      <summary>Specifies values that describe the available selection modes for a <see cref="T:System.Windows.Controls.Calendar" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarSelectionMode.SingleDate">
      <summary>Only a single date can be selected. Use the <see cref="P:System.Windows.Controls.Calendar.SelectedDate" /> property to retrieve the selected date.</summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarSelectionMode.SingleRange">
      <summary>A single range of dates can be selected. Use the <see cref="P:System.Windows.Controls.Calendar.SelectedDates" /> property to retrieve the selected dates.</summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarSelectionMode.MultipleRange">
      <summary>Multiple non-contiguous ranges of dates can be selected. Use the <see cref="P:System.Windows.Controls.Calendar.SelectedDates" /> property to retrieve the selected dates.</summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarSelectionMode.None">
      <summary>No selections are allowed.</summary>
    </member>
    <member name="T:System.Windows.Controls.ChildWindow">
      <summary>Provides a window that can be displayed over a parent window and blocks interaction with the parent window.</summary>
    </member>
    <member name="M:System.Windows.Controls.ChildWindow.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ChildWindow" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.ChildWindow.Close">
      <summary>Closes a <see cref="T:System.Windows.Controls.ChildWindow" />.</summary>
    </member>
    <member name="E:System.Windows.Controls.ChildWindow.Closed">
      <summary>Occurs when the <see cref="T:System.Windows.Controls.ChildWindow" /> is closed.</summary>
    </member>
    <member name="E:System.Windows.Controls.ChildWindow.Closing">
      <summary>Occurs when the <see cref="T:System.Windows.Controls.ChildWindow" /> is closing.</summary>
    </member>
    <member name="P:System.Windows.Controls.ChildWindow.DialogResult">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.ChildWindow" /> was accepted or canceled.</summary>
      <returns>true if the child window was accepted; false if the child window was canceled. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Controls.ChildWindow.HasCloseButton">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.ChildWindow" /> has a close button.</summary>
      <returns>true if the child window has a close button; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.ChildWindow.HasCloseButtonProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ChildWindow.HasCloseButton" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ChildWindow.HasCloseButton" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ChildWindow.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ChildWindow" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ChildWindow.OnClosed(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.ChildWindow.Closed" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ChildWindow.OnClosing(System.ComponentModel.CancelEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.ChildWindow.Closing" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ChildWindow.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ChildWindowAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>
        <see cref="T:System.Windows.Automation.Peers.ChildWindowAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ChildWindow" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.ChildWindow.OnOpened">
      <summary>This method is called every time a <see cref="T:System.Windows.Controls.ChildWindow" /> is displayed.</summary>
    </member>
    <member name="P:System.Windows.Controls.ChildWindow.OverlayBrush">
      <summary>Gets or sets the visual brush that is used to cover the parent window when the child window is open.</summary>
      <returns>The visual brush that is used to cover the parent window when the <see cref="T:System.Windows.Controls.ChildWindow" /> is open. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ChildWindow.OverlayBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ChildWindow.OverlayBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ChildWindow.OverlayBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ChildWindow.OverlayOpacity">
      <summary>Gets or sets the opacity of the overlay brush that is used to cover the parent window when the child window is open.</summary>
      <returns>The opacity of the overlay brush that is used to cover the parent window when the <see cref="T:System.Windows.Controls.ChildWindow" /> is open. The default is 1.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ChildWindow.OverlayOpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ChildWindow.OverlayOpacity" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ChildWindow.OverlayOpacity" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ChildWindow.Show">
      <summary>Opens a <see cref="T:System.Windows.Controls.ChildWindow" /> and returns without waiting for the <see cref="T:System.Windows.Controls.ChildWindow" /> to close.</summary>
      <exception cref="T:System.InvalidOperationException">The child window is already in the visual tree.</exception>
    </member>
    <member name="P:System.Windows.Controls.ChildWindow.Title">
      <summary>Gets or sets the title of the <see cref="T:System.Windows.Controls.ChildWindow" />.</summary>
      <returns>The title of the child window. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ChildWindow.TitleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ChildWindow.Title" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ChildWindow.Title" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.DatePicker">
      <summary>Represents a control that allows the user to select a date.</summary>
    </member>
    <member name="M:System.Windows.Controls.DatePicker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DatePicker" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.BlackoutDates">
      <summary>Gets or sets a collection of dates that are marked as not selectable.</summary>
      <returns>A collection of dates that cannot be selected. The default value is an empty collection.</returns>
    </member>
    <member name="E:System.Windows.Controls.DatePicker.CalendarClosed">
      <summary>Occurs when the drop-down <see cref="T:System.Windows.Controls.Calendar" /> is closed.</summary>
    </member>
    <member name="E:System.Windows.Controls.DatePicker.CalendarOpened">
      <summary>Occurs when the drop-down <see cref="T:System.Windows.Controls.Calendar" /> is opened.</summary>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.CalendarStyle">
      <summary>Gets or sets the style that is used when rendering the calendar.</summary>
      <returns>The style that is used when rendering the calendar.</returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.CalendarStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DatePicker.CalendarStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DatePicker.CalendarStyle" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.DatePicker.DateValidationError">
      <summary>Occurs when <see cref="P:System.Windows.Controls.DatePicker.Text" /> is assigned a value that cannot be interpreted as a date.</summary>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.DisplayDate">
      <summary>Gets or sets the date to display.</summary>
      <returns>The date to display. The default is <see cref="P:System.DateTime.Today" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified date is not in the range defined by <see cref="P:System.Windows.Controls.DatePicker.DisplayDateStart" />. and <see cref="P:System.Windows.Controls.DatePicker.DisplayDateEnd" />.</exception>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.DisplayDateEnd">
      <summary>Gets or sets the last date to be displayed.</summary>
      <returns>The last date to display.</returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.DisplayDateEndProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DatePicker.DisplayDateEnd" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DatePicker.DisplayDateEnd" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.DisplayDateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DatePicker.DisplayDate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DatePicker.DisplayDate" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.DisplayDateStart">
      <summary>Gets or sets the first date to be displayed.</summary>
      <returns>The first date to display.</returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.DisplayDateStartProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DatePicker.DisplayDateStart" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DatePicker.DisplayDateStart" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.FirstDayOfWeek">
      <summary>Gets or sets the day that is considered the beginning of the week.</summary>
      <returns>A <see cref="T:System.DayOfWeek" /> representing the beginning of the week. The default is <see cref="F:System.DayOfWeek.Sunday" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.FirstDayOfWeekProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DatePicker.FirstDayOfWeek" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DatePicker.FirstDayOfWeek" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.IsDropDownOpen">
      <summary>Gets or sets a value that indicates whether the drop-down <see cref="T:System.Windows.Controls.Calendar" /> is open or closed.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.Calendar" /> is open; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.IsDropDownOpenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DatePicker.IsDropDownOpen" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DatePicker.IsDropDownOpen" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.IsTodayHighlighted">
      <summary>Gets or sets a value that indicates whether the current date will be highlighted.</summary>
      <returns>true if the current date is highlighted; otherwise, false. The default is true. </returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.IsTodayHighlightedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DatePicker.IsTodayHighlighted" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DatePicker.IsTodayHighlighted" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DatePicker.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.DatePicker" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.DatePicker.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" /> for the <see cref="T:System.Windows.Controls.DatePicker" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.DatePicker.OnDateValidationError(System.Windows.Controls.DatePickerDateValidationErrorEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Controls.DatePickerDateValidationErrorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.SelectedDate">
      <summary>Gets or sets the currently selected date.</summary>
      <returns>The date currently selected. The default is null.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified date is not in the range defined by <see cref="P:System.Windows.Controls.DatePicker.DisplayDateStart" /> and <see cref="P:System.Windows.Controls.DatePicker.DisplayDateEnd" />, or the specified date is in the <see cref="P:System.Windows.Controls.DatePicker.BlackoutDates" /> collection. </exception>
    </member>
    <member name="E:System.Windows.Controls.DatePicker.SelectedDateChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.DatePicker.SelectedDate" /> property is changed.</summary>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.SelectedDateFormat">
      <summary>Gets or sets the format that is used to display the selected date.</summary>
      <returns>The format that is used to display the selected date. The default is <see cref="F:System.Windows.Controls.DatePickerFormat.Short" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">An specified format is not valid.</exception>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.SelectedDateFormatProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DatePicker.SelectedDateFormat" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DatePicker.SelectedDateFormat" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.SelectedDateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DatePicker.SelectedDate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DatePicker.SelectedDate" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.SelectionBackground">
      <summary>Gets or sets the background used for selected dates.</summary>
      <returns>The background used for selected dates.</returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.SelectionBackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DatePicker.SelectionBackground" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DatePicker.SelectionBackground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.Text">
      <summary>Gets or sets the text that is displayed by the <see cref="T:System.Windows.Controls.DatePicker" />.</summary>
      <returns>The text displayed by the <see cref="T:System.Windows.Controls.DatePicker" />.</returns>
      <exception cref="T:System.FormatException">The text entered cannot be parsed to a valid date, and the exception is not suppressed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The text entered parses to a date that is not selectable.</exception>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.TextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.DatePicker.Text" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.DatePicker.Text" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.DatePicker.ToString"></member>
    <member name="T:System.Windows.Controls.DatePickerDateValidationErrorEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.#ctor(System.Exception,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DatePickerDateValidationErrorEventArgs" /> class. </summary>
      <param name="exception">The initial exception from the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.</param>
      <param name="text">The text that caused the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.</param>
    </member>
    <member name="P:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.Exception">
      <summary>Gets or sets the initial exception associated with the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.</summary>
      <returns>The exception associated with the validation failure.</returns>
    </member>
    <member name="P:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.Text">
      <summary>Gets or sets the text that caused the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.</summary>
      <returns>The text that caused the validation failure.</returns>
    </member>
    <member name="P:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.ThrowException">
      <summary>Gets or sets a value that indicates whether <see cref="P:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.Exception" /> should be thrown.</summary>
      <returns>true if the exception should be thrown; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">If set to true and <see cref="P:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.Exception" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Controls.DatePickerFormat">
      <summary>Specifies date formats for a <see cref="T:System.Windows.Controls.DatePicker" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.DatePickerFormat.Long">
      <summary>Specifies that the date should be displayed using unabbreviated days of the week and month names.</summary>
    </member>
    <member name="F:System.Windows.Controls.DatePickerFormat.Short">
      <summary>Specifies that the date should be displayed using abbreviated days of the week and month names.</summary>
    </member>
    <member name="T:System.Windows.Controls.DateTimeTypeConverter">
      <summary>Provides a converter to convert <see cref="T:System.DateTime" /> objects to and from other representations.</summary>
    </member>
    <member name="M:System.Windows.Controls.DateTimeTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DateTimeTypeConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.DateTimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value that indicates whether it is possible to convert the specified type to a <see cref="T:System.DateTime" /> with the specified format context.</summary>
      <returns>true if the conversion is possible; otherwise, false.</returns>
      <param name="context">The format context that is used to convert the specified type.</param>
      <param name="sourceType">The type to convert.</param>
    </member>
    <member name="M:System.Windows.Controls.DateTimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value that indicates whether it is possible to convert a <see cref="T:System.DateTime" /> to the specified type within the specified format context.</summary>
      <returns>true if the conversion is possible; otherwise, false.</returns>
      <param name="context">The format context that is used to convert.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.Windows.Controls.DateTimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.DateTime" /> with the specified culture with the specified format context.</summary>
      <returns>A <see cref="T:System.DateTime" /> object that represents <paramref name="value" />.</returns>
      <param name="context">The format context that is used to convert the specified type.</param>
      <param name="culture">The culture to use for the result.</param>
      <param name="value">The value to convert.</param>
      <exception cref="T:System.FormatException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.Windows.Controls.DateTimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.DateTime" /> with the specified culture to the specified object with the specified format context.</summary>
      <returns>An object of the specified type that represents <paramref name="value" />.</returns>
      <param name="context">The format context that is used to convert to the specified type.</param>
      <param name="culture">The culture to use for the converting date.</param>
      <param name="value">The date to convert.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="T:System.Windows.Controls.Dock">
      <summary>Specifies values that control the behavior of a control positioned inside another control.</summary>
    </member>
    <member name="F:System.Windows.Controls.Dock.Left">
      <summary>Specifies that the control should be positioned on the left of the control.</summary>
    </member>
    <member name="F:System.Windows.Controls.Dock.Top">
      <summary>Specifies that the control should be positioned on top of the control.</summary>
    </member>
    <member name="F:System.Windows.Controls.Dock.Right">
      <summary>Specifies that the control should be positioned on the right of the control.</summary>
    </member>
    <member name="F:System.Windows.Controls.Dock.Bottom">
      <summary>Specifies that the control should be positioned at the bottom of the control.</summary>
    </member>
    <member name="T:System.Windows.Controls.GridSplitter">
      <summary>Represents a control that redistributes space between the rows of columns of a <see cref="T:System.Windows.Controls.Grid" /> control.</summary>
    </member>
    <member name="M:System.Windows.Controls.GridSplitter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.GridSplitter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.GridSplitter.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.GridSplitter" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.GridSplitter.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" /> for the <see cref="T:System.Windows.Controls.GridSplitter" /> object.</returns>
    </member>
    <member name="P:System.Windows.Controls.GridSplitter.PreviewStyle">
      <summary>Gets or sets the <see cref="T:System.Windows.Style" /> that is used for previewing changes.</summary>
      <returns>The style that is used to preview changes.</returns>
    </member>
    <member name="F:System.Windows.Controls.GridSplitter.PreviewStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.GridSplitter.PreviewStyle" /> dependency property.</summary>
      <returns>An identifier for the <see cref="P:System.Windows.Controls.GridSplitter.PreviewStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.GridSplitter.ShowsPreview">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.GridSplitter" /> displays a preview.</summary>
      <returns>true if a preview is displayed; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.GridSplitter.ShowsPreviewProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.GridSplitter.ShowsPreview" /> dependency property.</summary>
      <returns>An identifier for the <see cref="P:System.Windows.Controls.GridSplitter.ShowsPreview" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.HeaderedItemsControl">
      <summary>Represents a control that contains a header and collection of items.</summary>
    </member>
    <member name="M:System.Windows.Controls.HeaderedItemsControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.HeaderedItemsControl.Header">
      <summary>Gets or sets the item that labels the control. </summary>
      <returns>The item that labels the control. The default value is null. </returns>
    </member>
    <member name="F:System.Windows.Controls.HeaderedItemsControl.HeaderProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate">
      <summary>Gets or sets a data template that is used to display the contents of the control's <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" />.</summary>
      <returns>Gets or sets a data template that is used to display the contents of the control's header. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.HeaderedItemsControl.ItemContainerStyle">
      <summary>Gets or sets the <see cref="T:System.Windows.Style" /> that is applied to the container element generated for each item.</summary>
      <returns>The <see cref="T:System.Windows.Style" /> that is applied to the container element generated for each item. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.HeaderedItemsControl.ItemContainerStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.HeaderedItemsControl.ItemContainerStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.HeaderedItemsControl.ItemContainerStyle" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.HeaderedItemsControl.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.HeaderedItemsControl.OnHeaderChanged(System.Object,System.Object)">
      <summary>Called when the value of the <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" /> property changes.</summary>
      <param name="oldHeader">The old value of the <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" /> property.</param>
      <param name="newHeader">The new value of the <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.HeaderedItemsControl.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
      <summary>Called when the value of the <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate" /> property changes.</summary>
      <param name="oldHeaderTemplate">The old value of the <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate" /> property.</param>
      <param name="newHeaderTemplate">The new value of the <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.HeaderedItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Prepares the specified element to display the specified item.</summary>
      <param name="element">The container element used to display the specified item.</param>
      <param name="item">The content to display.</param>
    </member>
    <member name="T:System.Windows.Controls.RoutedPropertyChangingEventArgs`1">
      <summary>Provides event data for various routed events that track property values changing. Typically the events denote a cancellable action.</summary>
      <typeparam name="T">The type of the value for the dependency property that is changing.</typeparam>
    </member>
    <member name="M:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.#ctor(System.Windows.DependencyProperty,`0,`0,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.RoutedPropertyChangingEventArgs`1" /> class,</summary>
      <param name="property">The <see cref="T:System.Windows.DependencyProperty" /> identifier for the property that is changing.</param>
      <param name="oldValue">The previous value of the property.</param>
      <param name="newValue">The new value of the property, assuming that the property change is not cancelled.</param>
      <param name="isCancelable">true if the property change is cancellable by setting <see cref="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel" /> to true in event handling. false if the property change is not cancellable.</param>
    </member>
    <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel">
      <summary>Gets or sets a value that determines whether the property change that originated the RoutedPropertyChanging event should be cancelled.</summary>
      <returns>true to cancel the property change; this resets the property to <see cref="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue" />. false to not cancel the property change; the value changes to <see cref="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue" />.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to cancel in an instance where <see cref="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable" /> is false.</exception>
    </member>
    <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.InCoercion">
      <summary>Gets or sets a value indicating whether internal value coercion is acting on the property change that originated the RoutedPropertyChanging event.</summary>
      <returns>true if coercion is active. false if coercion is not active.</returns>
    </member>
    <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable">
      <summary>Gets a value indicating whether the property change that originated the RoutedPropertyChanging event is cancellable.</summary>
      <returns>true if the property change is cancellable. false if the property change is not cancellable.</returns>
    </member>
    <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue">
      <summary>Gets a value that reports the new value of the changing property, assuming that the property change is not cancelled.</summary>
      <returns>The new value of the changing property.</returns>
    </member>
    <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue">
      <summary>Gets a value that reports the previous value of the changing property.</summary>
      <returns>The previous value of the changing property.</returns>
    </member>
    <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Property">
      <summary>Gets the <see cref="T:System.Windows.DependencyProperty" /> identifier for the property that is changing.</summary>
      <returns>The <see cref="T:System.Windows.DependencyProperty" /> identifier for the property that is changing.</returns>
    </member>
    <member name="T:System.Windows.Controls.RoutedPropertyChangingEventHandler`1">
      <summary>Represents methods that handle various routed events that track property values changing. Typically the events denote a cancellable action.</summary>
      <param name="sender">The object where the initiating property is changing.</param>
      <param name="e">Event data for the event,</param>
      <typeparam name="T">The type of the value for the dependency property that is changing.</typeparam>
    </member>
    <member name="T:System.Windows.Controls.SelectedDatesCollection">
      <summary>Represents a set of selected dates in a <see cref="T:System.Windows.Controls.Calendar" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.SelectedDatesCollection.#ctor(System.Windows.Controls.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.SelectedDatesCollection" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Calendar" /> associated with this object.</param>
    </member>
    <member name="M:System.Windows.Controls.SelectedDatesCollection.AddRange(System.DateTime,System.DateTime)">
      <summary>Adds all the dates in the specified range, which includes the first and last dates, to the collection.</summary>
      <param name="start">The first date to add to the collection.</param>
      <param name="end">The last date to add to the collection.</param>
    </member>
    <member name="T:System.Windows.Controls.TabControl">
      <summary>Represents a control that contains multiple items that share the same space on the screen.</summary>
    </member>
    <member name="M:System.Windows.Controls.TabControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.TabControl" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.TabControl.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.TabControl" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.TabControl.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" /> for the <see cref="T:System.Windows.Controls.TabControl" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.TabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <param name="e">Data used by the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TabControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <param name="e">Data used by the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.TabControl.SelectionChanged" /> event.</summary>
      <param name="args">Provides data for the <see cref="E:System.Windows.Controls.TabControl.SelectionChanged" /> event.</param>
    </member>
    <member name="P:System.Windows.Controls.TabControl.SelectedContent">
      <summary>Gets the content of the currently selected <see cref="T:System.Windows.Controls.TabItem" />.</summary>
      <returns>The content of the currently selected <see cref="T:System.Windows.Controls.TabItem" />. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.TabControl.SelectedContentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TabControl.SelectedContent" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TabControl.SelectedContent" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TabControl.SelectedIndex">
      <summary>Gets or sets the index of the currently selected <see cref="T:System.Windows.Controls.TabItem" />.</summary>
      <returns>The index of the currently selected <see cref="T:System.Windows.Controls.TabItem" />, or -1 if a <see cref="T:System.Windows.Controls.TabItem" /> is not selected.</returns>
    </member>
    <member name="F:System.Windows.Controls.TabControl.SelectedIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TabControl.SelectedItem">
      <summary>Gets or sets the currently selected <see cref="T:System.Windows.Controls.TabItem" />.</summary>
      <returns>The currently selected <see cref="T:System.Windows.Controls.TabItem" />, or null if a <see cref="T:System.Windows.Controls.TabItem" /> is not selected.</returns>
    </member>
    <member name="F:System.Windows.Controls.TabControl.SelectedItemProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TabControl.SelectedItem" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TabControl.SelectedItem" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.TabControl.SelectionChanged">
      <summary>Occurs when the selected <see cref="T:System.Windows.Controls.TabItem" /> changes.</summary>
    </member>
    <member name="P:System.Windows.Controls.TabControl.TabStripPlacement">
      <summary>Gets or sets how <see cref="T:System.Windows.Controls.TabItem" /> headers align relative to the <see cref="T:System.Windows.Controls.TabItem" /> content.</summary>
      <returns>The alignment of <see cref="T:System.Windows.Controls.TabItem" /> headers relative to the <see cref="T:System.Windows.Controls.TabItem" /> content. The default is <see cref="F:System.Windows.Controls.Dock.Top" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TabControl.TabStripPlacementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TabControl.TabStripPlacement" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TabControl.TabStripPlacement" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.TabItem">
      <summary>Represents a selectable item in a <see cref="T:System.Windows.Controls.TabControl" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.TabItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.TabItem" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.TabItem.HasHeader">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.TabItem" /> has a header.</summary>
      <returns>true if <see cref="P:System.Windows.Controls.TabItem.Header" /> is not null; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.TabItem.HasHeaderProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TabItem.HasHeader" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TabItem.HasHeader" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TabItem.Header">
      <summary>Gets or sets the header of the <see cref="T:System.Windows.Controls.TabItem" />.</summary>
      <returns>The current header of the <see cref="T:System.Windows.Controls.TabItem" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TabItem.HeaderProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TabItem.Header" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TabItem.Header" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TabItem.HeaderTemplate">
      <summary>Gets or sets the template that is used to display the content of the <see cref="T:System.Windows.Controls.TabItem" /> header.</summary>
      <returns>The current template that is used to display <see cref="T:System.Windows.Controls.TabItem" /> header content.</returns>
    </member>
    <member name="F:System.Windows.Controls.TabItem.HeaderTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TabItem.HeaderTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TabItem.HeaderTemplate" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TabItem.IsFocused"></member>
    <member name="F:System.Windows.Controls.TabItem.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TabItem.IsFocused" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TabItem.IsFocused" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TabItem.IsSelected">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.TabItem" /> is currently selected.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.TabItem" /> is selected; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.TabItem.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.TabItem" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnContentChanged(System.Object,System.Object)">
      <param name="oldContent">The previous <see cref="T:System.Windows.Controls.TabItem" /> content.</param>
      <param name="newContent">The new <see cref="T:System.Windows.Controls.TabItem" /> content.</param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnCreateAutomationPeer">
      <summary>Creates and returns an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for this <see cref="T:System.Windows.Controls.TabItem" />.</summary>
      <returns>An automation peer for this <see cref="T:System.Windows.Controls.TabItem" />.</returns>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnHeaderChanged(System.Object,System.Object)">
      <summary>Called when the <see cref="P:System.Windows.Controls.TabItem.Header" /> property changes.</summary>
      <param name="oldHeader">The previous value of the <see cref="P:System.Windows.Controls.TabItem.Header" /> property.</param>
      <param name="newHeader">The new value of the <see cref="P:System.Windows.Controls.TabItem.Header" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
      <summary>Called when the <see cref="P:System.Windows.Controls.TabItem.HeaderTemplate" /> property changes.</summary>
      <param name="oldHeaderTemplate">The previous value of the <see cref="P:System.Windows.Controls.TabItem.HeaderTemplate" /> property.</param>
      <param name="newHeaderTemplate">The new value of the <see cref="P:System.Windows.Controls.TabItem.HeaderTemplate" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnIsFocusChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnSelected(System.Windows.RoutedEventArgs)">
      <summary>Called to indicate that the <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> property has changed to true.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnUnselected(System.Windows.RoutedEventArgs)">
      <summary>Called to indicate that the <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> property has changed to false.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="P:System.Windows.Controls.TabItem.TabStripPlacement">
      <summary>Gets the location of the tab strip relative to the <see cref="T:System.Windows.Controls.TabItem" /> content.</summary>
      <returns>The location of the tab strip relative to the <see cref="T:System.Windows.Controls.TabItem" /> content.</returns>
    </member>
    <member name="T:System.Windows.Controls.TreeView">
      <summary>Represents a control that displays hierarchical data in a tree structure that has items that can expand and collapse.</summary>
    </member>
    <member name="M:System.Windows.Controls.TreeView.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.TreeView" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.TreeView.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Removes all templates, styles, and bindings for the object displayed as a <see cref="T:System.Windows.Controls.TreeViewItem" />.</summary>
      <param name="element">The <see cref="T:System.Windows.Controls.TreeViewItem" /> element to clear.</param>
      <param name="item">The item that is contained in the <see cref="T:System.Windows.Controls.TreeViewItem" />.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeView.GetContainerForItemOverride">
      <summary>Creates a <see cref="T:System.Windows.Controls.TreeViewItem" /> to display content.</summary>
      <returns>A <see cref="T:System.Windows.Controls.TreeViewItem" /> to use as a container for content.</returns>
    </member>
    <member name="M:System.Windows.Controls.TreeView.IsItemItsOwnContainerOverride(System.Object)">
      <summary>Determines whether the specified item is a <see cref="T:System.Windows.Controls.TreeViewItem" />, which is the default container for items in the <see cref="T:System.Windows.Controls.TreeView" /> control.</summary>
      <returns>true if the item is a <see cref="T:System.Windows.Controls.TreeViewItem" />; otherwise, false,</returns>
      <param name="item">The object to evaluate.</param>
    </member>
    <member name="P:System.Windows.Controls.TreeView.ItemContainerStyle">
      <summary>Gets or sets the <see cref="T:System.Windows.Style" /> that is applied to the container element generated for each item.</summary>
      <returns>The <see cref="T:System.Windows.Style" /> applied to the container element that contains each item.</returns>
    </member>
    <member name="F:System.Windows.Controls.TreeView.ItemContainerStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TreeView.ItemContainerStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TreeView.ItemContainerStyle" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.TreeView" /> control when a new control template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" /> for the <see cref="T:System.Windows.Controls.TreeView" /> control.</returns>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Makes adjustments to the <see cref="T:System.Windows.Controls.TreeView" /> control when the value of the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> property changes.</summary>
      <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> that contains data about the change. </param>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event when a key is pressed while the control has focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e " />is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.KeyUp" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event.</summary>
      <param name="e">
        <see cref="T:System.Windows.Input.MouseEventArgs" />
      </param>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Provided handling for the <see cref="E:System.Windows.UIElement.MouseMove" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeView.OnSelectedItemChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
      <summary>Raises the <see cref="E:System.Windows.Controls.TreeView.SelectedItemChanged" /> event when the <see cref="P:System.Windows.Controls.TreeView.SelectedItem" /> property value changes.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeView.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Prepares the container element to display the specified item.</summary>
      <param name="element">The container element used to display the specified item.</param>
      <param name="item">The item to display.</param>
    </member>
    <member name="P:System.Windows.Controls.TreeView.SelectedItem">
      <summary>Gets the selected item in a <see cref="T:System.Windows.Controls.TreeView" />.</summary>
      <returns>The currently selected item or null if no item is selected. The default value is null.</returns>
    </member>
    <member name="E:System.Windows.Controls.TreeView.SelectedItemChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.Controls.TreeView.SelectedItem" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.Controls.TreeView.SelectedItemProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TreeView.SelectedItem" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TreeView.SelectedItem" /> property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TreeView.SelectedValue">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.TreeView.SelectedItem" /> property that is specified by the <see cref="P:System.Windows.Controls.TreeView.SelectedValuePath" /> property.</summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.TreeView.SelectedItem" /> property that is specified by the <see cref="P:System.Windows.Controls.TreeView.SelectedValuePath" /> property, or null if no item is selected. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Controls.TreeView.SelectedValuePath">
      <summary>Gets or sets the property path that is used to get the <see cref="P:System.Windows.Controls.TreeView.SelectedValue" /> property of the <see cref="P:System.Windows.Controls.TreeView.SelectedItem" /> property in a <see cref="T:System.Windows.Controls.TreeView" />.</summary>
      <returns>The property path that is used to get the <see cref="P:System.Windows.Controls.TreeView.SelectedValue" /> property of the <see cref="P:System.Windows.Controls.TreeView.SelectedItem" /> property in a <see cref="T:System.Windows.Controls.TreeView" />. The default value is <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TreeView.SelectedValuePathProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TreeView.SelectedValuePath" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TreeView.SelectedValuePath" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.TreeView.SelectedValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TreeView.SelectedValue" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TreeView.SelectedValue" /> dependency property. </returns>
    </member>
    <member name="T:System.Windows.Controls.TreeViewItem">
      <summary>Provides a selectable item for the <see cref="T:System.Windows.Controls.TreeView" /> control.</summary>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.TreeViewItem" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Removes all templates, styles, and bindings for the object displayed as a <see cref="T:System.Windows.Controls.TreeViewItem" />.</summary>
      <param name="element">The <see cref="T:System.Windows.Controls.TreeViewItem" /> element to clear.</param>
      <param name="item">The item that is contained in the <see cref="T:System.Windows.Controls.TreeViewItem" />.</param>
    </member>
    <member name="E:System.Windows.Controls.TreeViewItem.Collapsed">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.TreeViewItem.IsExpanded" /> property changes from true to false.</summary>
    </member>
    <member name="E:System.Windows.Controls.TreeViewItem.Expanded">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.TreeViewItem.IsExpanded" /> property changes from false to true.</summary>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.GetContainerForItemOverride">
      <summary>Creates a <see cref="T:System.Windows.Controls.TreeViewItem" /> to display content.</summary>
      <returns>A <see cref="T:System.Windows.Controls.TreeViewItem" /> to use as a container for content.</returns>
    </member>
    <member name="P:System.Windows.Controls.TreeViewItem.HasItems">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Controls.TreeViewItem" /> contains items.</summary>
      <returns>true if this <see cref="T:System.Windows.Controls.TreeViewItem" /> contains items; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.TreeViewItem.HasItemsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TreeViewItem.HasItems" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TreeViewItem.HasItems" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TreeViewItem.IsExpanded">
      <summary>Gets or sets a value that indicates whether the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> contained by this <see cref="T:System.Windows.Controls.TreeViewItem" /> are expanded or collapsed.</summary>
      <returns>true to indicate the contents of the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection are expanded; false to indicate the items are collapsed. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.TreeViewItem.IsExpandedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TreeViewItem.IsExpanded" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TreeViewItem.IsExpanded" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.IsItemItsOwnContainerOverride(System.Object)">
      <summary>Determines whether an object is a <see cref="T:System.Windows.Controls.TreeViewItem" />.</summary>
      <returns>true if <paramref name="item" /> is a <see cref="T:System.Windows.Controls.TreeViewItem" />; otherwise, false.</returns>
      <param name="item">The object to evaluate.</param>
    </member>
    <member name="P:System.Windows.Controls.TreeViewItem.IsSelected">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Windows.Controls.TreeViewItem" /> is selected.</summary>
      <returns>true if this <see cref="T:System.Windows.Controls.TreeViewItem" /> is selected; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.TreeViewItem.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TreeViewItem.IsSelected" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TreeViewItem.IsSelected" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TreeViewItem.IsSelectionActive">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.TreeViewItem" /> has focus.</summary>
      <returns>true if this <see cref="T:System.Windows.Controls.TreeViewItem" /> has focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.TreeViewItem.IsSelectionActiveProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TreeViewItem.IsSelectionActive" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TreeViewItem.IsSelectionActive" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.TreeViewItem" /> control when a new control template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnCollapsed(System.Windows.RoutedEventArgs)">
      <summary>Raises a <see cref="E:System.Windows.Controls.TreeViewItem.Collapsed" /> event when the <see cref="P:System.Windows.Controls.TreeViewItem.IsExpanded" /> property changes from true to false.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" /> object for the <see cref="T:System.Windows.Controls.TreeViewItem" />.</returns>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnExpanded(System.Windows.RoutedEventArgs)">
      <summary>Raises an <see cref="E:System.Windows.Controls.TreeViewItem.Expanded" /> event when the <see cref="P:System.Windows.Controls.TreeViewItem.IsExpanded" /> property changes from false to true.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Makes adjustments to the <see cref="T:System.Windows.Controls.TreeViewItem" /> when the value of the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> property changes. </summary>
      <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> that contains data about the change.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event when the <see cref="T:System.Windows.Controls.TreeViewItem" /> has focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.KeyUp" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnSelected(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.TreeViewItem.Selected" /> event when the <see cref="P:System.Windows.Controls.TreeViewItem.IsSelected" /> property changes from false to true.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.OnUnselected(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.TreeViewItem.Unselected" /> event when the <see cref="P:System.Windows.Controls.TreeViewItem.IsSelected" /> property changes from true to false.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TreeViewItem.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Prepares the specified container element to display the specified item.</summary>
      <param name="element">Container element used to display the specified item.</param>
      <param name="item">The item to display.</param>
    </member>
    <member name="E:System.Windows.Controls.TreeViewItem.Selected">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.TreeViewItem.IsSelected" /> property of a <see cref="T:System.Windows.Controls.TreeViewItem" /> changes from false to true.</summary>
    </member>
    <member name="E:System.Windows.Controls.TreeViewItem.Unselected">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.TreeViewItem.IsSelected" /> property of a <see cref="T:System.Windows.Controls.TreeViewItem" /> changes from true to false.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.CalendarButton">
      <summary>Represents a button on a <see cref="T:System.Windows.Controls.Calendar" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.CalendarButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> class. </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.CalendarButton.CalendarButtonMouseDown"></member>
    <member name="E:System.Windows.Controls.Primitives.CalendarButton.CalendarButtonMouseUp"></member>
    <member name="M:System.Windows.Controls.Primitives.CalendarButton.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> when a new template is applied.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.CalendarDayButton">
      <summary>Represents a day on a <see cref="T:System.Windows.Controls.Calendar" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.CalendarDayButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> class. </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseDown"></member>
    <member name="E:System.Windows.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseUp"></member>
    <member name="M:System.Windows.Controls.Primitives.CalendarDayButton.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> when a new template is applied.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.CalendarItem">
      <summary>Represents the currently displayed month or year on a <see cref="T:System.Windows.Controls.Calendar" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.CalendarItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.CalendarItem" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.CalendarItem.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.CalendarItem" /> when a new template is applied.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DatePickerTextBox">
      <summary>Represents the text input of a <see cref="T:System.Windows.Controls.DatePicker" />. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DatePickerTextBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DatePickerTextBox" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DatePickerTextBox.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.DatePickerTextBox" /> when a new template is applied.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DatePickerTextBox.Watermark">
      <summary>Gets or sets the content displayed as a watermark in the <see cref="T:System.Windows.Controls.Primitives.DatePickerTextBox" /> when it is empty.</summary>
      <returns>The content displayed as a watermark in the <see cref="T:System.Windows.Controls.Primitives.DatePickerTextBox" /> when it is empty.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DatePickerTextBox.WatermarkProperty">
      <summary>Indentifies the <see cref="P:System.Windows.Controls.Primitives.DatePickerTextBox.Watermark" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.TabPanel">
      <summary>Handles the layout of <see cref="T:System.Windows.Controls.TabItem" /> objects on a <see cref="T:System.Windows.Controls.TabControl" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.TabPanel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.TabPanel" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.TabPanel.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges and sizes the content of a <see cref="T:System.Windows.Controls.Primitives.TabPanel" /> object.</summary>
      <returns>The size of the arranged control.</returns>
      <param name="finalSize">The size that a tab panel uses to position child elements.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.TabPanel.MeasureOverride(System.Windows.Size)">
      <summary>Called when remeasuring the control is required.</summary>
      <returns>The measured size of the control.</returns>
      <param name="availableSize">Constraint size as an upper limit. The return value should not exceed this size.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Xml.Linq.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.Xml.Linq</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Xml.Linq.dll</relpath>
    <extension downloadUri="System.Xml.Linq.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\ReferenceAssemblies\mscorlib.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid">
      <summary>[SECURITY CRITICAL] 
                    Provides a base class for Win32 critical handle implementations in which the value of -1 indicates an invalid handle.
                </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid" /> class.
                </summary>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid">
      <summary>[SECURITY CRITICAL] 
                    Gets a value that indicates whether the handle is invalid.
                </summary>
      <returns>true if the handle is not valid; otherwise, false.
                </returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid">
      <summary>[SECURITY CRITICAL] 
                    Provides a base class for Win32 safe handle implementations in which the value of -1 indicates an invalid handle.
                </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid" /> class, specifying whether the handle is to be reliably released. 
                </summary>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).
                </param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid">
      <summary>[SECURITY CRITICAL] 
                    Gets a value that indicates whether the handle is invalid.
                </summary>
      <returns>true if the handle is not valid; otherwise, false.
                </returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
      <summary>[SECURITY CRITICAL] 
                    Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle.
                </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" /> class, specifying whether the handle is to be reliably released. 
                </summary>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).
                </param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid">
      <summary>[SECURITY CRITICAL] 
                    Gets a value that indicates whether the handle is invalid.
                </summary>
      <returns>true if the handle is not valid; otherwise, false.
                </returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeWaitHandle">
      <summary>[SECURITY CRITICAL] 
                    Represents a wrapper class for a wait handle. 
                </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> class. 
                </summary>
      <param name="existingHandle">
                    An <see cref="T:System.IntPtr" /> object that represents the pre-existing handle to use.
                </param>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).
                </param>
    </member>
    <member name="T:System.AccessViolationException">
      <summary>
                    The exception that is thrown when there is an attempt to read or write protected memory.
                </summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a system-supplied message that describes the error.
                </summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified message that describes the error.
                </summary>
      <param name="message">
                    The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
                </param>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.Action`1">
      <summary>
                    Encapsulates a method that takes a single parameter and does not return a value.
                </summary>
      <param name="obj">
                    The parameter of the method that this delegate encapsulates.
                </param>
      <typeparam name="T">
                    The type of the parameter of the method that this delegate encapsulates.
                </typeparam>
    </member>
    <member name="T:System.Activator">
      <summary>
                    Contains methods to create types of objects locally. This class cannot be inherited. 
                </summary>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>
                    Creates an instance of the type designated by the specified generic type parameter.
                </summary>
      <returns>
                    A reference to the newly created object.
                </returns>
      <typeparam name="T">
                    The type to create.
                </typeparam>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>
                    Creates an instance of the specified type by using that type's default constructor.
                </summary>
      <returns>
                    A reference to the newly created object.
                </returns>
      <param name="type">
                    The type of object to create. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a RuntimeType. 
                
                    -or-
                <paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true).
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" />.
                
                    -or- 
                
                    Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported. 
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    The constructor being called throws an exception. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have permission to call this constructor. 
                </exception>
      <exception cref="T:System.MemberAccessException">
                    Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. 
                </exception>
      <exception cref="T:System.MissingMethodException">
                    No matching public constructor was found. 
                </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. 
                </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type. 
                </exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>
                    Creates an instance of the specified type by using the constructor that best matches the specified parameters.
                </summary>
      <returns>
                    A reference to the newly created object.
                </returns>
      <param name="type">
                    The type of object to create. 
                </param>
      <param name="args">
                    An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a RuntimeType. 
                
                    -or-
                <paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true).
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" />.
                
                    -or- 
                
                    Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported. 
                
                    -or-
                
                    The constructor that best matches <paramref name="args" /> has varargs arguments.
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    The constructor being called throws an exception. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have permission to call this constructor. 
                </exception>
      <exception cref="T:System.MemberAccessException">
                    Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. 
                </exception>
      <exception cref="T:System.MissingMethodException">
                    No matching public constructor was found. 
                </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. 
                </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type. 
                </exception>
    </member>
    <member name="T:System.AppDomain">
      <summary>
                    Represents an application domain, which is an isolated environment where applications execute. This class cannot be inherited.
                </summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>[SECURITY CRITICAL] 
                    Occurs when the resolution of an assembly fails.
                </summary>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>
                    Gets the current application domain for the current <see cref="T:System.Threading.Thread" />.
                </summary>
      <returns>
                    The current application domain.
                </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>
                    Defines a dynamic assembly with the specified name and access mode.
                </summary>
      <returns>
                    The dynamic assembly created.
                </returns>
      <param name="name">
                    The unique identity of the dynamic assembly. 
                </param>
      <param name="access">
                    The access mode for the dynamic assembly. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The Name property of <paramref name="name" /> is null.
                
                    -or- 
                
                    The Name property of <paramref name="name" /> begins with white space, or contains a forward or backward slash. 
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                    The operation is attempted on an unloaded application domain. 
                </exception>
    </member>
    <member name="P:System.AppDomain.DomainManager">
      <summary>[SECURITY CRITICAL] 
                    Gets the domain manager that was provided by the host when the application domain was initialized.
                </summary>
      <returns>
                    An <see cref="T:System.AppDomainManager" /> object that represents the domain manager provided by the host when the application domain was initialized, or null if no domain manager was provided.
                </returns>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Executes an assembly given its display name.
                </summary>
      <returns>
                    The value returned by the entry point of the assembly.
                </returns>
      <param name="assemblyName">
                    The display name of the assembly. See <see cref="P:System.Reflection.Assembly.FullName" />.
                </param>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>
                    Gets the friendly name of this application domain.
                </summary>
      <returns>
                    The friendly name of this application domain.
                </returns>
      <exception cref="T:System.AppDomainUnloadedException">
                    The operation is attempted on an unloaded application domain. 
                </exception>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Gets the value stored in the current application domain for the specified name.
                </summary>
      <returns>
                    The value of the <paramref name="name" /> property.
                </returns>
      <param name="name">
                    The name of a predefined application domain property, or the name of an application domain property you have defined. 
                </param>
    </member>
    <member name="M:System.AppDomain.GetType">
      <summary>
                    Gets the type of the current instance.
                </summary>
      <returns>
                    A <see cref="T:System.Type" />.
                </returns>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>[SECURITY CRITICAL] 
                    Assigns the specified value to the specified application domain property.
                </summary>
      <param name="name">
                    The name of a user-defined application domain property to create or change. 
                </param>
      <param name="data">
                    The value of the property. 
                </param>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>
                    Obtains a string representation that includes the friendly name of the application domain and any context policies.
                </summary>
      <returns>
                    A string formed by concatenating the literal string "Name:", the friendly name of the application domain, and either string representations of the context policies or the string "There are no context policies." 
                </returns>
      <exception cref="T:System.AppDomainUnloadedException">
                    The application domain represented by the current <see cref="T:System.AppDomain" /> has been unloaded.
                </exception>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>[SECURITY CRITICAL] 
                    Occurs when an exception is not caught.
                </summary>
    </member>
    <member name="T:System.AppDomainManager">
      <summary>[SECURITY CRITICAL] 
                    Provides a managed equivalent of an unmanaged host.
                </summary>
    </member>
    <member name="M:System.AppDomainManager.#ctor">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.AppDomainManager" /> class. 
                </summary>
    </member>
    <member name="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
      <summary>[SECURITY CRITICAL] 
                    Returns a <see cref="T:System.Boolean" /> indicating whether the specified operation is allowed in the application domain.
                </summary>
      <returns>true if the host allows the operation specified by <paramref name="state" /> to be performed in the application domain; otherwise false.
                </returns>
      <param name="state">
                    A subclass of <see cref="T:System.Security.SecurityState" /> that identifies the operation whose security status is requested. 
                </param>
    </member>
    <member name="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
      <summary>[SECURITY CRITICAL] 
                    Initializes the new application domain.
                </summary>
      <param name="appDomainInfo">
                    An <see cref="T:System.AppDomainSetup" /> object that contains application domain initialization information.
                </param>
    </member>
    <member name="T:System.AppDomainSetup">
      <summary>
                    Represents assembly binding information that can be added to an instance of <see cref="T:System.AppDomain" />.
                </summary>
    </member>
    <member name="M:System.AppDomainSetup.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.AppDomainSetup" /> class.
                </summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationBase">
      <summary>[SECURITY CRITICAL] 
                    Gets or sets the name of the directory containing the application.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the name of the application base directory.
                </returns>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationName">
      <summary>
                    Gets or sets the name of the application.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that is the name of the application.
                </returns>
    </member>
    <member name="P:System.AppDomainSetup.LoaderOptimization">
      <summary>
                    Gets the optimization policy used to load an executable.
                </summary>
      <returns>
                    The optimization policy for the application domain.
                </returns>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>
                    The exception that is thrown when an attempt is made to access an unloaded application domain. 
                </summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" /> class.
                </summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.ArgumentException">
      <summary>
                    The exception that is thrown when one of the arguments provided to a method is not valid.
                </summary>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArgumentException" /> class.
                </summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and the name of the parameter that causes this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="paramName">
                    The name of the parameter that caused the current exception. 
                </param>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>
                    Gets the error message and the parameter name, or only the error message if no parameter name is set.
                </summary>
      <returns>
                    A text string describing the details of the exception. The value of this property takes one of two forms: 
                
                    Condition 
                
                    Value 
                
                    The <paramref name="paramName" /> is a null reference (Nothing in Visual Basic) or of zero length. 
                
                    The <paramref name="message" /> string passed to the constructor. 
                
                    The <paramref name="paramName" /> is not a null reference (Nothing in Visual Basic) and it has a length greater than zero. 
                
                    The <paramref name="message" /> string appended with the name of the invalid parameter. 
                </returns>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>
                    The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument. 
                </summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class.
                </summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with the name of the parameter that causes this exception.
                </summary>
      <param name="paramName">
                    The name of the parameter that caused the exception. 
                </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with a specified error message and the exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for this exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
                </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>
                    Initializes an instance of the <see cref="T:System.ArgumentNullException" /> class with a specified error message and the name of the parameter that causes this exception.
                </summary>
      <param name="paramName">
                    The name of the parameter that caused the exception. 
                </param>
      <param name="message">
                    A message that describes the error. 
                </param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>
                    The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
                </summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class.
                </summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with the name of the parameter that causes this exception.
                </summary>
      <param name="paramName">
                    The name of the parameter that causes this exception. 
                </param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with a specified error message and the exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for this exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
                </param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with a specified error message and the name of the parameter that causes this exception.
                </summary>
      <param name="paramName">
                    The name of the parameter that caused the exception. 
                </param>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>
                    Gets the error message and the string representation of the invalid argument value, or only the error message if the argument value is null.
                </summary>
      <returns>
                    The text message for this exception. The value of this property takes one of two forms, as follows.
                
                    Condition 
                
                    Value 
                
                    The <paramref name="actualValue" /> is null. 
                
                    The <paramref name="message" /> string passed to the constructor. 
                
                    The <paramref name="actualValue" /> is not null. 
                
                    The <paramref name="message" /> string appended with the string representation of the invalid argument value. 
                </returns>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>
                    The exception that is thrown for errors in an arithmetic, casting, or conversion operation.
                </summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class.
                </summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with a specified error message.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. 
                </param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.Array">
      <summary>
                    Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.
                </summary>
    </member>
    <member name="M:System.Array.AsReadOnly``1(``0[])">
      <summary>
                    Returns a read-only wrapper for the specified array.
                </summary>
      <returns>
                    A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the specified array.
                </returns>
      <param name="array">
                    The one-dimensional, zero-based array to wrap in a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />  wrapper. 
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>
                    Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the specified <see cref="T:System.Collections.IComparer" /> interface.
                </summary>
      <returns>
                    The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).
                </returns>
      <param name="array">
                    The sorted one-dimensional <see cref="T:System.Array" /> to search.
                </param>
      <param name="index">
                    The starting index of the range to search.
                </param>
      <param name="length">
                    The length of the range to search.
                </param>
      <param name="value">
                    The object to search for.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.
                
                    -or- 
                null to use the <see cref="T:System.IComparable" /> implementation of each element.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.
                
                    -or-
                <paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.
                </exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>
                    Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a specific element, using the <see cref="T:System.IComparable" /> interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.
                </summary>
      <returns>
                    The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).
                </returns>
      <param name="array">
                    The sorted one-dimensional <see cref="T:System.Array" /> to search.
                </param>
      <param name="value">
                    The object to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.
                </exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>
                    Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified value.
                </summary>
      <returns>
                    The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).
                </returns>
      <param name="array">
                    The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. 
                </param>
      <param name="index">
                    The starting index of the range to search.
                </param>
      <param name="length">
                    The length of the range to search.
                </param>
      <param name="value">
                    The object to search for.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.
                
                    -or-
                <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
                    Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.
                </summary>
      <returns>
                    The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).
                </returns>
      <param name="array">
                    The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. 
                </param>
      <param name="index">
                    The starting index of the range to search.
                </param>
      <param name="length">
                    The length of the range to search.
                </param>
      <param name="value">
                    The object to search for.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.
                
                    -or- 
                null to use the <see cref="T:System.IComparable`1" /> implementation of each element.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.
                
                    -or-
                <paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>
                    Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a specific element, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.
                </summary>
      <returns>
                    The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).
                </returns>
      <param name="array">
                    The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. 
                </param>
      <param name="value">
                    The object to search for.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>
                    Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a value using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.
                </summary>
      <returns>
                    The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).
                </returns>
      <param name="array">
                    The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.  
                </param>
      <param name="value">
                    The object to search for.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.
                
                    -or- 
                null to use the <see cref="T:System.IComparable`1" /> implementation of each element.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>
                    Sets a range of elements in the <see cref="T:System.Array" /> to zero, to false, or to null, depending on the element type.
                </summary>
      <param name="array">
                    The <see cref="T:System.Array" /> whose elements need to be cleared.
                </param>
      <param name="index">
                    The starting index of the range of elements to clear.
                </param>
      <param name="length">
                    The number of elements to clear.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                
                    -or-
                
                    The sum of <paramref name="index" /> and <paramref name="length" /> is greater than the size of the <see cref="T:System.Array" />.
                </exception>
    </member>
    <member name="M:System.Array.Clone">
      <summary>
                    Creates a shallow copy of the <see cref="T:System.Array" />.
                </summary>
      <returns>
                    A shallow copy of the <see cref="T:System.Array" />.
                </returns>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>
                    Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element. The length is specified as a 32-bit integer.
                </summary>
      <param name="sourceArray">
                    The <see cref="T:System.Array" /> that contains the data to copy.
                </param>
      <param name="destinationArray">
                    The <see cref="T:System.Array" /> that receives the data.
                </param>
      <param name="length">
                    A 32-bit integer that represents the number of elements to copy.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is null.
                
                    -or-
                <paramref name="destinationArray" /> is null.
                </exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.
                </exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.
                </exception>
      <exception cref="T:System.InvalidCastException">
                    At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.
                
                    -or-
                <paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.
                </exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>
                    Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
                </summary>
      <param name="sourceArray">
                    The <see cref="T:System.Array" /> that contains the data to copy.
                </param>
      <param name="sourceIndex">
                    A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.
                </param>
      <param name="destinationArray">
                    The <see cref="T:System.Array" /> that receives the data.
                </param>
      <param name="destinationIndex">
                    A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.
                </param>
      <param name="length">
                    A 32-bit integer that represents the number of elements to copy.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is null.
                
                    -or-
                <paramref name="destinationArray" /> is null.
                </exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.
                </exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.
                </exception>
      <exception cref="T:System.InvalidCastException">
                    At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.
                
                    -or-
                <paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.
                
                    -or-
                <paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.
                </exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies all the elements of the current one-dimensional <see cref="T:System.Array" /> to the specified one-dimensional <see cref="T:System.Array" /> starting at the specified destination <see cref="T:System.Array" /> index. The index is specified as a 32-bit integer.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the current <see cref="T:System.Array" />.
                </param>
      <param name="index">
                    A 32-bit integer that represents the index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" /> and the source <see cref="T:System.Array" /> has a length greater than 0.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Array" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                </exception>
      <exception cref="T:System.ArrayTypeMismatchException">
                    The type of the source <see cref="T:System.Array" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
      <exception cref="T:System.RankException">
                    The source <see cref="T:System.Array" /> is multidimensional.
                </exception>
      <exception cref="T:System.InvalidCastException">
                    At least one element in the source <see cref="T:System.Array" /> cannot be cast to the type of destination <paramref name="array" />.
                </exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>
                    Creates a one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and length, with zero-based indexing.
                </summary>
      <returns>
                    A new one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length, using zero-based indexing.
                </returns>
      <param name="elementType">
                    The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.
                </param>
      <param name="length">
                    The size of the <see cref="T:System.Array" /> to create.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.
                
                    -or-
                <paramref name="elementType" /> is an open generic type.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.
                </exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>
                    Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.
                </summary>
      <returns>
                    A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.
                </returns>
      <param name="elementType">
                    The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.
                </param>
      <param name="lengths">
                    An array of 32-bit integers that represent the size of each dimension of the <see cref="T:System.Array" /> to create.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is null.
                
                    -or-
                <paramref name="lengths" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.
                
                    -or-
                
                    The <paramref name="lengths" /> array contains less than one element.
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported. 
                
                    -or-
                <paramref name="elementType" /> is an open generic type.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    Any value in <paramref name="lengths" /> is less than zero.
                </exception>
    </member>
    <member name="M:System.Array.ForEach``1(``0[],System.Action{``0})">
      <summary>
                    Performs the specified action on each element of the specified array.
                </summary>
      <param name="array">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> on whose elements the action is to be performed.
                </param>
      <param name="action">
                    The <see cref="T:System.Action`1" /> to perform on each element of <paramref name="array" />.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                
                    -or-
                <paramref name="action" /> is null.
                </exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>
                    Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.
                </returns>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>
                    Gets a 32-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.
                </summary>
      <returns>
                    A 32-bit integer that represents the number of elements in the specified dimension.
                </returns>
      <param name="dimension">
                    A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.
                </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.
                
                    -or-
                <paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.
                </exception>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>
                    Gets the lower bound of the specified dimension in the <see cref="T:System.Array" />.
                </summary>
      <returns>
                    The lower bound of the specified dimension in the <see cref="T:System.Array" />.
                </returns>
      <param name="dimension">
                    A zero-based dimension of the <see cref="T:System.Array" /> whose lower bound needs to be determined.
                </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.
                
                    -or-
                <paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.
                </exception>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>
                    Gets the upper bound of the specified dimension in the <see cref="T:System.Array" />.
                </summary>
      <returns>
                    The upper bound of the specified dimension in the <see cref="T:System.Array" />.
                </returns>
      <param name="dimension">
                    A zero-based dimension of the <see cref="T:System.Array" /> whose upper bound needs to be determined.
                </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.
                
                    -or-
                <paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.
                </exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>
                    Gets the value at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 32-bit integer.
                </summary>
      <returns>
                    The value at the specified position in the one-dimensional <see cref="T:System.Array" />.
                </returns>
      <param name="index">
                    A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to get.
                </param>
      <exception cref="T:System.ArgumentException">
                    The current <see cref="T:System.Array" /> does not have exactly one dimension.
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.
                </exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>
                    Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 32-bit integers.
                </summary>
      <returns>
                    The value at the specified position in the multidimensional <see cref="T:System.Array" />.
                </returns>
      <param name="indices">
                    A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array" /> element to get.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                    Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.
                </exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>
                    Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.
                </summary>
      <returns>
                    The index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, the lower bound of the array minus 1.
                </returns>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> to search.
                </param>
      <param name="value">
                    The object to locate in <paramref name="array" />.
                </param>
      <param name="startIndex">
                    The starting index of the search.
                </param>
      <param name="count">
                    The number of elements in the section to search.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.
                
                    -or-
                <paramref name="count" /> is less than zero.
                
                    -or-
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.
                </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.
                </exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>
                    Searches for the specified object and returns the index of the first occurrence within the entire <see cref="T:System.Array" />.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.
                </returns>
      <param name="array">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> to search.
                </param>
      <param name="value">
                    The object to locate in <paramref name="array" />.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>
                    Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, –1.
                </returns>
      <param name="array">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> to search.
                </param>
      <param name="value">
                    The object to locate in <paramref name="array" />.
                </param>
      <param name="startIndex">
                    The zero-based starting index of the search.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.
                </exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>
                    Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, –1.
                </returns>
      <param name="array">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> to search.
                </param>
      <param name="value">
                    The object to locate in <paramref name="array" />.
                </param>
      <param name="startIndex">
                    The zero-based starting index of the search.
                </param>
      <param name="count">
                    The number of elements in the section to search.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.
                
                    -or-
                <paramref name="count" /> is less than zero.
                
                    -or-
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.
                </exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>
                    Initializes every element of the value-type <see cref="T:System.Array" /> by calling the default constructor of the value type.
                </summary>
    </member>
    <member name="P:System.Array.IsFixedSize">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Array" /> has a fixed size.
                </summary>
      <returns>
                    This property is always true for all arrays.
                </returns>
    </member>
    <member name="P:System.Array.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Array" /> is read-only.
                </summary>
      <returns>
                    This property is always false for all arrays.
                </returns>
    </member>
    <member name="P:System.Array.IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Array" /> is synchronized (thread safe).
                </summary>
      <returns>
                    This property is always false for all arrays.
                </returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>
                    Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.
                </summary>
      <returns>
                    The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.
                </returns>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> to search.
                </param>
      <param name="value">
                    The object to locate in <paramref name="array" />.
                </param>
      <param name="startIndex">
                    The starting index of the backward search.
                </param>
      <param name="count">
                    The number of elements in the section to search.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.
                
                    -or-
                <paramref name="count" /> is less than zero.
                
                    -or-
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.
                </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.
                </exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>
                    Searches for the specified object and returns the index of the last occurrence within the entire <see cref="T:System.Array" />.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.
                </returns>
      <param name="array">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> to search.
                </param>
      <param name="value">
                    The object to locate in <paramref name="array" />.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>
                    Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, –1.
                </returns>
      <param name="array">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> to search.
                </param>
      <param name="value">
                    The object to locate in <paramref name="array" />.
                </param>
      <param name="startIndex">
                    The zero-based starting index of the backward search.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.
                </exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>
                    Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, –1.
                </returns>
      <param name="array">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> to search.
                </param>
      <param name="value">
                    The object to locate in <paramref name="array" />.
                </param>
      <param name="startIndex">
                    The zero-based starting index of the backward search.
                </param>
      <param name="count">
                    The number of elements in the section to search.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.
                
                    -or-
                <paramref name="count" /> is less than zero.
                
                    -or-
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>
                    Gets a 32-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.
                </summary>
      <returns>
                    A 32-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.
                </returns>
    </member>
    <member name="P:System.Array.Rank">
      <summary>
                    Gets the rank (number of dimensions) of the <see cref="T:System.Array" />.
                </summary>
      <returns>
                    The rank (number of dimensions) of the <see cref="T:System.Array" />.
                </returns>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>
                    Changes the size of an array to the specified new size.
                </summary>
      <param name="array">
                    The one-dimensional, zero-based array to resize, or null to create a new array with the specified size.
                </param>
      <param name="newSize">
                    The size of the new array.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> is less than zero.
                </exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>
                    Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array" />.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> to reverse.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional. 
                </exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>
                    Reverses the sequence of the elements in a range of elements in the one-dimensional <see cref="T:System.Array" />.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> to reverse.
                </param>
      <param name="index">
                    The starting index of the section to reverse.
                </param>
      <param name="length">
                    The number of elements in the section to reverse.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.
                </exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>
                    Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 32-bit integer.
                </summary>
      <param name="value">
                    The new value for the specified element.
                </param>
      <param name="index">
                    A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to set.
                </param>
      <exception cref="T:System.ArgumentException">
                    The current <see cref="T:System.Array" /> does not have exactly one dimension.
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.
                </exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>
                    Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 32-bit integers.
                </summary>
      <param name="value">
                    The new value for the specified element.
                </param>
      <param name="indices">
                    A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                    Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.
                </exception>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>
                    Sorts the elements in an entire one-dimensional <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> to sort.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.
                </exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>
                    Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.
                </summary>
      <param name="keys">
                    The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.
                </param>
      <param name="items">
                    The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.
                
                    -or-
                null to sort only the <paramref name="keys" /><see cref="T:System.Array" />.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.
                
                    -or-
                null to use the <see cref="T:System.IComparable" /> implementation of each element.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.
                </exception>
      <exception cref="T:System.RankException">
                    The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.
                
                    -or-
                
                    The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.
                
                    -or-
                <paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />. 
                
                    -or-
                
                    The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.
                </exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>
                    Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.
                </summary>
      <param name="keys">
                    The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.
                </param>
      <param name="items">
                    The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.
                
                    -or-
                null to sort only the <paramref name="keys" /><see cref="T:System.Array" />.
                </param>
      <param name="index">
                    The starting index of the range to sort.
                </param>
      <param name="length">
                    The number of elements in the range to sort.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.
                
                    -or-
                null to use the <see cref="T:System.IComparable" /> implementation of each element.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.
                </exception>
      <exception cref="T:System.RankException">
                    The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.
                
                    -or-
                
                    The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.
                
                    -or-
                <paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />.
                
                    -or-
                <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.
                
                    -or-
                <paramref name="items" /> is not null, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />. 
                
                    -or-
                
                    The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.
                </exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>
                    Sorts the elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> to sort.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.
                
                    -or-
                null to use the <see cref="T:System.IComparable" /> implementation of each element.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.
                </exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>
                    Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> to sort.
                </param>
      <param name="index">
                    The starting index of the range to sort.
                </param>
      <param name="length">
                    The number of elements in the range to sort.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.
                
                    -or-
                null to use the <see cref="T:System.IComparable" /> implementation of each element.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />. 
                
                    -or-
                
                    The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.
                </exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>
                    Sorts the elements in an entire <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.
                </summary>
      <param name="array">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>
                    Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.
                </summary>
      <param name="array">
                    The one-dimensional, zero-base <see cref="T:System.Array" /> to sort
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.
                </exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>
                    Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Comparison`1" />.
                </summary>
      <param name="array">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> to sort
                </param>
      <param name="comparison">
                    The <see cref="T:System.Comparison`1" /> to use when comparing elements.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                
                    -or-
                <paramref name="comparison" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The implementation of <paramref name="comparison" /> caused an error during the sort. For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.
                </exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>
                    Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.
                </summary>
      <param name="array">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> to sort
                </param>
      <param name="index">
                    The starting index of the range to sort.
                </param>
      <param name="length">
                    The number of elements in the range to sort.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>
                    Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.
                </summary>
      <param name="array">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.
                </param>
      <param name="index">
                    The starting index of the range to sort.
                </param>
      <param name="length">
                    The number of elements in the range to sort.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.
                </param>
      <typeparam name="T">
                    The type of the elements of the array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />. 
                
                    -or-
                
                    The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <summary>
                    Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.
                </summary>
      <param name="keys">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. 
                </param>
      <param name="items">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.
                </param>
      <typeparam name="TKey">
                    The type of the elements of the key array.
                </typeparam>
      <typeparam name="TValue">
                    The type of the elements of the items array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.
                
                    -or-
                <paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <summary>
                    Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.
                </summary>
      <param name="keys">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. 
                </param>
      <param name="items">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.
                </param>
      <typeparam name="TKey">
                    The type of the elements of the key array.
                </typeparam>
      <typeparam name="TValue">
                    The type of the elements of the items array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.
                
                    -or-
                <paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />.
                
                    -or-
                
                    The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <summary>
                    Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.
                </summary>
      <param name="keys">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. 
                </param>
      <param name="items">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.
                </param>
      <param name="index">
                    The starting index of the range to sort.
                </param>
      <param name="length">
                    The number of elements in the range to sort.
                </param>
      <typeparam name="TKey">
                    The type of the elements of the key array.
                </typeparam>
      <typeparam name="TValue">
                    The type of the elements of the items array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.
                
                    -or-
                <paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />.
                
                    -or-
                <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.
                
                    -or-
                <paramref name="items" /> is not null, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>
                    Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.
                </summary>
      <param name="keys">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. 
                </param>
      <param name="items">
                    The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.
                </param>
      <param name="index">
                    The starting index of the range to sort.
                </param>
      <param name="length">
                    The number of elements in the range to sort.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.
                </param>
      <typeparam name="TKey">
                    The type of the elements of the key array.
                </typeparam>
      <typeparam name="TValue">
                    The type of the elements of the items array.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.
                
                    -or-
                <paramref name="length" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.
                
                    -or-
                <paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />.
                
                    -or-
                <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.
                
                    -or-
                <paramref name="items" /> is not null, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />. 
                
                    -or-
                
                    The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.
                </exception>
    </member>
    <member name="P:System.Array.SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Array" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Array" />.
                </returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Array" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Array" />.
                </returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>
                    Implements <see cref="M:System.Collections.IList.Add(System.Object)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.
                </summary>
      <returns>
                    An exception is always thrown.
                </returns>
      <param name="value">
                    The object to be added to the <see cref="T:System.Array" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>
                    Sets all elements in the <see cref="T:System.Array" /> to zero, to false, or to null, depending on the element type.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Array" /> is read-only.
                </exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>
                    Determines whether an element is in the <see cref="T:System.Array" />.
                </summary>
      <returns>true if <paramref name="value" /> is found in the <see cref="T:System.Array" />; otherwise, false.
                </returns>
      <param name="value">
                    The object to locate in the <see cref="T:System.Array" />. The element to locate can be null for reference types.
                </param>
      <exception cref="T:System.RankException">
                    The current <see cref="T:System.Array" /> is multidimensional.
                </exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    Searches for the specified object and returns the index of the first occurrence within the current one-dimensional instance.
                </summary>
      <returns>
                    The index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Array" />, if found; otherwise, the lower bound of the <see cref="T:System.Array" /> minus 1.
                </returns>
      <param name="value">
                    The object to locate in the current <see cref="T:System.Array" />.
                </param>
      <exception cref="T:System.RankException">
                    The current <see cref="T:System.Array" /> is multidimensional.
                </exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    Implements <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.
                </summary>
      <param name="index">
                    The index at which <paramref name="value" /> should be inserted.
                </param>
      <param name="value">
                    The object to insert.
                </param>
      <exception cref="T:System.NotSupportedException">
                    In all cases.
                </exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The index of the element to get or set.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or-
                <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ICollection.Count" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The current <see cref="T:System.Array" /> does not have exactly one dimension.
                </exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>
                    Implements <see cref="M:System.Collections.IList.Remove(System.Object)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.
                </summary>
      <param name="value">
                    The object to remove from the <see cref="T:System.Array" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
                    Implements <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.
                </summary>
      <param name="index">
                    The index of the element to remove.
                </param>
      <exception cref="T:System.NotSupportedException">
                    In all cases.
                </exception>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>
                    Delimits a section of a one-dimensional array.
                </summary>
      <typeparam name="T">
                    The type of the elements in the array segment.
                </typeparam>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArraySegment`1" /> class that delimits all the elements in the specified array.
                </summary>
      <param name="array">
                    The array to wrap.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArraySegment`1" /> class that delimits the specified range of the elements in the specified array.
                </summary>
      <param name="array">
                    The array containing the range of elements to delimit.
                </param>
      <param name="offset">
                    The zero-based index of the first element in the range.
                </param>
      <param name="count">
                    The number of elements in the range.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> do not specify a valid range in <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>
                    Gets the original array containing the range of elements that the array segment delimits.
                </summary>
      <returns>
                    The original array that was passed to the constructor, and that contains the range delimited by the <see cref="T:System.ArraySegment`1" />.
                </returns>
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>
                    Gets the number of elements in the range delimited by the array segment.
                </summary>
      <returns>
                    The number of elements in the range delimited by the <see cref="T:System.ArraySegment`1" />.
                </returns>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>
                    Determines whether the specified <see cref="T:System.ArraySegment`1" /> structure is equal to the current instance.
                </summary>
      <returns>true if the specified <see cref="T:System.ArraySegment`1" /> structure is equal to the current instance; otherwise, false.
                </returns>
      <param name="obj">
                    The <see cref="T:System.ArraySegment`1" /> structure to be compared with the current instance.
                </param>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>
                    Determines whether the specified object is equal to the current instance.
                </summary>
      <returns>true if the specified object is a <see cref="T:System.ArraySegment`1" /> structure and is equal to the current instance; otherwise, false.
                </returns>
      <param name="obj">
                    The object to be compared with the current instance.
                </param>
    </member>
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>
                    Returns the hash code for the current instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>
                    Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.
                </summary>
      <returns>
                    The position of the first element in the range delimited by the <see cref="T:System.ArraySegment`1" />, relative to the start of the original array.
                </returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>
                    Indicates whether two <see cref="T:System.ArraySegment`1" /> structures are equal.
                </summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.
                </returns>
      <param name="a">
                    The <see cref="T:System.ArraySegment`1" /> structure on the left side of the equality operator.
                </param>
      <param name="b">
                    The <see cref="T:System.ArraySegment`1" /> structure on the right side of the equality operator.
                </param>
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>
                    Indicates whether two <see cref="T:System.ArraySegment`1" /> structures are unequal.
                </summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.
                </returns>
      <param name="a">
                    The <see cref="T:System.ArraySegment`1" /> structure on the left side of the inequality operator.
                </param>
      <param name="b">
                    The <see cref="T:System.ArraySegment`1" /> structure on the right side of the inequality operator.
                </param>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>
                    The exception that is thrown when an attempt is made to store an element of the wrong type within an array. 
                </summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class.
                </summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with a specified error message.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. 
                </param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>
                    References a method to be called when a corresponding asynchronous operation is completed.
                </summary>
      <param name="ar">
                    The result of the asynchronous operation. 
                </param>
    </member>
    <member name="T:System.Attribute">
      <summary>
                    Represents the base class for custom attributes.
                </summary>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Attribute" /> class.
                </summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>
                    Returns a value that indicates whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An <see cref="T:System.Object" /> to compare with this instance or null. 
                </param>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>
                    Retrieves a custom attribute applied to a specified assembly. Parameters specify the assembly and the type of the custom attribute to search for.
                </summary>
      <returns>
                    A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one of the requested attributes was found. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>
                    Retrieves a custom attribute applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.
                </summary>
      <returns>
                    A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    This parameter is ignored, and does not affect the operation of this method. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one of the requested attributes was found. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>
                    Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.
                </summary>
      <returns>
                    A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. 
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one of the requested attributes was found. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>
                    Retrieves a custom attribute applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.
                </summary>
      <returns>
                    A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. 
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one of the requested attributes was found. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>
                    Retrieves a custom attribute applied to a module. Parameters specify the module, and the type of the custom attribute to search for.
                </summary>
      <returns>
                    A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one of the requested attributes was found. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>
                    Retrieves a custom attribute applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.
                </summary>
      <returns>
                    A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    This parameter is ignored, and does not affect the operation of this method. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one of the requested attributes was found. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>
                    Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.
                </summary>
      <returns>
                    A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one of the requested attributes was found. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>
                    Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.
                </summary>
      <returns>
                    A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one of the requested attributes was found. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>
                    Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
      <summary>
                    Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an ignored search option.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. 
                </param>
      <param name="inherit">
                    This parameter is ignored, and does not affect the operation of this method. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>
                    Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>
                    Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    This parameter is ignored, and does not affect the operation of this method. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>
                    Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
                    Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. 
                </param>
      <param name="inherit">
                    If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>
                    Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. 
                </param>
      <param name="type">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="type" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>
                    Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. 
                </param>
      <param name="type">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="type" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
      <summary>
                    Retrieves an array of the custom attributes applied to a module. A parameter specifies the module.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
      <summary>
                    Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and an ignored search option.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. 
                </param>
      <param name="inherit">
                    This parameter is ignored, and does not affect the operation of this method. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>
                    Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and the type of the custom attribute to search for.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>
                    Retrieves an array of the custom attributes applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    This parameter is ignored, and does not affect the operation of this method. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>
                    Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method parameter.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>
                    Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and whether to search ancestors of the method parameter.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. 
                </param>
      <param name="inherit">
                    If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>
                    Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>
                    Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.
                </summary>
      <returns>
                    An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.TypeLoadException">
                    A custom attribute type cannot be loaded. 
                </exception>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>
                    Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.
                </summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>
                    Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.
                </summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    This parameter is ignored, and does not affect the operation of this method. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>
                    Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.
                </summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. 
                </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>
                    Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.
                </summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. 
                </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
      <summary>
                    Determines whether any custom attributes of a specified type are applied to a module. Parameters specify the module, and the type of the custom attribute to search for.
                </summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>
                    Determines whether any custom attributes are applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option. 
                </summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    This parameter is ignored, and does not affect the operation of this method. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>
                    Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.
                </summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>
                    Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.
                </summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.
                </returns>
      <param name="element">
                    An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. 
                </param>
      <param name="attributeType">
                    The type, or a base type, of the custom attribute to search for.
                </param>
      <param name="inherit">
                    If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. 
                </exception>
      <exception cref="T:System.ExecutionEngineException">
        <paramref name="element" /> is not a method, constructor, or type. 
                </exception>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
      <summary>
                    When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.
                </summary>
      <returns>true if this instance equals <paramref name="obj" />; otherwise, false.
                </returns>
      <param name="obj">
                    An <see cref="T:System.Object" /> to compare with this instance of <see cref="T:System.Attribute" />. 
                </param>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>
                    Specifies the application elements on which it is valid to apply an attribute.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>
                    Attribute can be applied to an assembly.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>
                    Attribute can be applied to a module.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>
                    Attribute can be applied to a class.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>
                    Attribute can be applied to a structure; that is, a value type.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>
                    Attribute can be applied to an enumeration.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>
                    Attribute can be applied to a constructor.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>
                    Attribute can be applied to a method.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>
                    Attribute can be applied to a property.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>
                    Attribute can be applied to a field.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>
                    Attribute can be applied to an event.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>
                    Attribute can be applied to an interface.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>
                    Attribute can be applied to a parameter.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>
                    Attribute can be applied to a delegate.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>
                    Attribute can be applied to a return value.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>
                    Attribute can be applied to a generic parameter.
                </summary>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>
                    Attribute can be applied to any application element.
                </summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>
                    Specifies the usage of another attribute class. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.AttributeUsageAttribute" /> class with the specified list of <see cref="T:System.AttributeTargets" />, the <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> value, and the <see cref="P:System.AttributeUsageAttribute.Inherited" /> value.
                </summary>
      <param name="validOn">
                    The set of values combined using a bitwise OR operation to indicate which program elements are valid. 
                </param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>
                    Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.
                </summary>
      <returns>true if more than one instance is allowed to be specified; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>
                    Gets or sets a Boolean value indicating whether the indicated attribute can be inherited by derived classes and overriding members.
                </summary>
      <returns>true if the attribute can be inherited by derived classes and overriding members; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>
                    Gets a set of values identifying which program elements that the indicated attribute can be applied to.
                </summary>
      <returns>
                    One or several <see cref="T:System.AttributeTargets" /> values. The default is All.
                </returns>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>
                    The exception that is thrown when the file image of a DLL or an executable program is invalid. 
                </summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class.
                </summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>
                    Gets the error message and the name of the file that caused this exception.
                </summary>
      <returns>
                    A string containing the error message and the name of the file that caused this exception.
                </returns>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>
                    Returns the fully qualified name of this exception and possibly the error message and the name of the inner exception.
                </summary>
      <returns>
                    A string containing the fully qualified name of this exception and possibly the error message and the name of the inner exception.
                </returns>
    </member>
    <member name="T:System.BitConverter">
      <summary>
                    Converts base data types to an array of bytes, and an array of bytes to base data types.
                </summary>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>
                    Returns the specified Boolean value as an array of bytes.
                </summary>
      <returns>
                    An array of bytes with length 1.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>
                    Returns the specified Unicode character value as an array of bytes.
                </summary>
      <returns>
                    An array of bytes with length 2.
                </returns>
      <param name="value">
                    A character to convert. 
                </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>
                    Returns the specified double-precision floating point value as an array of bytes.
                </summary>
      <returns>
                    An array of bytes with length 8.
                </returns>
      <param name="value">
                    The number to convert. 
                </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>
                    Returns the specified 16-bit signed integer value as an array of bytes.
                </summary>
      <returns>
                    An array of bytes with length 2.
                </returns>
      <param name="value">
                    The number to convert. 
                </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>
                    Returns the specified 32-bit signed integer value as an array of bytes.
                </summary>
      <returns>
                    An array of bytes with length 4.
                </returns>
      <param name="value">
                    The number to convert. 
                </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>
                    Returns the specified 64-bit signed integer value as an array of bytes.
                </summary>
      <returns>
                    An array of bytes with length 8.
                </returns>
      <param name="value">
                    The number to convert. 
                </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>
                    Returns the specified single-precision floating point value as an array of bytes.
                </summary>
      <returns>
                    An array of bytes with length 4.
                </returns>
      <param name="value">
                    The number to convert. 
                </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>
                    Returns the specified 16-bit unsigned integer value as an array of bytes.
                </summary>
      <returns>
                    An array of bytes with length 2.
                </returns>
      <param name="value">
                    The number to convert. 
                </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>
                    Returns the specified 32-bit unsigned integer value as an array of bytes.
                </summary>
      <returns>
                    An array of bytes with length 4.
                </returns>
      <param name="value">
                    The number to convert. 
                </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>
                    Returns the specified 64-bit unsigned integer value as an array of bytes.
                </summary>
      <returns>
                    An array of bytes with length 8.
                </returns>
      <param name="value">
                    The number to convert. 
                </param>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>
                    Indicates the byte order ("endianess") in which data is stored in this computer architecture.
                </summary>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>
                    Returns a Boolean value converted from one byte at a specified position in a byte array.
                </summary>
      <returns>true if the byte at <paramref name="startIndex" /> in <paramref name="value" /> is nonzero; otherwise, false.
                </returns>
      <param name="value">
                    An array of bytes. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. 
                </exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>
                    Returns a Unicode character converted from two bytes at a specified position in a byte array.
                </summary>
      <returns>
                    A character formed by two bytes beginning at <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    An array. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. 
                </exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>
                    Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.
                </summary>
      <returns>
                    A double precision floating point number formed by eight bytes beginning at <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    An array of bytes. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. 
                </exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>
                    Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
                </summary>
      <returns>
                    A 16-bit signed integer formed by two bytes beginning at <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    An array of bytes. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. 
                </exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>
                    Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
                </summary>
      <returns>
                    A 32-bit signed integer formed by four bytes beginning at <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    An array of bytes. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. 
                </exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>
                    Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
                </summary>
      <returns>
                    A 64-bit signed integer formed by eight bytes beginning at <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    An array of bytes. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. 
                </exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>
                    Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.
                </summary>
      <returns>
                    A single-precision floating point number formed by four bytes beginning at <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    An array of bytes. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. 
                </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>
                    Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <paramref name="value" />; for example, "7F-2C-4A".
                </returns>
      <param name="value">
                    An array of bytes. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>
                    Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name="value" />; for example, "7F-2C-4A".
                </returns>
      <param name="value">
                    An array of bytes. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. 
                </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name="value" />; for example, "7F-2C-4A".
                </returns>
      <param name="value">
                    An array of bytes. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <param name="length">
                    The number of array elements in <paramref name="value" /> to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.
                
                    -or-
                <paramref name="startIndex" /> is greater than zero and is greater than or equal to the length of <paramref name="value" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The combination of <paramref name="startIndex" /> and <paramref name="length" /> does not specify a position within <paramref name="value" />; that is, the <paramref name="startIndex" /> parameter is greater than the length of <paramref name="value" /> minus the <paramref name="length" /> parameter.
                </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>
                    Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
                </summary>
      <returns>
                    A 16-bit unsigned integer formed by two bytes beginning at <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    The array of bytes. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. 
                </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>
                    Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
                </summary>
      <returns>
                    A 32-bit unsigned integer formed by four bytes beginning at <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    An array of bytes. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. 
                </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>
                    Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
                </summary>
      <returns>
                    A 64-bit unsigned integer formed by the eight bytes beginning at <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    An array of bytes. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. 
                </exception>
    </member>
    <member name="T:System.Boolean">
      <summary>
                    Represents a Boolean value.
                </summary>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>
                    Compares this instance to a specified <see cref="T:System.Boolean" /> object and returns an integer that indicates their relationship to one another.
                </summary>
      <returns>
                    A signed integer that indicates the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Condition 
                
                    Less than zero 
                
                    This instance is false and <paramref name="value" /> is true. 
                
                    Zero 
                
                    This instance and <paramref name="value" /> are equal (either both are true or both are false). 
                
                    Greater than zero 
                
                    This instance is true and <paramref name="value" /> is false. 
                </returns>
      <param name="value">
                    A <see cref="T:System.Boolean" /> object to compare to this instance. 
                </param>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an integer that indicates their relationship to one another.
                </summary>
      <returns>
                    A signed integer that indicates the relative order of this instance and <paramref name="obj" />.
                
                    Return Value 
                
                    Condition 
                
                    Less than zero 
                
                    This instance is false and <paramref name="obj" /> is true. 
                
                    Zero 
                
                    This instance and <paramref name="obj" /> are equal (either both are true or both are false). 
                
                    Greater than zero 
                
                    This instance is true and <paramref name="obj" /> is false.
                
                    -or- 
                <paramref name="obj" /> is null. 
                </returns>
      <param name="obj">
                    An object to compare to this instance, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Boolean" />. 
                </exception>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Boolean" /> object.
                </summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    A <see cref="T:System.Boolean" /> value to compare to this instance.
                </param>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Boolean" /> and has the same value as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare to this instance. 
                </param>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>
                    Represents the Boolean value false as a string. This field is read-only.
                </summary>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Boolean" />.
                </returns>
    </member>
    <member name="M:System.Boolean.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Boolean" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.Boolean" />.
                </returns>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>
                    Converts the specified string representation of a logical value to its <see cref="T:System.Boolean" /> equivalent.
                </summary>
      <returns>true if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.TrueString" />; otherwise, false.
                </returns>
      <param name="value">
                    A string containing the value to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not equivalent to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. 
                </exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. 
                </summary>
      <returns>true or false.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    1 if the value of this instance is true; otherwise, 0.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    You attempt to convert a <see cref="T:System.Boolean" /> value to a <see cref="T:System.Char" /> value. This conversion is not supported.
                </exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    You attempt to convert a <see cref="T:System.Boolean" /> value to a <see cref="T:System.DateTime" /> value. This conversion is not supported.
                </exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />..
                </summary>
      <returns>
                    1 if this instance is true; otherwise, 0.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />..
                </summary>
      <returns>
                    1 if this instance is true; otherwise, 0.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    1 if this instance is true; otherwise, 0.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    1 if this instance is true; otherwise, 0.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    1 if this instance is true; otherwise, 0.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    1 if this instance is true; otherwise, 0.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />..
                </summary>
      <returns>
                    1 if this instance is true; otherwise, 0.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. 
                </summary>
      <returns>
                    An object of the specified type, with a value that is equivalent to the value of this <see cref="T:System.Boolean" /> object.
                </returns>
      <param name="type">
                    The desired type. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. 
                </exception>
      <exception cref="T:System.InvalidCastException">
                    The requested type conversion is not supported. 
                </exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    1 if this instance is true; otherwise, 0.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    1 if this instance is true; otherwise, 0.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    1 if this instance is true; otherwise, 0.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>
                    Converts the value of this instance to its equivalent string representation (either "True" or "False").
                </summary>
      <returns>
        <see cref="F:System.Boolean.TrueString" /> if the value of this instance is true, or <see cref="F:System.Boolean.FalseString" /> if the value of this instance is false.
                </returns>
    </member>
    <member name="M:System.Boolean.ToString(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to its equivalent string representation (either "True" or "False").
                </summary>
      <returns>
        <see cref="F:System.Boolean.TrueString" /> if the value of this instance is true, or <see cref="F:System.Boolean.FalseString" /> if the value of this instance is false.
                </returns>
      <param name="provider">
                    (Reserved) An <see cref="T:System.IFormatProvider" /> object. 
                </param>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>
                    Represents the Boolean value true as a string. This field is read-only.
                </summary>
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>
                    Converts the specified string representation of a logical value to its <see cref="T:System.Boolean" /> equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="value" /> was converted successfully; otherwise, false.
                </returns>
      <param name="value">
                    A string containing the value to convert. 
                </param>
      <param name="result">
                    When this method returns, if the conversion succeeded, contains true if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.TrueString" /> or false if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.FalseString" />. If the conversion failed, contains false. The conversion fails if <paramref name="value" /> is null or is not equivalent to either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="T:System.Buffer">
      <summary>
                    Manipulates arrays of primitive types.
                </summary>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>
                    Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.
                </summary>
      <param name="src">
                    The source buffer. 
                </param>
      <param name="srcOffset">
                    The byte offset into <paramref name="src" />. 
                </param>
      <param name="dst">
                    The destination buffer. 
                </param>
      <param name="dstOffset">
                    The byte offset into <paramref name="dst" />. 
                </param>
      <param name="count">
                    The number of bytes to copy. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> or <paramref name="dst" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> or <paramref name="dst" /> is not an array of primitives.
                
                    -or- 
                
                    The length of <paramref name="src" /> is less than <paramref name="srcOffset" /> plus <paramref name="count" />.
                
                    -or- 
                
                    The length of <paramref name="dst" /> is less than <paramref name="dstOffset" /> plus <paramref name="count" />. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />, <paramref name="dstOffset" />, or <paramref name="count" /> is less than 0. 
                </exception>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>
                    Returns the number of bytes in the specified array.
                </summary>
      <returns>
                    The number of bytes in the array.
                </returns>
      <param name="array">
                    An array. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive. 
                </exception>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>
                    Retrieves the byte at a specified location in a specified array.
                </summary>
      <returns>
                    Returns the <paramref name="index" /> byte in the array.
                </returns>
      <param name="array">
                    An array. 
                </param>
      <param name="index">
                    A location in the array. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is negative or greater than the length of <paramref name="array" />. 
                </exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>
                    Assigns a specified value to a byte at a particular location in a specified array.
                </summary>
      <param name="array">
                    An array. 
                </param>
      <param name="index">
                    A location in the array. 
                </param>
      <param name="value">
                    A value to assign. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is negative or greater than the length of <paramref name="array" />. 
                </exception>
    </member>
    <member name="T:System.Byte">
      <summary>
                    Represents an 8-bit unsigned integer.
                </summary>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>
                    Compares this instance to a specified 8-bit unsigned integer and returns an indication of their relative values.
                </summary>
      <returns>
                    A signed integer that indicates the relationship of this instance to <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />. 
                </returns>
      <param name="value">
                    An 8-bit unsigned integer to compare. 
                </param>
    </member>
    <member name="M:System.Byte.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an indication of their relative values.
                </summary>
      <returns>
                    A signed integer that indicates the relationship of this instance to <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Byte" />. 
                </exception>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>
                    Returns a value indicating whether this instance and a specified <see cref="T:System.Byte" /> object represent the same value.
                </summary>
      <returns>true if <paramref name="obj" /> is equal to this instance; otherwise, false.
                </returns>
      <param name="obj">
                    A <see cref="T:System.Byte" /> object to compare to this instance.
                </param>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Byte" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with this instance, or null. 
                </param>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Byte" />.
                </returns>
    </member>
    <member name="M:System.Byte.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Byte" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.Byte" />.
                </returns>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>
                    Represents the largest possible value of a <see cref="T:System.Byte" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>
                    Represents the smallest possible value of a <see cref="T:System.Byte" />. This field is constant.
                </summary>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>
                    Converts the string representation of a number to its <see cref="T:System.Byte" /> equivalent.
                </summary>
      <returns>
                    The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
                    Converts the string representation of a number in a specified style to its <see cref="T:System.Byte" /> equivalent.
                </summary>
      <returns>
                    The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                
                    -or-
                <paramref name="s" /> includes non-zero fractional digits.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent.
                </summary>
      <returns>
                    The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific information about the format of <paramref name="s" />. If <paramref name="provider" /> is null, the thread current culture is used. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Byte" /> equivalent.
                </summary>
      <returns>
                    The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" />  style.
                </param>
      <param name="provider">
                    An object that supplies culture-specific parsing information about <paramref name="s" />. If <paramref name="provider" /> is null, the current thread culture is used.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. 
                </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Char" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Decimal" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Double" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.SByte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Single" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to <paramref name="type" />.
                </returns>
      <param name="type">
                    The type to which to convert this <see cref="T:System.Byte" /> value. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. 
                </exception>
      <exception cref="T:System.InvalidCastException">
                    The requested type conversion is not supported. 
                </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>
                    Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this object, which consists of a sequence of digits that range from 0 to 9 with no leading zeroes.
                </returns>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>
                    Converts the numeric value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified culture-specific formatting information.
                </summary>
      <returns>
                    The string representation of the value of this object in the format specified by the <paramref name="provider" /> parameter.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>
                    Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified format.
                </summary>
      <returns>
                    The string representation of the current <see cref="T:System.Byte" /> object, formatted as specified by the <paramref name="format" /> parameter.
                </returns>
      <param name="format">
                    A numeric format string.
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.
                </exception>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified format and culture-specific formatting information.
                </summary>
      <returns>
                    The string representation of the current <see cref="T:System.Byte" /> object, formatted as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.
                </returns>
      <param name="format">
                    A standard or custom numeric format string.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information.
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.
                </exception>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>
                    Tries to convert the string representation of a number to its <see cref="T:System.Byte" /> equivalent, and returns a value that indicates whether the conversion succeeded.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false. 
                </returns>
      <param name="s">
                    A string that contains a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.
                </param>
      <param name="result">
                    When this method returns, contains the <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.
                </param>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is null, the thread current culture is used. 
                </param>
      <param name="result">
                    When this method returns, contains the 8-bit unsigned integer value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>
                    The exception that is thrown when an attempt to unload an application domain fails.
                </summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class.
                </summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class with a specified error message.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. 
                </param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.Char">
      <summary>
                    Represents a Unicode character.
                </summary>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>
                    Compares this instance to a specified <see cref="T:System.Char" /> object and returns an integer that indicates whether this instance precedes, follows, or has the same position in the sort order as the specified <see cref="T:System.Char" /> value.
                </summary>
      <returns>
                    A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance precedes <paramref name="value" />. 
                
                    Zero 
                
                    This instance has the same position in the sort order as <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance follows <paramref name="value" />. 
                </returns>
      <param name="value">
                    A <see cref="T:System.Char" /> object to compare. 
                </param>
    </member>
    <member name="M:System.Char.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an integer that indicates whether this instance precedes, follows, or has the same position in the sort order as the specified object.
                </summary>
      <returns>
                    A signed number that indicates the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance precedes <paramref name="value" />. 
                
                    Zero 
                
                    This instance has the same position in the sort order as <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is follows <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare this instance to, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Char" /> object. 
                </exception>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>
                    Returns a value indicating whether this instance is equal to the specified <see cref="T:System.Char" /> object.
                </summary>
      <returns>true if the <paramref name="value" /> parameter equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    A <see cref="T:System.Char" /> object to compare to this instance. 
                </param>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with this instance or null. 
                </param>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>
                    Converts the specified numeric Unicode character to a double-precision floating point number.
                </summary>
      <returns>
                    The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>
                    Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.
                </summary>
      <returns>
                    The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.
                </returns>
      <param name="s">
                    A <see cref="T:System.String" />. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.Char" />.
                </returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.Char)">
      <summary>
                    Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.
                </summary>
      <returns>
                    A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.String,System.Int32)">
      <summary>
                    Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.
                </summary>
      <returns>
                    A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.
                </returns>
      <param name="s">
                    A <see cref="T:System.String" />. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>
                    Indicates whether the specified Unicode character is categorized as a control character.
                </summary>
      <returns>true if <paramref name="c" /> is a control character; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string is categorized as a control character.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>
                    Indicates whether the specified Unicode character is categorized as a decimal digit.
                </summary>
      <returns>true if <paramref name="c" /> is a decimal digit; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, false.
                </returns>
      <param name="s">
                    A <see cref="T:System.String" />. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>
                    Indicates whether the specified Unicode character is categorized as an alphabetic letter.
                </summary>
      <returns>true if <paramref name="c" /> is an alphabetic letter; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string is categorized as an alphabetic character.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is an alphabetic character; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>
                    Indicates whether the specified Unicode character is categorized as an alphabetic letter or a decimal digit.
                </summary>
      <returns>true if <paramref name="c" /> is an alphabetic letter or a decimal digit; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string is categorized as an alphabetic character or a decimal digit.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is an alphabetic character or a decimal digit; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>
                    Indicates whether the specified Unicode character is categorized as a lowercase letter.
                </summary>
      <returns>true if <paramref name="c" /> is a lowercase letter; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>
                    Indicates whether the specified Unicode character is categorized as a number.
                </summary>
      <returns>true if <paramref name="c" /> is a number; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string is categorized as a number.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>
                    Indicates whether the specified Unicode character is categorized as a punctuation mark.
                </summary>
      <returns>true if <paramref name="c" /> is a punctuation mark; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>
                    Indicates whether the specified Unicode character is categorized as a separator character.
                </summary>
      <returns>true if <paramref name="c" /> is a separator character; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string is categorized as a separator character.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>
                    Indicates whether the specified character has a surrogate code point.
                </summary>
      <returns>true if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string has a surrogate code point.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>
                    Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.
                </summary>
      <returns>true if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, false.
                </returns>
      <param name="highSurrogate">
                    A character. 
                </param>
      <param name="lowSurrogate">
                    A character. 
                </param>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>
                    Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.
                </summary>
      <returns>true if the <paramref name="s" /> parameter and the <paramref name="index" /> parameter specify a pair of adjacent characters, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    A position within <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a position within <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>
                    Indicates whether the specified Unicode character is categorized as a symbol character.
                </summary>
      <returns>true if <paramref name="c" /> is a symbol character; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string is categorized as a symbol character.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>
                    Indicates whether the specified Unicode character is categorized as an uppercase letter.
                </summary>
      <returns>true if <paramref name="c" /> is an uppercase letter; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>
                    Indicates whether the specified Unicode character is categorized as white space.
                </summary>
      <returns>true if <paramref name="c" /> is white space; otherwise, false.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>
                    Indicates whether the character at the specified position in a specified string is categorized as white space.
                </summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, false.
                </returns>
      <param name="s">
                    A string. 
                </param>
      <param name="index">
                    The character position in <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. 
                </exception>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>
                    Represents the largest possible value of a <see cref="T:System.Char" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>
                    Represents the smallest possible value of a <see cref="T:System.Char" />. This field is constant.
                </summary>
    </member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported.
                </exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.Char" /> object.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current <see cref="T:System.Char" /> object unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported.
                </exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    No value is returned.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object. (Specify null because the <paramref name="provider" /> parameter is ignored.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported.
                </exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported.
                </exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.Char" /> object.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.Char" /> object.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.Char" /> object.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.Char" /> object.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported.
                </exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.
                </summary>
      <returns>
                    An object of the specified type.
                </returns>
      <param name="type">
                    A <see cref="T:System.Type" /> object. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                </exception>
      <exception cref="T:System.InvalidCastException">
                    The value of the current <see cref="T:System.Char" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter. 
                </exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.Char" /> object.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.Char" /> object.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.Char" /> object.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>
                    Converts the value of a Unicode character to its lowercase equivalent.
                </summary>
      <returns>
                    The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
      <summary>
                    Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.
                </summary>
      <returns>
                    The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules, or null. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. 
                </exception>
    </member>
    <member name="M:System.Char.ToString">
      <summary>
                    Converts the value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance.
                </returns>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>
                    Converts the specified Unicode character to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of <paramref name="c" />.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.ToString(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    (Reserved) An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>
                    Converts the value of a Unicode character to its uppercase equivalent.
                </summary>
      <returns>
                    The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
      <summary>
                    Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.
                </summary>
      <returns>
                    The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.
                </returns>
      <param name="c">
                    A Unicode character. 
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules, or null. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. 
                </exception>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>
                    Converts the value of the specified string to its equivalent Unicode character. A return code indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a single character or null. 
                </param>
      <param name="result">
                    When this method returns, contains a Unicode character equivalent to the sole character in <paramref name="s" />, if the conversion succeeded, or an undefined value if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null or the length of <paramref name="s" /> is not 1. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>
                    Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>
                    Initializes an instance of the <see cref="T:System.CLSCompliantAttribute" /> class with a Boolean value indicating whether the indicated program element is CLS-compliant.
                </summary>
      <param name="isCompliant">true if CLS-compliant; otherwise, false. 
                </param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>
                    Gets the Boolean value indicating whether the indicated program element is CLS-compliant.
                </summary>
      <returns>true if the program element is CLS-compliant; otherwise, false.
                </returns>
    </member>
    <member name="T:System.Comparison`1">
      <summary>
                    Represents the method that compares two objects of the same type.
                </summary>
      <returns>
                    Value 
                
                    Condition 
                
                    Less than 0 
                <paramref name="x" /> is less than <paramref name="y" />.
                
                    0 
                <paramref name="x" /> equals <paramref name="y" />.
                
                    Greater than 0 
                <paramref name="x" /> is greater than <paramref name="y" />.
                </returns>
      <param name="x">
                    The first object to compare.
                </param>
      <param name="y">
                    The second object to compare.
                </param>
      <typeparam name="T">
                    The type of the objects to compare.
                </typeparam>
    </member>
    <member name="T:System.Console">
      <summary>
                    Represents the standard input, output, and error streams for console applications. This class cannot be inherited.
                </summary>
    </member>
    <member name="P:System.Console.Error">
      <summary>
                    Gets the standard error output stream.
                </summary>
      <returns>
                    A <see cref="T:System.IO.TextWriter" /> that represents the standard error output stream.
                </returns>
    </member>
    <member name="P:System.Console.In">
      <summary>
                    Gets the standard input stream.
                </summary>
      <returns>
                    A <see cref="T:System.IO.TextReader" /> that represents the standard input stream.
                </returns>
    </member>
    <member name="P:System.Console.Out">
      <summary>
                    Gets the standard output stream.
                </summary>
      <returns>
                    A <see cref="T:System.IO.TextWriter" /> that represents the standard output stream.
                </returns>
    </member>
    <member name="M:System.Console.ReadLine">
      <summary>
                    Reads a line of characters from the console.
                </summary>
      <returns>
                    The next line of characters from the console.
                </returns>
    </member>
    <member name="M:System.Console.SetError(System.IO.TextWriter)">
      <summary>[SECURITY CRITICAL] 
                    Sets the <see cref="P:System.Console.Error" /> property.
                </summary>
      <param name="newError">
                    A <see cref="T:System.IO.TextWriter" /> stream that is the new standard error output. 
                </param>
    </member>
    <member name="M:System.Console.SetIn(System.IO.TextReader)">
      <summary>[SECURITY CRITICAL] 
                    Sets the <see cref="P:System.Console.In" /> property.
                </summary>
      <param name="newIn">
                    A <see cref="T:System.IO.TextReader" /> stream that is the new standard input. 
                </param>
    </member>
    <member name="M:System.Console.SetOut(System.IO.TextWriter)">
      <summary>[SECURITY CRITICAL] 
                    Sets the <see cref="P:System.Console.Out" /> property.
                </summary>
      <param name="newOut">
                    A <see cref="T:System.IO.TextWriter" /> stream that is the new standard output. 
                </param>
    </member>
    <member name="M:System.Console.Write(System.Char)">
      <summary>
                    Writes the specified Unicode character value to the standard output stream.
                </summary>
      <param name="value">
                    The value to write. 
                </param>
    </member>
    <member name="M:System.Console.Write(System.Char[])">
      <summary>
                    Writes the specified array of Unicode characters to the standard output stream.
                </summary>
      <param name="buffer">
                    A Unicode character array. 
                </param>
    </member>
    <member name="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Writes the specified subarray of Unicode characters to the standard output stream.
                </summary>
      <param name="buffer">
                    An array of Unicode characters. 
                </param>
      <param name="index">
                    The starting position in <paramref name="buffer" />. 
                </param>
      <param name="count">
                    The number of characters to write. 
                </param>
    </member>
    <member name="M:System.Console.Write(System.Int32)">
      <summary>
                    Writes the text representation of the specified 32-bit signed integer value to the standard output stream.
                </summary>
      <param name="value">
                    The value to write. 
                </param>
    </member>
    <member name="M:System.Console.Write(System.Object)">
      <summary>
                    Writes the text representation of the specified object to the standard output stream.
                </summary>
      <param name="value">
                    The value to write, or null. 
                </param>
    </member>
    <member name="M:System.Console.Write(System.String)">
      <summary>
                    Writes the specified string value to the standard output stream.
                </summary>
      <param name="value">
                    The value to write. 
                </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object)">
      <summary>
                    Writes the text representation of the specified object to the standard output stream using the specified format information.
                </summary>
      <param name="format">
                    A composite format string.
                </param>
      <param name="arg0">
                    An object to write using <paramref name="format" />.
                </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object)">
      <summary>
                    Writes the text representation of the specified objects to the standard output stream using the specified format information.
                </summary>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="arg0">
                    The first object to write using <paramref name="format" />. 
                </param>
      <param name="arg1">
                    The second object to write using <paramref name="format" />. 
                </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>
                    Writes the text representation of the specified objects to the standard output stream using the specified format information.
                </summary>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="arg0">
                    The first object to write using <paramref name="format" />. 
                </param>
      <param name="arg1">
                    The second object to write using <paramref name="format" />. 
                </param>
      <param name="arg2">
                    The third object to write using <paramref name="format" />. 
                </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object[])">
      <summary>
                    Writes the text representation of the specified array of objects to the standard output stream using the specified format information.
                </summary>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="arg">
                    An array of objects to write using <paramref name="format" />. 
                </param>
    </member>
    <member name="M:System.Console.WriteLine">
      <summary>
                    Writes the current line terminator to the standard output stream.
                </summary>
    </member>
    <member name="M:System.Console.WriteLine(System.Char)">
      <summary>
                    Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.
                </summary>
      <param name="value">
                    The value to write. 
                </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Char[])">
      <summary>
                    Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.
                </summary>
      <param name="buffer">
                    A Unicode character array. 
                </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Int32)">
      <summary>
                    Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.
                </summary>
      <param name="value">
                    The value to write.
                </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Object)">
      <summary>
                    Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.
                </summary>
      <param name="value">
                    The value to write. 
                </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String)">
      <summary>
                    Writes the specified string value, followed by the current line terminator, to the standard output stream.
                </summary>
      <param name="value">
                    The value to write. 
                </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object)">
      <summary>
                    Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.
                </summary>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="arg0">
                    An object to write using <paramref name="format" />. 
                </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
      <summary>
                    Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.
                </summary>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="arg0">
                    The first object to write using <paramref name="format" />. 
                </param>
      <param name="arg1">
                    The second object to write using <paramref name="format" />. 
                </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>
                    Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.
                </summary>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="arg0">
                    The first object to write using <paramref name="format" />. 
                </param>
      <param name="arg1">
                    The second object to write using <paramref name="format" />. 
                </param>
      <param name="arg2">
                    The third object to write using <paramref name="format" />. 
                </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object[])">
      <summary>
                    Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.
                </summary>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="arg">
                    An array of objects to write using <paramref name="format" />. 
                </param>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>
                    Indicates that the value of a static field is unique for a particular context.
                </summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ContextStaticAttribute" /> class.
                </summary>
    </member>
    <member name="T:System.Convert">
      <summary>
                    Converts a base data type to another base data type.
                </summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>
                    Returns an <see cref="T:System.Object" /> with the specified <see cref="T:System.Type" /> and whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.
                </summary>
      <returns>
                    An object whose <see cref="T:System.Type" /> is <paramref name="conversionType" /> and whose value is equivalent to <paramref name="value" />.
                
                    -or- 
                <paramref name="value" />, if the <see cref="T:System.Type" /> of <paramref name="value" /> and <paramref name="conversionType" /> are equal.
                
                    -or- 
                null, if <paramref name="value" /> is null and <paramref name="conversionType" /> is not a value type.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="conversionType">
                    A <see cref="T:System.Type" />. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported. 
                
                    -or-
                <paramref name="value" /> is null and <paramref name="conversionType" /> is a value type.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> is null.
                </exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>
                    Returns an <see cref="T:System.Object" /> with the specified <see cref="T:System.TypeCode" /> and whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.
                </summary>
      <returns>
                    An object whose underlying <see cref="T:System.TypeCode" /> is <paramref name="typeCode" /> and whose value is equivalent to <paramref name="value" />.
                
                    -or- 
                null, if <paramref name="value" /> equals null and <paramref name="typeCode" /> equals <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, or <see cref="F:System.TypeCode.Object" />.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="typeCode">
                    A <see cref="T:System.TypeCode" />. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported.  
                
                    -or-
                <paramref name="value" /> is null and <paramref name="typeCode" /> specifies a value type.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> is invalid. 
                </exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>
                    A constant representing a database column absent of data; that is, database null.
                </summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Converts a subset of a Unicode character array, which encodes binary data as base 64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.
                </summary>
      <returns>
                    An array of 8-bit unsigned integers equivalent to <paramref name="length" /> elements at position <paramref name="offset" /> in <paramref name="inArray" />.
                </returns>
      <param name="inArray">
                    A Unicode character array. 
                </param>
      <param name="offset">
                    A position within <paramref name="inArray" />. 
                </param>
      <param name="length">
                    The number of elements in <paramref name="inArray" /> to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="length" /> is less than 0.
                
                    -or- 
                <paramref name="offset" /> plus <paramref name="length" /> indicates a position not within <paramref name="inArray" />. 
                </exception>
      <exception cref="T:System.FormatException">
                    The length of <paramref name="inArray" />, ignoring white space characters, is not zero or a multiple of 4. 
                
                    -or-
                
                    The format of <paramref name="inArray" /> is invalid. <paramref name="inArray" /> contains a non-base 64 character, more than two padding characters, or a non-white space character among the padding characters. 
                </exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" />, which encodes binary data as base 64 digits, to an equivalent 8-bit unsigned integer array.
                </summary>
      <returns>
                    An array of 8-bit unsigned integers equivalent to <paramref name="s" />.
                </returns>
      <param name="s">
                    A <see cref="T:System.String" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
                    The length of <paramref name="s" />, ignoring white space characters, is not zero or a multiple of 4. 
                
                    -or-
                
                    The format of <paramref name="s" /> is invalid. <paramref name="s" /> contains a non-base 64 character, more than two padding characters, or a non-white space character among the padding characters.
                </exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for the specified object.
                </summary>
      <returns>
                    The <see cref="T:System.TypeCode" /> for <paramref name="value" />, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>
                    Returns an indication whether the specified object is of type <see cref="T:System.DBNull" />.
                </summary>
      <returns>true if <paramref name="value" /> is of type <see cref="T:System.DBNull" />; otherwise, false.
                </returns>
      <param name="value">
                    An object. 
                </param>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
                    Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base 64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.
                </summary>
      <returns>
                    A 32-bit signed integer containing the number of bytes in <paramref name="outArray" />.
                </returns>
      <param name="inArray">
                    An input array of 8-bit unsigned integers. 
                </param>
      <param name="offsetIn">
                    A position within <paramref name="inArray" />. 
                </param>
      <param name="length">
                    The number of elements of <paramref name="inArray" /> to convert. 
                </param>
      <param name="outArray">
                    An output array of Unicode characters. 
                </param>
      <param name="offsetOut">
                    A position within <paramref name="outArray" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> or <paramref name="outArray" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />, <paramref name="offsetOut" />, or <paramref name="length" /> is negative.
                
                    -or- 
                <paramref name="offsetIn" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.
                
                    -or- 
                <paramref name="offsetOut" /> plus the number of elements to return is greater than the length of <paramref name="outArray" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>
                    Converts an array of 8-bit unsigned integers to its equivalent <see cref="T:System.String" /> representation encoded with base 64 digits.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> representation, in base 64, of the contents of <paramref name="inArray" />.
                </returns>
      <param name="inArray">
                    An array of 8-bit unsigned integers. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> is null. 
                </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Converts a subset of an array of 8-bit unsigned integers to its equivalent <see cref="T:System.String" /> representation encoded with base 64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> representation in base 64 of <paramref name="length" /> elements of <paramref name="inArray" /> starting at position <paramref name="offset" />.
                </returns>
      <param name="inArray">
                    An array of 8-bit unsigned integers. 
                </param>
      <param name="offset">
                    An offset in <paramref name="inArray" />. 
                </param>
      <param name="length">
                    The number of elements of <paramref name="inArray" /> to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="length" /> is negative.
                
                    -or- 
                <paramref name="offset" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>
                    Returns the specified Boolean value; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    A Boolean. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.
                </summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>
                    Calling this method always throws <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported. 
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent Boolean value.
                </summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to an equivalent Boolean value.
                </summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.
                </summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.
                </summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.
                </summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>
                    Converts the value of a specified <see cref="T:System.Object" /> to an equivalent Boolean value.
                </summary>
      <returns>true or false, which reflects the value returned by invoking the <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> method for the underlying type of <paramref name="value" />. If <paramref name="value" /> is null, the method returns false. 
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to an equivalent Boolean value using the specified culture-specific formatting information.
                </summary>
      <returns>true or false, which reflects the value returned by invoking the <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> method for the underlying type of <paramref name="value" />. If <paramref name="value" /> is null, the method returns false.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. 
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.
                </summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to an equivalent Boolean value.
                </summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a logical value to its Boolean equivalent.
                </summary>
      <returns>true if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or false if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" /> or null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not equal to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a logical value to its Boolean equivalent using the specified culture-specific formatting information.
                </summary>
      <returns>true if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or false if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" /> or null.
                </returns>
      <param name="value">
                    A string that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. 
                </param>
      <param name="provider">
                    (Reserved) An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not equal to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.
                </summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.
                </summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.
                </summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean value to the equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    The number 1 if <paramref name="value" /> is true; otherwise, 0.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>
                    Returns the specified 8-bit unsigned integer; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>
                    Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    The 8-bit unsigned integer equivalent to <paramref name="value" />.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit unsigned integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit signed integer using specified culture-specific formatting information.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>
                    Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the number in <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number. 
                </param>
      <param name="fromBase">
                    The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. 
                
                    -or-
                <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a base 10 unsigned number, is prefixed with a negative sign.
                
                    -or-
                
                    The return value is less than <see cref="F:System.Byte.MinValue" /> or larger than <see cref="F:System.Byte.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.
                </summary>
      <returns>
                    The Unicode character equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>
                    Returns the specified Unicode character value; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>
                    Calling this method always throws <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>
                    Calling this method always throws <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="value">
                    A double-precision floating-point number. 
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.
                </summary>
      <returns>
                    The Unicode character equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.
                </summary>
      <returns>
                    The Unicode character equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.
                </summary>
      <returns>
                    The Unicode character equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a Unicode character.
                </summary>
      <returns>
                    The Unicode character equivalent to the value of <paramref name="value" />.
                
                    -or- 
                <see cref="F:System.Char.MinValue" /> if <paramref name="value" /> equals null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to its equivalent Unicode character using the specified culture-specific formatting information.
                </summary>
      <returns>
                    The Unicode character equivalent to the value of <paramref name="value" />.
                
                    -or- 
                <see cref="F:System.Char.MinValue" /> if <paramref name="value" /> equals null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.
                </summary>
      <returns>
                    The Unicode character equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>
                    Calling this method always throws <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="value">
                    A single-precision floating-point number. 
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>
                    Converts the first character of a <see cref="T:System.String" /> to a Unicode character.
                </summary>
      <returns>
                    The Unicode character equivalent to the first and only character in <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> of length 1 or null. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
                    The length of <paramref name="value" /> is not 1. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>
                    Converts the first character of a <see cref="T:System.String" /> to a Unicode character using specified culture-specific formatting information.
                </summary>
      <returns>
                    The Unicode character equivalent to the first and only character in <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> of length 1 or null. 
                </param>
      <param name="provider">
                    (Reserved) An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
                    The length of <paramref name="value" /> is not 1. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.
                </summary>
      <returns>
                    The Unicode character equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.
                </summary>
      <returns>
                    The Unicode character equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Char.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.
                </summary>
      <returns>
                    The Unicode character equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Char.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a valid <see cref="T:System.DateTime" /> value.
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.
                
                    -or-
                
                    The conversion is not supported.
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a date and time to an equivalent <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    The string representation of a date and time.
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a properly formatted date and time string. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a date and time to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a properly formatted date and time string. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean value to the equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    The number 1 if <paramref name="value" /> is true; otherwise, 0.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to the equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>
                    Calling this method always throws <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>
                    Calling this method always throws <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="value">
                    A <see cref="T:System.DateTime" />. 
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>
                    Returns the specified <see cref="T:System.Decimal" /> number; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to an equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. 
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
                    The numeric value of <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to an equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to an equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to an equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to an <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to the equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    The 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to the equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. 
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to the equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to an equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to an equivalent <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean value to the equivalent double-precision floating point number.
                </summary>
      <returns>
                    The number 1 if <paramref name="value" /> is true; otherwise, 0.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating point number.
                </summary>
      <returns>
                    The double-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>
                    Calling this method always throws <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent double-precision floating point number.
                </summary>
      <returns>
                    A double-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>
                    Returns the specified double-precision floating point number; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating point number.
                </summary>
      <returns>
                    A double-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating point number.
                </summary>
      <returns>
                    A double-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating point number.
                </summary>
      <returns>
                    A double-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a double-precision floating point number.
                </summary>
      <returns>
                    A double-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to an double-precision floating point number using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A double-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating point number.
                </summary>
      <returns>
                    The 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to an equivalent double-precision floating point number.
                </summary>
      <returns>
                    A double-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent double-precision floating point number.
                </summary>
      <returns>
                    A double-precision floating point number equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent double-precision floating point number using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A double-precision floating point number equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating point number.
                </summary>
      <returns>
                    The double-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating point number.
                </summary>
      <returns>
                    A double-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating point number.
                </summary>
      <returns>
                    A double-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean value to the equivalent 16-bit signed integer.
                </summary>
      <returns>
                    The number 1 if <paramref name="value" /> is true; otherwise, 0.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.
                </summary>
      <returns>
                    The 16-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>
                    Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.
                </summary>
      <returns>
                    The 16-bit signed integer equivalent to <paramref name="value" />.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 16-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to an equivalent 16-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>
                    Returns the specified 16-bit signed integer; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.
                </summary>
      <returns>
                    The 16-bit signed integer equivalent of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit signed integer.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit signed integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.
                </summary>
      <returns>
                    The 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to an equivalent 16-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit signed integer.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit signed integer using specified culture-specific formatting information.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>
                    Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the number in <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A string containing a number. 
                </param>
      <param name="fromBase">
                    The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. 
                
                    -or-
                <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.
                
                    -or-
                
                    The return value is less than <see cref="F:System.Int16.MinValue" /> or larger than <see cref="F:System.Int16.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.
                </summary>
      <returns>
                    The 16-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean value to the equivalent 32-bit signed integer.
                </summary>
      <returns>
                    The number 1 if <paramref name="value" /> is true; otherwise, 0.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.
                </summary>
      <returns>
                    The 32-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>
                    Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.
                </summary>
      <returns>
                    The 32-bit signed integer equivalent to <paramref name="value" />.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 32-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to an equivalent 32-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>
                    Returns the specified 32-bit signed integer; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit signed integer.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit signed integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.
                </summary>
      <returns>
                    The 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to an equivalent 32-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit signed integer.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit signed integer using specified culture-specific formatting information.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>
                    Converts the <see cref="T:System.String" /> representation of a number in a specified base to an equivalent 32-bit signed integer.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the number in <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number. 
                </param>
      <param name="fromBase">
                    The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. 
                
                    -or-
                <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.
                
                    -or-
                
                    The return value is less than <see cref="F:System.Int32.MinValue" /> or larger than <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.
                </summary>
      <returns>
                    The 32-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean value to the equivalent 64-bit signed integer.
                </summary>
      <returns>
                    The number 1 if <paramref name="value" /> is true; otherwise, 0.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.
                </summary>
      <returns>
                    The 64-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>
                    Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.
                </summary>
      <returns>
                    The 64-bit signed integer equivalent to <paramref name="value" />.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 64-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to an equivalent 64-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.
                </summary>
      <returns>
                    The 64-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>
                    Returns the specified 64-bit signed integer; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit signed integer.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit signed integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.
                </summary>
      <returns>
                    The 64-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to an equivalent 64-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit signed integer.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>
                    Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the number in <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A string containing a number. 
                </param>
      <param name="fromBase">
                    The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. 
                
                    -or-
                <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.
                
                    -or-
                
                    The return value is less than <see cref="F:System.Int64.MinValue" /> or larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.
                </summary>
      <returns>
                    The 64-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean value to the equivalent 8-bit signed integer.
                </summary>
      <returns>
                    The number 1 if <paramref name="value" /> is true; otherwise, 0.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.
                </summary>
      <returns>
                    The 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>
                    Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.
                </summary>
      <returns>
                    The 8-bit signed integer equivalent to <paramref name="value" />.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 8-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to an equivalent 8-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.
                </summary>
      <returns>
                    The 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.
                </summary>
      <returns>
                    The 8-bit signed integer equivalent of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit signed integer.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit signed integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>
                    Returns the specified 8-bit signed integer; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to an equivalent 8-bit signed integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit signed integer.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if value is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit signed integer using specified culture-specific formatting information.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>
                    Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the number in <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A string containing a number. 
                </param>
      <param name="fromBase">
                    The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. 
                
                    -or-
                <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.
                
                    -or-
                
                    The return value is less than <see cref="F:System.SByte.MinValue" /> or larger than <see cref="F:System.SByte.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.
                </summary>
      <returns>
                    The 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean value to the equivalent single-precision floating point number.
                </summary>
      <returns>
                    The number 1 if <paramref name="value" /> is true; otherwise, 0.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating point number.
                </summary>
      <returns>
                    The single-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>
                    Calling this method always throws <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent single-precision floating point number.
                </summary>
      <returns>
                    A single-precision floating point number equivalent to the value of <paramref name="value" />.
                <paramref name="value" /> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to an equivalent single-precision floating point number.
                </summary>
      <returns>
                    A single-precision floating point number equivalent to the value of <paramref name="value" />.
                <paramref name="value" /> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating point number.
                </summary>
      <returns>
                    A single-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating point number.
                </summary>
      <returns>
                    A single-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating point number.
                </summary>
      <returns>
                    A single-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a single-precision floating point number.
                </summary>
      <returns>
                    A single-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to an single-precision floating point number using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A single-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating point number.
                </summary>
      <returns>
                    The 8-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>
                    Returns the specified single-precision floating point number; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent single-precision floating point number.
                </summary>
      <returns>
                    A single-precision floating point number equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent single-precision floating point number using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A single-precision floating point number equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating point number.
                </summary>
      <returns>
                    The single-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating point number.
                </summary>
      <returns>
                    A single-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating point number.
                </summary>
      <returns>
                    A single-precision floating point number equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified Boolean to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
      <param name="provider">
                    (Reserved) An instance of an <see cref="T:System.IFormatProvider" /> interface implementation. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>
                    Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.
                </summary>
      <returns>
                    The string representation of <paramref name="value" /> in base <paramref name="toBase" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
      <param name="toBase">
                    The base of the return value, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. 
                </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>
                    Converts the value of the specified Unicode character to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified Unicode character to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>
                    Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.DateTime" />. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.DateTime" />. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified double-precision floating point number to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                <paramref name="provider" /> is ignored; it does not participate in this operation.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>
                    Converts the value of a 16-bit signed integer to its equivalent <see cref="T:System.String" /> representation in a specified base.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> representation of <paramref name="value" /> in base <paramref name="toBase" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
      <param name="toBase">
                    The base of the return value, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. 
                </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>
                    Converts the value of a 32-bit signed integer to its equivalent <see cref="T:System.String" /> representation in a specified base.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> representation of <paramref name="value" /> in base <paramref name="toBase" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
      <param name="toBase">
                    The base of the return value, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. 
                </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>
                    Converts the value of a 64-bit signed integer to its equivalent <see cref="T:System.String" /> representation in a specified base.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> representation of <paramref name="value" /> in base <paramref name="toBase" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
      <param name="toBase">
                    The base of the return value, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. 
                </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to its <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> representation of the value of <paramref name="value" />, or <see cref="F:System.String.Empty" /> if value is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> or null. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to its equivalent <see cref="T:System.String" /> representation using the specified culture-specific formatting information.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> representation of the value of <paramref name="value" />, or <see cref="F:System.String.Empty" /> if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> or null. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified single-precision floating point number to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean value to the equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    The number 1 if <paramref name="value" /> is true; otherwise, 0.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>
                    Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    The 16-bit unsigned integer equivalent to <paramref name="value" />.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 16-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to an equivalent 16-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    The 16-bit unsigned integer equivalent of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:Syste