Multiburst) Description The Ntsc-japan S-Video Multiburst test generates six packets of discrete frequencies falling within the video passband so called Multiburst testing pattern in the XBox and send out through XBox analog TV output S-Video lines, captures the tvout via an video capture card on the host computer, and processes and analyzes the tvout signals including measurement of the peak-to-peak amplitude of the packets to determine the attenuation of the amplitude for the each frequency of the TV Multiburst image that was recorded on the host computer Parameters These parameters are identical to the Ntscmsvmb test, so see the parameters for the Ntscmsvmb test for details Algorithm This test is identical to the Ntscmsvmb test except the TV standard is the NTSC-Japan rather than NTSC-M so see the algorithm for the Ntscmsvmb test for details. Execution Time About 4 seconds Dependencies and Limitations This test requires that the host computer contain a video capture card that can snapshot a analog image outputted by XBox, and have a UHC utility or library that can process the MID_NTSC_J_SVIDEO_MB command.  Run Xtools to switch TV standard to Ntsc-m/Composite (set the configuration parameters standard=ntsc_j, refresh_rate=60, tiu=enabled, pack=svideo) before run this test Palbcompcb (Pal-Bdghi Composite Color Bar) Description This palbcompcb color bars test generates color bars test pattern in the XBox and send out through XBox TV output composite lines, captures the tvout via an video capture card on the host computer, and processes and analyzes the tvout signals including control of color hue, brightness, and color saturation of the TV color bar image for the pal-Bdghi TV standard that was recorded on the host computer.  Parameters Palbcompcb.std_ntsccb_luma_ire [0]   The standard Tektronix luminance amplitude IRE for the White bar. Palbcompcb.std_ntsccb_luma_ire [1]   The standard Tektronix luminance amplitude IRE for the Yellow bar. Palbcompcb.std_ntsccb_luma_ire [2]   The standard Tektronix luminance amplitude IRE for the Cyan bar. Palbcompcb.std_ntsccb_luma_ire [3]   The standard Tektronix luminance amplitude IRE for the Green bar. Palbcompcb.std_ntsccb_luma_ire [4]   The standard Tektronix luminance amplitude IRE for the Magenta bar. Palbcompcb.std_ntsccb_luma_ire [5]   The standard Tektronix luminance amplitude IRE for the Red bar. Palbcompcb.std_ntsccb_luma_ire [6]   The standard Tektronix luminance amplitude IRE for the Blue bar. Palbcompcb.std_ntsccb_luma_ire [7]   The standard Tektronix luminance amplitude IRE for the Black bar. Palbcompcb.std_ntsccb_chroma_ire [0]   The standard Tektronix chrominance amplitude IRE for the White bar. Palbcompcb.std_ntsccb_chroma_ire [1]   The standard Tektronix chrominance amplitude IRE for the Yellow bar. Palbcompcb.std_ntsccb_chroma_ire [2]   The standard Tektronix chrominance amplitude IRE for the Cyan bar. Palbcompcb.std_ntsccb_chroma_ire [3]   The standard Tektronix chrominance amplitude IRE for the Green bar. Palbcompcb.std_ntsccb_chroma_ire [4]   The standard Tektronix chrominance amplitude IRE for the Magenta bar. Palbcompcb.std_ntsccb_chroma_ire [5]   The standard Tektronix chrominance amplitude IRE for the Red bar. Palbcompcb.std_ntsccb_chroma_ire [6]   The standard Tektronix chrominance amplitude IRE for the Blue bar. Palbcompcb.std_ntsccb_chroma_ire [7]   The standard Tektronix chrominance amplitude IRE for the Black bar. Palbcompcb.std_ntsccb_chroma_phase [0]   The standard Tektronix chrominance phase for the Yellow bar. Palbcompcb.std_ntsccb_chroma_ phase [1]   The standard Tektronix chrominance phase for the Cyan bar. Palbcompcb.std_ntsccb_chroma_ phase [2]   The standard Tektronix chrominance phase for the Green bar. Palbcompcb.std_ntsccb_chroma_ phase [3]   The standard Tektronix chrominance phase for the Magenta bar. Palbcompcb.std_ntsccb_chroma_ phase [4]   The standard Tektronix chrominance phase for the Red bar. Palbcompcb.std_ntsccb_chroma_ phase [5]   The standard Tektronix chrominance phase for the Blue bar. Palbcompcb.luma_ire_upper [0]   The Luminance amplitude upper tolerance limit for the White bar  Palbcompcb.luma_ire_upper [1]   The Luminance amplitude upper tolerance limit for the Yellow bar  Palbcompcb.luma_ire_upper [2]   The Luminance amplitude upper tolerance limit for the Cyan bar  Palbcompcb.luma_ire_upper [3]   The Luminance amplitude upper tolerance limit for the Green bar Palbcompcb.luma_ire_upper [4]   The Luminance amplitude upper tolerance limit for the Magenta bar  Palbcompcb.luma_ire_upper [5]   The Luminance amplitude upper tolerance limit for the Red bar  Palbcompcb.luma_ire_upper [6]   The Luminance amplitude upper tolerance limit for the Blue bar  Palbcompcb.luma_ire_upper [7]   The Luminance amplitude upper tolerance limit for the Black bar  Palbcompcb.luma_ire_lower [0]   The Luminance amplitude lower tolerance limit for the White bar  Palbcompcb.luma_ire_ lower [1]   The Luminance amplitude lower tolerance limit for the Yellow bar  Palbcompcb.luma_ire_ lower [2]   The Luminance amplitude lower tolerance limit for the Cyan bar  Palbcompcb.luma_ire_ lower r [3]   The Luminance amplitude lower tolerance limit for the Green bar Palbcompcb.luma_ire_ lower [4]   The Luminance amplitude lower tolerance limit for the Magenta bar  Palbcompcb.luma_ire_ lower [5]   The Luminance amplitude lower tolerance limit for the Red bar  Palbcompcb.luma_ire_ lower [6]   The Luminance amplitude lower tolerance limit for the Blue bar  Palbcompcb.luma_ire_ lower [7]   The Luminance amplitude lower tolerance limit for the Black bar  Palbcompcb.chroma_ire_upper [0]   The Chrominance amplitude upper tolerance limit for the White bar  Palbcompcb.chroma_ire_upper [1]   The Chrominance amplitude upper tolerance limit for the Yellow bar  Palbcompcb.chroma_ire_upper [2]   The Chrominance amplitude upper tolerance limit for the Cyan bar  Palbcompcb.chroma_ire_upper [3]   The Chrominance amplitude upper tolerance limit for the Green bar Palbcompcb.chroma_ire_upper [4]   The Chrominance amplitude upper tolerance limit for the Magenta bar  Palbcompcb.chroma_ire_upper [5]   The Chrominance amplitude upper tolerance limit for the Red bar  Palbcompcb.chroma_ire_upper [6]   The Chrominance amplitude upper tolerance limit for the Blue bar  Palbcompcb.chroma_ire_upper [7]   The Chrominance amplitude upper tolerance limit for the Black bar  Palbcompcb.chroma_ire_lower [0]   The Chrominance amplitude lower tolerance limit for the White bar  Palbcompcb.chroma_ire_ lower [1]   The Chrominance amplitude lower tolerance limit for the Yellow bar  Palbcompcb.chroma_ire_ lower [2]   The Chrominance amplitude lower tolerance limit for the Cyan bar  Palbcompcb.chroma_ire_ lower [3]   The Chrominance amplitude lower tolerance limit for the Green bar Palbcompcb.chroma_ire_ lower [4]   The Chrominance amplitude lower tolerance limit for the Magenta bar  Palbcompcb.chroma_ire_ lower [5]   The Chrominance amplitude lower tolerance limit for the Red bar  Palbcompcb.chroma_ire_ lower [6]   The Chrominance amplitude lower tolerance limit for the Blue bar  Palbcompcb.chroma_ire_ lower [7]   The Chrominance amplitude lower tolerance limit for the Black bar  Palbcompcb.chroma_phase_upper [0]   The Chrominance phase upper tolerance limit for the White bar  Palbcompcb.chroma_phase_upper [1]   The Chrominance phase upper tolerance limit for the Yellow bar  Palbcompcb.chroma_ phase _upper [2]   The Chrominance phase upper tolerance limit for the Cyan bar  Palbcompcb.chroma_ phase _upper [3]   The Chrominance phase upper tolerance limit for the Green bar Palbcompcb.chroma_ phase _upper [4]   The Chrominance phase upper tolerance limit for the Magenta bar  Palbcompcb.chroma_ phase _upper [5]   The Chrominance phase upper tolerance limit for the Red bar  Palbcompcb.chroma_ phase _upper [6]   The Chrominance phase upper tolerance limit for the Blue bar  Palbcompcb.chroma_ phase _upper [7]   The Chrominance phase upper tolerance limit for the Black bar  Palbcompcb.chroma_phase_lower [0]   The Chrominance phase lower tolerance limit for the White bar  Palbcompcb.chroma_phase_lower [1]   The Chrominance phase lower tolerance limit for the Yellow bar  Palbcompcb.chroma_ phase _lower [2]   The Chrominance phase lower tolerance limit for the Cyan bar  Palbcompcb.chroma_ phase _lower [3]   The Chrominance phase lower tolerance limit for the Green bar Palbcompcb.chroma_ phase _lower [4]   The Chrominance phase lower tolerance limit for the Magenta bar  Palbcompcb.chroma_ phase _lower [5]   The Chrominance phase lower tolerance limit for the Red bar  Palbcompcb.chroma_ phase _lower [6]   The Chrominance phase lower tolerance limit for the Blue bar  Palbcompcb.chroma_ phase _lower [7]   The Chrominance phase lower tolerance limit for the Black bar  Algorithm This test is identical to the Ntscmcompcb test except the TV standard is the Pal-Bdghi rather than NTSC-M so see the algorithm for the Ntscmcompcb test for details. Execution Time About 5 seconds Dependencies and Limitations This test requires that the host computer contain a video capture card that can snapshot a analog image outputted by XBox, and have a UHC utility or library that can process the MID_PAL_BDGHI_COMPOSITE_CB command.  Run Xtools to switch TV standard to Ntsc-m/Composite (set the configuration parameters standard=pal_i, refresh_rate=50, tiu=enabled, pack=svideo) before run this test Palbsvcb (Pal-Bdghi S-Video Color Bar) Description This palbsvcb color bars test generates color bars test pattern for pal-bdghi in the XBox and send out through XBox TV output S-Video lines, captures the tvout via an video capture card on the host computer, and processes and analyzes the tvout signals including control of color hue, brightness, and color saturation of the TV color bar image for the pal-Bdghi TV standard that was recorded on the host computer.  Parameters These parameters are identical to the Palbcompcb test, so see the parameters for the Palbcompcb test for details Algorithm This test is identical to the Ntscmcompcb test except the TV standard is the Pal-Bdghi rather than NTSC-M so see the algorithm for the Ntscmcompcb test for details. Execution Time About 5 seconds Dependencies and Limitations This test requires that the host computer contain a video capture card that can snapshot a analog image outputted by XBox, and have a UHC utility or library that can process the MID_PAL_BDGHI_SVIDEO_CB command.  Run Xtools to switch TV standard to Ntsc-m/Composite (set the configuration parameters standard=pal_i, refresh_rate=50, tiu=enabled, pack=svideo) before run this test Palbcompmb (Pal-Bdghi Composite Multiburst) Description This Pal-Bdgih Composite Multiburst test generates six packets of discrete frequencies falling within the video passband so called Multiburst test pattern in the XBox and send out through XBox TV output Composite lines, captures the tvout via an video capture card on the host computer, and processes and analyzes the tvout signals including measurement of the peak-to-peak amplitude of the frequency packets to determine the attenuation of the amplitude at that frequency for the Multiburst test image that was recorded on the host computer Parameters These parameters are identical to the Ntscmcompmb test, so see the parameters for the Ntscmcompmb test for details Algorithm This test is identical to the Ntscmcompmb test except the TV standard is Pal-Bdghi rather than NTSC-M so see the algorithm for the Ntscmcompmb test for details. Execution Time About 4 seconds Dependencies and Limitations This test requires that the host computer contain a video capture card that can snapshot a analog image outputted by XBox, and have a UHC utility or library that can process the MID_PAL_BDGHI_COMPOSITE_MB command.  Run Xtools to switch TV standard to Ntsc-m/Composite (set the configuration parameters standard=pal_i, refresh_rate=50, tiu=enabled, pack=svideo) before run this test. Palsvmb (Pal-Bdghi S-Video Multiburst) Description This Pal-Bdghi S-Video Multiburst test generates six packets of discrete frequencies falling within the video passband  called Multiburst test pattern in the XBox and send out through XBox TV output S-Video lines, captures the tvout via an video capture card on the host computer, and processes and analyzes the tvout signals including measurement of the peak-to-peak amplitude of the packets to determine the attenuation of the amplitude for the each frequency of the TV Multiburst image that was recorded on the host computer Parameters These parameters are identical to the Ntscmcompmb test, so see the parameters for the Ntscmcompmb test for details Algorithm This test is identical to the Ntscmsvmb test except the TV standard is the PAL-BDGHI rather than NTSC-M so see the algorithm for the Ntscmsvmb test for details. Execution Time About 4 seconds Dependencies and Limitations This test requires that the host computer contain a video capture card that can snapshot a analog image outputted by XBox, and have a UHC utility or library that can process the MID_PAL_BDGHI_SVIDEO_MB command.  Run Xtools to switch TV standard to Ntsc-m/Composite (set the configuration parameters standard=pal_i refresh_rate=50, tiu=enabled, pack=svideo) before run this test Standard Error Codes The standard error code is a 32 bit hexidecimal number.  The first three digits a unique number assigned to the module.  The middle two digits represent the test number.  The last three digits are unique to a module.  The following table describes the error codes unique to this module.  The test field of the number is   because more than one test is capable of producing the error message.  The error codes unique to a module start with 0x010, the first 16 error codes are reserved for the executive. Error Code Description 012xx010 Failed to find configuration parameters 012xx011 A DirectX API returned error 012xx012 The response buffer to a host echo command is empty 012xx013 ISendHost communication routine returned error code 012xx014 The measurement results data buffer from host is empty 012xx015 The length of the measurement result data buffer from host is not correct 012xx016 The measured color bar number (x) for the luma IRE is (x) out of the limit range. The Tektronix standard parameters is (x) The lower limit is(x), the upper limit is(x) 012xx017 The measured color bar number (x) for the chroma IRE is (x) out of the limit range. The Tektronix standard parameters is (x) The lower limit is(x), the upper limit is(x) 012xx018 The measured color bar number (x) for the chroma Phase is (x) out of the limit range. The Tektronix standard parameters is (x) The lower limit is (x), the upper limit is (x) 012xx019 The measured attenuation of the amplitude at frequency packets number (x) is (xdB) out of the limit range. The lower limits is (xdB), the upper limit is (xdB). 012xx01A No video signals detected or switch video mode may not working properly XMTA XTV Module Specification  PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\sdktools\factory\xtest\xusb\xusb.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Intel Corp. TitlePurvi H. Majmudar Normal.dot BINMAN Microsoft Word 9.0.<XGV Uxq@% I le6_. 2BboRh\"XUSB module  Overview Version Number Release Date 09/07/01 This module verifies that the XRTC features function properly. Version Info Version Initials Descriptions V1.01 09/07/01 Added read looping capability to the Memory Unit Stress test V1.00 02/22/01 Initial release Test Coverage This test module verifies the functionality of the USB ports on the XBox. Tests Enumeration Test Description This test verifies the number of Gamepads and Memory Units attached to the UUT (Unit Under Test). Parameters Gamepads MemoryUnits  Algorithm // Trial loop of 5 to find Gamepads and memory Units for (j = 0; j < 5; j++)            Get a bitmap for the Gamepads       Get a bitmap for the Memory Units Interpret the bitmap for the Gamepads to determine the total # of Gamepads        currently attached to the UUT Interpret the bitmap for the Memory Units to determine the total # of Memory  Units currently attached to the UUT // wait for 200 ms to see if the devices can be detected Sleep (200) if found a gamepad                   GamepadsFound++        if found a memory unit        MemoryUnitsFound++ } // end for if(timeout && (GamepadsFound != Gamepads)) error  if( GamepadsFound != Gamepads) error if(timeout && (MemoryUnitsFound != MemoryUnits)) error if(MemoryUnitsFound != MemoryUnits) error  Execution Time Less than 1 second Dependencies and Limitations Make sure that the Gamepads are properly connected to the UUT and the Memory Units are properly connected to the Gamepads. MemoryUnitStress Test Description This test verifies that data can be written to and read from the drives on the Memory Units. This test is also a way of generating traffic on the USB bus without intervening with the Gamepads.  Parameters Length MemoryUnits ReadLoops Algorithm for (j = 0; j < 4; j++) Mount Memory Unit on Top Slot of the Gamepad If mount successful MemoryUnitFound++ Mount Memory Unit on Bottom Slot of the Gamepad If mount successful MemoryUnitFound++ } // end For (j = 0; j < 4; j++) If (MemoryUnitsFound != MemoryUnits) error for (j = 0; j < 8; j++)             { If (FoundMemUnit[j] == true) Create File on drive for this Memory Unit             If (handle == INVALID_HANDLE_VALUE)         error         Write random data of size Length to the file For(loops = 0; loops < ReadLoops; loops++) Read data from the file Compare data written with data read If(data written != data read) error } // end else } // end if } // end for(j = 0; j < 8; j++) } // end else UnMount memory units Execution Time About 1 second for a file size of 32Kb.  Dependencies and Limitations Parameters GamePads Description This parameter is an integer that specifies the number of Gamepads that should be connected to the UUT. There can be max of 4 Gamepads and atleast one Gamepad should be connected to a UUT. Default Range 1 to 4 MemoryUnits Description This parameter is an integer that specifies the number of Memory Units that should be connected to the UUT.  There can be upto 4 Gamepads for a UUT and each Gamepad can have upto 2 Memory Units. Therefore a max of 8 Memory Units can be connected to a UUT. Default Range 0 to 8 Length Description This parameter is an integer that specifies the length/size of the file to be written to and/or read from the drives on the Memory Units.  Default 0x1000  // 4Kb Range 4Kb to 100Kb. ReadLoops Description Specifies how many times data that was written to a memory unit is read back and compared to the written contents.  This allows the Memory Unit Stress test to generate more read accesses to the memory units than write accesses, which will lengthen the life of memory units (which have a limit to the number of times they can be written because they are based on flash memory). Default Range 1 to 4294967296 Standard Error Codes The standard error code is a 32 bit hexadecimal number.  The first three digits a unique number assigned to the module.  The middle two digits represent the test number.  The last three digits are unique to a module.  The following table describes the error codes unique to this module.  The test field of the number is   because more than one test is capable of producing the error message.  The error codes unique to a module start with 0x010; the first 16 error codes are reserved for the executive. Error Code Description 004xx010 Can't find configuration parameter %s.  004xx011 Configuration Parameter %s should have a non-zero value between %d and %d 004xx012 Incorrect Value of %d for Configuration Parameter %s. It should be between %d and %d 004xx013 "Mismatch at Offset 0x%02X, Wrote 0x%02X, Read 0x%02X, Seed %u 004xx014 Failed to read Parameter: %s 004xx015 Failed to write Parameter: %s 004xx016 Mismatched number of %s. Expected: %d, Detected: %d 004xx017 Unable to open file. GetLastError () returned %d 004xx018 Timed out while trying to detect the %s. 004xx019 Error while writing to file. GetLastError () returned %d 004xx01A Error while reading from file. GetLastError () returned %d 004xx01B Unable to UnMount Memory Unit on Port %d, %s Slot. Error code returned %d 004xx01C Write/Read Mismatch. Wrote 0x%02X, Read 0x%02X 004xx01D Could not allocate a %lu byte data buffer 004xx01E Unable to close file handle. GetLastError() returned %d 004xx01F Error while resetting the file pointer to the start of the file XMTA Template Module Specification  PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\sdktools\factory\xtest\xusb\XUSB.INI ===
;-----------------------------------------------
; XMTA.INI
;
; This te INI file for the XUSB test module
;-----------------------------------------------

[parameters];-- This section must preceed testflow section


usb.gamepads = 2
usb.memoryunits = 4
usb.length = 0x1000; default file size of 4Kb
usb.readloops = 1

[testflow];-- This section must follow parameters section
run loop, haltonerror = false, timelimit = 3600, looplimit = 1

run usb.enumerationtest
run usb.memorytest
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\sdktools\factory\xtest\xtv\xtv.ini ===
;-----------------------------------------------
; XMTA.INI
;
; This te INI file for the XTV test module
;-----------------------------------------------

[parameters];-- This section must preceed testflow section

;NTSC_CB Luma upper and lower limits
 
TV.ntscmcompcb.luma_ire_upper[0] = 6
TV.ntscmcompcb.luma_ire_upper[1] = 6
TV.ntscmcompcb.luma_ire_upper[2] = 6
TV.ntscmcompcb.luma_ire_upper[3] = 6
TV.ntscmcompcb.luma_ire_upper[4] = 6
TV.ntscmcompcb.luma_ire_upper[5] = 6
TV.ntscmcompcb.luma_ire_upper[6] = 6
TV.ntscmcompcb.luma_ire_upper[7] = 6

TV.ntscmcompcb.luma_ire_lower[0] = 3
TV.ntscmcompcb.luma_ire_lower[1] = 3
TV.ntscmcompcb.luma_ire_lower[2] = 3
TV.ntscmcompcb.luma_ire_lower[3] = 3
TV.ntscmcompcb.luma_ire_lower[4] = 3
TV.ntscmcompcb.luma_ire_lower[5] = 3
TV.ntscmcompcb.luma_ire_lower[6] = 3
TV.ntscmcompcb.luma_ire_lower[7] = 3

;NTSC_CB Chroma_IRE upper and lower limits

TV.ntscmcompcb.chroma_ire_upper[0] = 4
TV.ntscmcompcb.chroma_ire_upper[1] = 4
TV.ntscmcompcb.chroma_ire_upper[2] = 4
TV.ntscmcompcb.chroma_ire_upper[3] = 4
TV.ntscmcompcb.chroma_ire_upper[4] = 4
TV.ntscmcompcb.chroma_ire_upper[5] = 4
TV.ntscmcompcb.chroma_ire_upper[6] = 4
TV.ntscmcompcb.chroma_ire_upper[7] = 4

TV.ntscmcompcb.chroma_ire_lower[0] = 0
TV.ntscmcompcb.chroma_ire_lower[1] = 3
TV.ntscmcompcb.chroma_ire_lower[2] = 3
TV.ntscmcompcb.chroma_ire_lower[3] = 3
TV.ntscmcompcb.chroma_ire_lower[4] = 3
TV.ntscmcompcb.chroma_ire_lower[5] = 3
TV.ntscmcompcb.chroma_ire_lower[6] = 3
TV.ntscmcompcb.chroma_ire_lower[7] = 0

;NTSC_CB Chroma_Phase upper and lower limits


TV.ntscmcompcb.chroma_phase_upper[0] = 3
TV.ntscmcompcb.chroma_phase_upper[1] = 3
TV.ntscmcompcb.chroma_phase_upper[2] = 3
TV.ntscmcompcb.chroma_phase_upper[3] = 3
TV.ntscmcompcb.chroma_phase_upper[4] = 3
TV.ntscmcompcb.chroma_phase_upper[5] = 3


TV.ntscmcompcb.chroma_phase_lower[0] = 5
TV.ntscmcompcb.chroma_phase_lower[1] = 3
TV.ntscmcompcb.chroma_phase_lower[2] = 3
TV.ntscmcompcb.chroma_phase_lower[3] = 3
TV.ntscmcompcb.chroma_phase_lower[4] = 3
TV.ntscmcompcb.chroma_phase_lower[5] = 3


;NTSC_EIA_CB Standard Video Parameters for LumaIRE, ChromaIRE, and ChromaPhase.

TV.ntscmcompcb.std_ntsccb_luma_ire[0] = 77
TV.ntscmcompcb.std_ntsccb_luma_ire[1] = 69
TV.ntscmcompcb.std_ntsccb_luma_ire[2] = 56
TV.ntscmcompcb.std_ntsccb_luma_ire[3] = 48
TV.ntscmcompcb.std_ntsccb_luma_ire[4] = 36
TV.ntscmcompcb.std_ntsccb_luma_ire[5] = 28
TV.ntscmcompcb.std_ntsccb_luma_ire[6] = 15
TV.ntscmcompcb.std_ntsccb_luma_ire[7] = 7

TV.ntscmcompcb.std_ntsccb_chroma_ire[0] = 0
TV.ntscmcompcb.std_ntsccb_chroma_ire[1] = 62
TV.ntscmcompcb.std_ntsccb_chroma_ire[2] = 88
TV.ntscmcompcb.std_ntsccb_chroma_ire[3] = 82
TV.ntscmcompcb.std_ntsccb_chroma_ire[4] = 82
TV.ntscmcompcb.std_ntsccb_chroma_ire[5] = 88
TV.ntscmcompcb.std_ntsccb_chroma_ire[6] = 62
TV.ntscmcompcb.std_ntsccb_chroma_ire[7] = 0
 
TV.ntscmcompcb.std_ntsccb_chroma_phase[0] = 167
TV.ntscmcompcb.std_ntsccb_chroma_phase[1] = 283
TV.ntscmcompcb.std_ntsccb_chroma_phase[2] = 241
TV.ntscmcompcb.std_ntsccb_chroma_phase[3] = 61
TV.ntscmcompcb.std_ntsccb_chroma_phase[4] = 103
TV.ntscmcompcb.std_ntsccb_chroma_phase[5] = 347

;
;PAL TV Standard video parameters for LumaIRE, ChromaIRE, and ChromaPhase
;
TV.palbcompcb.std_palcb_luma_ire[0] = 100
TV.palbcompcb.std_palcb_luma_ire[1] = 66
TV.palbcompcb.std_palcb_luma_ire[2] = 53
TV.palbcompcb.std_palcb_luma_ire[3] = 44
TV.palbcompcb.std_palcb_luma_ire[4] = 31
TV.palbcompcb.std_palcb_luma_ire[5] = 22
TV.palbcompcb.std_palcb_luma_ire[6] = 9
TV.palbcompcb.std_palcb_luma_ire[7] = 0

TV.palbcompcb.std_palcb_chroma_ire[0] = 0
TV.palbcompcb.std_palcb_chroma_ire[1] = 67
TV.palbcompcb.std_palcb_chroma_ire[2] = 95
TV.palbcompcb.std_palcb_chroma_ire[3] = 89
TV.palbcompcb.std_palcb_chroma_ire[4] = 89
TV.palbcompcb.std_palcb_chroma_ire[5] = 95
TV.palbcompcb.std_palcb_chroma_ire[6] = 67
TV.palbcompcb.std_palcb_chroma_ire[7] = 0

TV.palbcompcb.std_palcb_chroma_phase[0] = 167
TV.palbcompcb.std_palcb_chroma_phase[1] = 283
TV.palbcompcb.std_palcb_chroma_phase[2] = 241
TV.palbcompcb.std_palcb_chroma_phase[3] = 61
TV.palbcompcb.std_palcb_chroma_phase[4] = 103
TV.palbcompcb.std_palcb_chroma_phase[5] = 347
;
;PAL_CB Luma IRE Upper and Lower limits
;
TV.palbcompcb.luma_ire_upper[0] = 3  
TV.palbcompcb.luma_ire_upper[1] = 3
TV.palbcompcb.luma_ire_upper[2] = 3
TV.palbcompcb.luma_ire_upper[3] = 3
TV.palbcompcb.luma_ire_upper[4] = 3
TV.palbcompcb.luma_ire_upper[5] = 3
TV.palbcompcb.luma_ire_upper[6] = 3
TV.palbcompcb.luma_ire_upper[7] = 3

TV.palbcompcb.luma_ire_lower[0] = 2
TV.palbcompcb.luma_ire_lower[1] = 2
TV.palbcompcb.luma_ire_lower[2] = 2
TV.palbcompcb.luma_ire_lower[3] = 2
TV.palbcompcb.luma_ire_lower[4] = 2
TV.palbcompcb.luma_ire_lower[5] = 2
TV.palbcompcb.luma_ire_lower[6] = 2
TV.palbcompcb.luma_ire_lower[7] = 0

;PAL_CB Chroma_IRE upper and lower limits

TV.palbcompcb.chroma_ire_upper[0] = 2
TV.palbcompcb.chroma_ire_upper[1] = 2
TV.palbcompcb.chroma_ire_upper[2] = 2
TV.palbcompcb.chroma_ire_upper[3] = 2
TV.palbcompcb.chroma_ire_upper[4] = 2
TV.palbcompcb.chroma_ire_upper[5] = 2
TV.palbcompcb.chroma_ire_upper[6] = 2
TV.palbcompcb.chroma_ire_upper[7] = 2

TV.palbcompcb.chroma_ire_lower[0] = 0
TV.palbcompcb.chroma_ire_lower[1] = 3
TV.palbcompcb.chroma_ire_lower[2] = 3
TV.palbcompcb.chroma_ire_lower[3] = 3
TV.palbcompcb.chroma_ire_lower[4] = 3
TV.palbcompcb.chroma_ire_lower[5] = 3
TV.palbcompcb.chroma_ire_lower[6] = 3
TV.palbcompcb.chroma_ire_lower[7] = 0

;PAL_CB Chroma_Phase upper and lower limits


TV.palbcompcb.chroma_phase_upper[0] = 3
TV.palbcompcb.chroma_phase_upper[1] = 3
TV.palbcompcb.chroma_phase_upper[2] = 3
TV.palbcompcb.chroma_phase_upper[3] = 3
TV.palbcompcb.chroma_phase_upper[4] = 3
TV.palbcompcb.chroma_phase_upper[5] = 3


TV.palbcompcb.chroma_phase_lower[0] = 5
TV.palbcompcb.chroma_phase_lower[1] = 3
TV.palbcompcb.chroma_phase_lower[2] = 3
TV.palbcompcb.chroma_phase_lower[3] = 3
TV.palbcompcb.chroma_phase_lower[4] = 3
TV.palbcompcb.chroma_phase_lower[5] = 3

;Multiburst NTSC/composite Lower limits

TV.ntscmcompmb.freq_respnse_comp_lower[0]=-2
TV.ntscmcompmb.freq_respnse_comp_lower[1]=-2
TV.ntscmcompmb.freq_respnse_comp_lower[2]=-3
TV.ntscmcompmb.freq_respnse_comp_lower[3]=-10
TV.ntscmcompmb.freq_respnse_comp_lower[4]=-16
TV.ntscmcompmb.freq_respnse_comp_lower[5]=-15

;Multiburst NTSC/composite upper limits

TV.ntscmcompmb.freq_respnse_comp_upper[0]=1
TV.ntscmcompmb.freq_respnse_comp_upper[1]=1
TV.ntscmcompmb.freq_respnse_comp_upper[2]=1
TV.ntscmcompmb.freq_respnse_comp_upper[3]=1
TV.ntscmcompmb.freq_respnse_comp_upper[4]=1
TV.ntscmcompmb.freq_respnse_comp_upper[5]=1

;Multiburst NTSC/SVideo Lower limits

TV.ntscmcompmb.freq_respnse_sv_lower[0]=-1
TV.ntscmcompmb.freq_respnse_sv_lower[1]=-2
TV.ntscmcompmb.freq_respnse_sv_lower[2]=-3
TV.ntscmcompmb.freq_respnse_sv_lower[3]=-6
TV.ntscmcompmb.freq_respnse_sv_lower[4]=-8
TV.ntscmcompmb.freq_respnse_sv_lower[5]=-11

;Multiburst NTSC/SVideo upper limits

TV.ntscmcompmb.freq_respnse_sv_upper[0]=1
TV.ntscmcompmb.freq_respnse_sv_upper[1]=1
TV.ntscmcompmb.freq_respnse_sv_upper[2]=1
TV.ntscmcompmb.freq_respnse_sv_upper[3]=1
TV.ntscmcompmb.freq_respnse_sv_upper[4]=1
TV.ntscmcompmb.freq_respnse_sv_upper[5]=1


;Multiburst PAL/composite Lower limits

TV.palcompmb.freq_respnse_comp_lower[0]=-1
TV.palcompmb.freq_respnse_comp_lower[1]=-1
TV.palcompmb.freq_respnse_comp_lower[2]=-1
TV.palcompmb.freq_respnse_comp_lower[3]=-8
TV.palcompmb.freq_respnse_comp_lower[4]=-11
TV.palcompmb.freq_respnse_comp_lower[5]=-12

;Multiburst PAL/composite upper limits

TV.palcompmb.freq_respnse_comp_upper[0]=1
TV.palcompmb.freq_respnse_comp_upper[1]=1
TV.palcompmb.freq_respnse_comp_upper[2]=1
TV.palcompmb.freq_respnse_comp_upper[3]=1
TV.palcompmb.freq_respnse_comp_upper[4]=1
TV.palcompmb.freq_respnse_comp_upper[5]=1

;Multiburst PAL/SVideo Lower limits

TV.palcompmb.freq_respnse_sv_lower[0]=-2
TV.palcompmb.freq_respnse_sv_lower[1]=-3
TV.palcompmb.freq_respnse_sv_lower[2]=-3
TV.palcompmb.freq_respnse_sv_lower[3]=-5
TV.palcompmb.freq_respnse_sv_lower[4]=-8
TV.palcompmb.freq_respnse_sv_lower[5]=-12

;Multiburst PAL/SVideo upper limits

TV.palcompmb.freq_respnse_sv_upper[0]=1
TV.palcompmb.freq_respnse_sv_upper[1]=1
TV.palcompmb.freq_respnse_sv_upper[2]=1
TV.palcompmb.freq_respnse_sv_upper[3]=1
TV.palcompmb.freq_respnse_sv_upper[4]=1
TV.palcompmb.freq_respnse_sv_upper[5]=1




[testflow];-- This section must follow parameters section
;-- Flow parameters first


;Color Bars tests

;run TV.ntscmcompcb,videomode=1, looplimit=1
;run TV.ntscmsvcb,videomode=1, looplimit=1
;run TV.ntscjcompcb,videomode=1, looplimit=1
;run TV.ntscjsvcb,videomode=1, looplimit=1
;run TV.palbcompcb, videomode=1, looplimit=1
;run TV.palbsvcb, videomode=1, looplimit=1
;run TV.palncompcb, videomode=1, looplimit=1
;run TV.palnsvcb, videomode=1, looplimit=1
;run TV.palmcompcb, videomode=1, looplimit=1
;run TV.palmsvcb, videomode=1, looplimit=1
;run TV.secamcompcb, videomode=1, looplimit=1
;run TV.secamsvcb, videomode=1, looplimit=1

;Multiburst tests
;run TV.ntscmsvmb, videomode=1, looplimit=1
;run TV.ntscjcompmb, videomode=1, looplimit=1
;run TV.ntscjsvmb, videomode=1, looplimit=1
;run TV.palbcompmb, videomode=1, looplimit=1
;run TV.palbsvmb, videomode=1, looplimit=1
;run TV.palncompmb, videomode=1, looplimit=1
;run TV.palnsvmb, videomode=1, looplimit=1
;run TV.palmcompmb, videomode=1, looplimit=1
;run TV.palmsvmb, videomode=1, looplimit=1
;run TV.secamcompmb, videomode=1, looplimit=1
;run TV.secamsvmb, videomode=1, looplimit=1

;mode 1 = 640x480 32Bpp.
;mode 2 = 704x480 32Bpp.
;mode 3 = 720x480 32Bpp.
;mode 4 = 640x576 32Bpp.
;mode 5 = 704x576 32Bpp.
;mode 6 = 720x576 32Bpp.
;mode 7 = 1280x720 32Bpp.
;mode 8 = 1920x1080 32Bpp.

;run loop, haltonerror = false, timelimit = 3600, looplimit = 5, debugmask = 3, maxtimeout = 30
;run loop, haltonerror = false, timelimit = 3600, looplimit = 1

haltonerror = false
timelimit = 3600
timeoutlimit = 30
looplimit = 5

;NTSCM tests
run tool.set_display_mode, debugmask=1, videomode=1, tiu=disabled, bbuffer_format=1, pack=svideo, standard=ntsc_m, refresh_rate=60

;NTSCM_Composite Color Bars
run TV.ntscmcompcb,looplimit = 1

;NTSCM_svideo Color Bars
run TV.ntscmsvcb,looplimit = 1

;NTSCM_Composite Multiburst
run TV.ntscmcompmb,looplimit = 1

;NTSCM_svideo Multiburst
run TV.ntscmsvmb,looplimit = 1



;NTSCJapan tests
run tool.set_display_mode, debugmask=1, videomode=1, tiu=disabled, bbuffer_format=1, pack=svideo, standard=ntsc_j, refresh_rate=60

;NTSCJapan_Composite Color Bars
run TV.ntscjcompcb

;NTSCJapan_svideo color bars
;run TV.ntscjsvcb

;NTSCJapan_composite Multiburst
;run TV.ntscjcompmb

;NTSCJapan_sv Multiburst
;run TV.ntscjsvmb

;PALBDGHI tests
run tool.set_display_mode, debugmask=1, videomode=1, tiu=disabled, bbuffer_format=1, pack=svideo, standard=pal_i, refresh_rate=50

;PALBDGHI_Composite Color Bars
run TV.palbcompcb,looplimit = 1

;PALBDGHI_svideo color bars
;run TV.palbsvcb

;PALBDGHI_composite multiburst
;run TV.palbcompmb,looplimit = 20

;PALBDGHI_svideo Multiburst
run TV.palbsvmb,looplimit = 1


;PALM tests
;PAL_M has to switch two time to make it works
;run tool.set_display_mode, debugmask=1, videomode=1, tiu=disabled, bbuffer_format=1, pack=svideo, standard=pal_m, refresh_rate=60
;run tool.set_display_mode, debugmask=1, videomode=1, tiu=disabled, bbuffer_format=1, pack=svideo, standard=pal_m, refresh_rate=60


;PALM_composite color bars
;run TV.palmcompcb, looplimit=2

;PALM_svdieo Color Bars
;run TV.palmsvcb,looplimit=2


;PALM_composite multiburst
;run TV.palmcompmb,looplimit=6

;PALM_svideo multiburst
;run TV.palmsvmb


;PALN tests
;run tool.set_display_mode, debugmask=1, videomode=1, tiu=disabled, bbuffer_format=1, pack=svideo, standard=pal_n, refresh_rate=60

;PALN_Composite Color Bars
;run TV.palncompcb, videomode=1, looplimit=1

;PALN_svideo color bars
;run TV.palnsvcb, videomode=1, looplimit=1

;PALN_composite multiburst
;run TV.palncompmb, videomode=1, looplimit=1

;PALN_svideo multiburst
;run TV.palnsvmb, videomode=1, looplimit=1

;SECAM tests
;run tool.set_display_mode, debugmask=1, videomode=1, tiu=disabled, bbuffer_format=1, pack=svideo, standard=secam, refresh_rate=60

;SECAM_Composite Color Bars
;run TV.secamcompcb, videomode=1, looplimit=1

;SECAM_SVIDEO color bars
;run TV.secamsvcb, videomode=1, looplimit=1

;SECAM_composite Multiburst
;run TV.secamcompmb,videomode=1, looplimit=1

;SECAM_svideo Multiburst
;run TV.secamsvmb, videomode=1, looplimit=1
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\sdktools\xdktools\xbcap\xprofile.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Instructions for collecting CAP (Call-Attributed-Profile) data on Xbox TitleInstructions for collecting CAP (Call-Attributed-Profile) data on Xbox davidx Normal davidx Microsoft Word 9.0Instructions for collecting CAP (Call-Attributed-Profile) data on Xbox Build kernel, xbdm, and xapilib with profile support You don t have to do this step anymore. Profile support is now enabled by default on DEVKIT builds. Profile support is currently not enabled by default. To enable it, set the environment ENABLE_XPROFILE in your razzle window, e.g. by adding the following line to your setenv.cmd: set ENABLE_XPROFILE=1 Rebuild everything clean. Instrument the code you want to profile This is done by compiling your code with the /fastcap option. E.g. you can add the following line to your sources file: PERFFLAGS=/fastcap Run your code and collect profile data There are two options available to start / stop profile data collection. - Start / stop profile data collection programmatically This is done by calling XProfpControl function (declared in ntos\inc\xprofp.h). NTSTATUS XProfpControl( ULONG Action, ULONG Param Action parameter can be one of the following constants: XPROF_START start profile data collection The low-order WORD of Param specifies the amount of memory to allocate for the profile data buffer (in MB, default is 32). The high-order WORD of Param contains various flag bits. XPROF_DPC_ENABLED flag specifies that DPC calls are to be recorded. XPROF_STOP stop profile data collection Param is ignored XPROF_COMMENT insert your own comment record into the profile data buffer (see info below about profile data record format) Param is a user-defined value that ll be recorded into profile data buffer. - Start / stop profile data collection via the debugger connection This is done by using the xbcap command. xbcap [-x xboxname] start start profile data collection on the Xbox machine xbcap [-x xboxname] stop cap-filename stop profile data collection on the Xbox machine and retrieve the profile data and store it in the specified file The first option gives you more control over exact internal of profile data collection. The second option allows you to collect profile data without having to add any special code. Retrieve profile data to your PC You can run xbcap stop command to retrieve the profile data to your PC and store it in a file. View and analyze the profile data There are several options for viewing the profiling data: Use xbcap dump to convert the profile data into Office Profile Viewer (.OPF) format. And then run offview to analyze the data. xbcap [-s symbol-path] [-dpc] [-idle] dump cap-filename opf-filename -s option is used to specified the symbol search path. If it s not present, the environment variable _NT_SYMBOL_PATH is used by default. idle option is specified, then the idle thread time is not displayed. Rather, the time spent in the idle thread is attributed to the thread that was running before the system switched to the idle thread. dpc option to dump all DPC calls. DPC calls are not dumped by default. offview opf-filename view the profile data  Write our your own utility to perform simple analysis (see the profile data file format description below) Our profile data file has a very simple format. It consists of a fixed header followed by a sequence of profile data records. The file header is 4KB and is defined as: typedef struct {     ULONG version;     ULONG module_count;     struct {         ULONG loadaddr;         ULONG size;         ULONG reserved[2];         CHAR name[48];     } modules[16];     UCHAR reserved[3064]; } XProfpFileHeader; The fields are: version   File version number, 1 for the version defined in this doc module_count   Number of module loaded in the system when the profile data file was created modules   Information about each loaded module loadaddr   module base address in memory size   module size name   module name Each record is defined as: struct { ULONG TimestampHigh; ULONG TimestampLow; ULONG Params[1]; The timestamp fields are common to all record types. It contains the CPU clock cycle count at the time the record is generated. The three most significant bits of the TimestampHigh field is used as control flags, to indicate the record type.  CALL-BEGIN This record is generated just before your code is about to make a function call. It has two parameters: Params[0] is the address of the caller function. Params[1] is the address of the called function.  CALL-END This record is generated just after your code returns from a function call. It has one parameter: Params[0] is the address of the caller function. 010 to 110   reserved  CONTROL record This record is generated when you call XProfpControl. It has two parameters: Params[0] is the control record type and Params[1] is the type-specific parameter. XPROF_START = 1 XPROF_STOP = 2 Params[1] is the current thread ID XPROF_COMMENT = 4 Params[1] is the user-defined parameter you  passed to XProfpControl XPROF_THREAD_SWITCH = 5 This record is automatically generated by the kernel during a thread context switch. Params[1] is the ID of the new thread we re switching to. XPROF_DPC_BEGIN = 6 XPROF_DPC_END = 7 Start and end of a DPC routine. Params[1] is the DPC routine address. The first record of the profile data file is always CONTROL/XPROF_START. But a CONTROL/XPROF_STOP record is not guaranteed to be always present at the end of the file. For each function call your code makes, two records are generated. For example, if Foo calls Bar, you end up with two records: CALL-BEGIN(Foo, Bar, timestamp1) CALL-END(Foo, timestamp2) re currently only profiling the CPU clock cycles. But with the infrastructure in place, we can add options to profile other information (e.g. various perf counters in the processor) when needed.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\sdktools\xdktools\xbnmspc\dll\desktop.ini ===
[ExtShellFolderViews]
Default={5984FFE0-28D4-11CF-AE66-08002B2E1262}
{5984FFE0-28D4-11CF-AE66-08002B2E1262}={5984FFE0-28D4-11CF-AE66-08002B2E1262}
[{5984FFE0-28D4-11CF-AE66-08002B2E1262}]
PersistMoniker=file://Folder.htt
[.ShellClassInfo]
ConfirmFileOp=0
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\docs\setup-faq.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Building and Maintaining Setup TitleBuilding and Maintaining Setup Jason Cahill Normal.dot Jason Cahill Microsoft Word 10.0DfMF@Building and Maintaining Setup Specification / FAQ Summary Now that we have moved from InstallShield to our own custom install engine, we hope that developers will be able to add their own files to setup. This document describes: How files get into setup How to build a test setup on your machine Our file layout philosophy, so you know where to add your files to setup What is our new setup technology? It is a home brewed installer written by JonT. It is a generic setup engine, but was specifically built with our project s needs in mind. SDK s are a little bit different that other applications like Office, and as such, we needed an installer that could do things like: Install a new build over previous builds without uninstalling When an  upgrade  is completed it needs to update the list of files to uninstall the new version as well as the previous version s files We wanted to support multiple  flavors  of install, including  Complete  and  Tools only.  We also wanted to support  English only files  as well as  Japanese only files. We needed custom code to run before and after file copy to check for specific  prerequisites  like Windows 2000, Visual Studio 6, Processor Pack, etc. Why did we write our own setup? Isn t that wasted effort and dumb? s sad that we had to resort to writing our own setup. We didn t want to write our own setup, but after examining all of the alternatives, it just made sense. We looked at a number of other setup technologies, including: Staying with InstallShield 6.22   fundamentally, I doubt that InstallShield is really as awful as it seemed, but the way our setup worked using it was  mystical  and only truly understood completely by one person. This made it unmaintainable and fragile. IExpress / ActiveSetup   This technology is so brain-dead simple and it did 80% of what we wanted very easily. The reason we chose not to use it was that it didn t provide for multiple install flavors, didn t easily support custom code, and required the use of a single CAB to contain all of the files we wanted to install. This was a real problem because the CAB cannot have hierarchy. On top of this, IExpress is no longer supported internally. These reasons ruled it out.  We took a very serious look at MSI, both rolling our own with tools like WIX (Windows Installer XML) or having hand-holding help with tools like InstallShield for MSI. We opted against this because of the complexity of understanding how it worked. Fundamentally, our installer installer just needs to install source files. The amount of complexity required to just install files with MSI was incredible. On top of that, QFE s and upgrade installs were a nightmare. So, at the end of our investigation, we decided that rolling our own was the only real way to get what we wanted. Where is setup s source code? It lives in our Source Depot tree at: \Private\Setup \common - files shared between the various parts of setup \docs - the home for setup information \mkplist \packer - the sources for xpacker (creator of the setup.exe) \test \uninstall - the sources for the uninstall.exe \unpacker - the sources for the setup.exe - this is where our setup manifest for the XDK lives Where do we store the information that builds XDK setup? \Private\Setup\XDK This directory contain the following contents: xdk.csv - our setup manifest for all build flavors xdk.ini  - the file that tells the setup packer how to build a complete, English setup xdk.ini  - the file that tells the setup packer how to build a complete, Japanese setup What command-line tools help build setup? Just one: xpacker.exe Usage: xpacker [flags] [filename] Packer builds a self-extracting executable as part of a simple setup engine.         -? This message         -t test build (don't emit any files but report errors) It requires a .INI file that describes where to locate the file packing list and the extractor .EXE to bundle in. It builds a .CAB file and a file manifest and attaches these to the extractor executable, which is a setup engine. How do I build a test setup? Follow these steps: make sure you have the setup command-line tools built: dir /s xpacker.exe If this file cannot be found, type: src setup [enter] set up the ini file to build with your configuration: src setup\xdk\eng sd edit xdk.ini notepad xdk.ini This file should look something like this: ; XDK_ENG.INI [PackerSettings] CabPath=. PackingList=..\xdk.csv Manifest=manifest_eng.txt UnpackerTemplate=%_NTBINDIR%\private\setup\unpacker\eng\obj\i386\unpacker.exe UnpackerNewExe=XDKSetup.exe LicenseFile=%_NTBINDIR%\private\ue\sdk\relnotes\readme1st.txt BuildFlavor=BE Uninstaller=%Pdrive%\free\dump\xbuninst.exe CompressionType=LZX CompressionLevel=6 ;MinVersionAllowed=1,0,3521,1 -- Uncomment this for a QFE install and put correct build number here [PackerPaths] PUBLICXDKRETAIL=%Pdrive%\free\public\xdk PUBLICXDKDEBUG=%Pdrive%\checked\public\xdk PUBLICSDKRETAIL=%Pdrive%\free\public\sdk PUBLICSDKDEBUG=%Pdrive%\checked\public\sdk PUBLICWSDKRETAIL=%Pdrive%\free\public\wsdk PUBLICMSTOOLS=%Pdrive%\free\public\mstools XGRAPHICS=%_NTBINDIR%\private\windows\directx\dxg\xgraphics DOCS=%_NTBINDIR%\private\ue DOCBUILD=%Pdrive%\doc SDKFILES=%_NTBINDIR%\private\sdk\sdkfiles SDKSETUP=%_NTBINDIR%\private\sdk\sdksetup EXTERNAL=%_NTBINDIR%\private\external XBOXBINSRETAIL=%Pdrive%\free XBOXBINSDEBUG=%Pdrive%\checked ATGSAMPLES=%_NTBINDIR%\private\atg\samples TOOLS=%_NTBINDIR%\private\windows\directx\dxg\tools [UnpackerSettings] UpgradeKey=HKLM,SOFTWARE\Microsoft\XboxSDK,InstallPath DefaultDirText=Microsoft Xbox SDK StartMenuFolder=Microsoft Xbox SDK [UnpackerPaths] VSCOMMON=REGKEY:HKLM,Software\Microsoft\VisualStudio\6.0\Setup,VsCommonDir, PROGRAMFILES=REGKEY:HKLM,Software\Microsoft\Windows\CurrentVersion,ProgramFilesDir, XDK=DEFAULT [UnpackerDirFlags] [Strings] This file describes all of the necessary information to build a setup.exe for a complete English install. The only settings you should need to change fall under the [PackerPaths] heading. This section lists the location of directories for files that the packer picks up when it builds the setup.exe file. Each of the paths in this section are referenced by commands in the CSV file, described below. We use environment variables to pick up most things directly from your source depot enlistment. Every file that doesn t come from source depot is a built file. The INI file (by default) assumes that all built files come from our build machine. The environment variable %pdrive% should be set (before running packer) to the location of the build machine. Specifically, you should have run: set pdrive=\\xbuilds\release\usa\3624 If you d like to have the packer test building setup against the files built on your machine (rather than picking up built files from the build machine) you need to modify the packer path: XBOXBINSRETAIL=%Pdrive%\free To point to your build directory: XBOXBINSRETAIL=%_NT386TREE% Save the file and exit notepad. build setup! set pdrive=\\xbuilds\release\usa\<build number> %_NT386TREE%\dump\xpacker  t xdk.ini This command runs the setup packer in  test mode . It will basically test to see if every file it is supposed to install is present. Any missing files will be flagged as errors. What are flavors? What flavors do we use / plan to use? Flavors are used to designate which files should live in which setups. We have multiple setup.exes depending on different user needs. For our setup s purposes, a flavor is a single letter identifier. This identifier has no intrinsic meaning to the packer. It only has meaning to a specific INI file that builds a specific setup.exe. We use flavors so that we can have a single source file (the xdk.csv) for all possible setup.exes that we could ever need or want. We then have multiple INI files (one per setup.exe) that processes the giant csv file and creates a specific install manifest for that flavor of setup.exe. Here are the flavors we currently use: Base. This flavor includes every file in a  Complete  install of the XDK. English. Files with this flavor exist in English setups. Japanese. Files with this flavor exist in Japanese setups. Here are the flavors we are planning to use in the future: CD. This flavor will be used for CD installs. Tools-only. Files with this flavor will exist in the Tools-only install. Can I have multiple flavors for a file? Yes, a CSV command can specify multiple flavors. For example a file marked as BE will only be included in  base+English  installs. Be careful how flavors get combined: A file marked BEJ will only get put in  base+English+Japanese  setups. That means it is unlikely to exist in any setup. Where is the big list of files that we install? What is the format? Source Depot: \private\setup\xdk\xdk.csv The format, as the file extension implies is comma-separated value. This file contains all of the commands to install files, remove old files and directories on upgrade, add and delete registry entries, and create Start Menu shortcuts. Each line of the file performs one action. There are three kinds of legal lines: comment   a line starting with a   symbol. Everything after the ; until the end of the line is ignored. blank line   has no effect. comma-separated value instruction   the action varies, depending on the command. The most common type of lines in the file are the CSV instructions. The number of comma-value pairs on a line depends on the command. We presently support six different commands. Each is described separately, below: Removing a directory and all of its contents: The removedir command is used to permanently kill a directory and all of its subfiles and folders. Syntax: <flavor>, <command>, <targetdir>, <targetpath>, <targetfile>, <flags> Where: <flavor> is the build flavor that this command should execute in. <command> is removedir. <targetdir> maps to one of the UnpackerPaths in the INI file specified to xpacker. <targetpath> a path to concatenate to the resolved <targetdir> <targetfile> this should be blank. <flags> this can be either empty or  . An   indicated that this removedir should only occur on the first install of the XDK. All subsequent installs will not cause this removedir to occur. Removing a file The remove command is used to permanently kill a file. Syntax: <flavor>, <command>, <targetdir>, <targetpath>, <targetfile>, <flags> Where: <flavor> is the build flavor that this command should execute in. <command> is remove. <targetdir> maps to one of the UnpackerPaths in the INI file specified to xpacker. <targetpath> a path to concatenate to the resolved <targetdir> <targetfile> this is the name of the file to remove. <flags> this can be either empty or  . An   indicated that this remove should only occur on the first install of the XDK. All subsequent installs will not cause this remove to occur. Deleting a registry entry The delreg command is used to remove a registry entry or tree of entries. Syntax: <flavor>, <command>, <root key>, <subkey>, <valuename>, <value>, <flags> Where: <flavor> is the build flavor that this command should execute in. <command> is delreg. <rootkey> maps to one of the following options: HKCR   HKEY_CLASSES_ROOT HKLM   HKEY_LOCAL_MACHINE HKCU   HKEY_CURRENT_USER <subkey> is the   to the key you want to delete. <valuename> is the name of the key you want to delete. <value> not used for delreg. <flags> not used for delreg. Adding a registry key The addreg command is used to remove a registry entry or tree of entries. Syntax: <flavor>, <command>, <root key>, <subkey>, <valuename>, <value>, <flags> Where: <flavor> is the build flavor that this command should execute in. <command> is addreg. <rootkey> maps to one of the following options: HKCR   HKEY_CLASSES_ROOT HKLM   HKEY_LOCAL_MACHINE HKCU   HKEY_CURRENT_USER <subkey> is the   to the key you want to add. <valuename> is the name of the key you want to add.. <value> the value of the key you want to add. <flags> unknown Installing a file The file command is used to install a file. Syntax: <flavor>, <command>, <sourcedir>, <sourcepath>, <sourcefile>, <targetdir>, <targetpath>, <targetfile>, <flags> Where: <flavor> is the build flavor that this command should execute in. <command> is file. <sourcedir> maps to one of the PackerPaths in the INI file specified to xpacker. <sourcepath> a path to concatenate to the resolved <sourcedir> <sourcefile> this is the name of the file to install. <targetdir> maps to one of the UnpackerPaths in the INI file specified to xpacker. <targetpath> a path to concatenate to the resolved <targetdir> <targetfile> this is the name of the file as it should be named when installed. If this is left blank, then the <sourcefile> name is used. You specify this field to do a  rename  from source to install point. We currently do this with English vs Japanese files that we want to have the same name. Adding a Start Menu shortcut The shortcut command is used to add an icon to the Start menu. Syntax: <flavor>, <command>, <targetdir>, <targetpath>, <targetfile>, <shortcutpath>, <shortcutfile>, <description> Where: <flavor> is the build flavor that this command should execute in. <command> is shortcut. <targetdir> maps to one of the UnpackerPaths in the INI file specified to xpacker. <targetpath> a path to concatenate to the resolved <targetdir> <targetfile> this is the name of the file that you want the shortcut to reference. <shortcutpath>  this is the path to the shortcut in the Start Menu. If this is left blank, then it will resolve to Start -> Program -> Microsoft Xbox SDK. If this is not blank, the value creates folders under this path. <shortcutfile>  the name of the shortcut to create (this ends in .LNK). <description>  the text that you want to appear in the  Description  area of the shortcut s property page. How are lines in the CSV file processed during install? Sequentially from top to bottom. This means you could have a command to remove file  , install file  , and then remove file  . This is a stupid example, but it is possible. Where do I install my files to? Below is a tree layout of our current setup philosophy for placing files. Please try to stick with this as much as possible if you add your own files. +---Doc [help files go here] +---Include [Win32 inc files for Xbox tools] +---Lib [Win32 lib files for Xbox tools] +---Samples s samples] |   +---Win32 [Samples for Win32] |   |   \---Misc [Misc. Samples] |   \---Xbox [Samples for Xbox] |       +---Common [Common Framework for Xbox] |       +---Graphics [Graphics Samples] |       +---Misc [Misc. Samples] |       +---Networking [Networking Samples] |       +---ReferenceUI [Reference UI Samples / TCR] |       \---Sound [Audio Samples] +---Source [Source code for Libs / CRT] +---Tools [Tools Source Code] |   \---Win32 [Tools for Win32 Source Code] |       \---Graphics [Graphics Tools Source Code] \---Xbox [File for creating Xbox projects]     +---Bin [Executable tools for Win32]     |   +---kd [Kernel Debugger]     |   \---VC7 [VC7 command-line tools]     +---Include [Include files for Xbox projects]     |   \---Sys     +---Lib [Library files for Xbox projects]     \---Symbols [Symbols for kernel / xbdm] gdjST gdjST gdjST gdjST gdjST gdXb; gdXb; gdLR4 gdLR4 gdLR4 gdLR4
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\test\mkplist.ini ===
[MakePackingList]
Flavor=B
SourceRoot=PUBLIC
DestinationRoot=XDKPUBLIC
Path=c:\xbox\public\xdk

[ExcludeList]
.lib=
obj=
lib=
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\test\relnotes.txt ===
These are some sample release notes
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\test\foo\another_copy_of_relnotes.txt ===
These are some sample release notes
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\test\foo\copy_of_relnotes.txt ===
These are some sample release notes
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\test\readme.txt ===
Xbox Development Kit for the Xbox(tm) video game console from Microsoft 
March 2001 Release Readme File

(c) Microsoft Corporation, 2000-2001. All rights reserved.
__________________________________________________________________

Contents

- Release Notes and Known Issues
- Installation
- Uninstallation
__________________________________________________________________

Release Notes and Known Issues

This file contains information you need to know before installing 
or uninstalling the Microsoft Xbox Development Kit (XDK) software,
including the Xbox SDK (the tools and documentation). For all 
other XDK release note information, including setting up the XDK 
target system and your development environment, refer to the 
release notes included in your XDK.

This release of the XDK includes an updated target system recovery
disc that contains a new version of the Xbox System Software.
Refer to the Xbox SDK online help for information on updating your
target system. 
__________________________________________________________________

Installation

Installing the latest version of the Xbox SDK is the only step
required on the development system for the March 2001 XDK release,
provided you have already installed a previous version of the SDK.

It is not necessary to uninstall a prior release of the Xbox SDK
before installing this update. If you do not have a prior release
of the Xbox SDK installed, first perform the steps in the section
"No Prior SDK Installed" below.

You must have permissions at the level of Administrator in order
to perform the installation.  Refer to the Microsoft(r) Windows(r) help system
for further information.

To install, insert the March 2001 SDK disc into your development
system CD drive, select Install Xbox SDK - March 2001 from the
installation screen, and follow the instructions. Alternately,
you can download and install the March 2001 XDK Update from the
beta support Web site (www.betaplace.com).

Note: When the installation program copies an updated file to the
SDK directory on your hard disk, it will overwrite the existing
file even if that file has been modified by you since the last SDK
install. For example, if you have made changes to the sample or
tutorial code installed with a previous SDK, but left those modified
files in the same location and with the same filename, the update
will overwrite those files with new versions and you will lose any
changes you might have made. Copy any modified files you wish to
retain to a new location prior to installing the SDK.
__________________________________________________________________

No Prior SDK Installed

If you do not have a prior release of the Xbox SDK installed,
follow these instructions before downloading and running the SDK
update:

1. If you have not already done so, upgrade your development 
   system to Microsoft Windows 2000 with Service Pack 1. For 
   installation instructions, see the Windows 2000 Service Pack 1
   documentation.  

      Note: Windows 2000 with Service Pack 1 is the only operating 
      system supported by the Xbox Development Kit. 

2. Install Microsoft Visual C++ 6.0 Professional. For 
   installation instructions, see the Visual C++ documentation. 

      Note: This step is not necessary if a licensed copy of 
      Visual C++ 6.0 is already installed on the development 
      system.

      Note: It is not necessary to install the Visual C++ Service 
      Pack 3 (included with the copy of Visual C++ 6.0 in the     
      XDK). 

3. Install Visual C++ 6.0 Service Pack 4 from the Service Pack 4 
   disc included with the XDK. The install program runs 
   automatically when this disc is inserted into the development 
   system CD drive. To install, follow the instructions on the 
   screen. Service Pack 4 does not include an uninstall utility.
   If you want to uninstall Service Pack 4, you must uninstall and
   reinstall Visual C++ 6.0.

4. Install the Microsoft Visual C++ Processor Pack from the XDK 
   March 2001 SDK disc. To install, insert the disc into your 
   development system CD drive, select Install Visual C++ 
   Processor Pack from the installation screen, and follow the 
   instructions (the Processor Pack is located in the VCPP 
   directory on the disc). 
__________________________________________________________________

Uninstallation

To uninstall the Xbox SDK:

1. Either run Setup.exe from the root folder of the XDK disc, or
   launch the Add/Remove Programs dialog from the Windows
   Control Panel, select Microsoft Xbox SDK, and then select 
   Change/Remove. 
   
2. Setup will detect the previous installation of the Xbox SDK.
   Follow the instructions on the screen. 

      Note: Uninstalling the Xbox SDK may not delete all files 
      installed with the Xbox SDK. To complete uninstallation, 
      manually delete the Xbox SDK root folder (located at 
      C:\Program Files\Microsoft Xbox SDK, by default). 

For uninstallation of Microsoft Visual C++, see the Visual C++ 
documentation. You cannot uninstall Visual C++ Service Pack 4 or 
the Processor Pack separately.
__________________________________________________________________
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\test\test.ini ===
; TEST.INI

[PackerSettings]
CabPath=.
PackingList=test.csv
Manifest=manifest.txt
UnpackerTemplate=..\unpacker\eng\obj\i386\unpacker.exe
UnpackerNewExe=xdksetup.exe
LicenseFile=readme.txt
BuildFlavor=B
Uninstaller=..\uninstall\eng\obj\i386\xbuninst2.exe
CompressionType=LZX
CompressionLevel=6
UpdateDatesToAtLeast=5/31/2001

[PackerPaths]
PUBLIC=%_NTDRIVE%%_NTROOT%\public\xdk
TEST=.

[UnpackerSettings]
ProductKey=HKLM,Software\Microsoft\TestSetup
ProductName=Microsoft Xbox Internal Test Installation
DefaultDirText=TestSetup
StartMenuFolder=Test Setup
;MinVersionAllowed=1,0,4000,1
;SkipLicensePage=Y

[UnpackerPaths]
XDK=DEFAULT
XDKPUBLIC=DEFAULT
SYSTEM_DIR=SYSTEM

[UnpackerDirFlags]

[Strings]
WelcomeMessage=Welcome to the Test Installation Package
ProductDescription=This package is designed to test the features of the Xbox Setup Engine.  It includes a bunch of bogus files and registry settings.
LicenseTitle=The canonical license page.
LicenseSubtitle=Contains instruction on breaking setup.
LicenseInstruction=Please read the below text file and see if it makes any sense.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\test\foo\fake_copy_of_relnotes.txt ===
Thexe are some sample release notes
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\xbse\license.txt ===
License information for the Microsoft Windows Explorer Shell Extension For Xbox
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\xdk\xdk.ini ===
; XDK.INI

; English / Default Packer Settings
[PackerSettings]
UnpackerTemplate=%_SETUP_FILE_PATH%\unpacker.exe
Uninstaller=%_SETUP_FILE_PATH%\xbuninst2.exe
CustomDll=%_SETUP_FILE_PATH%\xdkcustom.dll
UnpackerNewExe=%_SETUP_TARGET_PATH%\XDKSetup%_BuildVer%.exe
CabPath=.
PackingList=xdk.csv
Manifest=manifest.txt
LicenseFile=%_NTBINDIR%\private\ue\sdk\relnotes\readme1st.txt
LicenseFile1=%_NTBINDIR%\private\ue\sdk\relnotes\readme1stjpn.txt
BuildFlavor=BOEJ
CompressionType=LZX
CompressionLevel=6
UpdateDatesToAtLeast=2/1/2002

[PackerPaths]
PUBLICXDKRETAIL=%Pdrive%\free\public\xdk
PUBLICXDKRETAIL_4039=\\xdb01\buildarchive\4039_nov01\free\public\xdk
PUBLICXDKDEBUG=%Pdrive%\checked\public\xdk
PUBLICSDKRETAIL=%Pdrive%\free\public\sdk
PUBLICSDKDEBUG=%Pdrive%\checked\public\sdk
PUBLICWSDKRETAIL=%Pdrive%\free\public\wsdk
PUBLICMSTOOLS=%Pdrive%\free\public\mstools
XGRAPHICS=%_NTBINDIR%\private\windows\directx\dxg\xgraphics
DOCS=%_NTBINDIR%\private\ue
DOCBUILD=%Pdrive%\doc
SDKFILES=%_NTBINDIR%\private\sdk\sdkfiles
SDKSETUP=%_NTBINDIR%\private\sdk\sdksetup
EXTERNAL=%_NTBINDIR%\private\external
XBOXBINSRETAIL=%Pdrive%\free
XBOXBINSDEBUG=%Pdrive%\checked
ATGSAMPLES=%_NTBINDIR%\private\atg\samples
ATGTOOLS=%_NTBINDIR%\private\atg\tools
TOOLS=%_NTBINDIR%\private\windows\directx\dxg\tools
DIRECTX=%_NTBINDIR%\private\windows\directx
PRIVATE=%_NTBINDIR%\private
SETUPTARGET=%Pdrive%

[UnpackerSettings]
ProductName=Microsoft Xbox Software Development Kit
LicenseFile=license.txt
ProductKey=HKLM,SOFTWARE\Microsoft\XboxSDK
DefaultDirText=Microsoft Xbox SDK
StartMenuFolder=Microsoft Xbox SDK
Languages=0409:0411
DefaultLanguage=0409
;SkipLicensePage=Y --Uncomment to skip the license page

; Multiple License files need to follow a pattern.  If (above), you specify it with "LicenseFile1", the result below must be "license.txt1".
[UnpackerSettings_0411]
ProductName=Microsoft Xbox SDK
LicenseFile=license.txt1

[UnpackerPaths]
VSCOMMON=REGKEY:HKLM,Software\Microsoft\VisualStudio\6.0\Setup,VsCommonDir,
PROGRAMFILES=REGKEY:HKLM,Software\Microsoft\Windows\CurrentVersion,ProgramFilesDir,
ALLUSERSCOMMONPROGRAMS=REGKEY:HKLM,Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders,Common Programs,
CURRENTUSERCOMMONPROGRAMS=REGKEY:HKCU,Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders,Programs,
XDK=DEFAULT
SYSTEM_DIR=SYSTEM
;MinVersionAllowed=1,0,3521,1 -- Uncomment this for a QFE install and put correct build number here

[UnpackerDirFlags]

; English / Default Strings
[Strings]
WelcomeMessage=Welcome to the Microsoft Xbox Software Development Kit
ProductDescription=The Microsoft Xbox SDK includes documentation, tools, and samples that help you develop games for the Xbox Video Game System by Microsoft.
LicenseTitle=Xbox SDK Release Notes
LicenseSubtitle=Contains late-breaking and important information for you to get the most out of the SDK.
LicenseInstruction=Please read the release notes before proceeding.


; Japanese Strings
[Strings_0411]
WelcomeMessage=Microsoft Xbox SDK ւ悤
ProductDescription=Microsoft Xbox SDK ɂ́Abox rfIQ[ VXep̃Q[JۂɕKvȃhLgAc[AуTv܂܂Ă܂B
LicenseTitle=Xbox SDK Ɋւ郊[X m[g
LicenseSubtitle=SDK őɂpŐVdv񂪊܂܂Ă܂B
LicenseInstruction=n߂OɁÃ[X m[gǂ݂B
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\xbse\xbse.ini ===
; XBSE.INI

; English / Default XBSE Settings
[PackerSettings]
UnpackerTemplate=%_SETUP_FILE_PATH%\unpacker.exe
Uninstaller=%_SETUP_FILE_PATH%\xbuninst2.exe
UnpackerNewExe=%_SETUP_TARGET_PATH%\XBSESetup.exe
CabPath=.
PackingList=xbse.csv
Manifest=manifest.txt
LicenseFile=license.txt
BuildFlavor=BE
CompressionType=LZX
CompressionLevel=6
UpdateDatesToAtLeast=6/28/2001

[PackerPaths]
XBOXBINS=%Pdrive%

[UnpackerSettings]
ProductKey=HKLM,SOFTWARE\Microsoft\XboxShellExt
ProductName=Microsoft Windows Explorer Shell Extension For Xbox
LicenseFile=license.txt
DefaultDirText=Microsoft Explorer Shell Extension for Xbox
Languages=0409
DefaultLanguage=0409
SkipLicensePage=Y
;MinVersionAllowed=1,0,3521,1 -- Uncomment this for a QFE install and put correct build number here

[UnpackerPaths]
XBSE=DEFAULT
SYSTEM_DIR=SYSTEM
ALLUSERSCOMMONPROGRAMS=REGKEY:HKLM,Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders,Common Programs,
CURRENTUSERPROGRAMS=REGKEY:HKCU,Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders,Programs,

[UnpackerDirFlags]

[Strings]
WelcomeMessage=Microsoft Windows Explorer Shell Extension for Xbox Setup
ProductDescription=This extension seamlessly integrates the ability to browse Xbox Development Kit Consoles into Windows Explorer.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\setup\xdk\xonline.ini ===
; XONLINE.INI

[PackerSettings]
UnpackerTemplate=%_SETUP_FILE_PATH%\unpacker.exe
Uninstaller=%_SETUP_FILE_PATH%\xbuninst2.exe
CustomDll=%_SETUP_FILE_PATH%\xdkcustom.dll
UnpackerNewExe=%_SETUP_TARGET_PATH%\XDKSetup%_BuildVer%.exe
CabPath=.
PackingList=xdk.csv
Manifest=manifest.txt
LicenseFile=%_NTBINDIR%\private\ue\sdk\relnotes\readme1st.txt
BuildFlavor=BEJO
CompressionType=LZX
CompressionLevel=6
UpdateDatesToAtLeast=6/28/2001

[PackerSettings_0411]
LicenseFile=%_NTBINDIR%\private\ue\sdk\relnotes\readme1stjpn.txt

[PackerPaths]
PUBLICXDKRETAIL=%Pdrive%\free\public\xdk
PUBLICXDKDEBUG=%Pdrive%\checked\public\xdk
PUBLICSDKRETAIL=%Pdrive%\free\public\sdk
PUBLICSDKDEBUG=%Pdrive%\checked\public\sdk
PUBLICWSDKRETAIL=%Pdrive%\free\public\wsdk
PUBLICMSTOOLS=%Pdrive%\free\public\mstools
XGRAPHICS=%_NTBINDIR%\private\windows\directx\dxg\xgraphics
DOCS=%_NTBINDIR%\private\ue
DOCBUILD=%Pdrive%\doc
SDKFILES=%_NTBINDIR%\private\sdk\sdkfiles
SDKSETUP=%_NTBINDIR%\private\sdk\sdksetup
EXTERNAL=%_NTBINDIR%\private\external
XBOXBINSRETAIL=%Pdrive%\free
XBOXBINSDEBUG=%Pdrive%\checked
ATGSAMPLES=%_NTBINDIR%\private\atg\samples
ATGTOOLS=%_NTBINDIR%\private\atg\tools
TOOLS=%_NTBINDIR%\private\windows\directx\dxg\tools
DIRECTX=%_NTBINDIR%\private\windows\directx
PRIVATE=%_NTBINDIR%\private

[UnpackerSettings]
ProductKey=HKLM,SOFTWARE\Microsoft\XboxSDK
ProductName=Microsoft Xbox SDK with Online
DefaultDirText=Microsoft Xbox SDK
StartMenuFolder=Microsoft Xbox SDK
;SkipLicensePage=Y --Uncomment to skip the license page
Languages=0409:0411
DefaultLanguage=0409
;MinVersionAllowed=1,0,3521,1 -- Uncomment this for a QFE install and put correct build number here

[UnpackerPaths]
VSCOMMON=REGKEY:HKLM,Software\Microsoft\VisualStudio\6.0\Setup,VsCommonDir,
PROGRAMFILES=REGKEY:HKLM,Software\Microsoft\Windows\CurrentVersion,ProgramFilesDir,
ALLUSERSCOMMONPROGRAMS=REGKEY:HKLM,Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders,Common Programs,
CURRENTUSERCOMMONPROGRAMS=REGKEY:HKCU,Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders,Programs,
XDK=DEFAULT
SYSTEM_DIR=SYSTEM

[UnpackerDirFlags]

; English / Default Strings
[Strings]
WelcomeMessage=Welcome to the Microsoft Xbox Software Development Kit
ProductDescription=The Microsoft Xbox SDK includes documentation, tools, and samples that help you develop games for the Xbox Video Game System by Microsoft.
LicenseTitle=Xbox SDK Release Notes
LicenseSubtitle=Contains late-breaking and important information for you to get the most out of the SDK.
LicenseInstruction=Please read the release notes before proceeding.

; Japanese Strings
[Strings_0411]
WelcomeMessage=Microsoft Xbox SDK ւ悤
ProductDescription=Microsoft Xbox SDK ɂ́Abox rfIQ[ VXep̃Q[JۂɕKvȃhLgAc[AуTv܂܂Ă܂B
LicenseTitle=Xbox SDK Ɋւ郊[X m[g
LicenseSubtitle=SDK őɂpŐVdv񂪊܂܂Ă܂B
LicenseInstruction=n߂OɁÃ[X m[gǂ݂B
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\A Quick Walk-Through of the Xbox DVD Emulator1.doc ===
Microsoft Word  MSWordDoc Word.Document.8TitleFormat.dot Takeshi Ito Microsoft Word 10.00j0W0 urn:schemas-microsoft-com:office:smarttags Month '2MF3 '2MF3 )|84v ;2MF3 ]2MF3 l2MF3  0 2 3 """)))UUUMMMBBB999 33333f33 f33f3ff3 3f33ff3f ff3fffff !___www cmPPJCmp0712 IDATx^ t^PMC Zy${yp #w?{Em zd,gtt q5r_w mHhMo j xr1 bx64/. 6pG*C }s8to Xru\Dc 4Pwx` uj4;; u?'R3O )fVGZa 60u@g h(?iy 9B L)mZ 1}m#0q KlA9iI[ w_{j> +O_<E lz.-& .^-/r m[99s* (M;A3nI qYFm@. wht09 N<(?> O1T<ep gKTyRc }f?=5 OOM5b }f?=5 sTMk  }f_S4s/ }f_S4s/ }f_S4s/ }f_S4s/ }f_S4s/ 1YTyX }f_7& S2d3+. lX'*/ LI5C$ myIK;| """)))UUUMMMBBB999 33333f33 f33f3ff3 3f33ff3f ff3fffff !___www cmPPJCmp0712 IDATx^ -\~/( {KQfRB gbeJWI wM`XJ Z]kCM "nR_R  ii2. \ihch#< 2,eXJ """)))UUUMMMBBB999 33333f33 f33f3ff3 3f33ff3f ff3fffff !___www cmPPJCmp0712 IDATx^ (HIH$ %JfH<9 8CDQs <#4_!PE$ J>]nH $]Chy CW'v$ ~zQAR l\8nDD 'nxuiD lysbC]h {"bbN kN4VF j<3!E l;JWo 1'M!  a9TL/ W0E*rJ 5A$"B 'C3#fH& ,CbP% Ti<x}p9x}0 >$Z{bfh }nN[D cO<;.Q&]  DS[8J +&1k@ JI5{gC I<?'I| :QB0I( o%r4L <?Q<] ){-e1$ 6l>uu vm"6K JQE5- cj{d\dUm &@"E> VL%d\ O4J%8 CN%0n* `:'mq (PJb{ <tubGb s3fhId|" k53gGb cmPPJCmp0712 [IDAT(S """)))UUUMMMBBB999 33333f33 f33f3ff3 3f33ff3f ff3fffff !___www cmPPJCmp0712 IDATx^ 6`Q@, 1$C\C_ `5N)V .i;n3j )ZIS'f ,[N:& }"ZOq D@5=T z'ENV:R }4hCU <=-|F rum}- XFvaA# gvifw !!rms udVHg ~?0u|/ |D.yD? u?]1(5 14S+I1 ?4;_^v/ %6:c'oc ~I9y= ]w{u_ g`I}L tYXF_ zEU>R gcPNi _F4j>] [>%pq /*&dP (OnMn >*Md3 uf|2B Zd^gyn Mq(7N h^%)D gOU9Bd )0YH/ )0YH/ _P43O -6]\M :eYZs cmPPJCmp0712 JIDAT(Sc cmPPJCmp0712 wIDAT(S 1!!!!!!)!)1)))))1))9)1))19)k91)111111B19919B19J1B91R91kB1sB99999B9BB9BJ9BR9JB9ZB9cB9sB9sJBBBBBJBJBBJJBJRBJZBRBBRJBZBBcJBkJBsJB{JJJJJJRJRZJRcJRkJZJJZRJZkJcRJkJJkRJsRJ{RJ cRJRRRRRRZRRcRZZRZcRZkRZsRcRRcZRckRcsRkRRkZRsZR{ZR cZJJZRZZZZZZcZZkZcZZccZckZcsZc{ZkcZksZk{Z{cZ kcRRcZcccccckccsckccksck{ck csccs 1kZZkckkkkkk{ks{ks k{sk{ {sccsssss{ss {kk{s{{{!{{{{{ cmPPJCmp0712 IDATx^ /\DyS r9|X% C7WH> J{`xz \Bioo} "LS"R >,)p) H~dd3 6K/@1I Fbu5UU XKkKCC ]Y[[O Uy+=,7 <~H~6 +W[uV[C pv<Ck j^C]H GvWq{ q#."< 46ADt n("Tsk F%au3 8Ioht ^^rd2 FGG1z 2`8On &itWir 7r/Ss 1NZqk T::51qtz"Z L[@dy ;FllP i+<Eh *DOaP rq:ad K>/-xo9T02 8(w@" "Y8gy t`J&& uMM5& `rQ6! tdZS"p) l#2W( aZvDI s0Y?A Z~8Le aBO!C lRFCj :;k-n xl!6Y r{Keq :|N^7|% LO<eL >CI0u #wlHM :l>b|j (E_fKB """)))UUUMMMBBB999 33333f33 f33f3ff3 3f33ff3f ff3fffff !___www cmPPJCmp0712 %IDATx^ 2DRU?G Jpt%> 1OnU; T4'Q-( U7{ST` }b%N# Tdb-Td pTY<8 6emXQ <3@BCl &!&,*/9/4=:BJ=DRCJVU^pZcs]hv`frbk{cjuflxhnyls}pv cmPPJCmp0712 IDAT(S] """)))UUUMMMBBB999 33333f33 f33f3ff3 3f33ff3f ff3fffff !___www cmPPJCmp0712 yIDAT8O Y+Nv}  !!!))))1))k91)11111991B91R91kB1sB99999B9BB9JB9ZB9cB9sB9sJBBBBBJBJBBJJBJRBRBBRJBZBBcJBkJBsJB{JJJJJJRJRZJRcJZJJZRJcRJkJJkRJsRJ{RJ ZRRRRZZRZcRcRRcZRkRRkZRsZR{ZR ZZRZZZZZcZZkcZ{cZ kcccckccscc sk{sk cmPPJCmp0712 IDAT8O @!*0R YDaw{] 39B6=I:AL>DPEO^IScMWhR[lT^qU^pU`oU`rYcsZcs[ex[fx^i{cm|kt cmPPJCmp0712 LFP,X cmPPJCmp0712 sIDAT(S} #RWj=N #RWj=N Photoshop 3.0 Resolution FX Global Lighting Angle x8BIM FX Global Altitude Print Flags Copyright Flag 8BIM' Japanese Print Flags Color Halftone Settings Color Transfer Settings Layer State Layer Groups Guides URL overrides Slices ICC Untagged Flag Layer ID Generator Base New Windows Thumbnail Adobe 7GWgw AQaq" dEU6te '7GWgw I2*]$ zv.ha 3z~.sY Version compatibility info JPEG Quality Adobe 7GWgw 8HXhx )9IYiy *:JZjz 'dtU7 8HXhx 9IYiy *:JZjz UwLUn* WWlUn* LUoLU U}1U<U +\Up4 GlUoS [\Uv* \UuqV m\Un* lUm*qV \E1WS Uo|Uv* \UoLU U}*1U lUm*qU M1W6* \M1Wu ZlUv* LUwLU Wo_lU hlqWt \U}qV XMqW.* .0b%{ c{__7 9""xlQ; [k+H! ZOlUn* dznEv >]1Wb nXw1]I ?J5}Z .]nNr ]\Umw hsBmn ?2~gh (EqVXqV m_T5> cFSPw B~j1Va AP+V# \UmN* en1's O|U94 LUuqU GNBYQ@ X#V!8|U 1Myc5 )GlUp LUP5qW \M1UP# SLUx5 OlU^$ \Ug,U 1UdN@ ^c]#f $UTR)BN| qTB.* krf&FR \OnyE# ]\Uq4 qlUh|Uw,Ui UV2G* d~M~XMmmi _?k>r puZQ1 k/1jV, .]QX1 ?^zo`{{ LUQSz I(*jqT@j lUh>8 Ozl1V K21oS liMKDCE SnbSZBG .>MTc I=I>9 Uw,UilU !O|Ug= \Uw?|Ug: ;hzyA5 H@DPNyWv W 7|q jW$7bb rc_a.f hMiB|3 |U-xdN ~=qWr LUw,U ,Uajb n>MLa g6@*q O|Uv* Uizxb JfguDM rF]Bt \Ug,U }8$jzcz M]_+E'* $,#,`B g{@t{ |U]E7 Q,Yxrr XW|Ui 2F4-)U U\Ux4 v99Wl lUxzb ?{JmLU mqU@+ vwmGV '+J>'`K sf37e _LSMa E?01T )LUaLU OhGL.@ MWlDX }g"4b7 LUa|U W6b}s ,\#vyZ L01EZ ZE{uv G'&aL `)RqT qT3%qU&C ByF>lg1 8Agu8  F"S*2l T\UTm Nbk48 'md,  U+y$o D"Wje2 |Uu1U /U}9=Z ,'&l8 rJ"Vq Uo2EN* ?V=#PZ  A#p?Hg U\UQqU 1&$,+ _$v$Uw d$,9  EqU&\U TJ@F,~ W-qULUx |UuhqU s\Uv* E_H-,  >-958 [9]go [@F$] &`*q#"K*] 5^yzH u5?Bb j{_&] O%C9,@ jg.#e lUPPb LUQqU@k Uw|Up s9 fxq YZUr_ wZOk% |>\?? 1*ZY0 LUk,H symOh b.VK0 "J@FD ,UQMqU \UUqUp+ ,HXFL r\L)B MrAZ9$ ./-?Cz^ )S"K - UFhVe* ,HS90X ^"R+QO| V/ga. xb`O> {D"@1=z r.VK:E %FS)6 <p_Ee uN%kZ A0*`U_*= lUUqW jjqUa X4 K4 -~hy_ se!eY DCIZ) aHr(r &$(0u %k}KP 9l3N< Rj+Zn ?VS)6D" I;7Un hvv-~3 :Zccx lALdbl> re&R< :rztP~d >_:s4z)jN ok?4N <}/,~c M@i>^ ye+Oq+ <\1"U_Q; Zm.]s _h~GE rBH!L qUPF* T\Up4 ?i{Tt bjI=I9 Ydg2I; $jIrF grG(dx "2bLHSe Ak1Rt z`bJ24 H"{w-Uc P5z`Ue GLU~* lUw,UPt ^m5G'3 S`FH1 dIB>8 {er)GE Fx?jvNn u]~Z3 y{^\?N1 y-whKRk %~^h_ MD!^3] 5J*E|rbL TKe+l2 F"!5Rk 1U`qUQ &`ll_ F:aCyw~ ~V~q~b e&`"b 1U@{b TS\UP |UQqULUr &Id&R$ 'r^jR26T2 4MJNZ &,~)! g&Be# Utr4L% _1yT% @UP*I'` w)H7I x4gnG'S w~p1y nUV3Z %&`"R? -y]dg{ UGLUx _\Up= U1ULU 3D}Q?T 0*>r< {^4=3 )j=#h  fDb, SEZeFH &@##N T\UQqUU 4yt/5 Q)Ova <|b]y A#0;K zw=?g 8[!?W !c-r` E$yQ- LU^3R jqU@{b OV ?x Rg!`} qX]?+ tIZeE 7JdK% :8!/Y> W\UQqUdjb CLU]qUP) ,p3"# obyg[ .E;/#Zv e&@#cN B.TK0 UF\Ux \UQqWq ^S&9c<2 9j:_+ QZwe\ Zy\~# +KYrbLHR#| 2bZ#l bXH(:u *F"f96 qPelA UYqUU V?E[c c&"c! nM3#K `,HQ#- UYOlU sy3ry$5' y5s92 `./$RQ= eQ,D20 6`"U2 W|U~* bjI=I9 @=V<c H9V|1 v&n,f= H4l?c< j-1#wf^LF c&$-+] 9h-d) 01Q+L G*2gI E$g+2l Z_yrp V\UPW >Z`Dv /hsvD UW|UU)] ?3mkfE ~k~e~i dxI%dc +!?FzW fNm~+M VmMK'1 1UP<qU`<1Ue U)LUx \UQk\UP "V}P< xjvY@ cJL2q U`<qUD u8R{Y n?F}# #0{OS ~KS<? .-&^q a11cp Zs37- (u=d{ ylelHXW, ,HQqN }_,~] c&*Er s;JXS TJ@F"W) &@"cO QJqUP) |UQN* Ob>]k svNN<Gc xqc4G  Op?s Z,g.R# "")ff&  QJl2@ RK%@2 U\UQqUu UGLUPt }[T_Z uo>j/ :DwDt .~a~ek? v~]vA *%B24 R!W!)6  J@FZ ]Y?|e*G  l1Ue fN.EmtH yqG,L& nEzAO U)RDQ( ,UQqUa )AWRC) t[;}#L O 7%  ~P~ti iVox/ M^kAE "xnab <o.)b OrORN 22H!a Q(j1UtZ \UYN* te>?A md,#- UUqU|UU qUlUr }SXON wq5z(jEK h{::a| d+O*D 5=Yh}y W%lHR#& 1e;M#c @0%u0+ TUY;m RgJ-i }WJOV ;cDm\P E*xer $J&Rd Q(qUq T_lUPo CIqcZ @nZ"we ^>]Gw _H~M~A DEl^m y;^\g hYL,HZF,T &`"U<2 #Vk7m 1R5K& ?yy/h9 1Ue>8 lUzu8 -|u#m n_b[W r5Hn_ z?4?< {aHLt/0 '|Uv* FSPh} d$,"2iv* bNx?kv ^ +1. 22H!e0 O*i]c owyuc4 E@+t_o J~$gY &rd&R; 9=L&&,n P/j}2 &@"Qr \U}qWb lUp>8 !^rK# h{JZ} fFpO% [<K97\ ?0Yj6+ ~BjCL gw!UTnI'` n/F>]O As{<z K<q3" @02]L ;S7gd \,HZF G&1# % , 0 !+R< Jf<<I \UwLUx \1ULUz \Uw\U +oJR. `k{B:a p"'zA GYXuU \1ULU ?(i^H v$/)= qG,Ld UV^C<  M2WX d<FH1/I L"IZS clUUMqU =(Qw} Q14^t =BWou e##gr^p ?R0G%P: PjqGc UUqUe4 lUuqV 0aJq> )Fc0v* A,,{: JefIWXO yR>72 @`9|U yqvlm FG;)e^ 4S;D`X _rz"/wv "<_VC nPMn_ c&2c! LUthd .[[4/<L ;dX`@ KOQCS 1U@;b ry-wf !>B^R Ok1vDxG n~U#q h=/,~cJZ= {vcX5 Sog3zr[ Z9qj0 Ny&LF `-eiv(h L<KMz~ RqU@k LUuF* $2)GG q1=E? Cehv* ^0Kx#yds |742[H /6ElT (N<\Q" w!CP, c\UPo 'Kk8E^I bj8&`z Kk8^g j>]zV p:PwD> "K[DX O.)b<2 ~]~gk? }7dqx11 v7:yU ckK=:v {#7fd o,}gN ?9,wZ Yb<Q4_ G'wIy 64r*{m \UUqUQ \UwLUP 1WoZb ]\Up8 s>Cw[ EG' yF x|lf= @OTcI <,RD` G*0dt$2 D}*q5=  [pV: LU}1V K315$ x2+e< 1fb|I "J@UT .%+=? Eq1Ry _- "  RIwYnGz 4~bDR &)$r)VV *JHGS 0=9=c bjI=I9 {`%!]S K  XB\@H &Kz>zkK ~fY}oH g3DOf JB7*+ m"Ez{ L.4k4 ~9hviH x?lv.n VkF=i qZiUc S"JiQR *S+2ZT W;-i@} I$(Ml& sUjxTW= Q\UwC :=O:'5 Ic<Q4_ )@d`U [!"(T Gr~]i wgKLo 59<I[ mUFW)2 iaLSK=?|6 y?D?% U}h1V Behv* uf>?@ b%]H* dQ$d2  `LO0 U)$r(ee; E^k1V =4d$,"2iv* :-n~"C Q(759 YW+3f S%kN" )i\m-S UTnI'` HDY|! @=<b"("r RD%YXP &124: R26^t M*qT8 :dIeJ N"I"R~ mZ+\R i!!Ht ;;V58 ba8lqULUx #V;`wztiH nILbdh> A,,{0 ^\C,LO" lI4P7 Nj\wb ;28=R ~l~h~Qj R1'`y| BN8F7 j<C8, Z[Lmi T\Uv* o'nRI! b(Fbk .d}SM WmvL;S Q{*/EQ RNxWhv AU`|G )xvH5 A`7$m ]JU7I |vE69 ,9EJ& 7kh|Q Y$e"I; "{w(v= RD?x# :-n=f1 U)[*mFG U{f$  Kk8E^G;| >{uu} G5In7Yn "K[DX fR6e= vFN<F w)g>V .M9# " 8}971 '1L6t; ={:g= R~.QX N}DpG T/qw3p c~Xk? 0dO 7& LX^[}gL $"$@$w [LU~* ]"EaQM DH%$P 9|Gz%. )!ej* ma,QI  'SRiT;o 4v-!p M7JbV %DjTpJP .FRZU "M%T-2 |U]qW hyxdI #.$Q4 lUYqU YvvJ3 x\<i+ IhcHS2|B> 9`U68 G0+*+ <WTOJ iu0Z] jMHQM cj}>u <&/4, LUPPb Uu<1V ][Zk{ z|Q$# T+G#F@  $DqUQ4A &Z|W3># k<=>\ dv7k*Q rj(h; lU]MqU h) scZ zdr`j =aN=() .ei5T ;,Q,C S?ge" m\Un* &w_V" <;Tg9 /6kcK |Uu{b <<&]o 58^EB lUQqU \G|Un* jqUelU\ 8xcw{  jf;| Z]J`%i ;TMEY 3zE%K PEg$*' ca\UP *OC@z P8rB2 p:l<s }V2G/ lUw\U [M,WqL d%*[N r`S_& ?/4m)# 5uq;o ]ys>J 36ET$  \UpPqWT it<\"B *Ei\U |2)Mt z D/~ ]CoAq"%zr`+ jqUPk /fjb@ [#I#* x#5<h+ {W8/n= *E+Q\ _9~p~`~ BY[}N ][Umnu ?5?4m48 =@a\U_ CANE[f *qU[h^ k{$Ld qTGLU ^h1Wt BgXX; 4~Tk:o lhkB:b m>fFUa@x 4(xAa _UZ]G /:j>e LUuF* hM:{b $AQET; 1%*UX mCAU>' ^H-n$ &I#+Y;0c0f0 0F0k0 0f0D0~0Y0 0S0n0 0f0D0 0S0h0 ch0W0f0D0~0Y0 fW0~0Y0 0f0D0 0h0W0 0]0F0g0j0Q0 0f0D0 OckW0f0O0`0U0D0 }N0M0~0Y0 h0D0F0 bW0~0Y0 0W0~0Y0 0]0n0 0~0Y0 0W0_0P} 0L0X[(WW0f0D0 0o0Z0g0Y0 0S0n0 0W0f0O0`0U0D0 0n0-Nn0  fW0f0O0`0U0D0 0S0h0L0 0~0Y0 0S0n0 O(uW0~0Y0 0S0n0 0~0Y0 0k0S0n0 0x0n0 O0S0h0 0W0~0Y0 RW0f0O0`0U0D0 RW0_0 0F0j0;ub 0~0Y0 0W0f0 NU0D0 0~0Y0 0W0f0 NU0D0 0~0Y0 NMR\O bW0_0  bW0f0O 0W0f0 NU0D0 0F0j0;ub 0~0Y0 }Q0f0 0W0f0 NU0D0 Nn0\OmiL0B} 0~0Y0 NMR\O bW0_0  0h0W0f0  bW0~0Y0 0~0Y0 0S0n0 0g0D0~0Y0 0W0f0 OX[W0f0O0`0U0D0 0d0Q0 0F0k0 OW0~0Y0 0W0f0 NU0D0 OX[U0 0~0Y0 0S0n0 0g0D0~0Y0 }{b}D} 0W0f0 0W0f0O0`0U0D0 0~0Y0 0f0S0n0 O(uU0 0n0g0B0 bh0W0f08^k0  0f0D0f0 0~0Y0 0F0j0 0~0Y0 0W0O0o0  bW0f0O0`0U0D0 0S0n0 0g0o0 0n0F0a0n0i0 Nd0L0x 0f0D0 0i0n0E 0f0D0f0 0K0~0D0~0[0 bW0~0Y0 0W0f0 NU0D0 0~0Y0 NMR\O bW0_0D 0W0f0 NU0D0 :yk0o0 0~0Y0 rKag0Y0 0W0f0 0W0~0Y0 0]0W0f0 NMR\O bW0_0  0~0Y0 0~0g0L0!q Rk0j0c0_0 _~0g0 W0j0D0g0O0`0U0D0 0n0B} Nk0o03 0W0f0 NU0D0 0!kk0  0W0f0 NW0f0O0`0U0D0 0~0Y0 0W0f0 NU0D0 ZAZ#Z
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\Xbox Certification Test Availability.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Certification Test Availability TitleXbox Certification Test Availability rbailey Normal.dot Colin James O'Neill Microsoft Word 10.0Xbox Certification Test Availability By Richard Bailey, Developer Support Engineer, Xbox Advanced Technology Group The Technical Certification Requirements (TCRs) outline the objective measure that will be used for each requirement. This document lists the TCRs and identifies whether the title developer can conduct the objective measure part of the test. Most of the TCRs include in the object measure a simple series of steps that can be performed without additional tools or information (TCR). Other TCRs req or code does not exist. Though Microsoft has not published the tools used for this process, the title developer simply needs to avoid accessing the hardware directly in these areas to avoid failing the TCR. In a few cases, the TCR outlines a test that cannot be verified by the title developer.  In these instances, Microsoft performs the test using facilities or means not presently available to the title developer (
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\Xbox for PC Developers.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Xbox for PC Developers TitleXbox for PC Developers Colin James O'Neill Normal Colin James O'Neill Microsoft Word 9.0ays: It has a hard disk, an Intel CPU, an NVIDIA graphics chip, a Microsoft  Windows  2000 based operating system, Winsock, and a Microsoft  Visual C++ based development system. However, the Xbox game system is not a personal computer; it differs from a PC in important ways. Although PC knowledge and skills will be easy to apply on the Xbox game system, developing great software for the Xbox game system is by no means the same as developing great software for a computer, and straight ports are not acceptable. That doesn't mean that developing software for the Xbox game system will be more difficult; to the contrary, many of the complications of PC development are gone, such as scaling across different hardware. By the same token, however, the technical bar for Xbox games will be very high, and meeting that bar will require careful attention to the unique aspects of the Xbox game system. This paper will introduce the major differences to be aware of to make a successful transition from development for computer games to development for Xbox games.  These are the main things to keep in mind:  The Xbox game system is a console that exists only for gaming.  The hardware is fixed and will never, ever change.  The Xbox system software is based on Microsoft  Win32 , but many of the Win32 APIs and features aren't there because they aren't needed on a fixed-hardware game system that doesn't have virtual memory. Also, many of the libraries that are present in the Xbox system software differ from their PC counterparts.  Users have specific expectations: plug and play, instant access to games, no installation, no patches, no extensive controller configuration, and the possibility of an arcade-like experience.  Xbox is a console This may sound obvious, but the Xbox game system is a console, built specifically to play games. This drives all aspects of the design; features that games cannot use are not present. The personal computer serves as a general-purpose appliance, built to support multipurpose software of any sort; the Xbox console serves as a game appliance, built to support the best games possible. Anything that detracts from that goal is not part of the design for example, adding system software support for multitasking (as opposed to threading, which is fully supported) at the cost of memory and full control of performance by the game. Keep this in mind while reading the rest of this document, because it defines the basis for the differences between the Xbox game system and the PC.  Fixed hardware The biggest difference between the Xbox game system and the PC is that the Xbox game system is a fixed, closed hardware platform. Every Xbox console will have the same Intel CPU, with a 16-kilobyte (KB)/16-KB code/data (32 KB total) L1 cache, a 128-KB L2 cache, and a 133-megahertz (MHz), 64-bit front-side bus. Likewise, each Xbox console will have the same NVIDIA graphics chip (GPU), running at the same speed; the same 200-MHz, 128-bit double data rate random access memory (DDR RAM) yielding 6.4 gigabit (Gbit)/sec memory bandwidth; the same 64 megabytes (MB) of RAM; the same hard disk and DVD drive; and the same input controller. Thus, software compatible with the Xbox game system will run exactly the same way on every Xbox console. This will be a new experience for developers accustomed to writing software that must span several generations of and many models of computer graphics chips, each with its own feature set and quirks (not to mention driver revisions) but it should be a good experience. If nothing else, the benefits of having to test a game on only one driver/hardware combination are tremendous. Just as gratifying is the ability to carefully tune a game's software, models, and artwork to maximize use of the hardware. These advantages alone should enable a good Xbox game to outperform a game running on an equivalently powerful computer. To put it another way, when you write a game on a PC, you don't push it to the limit because you have to span a wide range of hardware. On the Xbox game system, you do.  As another example, a game title can rely on the DVD's seeking and streaming speed to be the same in every Xbox console, so the game developer can assume a consistent level of performance when designing the game's model, texture, and audio management. Yet another example is that the input controller is fixed, so every feature of the buttons and controls can be used without complications.  Many things available on PCs are not available on Xbox The Xbox game system gives developers considerably more ability to leverage the hardware, but the flip side is that it demands more from them as well. As a prime example, the Xbox game system doesn't support virtual memory, so developers must carefully manage their memory footprint to stay within the 64-MB limit at all times. Memory management is no longer a matter of blindly allocating memory as needed and trying to stay  reasonably  small; every allocation must be accounted for and charged against the 64-MB limit. Basically, the resources in the Xbox game system are set for all time, with no   whatsoever. The developer has complete control and complete responsibility, and is given freedom to take the Xbox game system as far as it can go at the cost of a number of features that simplify development but interfere with getting the most from the hardware.  Again, the bottom line is that the Xbox game system is a console a console with some nice features from computers, but a game system nonetheless.  In addition to lacking virtual memory, the Xbox game system lacks some other features you would expect from a computer. Of course, the game system has no keyboard and no mouse. There's a screen, but normally it's a TV, although it can be high-definition television (HDTV) or a VGA-compatible monitor. In TV mode, the Xbox game system outputs 640   480 interlaced, and, due to the NTSC signal, can reliably support only 40-column text. The Xbox Dashboard that comes up when no DVD is inserted is nothing like Microsoft  Windows Explorer, and of course there's no windowing.  Also missing are many familiar Win32 APIs. The Xbox game system has no Graphics Device Interface (GDI), which means no system software support for fonts or bitmaps, and most of Win32 USER is missing as well. Unnecessary API sets such as printing and remote procedure call (RPC) are gone. The Xbox game system supports Unicode but not ANSI nor double-byte character set (DBCS). Microsoft  Direct3D , Microsoft  DirectSound , Microsoft  DirectMusic , and Microsoft  DirectPlay  are supported. However, there will be no support for Microsoft  DirectDraw  (integrated into Direct3D), Microsoft  DirectShow  (to be replaced by a new library), Microsoft  DirectInput , Microsoft  DirectSetup, and Application Manager (not applicable for the Xbox game system).  All supported Win32 APIs are listed in  Base Services Functions  in the Xbox Development Kit. Note that many APIs will change to meet the unique requirements of the Xbox game system, in particular because it lacks a general allocator backed by virtual memory for use by system software.  The Xbox game system has a hard disk, but it is organized quite a bit differently than under the Windows platform. The hard disk is sandboxed into several areas for saved games, game-controlled caching (contents saved between games), scratch space (contents not saved between games), system use, and online downloads. Games that need the higher performance of the hard disk (for faster random-access streaming of audio, for example) need to be able to copy the appropriate data over to the hard disk without making the user wait, so background copying while the game starts to run is mandatory. Also, the system can reclaim cached files whenever another game needs cache space, so a game has to be able to deal with deletion of cached files. There are limitations on how much space a game can rely on having available for scratch space and cached files, on what files and parts of the disk a program can access, and on how big saved games can be.  All controllers are universal serial bus (USB) devices, and games must be able to handle, on the fly, the case in which a user plugs in a controller during gameplay. Memory cards plug into the controllers and will be visible to the game system as a storage destination. Telephone and broadband modems are options, the former as USB devices and the latter as Ethernet devices. Games should be able to save to the hard disk or the memory cards. For this reason, saved games should be no larger than 8 MB. Many things are different because Xbox is different Even things that are familiar from the computer are often a bit different on the Xbox game system, both because the Xbox game system is a fixed platform and because it is a console. For instance, because the Xbox game system lacks virtual memory, the libraries have to be able to operate out of a fixed memory pool controlled by the game. Also, the system software runs at Ring 0 to support the best possible performance and to give games full access to the hardware of the Xbox game system. Lastly, all of the system software except the kernel is in the form of libraries stored on the game's DVD, so each game effectively ships with its own customized and tested version of the system software. Again, the game developer is responsible for resource management; only the bits of the system software that a game actually needs should be linked in.  DirectX for the Xbox game system differs substantially from the the PC version. For one thing, every feature of the GPU is exposed, such as the register combiners' support for dual multiplies, dot-products, conditional tests, three outputs per stage, and extra writable registers relative to the PC version of DirectX 8.0. For another, legacy support for older versions of DirectX has been removed. Also, the libraries have been changed to reflect the lack of virtual memory; the game has much more control over the memory footprint of DirectX than on a PC. Many cases can't fail on the Xbox game system, resulting in less need to check for error returns.  One significant difference in DirectX is the result of the Unified Memory Architecture (UMA) of the Xbox game system, in which the CPU, GPU, and audio processor all share a single memory space. In particular, the UMA eliminates the copying of vertices and textures from system memory to video memory, a process that can substantially slow down computers. An Xbox game can stream a texture from the DVD into memory and have the GPU use it immediately. One implication is that textures should be stored in the swizzled format that is most efficient for the GPU because there's no longer a copy step to perform the swizzle as part of unlocking the texture.  Bottom line: Xbox is a console The long and the short of it are that the Xbox game system is a console and PC games aren't going to port right over. However, the Xbox game system takes many good features from computers and adapts them for a fixed platform, so it'll be easy to apply PC knowledge and skills to programming for the Xbox game system. It'll be exciting to see how far developers can push the potent combination of computer technology and the fixed hardware of the Xbox game system.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\Xbox Secure Network Library.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Secure Network Library Title _PID_HLINKSXbox Secure Network Library Colin James O'Neill Normal.dot Colin James O'Neill Microsoft Word 10.0y. Secure communication is one of the foundations of the Xbox. The Xbox Secure Network Library (SNL) handles all Xbox communication, whether that communication is Xbox(Xbox or Xbox(server. The Xbox SNL is based on the Winsock API, with one very important difference: it s cryptographically secured. Packets are encrypted (by default) and stamped with authenticating hash values. When an Xbox receives a packet, the packet can be verified against the hash value. If any data has been changed in transit, the packet will fail authentication and will be thrown away. This solves the issues of packet tampering at a very low level. Games themselves don t need to support any additional mechanism for preventing these types of game cheats. Authentication is always enabled. Encryption is enabled by default but may be turned off on a per-socket, per-message basis to increase performance. Converting existing Winsock code to use the Xbox Security Network Library is a matter of calling some new initialization functions and establishing a secure connection. Once a connection has been established, the standard Winsock calls apply. The code snippets below are based on the WinsockPeer sample in the Xbox SDK, a simple peer-to-peer Xbox game. See the WinsockPeer code for the full implementation of the concepts shown. In the code examples, error checking has been removed for clarity. Your game should check for and handle errors appropriately. Checking the Xbox Connection Status Xbox titles must allow the player to play a network multiplayer game only when the Xbox is physically connected to another Xbox via an Xbox System Link Cable or connected to a hub. A title can detect a valid physical connection by calling XNetGetEthernetLinkStatus(). This function can be safely invoked prior to calling any network initialization routines. If the function returns zero, the Xbox is not connected. Otherwise the Xbox is connected, and additional information about the connection is provided in the return value. BOOL IsXboxConnected()    DWORD dwStatus = XNetGetEthernetLinkStatus();    return( dwStatus != 0 ); To meet Xbox Technical Certification Requirements (TCRs), the connection status must be checked in the main game loop at least once per second, and the game must display appropriate UI informing the player that the network cable was disconnected. XNetGetEthernetLinkStatus() is very fast, on the order of three to four microseconds. Initializing the Xbox Network Library Once the connection status has been verified, the game can initialize the Xbox SNL. There are two initialization routines required: XNetStartup() and the standard Winsock WSAStartup(). For the default SNL parameters, call XNetStartup() with NULL.  // Default SNL initialization INT err = XNetStartup( NULL ); To customize the parameters, use the XNetStartupParams structure. Set the first field to the size of the structure (used for versioning). To obtain a default parameter, set that parameter to zero. The default settings are documented in the winsockx.h header file. // Change receive buffer size to 32 K (default is 16 K) // All other parameters will be set to default values XNetStartupParams xnsp; ZeroMemory( &xnsp, sizeof(xnsp) ); xnsp.cfgSizeOfStruct = sizeof(xnsp); xnsp.cfgSockDefaultRecvBufsizeInK = 32; INT err = XNetStartup( &xnsp ); Once the Xbox SNL has been successfully initialized, call WSAStartup() to do the standard Winsock initialization. The Xbox allows all versions of Winsock up through 2.2 (that is, 1.0, 1.1, 2.0, 2.1, and 2.2), although it technically supports only and exactly what is specified in the Xbox network documentation, not necessarily the Winsock functional specification. // Init Winsock WSADATA wsaData; INT err = WSAStartup( MAKEWORD(2,2), &wsaData ); The network library can be shut down and removed from memory by calling WSACleanup() and then XNetCleanup(). System Link Play Xbox system link play is in effect when any of the following are true: An Xbox is directly connected to another Xbox using the system link cable. A system link cable is simply an Ethernet crossover cable.  An Xbox is connected to an Ethernet hub (bridge) with an Ethernet cable. To meet TCRs, a maximum of 16 Xbox consoles can communicate with each other via a hub. An Xbox is connected to a local area network (LAN). Up to 16 Xbox consoles on the same subnet can communicate with each other. The Xbox does not support communication across different subnets. The Xbox does not officially support LAN play. In other words, LAN play will work for many players (those on the same subnet), but not necessarily all players (those on different subnets). In general, system link play describes an Xbox that is  connected  but not on the Internet. Because games running in system link mode don t have access to any external servers, including DNS or Xbox servers, they must advertise and discover their own game sessions. The following sections describe how games can support system link play. Many of these techniques will also apply to Internet games, but this paper focuses specifically on system link play. Finding a Game Once a game has verified its connection status and initialized the SNL, it can discover if any Xbox consoles are hosting game sessions. With system link play, there are no external servers that track game sessions, so the only way to discover active game sessions is to send a message to all connected Xbox consoles via an Ethernet broadcast. To create a broadcast socket, create a UDP socket and set the SO_BROADCAST option. The following code creates a broadcast socket. // Create UDP socket SOCKET sBrd = socket( AF_INET, SOCK_DGRAM, IPPROTO_UDP ); // Set broadcast option BOOL bBroadcast = TRUE; INT err = setsockopt( sBrd, SOL_SOCKET, SO_BROADCAST,                       (const char*)&bBroadcast,                       sizeof( bBroadcast ) ); Use this socket to broadcast a game discovery message. This message can contain any useful information about the requesting client, but it will typically have only two important pieces of data: A message ID. If multiple types of messages are issued on the same port, the message ID is used to distinguish the message payloads. If the only messages issued on a given port are game discovery messages, then the port itself is the identifier and the message ID is not required. A nonce used to uniquely identify the client. A nonce is a random number used for a single transaction. When an active game session is discovered, the host cannot reply directly to us, because we don t have a secure channel established yet. The host must instead broadcast a response to all connected Xbox consoles. To distinguish between our game discovery request and other requests, the host replies with the same nonce that it received. Use a nonce of at least 8 bytes to minimize the chance of duplicates. // Game discovery message payload struct FindGame    BYTE ID;    BYTE Nonce[8]; The Xbox API includes a function that can be used to generate nonces called XNetRandom(). For details on this function, see the section entitled Random Number Generation. // Generate nonce and fill out discovery message payload FindGame findGame; findGame.ID = MSG_FIND_GAME; INT err = XNetRandom( findGame.Nonce, sizeof(findGame.Nonce) ); Now the game discovery request can be issued by broadcasting the message to all connected Xbox consoles. For security, any broadcast message sent by an Xbox is always automatically encrypted. The following code shows how to issue a broadcast game discovery message. Use the broadcast socket created above. The port number you choose for broadcast messages is entirely up to the game. Any port number in the range 1 through 65535 is valid. // Create broadcast address SOCKADDR_IN saSendTo; saSendTo.sin_family = AF_INET; saSendTo.sin_addr.s_addr = INADDR_BROADCAST; saSendTo.sin_port = htons( GAME_BROADCAST_PORT ); // Broadcast the message to all system link Xbox consoles INT err = sendto( sBrd, (const char*)(&findGame),                   sizeof(findGame), 0,                   (const sockaddr*)(&saSendTo),                    sizeof(SOCKADDR_IN) ); The discovery phase must last no longer than three seconds (a system link TCR). If no responses have been received within that time, no game hosts are available and the title should display an appropriate message. If a response is received, it will contain information about the game host that will allow a secure connection to be established. Multiple responses may be received, indicating that there are multiple game hosts on the network. The Xbox SNL ensures that a title will only send messages to and receive messages from other Xbox consoles running the same game. Details about the host response are given in the next section. Hosting a Game Hosting a game requires the same networking startup sequence as described above. To host a game, a title must additionally acquire its Xbox address and create a session key that uniquely identifies the game. An Xbox address is called an XNADDR. The XNADDR structure contains the information required to completely and uniquely identify any Xbox on either a system link network or on the Internet, even if that Xbox is communicating through network address translation (NAT). The component of the XNADDR structure used by system link play is the Ethernet media access control (MAC) address of the Xbox. To acquire the Xbox address, call XNetGetTitleXnAddr(). This call is asynchronous, because it requires a few seconds to acquire the IP address. When linking with the current version of the secure library (XNETS.LIB), this call is synchronous, because it only acquires the Ethernet MAC address, but in future online releases, this function will also acquire the IP address, so it s important to check the return value and handle the XNET_GET_XNADDR_PENDING condition. XNADDR xnHostAddr; DWORD dwStatus;    // Repeat while pending; OK to do other work in this loop    dwStatus = XNetGetTitleXnAddr( &xnHostAddr ); } while( dwStatus == XNET_GET_XNADDR_PENDING ); // Error checking if( dwStatus == XNET_GET_XNADDR_NONE )    return FALSE; To create a session identifier, call XNetCreateKey() and XNetRegisterKey(). The XNetCreateKey() function generates an XNKID/XNKEY pair by filling both structures with random numbers. See the section Random Number Generation for more details. The XNetRegisterKey() function informs the network stack to  listen  for incoming requests from other Xbox consoles that are using the same session key. XNKID xnHostKeyID; XNKEY xnHostKey; INT err = XNetCreateKey( &xnHostKeyID, &xnHostKey ); err = XNetRegisterKey( &xnHostKeyID, &xnHostKey ); When a game session is finished, call XNetUnregisterKey() to stop accepting packets from any Xbox that is using the matching XNKID/XNKEY session. Once the title has acquired its Xbox address and has registered a session, it s ready to accept game discovery messages and reply with information about the game. The following code creates a socket that listens for broadcast messages. // Create UDP socket SOCKET sLBrd = socket( AF_INET, SOCK_DGRAM, IPPROTO_UDP ); // Bind to INADDR_ANY SOCKADDR_IN sa; sa.sin_family = AF_INET; sa.sin_addr.s_addr = INADDR_ANY; sa.sin_port = htons( GAME_BROADCAST_PORT ); INT err = bind( sLBrd, (const sockaddr*)( &sa ),                 sizeof( SOCKADDR_IN ) ); // Make socket non-blocking DWORD dwNonBlocking = 1; err = ioctlsocket( sLBrd, FIONBIO, &dwNonBlocking ); In the main game loop, check to see if any game discovery messages have been sent from other Xbox consoles. // See if any game discovery broadcasts have been received FindGame findGame; INT iBytes = recv( sLBrd, (char*)(&findGame),                             sizeof(findGame), 0 ); if( iBytes != SOCKET_ERROR && iBytes == sizeof(findGame) )    if( findGame.ID == MSG_FIND_GAME )       // reply with  game found  message Game clients need four important pieces of information to verify the discovery message, display useful information about the session, and establish a secure connection to the game host: The nonce received from the client must be sent back so that the client can verify that this response is meant for him. A secure connection between the host and the client hasn t been established yet, so the host must reply with a broadcast message. In order to distinguish the message, the client must compare the nonce it generated with the nonce it receives back from the host. If the nonces match, the message was meant for the client. If not, the client must ignore the message, because it was meant for a different Xbox console. The session name. If the client displays this name in the list of sessions that can be joined, the session name must be broadcast. The name must be a non-technical descriptive name for the session (system link TCR). The XNKID/XNKEY pair of the host session. This data will enable a secure session to be established between the host and the client. The XNADDR of the host. This address will allow messages to be sent directly to the host rather than broadcast to all Xbox consoles. // Game found message payload struct GameFound    BYTE   ID;           // message ID    WCHAR  GameName[32]; // generated by host    BYTE   Nonce[8];     // copy of nonce from client    XNKID  KeyID;        // from XNetCreateKey()    XNKEY  Key;          // from XNetCreateKey()    XNADDR HostAddr;     // from XNetGetTitleXnAddr() // Fill out game found message GameFound gameFound; gameFound.ID = MSG_GAME_FOUND; lstrcpynW( gameFound.GameName, gameName, 32 ); CopyMemory( gameFound.Nonce, findGame.Nonce, 8 ); // from client CopyMemory( &gameFound.KeyID, &xnHostKeyID, sizeof(XNKID) ); CopyMemory( &gameFound.Key, &xnHostKey, sizeof(XNKEY) ); CopyMemory( &gameFound.HostAddr, &xnHostAddr, sizeof(XNADDR) ); The following code shows a typical response by the host to a game discovery message. This message is sent using the same style of broadcast socket that the client used to send the discovery message. As mentioned earlier, broadcast messages are always encrypted.  // Create broadcast address using INADDR_BROADCAST SOCKADDR_IN saSendTo; saSendTo.sin_family = AF_INET; saSendTo.sin_addr.s_addr = INADDR_BROADCAST; saSendTo.sin_port = htons( GAME_BROADCAST_PORT ); // Broadcast the message to all system link Xbox consoles INT err = sendto( sBrd, (const char*)(&gameFound),                    sizeof(gameFound), 0,                   (const sockaddr*)(&saSendTo),                   sizeof(SOCKADDR_IN)); Depending on the type of game, additional information could well be included in this message, including the name of the hosting player, the number of players currently in the game, and game statistics. Connecting to a Game The client that issued the discovery request can wait up to three seconds to get the list of available hosts (system link TCR). The discovery response is received using the same style of listening socket that the host used when listening for discovery messages. Ignore messages with non-matching nonces, because they are intended for other Xbox consoles that are running the same game and also happen to be in game discovery mode. // See if any hosts have responded to game discovery GameFound gameFound; INT iBytes = recv( sLBrd, (char*)(&gameFound),                             sizeof(gameFound), 0 ); if( iBytes != SOCKET_ERROR && iBytes == sizeof(gameFound) )    if( gameFound.ID == MSG_GAME_FOUND &&        memcmp( &gameFound.Nonce, findGame.Nonce, 8 ) == 0 )       // add the session info to the list of sessions Depending on the type of game and the number of sessions, a title may automatically select a session or present the list of sessions and allow the player to choose. Once a session has been selected, the client must register the game s session keys and translate the host XNADDR to an Internet address (IN_ADDR) that can be used to communicate directly with the host. The XNetRegisterKey() function informs the network stack to  listen  for incoming messages from other Xbox consoles that are using the same session key. INT err = XNetRegisterKey( &gameFound.KeyID, &gameFound.Key ); The XNetXnAddrToInAddr() function converts an Xbox XNADDR to an IP address that is usable by Winsock to communicate directly with that Xbox. The translation requires the session key ID. Be aware that this IN_ADDR is not a   IP address. It has the format 0.x.y.z. If an IN_ADDR is transmitted to another Xbox or a PC, the target Xbox/PC cannot use the IN_ADDR, because it is useful only in the context of the Xbox that converted the address. One way to think of the IN_ADDR is as a  handle  to the actual XNADDR. The Xbox SNL knows how to convert this handle into the XNADDR. IN_ADDR inHost; INT err = XNetXnAddrToInAddr ( &gameFound.HostAddr,                                &gameFound.KeyID, &inHost ); Now both the host and the client have registered the same session key and the client knows the host s unique Xbox address. Now the client can send messages directly to the host. No more broadcast messages are required. The port number you choose for non-broadcast messages is entirely up to the game. Any port number in the range 1 through 65535 is valid. Here s an example of how the client might issue a  join game  message to the host. struct JoinGame    BYTE ID;              // message ID    WCHAR PlayerName[32]; // name of player that wants to join // Generate the message payload JoinGame joinGame; joinGame.ID = MSG_JOIN_GAME; lstrcpynW( joinGame.PlayerName, playerName, 32 ); // Talk directly with the host SOCKADDR_IN saSendTo; saSendTo.sin_family = AF_INET; saSendTo.sin_addr = inHost; // from XNetXnAddrToInAddr saSendTo.sin_port = htons( GAME_DIRECT_PORT ); // Send message directly to host INT err = sendto( s, (const char*)(&joinGame),                    sizeof(joinGame), 0,                   (const sockaddr*)(&saSendTo),                   sizeof(SOCKADDR_IN)); From this point on, all messages sent between the player and the host can be sent using standard socket calls. The Xbox SNL automatically handles the underlying key exchanges, authentication and encryption of the messages. Any message that has been tampered with or is otherwise bogus will be detected and ignored by the Secure Network Library and will never be propagated to the game. Allowing Players To Join When the host game is allowing players to join, it must listen for join messages. Join messages are sent directly from a client Xbox to the host Xbox, so the host Xbox can determine where the message originated. This allows the host to determine the XNADDR of the client. In the game loop, check to see if any join messages have been sent from other Xbox consoles. Note the use of recvfrom() to determine the source of the message. // See if any game join requests have been received. // Socket s has been bound to INADDR_ANY, GAME_DIRECT_PORT. JoinGame joinGame; SOCKADDR_IN saFrom; INT iSize = sizeof( SOCKADDR_IN ); INT iBytes = recvfrom( s, (char*)(&joinGame), sizeof(joinGame),                         0, (sockaddr*)(&saFrom), &iSize ); if( iBytes != SOCKET_ERROR && iBytes == sizeof(joinGame) )    if( joinGame.ID == MSG_JOIN_GAME )       // handle join game message (see below) At this point, we have a valid  join game  message and we have some information about the Xbox who sent the message. Specifically, we have the IN_ADDR of the source Xbox. Again, this IP address is not a   IP address. The host can continue to use this IN_ADDR to communicate with the client Xbox for the duration of the session, but if the host wants to send this Xbox address to other Xbox consoles, the IN_ADDR must be translated to an XNADDR. To translate an IN_ADDR to an XNADDR, use XNetInAddrToXnAddr(). The last parameter of the function is the optional XNKID that can be used to retrieve the session key ID associated with the address. In this case, the host already knows the session key ID, so we pass NULL. XNADDR xnClient; INT err = XNetInAddrToXnAddr( saFrom.sin_addr, &xnClient, NULL ); s up to the title to decide how to handle join requests. If the game is already full, it will most likely issue a  join failed  response. If the join is allowed, the game will respond with a  join approved  message. It may also send additional information about the game and other players in the game. Distributing Xbox Addresses System link games can choose whatever policy they wish when it comes to player communication. The host can act as the server and all communication can happen between the host and each player (client-server model), or the host can distribute the addresses of all of the Xbox consoles participating in the game and each player can communicate directly with the other players (peer-to-peer model). To distribute Xbox addresses, the host typically sends the XNADDR of each existing player when a new player joins the game. After that, whenever a new player joins, the host sends the XNADDR of the new player to each existing player. When a game receives notification of a new player XNADDR, it translates the XNADDR to an IN_ADDR using XNetXnAddrToInAddr() and the game session key ID (XNKID). After the translation, the title can throw away the XNADDR (unless it intends to forward the address to another Xbox) and use the IN_ADDR for all future communication. Never send an IN_ADDR on the wire, because it is useless outside of the Xbox that owns it. Each Xbox must do its own translation of XNADDRs to IN_ADDRs, because each Xbox network stack has its own local table of XNADDRs / IN_ADDRs. Handling Player Disconnects Game developers that write networked PC games often assume that the way a player leaves a networked game is via the UI, which typically invokes a standard termination of sockets (for example, shutdown(), closesocket(), or WSACleanup()). On the Xbox, the ways a player will commonly leave a networked game are by turning off the Xbox or rebooting into a different game. Therefore a game should never rely on a socket getting closed to indicate that a player has left the game. There are two common methods for detecting when a player has left or a connection has been dropped. One way is to periodically send the other players an  are you there?  message (ping) and see if they respond. Another method is for every player to periodically broadcast an  m here  message (heartbeat). Each player keeps track of the other player s heartbeats, and when players don t hear a heartbeat in a fixed period of time, they assume that player left. The WinsockPeer sample in the Xbox SDK uses the heartbeat method, sending heartbeats three times per second and timing out players who haven t sent a heartbeat for two or more seconds. UDP vs. TCP The Xbox SNL supports both UDP and TCP protocols. Both protocols are always authenticated and both are encrypted by default. UDP is a connectionless, unreliable protocol. UDP packets may arrive out of order, and they may never arrive at all. UDP packets are smaller than TCP packets and generally exhibit better performance. Broadcast messages by definition require UDP. TCP is a connection-oriented, reliable protocol. TCP packets are re-sent if they cannot be delivered and are guaranteed to arrive in the order they were sent. TCP packets are larger than UDP packets. For system link play, it s uncommon to see UDP packet loss or packet out-of-order issues. UDP is also a better protocol choice for performance reasons. Most multiplayer games choose UDP for these reasons, and many games create their own  reliable UDP  protocols on top of UDP. If performance is not an essential game requirement but reliable packets are key, choose TCP. XNet Library Versions There are four different versions of the Xbox SNL library, described below. In general, development work will take place using XNET.LIB or XNETD.LIB, and shipping titles will use XNETS.LIB. XNET and XNETD Developer Libraries XNETD version includes debugging information, assertions, symbols, and so on. XNET version does not have debugging enabled. Use these libraries for games in development. Allow remote debugging of the game. Allow communication with PCs and other untrusted hosts if XNET_STARTUP_BYPASS_SECURITY is specified in XNetStartup(). XNetGetDebugXnAddr() returns the debugger IP address in the ina field of the XNADDR. XNetGetTitleXnAddr() returns the title IP address in the ina field of the XNADDR. XNETSD Secure Library Includes debugging information, assertions, symbols, and so on. Use this library for final debugging stages of game or security testing. Allows remote debugging of the game. Does not allow communication with untrusted machines, with the exception of the debugger, even if XNET_STARTUP_BYPASS_SECURITY is specified in XNetStartup(). XNetGetDebugXnAddr() returns the debugger IP address in the ina field of the XNADDR. The ina field of the XNADDR returned by XNetGetTitleXnAddr() is empty. XNETS Secure Libraries Use this library for shipping titles. Titles must link with this library to pass system link TCRs. Does not allow remote debugging; must use hard disk logging or other methods for debugging. Does not allow communication with PCs, even if XNET_STARTUP_BYPASS_SECURITY is specified in XNetStartup(). XNetGetDebugXnAddr() returns XNET_GET_XNADDR_NONE. The ina field of the XNADDR returned by XNetGetTitleXnAddr() is empty. Communicating with Development Systems By default, an Xbox console may communicate with another Xbox console only using secure communication. All versions of the XNet libraries support secure communication between Xbox consoles. However, if you are linking with the XNet developer libraries (either XNETD.LIB or XNET.LIB), you can also communicate with  untrusted  devices, including PC development systems. To enable communication to untrusted hosts, set the XNET_STARTUP_BYPASS_SECURITY parameter when calling XNetStartup(). XNetStartupParams xnsp; ZeroMemory( &xnsp, sizeof(xnsp) ); xnsp.cfgSizeOfStruct = sizeof(xnsp); xnsp.cfgFlags = XNET_STARTUP_BYPASS_SECURITY; INT err = XNetStartup( &xnsp ); On Xbox development systems, the Xbox IP address is available on the main menu of the XDK Launcher. There are two IP addresses, because the Xbox has two network stacks. You can toggle through the addresses by pressing the Black button on the controller. The   address is the address of the debug stack. The debug stack is used by XBDM for remote debugging. Microsoft  Visual Studio  uses this IP address to communicate with the Xbox during remote debugging. The   address is the address of the title stack. The title stack is used by games for game networking. The Xbox title IP address can be retrieved programmatically by games linked with the developer library by accessing the XNADDR ina field from the XNADDR returned by XNetGetTitleXnAddr(). The debug address can be similarly found using XNetGetDebugXnAddr(). From the PC side, an application may call DmGetAltAddress() to retrieve the title IP address for the Xbox. For more details, see the Debugger API section in the Xbox Development Kit documentation. The code shown above will compile and link successfully with the Xbox secure libraries (XNETS.LIB and XNETSD.LIB), but the XNET_STARTUP_BYPASS_SECURITY parameter will be ignored, and connections to untrusted hosts will fail. The ina field of the XNADDR returned by XNetGetTitleXnAddr() will also be empty. When linking with XNETSD.LIB, the debugging version of the secure library, only XBDM (debugger) communication is allowed to untrusted hosts. In other words, XNetGetDebugXnAddr() will return the IP address of the debug stack when linking with XNETSD.LIB, but XNetGetTitleXnAddr() will not return a valid IP address when linking with either XNETSD.LIB or XNETS.LIB. Random Number Generation For maximum security, use the XNetRandom() function whenever you need to generate nonces or other random data sent on the wire. All random keys (including XNKID/XNKEY pairs), nonces, and encryption initialization vectors created by the Xbox SNL are generated using this function. XNetRandom() uses an algorithm for generating random bits based on RFC 1750 (Randomness Recommendations for Security; see   HYPERLINK "http://www.faqs.org/rfcs/rfc1750.html"  http://www.faqs.org/rfcs/rfc1750.html ). Randomness is not based on predictable pseudo-random mathematical number generators. Instead, randomness is generated using a combination of random input sources, including physical sources of entropy such as hard disk seek time. This technique creates cryptographically strong random bits that prevent an adversary from guessing keys, nonces, or other generated values. Authentication All Xbox network traffic is authenticated. The authentication algorithm is a keyed message authentication code based on a one-way hash function. The hash is generated by the sender and included in each Xbox packet. The receiver generates a corresponding hash based on the incoming packet data and compares it with the hash that was sent. If the hashes don t match, the packet has been tampered with and is ignored. The Xbox SNL never propagates invalid packets to the title level. The authentication mechanism inhibits common network cheats, such as packet spoofing, buffer overruns, and other packet tampering. Encryption Broadcast packets are always encrypted. Encryption cannot be disabled for broadcast packets. Packets sent directly from one Xbox to another are encrypted by default. The encryption phase occurs prior to the authentication phase so that the hash is based on the encrypted bits. The encryption method is based on a symmetric encryption cipher. All encryption and decryption is handled automatically by the Xbox SNL. Any packet received by an Xbox that fails the decryption phase is considered invalid and never propagates to the title level. Although encryption and decryption are extremely fast (see the Secure Library Overhead and Performance section that follows), encryption may be turned off on a per-socket, per-message basis to increase performance. The setsockopt() function is used with the SO_ENCRYPT flag to change the encryption level of a socket. // Turn encryption off BOOL bEncrypt = FALSE; INT err = setsockopt( s, SOL_SOCKET, SO_ENCRYPT,                       (const char*)&bEncrypt, sizeof(bEncrypt) ); // Use send or sendto to issue unsecured data . . . INT iBytes = send( s, . . . ); // Turn encryption back on bEncrypt = TRUE; err = setsockopt( s, SOL_SOCKET, SO_ENCRYPT,                   (const char*)&bEncrypt, sizeof(bEncrypt) ); The encryption setting affects only the logical state of the socket, not the physical state. In this example, even if the message wasn t physically sent before encryption was turned back on, the network stack will remember that the message should be unencrypted and that the next message should be encrypted. To protect your game and your customers, we highly recommend that you always keep default encryption enabled. The only time you should consider disabling encryption is when turning off encryption provides a performance gain that significantly improves gameplay. When encryption is off, your message payloads will be completely evident to any packet sniffer. Once that data is exposed, a hacker may have all the information he needs to cheat in your game. Be aware that the following items must always be encrypted to meet TCRs: XNADDR This structure contains addressing data that would be useful to a hacker, including the Xbox Ethernet MAC address. XNKEY The session key and key ID are usually sent only via a broadcast message, which is always encrypted. However, if they are sent directly, they must be protected with encryption. XNKID Xbox Packet Format Xbox packets conform to RFC 2406 (IP Encapsulating Security Payload; see   HYPERLINK "http://www.faqs.org/rfcs/rfc2406.html"  http://www.faqs.org/rfcs/rfc2406.html ), with the addition of a UDP header immediately following the IP header. The general format of the packet is as follows: Description Size (bytes) Authenticated Encrypted IP header UDP header (NAT header) ESP header (security data) Encryption IV (for encrypted packets) True UDP or TCP header Message payload variable Padding ICV authentication data The outer UDP header forces all packets to use exactly one UDP source port no matter how many actual source ports the game uses. This is essential for Xbox packets to communicate through NATs, a key requirement for future Internet games. This also means that every port number in the range 1 through 65535 is available for Xbox games, because that port number is contained in the   UDP/TCP header; there are no reserved ports. The single UDP source port used by the outer header is the Xbox Game Port, 3074, registered with the Internet Assigned Numbers Authority (IANA). Notice that the IP and outer UDP header are neither authenticated nor encrypted. The Xbox assumes that these fields can and will be spoofed. The Xbox uses the information in the authenticated UDP or TCP header only when reading the packet. The Encryption IV is the initialization vector (IV). The IV is random data used during the encryption process to guarantee that even if the same payload is sent more than once, it will always encrypt to different ciphertext. The ICV is the integrity check value, or the authentication hash. The size of the padding depends on the payload size. Two bytes are always required to store padding information. Unencrypted packets must have a payload size evenly divisible by four, so up to three additional bytes may be added as padding. Encrypted packets must have a payload that s divisible by eight, so up to seven additional bytes may be added. To avoid wasted space in your packets, always send a payload that is a multiple of 8 bytes (encrypted) or 4 bytes (unencrypted). The maximum UDP payload size is 1,430 bytes. The maximum TCP payload size for a single unfragmented packet is 1,418 bytes. TCP send buffers larger than 1,418 bytes are split automatically into multiple packets and reassembled automatically by the recipient. Secure Library Overhead and Performance Compared to typical UDP/TCP packets, an Xbox packet includes the additional UDP header (8 bytes), the ESP header (8 bytes), the IV for encrypted packets (8 bytes), and the ICV (12 bytes). Encrypted packets have a padding of 2 to 9 bytes. Unencrypted packets have a padding of 2 to 5 bytes. That means that unencrypted Xbox packets are 30 to 33 bytes larger than their unauthenticated PC cousins. Encrypted Xbox packets are 38 to 45 bytes larger than their unauthenticated and unencrypted PC cousins. Because the Xbox uses a broadband connection, this overhead is less significant than it would be for narrowband. The advantage is that all Xbox communication is secure. The authentication and encryption algorithms were chosen not only for their security but also for their performance characteristics. Sending a 1-KB payload with the Xbox SNL takes approximately 0.00012 seconds. That includes the time to allocate the packet, fill it in, compute normal UDP and IP checksums, encrypt the payload, compute the hash, and transmit the packet. With encryption disabled, sending a 1-KB payload requires one-third of that time (40 microseconds). The time overhead is linear based on packet size. Transmit and receive performance can be roughly computed as: x = payload size in bytes t = (10-8)x + 16-6 = transmission/receive time in seconds For example, sending a 512-byte encrypted payload takes approximately t = (10-8)(512) + 16-6 = 51.2-6 + 16-6  ranging in size from 32 bytes to 1 KB, assuming those payloads are sent 20 times per second. Payload size (bytes) Encrypted and Authenticated Authenticated only 0.04% 0.02% 0.04% 0.03% 0.05% 0.03% 0.08% 0.04% 0.13% 0.05% 1,024 0.23% 0.08% These results show that even when sending 20 KB of encrypted and authenticated data per second, CPU usage is less than a quarter of 1 percent! The results for receiving data are almost exactly the same. Because the performance of the secure library is so good, encryption is enabled by default. Performance can be improved by turning off encryption, but only at the price of less secure data. Note   This data was obtained on a DVT3 Xbox Development Kit running build 3704 (retail) using the XNETS.LIB secure retail version of the Xbox SNL. Although these numbers may vary slightly in the final consumer box, they are close estimates to what can be expected in production. Key Exchange For secure communication to take place between two Xbox consoles, the consoles must agree on the keys used to encrypt, decrypt, and authenticate packets. When a title sends the first packet to an IP address obtained by the call to XNetXnAddrToInAddr(), the Xbox network stack detects that no security association is established between the game client and destination Xbox. At this point, the two Xbox consoles transparently and automatically engage in a key exchange transaction. In the examples shown above, this key exchange transaction happens whenever a client sends the  join game  message directly to the game host. Xbox key exchange uses a secure key exchange algorithm that requires significant CPU time. Approximately 13 milliseconds are required to compute keys. Both the host and client perform this computation. This performance characteristic may improve in future versions of the library. In the meantime, be aware of the potential performance impact, particularly for games that support  join in progress. How the Xbox Prevents Common Hacker Attacks The Xbox SNL is designed to prevent many common network cheats and hacker attacks. By handling these attacks within the network stack itself, the Xbox insulates network games from having to individually deal with these issues. It also ensures that network performance is maximized, because bad packets can be detected and ignored at a low level. The following table describes common game cheats and how the Xbox inhibits that cheat. Cheat Xbox Detection/Prevention Packet sniffing All broadcast packets are encrypted. Other packets are encrypted by default, so the packet format is concealed. Only the packet format of unencrypted packets is visible. Keep this in mind if you choose to disable encryption your payload will be visible to sniffers. Packet tampering The true TCP/UDP portion of the Xbox packet and the payload is always authenticated. It is also encrypted by default. Modifications to the packet cause the packet to fail authentication. Invalid packets are ignored by the Xbox SNL. Packet spoofing In a shipping game, an Xbox can send data only to other Xbox consoles and can receive data only from other Xbox consoles. Packets sent from a PC masquerading as an Xbox will be ignored, because a PC does not have the data required to emulate an Xbox. Buffer overruns Generating a buffer overrun requires a hacker to modify a packet so that it contains (or seems to contain) more data than the receiver expects. A modified packet will fail authentication and will be ignored. Replay attacks Xbox packets contain time-stamp values. The time stamp is authenticated, so any changes to the time stamp will cause the packet to fail authentication. If an unchanged packet is re-sent, the destination Xbox will detect that the time stamp is out of range and the packet will be ignored. Denial of service The first line of denial of service defense is the ESP header portion of the Xbox packet. It contains security parameters and sequencing data that are checked before any other items in the packet. A flooder program would have difficulty replicating this data. The ESP can be checked without performing the hash authentication, so it s a very fast check. The second line of defense is the authentication itself. Although a flooding program could force the Xbox to authenticate packets, authentication is so fast that the flooding program would have to have very high throughput to adversely affect a game.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\Xbox Certification Tools.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Xbox Certification Tools TitleXbox Certification Tools Richard Bailey Normal.dot Colin James O'Neill Microsoft Word 10.07 ~4v 2{p;* stablished by Microsoft. The Technical Certification Requirements (TCRs) outlined in the Xbox Guide explain the tests that will be performed on each title during the certification process.  The XDK Launcher includes a suite of certification tools to aid title developers in testing their titles against the TCRs. For more information on the Technical Certification Requirements, see the Xbox Guide, available on the Xbox developer support Web site at https://xds.xbox.com. This document describes the steps expected to be used with each tool but does not describe each TCR in detail. Using the Tools From the XDK Launcher, press the X button to access settings, then select Certification Tools. Each tool is named with the TCR number of the requirement the tool is designed to address. Most of the tools help prepare the Xbox to run the title to see if it functions within the guidelines of the TCR. 1-11    Remove system files: Soundtracks & Nicknames Steps for testing: Run the tool. Run tests on title, including accessing any libraries for choosing in-game soundtracks and any portion of the game that can use nicknames, for example, player initialization or save game. 1-12    List all global settings Steps for testing: Run the tool. Write down all global settings listed; make note of the settings for later use. Run title; thoroughly test all aspects of title. Run the tool. Confirm that none of the global settings have changed. Note: this does not verify that none of the settings were read outside of the api s  Right? 2-01    Fragments Title and User data directories Steps for testing: Run the tool. Run the title; ensure that all game performance is acceptable and reliability is unaffected. 2-02    Removes all soundtracks Steps for testing: Run the tool. Run the title; ensure that in-game audio plays title-provided audio. Ensure that any UI for soundtrack selection functions properly under this condition. Note: this test is similar to 1-11; can it be handled at the same time? 2-07    Fills User Data directory with 4096 entries Steps for testing: Run the tool. Run the title; start a new game, and then attempt to save it in the user data space. The save will fail, and the title must recover gracefully. 2-10    Clears utility partition for <titleid> Steps for testing: Run the title. Start and save a game. Reboot. Run the tool. Run the title; ensure that the title functions properly without any data on the utility region. 2-18    Draws outline of non-HDTV safe area (white) Steps for testing: Connect Xbox to non-HDTV system. Run the tool. Physically mark the area outside of the white box on the screen with tape or post-it notes. Run the title; ensure that during gameplay all text critical to gameplay is visible within this box. 2-19    Draws outline of HDTV safe area (yellow) Steps for testing: Connect Xbox to HDTV system. Run the tool. Physically mark the area outside of the yellow box on the screen with tape or post-it notes. Run the title; ensure that during gameplay all text critical to gameplay is visible within this box. 3-02, 3-03, 3-04    Fills Title and User data directories Steps for testing: Run the tool. Run the title; ensure that the title displays compliant UI informing user of the need to free space. 3-11    Lists available blocks for all memory devices Steps for testing: Run tool; note the space available for each memory device. Run the title; ensure that game UI matches the values displayed by the tool for each device.  If a graphical display is present, ensure that it follows the guidelines in 3-11. 3-14    Change Language Setting Steps for testing: Run the tool; choose a language. Run the title; ensure that the title functions as desired. Repeat steps 1 and 2 for each language listed. 3-15    Change time zone setting Steps for testing: Run the tool; choose a time zone. Run the title; ensure that the title functions properly and that time, if displayed, is correct for the selected time zone. Repeat steps 1 and 2 for each time zone listed. 3-26    Create Soundtracks with localized text Steps for testing: Run the tool. Run the title; ensure that the localized soundtracks created are displayed as required by the TCR. 3-26    Create Nicknames with localized text Steps for testing: Run the tool. Run the title; ensure that the localized nicknames created are displayed as required by the TCR. 3-26    Create MU with localized text Steps for testing: Run the tool. Run the title; ensure that the localized MU created is displayed as required by the TCR. 3-26    Create Saved Game names with localized text Steps for testing: Run the tool. Run the title; ensure that the localized saved game names created are displayed as required by the TCR. 3-33    List all files on Xbox; hard disk and MUs Note: this tool does not ensure that a title did not copy soundtrack media files to any other location. Certification Testing Techniques Certification tests may include steps that are not immediately evident from the TCR description. These tests will be outlined here. Unusable MUs Steps for testing: From the XDK Launcher, press X for settings. Choose  Configure Memory Areas. Select the memory unit to be  corrupted. Choose  unformat  and confirm. Run the title; ensure that the MU is visually distinct and cannot be chosen.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\Xbox Retail Demo Disc Requirements.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Media Demo Outline / Reference Document Title _PID_HLINKS _AdHocReviewCycleID _EmailSubject _AuthorEmail _AuthorEmailDisplayName _PreviousAdHocReviewCycleID _ReviewingToolsShownOnce Retail disc requirements doc sberfield@xbox.com Scott BerfieldDemo Outline / Reference Document Imagine Normal.dot Colin James O'Neill Microsoft Word 10.0ob]m} urn:schemas-microsoft-com:office:smarttags country-region urn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags address urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags State urn:schemas-microsoft-com:office:smarttags Street urn:schemas-microsoft-com:office:smarttags PostalCode urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags stockticker Minute Month Year[ crC'| L(Jz0 I2:Jz0 k@[:Y b3l]" xqPU0 xy4c|N%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz &'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz zuSIU D";d; ,Mn$gS pGqo2 i/Jusw x-l5{K Eek>% )apAVS ]7Fy-4 Ory5, %-eef 01U|wF f{]fy jW+iek y%yw1 WAn9\P }3b(" |%we= |^i_- q_@x' ]OAI. c_-|Y >x~Is Ys'f|O 8*qQ] GbM+7p SzRm# lPLTE <<<%%%000(((   QQQXXX@@@PPPcccttt```ppp 9QIDATx f!_rp 8z?|X @"HDN (? CN@"r =>><>> IA@"H ^;oIM 4"r$ZN >%1?x DBb,  9,J"u TM'>%Q A"HDI -{H'T ]m r& HDN (? Yj2_+] $Je*?V {BbsKvy 5K@ZVQ SGJXr RNs'F][ |Yrk: krqeZ d1vlN A?jihx MWW:H$ YR3@l +3m?E 3mUY} NZm5l$ 4l/H7(X` 7s1*m 6y8bRc .$ISHj %9=8>(o uBE-j YjTn1 iR-9S x+$*9+3 A~A"H A~A"H A~A"H xE%cn ty#Q* IA"H| vNt"qX [;Q7G z||x|| *<!1k Dkkj0H #@"H| N~'%Q x]%sCc [;Q7  A~A"H =>><>> x?'q& t`2=< >Om/* ,I4Jv UH!TN#? %yC:q/k uRoNmL mt]>H (?3O/ Kbu,O ZIkg" {1$>> js5D}W} TT;S[ oD@"H y^^~~ -_nM% g:1n$: Z)2-f agh$j{p <7`T+Gz @"H|U $B@"H C~ (9 C~ (9 C~ (9 _Nj~5^ wObt/; $ZMj$ 'pX#o Fo}c? GcnYSH [RSHT- !?_*] B'B>D %&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz &'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz zuSIU D";d; ,Mn$gS pGqo2 i/Jusw x-l5{K Eek>% )apAVS ]7Fy-4 Ory5, %-eef 01U|wF f{]fy jW+iek y%yw1 WAn9\P }3b(" |%we= |^i_- q_@x' ]OAI. c_-|Y >x~Is Ys'f|O 8*qQ] GbM+7p SzRm# ob]m} ob]m} IDATx^ TVuUuUw$ 1zGz: !>otZ t_:w< 7xom0 5'l2>p=rz f32L4 WBrEu_ 2h5d/m 1&c^O< W{o3y* X'Kfb  Pe%T IQ xB pz^T?{ ]s#W6n h^zNx ,>hb( t@d7  R1nE. |7,Z%E ZjQ*L f`D . HY^^9 LWHs{ L)E|S, 9>y|B.* "wCaO JEdf! #fCh^k. |g]= zx V5KTT cFm5* L\)6_ }tfdr~j|n j|_\L rumedZ SSSccc UYEL% Y2Jmb H"`yax };rmIW BA_Eu8I- GQAWt ^}zVx ZAu|~ eFw@T ^}tti Kv/?  (Ey%T \AV'I` ^,z*N 0''uL4 [C!P!D]#0 V"wub 8>QmV ).bqOp=d =?0Ty 8NCgO \X[ZXY Q]X\[ 6wK0znn. !5ECZZ -]w ;RZYY (U&4<;#]& VbHd0 !p!P0 XA0`P Zs1QhC c:KC~3 E?4B9 Q3vu9 .\yey FZcl>> ~O4V`pH 4p'qqwt :s@;zjfb R?qb~|R\ "1@ir H>fN} g^8sei A@,JK -aj_<9 K]da5 .WW.\| .\1VTT XidV0*Ps  i&$!+6 ObQ3% 1+:@a2f W.]>w ^A":ba $.F`] KW/7[ .3 F* LOMMb kO}}iy {|IFV 8KcqO(O nwck: ]<GKB) [\^my JQT[- ',)fuf (X8`+rL@O ]>7[6-E ,+T RX\B; (_ZY| bmb*H ;7.5N=:j %$5Wz q&W 8S ha8cP J%5.1 (E$/ZB*9  ys\(D nM[mM eEs&f ?86qD 2zv`A1 S?#R: =B#nN< grR&p `)}D} 1LgN" =2Z9hDE m_lEHGd xE/r"yE LScxV ^+h^z F<7rK ))L8@ a":hR C$RB^ \*N-! igvjV +*R\f NSdi/<5 CNA=i LyBfIm/ r$)ru s0;SBz t[/L447 >N%SF"# n$_`s= V_#zE)n YEsi3OB 2|N_O _<b-x 4<Z=P:L yj8>1 6TUia MNN2xe9 xjn|ffF7 (tuC+Z v*J;i g>322 =Ibo. JO72} 4C=pdvt dwGEf MH qiN garrbv $a!#V -T,8_, AtC:- XUAX=c 4j)>T cfZ23 WFh0& u<;?s }p<T=7ha s.v{K hG=MK :th|j g;n't0 ^T,Ep( @"h\! ,crjD ?y^K[ 7KM!?h &gNh3< $y&;i sRh#< ?F}0r ,Rf2j ^s*c/ PquBZ Nhk9X! kA"DV9 TKUQ: euYEu YR"K$ p3hTHos I-Btw ;fA:xd 0<RwS+9 8odz8 R#PlX TqMt$/ j`aVn o*kuJQ V#a4Z \35(^0 _&MOg> E;7p{I (fZj% /...b uf'|D! *AiFPJN( fM3}O Kb2g2 *#%<4 `dZ4F r#i5r |?Z9=\ .]ZZZ VI,-//^ #@ffK -?xP( 8:C&ts v)nwGK y{:O'7[ t)@}) KW^Q@EI @gBTr TRetxXk6._ 'jPKPV8*V Ae#EH A43K~zB'E Z;W*DV 5!t`% R2#LW &a,?">/ -{anv \CV(Y& :W{i? c /@b7 ajhZ@ &fUl2 f>CL@ +W/`yx@ 6 +{(j :X``1"[M Ks'^2G p,Q=* |x4cl W,U$% 56wG0 z0|;0 4pCnw 4=7:j Q_AiC }@:x, h'1=h AD+0kj H5uZS' o:c0M >z;zuk uL`wKNJ J14P] wBIBI!= 0B58U  (^jHZAs* vQ3;* d[w~s M})o5 2W[?[ 6BCnEq alYxW g?zKa >N|7K +d2(a A[X1ci #FXSG 3 v j SZc[CE 6-+X# ?A4U(zY -SP2u p")t]7 VB5CQ) 67rhPt F@t-% =i%!% Qh/Zut ur#p/= @E*k2 L5:_2 (z`g%[ B9-,q #W/X;L V$=F6=rSR  v;I; ^<<4p /_a;vl bhXF4b >z6z^ {6z~OQ \GQS4 ?|VVL X<l+Y3 <=;*K5 8R$)Ab I,GQb <=IV\ ;GS5[ N}paA o97_;j 75I-I jyAVrJ U#Y\? -s iiC3I EnlvR ydLI! N%2Q< S*kvVU 3`/;tk @`V#% *_wU#R 9&`Vd3L G#|;p )4ldz -UMv; W~28t 5/sY8 C|IYc k^a<64<BA Sw^yY U18)} ~Xw^5 b2$jG z;0v| FSe{0 YT GLz8 YegyPk6R 3}?D`@b MLrC| =H&<a "^`$# NDLGRV ZnM3ZF }tdpx hyu T` Z6+.d 9wkeq {a@P& O\pr% 7IGvQ uRR]N= ->tg8~ d-0;)% [vDaPka. QPE(! gN=iB lD8)F X(U!Ziw: ' x%7P$ ^:W|4:,g B<eL@ oj983F Tt+St !ooC: G&6=n CWEcPw[ ccMn!3 nj ok u2(54R +GVT*K E8*a5 G<8U4Z" m}<p& "N>AO'l &|bS^ $h5!E 4u%Sj SWm\L (? +' hIEy+ WqjRh KjP1t 76h$R ,h-1U$6r i;8H@ 6F1RQgV *,3," 4)EgI3 B,cjz -8iB{Q [r'4s [~}pe w?s(m  ?jn8 UP~#y mXeHn 4_;rK !K/Be )"`b" 3?B#P) }rO%\ MrC`0 ]d9,9E ^xj6Wo1 ;29},6 K RJNv pZ=xGG jg\'&U vQ9O,eA. /\(BJ 7MuR)z+ I7^=* ~r)ssS/ Bw)#- w0xZ9 620X) `QZt' p'dbD6 `m[v9h #JLG%u 0[vA` 9=!X  -(o>w +v}lZ V::1Y* n&%q4j +P(Rb e}[/Y 'F)'t cAX(* r<j^wY m4+Gc3j #%{Pp Ja`h`x Z=k8< iNOyNu j~y [ ,W4xC /O}(x; gm/0a" dtRD: Tp7w1Gqb S+dCGvu HjAfI 6AKfE {G-53 g-?'= A2] &3  #W(Y |Z/Y* 4=H!E dB>f~]p% [I[,u '>%WA 3\AX. >3424Z '2mT8 :&8a-  ?!u4>H ,do'1 g^f^o  BIy>f n|/JWA IvTg{f6) o"pv{ YwDxt! VWKG/)o V7VJG/'k pYySt ttIA!P zIa4(& K\Go|t >zuB+ F`cmW vtec} eLW:z ;'i3& ]<*e!P *T;Z- #J;e::D xJK^h c +u[ '$@g9 TCwqz G|q$Q !cU,nG *F4z_7 @JcNR# _xdc- M2[d]m SQj[m? 4Y"F{ 1X3fd 9Q'}* m;zE-do %Y}BR UqD}dx {>0uPn J0mR2 63#nj :Dkn{ 6mam6 C^BeT @m-X^ JbE0Fd6 E3qfP i2i;g $hlK# & >:v W(|\v B>1<x O.RB[ TMErT hX& ,\  DNkE /7N7!`l he((D +KH9a 0a$#cL< 0 Cc6 &<).,6_ g!b5p ;5}tY  5VOKAdobe Photoshop Image Adobe Photoshop Imagex8BIM 8BIM' HLino mntrRGB XYZ  acspMSFT IEC sRGB -HP   3desc lwtpt pdmdd $lumi $tech Copyright (c) 1998 Hewlett-Packard Company sRGB IEC61966-2.1 sRGB IEC61966-2.1 IEC http://www.iec.ch IEC http://www.iec.ch .IEC 61966-2.1 Default RGB colour space - sRGB .IEC 61966-2.1 Default RGB colour space - sRGB ,Reference Viewing Condition in IEC61966-2.1 ,Reference Viewing Condition in IEC61966-2.1 CRT curv  A l  !H!u! "'"U" #8#f# $M$|$ %8%h% &'&W& 'I'z' (?(q( )8)k) *5*h* +6+i+ ,9,n, -A-v- /$/Z/ 050l0 2*2c2 4+4e4 676r6 7$7`7 :6:t: ;-;k; <'<e< ="=a= > >`> ?!?a? @#@d@ A)AjA B0BrB C:C}C F"FgF G5G{G J7J}J L*LrL N%NnN P'PqP R1R|R U(UuU X/X}X ]']x] <>JSH* MQ:;JE! $SI8MLA8 3LGGISLD$ 7WA=EJHL@  //+  EKE8AIECI6 %11)$  LP@F78DGI>$ #,--) %?J=A=<DC@E1( %*.$ &! J@BFF?=>?VG1   #!0/ PX:<C@GCL8BG?, #''#!!" (('%#  *)&*'! XtK0G:A99:=DF=, $-%&&%$#-)" %),*'%#"%'"$+3y; a;?6KD=7;CE?7'! ())*,, #*-,$ |U>:=?>;76;@=2# #('&&$##$$ +%,.//10$%&('&&$  "#  $*U| q67<>>8311?:4/+&  $$%''&$" *+**++* 010011 /'%'*,+&  )$!Cq ~]L9148848:<?<4& !$%#" 4310-,,+ pTA:=AB:9::;72-.*%#$ 5%;950-*'('%# !"$&# sWA9;>:524687D<0(%'() ?=83.)%& }n<2:879;9;<&.22+(*,//100/.- :F;:874479<><<97+,,)# $'&"&1: `;?<648508503773-//01010 <J=<>ACC@=;:<=<=<::.' #*)  ]=4754583/38:83 H>GDBA=9652$$%$! "$$ uP756526863123/../0367 EGFDCBEKPRKGA90,(%(&%%$#! &+!!  oL528:974.-- ICKNNPB?90)$! $'*&"#&)Xj )-,""!  hG<2)*262+./0/0 KHHLQRPKB=0.,'$#"" \%#1& \J6-053 OJB8/("! #<$&$" g$';%# %%#"  ~aE1+,20 SHTZSG9,%   !!%$%$ g+#43+ &&%$"  6.04,'+)!%*.1478;=@??<85BB?@? P_OMMNSTSRWVVW[\[Y9.&$"  !"! ! x321/-+*)''&$"!  zaJ.+.,'*+$(+,.02578:<>@?== MLMMNNON T_OPQUXYWUTTUWURKE/& $$" !?`t{ r@321/-+*)''&$"!  ~t? */*),0,(*,/,+1249>ACE V\WXXYY[YXY[[ZWa[RJB7,& &Cgwv w8/4310.,+*('&%#!   {jG%%.)0.,*+*(%(),18>EGBBDEFEDC \Wb`^_`cdc_TB2'  %>b{~} x8674320.,+*(('%#"!  `;,('*,,*()+##%)/5<>BCEHHIHH __`acege`[@7*! !!$&# %9[y|w{|y z?9>>5431/-,+)('&$"!! j40(  #%),.0<?EIMOPP QSSTTUUVV b_hihf\M<1($"   *F`uqsz{uy }=<C=:65420.-,))(&$#"!  }\H/$%(% ''& $".3:CIPSV ^]^^__`_ gWnfZJ=.  %$$#$" 'E`qzrwytv }D@C>:566420/--*)('%#""   y[?.*.2,)(%!!  %.:DMRV ggeffghhiihhiijjkkcT=) "%)*+ )Eeuwsspqw~ S@DD:5676531/.-*)('%#""    $'%! +>QSTTVV ]^^_` g!cfjmmllmmprqpnruzqkmol\N"!   U^hmmoswyz|~ DCB@><;998754210-,+)'&%$!! ygZ,% &,)#%!"')$ >EPX^\YU`^\YXZ^a\]]^_ ghhii ktuqmlnoonyuprusleuvtkWA,  !$%$#" #&$ /Pk^emqoqux{|~ MDCB@><;:98754210-,+)'&%$!!  ~xsR* "'4@MW`cXZ^dge_Y``abbcddgghhijkk q)wqlmsvvutwvsmnv~tbI3%  /Iaklhm sJtwy S@DDB@?=;;98764321-,+*(&$$"!  |zyytpszuX0 #%$&&  !/?PYbbca``abeeffghiikklmmnoo stuwxwvvttwxvmfB3 !! "#$"  .Pbb_acmqtvuv{~ Q@MDDCA?=<<:9865321.-,*(&$$"!  |{ywsusw #(-P[gjebeljjklmm pqrrs }xuw{yyzyoY=) &1QU\djieanptvvz} QINJDDCA@>==:9875432/.,*(&$$"!  ~|zux~ |uleA( 0Jaosrpoopqqr tuvvwy xqbM7( "6O_ddcbbeilpruvz| WGKLCEDCB@?>>;:9764320/-*(&$#""  {tty|yrw_A-! .AXit tuvvwxxyz{{|| xp_G) -=MX_bY`giggjntvx|} SKRI@BEDCBA@?>;:9865330/-+(&$#""! }|{ytpmkpwzlK( vwxxy||}~  "%$!   $&(/CXb]UTUeghkmosvyy{ >VELPJB>EDCBA@??;;9865330/.+(&$##"! ~~}zyxwvqmkrvfF* -Ii{{z} 2CNOPUX[^`cfhloruw|}~ PONMLJIIFEDBA@?><;:976540/.,)'&%#"! ~}{xwwrnmouupk^A  !""$& )4CPWOPQVY\``fgimquwx}~ \PONMLJIIFEDCA@??<;:986540/.,*(&%#"!  ~}zzyrstrqty~prcC "7IPQRSQRUX\`cdhimorwz{~ fGPPOMLKJIFEDCBA@?=<;9765500.,*(&%##"  }}|wz|yrmlnmnnqud5 ""! $  !):CKMJFHLUVX\`dfglmorw{}~ kPUPPOMLKJIFFEDBA@@=<;:865410.,*(&&$#"! u'jnmlpqhY0 &7BKIFFHJKKXY]`dgjkoqrw{~ dSXYQPONMKJJGFEDCBA@>=<:865410.,*('& zstx|zxkpqnjmoprc= #.7=@BD@BGLPQQP\]adgknnruw{~ hRUYRQPONMKJJGGFECBAA?><:865410/-+)'&%$#"  |yxzxto vmkjigfjmrmP& $0?JLG@<FINOPUZ^_`dgknpquwz} lW]ZONQQPNMLKJHGFEDCAA?>=;864311/-+)'&%%$"  }zxuvqqvqhek\_bkupT8 1D67<?@BFIMLOU[ `behloqrwx{~ dUddUOPQQPNMLKJHHGEDCBA@?=:864311/-+)'&&%$"! ~||vvsrpmllkkjhheccZ8 $,249=?BDHJLLNQUX\^`dgimpsvx~~ ec`]YWVUTSRPOMLKJIHFECBA>><:9755321/-+*)%$#"  ~~}xvvsqoolkkjihedc_lmS(  *7>>82.=>@CEILLNOQV[^``ghjnquxx~ hdc`\ZXWVTSRPOMLKJIHGECBB?>=;9765321/-+*)%%$"  ~yxxvrqpommkjhfeekc_jo`: !*58<<:566?@BDHLMMQQUX]`deijmpswy| qYcb_\ZYXXTSRQONMLJIHGEDBB?>=;97654310.,+*&%$#! {{zxwutrpmmki h'^`djkf[RD' #-652/03799BCDHLNPQUVX]`dghmnpsw|~ odgba_\ZZYYUTSQPNMLJJHGEDBB@?><:8764320.,+*'&%$"  ~}zywvvppnmkjihifc]XXZ]e^L+ +463/,..04: >,DEHLOQRSX[]`dhklpqsx|~ tbeqba_][ Z6UTSRPONMKJIGFDCB@?><:8765431/-,+('&$"!  |yyxrqpnmkjjcb_^ \ ]TV_iiR+ $<+.5641-,,05789>@HILNQSVW\^`dhlnosvx| qfiieca_][ Z5VUTRQONMKJIGFDCBA@?=;98765420.-,(('%#"!  ~||zssqpmmkkihffd`\XXUV[_]TJ*  ,8w21-)&*/5-17:9:>@JLMPRVXY^`dgknqrvwy~ vghliadb`][ZYYVUTSQPNNKJIHFDCCA@?=;98766420/--)('&$"!! ~||ssrppmkklljgbaac_YTSPOICi\A $394-+{ %),.12<868=CIKLLMQSWY[``ehlortwy| ygnqfbldca][ZYXVVTSQPNNKJIHFECCAA?=<:8876531/.-))'&$#"! zyxvvrqqkkied`^]^][YXUTTUQNLD, "&*,,+.0 (},.1356==@BFHKLMOPUY]_adgimpsvx srqomkjidca_][ZYWWUTRQOOMMKIHFDDAA?=<:88664310/.*)(&$#!  {{yxvurqlkifda_^^]]YXVTTYSOOUTPK! $$+$'+,,+-/.()-/2477=?AEGJLLOPRV[^abghjnquxx sMqomkjidcb`][ZYWWVTRQPONMLJHFEDBA@><:98665310/.**(&$#!! ~~{ywwutomkifda`^_^\YWUT\RIEHQZ`^H& %.+(&)--+,-/ ,-.1378;@ADDILNOPRVY^aeeijmpswy| vitsqomkjidcb`^[ZYXWVTSPPONMLJHFEDBA@><:98765320/.**('%#!! }|yxwvrpmkifddb`_]ZYVVZTOKHIO A'#(&&)+.-,+,. ./1379<=BEDIKOPSUVY^aehhmnpsw|~ xsutromkjiddb`^\ZYXWVTSQPOONMKIGFECBA?=;:9765320/.+*)(%#"! ~|{xttqmkifeeca_]ZXV RNJJK<NF.&*+*+-..,*-0 1237:=?@FGIKPQTUY[^aehlmpqsx|~ utsqnkihedb`^\ZZXWVUSRPPONMKIGFECBA?=;:9775421//+*)'$#"!  ~}|vvtqmkiifeea_[YXVSRNJFDCPZL3/43/+-/.+,.1 3479=@ADHJLOQUVX]^aehloqsvx| ~|}{}vusqnkihedc`^\[ZXXVUSRQPPONLJHGFDCB@><;:7754210/++)'%$""  xxvtpmkkifea^]ZYZWUTTSQOKP?((00.,,.,+,03 578<?AEFKLNPTVYZ_aehloqrvwy~ |}}zvwusqnkihedca^\[ZXXWUSRQPPONLJHGFDCB@><;:7764210/++)(&$""  yxvtrolkifeb_^ZYVSQVXVRMJOA*"!"$+-.,,-14F67;=@DFGLLOSUXZ[abehmqruwy| ~}wtwvsqnkihedca_][ZYXWUTRQ P5NLKIGGDDB@?=;;8764310/,+)(&$#"   ~}|yvsrqlljhda__^^\XUSQQNQN)*/ -/13467t=>ADGJLMOPRW[_`aehjnqswy| |xxwuroljidcb`^\[ZYXWUTRQPPONLKIHGEDCA?><;:9864210-,+)&$#"  ~|ywusroljhec``^^\YWTRQNQN)+0-,-.014578t>ABFHKMNPRUX\_adhiknrvyy |xxwuroljidcb`^\[ZYXWUTRQPPONLKIHGEDCA?><;:9864210-,+)'%#"  ~|ywuspoljheca``^\YUTSOQO*,1.-012468:; ABDHKMORRVZ\_aegjknqty}| |xxwuroljidcb`^][[YXWUTRQPPONLKIHGEDCA?><;:9864210--+)'%#"  ~|ywvtrpmkifddc`^\YWUPSP,-2//23469;=>tDFHKMQSTXY\_behknnqty| |xxwuroljiddb`_][[YXWUTRQPPONLKIHGEDCA?><;:9864210.-+)'%##   ~|yyvutpmkiigec`^\YXQSQ-/411678;=@ABtGHKMRTWX\]_bgkmnqsty} |xxwuroljiedca_]\[YXWUTRQPPONLKIHGEDCA?><;:9864210.-+)'%$#!  ~||xxvtpmkkihgc`^\\RTR.063278:=@CDEtJKMQTWY\``bfkoppsvy| |yxwuroljiedca_]\[YXWUTRQPPONLKIHGEDCA?><;:9864210.-,*(&$#!  ~}{yxurpmmkjhec`^^RUS/1754:;=@BEGH LMOSWY]^bbehmpttwy} |yxwuroljiedca_]\[YXWUTRQPPONLKIHGEDCA?><;:9864210.-,*(&$#!  ~||ywuqpmkkigd`^^SUT/1754;<>ACFHItMNRTX\^_behknqtvyy| |yxwuroljieeca`^\\YXWUTRQPPONLKIHGEDCA?><;:9864210..,*(&$#!! ~{xvtrnmkida__a]X5698?>@BEILOP RSUY[^`bkknortxy |wvtroljifedb_]\[YXWUTRQPOONMLJGFDDCA?>=<99764311-,+)'&$#"!  }zxvtqnlifda_a]X67;;@@ADFJMPP TUXZ]_bckknpswxy ~|wvtroljifedb_]\[YXWUTRQPOONMLJGFDDCA?>=<99764311--+)'&$$"!  ~zxvqqmkifdab`Z9:==CBDEJLPQT WX[]`bfgnnqsvxz{ ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFDCBA?><<99764311--+*(&$$"!  ~zxusqmkifdea\<=A?FEFJLPRVW [\^`dfijpquvy}~ ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFDCB@?=<;99764311.-,+(&%$"!  }{xvuqnkiifc_>?DCIIJLPRVYZ ^acfhlmnuvx{} ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFDCB@?=<;99764311.-,*'&%$"!  ~zywuqnkkhd`@CHHNLMPRVZ[\ cdfjloqryy{~ ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFCCA@>=<;99764311..,*('%%"!  }zyvspmljgbADIJQOPQVY[^_ ghjmorstz|~ ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFCBA@><;;99764311..,+)'%%"!  }}zxuqpmkgcBEJLRPPTWZ\_` hilnqswx|}~ ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFCBA@><;;99764311/.,+)'&%"!  }zxvsqkpaLIMPSVWY\_cefGmnoquxz{ ~zxwurpmkjfedb_]\[YYWUTRPP N4MKIGFCBA@><;;87654211.-,*(&%$"!  ~|ywuslqcNIOQUWXZ]beghGnoqswx{{ ~zxwurpmkjfedb_]\[YXWUSQPO N4MKIGECBA?><;:87653211.-,*(&%$"!  ~|ywvoteOMRTWZ[]adgjk pqtvy{~ ~zxwurpmkjfedb_]\[YXWUSQPOMNMLKIFECBA?><;:77653210.-,*(&%$"!  ~|yxsxiTPUWZ^_adhkmnGtuwy} ~zxwurpmkjfedb_]\[YXWUSQPO M4LJHFEBBA?=<;:77643210.-,*(&%$"!  ~|zv{lWSY[^abfhkoqrGwx{~ ~zxwurpmkjfedb_]\[XXVTSQOO M4LJHFEBA@?=;::76543100.-,*(&%$"!  ~}x}o[X\`cefikosuv ~zxwurpmkjfedb_]\[XWVTRQOOM L3JHFDBA@>=;:976542100.-,*(&%$"!  q\Y`cfhijnsuwxG}~ ~zxwurpmkjfedb_]\[XWVTRPON L4KIGEDBA@>=;:96654210/.-,*(&%$"!  5WQIT s]\bdgjklqtvxy ~zxwurpmkjfedb_]\[XWVTRPON L4KIGEDAA@><;:96653210/.-,*(&%$"!  +JVSTV tdcefkqqsuz| ~{xwurpmkjedca`^]\YXVUSQPOMMKIHFDDA@?=<:986653210/-,+)'&$#!  >PTONN ugdffmqrtv{~ {xwurpmkjedca`^]\XXVUSQOOMLKIGEDC@@?=;:986653210/-,+)'&$#!! xhghiostvz} ~zxwurpmkjeeca`^\\XXVTRQOOMLKIGEDC@@>=;;986653210/-,+)'&$#!! )GQMLKMM zljlnsuxz} ~zxwurpmkjffdb_][[XWVTQPONMLKIGEDC@?>=;:886653210/-,+)'&$#"!  JJPILMMJ }oopsyz{} }zxwurpmkjfedb_]\[XWVURPONLLJHGECC@?><;9876653210/-,+)'&$#"!  7UKPHLLHB rssv|}~ }zxwurpmkjgfdb_][ZWWUTRPNNLKJHFECC@??<;9876653210/-,+)'&$#""  +OPNPHKKE> |yxwurpmkjgfdb_][ZWWUSQPNNLKJHFDCB??><:9876653210/-,+)'&$#""  DSGOPGJID@ }yxwurpmkjgfdb_][ZWVUSQPNMLKJHFDCB??=<:9776653210/-,+)'&$##"  EXKILLKG<4E |xwvtrpnlkfedb_]\[WVUSQONMKJIGECBA??=<:977554310/.,,+)'&%$!! ,LQJL J4G=3E |xwvtrpnlkfeca_]\[WVUSQONMKJIGECBA?>=<:877554210/.,,+)'&%$!!  GSKHLHHJE=5G |xwvtromkjfeca_][[WVUSQONMKJIGECBA?>=;:776554210/.,+*)'&$$!! ASPIJHDDGD<7H 0/"4+ |xwvtromkjeeca_][ZVUTSQONMJIHGECBA?>=;:87654321/..,+*('%$#!! :UPNLFGBAEC=7I 2*%)9! |xvusqomkjedca_][ZVUTRPONMJIHFDCBA>><;987654320/..,+*('%$#!! ?"OZKMJAM??CA=6K 3+5&6< {xvusqolkjedb`^\[ZVUTRPNMLJIHFDBA@>=;;986644310/.-++)(&%$#!! EPPOOIDM<;AA=8M 537-1=% {xvusqnljiedb`^\[ZVUTRPNMLJIHFDBA@>=<;976644310/.-+*)(&$##!! 7XMMQNHLM;<?@=8M 59,60-<# {xvusqnljiedb`^\ZZVUTRPNMLJIHFDBA@>=<:976544310/.-+*)(&$##!! "ZIMQOJHHI>@A?CCQ ;.87/5?1 |}wttvutqomkjedb`^\ZYUTSQOMLKJIHFDB@?=<;:976643210/.-+*)(&$##!! ATMOONIFDC>AB@DDR ;.4307A;* |uzvutqomkkedb`^\ZYUTSQOMLKJIHFCA@?=<;:976643210/.-+*)(&$##!! ;YNPOMKHFA?@CDAFET <34338@B=, v|vusqoljjedb`][YXUTSQOMLKJIHECA@?=<;:976643210/.-+*)(&$##!! .OSMVRLJHF@;BEFDHGU =;;::;;<@M x{{vwvusqnljiedb`][YXUTSQOMLKJIGECA??<<;:876543210/.-+*)(&$##!! #LQKNWPKHGE@<DGIGKIV >=<=?>88<I> j~~wxsvusqnljidca_][YXUTSQOMLKIIGECA?><<;9876543210/.-+*)(&$##!! DTRMPROKHGFDBFIKJMKX @<=?A>;:;=S. vwvuuspnljidca_]ZYXUTSQOMLKIHGEC@?><;:9865543210/.-+*)(&$##!! 7TRMQNMNMJFEGIHKNLOLY AAB@?>A>;:LE% Luzsyttrpnkjidca_\ZXWUTSQOMLKIHGEB@?><;:9865543210/.-+*)(&$##!! .URQNLLJMNKGFJOHLOMPNZ AJJC==CA;=7OL nxutrpnkjidca_\ZXWUTSQOMLKIHFDB@?><;:9765543210/.-+*)(&$##!! GYHNXQGEFGIKMNOMQSVONg E'HG@GB zrnqrlhidca_\ZXWTSRPNMKJ G4FDA?=<<;9876543210/.-**('%$""!! /LXPPOJKIJKLNOPQNSTWQQj HIIHHG I]BEK, |sromopkddca_\ZXWTTRPNMKKGGFECA?=<<;9876543210/.-**('%$""!  .HMRVRHHTNNOPQRSSQUVZTSk JdHIHHGIICDRQ* bursplnpkbdca_\ZXWTTRQOMKKGGFECA?><<;9876543210/.-**('%$""!  !JOKLPOJO[PPQRSS YZ\YWn J_LIHHP_H  Vwtrpomifdca_\ZXWUTSROMLKHGFECA?><<;9876543210/.-**('%$""!  GTMMKIKOUXQQRSSTUUZ\\`\Zp LOONNMMLLOKNNJWX<  otvrmkjidca_\ZXWUTSQNMLKHGFDB@?><<;9876543210/.-**('%$""   6WOLRNFLSQMRRSTUVWW\__ba`t MQQPQOONNRKQSILXV9 Nfvpilmhdca_\ZXWUUSQONLLIHFCA@??<<;9876543210/.-**('%$""  (LTIKRLKVXMJTUVWYZ[\`a`ecbu P,TNQTPMPR]  Hjoijkfdca_\ZXWUUSRPNLLIHFCA <-;9876543210/.-**('%$""  KYKHIPIPa[MNVWXZ\^_``dbggdw Q-PTSPRVTIB^R ,]plgffdca_\ZXWVUSRPNMLIHECA <-;9876543210/.-**('%$""  @OJOTUROKLQX]Z[\`acceigokid UWXc? 2ejfkcdcb_][YXTSRPNMKJHGFDB@?>;;:976553320/.-,**('%$""  0GKKSRPTVSOPW_[\_`cdffjioljf Bnnbldcb_][YYTSRPNMKJHGFDB@?>;;:976553320/.-,**('%$""  /NKJPONOV^[TQWa]`aceghhmkrpni a\\[[ZZ XWOYec& Ymdjdca_]ZXXTSRPNMKJHGFDB@?>;;:976553320/.-,**('%$""  GTNOSLHU[_^XW\cbbdfiilmposrqk b__^^]]\\ ZWOXUkN (\oadca_\ZXWTSRPNMKJGFEDB@?>;;:976553320/.-,**('%$""  ?ORNUJBNb_\Z]addefgjknoqurwuuq daa``__^^ ^W]S_ajK 7dgdca_\ZXWTSRPNMKJGFECA@?>;;:976553320/.-,**('%$""  -PMOTQGGZg`\Zbghfhiklorsswtyxwt deeddcc aVZb[ij) Akcca^\ZXWTSRPNMKJGFECA?>=;;:976553320/.-,**('%$""  "ONKPVNKWb bdghhjlmpqtwwzv{z|w cW^f]]abO "Pbb`^\YXWTSRPNMKJGFECA?>=;;:976553320/.-,**('%$""  <\HIVSMWhcY^ehfdgklmnqsuxxzx|{~x fgghff cWmlb^^ad\ )cb`^\YXWTSRPNMKJGFECA?>=;;:976553320/.-,**('%$""  B^HOROBH[daffgijlopopstvyz{v{ qkkjjiihh =U^\`ZRWTSRPNLKJIGEB@?>><<;9876554310.-,))(&$#"! +NTSRNKLWcgcgghjkm qtvwz||w|  A^]W\]TTSRPNLKJIGEB@?>><<;9876554310.-,))(&$#"! OULWRIJ[jjgfiiklnorrtuvw{|}~z~ &N_TY_RSSQPNLJJHGDB@ <-;9876554310.-,))(&$#"! JYPMOLGRgrlghllmorstvwxy|} spopnomnn 1S\VTRSRQOMKJIHFDB@ <-;9876554310.-,))(&$#"! ;aULQIFP`orkjmnoqtuwxxz{}~ 6Y^RSRRPNMKIIGFDA@ <-;9876554310.-,))(&$#"! 2TRVSMQL\mqnkmnrrsvxy||~ vwvvuu ntus% D^ZSRQPNLJIHFECA@ <-;9876554310.-,))(&$#"! JULSTOR]jsrnpqqvvwxz} wyyxxwwvv {quxg 'IWSQQONLJHHEDBA <-;9876554310.-,))(&$#"! RIRTGOXLnqusrutrvwxz{~ wzzyyxxww -MUQPOMKJHHEDB@ <-;9876554310.-,))(&$#"! GUOLQQJRippruvxyy{| y|{}}{{yr wrxyz}L M:KIHCBA@?>=<=<;:97664320/-,+))'%$"   /LSRPNKPcqqrsvwyy||} xwsz|{ @QSRN I8HCBA@?>=<=<;:97664320/-,+)('%#!  'UORRSJI_vzstwxz{}~ zOxv|}y $DPVNGGIHCBA@?>=<=<;:97663210.-,+)('%#!  LTTQQOKVo {xxy{| x{~x{ .FUPHHIGCBA@?>= <-;:8765321/.,+*)('%#!  >YKTONJSk~~wzz|} 4IMKJJGCBA@?>= <-;98765210/-,+*((&$#! 3SNUUNQSe} yv}}~ #8FLJHFCBA@?>=<<;:98655210.-+*)('&$"! $RRLXTNUfx $:HGEICBA@?>=<<;:9865511/.,+*)('&$"  O]LNQSM[v 1BCBJCBA@?>=<<;:9765511/.,+))('&$"  I]LYXJQRr .B;BDA>>@@<9;:97643200/-,+*)&&%$"!  /RUITQJVf{ 6F7FB?>?><9::9754320/.-,+))&&%#"!  -UVPMNKQd~  :;FD@>>=;::9875322//.-+*))&&%#"!  1!TUPRTLNey &>EC@><;;: 9,64321/.-,+*)(&%$#"  E_MNRPJ\{ *@@?>< 98764 .%-,*)((&%$#!  ;ZSOPPKSm 8:=>< 8-753210.-,+*)('%%$"!  1SWKSRNTj /5;>=;::87653100.-,+)(''%%$"!  X_IPOOPb *19==;::8764310/.-,*)('&%%$"!  L[OLMJJ\| (585<G98764211--+*('%%$$#!  >RNOTYL[r #.69:>98754210-,+*(&%%$#"!  <^TIPYWWs ! !%089487653210-,,)(&%$##"! 2W[INUQNl "" '4717764210/-,+)(&%$#"!  VZMIQLN_ !+33665310/.,,*)'&%$""!  FYPKMIE_ #+265421/.-,+*)'&$$"!  A\QJMMGWz R'$""! #)54320/--,+*)'%$$"!  >[ZQLKFJn !54320.--,+*('%$#"!  &MTNNQLMg &(-253.-**)'&%$#   NTHYTKLd $).120-+*)('&%##   J\QLPSK\ "(./-*)+))('%$##   DYQNVNN^z %'(!&.-*'&))('&%$#"  @XKLUUVVx %$"&*)'%& (%'&$#""  3TWEHONRp %$$&& ''('&%$#"! 2ZRPPJGR^ }.*'$ "(*)&('&%#"!! fNOHMTKX ")-+&('&$#"!  ISVLUUH\ 1!#/'#  && "+ =YOKSTLS| N)*+#&%')!  #%$$ 7[YMKTRQm C))&)&*0( 3XVJOSNSn 6!1*%%/.# 'W_ICNSNd k7,(("*0, M]OLRLOa k.+-&&.0)  DYNLTVRY~ Z5),%)-2*" C\SFSUN[m @!0(%)75& ?KUOKSOQi W%1'+ 8OLKLQTPc zI*-+',5.$ 'T[MMOSR^ 6*&().34 NTRN\} d."1)%14* IVQFQSPWw V-,'%+-3& GTNQLRJRt V)&++,22( @XOOMVSOk N--1.,46( 9*9/(088% EZPMRQN\ 2' ,0-32 CPSQSOKQ m7-+-+.:4 UPMQUR[u i'*..+3?2 LNONR[w U2.4/'3:+ LXVMWq Q725++57& OXRSq 3WMTU O2494341% /RIOSM xA5721!68 1QRTTNX }I36$56>4 "JUFKTOS h?"=;1;F5 MXPCILLY W>;:15BA2 MUNEHKEPo T;475.2?+ BXIEDJKJf J5:8//A>% AXKKNLKNb I51866<@" @WOCQRNOb zK1:905A5 FdVEDQLLX{ p@::989=5  0NMIMIGOXx t?46AD=C= 2\ZJGKLWTv e3A@5 4VZGGJJRS g8?C<<8CC 'TPFMTLHU b527>=<H< 'QUDITNN^m N;5<=8:L; "WWUHGGJam` LI?>94>J; CZFKIINWR; QDCF@8:=C1 Q^FAHMQUD 6G>BACIW1 FUD=JOYK" ,FJ?40=F. CRKGUZK+ /EF;<@H2 =\SKSTJ <KJ>;?- HPONXQ+ 4DB;9<# CJXUH8 8L@4=/ @WUTE! "7JZL, BV@a7 "  "  9A>BCDCG@Dv e9FGGH |z{|}zsn$ YSSTQ[E T2A<@DB:A@<>=I K>@1>@@>D>>F?8 ~{|~' D<9G=AEE JKAA>CC>@@<B6O J::FB9 =@<CK@@<@D:F6S G<?=; ?FA?DB>D?<E@ (AD=71$ +15;44& #BZdU5 /SeeT2 wv{ze= @YegeL uw|g8 ;\e`\\D 1GRYh_^N' Pwywu~i^: 1Q`acgaR0 Q}op{uonX, 7LU\\^ja]7 #\pxttynecG#  CS\Z^a_aVA %g~z|jfmkfV: *<HX[]YYad[C 6d|psmjolfiD9) (8JX^XXa_V]]I$ <uprvvomnmo\B* /CSZXS_X`bZ^R, lisprgjgnlZ=% #$##"! -BRSU\]XUdY\c~M ~`udh]gfdd_P:*  %&&%$#"  VZ_Z^ck nl`toh`ahh`V:2(! & %(0<HO[UOSYXRN_m ngghgdadjo\O;+" !#)((&%%&& ).5?GOT VRSX_ jbfjie`abe^SG<0% &&'))(&$ *+**++* 010011 .'6=ENTVWUeWTZTTx i^`cd` \TG7+#"#%()'& .#/248:<IKMORTVWOURPk qdcde^ ZVOJ2.)'( 5%1359=BGJSQPMNQSUTO` cXW_[WUX\^]H@4,)+,- 47:>DJPTSRQ rd][ZZY RVSK;/ ,..//. 9G:;<<=<<=??@><97FILNLKQULOROLP]g bdaXVWTMa[RNJD;211210//. <J=<>ACCA><=>?ABCAAMFBHRUNFXRIFQo gXWVTWZUNOQQLE==9630/- DCDDBABBCDEGHHDG J/NQMIPi |^XYVNRSSPNPQIFA;7310 EGHFC@ABFHKIHGEFGGHIILMMIGGb !&!!  y[TRSTTQOOPPMHA<865 E9GIHJMLIKQU l$%'&""!  v`UJJQVSMONJGC@>< IMSWWSLHBCDCEHJLCGIEF\ {aSQSQM PIOQSSRMHDCBDFHIKLKFHZy -$6%&"%%#"  pUIHKGIKKLJJH TXTMF I;JIGFATu 6#//*$3&%$"  vT<KBFLGFLM@AB@<87568<>?=<; P_USQRTUTQWVTUWXVTTIAABABG?BDEGJKJ 321/-+*)''&$"!  vFEJG@CHCEFDA><;;9;=>@?>> MLMMNNON T_SRSUXYVSTTWYZWPLMC>BDCAAJIGC@Nt O321/-+*)''&$"!  iCFJC@CIE@>@@=9= YVWVWYYXUa]YTOIC=<?DE?<CNGECNq <04310.,+*('&%#!   qF?C?EB@@AB@>=;<==?ACGGFGFEDC \VZX[_bcbd[ND@?>>A>@GID@@EMk ;314320.,+*(('%#"!  dKC=?BA@ACF<::99:=?HI __Z[_dhhc^LE<:<BFI@@DHEBFMi F6;:5431/-,+)('&$"!! cQG<9<>=;:988788:HILNPP QSSTTUUVV b_fhiidXI>;::<ADCB@=<;BTu E<C=:65420.-,))(&$#"!  uWD>=71::988767;>DJNQRR ^]^^__`_ gWrkaVKA60?>>@AA=:J>;Pt N=?><;66420/--*)('%#""   fI=;> 7-29AINQ ggeffghhiihhiijjkkl]H948>C@><<?BCB8Nq ^@?>8:?76531/.-*)('%#""   zN28<>;4/2593/..7IYZYYXX ]^^_` cfjmmllmfiklklpuqkgnttfZ==<< 6M7:?@A@ DCB@><;998754210-,+)'&%$!! PE95:<71<65981*(ELU]`^YU^\ZYXZ^a\]]^_ ghhii ktuqmlnoonrnkmssletwvpaM:056:=<;::=@>9?W ]DCB@><;:98754210-,+)'&%$!!  S2.3531-/340++,1;GR\beXZ^dge_Y``abbcddgghhijkk qwwqlmsvvuortqmpx {lU@5246=5.-19@C@=CZ| \>DDB@?=;;98764321-,+*(&$$"!  U4-5/.22.'*1%%&+6FU^ggec``abeeffghiikklmmnoo s,uwxwvvtvy}{tmTE3-3:=<4466568:Ba Y:GDDCA?=<<:9865321.-,*(&$$"!  c>0,-13.**-+)(*-23Vallgbekjjklmm pqrrs }xuw{~~ yeI50368;97427;97<LZ \GJFDDCA@>==:9875432/.,*(&$$"!  gM3+020 .-*'#"*:Qfrtq tuvvwy {nYE6.,57742158655<Nj bEJNCEDCB@?>>;:9764320/-*(&$#""  vWB2+,+*+**('&!")5FYhp tuvvwxxyz{{|| xpkS7(+35 3d46643;EXr _GMJBIEDCBA@?>;:9865330/-+(&$#""! )(&%$#%# vwxxy||}~ |\A+,.3674042211355\s eCFIFGIEDCBA@??;;9865330/.+(&$##"! l-*,.( ",#%&"!#! rX@1-/00/--1623327Ibv PONMLJIIFEDBA@?><;:976540/.,)'&%#"! mE,%$##,! &(!!( iH1(*/1&*0 3i24(/>Qf{ nPONMLJIIFEDCA@??<;:986540/.,*(&%#"!  tD)%*!,-! xS:-  &/20+/241/..BTo qFPPOMLKJIFEDCBA@?=<;9765500.,*(&%##"  f9%)%(-00.+*10-,/8FP sLOPPOMLKJIFFEDBA@@=<;:865410.,*(&&$#"! %($442/,+-/()-6Hb} qQRVQPONMKJJGFEDCBA@>=<:865410.,*('& z/:*#,3/+,*('*240,.<Qg| sQT[RQPONMKJJGGFECBAA?><:865410/-+)'&%$#"  )*'!#+-* -l.1445[i~ yUWZSSQQPNMLKJHGFEDCAA?>=;864311/-+)'&%%$"  g<%"%& +(-#*0.-:Vk uT]^QR[QQPNMLKJHHGEDCBA@?=:864311/-+)'&&%$"! A3%#%&') ')+*&#"$(-:Ng ec`]YWVUTSRPOMLKJIHFECBA>><:9755321/-+*)%$#"  )"!'-*)) '())((-0FUi| dc`\ZXWVTSRPOMLKJIHGECBB?>=;9765321/-+*)%%$"  +0*""$)%$&&#$'w)&$$+;M[uz \cb_\ZYXXTSRQONMLJIHGEDBB?>=;97654310.,+*&%$#! ((#!&%&(# !'|#(0<L`u ybcba_\ZZYYUTSQPNMLJJHGEDBB@?><:8764320.,+*'&%$"  !%*'!#*<.=Tjy b`lba_][ Z6UTSRPONMKJIGFDCB@?><:8765431/-,+('&$"!  !(&$&'#!#'-=L<ait~ jlkaca_][ Z5VUTRQONMKJIGFDCBA@?=;98765420.-,(('%#"!  "%&(&#%2BTi{ ihql_db`][ZYYVUTSQPNNKJIHFDCCA@?=;98766420/--)('&$"!! !)>Zov| cktgdodca][ZYXVVTSQPNNKJIHFECCAA?=<:8876531/.-))'&$#"! &!(@jntvxz~ srqomkjidca_][ZYWWUTRQOOMMKIHFDDAA?=<:88664310/.*)(&$#!  "<KTblouxx{~ ssqomkjidcb`][ZYWWVTRQPONMLJHFEDBA@><:98665310/.**(&$#!! kXbnqtpswyz| ltsqomkjidcb`^[ZYXWVTSPPONMLJHFEDBA@><:98765320/.**('%#!! wnqruswz||} tputromkjiddb`^\ZYXWVTSQPOONMKIGFECBA?=;:9765320/.+*)(%#"! |jkmowy} }yyutsqnkihedb`^\ZZXWVUSRPPONMKIGFECBA?=;:9775421//+*)'$#"!  |prrqz} }xvusqnkihedc`^\[ZXXVUSRQPPONLJHGFDCB@><;:7754210/++)'%$""  xrx{{|} {vwusqnkihedca^\[ZXXWUSRQPPONLJHGFDCB@><;:7764210/++)(&$""  {vwvsqnkihedca_][ZYXWUTRQ P5NLKIGGDDB@?=;;8764310/,+)(&$#"   zuzx||~ |xxwuroljidcb`^\[ZYXWUTRQPPONLKIHGEDCA?><;:9864210-,+)&$#"  zw{z}~ |xxwuroljidcb`^\[ZYXWUTRQPPONLKIHGEDCA?><;:9864210-,+)'%#"  |xxwuroljidcb`^][[YXWUTRQPPONLKIHGEDCA?><;:9864210--+)'%#"  |xxwuroljiddb`_][[YXWUTRQPPONLKIHGEDCA?><;:9864210.-+)'%##   |xxwuroljiedca_]\[YXWUTRQPPONLKIHGEDCA?><;:9864210.-+)'%$#!  |yxwuroljiedca_]\[YXWUTRQPPONLKIHGEDCA?><;:9864210.-,*(&$#!  |yxwuroljiedca_]\[YXWUTRQPPONLKIHGEDCA?><;:9864210.-,*(&$#!  |yxwuroljieeca`^\\YXWUTRQPPONLKIHGEDCA?><;:9864210..,*(&$#!! |wvtroljifedb_]\[YXWUTRQPOONMLJGFDDCA?>=<99764311-,+)'&$#"!  ~|wvtroljifedb_]\[YXWUTRQPOONMLJGFDDCA?>=<99764311--+)'&$$"!  ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFDCBA?><<99764311--+*(&$$"!  ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFDCB@?=<;99764311.-,+(&%$"!  ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFDCB@?=<;99764311.-,*'&%$"!  ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFCCA@>=<;99764311..,*('%%"!  ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFCBA@><;;99764311..,+)'%%"!  ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFCBA@><;;99764311/.,+)'&%"!  ~zxwurpmkjfedb_]\[YYWUTRPP N4MKIGFCBA@><;;87654211.-,*(&%$"!  ~zxwurpmkjfedb_]\[YXWUSQPO N4MKIGECBA?><;:87653211.-,*(&%$"!  ~zxwurpmkjfedb_]\[YXWUSQPOMNMLKIFECBA?><;:77653210.-,*(&%$"!  ~zxwurpmkjfedb_]\[YXWUSQPO M4LJHFEBBA?=<;:77643210.-,*(&%$"!  ~zxwurpmkjfedb_]\[XXVTSQOO M4LJHFEBA@?=;::76543100.-,*(&%$"!  ~zxwurpmkjfedb_]\[XWVTRQOOM L3JHFDBA@>=;:976542100.-,*(&%$"!  !GaWY ~zxwurpmkjfedb_]\[XWVTRPON L4KIGEDBA@>=;:96654210/.-,*(&%$"!  <^]Sb ~zxwurpmkjfedb_]\[XWVTRPON L4KIGEDAA@><;:96653210/.-,*(&%$"!  /QZYW\ ~{xwurpmkjedca`^]\YXVUSQPOMMKIHFDDA@?=<:986653210/-,+)'&$#!  !EYZUTV {xwurpmkjedca`^]\XXVUSQOOMLKIGEDC@@?=;:986653210/-,+)'&$#!! CZ_ZUSV ~zxwurpmkjeeca`^\\XXVTRQOOMLKIGEDC@@>=;;986653210/-,+)'&$#!! +R_\XXY\ ~zxwurpmkjffdb_][[XWVTQPONMLKIGEDC@?>=;:886653210/-,+)'&$#"!  QU]XW\^b }zxwurpmkjfedb_]\[XWVURPONLLJHGECC@?><;9876653210/-,+)'&$#"!  AaV\WY__a }zxwurpmkjgfdb_][ZWWUTRPNNLKJHFECC@??<;9876653210/-,+)'&$#""  5[^X]X[``c |yxwurpmkjgfdb_][ZWWUSQPNNLKJHFDCB??><:9876653210/-,+)'&$#""   PaXY]W\aah }yxwurpmkjgfdb_][ZWVUSQPNMLKJHFDCB??=<:9776653210/-,+)'&$##"  OdYZS[aaprt |xwvtrpnlkfedb_]\[WVUSQONMKJIGECBA??=<:977554310/.,,+)'&%$!! 3V]X]V^cdrtt |xwvtrpnlkfeca_]\[WVUSQONMKJIGECBA?>=<:877554210/.,,+)'&%$!! %Q_YY][bhiuwv |xwvtromkjfeca_][[WVUSQONMKJIGECBA?>=;:776554210/.,+*)'&$$!! I^^Z\[bhonzyw |xwvtromkjeeca_][ZVUTSQONMJIHGECBA?>=;:87654321/..,+*('%$#!! B`]]^Z^jous~|x |xvusqomkjedca_][ZVUTRPONMJIHFDCBA>><;987654320/..,+*('%$#!! *WeZ_^Xdsv{x {xvusqolkjedb`^\[ZVUTRPNMLJIHFDBA@>=;;986644310/.-++)(&%$#!! M[]^a][fx{~z {xvusqnljiedb`^\[ZVUTRPNMLJIHFDBA@>=<;976644310/.-+*)(&$##!! 7cXZ``_ef| {xvusqnljiedb`^\ZZVUTRPNMLJIHFDBA@>=<:976544310/.-+*)(&$##!! -h^`_\[cs vNutqomkjedb`^\ZYUTSQOMLKJIHFDB@?=<;:976643210/.-+*)(&$##!!  Nc^^\]`kx ~w|vutqomkkedb`^\ZYUTSQOMLKJIHFCA@?=<;:976643210/.-+*)(&$##!! Ef][ZY_hv x~vusqoljjedb`][YXUTSQOMLKJIHECA@?=<;:976643210/.-+*)(&$##!! 5[a\[XZds z}}xyvusqnljiedb`][YXUTSQOMLKJIGECA??<<;:876543210/.-+*)(&$##!! +W^Y_\[_n| yzuvusqnljidca_][YXUTSQOMLKIIGECA?><<;9876543210/.-+*)(&$##!! Oaa^a^bky xyxuuspnljidca_]ZYXUTSQOMLKIHGEC@?><;:9865543210/.-+*)(&$##!! ?`a_b`aky Nw|u{ttrpnkjidca_\ZXWUTSQOMLKIHGEB@?><;:9865543210/.-+*)(&$##!! 3]`a`_^cp pzutrpnkjidca_\ZXWUTSQOMLKIHFDB@?><;:9765543210/.-+*)(&$##!! .\hTWeb[ nqrzrnqrlhidca_\ZXWTSRPNMKJ G4FDA?=<<;9876543210/.-**('%$""!! Hbg\[^^d ssromopkddca_\ZXWTTRPNMKKGGFECA?=<<;9876543210/.-**('%$""!  3bddc`\ex ewrsplnpkbdca_\ZXWTTRQOMKKGGFECA?><<;9876543210/.-**('%$""!  (Thb^abfw *awtrpomifdca_\ZXWUTSROMLKHGFECA?><<;9876543210/.-**('%$""!  &Sbfd_]eu -otvrmkjidca_\ZXWUTSQNMLKHGFDB@?><<;9876543210/.-**('%$""   Chbbha^m Nfvpilmhdca_\ZXWUUSQONLLIHFCA@??<<;9876543210/.-**('%$""  3[h``gbf  Hjoijkfdca_\ZXWUUSRPNLLIHFCA <-;9876543210/.-**('%$""   Xkba]a_n ,]plgffdca_\ZXWVUSRPNMLIHECA <-;9876543210/.-**('%$""   Xkba_Zfx 7gjfkcdcb_][YXTSRPNMKJHGFDB@?>;;:976553320/.-,**('%$""  ?^dde_]n Gpnbldcb_][YYTSRPNMKJHGFDB@?>;;:976553320/.-,**('%$""  7\abheafz "[odjdca_]ZXXTSRPNMKJHGFDB@?>;;:976553320/.-,**('%$""  (Teafkd`| -^qcdca_\ZXWTSRPNMKJGFEDB@?>;;:976553320/.-,**('%$""  Rac`jd`o <hidca_\ZXWTSRPNMKJGFECA@?>;;:976553320/.-,**('%$""  9jdbdgcm Eocca^\ZXWTSRPNMKJGFECA?>=;;:976553320/.-,**('%$""  .]mdcgbl (Tbb`^\YXWTSRPNMKJGFECA?>=;;:976553320/.-,**('%$""  Jnididby /cb`^\YXWTSRPNMKJGFECA?>=;;:976553320/.-,**('%$""  Qr\digbs BZ`\`YQVTSRPNLKJIGEB@?>><<;9876554310.-,))(&$#"! 8`hjhdcn %F`_W\\STSRPNLKJIGEB@?>><<;9876554310.-,))(&$#"! '\gcnjag +SaVY_QSSQPNLJJHGDB@ <-;9876554310.-,))(&$#"! Vhdfgeev 6X^XTRSRQOMKJIHFDB@ <-;9876554310.-,))(&$#"! Goh`ebds ;^`TSRRPNMKIIGFDA@ <-;9876554310.-,))(&$#"! @eejjdip Ic\URQPNLJIHFECA@ <-;9876554310.-,))(&$#"! 0[ldgkhj .N\XQQONLJHHEDBA <-;9876554310.-,))(&$#"! eakm`fpe 2RZQPOMKJHHEDB@ <-;9876554310.-,))(&$#"! `lgemnhx 7ZSNKKMKIHCBA@?>=<=<;:97664320/-,+))'%$"   Aeljhhiu #$$COQPL I8HCBA@?>=<=<;:97664320/-,+)('%#!  2ihkkjej *DPVNGGIHCBA@?>=<=<;:97663210.-,+)('%#!  &[hmkjhgz %3HWRHHIGCBA@?>= <-;:8765321/.,+*)('%#!  Mmbkhjht "! +#;NRMJHECBA@?>= <-;98765210/-,+*((&$#! Ejglihnv , -@KNJFDCBA@?>=<<;:98655210.-+*)('&$"! 2kpgpfhu ((&.AJGCDCBA@?>=<<;:9865511/.,+*)('&$"  `xlljej| ,&+!1"#8GC@ECBA@?>=<<;:9765511/.,+))('&$"  `xjwwgl z/)*,%*'7G@GFC@@BB>;;:97643200/-,+*)&&%$"!  Ekpeoohu a%"&,+$%<K<HDA@A@>;::9754320/.-,+))&&%#"!  7npjgjht G%'.$+*+CCHFB@@?=<:9875322//.-+*))&&%#"!  -bplmmgn K&.%.6)2HGEB@>==< 9,64321/.-,+*)(&%$#"  %Xvijoli 0/1).4.6BBA@> 98764 .%-,*)((&%$#!  d63.'1+):<?@> 8-753210.-,+*)('%%$"!  @jsjrolw `20/+*-17=@?=<<87653100.-,+)(''%%$"!  $jxgpoln ;"7533,3;??=<<8764310/.-,*)('&%%$"!  ,j|ojglm B2--7-.6?=57A98764211--+*('%%$$#!   Trqnqtp w,/7,3138;98998754210-,+*(&%%$#"!  Myukpvr{ [-6/75217=9487653210-,,)(&%$##"! Coznquok O(;685.1;<67764210/-,+)(&%$#"!  'mvqovpo >61980/7==665310/.,,*)'&%$""!  'Ytppuql 639<414;@65421/.-,+*)'&$$"!  !Tuplvwr v>;99745;54320/--,+*)'%$$"!  Iqsrousv F;5:=73654320.--,+*('%$#"!  ?nyrttln N-8A=<7>92-+,,.**)'&%$#   (kvk|xmn C5;A8<<:5/++,-*)('&%##   #c|tnrwm 89;?A<;:4-*+-))('%$##   [zvtymq }3:@A;>?91,+.)('&%$#"  Svqt{yvy h1:;;?B>81--(('&$#""  Jr{nrwst T.:=@CC?81,('&%$#"! 2|vyytqx I?@@AEG@5*('&%#"!! fvwrx 9B@@HKE7*('&$#"!  t|yez 1M@?OLGB+%%($ Pyvtyxjs nBCHBIGI3+%"#! |ryro `?CCFGK>6) !$  N8KGCHEA4$ NDDGBGJB0#   *d}vv|vp FENEIPM?,# ']|xx~yp xRILNONJ;) _=SSNLQF0 {sztz s5MHRWOK8 Ih{yw{zs aCRSMPOA1 zxyzw TOOSROMN) NE^UMVX?+ xMRSRVXQ@( uJPYUYZT?$ pSUYW[]Q7 XK`T\[WJ- QT`_`]^R) aaZ^Z[]M) LU\^Y\cL  sYZc`W`_H x][e`]b_6 yV\gfbc\= pWbieal^= a]ic^hnY* d\l`bbhX, aRykbjoT+ ybkmcjtjP) |bfjlggkL kfjnhkxmM zecorssp? y`lrlkriF mhopmh sonvn? dvvgsuq_7 fx~wsrxi5 kyr{xw~b+ xnw}vv~d0 s{vzzqx|k \os~}wsuvO+ |~}[  +<=26.3/1107=57?7 21->0)30.3E$ 332678 %246:9 0C=06-321256414?( 7.:0-77.2?4 84:765 MbgZ]b^e`h \aded 6B9752571Gt E3668 YSSTQ[E T2A<@DB:A@<>=I K>@1>@@>D>>F?8 ~{|~`b_ZS>6,%%'(*0.//*#$+ -?G415431/-,+)('&$"!! "(*(% &%%*/.% (,-/>@DGI QSSTTUUVV b_gfdbYJ8,(%$#&%$" %+,("'3 +0>93.65420.-,))(&$#"!  '&&26<CHLNO ^]^^__`_ gWqgZJ<- &%%$#" +,+H<2;966420/--*)('%#""   )(61*'&*14&%'&$$#$$)1:CIMO ggeffghhiihhiijjkkiX@,!"%''"  "$%%'%$&# <@B9@C@H76531/.-*)('%#""   %$&,1." "$$!").0& +C[RSSUU Z[[\] ]^^_` gocfjmmllmnqsrooqurkdimi[N  &,1+$ !!#$ #DCB@><;998754210-,+)'&%$!! #"")4865"  (12* ,# !  "=DOW]]YU_][YXZ^a\]]^_ ghhii uqmlnoonyuqsvslcprqiXA- & '10'"*4 7.DCB@><;:98754210-,+)'&%$!!  '*)E1 !-*$" !#(3@LXadXZ^dge_Y``abbcddgghhijkk qwwqlmsvvuuvwtmmu{tdK6($#$1+$"%'**  ==KDDB@?=;;98764321-,+*(&$$"!  )'%(&! "/?QZccb`^^_`eeffghiikklmmnoo stuwxwvvtuvyumeH9' !(-,)%$ 9BVGDDCA?=<<:9865321.-,*(&$$"!  #!#*-($$   %*/R]hid`cijjklmm pqrrs }xuw{ yp[=)##&(($! '<UI;DDCA@>==:9875432/.,*(&$$"!  #(-/0&$  1I_knljoopqqr tuvvwy zsdO8' ,7PE89EDCB@?>>;:9764320/-*(&$#""   "$%&&7+ $((8) !.@Tdm tuvvwxxyz{{|| xpaI*  " $$"!#"!   $''$# (-1XQ<=AEDCBA@?>;:9865330/-+(&$#""! vwxxy||}~ !#$$! '47.$"%:3' 2>NJPTKEEDCBA@??;;9865330/.+(&$##"! #"+%!(1+ ,Hiz|{~  ! !   PONMLJIIFEDBA@?><;:976540/.,)'&%#"! "1+&!"+3781 b &)"! !! ! 10PONMLJIIFEDCA@??<;:986540/.,*(&%#"!  ! !!""!('%!"'2:$13% #:INPPOMLKJIFEDCBA@?=<;9765500.,*(&%##"  ! !! ())% #"$,>>" #$#"(%  !  !!  ;\ZQPPOMLKJIFFEDBA@@=<;:865410.,*(&&$#"! '%$""  '2.*&$$%$$  +F^\CQPONMKJJGFEDCBA@>=<:865410.,*('& !&(%#%()54& ")% ! '++)'&.-,+&"  !"!! $IYOFHQPONMKJJGGFECBAA?><:865410/-+)'&%$#"  "),*! 2*%$$! $+8A3 "-41& 0CZePEVQQPNMLKJHGFEDCAA?>=;864311/-+)'&%%$"   *13/+&/% ##")6'  -? !!  #$$"! ,?Zd^`aWQQPNMLKJHHGEDCBA@?=:864311/-+)'&&%$"! ! "#""##$%&&')''(')  ')* "# )ec`]YWVUTSRPOMLKJIHFECBA>><:9755321/-+*)%$#"  ! !##$#% &()('(+:A1  */.& 2Ndc`\ZXWVTSRPOMLKJIHGECBB?>=;9765321/-+*)%%$"  ! "!"#$%%&' '&')((/$ 2Wocb_\ZYXXTSRQONMLJIHGEDBB?>=;97654310.,+*&%$#!  !#$$%& &,'&'))+))-/0,&1 !"!!##"!  H1Woqba_\ZZYYUTSQPNMLJJHGEDBB@?><:8764320.,+*'&%$"    !"$% &-'&'&('0121,('&21* !#'*$ ##"%)*)'!"!#$!!"  4Sdgfba_][ Z6UTSRPONMKJIGFDCB@?><:8765431/-,+('&$"!  !"$$&%''&'&'&(  *59851 *$%)-,'  &'*+(()+!"##!"!" 3^m[Vbca_][ Z5VUTRQONMKJIGFDCBA@?=;98765420.-,(('%#"!   !#$%#&&' '!!"'-11-+,# !+6<>   "#"" $9]xp[[ldb`][ZYYVUTSQPNNKJIHFDCCA@?=;98766420/--)('&$"!!   !"#$%&&'&'&''61&  '81-,./,'B;+ .Y~|miqvdca][ZYXVVTSQPNNKJIHFECCAA?=<:8876531/.-))'&$#"! #$$""## +,-,))**,+,,62130# #!! "#  ! !  6srqomkjidca_][ZYWWUTRQOOMMKIHFDDAA?=<:88664310/.*)(&$#!   !"$!#$$%&''%'())*+-))+* 4/*,4876 4gssqomkjidcb`][ZYWWVTRQPONMLJHFEDBA@><:98665310/.**(&$#!!   !#"" %&'&&'())*,'(*+ &18G5  !  !"! #" !!#"! Bn}tsqomkjidcb`^[ZYXWVTSPPONMLJHFEDBA@><:98765320/.**('%#!!  !"##%&%&&'())+))+*+-,-2-(! #*017)  ! !"" "!!##"!  yutromkjiddb`^\ZYXWVTSQPOONMKIGFECBA?=;:9765320/.+*)(%#"! ,"#$$##%$&'()()(*+*+,,.1241026  !!"!! !!"!#"!!"! O|}v}utsqnkihedb`^\ZZXWVUSRPPONMKIGFECBA?=;:9775421//+*)'$#"!  "#$#""#$&'((*)**+ 34*83" %!  ! "##! !" kh|vusqnkihedc`^\[ZXXVUSRQPPONLJHGFDCB@><;:7754210/++)'%$""  #"%&&''*)*((*)+0/12 !"#"" spvxwusqnkihedca^\[ZXXWUSRQPPONLJHGFDCB@><;:7764210/++)(&$""  "!##""#%&%'* '&(*,*% wvsqnkihedca_][ZYXWUTRQ P5NLKIGGDDB@?=;;8764310/,+)(&$#"   !& "$%&('%%&))*++**+,++**+// ! !"!" |xxwuroljidcb`^\[ZYXWUTRQPPONLKIHGEDCA?><;:9864210-,+)&$#"   ""!"##$&(&%&'((),**+*+   !! ! "h ! ! |xxwuroljidcb`^\[ZYXWUTRQPPONLKIHGEDCA?><;:9864210-,+)'%#"    !"#%$&&%%&')(*)+*+*+*+*/0 !m"!!" !  ! |xxwuroljidcb`^][[YXWUTRQPPONLKIHGEDCA?><;:9864210--+)'%#"   !"##%#%&&'())**)*+* |xxwuroljiddb`_][[YXWUTRQPPONLKIHGEDCA?><;:9864210.-+)'%##    !"#$"$%&&'(*))*)*+*,+00  !!"!#" |xxwuroljiedca_]\[YXWUTRQPPONLKIHGEDCA?><;:9864210.-+)'%$#!  #"%&&''**)*)*++,/0 |yxwuroljiedca_]\[YXWUTRQPPONLKIHGEDCA?><;:9864210.-,*(&$#!   ! !##$% |yxwuroljiedca_]\[YXWUTRQPPONLKIHGEDCA?><;:9864210.-,*(&$#!   "!""##$''&*+*)*)**+.2 |yxwuroljieeca`^\\YXWUTRQPPONLKIHGEDCA?><;:9864210..,*(&$#!! !""%$%'&'&'*)*++%*1 |wvtroljifedb_]\[YXWUTRQPOONMLJGFDDCA?>=<99764311-,+)'&$#"!  !!"#$&%'('(())*+%*1  !"   ~|wvtroljifedb_]\[YXWUTRQPOONMLJGFDDCA?>=<99764311--+)'&$$"!    !"&%&%''&'(*)*$)0 ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFDCBA?><<99764311--+*(&$$"!  &'&'())#(0 ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFDCB@?=<;99764311.-,+(&%$"!    !"#%$%& (*#'0 ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFDCB@?=<;99764311.-,*'&%$"!    !""$$#& ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFCCA@>=<;99764311..,*('%%"!    !"#$$% ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFCBA@><;;99764311..,+)'%%"!    !!## ~{wvtroljifedb_]\[YXWUTRQPOONMLJGFCBA@><;;99764311/.,+)'&%"!   "!$$%&% ~zxwurpmkjfedb_]\[YYWUTRPP N4MKIGFCBA@><;;87654211.-,*(&%$"!    !"#%$& ~zxwurpmkjfedb_]\[YXWUSQPO N4MKIGECBA?><;:87653211.-,*(&%$"!   !$$%% ~zxwurpmkjfedb_]\[YXWUSQPOMNMLKIFECBA?><;:77653210.-,*(&%$"!   !$#$ ~zxwurpmkjfedb_]\[YXWUSQPO M4LJHFEBBA?=<;:77643210.-,*(&%$"!  ~zxwurpmkjfedb_]\[XXVTSQOO M4LJHFEBA@?=;::76543100.-,*(&%$"!  ~zxwurpmkjfedb_]\[XWVTRQOOM L3JHFDBA@>=;:976542100.-,*(&%$"!  ~zxwurpmkjfedb_]\[XWVTRPON L4KIGEDBA@>=;:96654210/.-,*(&%$"!  *VGRK ~zxwurpmkjfedb_]\[XWVTRPON L4KIGEDAA@><;:96653210/.-,*(&%$"!  .AYML@% ~{xwurpmkjedca`^]\YXVUSQPOMMKIHFDDA@?=<:986653210/-,+)'&$#!  '=DVGJ>  {xwurpmkjedca`^]\XXVUSQOOMLKIGEDC@@?=;:986653210/-,+)'&$#!! @ICRDK= ~zxwurpmkjeeca`^\\XXVTRQOOMLKIGEDC@@>=;;986653210/-,+)'&$#!! (DF=NDM; ~zxwurpmkjffdb_][[XWVTQPONMLKIGEDC@?>=;:886653210/-,+)'&$#"!  IDC9OEK2 }zxwurpmkjfedb_]\[XWVURPONLLJHGECC@?><;9876653210/-,+)'&$#"!  6SED:PCB }zxwurpmkjgfdb_][ZWWUTRPNNLKJHFECC@??<;9876653210/-,+)'&$#""  M6I;QA7 |yxwurpmkjgfdb_][ZWWUSQPNNLKJHFDCB??><:9876653210/-,+)'&$#""  BPEQL<P=3 }yxwurpmkjgfdb_][ZWVUSQPNMLKJHFDCB??=<:9776653210/-,+)'&$##"  DVHHKH=: |xwvtrpnlkfedb_]\[WVUSQONMKJIGECBA??=<:977554310/.,,+)'&%$!! +KOGKJE94 |xwvtrpnlkfeca_]\[WVUSQONMKJIGECBA?>=<:877554210/.,,+)'&%$!! FQHFJG?2, |xwvtromkjfeca_][[WVUSQONMKJIGECBA?>=;:776554210/.,+*)'&$$!! >PMGFE@8)$ |xwvtromkjeeca_][ZVUTSQONMJIHGECBA?>=;:87654321/..,+*('%$#!! 7RLHFAB6.! |xvusqomkjedca_][ZVUTRPONMJIHFDCBA>><;987654320/..,+*('%$#!! JUEGC<G)# {xvusqolkjedb`^\[ZVUTRPNMLJIHFDBA@>=;;986644310/.-++)(&%$#!! >KKIIB>H {xvusqnljiedb`^\[ZVUTRPNMLJIHFDBA@>=<;976644310/.-+*)(&$##!! 7SGHKHCGF {xvusqnljiedb`^\ZZVUTRPNMLJIHFDBA@>=<:976544310/.-+*)(&$##!! QMJFJKB, }~xuuvutqomkjedb`^\ZYUTSQOMLKJIHFDB@?=<;:976643210/.-+*)(&$##!! =LLKJJD8& }v{vutqomkkedb`^\ZYUTSQOMLKJIHFCA@?=<;:976643210/.-+*)(&$##!! <UHJLMF6* w}vusqoljjedb`][YXUTSQOMLKJIHECA@?=<;:976643210/.-+*)(&$##!! -OPIGNM?+ y||wxvusqnljiedb`][YXUTSQOMLKJIGECA??<<;:876543210/.-+*)(&$##!!  IMHMFJD5  xytvusqnljidca_][YXUTSQOMLKIIGECA?><<;9876543210/.-+*)(&$##!! ?MNLQFB9* wxwuuspnljidca_]ZYXUTSQOMLKIHGEC@?><;:9865543210/.-+*)(&$##!! 2LJIPRF;,  Mv{tzttrpnkjidca_\ZXWUTSQOMLKIHGEB@?><;:9865543210/.-+*)(&$##!! /PIGHLPF6" oyutrpnkjidca_\ZXWUTSQOMLKIHFDB@?><;:9765543210/.-+*)(&$##!! KU>BSRO ""!!   lumzrnqrlhidca_\ZXWTSRPNMKJ G4FDA?=<<;9876543210/.-**('%$""!! 3MRHJICD   ##""! nsromopkddca_\ZXWTTRPNMKKGGFECA?=<<;9876543210/.-**('%$""!  -IJLRQC7:""!  "d !   ^lrsplnpkbdca_\ZXWTTRQOMKKGGFECA?><<;9876543210/.-**('%$""!  !IKEFOO@1."  !Qwtrpomifdca_\ZXWUTSROMLKHGFECA?><<;9876543210/.-**('%$""!  EQIHFDB:,   ""!!   #otvrmkjidca_\ZXWUTSQNMLKHGFDB@?><<;9876543210/.-**('%$""   2ULKSK<4-  !""!"   Nfvpilmhdca_\ZXWUUSQONLLIHFCA@??<<;9876543210/.-**('%$""  %FMDOXM9.!  ,)"#  Hjoijkfdca_\ZXWUUSRPNLLIHFCA <-;9876543210/.-**('%$""  GUECQWJ8- !- +# ,]plgffdca_\ZXWVUSRPNMLIHECA <-;9876543210/.-**('%$""  6C@GNTK<+  0bhdkcdcb_][YXTSRPNMKJHGFDB@?>;;:976553320/.-,**('%$""  ,ADFONCA;, Amlbldcb_][YYTSRPNMKJHGFDB@?>;;:976553320/.-,**('%$""  *KJHPPN.24+ #%%$$##"" Xldjdca_]ZXXTSRPNMKJHGFDB@?>;;:976553320/.-,**('%$""  BSNRULF!&'" $%%$$##"" )[pbdca_\ZXWTSRPNMKJGFEDB@?>;;:976553320/.-,**('%$""  6IQRYI:B! &$$##""!! 8ghdca_\ZXWTSRPNMKJGFECA@?>;;:976553320/.-,**('%$""  +EHOWR;2=" &$$##""!! Dncca^\ZXWTSRPNMKJGFECA?>=;;:976553320/.-,**('%$""   LDFPWG732 &Sbb`^\YXWTSRPNMKJGFECA?>=;;:976553320/.-,**('%$""  9X>CURC<9) ($$%## -cb`^\YXWTSRPNMKJGFECA?>=;;:976553320/.-,**('%$""  <W@;MWJ=2 $$##"" >V_\b^V[TSRPNLKJIGEB@?>><<;9876554310.-,))(&$#"! 'JMMAMSI6% !B]^Y^aXTSRPNLKJIGEB@?>><<;9876554310.-,))(&$#"! JOFQJIIA- %O`U[af7BL\_G@[ #*/-)('&$#"!  ENG@GKFH2 :TI8FTND?) %"-*#!"1*" 4WSF;MZS>% 3(%0,6/) 0TQCGMMNH, (.3;*0.$ %TZC<GUI<+ "..5*+/-  JXIFLFEC- $(!5(/1*  @THEPQN17$  $"4&*/2+" >WM?LOJX*. !$.)(&+86( =;KHN_R85 6KDKIKUR:+ &PUSMKNL@, "<$%&&>B)! MLK]MNSB %'-3455,, EPJ>SNOO1 $692+(#5' CNGJEDKK8 2/ +1"53% >RFHFOJE;$ $$27+-52$ ;OIHGJN^@- 6842+054" #5CILFPe=/ BMLINMB< ) */30/,2</ IVSJQS<& * B76<:3' DPSOOG1# <7A@-)34 LJLNI0 !)*;;((9< OE<C@! &+.5;76  0PGMK !+456<;7% -NHJKD 0<;.,A.?< )KTSED[ ,-$8<+-82 !KXGCCGY %@,=1*6C5 Jb]C=@CM -F94.6C@4# LMUQHHB64  $55?B4/:1 C\<DGLOC+ /BL;+47* <VO?GIHE:$ !)>H4&/<# :SOELLKA4' ,G=&-C9! =^SDCSLIA* ,DA69DB9! 4PKFD@ML=- -.(5@:7=7 0][LHKLNA0 $7L:,;;93 !GTILQNT>- -?EN=:8DB &ABCQXL@H/,, -K5:@>=J= (QREMXNBHO& 39?@7:K< "VWXNMIDNP; -:J?>8.;G; BZGKJHKMA' 2B?A80/6;- P]EA@DEJ9 /=4766;Q- ?N?<HKTA %BHB85<F( @PICPZK& /FG@:>H* ;WJDPVJ! "=GH=9>* BHHFQO, 1DB:=;' =CPOE8 8MC3?2 ?TQSA #8GUI* ?TDad YSSTQ[E T2A<@DB:A@<>=I K>@1>@@>D>>F?8 ~{|~' D<9G=AEE JKAA>CC>@@<B6O J::FB9 =@<CK@@<@D:F6S G<?=; ?FA?DB>D?<E@ (AD=71$bjbjk ll have marketing concentration at over 10,000 stores in some of the top retailers, including: Wal-Mart Target Toys  Electronics Boutique GameStop Our main objectives with the retail demo disc program are: Generate sales and increase attach rates. Showcase Xbox games technology. Educate and inform RSPs and consumers. The demo disc will be updated at retail every other month using two different methods: Xbox Field Reps.  The demo disc will be updated and installed by the reps at their serviced store locations.  Direct-to-Store Mailings.  The demo disc will be sent directly to non-serviced and some specific account locations for the RSPs to update. Playable game demos not only give consumers an opportunity to play the game firsthand, but they also work as an invaluable marketing and PR tool. To that end, playable and non-playable demos should be an integral part of any marketing/PR plan. When a playable demo is not available, there is simply no better way to generate hype than through the use of non-playable demos. Screenshots simply can t do a game justice, particularly when it comes to portraying the incredible visual and aural experiences made possible by Xbox. Non-playable demos are a perfect way to showcase levels the playable demos won t cover, build consumer awareness, and stir up some excitement over your upcoming title. It is vitally important that publishers make developers aware of the need for a demo as early in the development process as possible. Publishers should make sure developers understand that a demo disc will ultimately bring better sales figures, and subsequently, more developer royalties. By preparing demos, movies, and so on to coincide with editorial coverage and ad campaigns, you can make a huge impression on gamers and really show them what your game is all about. CREATING A PLAYABLE DEMO  1. PRESENTATION AND USABILITY REQUIREMENTS The Presentation and Usability Requirements define how the demo should unveil, step by step, as well as how the user should interact with it. 1.1  PRESENTATION FLOW CHART The following chart summarizes the flow between the states of the game demo: 1.1.1  LAUNCHING THE INTERACTIVE DEMO DEVELOPER/PUBLISHER TITLE SCREENS This screen should contain the logo of the Developer and/or the Publisher. It s the first thing to be shown. It should stay on the screen for no longer than three seconds. GAME TITLE SCREEN The Game Title Screen is the main menu of the game. If the game demo doesn t feature menus, the Game Title Screen should read  Press START to begin  and  Press BACK to exit.  If the game demo does feature menus (limited or detailed), they should be displayed and should contain an option that can be selected to quit. GAME CONTROL SCREEN  A Game Control Screen is an image of the Xbox Controller with instructions about how to play the game. It should appear when the user starts the demo. This image should clearly read  Press START to continue  and should remain on the screen until the user presses START or A. At that point, the user plays the demo. 1.1.2  IN-GAME MENU While the user is playing the demo, if START is pressed, an In-Game Menu should appear. The following three options should be provided (with any other options that your demo must provide): View Game Controls This option should bring up the Control Screen. Restart Demo This option returns the user to the Game Title Screen. Quit to Demos Menu This option quits the Interactive Demo. 1.1.3  QUITTING THE INTERACTIVE DEMO Publishers may create an ending screen that states when the final game will be available, contains a list of features in the final game, gives hints, and/or displays any other marketing messages to the player that are pertinent to the demo or final game. From this screen, users will be returned to the Official Xbox Magazine Game Disc interface after a period of time no longer than five seconds. 2. TECHNICAL GUIDELINES The technical guidelines for Xbox interactive demos are detailed in the document  Xbox Demo Technical Guidelines,  which is available on the Xbox Developer Support Web site. The major benefit of following these guidelines is that it guarantees that the interactive demo will work equally well in any of a number of situations.  3. CONTENT SUGGESTIONS Suggestions to help in the preparation of the Interactive Demo. 3.1  GENERAL SUGGESTIONS The Interactive Demo should provide approximately 15 minutes of original gameplay. Xbox defines original gameplay as the time it takes to get familiar with the controls and complete the objectives of the demo. The playable demo should feature moderately challenging gameplay. The experience will be more enjoyable if the user doesn t run into problems they can t solve or into situations they can hardly overcome.  The game demo may use more than one game control screen. If this is the case,  the screens should simply be displayed one after the other.  If the game features some cinematic sequences for introduction, they can be presented either before the initial Game Title Screen appears or right after the game demo is launched. It should be possible to interrupt these sequences by pressing either START or A.  3.2  DEMO CONTENT SUGGESTIONS The developer is responsible for the content of the demo. Following are some general questions and ideas to help the developer choose the content of the demo, depending on the genre of the game.  GENERAL What are the features that are unique to your game? How can you emphasize some of these features in a game demo? Is there a gameplay element you should insist on? ROLE PLAYING GAME / STORY DRIVEN GAMES How much of the storyline do you have to reveal to catch the interest of the player? Does it make sense to use cinematic sequences to introduce the context of the game and the character? What do you want the player to accomplish? Is there a simple objective that can be aimed for so that the user gets a glimpse of the combat system, different attacks and spells, and different creatures? RACING GAMES What are the strong points of your racer? Is it how realistic it is? Is it how fast or how arcade-like it is? Is it the splendid environment of the tracks? How can you highlight this and make it stand out from other similar racers? ACTION / FIRST PERSON SHOOTER What actions are unique to your game? Can the character swim, fly, or jump? Does your game feature any innovative weapon or fighting system? What s the best way to let the player experiment with those? SPORTS GAMES How does your game improve on the other sports titles out there? For example, how is your hockey game different from all the other ones? Is it because of its advanced AI or because of its incredible level of realism? FIGHTING GAMES How do combos / special moves / counters work in your game? And how can you show the player how to execute these actions? What original characters should you show in a demo?  What should be the location of the fight? Should it display some exceptional graphical feature of the game engine? CREATING A NON-PLAYABLE DEMO PRESENTATION Non-playable demos are typically 45 second videos used to generate hype before a playable demo can be published. Traditional Hollywood movie trailers are great examples of the style, quality, and overall presentation. Non-playable demos should include a single title screen with the name of the publisher or game, footage of actual gameplay, and footage of intros and/or cut-scenes. Ideally the preview trailer should not only get the viewer excited about the way a game looks and sounds, but also hint at its underlying story or premise.  RECOMMENDED ELEMENTS Title screen (game name, publisher, developer). ESRB rating of the final game (if one does not exist,  Rating Pending  should be displayed). At least 30 seconds of actual in-game play. High production value, similar to Hollywood movie trailers. Rendered intro sequences and cut scenes (to help convey story). Narration is recommended to add impact. Text can be used to help convey features or story elements. LENGTH Ideal running time is approximately 45 seconds. Non-playable demos should not exceed one minute, but exceptions can be made   please contact us in advance if you wish to provide a longer sequence. ENDING A NON-PLAYABLE DEMO Publishers may consider displaying a single ending screen that states when the final game will be available, contains a list of features in the final game, gives hints, and/or displays any other messages to the player pertinent to the game being previewed. From this screen, users should be returned to the interface. This screen should be displayed no longer than five seconds. PLAYABLE DEMO SUBMISSION PROCEDURE PROCESS The first step is to submit your demo to Microsoft for certification. All playable demos must pass through the Xbox certification process before they are approved for publication. This process is very similar to full-game certification and is controlled entirely by Microsoft. It requires filling out a certification form and and delivering your demo to the certification team on appropriate media. Demo certification is done on a first come first served basis and can take anywhere from 7 to 14 days. Please account for this duration in your schedule, as demos that do not make it through certification in time will NOT make the targeted disc. Contact your Xbox Account Manager for schedule details. All playable demos must be certified prior to the noted  CONTENT DELIVERED  scheduled deadline. Please contact your account manager to make arrangements.  All demos must be submitted in full accordance with the requirements set forth in the Xbox Guide. All demos must be submitted with a launcher utility which launches the demo and passes it data in the same manner as described in the technical guidelines. The Xdemos launcher is provided on the Xbox Developer Support Web site for use in testing and submitting demos.  Playable demos can be submitted to: Xbox Certification Group Attention: Debby Engevik 18500 Union Hill Road Redmond, WA  98052 In addition to Microsoft s certification form, you must fill out a Retail Interactive Demo Disc Submission Form, which can be found at the end of this document. Please include a submission form with all playable demos to ensure proper processing. SCHEDULE RETAIL DEMO DISC CONCEPT SUBMISSION CONTENT DELIVERED BEGIN INSTALL Pre-Launch 09/04/01 09/20/01 Launch 10/10/01 11/01/01 February 10/19/01 12/21/01 02/04/02 April 12/21/01 02/15/02 04/01/02 02/15/02 04/12/02 06/03/02 August 04/12/02 06/14/02 08/05/02 October 06/14/02 08/16/02 10/07/02 November 08/16/02 09/13/02 11/04/02 December 09/13/02 10/11/02 12/02/02 CERTIFICATION REQUIREMENTS The game developer and publisher must fully understand the technical certification requirements for an Xbox game demo. Contact your Xbox account manager to receive an update to the TCR document. The Xbox Guide can be found online at   HYPERLINK "http://xds.xbox.com"  http://xds.xbox.com , the Xbox support Web site for publishers and developers. Access to this Web site can be obtained through your account manager. If you do not know how to contact your account manager, please send e-mail to   HYPERLINK "mailto:xbox@xbox.com"  xbox@xbox.com The demos will be certified based on the full game TCR with additional restrictions placed. A general overview of the restrictions is as follows: No title persistent data area access No user data area access No alternate title data access No networking functionalities No memory unit access No nickname access No player-created game soundtrack access Must be fully accessible using default controller SDTV 4:3 mode only ACCEPTED SUBMISSION FORMATS All interactive demos submitted to Microsoft for certification must be provided on DLTape IV media following the same guidelines apply to a full game submission. NON-PLAYABLE DEMO SUBMISSION PROCEDURE PROCESS All non-playable demos should be submitted to your account manager no later than the date listed on the attached schedule. Please be sure to send one VHS formatted copy and one professional quality copy (DV, DigiBeta, BetaSP) to your account manager. Please include a Retail Interactive Demo Disc Submission Form (found at the end of this document) with all non-playable demos to ensure proper processing. This form must be filled out and submitted along with all other materials. SCHEDULE RETAIL DEMO DISC CONCEPT SUBMISSION CONTENT DELIVERED BEGIN INSTALL Pre-Launch 09/04/01 09/20/01 Launch 10/10/01 11/01/01 February 10/19/01 12/21/01 02/04/02 April 12/21/01 02/15/02 04/01/02 02/15/02 04/12/02 06/03/02 August 04/12/02 06/14/02 08/05/02 October 06/14/02 08/16/02 10/07/02 November 08/16/02 09/13/02 11/04/02 December 09/13/02 10/11/02 12/02/02 SUBMISSION REQUIREMENTS Accepted dimensions: While the Xbox can support a wide array of resolutions, the Official Xbox Magazine Game Disc will display only standard NTSC output for video playback. This gives you the option of letterbox or standard 4:3 full-screen image size. NTSC (4:3) PAL (for European markets) Accepted submission formats: We strongly recommend that all materials be provided in digital format. DV or MiniDV formats are our first preference; however, Digi-Beta is also an excellent choice. While we do accept Beta-SP tapes, we recommend against this option as it does not always produce the level of quality we are shooting for. Each video trailer submission should contain two tapes: one VHS version for easy viewing and one professional quality version to be published. (See Submission of Materials for submission details.) DV/MiniDV (preferred) and VHS Digi-Beta (preferred) and VHS Beta-SP and VHS SIZE LIMITATIONS  The Xbox Retail Interactive Demo Disc is a DVD-9 (8.54-GB capacity) format DVD. The total amount of space available for demos, trailers, and other extra materials is 6.4 GB. Unless a special arrangement is made, please try to keep preview trailers under one minute in length. OFFICIAL XBOX MAGAZINE GAME DISC CONTACTS If you are interested in even greater exposure for your Xbox playable or non-playable demos, you may consider distribution on the Official Xbox Magazine Game Disc. For more information regarding this option, see the contact information below. Dave Rees, DVD Editor, OFFICIAL XBOX MAGAZINE Imagine Media 150 North Hill Drive Brisbane, CA  94005  HYPERLINK "mailto:drees@imaginemedia.com"  drees@imaginemedia.com   p.415.468.4684 x2511 Mike Salmon, Editor in Chief, OFFICIAL XBOX MAGAZINE Imagine Media 150 North Hill Drive Brisbane, CA  94005  HYPERLINK "mailto:msalmon@imaginemedia.com"  msalmon@imaginemedia.com   p.415.468.4684 x2127 Karen Quilantang, U.S. Sales and Marketing, OFFICIAL XBOX MAGAZINE Imagine Media 150 North Hill Drive Brisbane, CA  94005  HYPERLINK "mailto:karen@imaginemedia.com"  karen@imaginemedia.com   p.415.468.4684 x2172 RETAIL INTERACTIVE DEMO DISC SUBMISSION FORM CONTACT NAME:   FORMTEXT  ufuWH<HWHWHWHWH ^T^T^T^ yfySyB2 ZLZLZB kTJ=J=J= gd|u4 gdx5N rfrXI: WHWHW ~o~o~o~o~o~o~o~o~o~ ~o~o~o~o~o~o~o~o~o~b gdY_w ufXD8 vgQ?&Q ylZKZ; gdY_w gdY_w }gU<g s`Q;`+ Fighting  FORMCHECKBOX  Simulation  FORMCHECKBOX  Racing  FORMCHECKBOX  Shooter  FORMCHECKBOX   FORMCHECKBOX  Sports  FORMCHECKBOX  Action  FORMCHECKBOX  Arcade  FORMCHECKBOX  Puzzle  FORMCHECKBOX  Graphic Adventure  FORMCHECKBOX  Other (please specify)  FORMCHECKBOX  ESRB RATING OF FINAL GAME (check one): Early Childhood  (EC)  FORMCHECKBOX  Kids to Adults (KA)  FORMCHECKBOX  Everyone (E)  FORMCHECKBOX  Teen (T)  FORMCHECKBOX  Mature (M)  FORMCHECKBOX  Rating Pending (RP)  FORMCHECKBOX  Descriptor Text: SELECT DISC FOR THIS SUBMISSION (check one): Pre-Launch  FORMCHECKBOX  Launch  FORMCHECKBOX  February  FORMCHECKBOX  April  FORMCHECKBOX   FORMCHECKBOX  August  FORMCHECKBOX  October  FORMCHECKBOX  November  FORMCHECKBOX  December  FORMCHECKBOX  PAGE   Page   PAGE   NUMPAGES   EMBED Photoshop.Image.5 \s  gdY_w gdY_w :pY_w ob]m} IDATx^ TVuUuUw$ 1zGz: !>otZ t_:w< 7xom0 5'l2>p=rz f32L4 WBrEu_ 2h5d/m 1&c^O< W{o3y* X'Kfb  Pe%T IQ xB pz^T?{ ]s#W6n h^zNx ,>hb( t@d7  R1nE. |7,Z%E ZjQ*L f`D . HY^^9 LWHs{ L)E|S, 9>y|B.* "wCaO JEdf! #fCh^k. |g]= zx V5KTT cFm5* L\)6_ }tfdr~j|n j|_\L rumedZ SSSccc UYEL% Y2Jmb H"`yax };rmIW BA_Eu8I- GQAWt ^}zVx ZAu|~ eFw@T ^}tti Kv/?  (Ey%T \AV'I` ^,z*N 0''uL4 [C!P!D]#0 V"wub 8>QmV ).bqOp=d =?0Ty 8NCgO \X[ZXY Q]X\[ 6wK0znn. !5ECZZ -]w ;RZYY (U&4<;#]& VbHd0 !p!P0 XA0`P Zs1QhC c:KC~3 E?4B9 Q3vu9 .\yey FZcl>> ~O4V`pH 4p'qqwt :s@;zjfb R?qb~|R\ "1@ir H>fN} g^8sei A@,JK -aj_<9 K]da5 .WW.\| .\1VTT XidV0*Ps  i&$!+6 ObQ3% 1+:@a2f W.]>w ^A":ba $.F`] KW/7[ .3 F* LOMMb kO}}iy {|IFV 8KcqO(O nwck: ]<GKB) [\^my JQT[- ',)fuf (X8`+rL@O ]>7[6-E ,+T RX\B; (_ZY| bmb*H ;7.5N=:j %$5Wz q&W 8S ha8cP J%5.1 (E$/ZB*9  ys\(D nM[mM eEs&f ?86qD 2zv`A1 S?#R: =B#nN< grR&p `)}D} 1LgN" =2Z9hDE m_lEHGd xE/r"yE LScxV ^+h^z F<7rK ))L8@ a":hR C$RB^ \*N-! igvjV +*R\f NSdi/<5 CNA=i LyBfIm/ r$)ru s0;SBz t[/L447 >N%SF"# n$_`s= V_#zE)n YEsi3OB 2|N_O _<b-x 4<Z=P:L yj8>1 6TUia MNN2xe9 xjn|ffF7 (tuC+Z v*J;i g>322 =Ibo. JO72} 4C=pdvt dwGEf MH qiN garrbv $a!#V -T,8_, AtC:- XUAX=c 4j)>T cfZ23 WFh0& u<;?s }p<T=7ha s.v{K hG=MK :th|j g;n't0 ^T,Ep( @"h\! ,crjD ?y^K[ 7KM!?h &gNh3< $y&;i sRh#< ?F}0r ,Rf2j ^s*c/ PquBZ Nhk9X! kA"DV9 TKUQ: euYEu YR"K$ p3hTHos I-Btw ;fA:xd 0<RwS+9 8odz8 R#PlX TqMt$/ j`aVn o*kuJQ V#a4Z \35(^0 _&MOg> E;7p{I (fZj% /...b uf'|D! *AiFPJN( fM3}O Kb2g2 *#%<4 `dZ4F r#i5r |?Z9=\ .]ZZZ VI,-//^ #@ffK -?xP( 8:C&ts v)nwGK y{:O'7[ t)@}) KW^Q@EI @gBTr TRetxXk6._ 'jPKPV8*V Ae#EH A43K~zB'E Z;W*DV 5!t`% R2#LW &a,?">/ -{anv \CV(Y& :W{i? c /@b7 ajhZ@ &fUl2 f>CL@ +W/`yx@ 6 +{(j :X``1"[M Ks'^2G p,Q=* |x4cl W,U$% 56wG0 z0|;0 4pCnw 4=7:j Q_AiC }@:x, h'1=h AD+0kj H5uZS' o:c0M >z;zuk uL`wKNJ J14P] wBIBI!= 0B58U  (^jHZAs* vQ3;* d[w~s M})o5 2W[?[ 6BCnEq alYxW g?zKa >N|7K +d2(a A[X1ci #FXSG 3 v j SZc[CE 6-+X# ?A4U(zY -SP2u p")t]7 VB5CQ) 67rhPt F@t-% =i%!% Qh/Zut ur#p/= @E*k2 L5:_2 (z`g%[ B9-,q #W/X;L V$=F6=rSR  v;I; ^<<4p /_a;vl bhXF4b >z6z^ {6z~OQ \GQS4 ?|VVL X<l+Y3 <=;*K5 8R$)Ab I,GQb <=IV\ ;GS5[ N}paA o97_;j 75I-I jyAVrJ U#Y\? -s iiC3I EnlvR ydLI! N%2Q< S*kvVU 3`/;tk @`V#% *_wU#R 9&`Vd3L G#|;p )4ldz -UMv; W~28t 5/sY8 C|IYc k^a<64<BA Sw^yY U18)} ~Xw^5 b2$jG z;0v| FSe{0 YT GLz8 YegyPk6R 3}?D`@b MLrC| =H&<a "^`$# NDLGRV ZnM3ZF }tdpx hyu T` Z6+.d 9wkeq {a@P& O\pr% 7IGvQ uRR]N= ->tg8~ d-0;)% [vDaPka. QPE(! gN=iB lD8)F X(U!Ziw: ' x%7P$ ^:W|4:,g B<eL@ oj983F Tt+St !ooC: G&6=n CWEcPw[ ccMn!3 nj ok u2(54R +GVT*K E8*a5 G<8U4Z" m}<p& "N>AO'l &|bS^ $h5!E 4u%Sj SWm\L (? +' hIEy+ WqjRh KjP1t 76h$R ,h-1U$6r i;8H@ 6F1RQgV *,3," 4)EgI3 B,cjz -8iB{Q [r'4s [~}pe w?s(m  ?jn8 UP~#y mXeHn 4_;rK !K/Be )"`b" 3?B#P) }rO%\ MrC`0 ]d9,9E ^xj6Wo1 ;29},6 K RJNv pZ=xGG jg\'&U vQ9O,eA. /\(BJ 7MuR)z+ I7^=* ~r)ssS/ Bw)#- w0xZ9 620X) `QZt' p'dbD6 `m[v9h #JLG%u 0[vA` 9=!X  -(o>w +v}lZ V::1Y* n&%q4j +P(Rb e}[/Y 'F)'t cAX(* r<j^wY m4+Gc3j #%{Pp Ja`h`x Z=k8< iNOyNu j~y [ ,W4xC /O}(x; gm/0a" dtRD: Tp7w1Gqb S+dCGvu HjAfI 6AKfE {G-53 g-?'= A2] &3  #W(Y |Z/Y* 4=H!E dB>f~]p% [I[,u '>%WA 3\AX. >3424Z '2mT8 :&8a-  ?!u4>H ,do'1 g^f^o  BIy>f n|/JWA IvTg{f6) o"pv{ YwDxt! VWKG/)o V7VJG/'k pYySt ttIA!P zIa4(& K\Go|t >zuB+ F`cmW vtec} eLW:z ;'i3& ]<*e!P *T;Z- #J;e::D xJK^h c +u[ '$@g9 TCwqz G|q$Q !cU,nG *F4z_7 @JcNR# _xdc- M2[d]m SQj[m? 4Y"F{ 1X3fd 9Q'}* m;zE-do %Y}BR UqD}dx {>0uPn J0mR2 63#nj :Dkn{ 6mam6 C^BeT @m-X^ JbE0Fd6 E3qfP i2i;g $hlK# & >:v W(|\v B>1<x O.RB[ TMErT hX& ,\  DNkE /7N7!`l he((D +KH9a 0a$#cL< 0 Cc6 &<).,6_ g!b5p ;5}tY  5VOK
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\Xbox_Upload.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Xbox Upload/Download site Title _PID_HLINKS _AdHocReviewCycleID _EmailSubject _AuthorEmail _AuthorEmailDisplayName dmunz@microsoft.com David MunzingerXbox Upload/Download site dmunz Normal.dot dmunz Microsoft Word 10.0+qIDATx^ H a)I v{ttt Y^rA` ,o"^&P q/Z2S~J 3v(+9J eY>b\s Z06." NpQ)u( (R"B 0f ME-$> as27V ~D+;8 JhP|Sy[ ?:::<<  DA`N Z-@888 d/B`&q 5TLQ  t+`qo c4):A -]LTy $}D.Y $}DnWw hL`2> }zjF% ~Zqtt \Og*& *R8>> Ko)cj aO4e8A #&oB* 9K})q 'GXOL tttxx 3vX+s . *p&q f5_SI WnJV/ uLf2W =]fD] elV)rA Y/K_g C@mtL |DCpd e%H,B #T#Vr u*I-D q{ppK q{!H(K (W$cV` [W77h DOewV R$+O < a>-5L kIDATx^  jQ%% Fb0fB u|gd+  O;#;Em 4Q_'g =g^&G )y9R; `eNNx: }sO@. K`t"[ Rpb.; t([N3 uVBT-v l-z"- #bgdW V0:2B !`U1" 2gWE\ #[*Lf3 oZ$,! @`F } M.{uk] v fGat& &A@o ank 1/rk= >Brd+ )''(0FV 'q\'p[s LzJ~"> ClxAF L@dkii ^vU;v IDATx^ <QrEO$Sy C[&u} qZZFi >dyPW PZ]cn ^Y[Z< <5R$m F.\T65Y F>lm? $r3mi6 7{n_da` 6r-MC c~Zmat }HR$r #{:5mj *?766 -j=*^ C.Wvs JGimc L,Ki{ tV7 + *vA7}  aIJX Z!r<a  r@myE. Z!r<! y"}J{xk Pv>(?| qW,_s u/OR6r-] K9^7~ _ky0k 6q9u<r OK+&u )=vf) s:[A^y W^1yH] Uzs@9(8sz [K{{{, )Ob;O thRjQT []}iP Y6p9K x/p`DK9{ 8p)8  RFO9Jn "GXJ| @0Yc9$ lP,":k; :ot.2 *cH66r y>:"7 39<zG RQ$'v '&h=v L~1d\ p|DD. @\E|0k p k)w >t87T MPrD\ yEQue 8 xzS v_94b 2@xFi LAf^a [0Yi\? 2isT9 (Gc_Q >)('N9 ">S>% E&U^GMc novfv pf4J$U "X$+~ LTx\: 6fm,/ bh$n4* hnZe8 %{30w? {@a=Q1 Ows_)Z 3aH!* z)Q_[[^ ]6UT" }<WQk DY"S|ctK 3T(;{ l/cOh4 QJx6BS8 <a</| "B98F Vuleei S#N1( wy{?? 04Mjw td'3D 5l0x2 *bYWXJ ODtE  mlJQ( 4S(m# :)fre ,Z^I-c ||9OF rmD., bdG8Px >H3Mb P3IcA ci\}m 4w$EJ V\C_ P *]~}3+ m:U&: 3-7(? *BG%J m>&-# N7pH`\ m--UZg D{h0J)k 1Zq5i) 8lveJM 7hPW6* aJhZB &6?0T Y;j{> f|fymm {:mU%Y L{x"!6 MHM<hF b-J+<X /*M%,3 Us'z& ,-(J_< <LO(^ !\2@L 4I(E37 e~no}u d()6|x FOg)/ _&PN2JV@ Pxrgj .OJa|{ @eO|gm $NSZl 0d3 Q nm9:zWt 2~SId ";+ph6V :&{k{ S&6Z2g T(1`3| ~1Xz" tqEoF 40}8)k3j_ FeeT? {%#l$ "MNNM u;wCCX< )O!pwx 8K!$bx o6WNu 2J_]i `d3?w |aii9\Z ~4w|aq ~]mmm QAjvwa 9M$.| `Rcn)W \dV VX+ B'}B*(% -iJQkb bPn!r)-e, A,lzw, \NmDU $//6C` grwyf h%g)/ pokB" G!u:o R&^5%CFkv r$;O> 8Ocpe; XAQTe Up/(UU RUH5= =EVV99Kk cwr[M 4ckm#W N5%,N +hks} &Osll{ @lZPjM [v=g)O ?%t}z AzB"B KIX+2 VnPnV zN1mdCP T)3]\ 1mqJr ^R-(7 5BF.X TT:QL TaK\5 jDCDj K/,1W Xsinh [EXda ;o z= OIh&# YHFS3 E">d5l mp4;0 (_^^^z~I Bvtb#) E)n{p Jx55~ BM|t+2 SwFi# JiGsY i#v8OV hDa<I lo,Rff S_z:\y P {pn Ou.=q 'Z%*x ma'f:)5# *X$hT >U/3G A9cwc UVgF(R `K5Xy )W=r@ Ui*Zo 9)v(y 4oAA#jGi _}iu}}]z. AG+cD oLNo+ &W_|m qOO@- WOxm]>S |pb<Y ;wU!Qg^ `g}Gug #3<Ad ^>e1V :IrX-a 3~![= .#-ft"6 ;_)zK wY7";Y TLK<. %&-4<'. l26>Y GC$0=M B0lu": hc(O* 6/(_Y ^\zai 0?&5n" B"[Yv \&Xx" j<G&Xy VViXD 18V]C ph1UK mSp\+_ ox"*: ,Xe($ {kjPI!r (2ChF =S$<l $XW(\ f4iAp _MbPH (X\2U 3%(BK `Ra0n "gS"/= V-i+C ]!G|m&g ?yG;I b'y>( a;t)o 8..$C sj&t7! 2-&Gj S<nLH9 4nAg{ ]}e0x 7C2oinw RKnB  m'4ZY& Wp"XHy ,2N{9'f }j3'| D=8rR nq&Ot j)_xkN6 ,7$9E $?rqt! r)=SftX -Efeo 8De-e b84y<B'M KcGI! <"F>~ f\"za 3[a.O kb{2A 4`R ER` >xI!> N*Ak] k?cQv ^:&>% jK?S[ m;udu 4 oma$ l'6<k;7; %!E1O n)WR^ ev7g' kpp?)'De JHV>{ X&G'm n)n{* (85^< AQ 0jA 0fH4/ ^6yS0 {SvMh Eb1&c V#Iee3 rkF2D\ /~,n` %W;&R BEOlN +-Ir:~A '^+f} !]K:F Zw"^% ZL#9B 6vF7q^ -DNDn jH9]]i ^b^NUf U^FPt O%yn< <]u"Y CEbkD 2D\(C [0a)7O #,Y%m) -qzaU qHG5hC 8*?Q! ej&Ok uGoI_ d&g(H  =+D*a0 = JW|c tK~K: /|DH4 -L9mA dV'?R~ $2ie~ '1[8< n9%]@; /" X -/ fMT=1 X+"~v #n-fEj D1'W( y~4$b {7zd@ QUx97 %1f]!FAK[ 6K!37 |Lfrw i!IBL ]V$,: \8)gAlw gO3+8d +)/Gv.) #Cf>C# dgbqU 0gQ,b -Ys1v ~7[F, sgVa- iVzxB kH~Q0 :N*j: <nJT2: @%c%R mH;~" (R<#p l<_'b *N~LLI Jph[F `F.31 S*)O" CNZfN 8=O\F Z3op_` 8h&oV z)#tcf kR_]Y 1<X&{ ${blv ;'m;; 5maOtY P6\Gl n5O!&` q*&NM gK6-( <RqfH 3ri)'F C#S>2 U73,mb "`Qc{P[^ Qu10u 8}(vk: }42<a( ;9Y>)b \f\_"+ `Qv!Ub _x2rk +;t^" H9<WI q8X#%uT NF9:/ *&s7m[ V.>': ]@IW9p 6LT\\ k^7LKevEx MND`\ rG&hc +j)_x36 |t}{8b{ fzw)X} )v47c cD(HS: s4Zt= 5"x9QO `DG$B, e=&MUIg ]~Lpt- NHd0X s4=cWxe kb)7yL  1,`p`G 6k?U;r <2>2~ i;;G1 B@IyU @]HPz' #>:>p \lXCp Z9E`V ]|]$H 9B*^-6N +)W=R I=+iB 1CKA[ !(1-y .e%d" 8L"[*2Y |^Hj> |J{V^M `I;KM .q|)s Wp.bk& O.y}3 72Yi{ %-U%;w ZP@#"k VR~84an ,2H)Us E2_wJ VLT5g rc^)N3 `)+xfB *37A'^ eji$\ (mcy%=xU hqbGJ% |\EJ3\\ pUeTS(R t/3q^ SZ/E@ yH,FVgju `dbWh^ lq/FV*- 3D>iL fJX,v& (.:oA )2?Hm j)?TM [TbE@ O/ufhm xsU9} bZ'sy *VSTv S#9]q rsaf- [i{mf s|_+UE? qT4E@ GVdAh czAf-  :@pI Jj)?P Vw14= jPI6M<G R>G05+E :E*@U5 ?r[c^ _ [Aq 7^%JSF &(F@- 6XcDw+ Vp9Tm 1YUpf,. RiJ9n^ Iqns)+F `pXtq &?"[q N<)%0 y3;`i @" ${vJ=G #_)M6 VPtAO Z#E`?"Pl/ tpkt@%?pb j)WeP <3RfnyETj KcUZtZ J|CdV3 a:A } R| uLgU@( kb_OJ |.0j& G mx^ Y)wlQ*r(+~ |.0j& zeV<x% d"tV, rZrgw PKy<V <W853E@ 4}Z`?O &hb_C cqG+U LfD@- .[)H& +@^uJU(F*?MA *D*fj US7}i 0F"\\) b1#CZm j)?tM #|$D1Y hN1Di@ >LsFzd a)_-O 1w:eg zg#)l& <$@3Y p(9VL +y]6o]jH+& `)_+^D c[d.B zFd)t 5X=@oC kikY# ywP{+ TvUq( 4bRttPo z5^&r `)_-O h'`^k f!fL]2 +$#(Lv `)_7a H^`)? F6A`] 7[ixK _C]Ds qoA8jk 56;@k` `)_+^D zc37m oJ'>u Jy|uD Sow7w (L1aV% lG[[^ M!Z_9 co^kZ+ Nwy2k N$B"  qhQ_H) FiU;i vDCF:L IZ'6Mjq H)'=s bx<a<zq i<O^\ uaqGw $`)_{a D+R'o 3t41T #7j!). |z9W^ f<Hs:@ !5D6p ep6:{t o<sS* ^fMNn SPaVYL MN>sB J}4r5 n}Zk; *W<UXo9 <S;|s WF3o> TLg[f! {H>jt 5Db~21 35]Mh `b [x Zs6W"do C9sTldZ ${.^7 I_g{" tJZXF "'3NA Zm@ud7 P^:M3 "9^$/ Vpq1W/ zvk7c+[ Dpe&W 4'V;7 jH+tr msy9za 9ot&: [GTw` jfIfo6 I*/^V Imgor 0HS}] yN^bo FKN`*- =Uh?Du gHwFC> }r2>=  !$}' Ixc0Y0 %SLu)_ 8g{9m HSpvxG ]:,`t cy'K|C` Ik}rJ 7;W{: /WKB)fu T{/.h kRzC3l yEK9I z1Ii_ I6[<{ ^aj,g& ^VJ9O3D JT$tO b3c S -J99x 7O?w6 zwb2x ,t$iF ?U<f9c ?}qf  }(36i Ml(Nv+ }v='} k4rK5' <UN&j ^b/v6 DY(J5 <IX$r& (:wej ah"43.9 @:41| ~u-#N Zwa)o )MBwgV S5wy7 _7XNx 4<=eC Qv=#} WrY<R b\T%hA eW&s ;~_ Guk<>o \dlU+ |x4In& I.)gk fzDj: 0c>)} ZS4Jy~ ~\5`i WZi.s `%[]d  Ig4t6u aVmge D-!aK /vkH' eHHg2\j 84;r, 5r>P% W/%[n^[ j$fbP Fu4V4 VOZ-A >RE[* .G{6A |p;Z\ kM1x(,7 Z!VdA m2}>c /H['o ~BIB)_qa : VE@Vub XHO[F Vk{]ml 1Vs;E R~NnI r\Q&s Z%@VsX U#7Z7 IDATx^ .6Hp_H XZ^'D Rm-q[b ^K?kF :Bjj? OYk?M# 25[e[ ^Oe;/>[ij =Cq}h[[ l_X}m |4ZXT soR|J z3{7w#d 6Y|.V" =QGQPSc M5'u26 K~J&Te ~z5+Q ymeV; (iI-k5 K]4vY>7k BNmhmR 6fs1> vhfGe_ &eURN KO{jdX0 &{|J~o g}~Spub VE"<` ns[wa JjC-_[x# Rmu`m mu2dt^ #hYD) oR<H} )gT#%Y /coF> WE)?\ %sqM&]% 'R?lV, oRuq" H~&?. C=/${ mt4U; x0jY] 6uD&v pI\Y>(| QoR^/ jd}aR oB.H{ Pzr^= *2F_C S7.IG 004w/ q4erU `gZ7CB e5Mq  szC;Y FXoTu 6Vu_  P_A4i  Ozu; @22iO !2i:/ d8;bB d8;bB BdrOy aMdtI a2i:_ F'0X& $[=FC tlP&F E:Vi.# &N`329q( mXu#{ d2:b2 d2:b2 d2:b2 d2:b2 d2:b2 d2:b2 d2:b2 d2:b2 d2:b2 d2:b2 d2:b2 d2:b2 d2:b2 d2:b2 d2:b2 IDATx^ R!C*. n]jlo F}mut r:2mY ScEM- }Z,eZ9g EU#~Q hX[!3 kIswK- nR+4Bm T|&pb (I%"n. UOPZ< sQ:Kj{ y"Jb5 sQ&O? %0r.M KoWLT~ zkS?euq ;!Uks& ^o4tr4 dF|P?y_ Jvv\1 gRx^[ LGQ.xr~(> dr$pw4( pQG/A [wqQ; "8+As 7.:wkawS dqQ/^ u,pQ) J`2^Y 1.vVs beK$\Tv .,[kL~ -PSlti Z(QtI pQ'+P #)i4S ;5!K. 5?@4y# Yoi&y CLY2pQe i94HX j"j[d DeHv5 {KGTD .j1:. !;=/gl 5O[kL~ 8+'pZq {Qnif XCg6+ /v.pQ .b8.j yVg|n >}vhnXbox Central Upload/Download site.  System Requirements: IE5 or better Win2000/SP2 or Win98 (WebDrive will only work with Win2000) IE Configuration: In IE, go to Tools-Internet Options-Security. Click on Custom Level. Enable launching programs and files in an IFRAME. Now go to https://xds.xbox.com (Note the https) Enter your user name and password (CASE SENSITIVE) at this screen. This can be a  copy and paste  from your email. File Transfer Page. Click on  Transfer  on the navigation image and then click on appropriate upload page link on left (Yours will not say PublicDrop) You will then see a window similar to this. You can drag and drop to and from this window. You can also browse within the directory structure, view file properties and cut and paste. Possible problems are the inability to copy htm files (asp, htm, html, xml : all flavors), without first zipping them or renaming them. We don't recommend attempting to copy files larger than 20MB. Larger files (or a large group of individual files) should be spanned across multiple compressed files using a compression utility like Turbozip. This utility will allow you to compress and span a large file (or a large group of individual files) across a set of cab files.  We now have a site license for WebDrive, which allows you to map a local drive to any FTP or WebDAV site (XDS.XBOX.COM is a WebDAV site) if you are using Win2000. Once Webdrive is enabled you will be able to use command line utilities such as copy, xcopy and robocopy to move files up to our site. Robocopy supports Network Restartable, which will allow you to begin and complete your upload unattended. You can download it from us by clicking the WebDrive. See the WebDrive section at the end of this document for details. WebDrive Configuration After installing WebDrive, open the Site Manager and configure a new site. Use the  following settings: The Username and password will be your login information. The drive letter can be set to any letter. Note: You will need to contact your Account Manager for specifics on which Site Address/URL to use. The format will follow https://xds.xbox.com/xdsdirectory/[TITLE] where TITLE is the game title you are working. You can find this URL on the file transfer page under the navigation link for your site. In the example for this document, the Site Address/URL would be   HYPERLINK "https://xds.xbox.com/xdsdirectory/PublicDrop"  https://xds.xbox.com/xdsdirectory/PublicDrop
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\Xbox XID Spec 1.0.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. XBox SpecsTemplate Title _AdHocReviewCycleID _EmailSubject _AuthorEmail _AuthorEmailDisplayName Here's the doc file from scott loomis that I'll be throwing on the CD this release. coneill@microsoft.com Colin O'NeillXBox SpecsTemplate a-setho XDK_Specs_HLAUG.dot Colin James O'Neill Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags Month l/m:d UzWA4@ \>iwxiP f{Z&f{Z&dbjbjk nsoles. While the communication protocol remains the same as HID, the complicated descriptor parsing is eliminated. Instead, XID defines various device types and subtypes. From these, the set of reports and report structures are known. Hardware is constrained to using the report formats defined by the Xbox team and must scale their data appropriately. Future expandability is provided for by allowing later versions to append new fields to the existing reports and add additional reports. The host Universal Serial Bus (USB) software is designed to mask future extensions from legacy clients. The device type, subtype, and report lengths are reported in new XID defined VENDOR specific descriptor. Additionally, there is a VENDOR-specific GET_CAPABILITIES command that describes the validity of fields in a report. These additions are VENDOR, rather than CLASS specific, so that the device may continue to function (from a firmware standpoint) on a HID compliant system. Such firmware would simply support both sets of descriptors. A similar strategy will likely be pursued for force feedback devices in the future. New output reports would be added exactly as they are in Physical Interface Device (PID) standards, only the descriptor would not be provided. The Xbox team would publish the structure and format of the reports associated with force feedback devices. The vibration motors do not use this approach because PID is overkill for two motors. A simple vibration output report is defined instead. Goals XID is a proprietary USB class designed as a simplified alternative to the Human Interface Device (HID) class specification for USB devices. The goals of the standard are: A simple standard for Xbox game controllers and other Xbox input controls. Future expandability allowing backward compatibility for both titles and devices (i.e., the common supported features always work). Coexistence with HID so that a single firmware stock keeping unit (SKU) can support both XID and HID. Support for simple device output (vibration motors, LEDs (light emitting diodes). Operational Model Endpoints XID devices normally have three endpoints: the default endpoint, an interrupt-IN endpoint, and an interrupt-OUT endpoint. The interrupt-OUT endpoint is optional (for example, devices that do not receive output from the system vibration motors, LEDs, etc. do not require this endpoint). XID will use the first interrupt-IN and interrupt-OUT endpoints associated with the interface and neglect all others. Input and Output Reports XID uses the same system of input and output as HID. XID input reports are usually transmitted on the interrupt-IN endpoint, and output reports on the interrupt-OUT endpoint. Unlike HID, XID reports must be less than or equal to the maximum packet size (wMaxPacketSize in the endpoint descriptor) of the applicable endpoint. Since the Xbox game system only supports full-speed devices, this is not too onerous. Additionally, all XID reports begin with a one-byte Report ID. Under HID, this is true only if a Report ID item appears in the report descriptor. The standard HID commands GET_REPORT and SET_REPORT (defined later in this document) can be used to transmit reports over the default control endpoint rather than the interrupt endpoints. The packet size of the device must be big enough to contain a complete report. No report may be larger than 64 bytes the largest allowed packet size. Device Types and Subtypes The device type defines the primary use of the device (game controller, DVD remote controller, and so on). If a game supports a device type, it supports all devices of that type. The number of reports, their direction (input or output), and their format (field offsets, sizes, default values, and ranges) are determined by the device type and version. Future versions will never remove reports or alter the size or offset of existing fields or alter their meaning in a way that would make them incompatible with existing titles. The Xbox system software ensures that devices built for future versions appear identical to the version a game was compiled against. The device subtype implies additional information about the device, such as form factor and specific mapping of controls to the report fields. For example, a wheel subtype of the game controller type would indicate the position of the steering wheel in field determined by the subtype. The published mappings are designed so that most games will be able to ignore the subtype. However, a driving game (as an example) would probably want (and for some certifications, would be required) to tune gameplay to the standard controller and a steering wheel independently. These games would use the subtype to choose which mapping and tuning parameters to use. Games will most likely have to use subtype when designing their controller remapping interfaces. Field Scaling and Unused Fields Devices should provide a minimum set of controls to be usable with the intended genre of games. (The standard Xbox Controller is intended to work well with all games.) A device is not required to provide a physical control for every field in every report. Such controls should always report the specified default value. Additionally, devices are expected to scale the reported values to published specifications (see Appendix A).  The following guidelines should be applied when scaling and clipping raw data. For displacement controls, the processed data reported should be an affine transformation from the actual axis displacment.  For pressure sensitive controls, such as proportional buttons, this guideline does not apply. Axes should be clipped at the extremes such that all axis go to full scale in both directions.  Be sure that the extreme values are really full scale and not merely close. Each axis should be processed independently.  For example, a thumb stick with a circular range of motion will report at full scale in the X or Y axis only. Games expect a certain amount of jitter in axis position.  At most only minimal smoothing or filtering of raw data should be done. In keeping with c), firmware should not attempt data processing report the median value of the range in the center position of thumbsticks.  Games will expect as much as +/- 12% in the reported center value.  They will also expect good fine control in the center, so do NOT implement a dead zone in firmware. GET_DEVICE_CAPABILITIES (defined later in this document) is intended to allow the interested title to determine which controls actually exist on the device and to determine their intrinsic resolutions. Not all games are expected to use this information. Compound and Composite Devices The standard Xbox Controller is a compound device. There is an internal hub that has port 1 hard-wired to the controller functionality. The two slots are USB ports, and the expansion devices are USB devices. Xbox system software also supports composite devices. A composite device is defined in the USB Common Class Feature Specification: Logical Devices.  A USB device that provides more than one function to a host by declaration of class codes at the interface level.  XID audio and memory unit devices are all classes defined at the interface level. Xbox software supports composite devices of these three types. Such composite devices will be indistinguishable at the title library level from similar compound devices. The order of the interface should be the same as the slot number in the similar compound device in order to maintain this indistinguishability. Xbox games will not take advantage of composite device features that are added after release of the game.  Polling Interval and Idle Rate The Xbox game system does not, in general, honor the bInterval in the endpoint descriptor of XID devices. It has two polling modes, auto-poll and manual poll. In auto-poll mode, the interval is 8 milliseconds. In manual poll mode, the game issues an IN request directly at its predetermined rate, most often at 16-millisecond intervals, in sync with the video frame. The Xbox game system does not support SET_IDLE as defined in the HID specification; the idle rate is effectively infinity on the Xbox game system. Regardless of polling rate and mode, which are unknown to the device, the device should be prepared to respond to IN requests at random intervals. It should always respond with the latest unreported state. If the state changes multiple times between IN requests, only the last state should be reported. If the state does not change between IN requests, the device should negatively acknowledge (NAK) the IN request, regardless of the time since the previous acknowledge (ACK). For practical reasons, a device may occasionally NAK a request even if the state has changed. Firmware should be designed to minimize this as much as possible. All current game devices are absolute devices (the standard input report contains the absolute state of the device). In the future, it may be desirable to support relative devices, such as mice, or relative controls on game devices. Devices with relative controls will need to coalesce changes between poll requests. Note: In our development program we have encountered problems with numerous chipsets in the area of overwriting data that has already been submitted to transfer.  This may make coalescing data difficult or impossible on some USB function chip implementations. Descriptors This section defines the various descriptors a XID device must support. Gray areas of the tables show standard fields that are not accessed by the Xbox system software. Italics indicate special handling.  Standard Device Descriptor Offset Field Value Description BLength Number Size of this descriptor in bytes BDescriptorType Constant DEVICE descriptor type BcdUSB USB version BDeviceClass Class XID is an interface standard BDeviceSubClass SubClass Ignored BProtocol Protocol Ignored bMaxPacketSize0 Number (8, 16, 32, or 64) Maximum packet size for endpoint 0 IdVendor Vendor ID IdProduct Product ID Offset Field Value Description BcdDevice Device release number iManufacturer Index Index of string descriptor describing manufacturer iProduct Index Index of string descriptor describing product iSerialNumber Index Index of string descriptor describing the device s serial number bNumConfigurations Number Number of possible configurations The Xbox game system does not provide any way of accessing the manufacturer, product, or serial number strings. All Xbox XID devices must be defined in the first configuration. Standard Configuration Descriptor Offset Field Value Description bLength Number Size of this descriptor in bytes. bDescriptorType Constant CONFIGURATION Descriptor Type. wTotalLength Number Total length of data returned for this configuration. This includes this descriptor, all the interface descriptors, and their endpoint descriptors. It may also include vendor-specific descriptors.  The Xbox game system constrains this value to be less than 256 bytes. bNumInterfaces Number Number of interfaces associated with the configuration. bConfigurationValue Number Value to use to set this configuration. On the Xbox game system, this must be 1. iConfiguration Index Index of string descriptor describing this configuration. bmAttributes Bitmap Ignored. MaxPower Ignored. The bmAttributes and MaxPower fields both refer to the power behavior of a device. In general, the Xbox game system does not support power features such as suspend mode and remote wakeup. Overall power consumption is regulated by strict limits on power consumption in the hardware specification of Xbox certified devices. The software does not refuse devices based on power consumption. It will handle current overload and overheating conditions. Standard Interface Descriptor Offset Field Value Description bLength Number Size of this descriptor in bytes bDescriptorType Constant INTERFACE Descriptor Type bInterfaceNumber Number Number of interface bAlternateSetting Number XID does not use alternate settings bNumEndpoints Index May be one or two, depending on whether the device has outputs bInterfaceClass Class 0x58 (or same as HID, 0x03) 1 bInterfaceSubClass SubClass Ignored bInterfaceProtocol Protocol Ignored iInterface Index Index of string descriptor describing interface  The XID interface class is 0x58.  However, the Xbox Game Console will also support a device that reports the HID class ID of 0x03.  This allows a single firmware SKU to support both XID and HID. While the Xbox System Software currently ignores bInterfaceSubClass, this should be set deliberately.  A value of 0x42 is recommended if 0x58 is used for the bInterfaceClass.  If 0x03 is used for the bInterfaceClass, then 0x00 must be used for the bInterfaceSubClass for compatibility with Windows.  Standard Endpoint Descriptor Offset Field Value Description bLength Number Size of this descriptor in bytes. bDescriptorType Constant ENDPOINT Descriptor Type. bEndpointAddress Number Bit 3..0 Endpoint Number Bit 6..4 Reserved Must Be 0 Bit 7 Direction: 1 = IN, 0=OUT bmAttributes Bitmap 3 = interrupt endpoint. XID has only interrupt endpoints aside from the default endpoint, which does not have a descriptor. wMaxPacketSize Number For XID, the packet size must accommodate the largest report in a single packet. (8, 16, 32, and 64 are allowed values.) bInterval Number Polling interval in milliseconds. See Polling Interval and Idle Rate for details regarding why bInterval is ignored. XID Descriptor Offset Field Value Description bLength Number Size of this descriptor in bytes. bDescriptorType Constant XID descriptor type. bcdXid Number XID version. bType Number The type of device. bSubType Number The subtype of device. bMaxInputReportSize Number Size of the largest input report. bMaxOutputReportSize Number Size of the largest output report. wAlternateProductIds Number Up to four-word alternate Product Ids for the purpose of identifying similar devices from the same manufacturer.  Unused entries should be 0xFFFF. The XID descriptor is obtained by using a VENDOR-defined version of GET_DESCRIPTOR (defined later in this document). The bMaxInputReportSize field is used to determine the required buffer size for reports on the interrupt-IN endpoint. bMaxOutputReportSize is the largest output report the device is expecting. The XID driver will truncate any reports longer than bMaxOutputReportSize, and bLength will be altered to reflect the size of the report the title expects. WAlternateProductIds   This field is currently unused.  There are no criteria at this time for a device to be listed as similar.  All entries should be treated as unused and filled with 0xFFFF. Requests Standard Requests XID devices should support the list of standard requests below. Refer to the USB Specification Revision 1.1 for details. CLEAR FEATURE for ENDPOINT_HALT GET_DESCRIPTOR for all standard descriptors SET_ADDRESS SET_CONFIGURATION HID Class Requests Only GET_REPORT and SET_REPORT from the HID specification need to be supported. SET_REPORT is only necessary for devices with output. In order to reduce the cross referencing, the format of these requests is duplicated here. GET_REPORT bmRequestType bRequest wValue wIndex wLength 10100001B GET_REPORT (0x01) Report type and report ID Interface Length Report wValue: The high byte is the report type (0x01 for input) and the low byte is the report ID. The data returned has the exact format as a report sent over the interrupt-IN endpoint. GET_REPORT may also be used to retrieve reports not normally sent over the interrupt-IN endpoint. The XID device type determines the existence of such reports. Details can be found in the appendixes. If the device does not support the specified report type and report ID, it should STALL the request. All report ID s not currently specified for a particular device type are reserved for future use with that device type.  Test reports should set the VENDOR bit in bmRequestType. SET_REPORT bmRequestType bRequest wValue wIndex wLength 00100001B SET_REPORT (0x09) Report type and report ID Interface Length Report wValue: The high byte is the report type (0x02 for output) and the low byte is the report ID. The data sent has the exact format as a report sent over the interrupt-OUT endpoint. XID devices that report non-zero bMaxOutputReportSize but do not have an interrupt-OUT endpoint will receive output reports with SET_REPORT. Devices that require low-latency output must support the interrupt-OUT endpoint. If the device does not support the specified report type and report ID, it should STALL the request. XID VENDOR Requests These requests are newly defined for XID. They are defined as VENDOR-specific so that they will not interfere with future changes to the HID specification. GET_DESCRIPTOR (for XID_DESCRIPTOR) bmRequestType bRequest wValue wIndex wLength 11000001B GET_DESCRIPTOR 0x4200 Interface Length XID_DESCRIPTOR GET_DESCRIPTOR is the same as the standard GET_DESCRIPTOR, except that bmRequestType indicates VENDOR-defined and that the request is for an interface rather than the whole device. GET_CAPABILITIES bmRequestType bRequest wValue wIndex wLength 11000001B GET_CAPABILITIES (0x01) Report type and report ID Interface Length Report Capabilities GET_CAPABILITIES returns the capabilities of the device with respect to a particular report. If the device does not support the specified Report Type and Report ID, it should STALL the request. If the device supports one or more fields, it should return a packet of the same structure as the report with a bit set for every bit that is functional in the report. This does not include calculated bits. If a field is 8-bits wide and scaled from 0 to 255, but the device only has six-bit resolution, the device should return 11111100B in that field. A device need only return data up to the last bit that would be set. In practice, USB requires whole bytes be returned. Fields after the last data returned are assumed to be unsupported. This is necessary to support future extensions of reports. Devices must support GET_CAPABILITIES for every report supported. Interaction with HID Protocol Without consideration of the proprietary connector, XID devices do not generally work with standard HID-compliant systems. Nothing in this specification should preclude an XID firmware-compliant device from also incorporating support for all of the HID requirements to work on a HID-compliant system. The only minor loss of functionality is that the reports must be scaled in firmware, and a HID-compliant system would not be able to determine their true physical range. Appendix Sections detailing each device will be added as they are further defined. Value Section Game controller Standard Game Controller Input Report bmButtons Layout Vibration Motor Output Game Controller Subtypes Game Controllers Game Controller Subtypes SubType Value Controller standard (Duke) Controller optional (Akebono) Steering wheel Arcade stick Flight stick (not joystick) Snow/skate board Standard Game Controller Input Report Offset Field Default Description bReportId Identifies this as default input report BLength1 Size of this report (version dependent) bmButtons Bit array of 16 digital buttons rgbAnalogButtons Array of 8 analog buttons wThumbLX -32768 32767 X position of first thumb stick wThumbLY -32768 32767 Y position of first thumb stick wThumbRX -32768 32767 X position of second thumb stick wThumbRY -32768 32767 Y position of second thumb stick  bLength is currently 20 bytes for version 1. This value is subject to growth with future versions. Interpretation of Fields All devices must normalize the values they report and should report the full range. Where items in the table represent arrays, the min and max are given for each item in the array. Bits and bytes are stored in little-endian order (least significant bit (LSB) first, most significant bit (MSB) last). bmButtons Layout (lsb) (msb) S: Start Button B: Back Button U: Directional Pad Up D: Directional Pad Down L: Directional Pad Left R: Directional Pad Right LT: Left Thumb Stick Button RT: Right Thumb Stick Button N: Not Used When a button is pressed, the corresponding bit will be 1. When it is released, the corresponding bit will be 0.  Button  Button  Button  Button SB: Secondary Black Button SW: Secondary White Button LT: Left Trigger Button RT: Right Trigger Button Vibration Motor Output Offset Field Default Description bReportId Identifies this as default output report bLength Size of this report (version dependent) wLeftMotorSpeed 65535 Speed of the left-most motor wRightMotorSpeed 65535 Speed of the right-most motor Any device with vibration motors must support this report. Interpretation of Fields The speed is normalized. Devices should respond to the entire range. 0 indicates the motor is off. How wLeftMotorSpeed and wRightMotorSpeed map to the physical motor speeds will be determined later (linear, exponential, other?).  STYLEREF Title \* MERGEFORMAT  revised 10/15/01  STYLEREF Title \* MERGEFORMAT  revised 10/15/01 MICROSOFT CONFIDENTIAL   MICROSOFT CONFIDENTIAL MICROSOFT CONFIDENTIAL  PAGE   PAGE   PAGE
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildlab\ini\bvt\testini.ini ===
;*****************************************************************************
; Global Settings - if there is no per-module setting, global setting will be used
;*****************************************************************************
[GeneralSettings]
HungDetectInterval=-1
NtGlobalFlags=0x30                  ;Default is  FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK
StressTestMode=0                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=10000               ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=-1                         ;default is enabled all levels except XLL_VARIATION_TIME
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=16384               ;default is 16K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00
DisableAutoOff=1                    ;default is 1, 0 keeps user's settings, 1 turns it off

DirectSoundDebugLevel=1             ; turn off non critical warnings from dsound

FormatAllMUs=1                      ;for formatting of all MUs
;ForceMatchedKernel=1

[XNetRef]
cfgFlags=0x01                       ;bypass security



;*****************************************************************************
; List of the test modules to be loaded and executed
;*****************************************************************************
[TestList]
idelog                          ;logs info about IDE devices
abuseval                        ;Guard page test
;obstress                        ;Ob stress test
;SDSTRESS                        ;disk stress, manages own threads
threading                       ;threading test/stress
savegame
fileio                          ;File IO win32 APIs (XAPIs)
nickname                        ;XSetNickname and FindNickname tests
soundtrack                      ;Soundtrack API tests
smcstress                         ;SMC Tests
;usbInput                        ;USB XID Input API tests
vmstress                        ;Virtual memory stress
;devctl                          ;Random I/O test
timetest
xnetbvt                         ;XNet BVT
d3dbvt                          ;Direct3D BVT
dsbvt                           ;dsound bvt
xmobvt                          ;xmo bvt
wmabvt                          ;wma codec bvt
dsreg                           ;dsound regression (until we have reg tests)
xmoreg                          ;xmo regression (until we have reg tests)
wmareg                          ;the wma regression
DirectSoundCreate               ; direct sound create api tests
DirectSoundCreateBuffer         ; direct sound create buffer tests
DirectSoundCreateStream         ; direct sound create stream tests
DSoundDRT           ; dsound developer drts
ds3d                            ; dsound 3d tests
mmtimer                         ;multimedia timer
fpexcept
satest                          ;vertex shader assembler
event                           ;D3D event notification test
fsaaperf                        ;FSAA performance test
vistest                         ;D3D visibility test test
dmtest1                     ;DirectMusic Tests
cryptotest          ;kernel crypto test
sections                          ;XE section loader tests
XOnlineStartup			; XOnlineStartup BVTs
XOnlineLogon                    ; XOnline auth tests - Logon
XOnlineGetLogonUsers		; XOnline auth tests - Get Logon Users
XOnlineGetUsers                 ; XOnline auth tests - Get users
XOnlinePINStartInput            ; XOnline auth tests - Start PIN input
XOnlinePINEndInput              ; XOnline auth tests - End PIN input
XOnlinePINDecodeInput           ; XOnline auth tests - Decode PIN input
XOnlineAddCachedUser            ; XOnline auth tests - Add cached user
XOnlineRemoveCachedUser         ; XOnline auth tests - Remove cached user
XOnlineGetServiceInfo           ; XOnline auth tests - Service info
feedback			; XOnline feedback tests
stats			; XOnline stats tests
XMatchBVT                       ; XOnline Matchmaking tests
XBudBVT

[XBudBVT]

[XMatchBVT]

[xrltest_bvt]
ThreadStackSize=65536

[XOnlineLogon]
ThreadStackSize=65536

[XOnlineGetLogonUsers]
ThreadStackSize=65536

[XOnlineGetUsers]
ThreadStackSize=65536

[XOnlinePINStartInput]
ThreadStackSize=65536

[XOnlineAddCachedUser]
ThreadStackSize=131072

[XOnlineRemoveCachedUser]
ThreadStackSize=65536

[XOnlineGetServiceInfo]
ThreadStackSize=65536

[feedback]
ThreadStackSize=131072

[stats]
ThreadStackSize=131072


;*****************************************************************************
;Module Name:
;    sections
;
;Abstract:
;    XE section loader tests
;
;Notes:
;    loops=x      - optional, specifes the internal number of times to run
;                   the tests
;    testname=xyz - optional, defines a subset of tests to run (CopyFile, 
;                   File, Read, etc.)
;*****************************************************************************
[sections]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=1
LogFile=sections.log
loops=1
;testname=Scatter



[cryptotest]
ThreadStackSize=32768

[wmabvt]
ThreadStackSize=65536

[wmareg]
ThreadStackSize=65536

;*****************************************************************************
;Module Name:
;    launcher
;
;Abstract:
;    Telnet server that allows a client to run different tests via a client.
;    Also allows for simple DOS commands (DIR, COPY, etc.) Type HELP at the
;    prompt for a complete list of commands.
;
;Notes:
;    port=x     - customizes the TCP port number (99 = default)
;    timeout=x  - closes the connection after x seconds of idle time 
;                 (600 = default)
;
;    Place an autoexec.bat file in T:\ and/or Z:\ that will be run when the
;    server starts
;*****************************************************************************
[launcher]
SleepBetweenRun=0
NumberOfThreads=1
LogFile=launcher.log
;port=99
;timeout=300


[sampledll]
SleepBetweenRun=-1                  ;Infinite
NumberOfThreads=3
SynchronizeMultipleRun=1

[badman]
SleepBetweenRun=600000              ;10 minutes
CommandLine0=xbox fileio.bms -b -t
CommandLine1=xbox thread.bms -b -t
CommandLine2=xbox syncobj.bms -b -t
;CommandLine3=xbox memmgt.bms -b -t

[idelog]
SleepBetweenRun=3600000             ;1 hour

[abuseval]
SleepBetweenRun=1800000             ;30 minutes
LogFile=guard.log

[devctl]
CommandLine0=xbox +a +j +k

[SDSTRESS]
SleepBetweenRun=3600000             ;1 hour
R=0
B=10
ZA=1
C=3
DEBUG=0
D=3
P=1
S=ATZD
T=1
WT=0

[savegame]
Files=100    ;this will make 1000 files - good for BVTs

[timetest]

[threading]
SleepBetweenRun=600000              ;10 minutes
LogFile=Thread.log

;*****************************************************************************
;Module Name:
;    fileIO
;
;Abstract:
;    Win32 file IO API tests
;
;Notes:
;    loops=x      - optional, specifes the internal number of times to run
;                   the tests
;    testname=xyz - optional, defines a subset of tests to run (CopyFile, 
;                   File, Read, etc.)
;*****************************************************************************
[fileio]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=1
LogFile=fileio.log
;loops=1
;testname=CopyFile


;*****************************************************************************
;Module Name:
;    soundtrack
;
;Abstract:
;    Soundtrack API tests
;
;Notes:
;    loops=x      - optional, specifes the internal number of times to run
;                   the tests
;    testname=xyz - optional, defines a subset of tests to run (CopyFile, 
;                   File, Read, etc.)
;*****************************************************************************
[soundtrack]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=2
LogFile=soundtrack.log
loops=1
;testname=Find


;*****************************************************************************
;Module Name:
;    Nickname
;
;Abstract:
;    XAPI Nickname Tests
;
;Notes:
;    loops=x      - optional, specifes the internal number of times to run
;                   the tests
;    testname=xyz - optional, defines a subset of tests to run (Set, 
;                   FindFirst, etc.)
;*****************************************************************************
[nickname]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=1
LogFile=nickname.log
loops=1
;testname=Set

[satest]
SleepBetweenRun=600000
NumberOfThreads=1
ThreadStackSize=65536 ;yikes. AssembleShader requires 20k!

;*****************************************************************************
;Module Name:
;   usbInput
;
;Abstract:
;    Tests the USB XID Input APIs
;
;Notes:
;    loops=x      - optional, specifes the internal number of times to run
;                   the tests
;    testname=xyz - optional, defines a subset of tests to run (XInputOpen, 
;                   Close, etc.)
;*****************************************************************************
[usbInput]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=1
LogFile=usbInput.log
;loops=1
;testname=XInputOpen


;*****************************************************************************
;Module Name:
;    mutests
;
;Abstract:
;    USB MU Tests
;
;Notes:
;    loops=x      - optional, specifes the internal number of times to run 
;                   the tests
;    testname=xyz - optional, defines a subset of tests to run (CopyFile, 
;                   Read, etc.)
;    drive=x      - optional, sets the base drive letter (F=default)
;                   if NumberOfThreads > 1 then the different threads will be 
;                   on different drives (eg drive+1, dirve+2, etc.)
;*****************************************************************************
[mutests]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=1
LogFile=mutests.log
loops=1
;testname=Scatter
;drive=F

;*****************************************************************************
;Module Name:
;    SMCStress
;
;Abstract:
;    SMC Tests
;
;Notes:
;    loops=x      - optional, specifes the internal number of times to run
;                   the tests
;    testname=xyz - optional, defines a subset of tests to run (Set,
;                   FindFirst, etc.)
;*****************************************************************************
[smcstress]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=1
LogFile=smcstress.log
loops=1
;testname=Set


;*****************************************************************************
;Module Name:
;    xnetbvt
;
;Abstract:
;    XNet BVT
;
;INI settings:
;    None
;*****************************************************************************
[xnetbvt]



;*****************************************************************************
;Module Name:
;    d3dbvt
;
;Abstract:
;    Direct3D BVT
;
;INI settings:
;    None
;*****************************************************************************
[d3dbvt]
ThreadStackSize=65536

;*****************************************************************************
;Module Name:
;    fpexcept
;
;Abstract:
;    floating point exception BVT test
;
;INI settings:
;    None
;*****************************************************************************
[fpexcept]

[event]
ThreadStackSize=65536

[fsaaperf]
ThreadStackSize=65536

[vistest]
ThreadStackSize=65536

[Servers]
HttpServer=172.26.172.13
ConfigPage=/regression/submit/sysConfig.asp
StatePage=
LogPage=/regression/submit/log.asp
WebPostFileName=t:\webpost.log


;*****************************************************************************
;Module Name:
;    DMTest1
;
;Abstract:
;    DirectMusic tests
;
;INI settings:
;    Set to run BVT tests.
;*****************************************************************************
[DMTest1]
Wait  =1
BVT   =1
Valid =0
Invalid = 0
Fatal =0
Perf  =0
LogToScreen = 0
WaitAtTestEnd     =0
SkipUserInput   = 1
GlobalPerformance =1
LocalLogLevel     =1
DoWorkFrequency   =30
SuppressMemInfo = 1

ThreadStackSize=0x10000

MaxTestOmit=30
MaxTestAdd =30

;These tests are E_NOTIMPL
TestOmit0002=ToolGraph_InsertTool_BVT
TestOmit0003=ToolGraph_StampPMsg_BVT
TestOmit0004=ToolGraph_RemoveTool_BVT
TestOmit0005=ToolGraph_GetTool_BVT


;*****************************************************************************
; This is the FTP server that will supply binaries and data files
; Usually the root of FTP server will point to \xboxbins
;*****************************************************************************
[BinServer]
Server=ftp://schanbai               ;only FTP is supported now, "ftp://" can be omitted and ftp://157.55.34.25 is okay too
UserName=anonymous
Password=schanbai                   ;it's a good idea to use your email alias here as a password
DownloadBeforeTest=1                ;update files before start testing
DownloadAfterTest=1                 ;update files after finish testing



;*****************************************************************************
; This section contains list of files needed to be updated from FTP server
;
; The format is: source=destination
;   source - Relative path name from root of the FTP server. Wildcard ('*') is okay.
;   destination - Full path name on the Xbox machine. It is DOS-style path if second character is colon (':'), 
;     otherwise it is treated as NT-style path name
;*****************************************************************************
[DownloadList]
ntoskrnl.exe=\SystemRoot\System32\                      ;copy kernel
*.sys=\SystemRoot\System32\Drivers\                     ;copy all drivers
dump\harness.xbe=\SystemRoot\System32\default.xbe       ;copy harness and rename to default.xbe
xboxtest\testini.ini=t:\                                ;copy testini.ini to title data
xboxtest\inc\*.*=t:\inc\                                ;copy badman include files to title data directory
xboxtest\scripts\*=t:\scripts\                          ;copy badman script files to title data directory
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildlab\ini\perf\testini.ini ===
;*****************************************************************************
; Global Settings - if there is no per-module setting, global setting will be used
;*****************************************************************************
[GeneralSettings]
HungDetectInterval=-1
NtGlobalFlags=0x30                  ;Default is  FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK
StressTestMode=0                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=10000               ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=-1                         ;default is enabled all levels except XLL_VARIATION_TIME
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=16384               ;default is 16K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00
DisableAutoOff=1                    ;default is 1, 0 keeps user's settings, 1 turns it off

DirectSoundDebugLevel=1             ; turn off non critical warnings from dsound

FormatAllMUs=1                      ;for formatting of all MUs
ForceMatchedKernel=1

[XNetRef]
cfgFlags=0x01                       ;bypass security



;*****************************************************************************
; List of the test modules to be loaded and executed
;*****************************************************************************
[TestList]
memperf                         ;Memory IO performance test




;*****************************************************************************
;Module Name:
;    memperf
;
;Abstract:
;    Memory IO performance test
;
;Notes:
;
;*****************************************************************************
[memperf]
NumberOfThreads=1
LogFile=memperf.log











[Servers]
HttpServer=172.26.160.46
ConfigPage=/regression/submit/sysConfig.asp
StatePage=
LogPage=/regression/submit/log.asp


;*****************************************************************************
; This is the FTP server that will supply binaries and data files
; Usually the root of FTP server will point to \xboxbins
;*****************************************************************************
[BinServer]
Server=ftp://schanbai               ;only FTP is supported now, "ftp://" can be omitted and ftp://157.55.34.25 is okay too
UserName=anonymous
Password=schanbai                   ;it's a good idea to use your email alias here as a password
DownloadBeforeTest=1                ;update files before start testing
DownloadAfterTest=1                 ;update files after finish testing



;*****************************************************************************
; This section contains list of files needed to be updated from FTP server
;
; The format is: source=destination
;   source - Relative path name from root of the FTP server. Wildcard ('*') is okay.
;   destination - Full path name on the Xbox machine. It is DOS-style path if second character is colon (':'), 
;     otherwise it is treated as NT-style path name
;*****************************************************************************
[DownloadList]
ntoskrnl.exe=\SystemRoot\System32\                      ;copy kernel
*.sys=\SystemRoot\System32\Drivers\                     ;copy all drivers
dump\harness.xbe=\SystemRoot\System32\default.xbe       ;copy harness and rename to default.xbe
xboxtest\testini.ini=t:\                                ;copy testini.ini to title data
xboxtest\inc\*.*=t:\inc\                                ;copy badman include files to title data directory
xboxtest\scripts\*=t:\scripts\                          ;copy badman script files to title data directory
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildlab\ini\bvt\dsound.ini ===
[TestList]
dsbvt                           ;dsound bvt
xmobvt                          ;xmo bvt
wmabvt                          ;wma codec bvt
dsreg                           ;dsound regression (until we have reg tests)
xmoreg                          ;xmo regression (until we have reg tests)
wmareg              	        ;the wma regression
;ds3d                            ; dsound 3d tests
DirectSoundCreate               ; direct sound create api tests
DirectSoundCreateBuffer         ; direct sound create buffer tests
DirectSoundCreateStream         ; direct sound create stream tests

[wmabvt]
ThreadStackSize=65536

[wmareg]
ThreadStackSize=65536
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildlab\ini\everything.ini ===
;
; Global Settings - if there is no per-module setting, global setting will be used
;
[GeneralSettings]
StressTestMode=1                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=1	            ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=-1                         ;default is XLL_LOGALL
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=16384               ;default is 16K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;
; List of the test modules to be loaded and executed
;
[TestList]
idelog                          ;logs info about IDE devices
abuseval                        ;Guard page test
obstress                        ;Ob stress test
SDSTRESS                        ;disk stress, manages own threads
threading                       ;threading test/stress
fileio                          ;File IO win32 APIs (XAPIs)
vmstress                        ;Virtual memory stress
devctl                          ;Random I/O test
savegame                        ;saved game APIs
timetest                        ;time APIs
dsbvt                           ;dsound bvt
xmobvt                          ; xmobvt
dsreg                           ;dsound regressions
xmoreg                          ;xmo regressions
mmtimer                         ;multimedia timer
cryptotest

[cryptotest]
ThreadStackSize=20480               ;default is 16K

[sampledll]
SleepBetweenRun=-1                  
NumberOfThreads=3
SynchronizeMultipleRun=1

[badman]
SleepBetweenRun=	            
CommandLine0=xbox fileio.bms -b -t
CommandLine1=xbox thread.bms -b -t
CommandLine2=xbox syncobj.bms -b -t
;CommandLine3=xbox memmgt.bms -b -t

[idelog]
SleepBetweenRun=0                   

[abuseval]
SleepBetweenRun=0                   
LogFile=guard.log

[devctl]
CommandLine0=xbox +a +j +k

[SDSTRESS]
SleepBetweenRun=0	            
R=1
ZA=1
C=3
DEBUG=0
D=3
P=10
S=ATZD
T=1
WT=1

[threading]
SleepBetweenRun=0
LogFile=Thread.log

[fileio]
SleepBetweenRun=0
NumberOfThreads=1
LogFile=fileio.log
;loops=1                            ;optional, specifes the internal number of times to run the tests
;testname=CopyFile                  ;optional, defines a subset of tests to run (CopyFile, File, Read, etc)

[SAVEGAME]
Files=-1      ;this will let the test create files until it runs out of disk space
Files=1000    ;this will make 1000 files - good for BVTs

[timetest]

;
; This is the server that results will be posted to (probably over a socket)
;
[ResultServer]
Server=http://xtest/test/results

;
; This is the server that log files will be copied to
;
[LogServer]
Server=\\xtest\test\logs

;
; This is the FTP server that will supply binaries and data files
; Usually the root of FTP server will point to \xboxbins
;
[BinServer]
Server=ftp://schanbai               ;only FTP is supported now, "ftp://" can be omitted and ftp://157.55.34.25 is okay too
UserName=anonymous
Password=schanbai                   ;it's a good idea to use your email alias here as a password
DownloadBeforeTest=1                ;update files before start testing
DownloadAfterTest=1                 ;update files after finish testing

;
; This section contains list of files needed to be updated from FTP server
;
; The format is: source=destination
;   source - Relative path name from root of the FTP server. Wildcard ('*') is okay.
;   destination - Full path name on the Xbox machine. It is DOS-style path if second character is colon (':'), 
;     otherwise it is treated as NT-style path name
;
[DownloadList]
ntoskrnl.exe=\SystemRoot\System32\                      ;copy kernel
*.sys=\SystemRoot\System32\Drivers\                     ;copy all drivers
dump\harness.xbe=\SystemRoot\System32\default.xbe       ;copy harness and rename to default.xbe
xboxtest\testini.ini=t:\                                ;copy testini.ini to title data
xboxtest\inc\*.*=t:\inc\                                ;copy badman include files to title data directory
xboxtest\scripts\*=t:\scripts\                          ;copy badman script files to title data directory
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildlab\ini\media\testini.ini ===
[testlist]
media

[media]
ThreadStackSize=65536
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildlab\ini\stress\testini.ini ===
;
; Global Settings - if there is no per-module setting, global setting will be used
;
[GeneralSettings]
StressTestMode=1                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=5000                ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=0                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=0                          ;default is XLL_LOGALL
LogOptions=0x00                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=16384               ;default is 16K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00
NtGlobalFlags=0xCF0
XDebugOutLevel=3                    ;For stress only, 0 will turn off spew from XTL
HungTimeout=600000                  ;10 Minutes. If not specified, default is 5 minutes
HungDetectInterval=-1
DirectSoundDebugLevel=1             ; turn off non critical warnings from dsound
DirectSoundBreakOnMemoryFail=0      ; do not break into dsound if a memory failure occurs
ForceMatchedKernel=0
FormatAllMUs=1
DisableAutoOff=1                    ;default is 1, 0 keeps user's settings, 1 turns it off


[XNetRef]
cfgFlags=0x01                       ;bypass security
cfgPrivatePoolSizeInPages=128       ;128 pages (4096 bytes each)
cfgSockMaxSockets=255               ;255 sockets (maximum)


t_nicStats=0
t_sockWarn=0
t_Arp=0
t_pktPreAuth=0
t_pktXmit=0
t_pktRecv=0
t_nicStatsAll=0
t_pktBroadcast=0
t_sock=0
t_dhcpDump=0
t_pktWarn=0
t_poolWarn=0
t_tcpRetrans=0
t_udpWarn=0
t_LeakWarn=0
t_Warning=0
t_tcpStat=0
t_ArpWarn=0
t_Verbose=0
t_secStat=0
t_Timer=0
t_poolDump=0
t_tcpWarn=0

;
; List of the test modules to be loaded and executed
;
[TestList]
stressmon                       ;Stress Monitor (pings the DB)
mmstress                        ; multimedia (dsound and xmo) stress
wmastress                      ; wma specific stress test. covered in mmstress
ds3dstrs            ; direct sound 3d stress test
dmtest1                         ;DirectMusic tests.
playcd
;fileio                          ;File IO win32 APIs (XAPIs)
nickname                        ;XSetNickname and FindNickname tests
soundtrack                      ;Soundtrack API Tests
smcstress                       ;SMC Tests
;devctl                          ;Random I/O test
;savegame                        ;saved game APIs
;timetest                       ;time APIs
;xbox11113
misorbit                        ; Simple rendering test
chessbrd                        ; Chessboard sample
clockwrk                        ; Clockwork sample
rteapot                         ; Sphere environment mapping
skulls                          ; Skulls sample
snowfall                        ; Point sprite rendering
alphabnt                        ;Alpha blending and testing
ball                            ;Vertex blending
basic                           ;Basic test
bees                            ;Old Meltdown sample
bumpduv1                        ;DX6 style bump mapping
bumpduv2                        ;Emboss bump mapping
clipping
depthbuf                        ;Z and W buffering
dlight                          ;Old point light Meltdown sample
dxtnoise                        ;DXT1 decompression noise test
;fsaa                            ;Multisampling and supersampling
fvertex1                        ;Fixed function rendering
;gammarmp                        ;Gamma ramps
getrstat                        ;Raster status
hightide                        ;UP rendering of complex models
ibuffer                         ;Index buffer tests
innrloop                        ;Rendering tests
lightball                       ;DX6-style bump mapping
lighting
litetype                        ;Fixed function lighting
lockdepth
matsrc                          ;Material source lighting test
mstage1
mstage2
;mstage4
mstage5
multilight                      ;Multilight test
mxpalskin                       ;Matrix palette skinning
obelisk
palette0
pslights
psverify
reflect0
stencil0
terrain
texform
texgen
texgenxt
;textr1
textr2
textr3
textr4
textr5
tunnel
vbbatch
vbib
vpshadr1
vshader
wireframe
address                         ;Texture addressing conformance test
alphabld                        ;Alpha blending conformance test
alphacmp                        ;Alpha compare conformance test
basicrst                        ;Basic rendering conformance test
blend                           ;Blending conformance test
bump                            ;DX6 style bump mapping conformance test
clear_test                      ;Clear conformance test
compress                        ;DXT texture compression conformance test
cubemap                         ;Cubemap conformance test
emboss                          ;Emboss mapping conformance test
fog                             ;Fog conformance test
;gradient                        ;Gradient texture conformance test
lightmap                        ;Light map conformance test
linetex                         ;Textured line conformance test
luminanc                        ;Luminance conformance test
mapping                         ;Texture mapping conformance test
mipfilter                       ;Mip filtering conformance test
overdraw                        ;Overdraw conformance test
perspective                     ;Texture perspective conformance test
pointsprite                     ;Point sprites conformance test
pointtex                        ;Textured point conformance test
pshader                         ;Pixel shader conformance test
;srt                             ;SetRenderTarget conformance test
;stateblocks                     ;State blocks conformance test
stencil                         ;Stencil conformance test
texturestage                    ;Multitexturing conformance test
tlvertexclip                    ;Vertex clipping conformance test
volume                          ;Volume texture conformance test
wbuffer                         ;W buffering conformance test
wcmp                            ;W compare conformance test
zbuffer                         ;Z buffering conformance test
zcmp                            ;Z compare conformance test
;bootanim                         ;Xbox startup animation test
;cryptotest          ;kernel net crypto apis
;idelog                          ;logs info about IDE devices
vistest             ;Visibility tests (also identifies memory corruption)
xnetstress                      ;XNet Stress
sections                          ;XE section loader tests
;SDSTRESS                        ;disk stress, manages own threads

;
; tests removed from stress by johndaly
; I added sdstress and idelog back in
;
;vmstress                        ;Virtual memory stress
;abuseval                        ;Guard page test
;threading                       ;threading test/stress
;obstress                        ;Ob stress test




;*****************************************************************************
;Module Name:
;    sections
;
;Abstract:
;    XE section loader tests
;
;Notes:
;    loops=x      - optional, specifes the internal number of times to run
;                   the tests
;    testname=xyz - optional, defines a subset of tests to run (CopyFile, 
;                   File, Read, etc.)
;*****************************************************************************
[sections]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=2
LogFile=sections.log
loops=1
;testname=Scatter



[cryptotest]
SleepBetweenRun=10000


;*****************************************************************************
;Module Name:
;    stressmon
;
;Abstract:
;    Pings the Lab DB so we know its alive
;
;Notes:
;    server=ipaddress     - customizes web server to ping
;*****************************************************************************
[stressmon]
ThreadStackSize=65536
server=172.26.172.13

[vistest
ThreadStackSize=65536

[mmstress]
ThreadStackSize=65536

[wmastress]
ThreadStackSize=65536

[sampledll]
SleepBetweenRun=-1
NumberOfThreads=3
SynchronizeMultipleRun=1

[badman]
SleepBetweenRun=
CommandLine0=xbox fileio.bms -b -t
CommandLine1=xbox thread.bms -b -t
CommandLine2=xbox syncobj.bms -b -t
;CommandLine3=xbox memmgt.bms -b -t

[idelog]
SleepBetweenRun=60000

[abuseval]
SleepBetweenRun=10000
LogFile=guard.log

[devctl]
CommandLine0=xbox +a +j +k

[SDSTRESS]
SleepBetweenRun=10000
B=128
Z1=1
Z2=1
Z4=1
C=1
DEBUG=0
D=1
P=1
S=ATUZ
T=1
WT=0

[threading]
SleepBetweenRun=0
LogFile=Thread.log

[fileio]
SleepBetweenRun=10000
NumberOfThreads=1
LogFile=fileio.log
;loops=1                            ;optional, specifes the internal number of times to run the tests
;testname=CopyFile                  ;optional, defines a subset of tests to run (CopyFile, File, Read, etc)

;*****************************************************************************
;Module Name:
;    soundtrack
;
;Abstract:
;    Soundtrack API tests
;
;Notes:
;    loops=x      - optional, specifes the internal number of times to run
;                   the tests
;    testname=xyz - optional, defines a subset of tests to run (CopyFile,
;                   File, Read, etc.)
;*****************************************************************************
[soundtrack]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=2
LogFile=soundtrack.log
loops=1
;testname=Find

;*****************************************************************************
;Module Name:
;    Nickname
;
;Abstract:
;    XAPI Nickname Tests
;
;Notes:
;    loops=x      - optional, specifes the internal number of times to run
;                   the tests
;    testname=xyz - optional, defines a subset of tests to run (Set,
;                   FindFirst, etc.)
;*****************************************************************************
[nickname]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=2
LogFile=nickname.log
loops=1
;testname=Set

;*****************************************************************************
;Module Name:
;    SMCStress
;
;Abstract:
;    SMC Tests
;
;Notes:
;    loops=x      - optional, specifes the internal number of times to run
;                   the tests
;    testname=xyz - optional, defines a subset of tests to run (Set,
;                   FindFirst, etc.)
;*****************************************************************************
[smcstress]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=1
LogFile=smcstress.log
loops=1
;testname=Set


[SAVEGAME]
SleepBetweenRun=60000              ;1 hour
Files=1000    ;this will make 1000 files - good for BVTs

[misorbit]
ThreadStackSize=65536
TimeDuration=60
Parser=1

[chessbrd]
ThreadStackSize=65536
TimeDuration=60

[clockwrk]
ThreadStackSize=65536
TimeDuration=60

[rteapot]
ThreadStackSize=65536
TimeDuration=60

[skulls]
ThreadStackSize=65536
TimeDuration=60

[snowfall]
ThreadStackSize=65536
TimeDuration=60

[address]
ThreadStackSize=65536

[alphabld]
ThreadStackSize=65536

[alphacmp]
ThreadStackSize=65536

[basicrst]
ThreadStackSize=65536

[blend]
ThreadStackSize=65536

[bump]
ThreadStackSize=65536

[clear_test]
ThreadStackSize=65536

[compress]
ThreadStackSize=65536

[cubemap]
ThreadStackSize=65536

[emboss]
ThreadStackSize=65536

[fog]
ThreadStackSize=65536

[gradient]
ThreadStackSize=65536

[lightmap]
ThreadStackSize=65536

[linetex]
ThreadStackSize=65536

[luminanc]
ThreadStackSize=65536

[mapping]
ThreadStackSize=65536

[mipfilter]
ThreadStackSize=65536

[overdraw]
ThreadStackSize=65536

[perspective]
ThreadStackSize=65536

[pointsprite]
ThreadStackSize=65536

[pointtex]
ThreadStackSize=65536

[pshader]
ThreadStackSize=65536

[srt]
ThreadStackSize=65536

[stateblocks]
ThreadStackSize=65536

[stencil]
ThreadStackSize=65536

[texturestage]
ThreadStackSize=65536

[tlvertexclip]
ThreadStackSize=65536

[volume]
ThreadStackSize=65536

[wbuffer]
ThreadStackSize=65536

[wcmp]
ThreadStackSize=65536

[zbuffer]
ThreadStackSize=65536

[zcmp]
ThreadStackSize=65536

[alphabnt]
ThreadStackSize=65536
TimeDuration=10

[ball]
ThreadStackSize=65536

[basic]
ThreadStackSize=65536
TimeDuration=10

[bees]
ThreadStackSize=65536
TimeDuration=20

[bumpduv1]
ThreadStackSize=65536
TimeDuration=30

[bumpduv2]
ThreadStackSize=65536
TimeDuration=10

[clipping]
ThreadStackSize=65536

[depthbuf]
ThreadStackSize=65536

[dlight]
ThreadStackSize=65536
TimeDuration=10

[dxtnoise]
ThreadStackSize=65536
TimeDuration=10

[fsaa]
ThreadStackSize=65536

[fvertex1]
ThreadStackSize=65536
TimeDuration=5

[gammarmp]
ThreadStackSize=65536

[getrstat]
ThreadStackSize=65536

[hightide]
ThreadStackSize=65536
TimeDuration=20

[ibuffer]
ThreadStackSize=65536

[innrloop]
ThreadStackSize=65536

[lightball]
ThreadStackSize=65536

[lighting]
ThreadStackSize=65536

[litetype]
ThreadStackSize=65536

[lockdepth]
ThreadStackSize=65536

[matsrc]
ThreadStackSize=65536

[mstage1]
ThreadStackSize=65536
TimeDuration=10

[mstage2]
ThreadStackSize=65536
TimeDuration=10

[mstage4]
ThreadStackSize=65536
TimeDuration=10

[mstage5]
ThreadStackSize=65536
TimeDuration=10

[multilight]
ThreadStackSize=65536

[mxpalskin]
ThreadStackSize=65536

[obelisk]
ThreadStackSize=65536
TimeDuration=30

[palette0]
ThreadStackSize=65536
TimeDuration=20

[pslights]
ThreadStackSize=65536
TimeDuration=240

[psverify]
ThreadStackSize=65536
FrameDuration=200

[reflect0]
ThreadStackSize=65536

[stencil0]
ThreadStackSize=65536
TimeDuration=10

[terrain]
ThreadStackSize=65536
TimeDuration=20

[texform]
ThreadStackSize=65536

[texgen]
ThreadStackSize=65536

[texgenxt]
ThreadStackSize=65536
TimeDuration=10

[textr1]
ThreadStackSize=65536
TimeDuration=2

[textr2]
ThreadStackSize=65536
TimeDuration=2

[textr3]
ThreadStackSize=65536
TimeDuration=2

[textr4]
ThreadStackSize=65536

[textr5]
ThreadStackSize=65536
TimeDuration=2

[tunnel]
ThreadStackSize=65536
TimeDuration=10

[vbbatch]
ThreadStackSize=65536

[vbib]
ThreadStackSize=65536

[vpshadr1]
ThreadStackSize=65536
TimeDuration=5

[vshader]
ThreadStackSize=65536

[wireframe]
ThreadStackSize=65536

[timetest]

[xnetstress]
NetsyncRemote=157.56.13.41



;
; This is the server that results will be posted to (probably over a socket)
;
[ResultServer]
Server=http://xtest/test/results

;
; This is the server that log files will be copied to
;
[LogServer]
Server=\\xtest\test\logs

;
; This is the FTP server that will supply binaries and data files
; Usually the root of FTP server will point to \xboxbins
;
[BinServer]
Server=ftp://schanbai               ;only FTP is supported now, "ftp://" can be omitted and ftp://157.55.34.25 is okay too
UserName=anonymous
Password=schanbai                   ;it's a good idea to use your email alias here as a password
DownloadBeforeTest=1                ;update files before start testing
DownloadAfterTest=1                 ;update files after finish testing

;
; This section contains list of files needed to be updated from FTP server
;
; The format is: source=destination
;   source - Relative path name from root of the FTP server. Wildcard ('*') is okay.
;   destination - Full path name on the Xbox machine. It is DOS-style path if second character is colon (':'),
;     otherwise it is treated as NT-style path name
;
[DownloadList]
ntoskrnl.exe=\SystemRoot\System32\                      ;copy kernel
*.sys=\SystemRoot\System32\Drivers\                     ;copy all drivers
dump\harness.xbe=\SystemRoot\System32\default.xbe       ;copy harness and rename to default.xbe
xboxtest\testini.ini=t:\                                ;copy testini.ini to title data
xboxtest\inc\*.*=t:\inc\                                ;copy badman include files to title data directory
xboxtest\scripts\*=t:\scripts\                          ;copy badman script files to title data directory

[dppeerstress]




;*****************************************************************************
;Module Name:
;    DMTEST1
;
;Abstract:
;    DirectMusic tests with parameters set to "stress" mode.
;
;INI settings:
;    None
;*****************************************************************************
[DMTest1]
Wait  =1
BVT   =1
Valid =0
Invalid = 0
Fatal =0
Perf  =0
Stress=1
WaitAtTestEnd     =0
GlobalPerformance =1
LogLevel          =0
LogToScreen       =0
SuppressMemInfo   =1
DMHeap = FixedUser
DMFixedHeapSizeNorm = 12000000
DMFixedHeapSizePhys =   500000

ThreadStackSize=0x10000

;Note: This is just the same as the BVTs currently.
MaxTestOmit=30
;These tests are E_NOTIMPL
TestOmit0002=ToolGraph_InsertTool_BVT
TestOmit0003=ToolGraph_StampPMsg_BVT
TestOmit0004=ToolGraph_RemoveTool_BVT
TestOmit0005=ToolGraph_GetTool_BVT
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildlab\ini\stress\var1\testini.ini ===
;
; Global Settings - if there is no per-module setting, global setting will be used
;
[GeneralSettings]
StressTestMode=1                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=1	            ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=0                          ;default is XLL_LOGALL
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=16384               ;default is 16K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;
; List of the test modules to be loaded and executed
;
[TestList]
idelog                          ;logs info about IDE devices
abuseval                        ;Guard page test
obstress                        ;Ob stress test
SDSTRESS                        ;disk stress, manages own threads
threading                       ;threading test/stress
fileio                          ;File IO win32 APIs (XAPIs)
vmstress                        ;Virtual memory stress
devctl                          ;Random I/O test

[sampledll]
SleepBetweenRun=-1                  
NumberOfThreads=3
SynchronizeMultipleRun=1

[badman]
SleepBetweenRun=	            
CommandLine0=xbox fileio.bms -b -t
CommandLine1=xbox thread.bms -b -t
CommandLine2=xbox syncobj.bms -b -t
;CommandLine3=xbox memmgt.bms -b -t

[idelog]
SleepBetweenRun=0                   

[abuseval]
SleepBetweenRun=0                   
LogFile=guard.log

[devctl]
CommandLine0=xbox +a +j +k

[SDSTRESS]
SleepBetweenRun=0	            
R=1
ZA=1
C=3
DEBUG=0
D=3
P=10
S=TZD
T=1
WT=1

[threading]
SleepBetweenRun=0
LogFile=Thread.log

[fileio]
SleepBetweenRun=0
NumberOfThreads=1
LogFile=fileio.log
;loops=1                            ;optional, specifes the internal number of times to run the tests
;testname=CopyFile                  ;optional, defines a subset of tests to run (CopyFile, File, Read, etc)

;
; This is the server that results will be posted to (probably over a socket)
;
[ResultServer]
Server=http://xtest/test/results

;
; This is the server that log files will be copied to
;
[LogServer]
Server=\\xtest\test\logs

;
; This is the FTP server that will supply binaries and data files
; Usually the root of FTP server will point to \xboxbins
;
[BinServer]
Server=ftp://schanbai               ;only FTP is supported now, "ftp://" can be omitted and ftp://157.55.34.25 is okay too
UserName=anonymous
Password=schanbai                   ;it's a good idea to use your email alias here as a password
DownloadBeforeTest=1                ;update files before start testing
DownloadAfterTest=1                 ;update files after finish testing

;
; This section contains list of files needed to be updated from FTP server
;
; The format is: source=destination
;   source - Relative path name from root of the FTP server. Wildcard ('*') is okay.
;   destination - Full path name on the Xbox machine. It is DOS-style path if second character is colon (':'), 
;     otherwise it is treated as NT-style path name
;
[DownloadList]
ntoskrnl.exe=\SystemRoot\System32\                      ;copy kernel
*.sys=\SystemRoot\System32\Drivers\                     ;copy all drivers
dump\harness.xbe=\SystemRoot\System32\default.xbe       ;copy harness and rename to default.xbe
xboxtest\testini.ini=t:\                                ;copy testini.ini to title data
xboxtest\inc\*.*=t:\inc\                                ;copy badman include files to title data directory
xboxtest\scripts\*=t:\scripts\                          ;copy badman script files to title data directory
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildlab\ini\WFVO\testini.ini ===
[testlist]
WFVO

[WFVO]
ThreadStackSize=65536
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildxbe\harness\media\checksum.log ===
   $pTꊵFrpdeVe|Q	5ZA]]|0YU*r/uQuH?Y&;֏?b"`x*+rqM_pAHf*qīQ'UB;" 
Zm[-V[1/\Aj!u& Cd+[AxZ*UC;h յ;G6yo.tϣˏj֐|@^Cb98%qH}펝;1tZ
І u 9
ݩ
*G(1KY9ߒ7ވ95_(X\]S;}"ޜg߆/ۣNjj_9iEc&.sijTKe뜛mX3A{dWdWxP\~nqcJ5uY
5N-L_moh.5>ى<0R/f1HpR!L_pfV8E0SBii/ $澼y!-v/b@Q&BSg ["Z<{'bʢσ	=>݅
'=emm4lKvî+)ehw
zJBMGɈ`&/okjTr
·=+JWVD]#Kjccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildlab\ini\stress\var2\testini.ini ===
;
; Global Settings - if there is no per-module setting, global setting will be used
;
[GeneralSettings]
StressTestMode=1                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=1	            ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=-1                         ;default is XLL_LOGALL
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=16384               ;default is 16K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;
; List of the test modules to be loaded and executed
;
[TestList]
idelog                          ;logs info about IDE devices
abuseval                        ;Guard page test
obstress                        ;Ob stress test
SDSTRESS                        ;disk stress, manages own threads
threading                       ;threading test/stress
fileio                          ;File IO win32 APIs (XAPIs)
vmstress                        ;Virtual memory stress
devctl                          ;Random I/O test

[sampledll]
SleepBetweenRun=-1                  
NumberOfThreads=3
SynchronizeMultipleRun=1

[badman]
SleepBetweenRun=	            
CommandLine0=xbox fileio.bms -b -t
CommandLine1=xbox thread.bms -b -t
CommandLine2=xbox syncobj.bms -b -t
;CommandLine3=xbox memmgt.bms -b -t

[idelog]
SleepBetweenRun=0                   

[abuseval]
SleepBetweenRun=0                   
LogFile=guard.log

[devctl]
CommandLine0=xbox +a +j +k

[SDSTRESS]
SleepBetweenRun=0	            
R=5
ZA=5
C=6
DEBUG=0
D=5
P=20
S=TZD
T=4
WT=3

[threading]
SleepBetweenRun=0
LogFile=Thread.log

[fileio]
SleepBetweenRun=0
NumberOfThreads=1
LogFile=fileio.log
loops=2                            ;optional, specifes the internal number of times to run the tests
;testname=CopyFile                  ;optional, defines a subset of tests to run (CopyFile, File, Read, etc)

;
; This is the server that results will be posted to (probably over a socket)
;
[ResultServer]
Server=http://xtest/test/results

;
; This is the server that log files will be copied to
;
[LogServer]
Server=\\xtest\test\logs

;
; This is the FTP server that will supply binaries and data files
; Usually the root of FTP server will point to \xboxbins
;
[BinServer]
Server=ftp://schanbai               ;only FTP is supported now, "ftp://" can be omitted and ftp://157.55.34.25 is okay too
UserName=anonymous
Password=schanbai                   ;it's a good idea to use your email alias here as a password
DownloadBeforeTest=1                ;update files before start testing
DownloadAfterTest=1                 ;update files after finish testing

;
; This section contains list of files needed to be updated from FTP server
;
; The format is: source=destination
;   source - Relative path name from root of the FTP server. Wildcard ('*') is okay.
;   destination - Full path name on the Xbox machine. It is DOS-style path if second character is colon (':'), 
;     otherwise it is treated as NT-style path name
;
[DownloadList]
ntoskrnl.exe=\SystemRoot\System32\                      ;copy kernel
*.sys=\SystemRoot\System32\Drivers\                     ;copy all drivers
dump\harness.xbe=\SystemRoot\System32\default.xbe       ;copy harness and rename to default.xbe
xboxtest\testini.ini=t:\                                ;copy testini.ini to title data
xboxtest\inc\*.*=t:\inc\                                ;copy badman include files to title data directory
xboxtest\scripts\*=t:\scripts\                          ;copy badman script files to title data directory
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildlab\ini\stress\var3\testini.ini ===
;
; Global Settings - if there is no per-module setting, global setting will be used
;
[GeneralSettings]
StressTestMode=1                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=1	            ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=0                          ;default is XLL_LOGALL
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=16384               ;default is 16K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;
; List of the test modules to be loaded and executed
;
[TestList]
idelog                          ;logs info about IDE devices
abuseval                        ;Guard page test
obstress                        ;Ob stress test
SDSTRESS                        ;disk stress, manages own threads
threading                       ;threading test/stress
fileio                          ;File IO win32 APIs (XAPIs)
vmstress                        ;Virtual memory stress
devctl                          ;Random I/O test

[sampledll]
SleepBetweenRun=-1                  
NumberOfThreads=3
SynchronizeMultipleRun=1

[badman]
SleepBetweenRun=	            
CommandLine0=xbox fileio.bms -b -t
CommandLine1=xbox thread.bms -b -t
CommandLine2=xbox syncobj.bms -b -t
;CommandLine3=xbox memmgt.bms -b -t

[idelog]
SleepBetweenRun=0                   

[abuseval]
SleepBetweenRun=0                   
LogFile=guard.log

[devctl]
CommandLine0=xbox +a +j +k

[SDSTRESS]
SleepBetweenRun=0	            
R=1
ZA=1
C=3
DEBUG=0
D=3
P=10
S=TZD
T=1
WT=1

[threading]
SleepBetweenRun=0
LogFile=Thread.log

[fileio]
SleepBetweenRun=0
NumberOfThreads=2
LogFile=fileio.log
loops=2                             ;optional, specifes the internal number of times to run the tests
;testname=read                      ;optional, defines a subset of tests to run (CopyFile, File, Read, etc)

;
; This is the server that results will be posted to (probably over a socket)
;
[ResultServer]
Server=http://xtest/test/results

;
; This is the server that log files will be copied to
;
[LogServer]
Server=\\xtest\test\logs

;
; This is the FTP server that will supply binaries and data files
; Usually the root of FTP server will point to \xboxbins
;
[BinServer]
Server=ftp://schanbai               ;only FTP is supported now, "ftp://" can be omitted and ftp://157.55.34.25 is okay too
UserName=anonymous
Password=schanbai                   ;it's a good idea to use your email alias here as a password
DownloadBeforeTest=1                ;update files before start testing
DownloadAfterTest=1                 ;update files after finish testing

;
; This section contains list of files needed to be updated from FTP server
;
; The format is: source=destination
;   source - Relative path name from root of the FTP server. Wildcard ('*') is okay.
;   destination - Full path name on the Xbox machine. It is DOS-style path if second character is colon (':'), 
;     otherwise it is treated as NT-style path name
;
[DownloadList]
ntoskrnl.exe=\SystemRoot\System32\                      ;copy kernel
*.sys=\SystemRoot\System32\Drivers\                     ;copy all drivers
dump\harness.xbe=\SystemRoot\System32\default.xbe       ;copy harness and rename to default.xbe
xboxtest\testini.ini=t:\                                ;copy testini.ini to title data
xboxtest\inc\*.*=t:\inc\                                ;copy badman include files to title data directory
xboxtest\scripts\*=t:\scripts\                          ;copy badman script files to title data directory
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildxbe\hwharness\placefil.txt ===
xlogconio.lib		xboxtest\testlib
xlogconio.h		xboxtest\testinc
dsoundtest.lib		xboxtest\testlib
dxconio.lib		xboxtest\testlib
GhProf.lib		xboxtest\testlib
harnesslib.lib		xboxtest\testlib
launcher.lib		xboxtest\testlib
netsync.lib		xboxtest\testlib
xlog.lib		xboxtest\testlib
xtestlib.lib		xboxtest\testlib
xnetref.lib		xboxtest\testlib
xnetrefd.lib		xboxtest\testlib
testini.ini		xboxtest\hwtestini
emc.ini			xboxtest\hwtestini
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildxbe\hwtest\readme.txt ===
How to run the hardware test harness:

1. Make sure you have launcher listed under section [TestList] in TESTINI.INI
2. Copy TESTINI.INI to C:\TDATA\103be6d2 on test machine
3. Copy HWTEST.XBE to C:\XBOXOS\SYSTEM32\DEFAULT.XBE
4. Reboot Xbox machine and establish telnet session from Windows 2000 machine
5. Under telnet window, type "help" to display help message or type "run" to run test, for example "run memtest" will run memory read/write test
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildxbe\hwharness\emc.ini ===
;
; Global Settings - if there is no per-module setting, global setting will be used
;
[GeneralSettings]
NtGlobalFlags=0x30                  ;Default is  FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK
StressTestMode=1                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=0                   ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=1                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=0                          ;default is XLL_LOGALL
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=65536               ;default is 16K
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
DontInitDevices=0	 				;default is 0, set to 1 to prevent the harness from calling XInitDevices()
DontMountMUs=1  					;default is 0, set to 1 to prevent mounting MUs
XDebugOutLevel=0                    ;For stress only, 0 will turn off spew from XTL
HungTimeout=600000                  ;10 Minutes. If not specified, default is 5 minutes
HungDetectInterval=-1
DirectSoundDebugLevel=1             ; turn off non critical warnings from dsound
 
[XNetRef]
cfgFlags=0x01                       ;bypass security

;
; List of the test modules to be loaded and executed
;
[TestList]
;launcher			; Telnet (Title IP Port 99) to harness command line interface
;clockwrk			; Clockwork graphics sample
DolphinClassic
;misorbit			; Misorbit graphics sample
;chessbrd			; Chessboard graphics sample
hawk				; Loopback of all attached hawks
rumble				; Cycle all attached rumble motors
mu					; Read/Write all attached MUs
sdstress			; Storage device(s) stress test
mmstress			; multimedia (dsound and xmo) stress
;cpuid				; Log CPU info
mempat				; Read/Write memory patterns
;memsize			; Log memory size
;memtest			; Address and data test, walk 0 and 1
;memval				; Read/Write specified value to specified address
;msr
;netdata			; Read/Write network using xbnettest
;idelog
;memperf
;speedtest
;hdperf_sw
;dvdauth
;dvdecc
;dvdperf
;dvdservopage
;disktest


;
;Module Name:
;    launcher
;
;Abstract:
;    Telnet server that allows a client to run different tests via a client.
;    Also allows for simple DOS commands (DIR, COPY, etc.)
;
;INI settings:
;    port=x     - customizes the TCP port number (99 = default)
;    timeout=x  - closes the connection after x seconds of idle time 
;                 (300 = default)
;Notes:
;    Place an autoexec.bat file in T:\ and/or Z:\ that will be run when the
;    server starts
;
[launcher]
SleepBetweenRun=0
NumberOfThreads=1
LogFile=launcher.log
;port=99
;timeout=300


[mempat]
Width128=1				; Read/Write 128 bit data patterns (default=1)
Width64=1				; Read/Write 64 bit data patterns (default=1)
Width32=1				; Read/Write 32 bit data patterns (default=1)
Width16=1				; Read/Write 16 bit data patterns (default=1)
Width8=1				; Read/Write 8 bit data patterns (default=1)
TestIterations=1		; Number of iterations, -1=run forever (default=1)
PercentAvail=40			; Percentage of available memory to test (default=80)
UseWriteCombine=1		; Allocate memory as write combine (default=0=NoCache)


[memtest]
DataTest=1				; Write/Read 0x00, 0x55, 0xaa, 0xff to all locations
AddressTest=1			; Repeat write 0x00 - 0xff to all locations, then verify
WalkOnes=1				; Walk a 1 across all locations
WalkZeros=1				; Walk a 0 across all locations
TestIterations=1		; Number of iterations, -1=run forever (default=1)
PercentAvail=80			; Percentage of available memory to test (default=80)
UseWriteCombine=1		; Allocate memory as write combine (default=0=NoCache)


[memval]
;Address=				; Physical address to R/W (default=MAXULONG_PTR)	
AVal0=0xffffffff		; Least Significant 32 bits of value A to R/W
AVal1=0x00000000
AVal2=0xffffffff
AVal3=0x00000000		; Most Significant 32 bits of value A to R/W
ARO=1					; {0|1} Do read value A from address   (default=1) 
AWO=1					; {0|1} Do write value A to address (default=1)
BVal0=0x55555555		; Least Significant 32 bits of B value to R/W
BVal1=0xaaaaaaaa
BVal2=0x55555555
BVal3=0xaaaaaaaa		; Most Significant 32 bits of B value to R/W
BRO=1					; {0|1} Do read value B from address   (default=1) 
BWO=1					; {0|1} Do write value B to address (default=1)
						; Set both RO and WO to do R/W
TestIterations=1		; Number of iterations, -1=run forever (default=1)
UseWriteCombine=1		; Allocate memory as write combine (default=0=NoCache)


[msr]
MsrNumber=42			;Address of MSR
MsrWrite=0				;0=Read Address, 1=Write Address
MsrWriteValLow=0		;Low byte of value to write to address
MsrWriteValHigh=0		;High byte of value to write to address
MsrRangeLow=32			;Low bit of bit range to output
MsrRangeHigh=63			;High bit of bit range to output
MsrBool=1				;Boolean output


[sdstress]
SleepBetweenRun=0
DEBUG=1		; DEBUG={0|1} - Breaks into debugger when error occurs
B=32		; B=n - Specifies block size (multiples of 512, maximum 128K)
R=0			; R={0|1} - Randomize block size
C=1			; C=n - Specify the CD thread multiplier
D=1			; D=n - Specify the Disk thread multiplier
P=1			; P=n - Specify the number of passes (per thread)
S=AT
			; S=l - Selects the specified drive for stress
T=2			; T=n - Test file size (in megabytes)
WT=1		; WT={0|1} - Perform I/O operations using cache write through
Z1=1		; Z1={0|1} - Perform first test scenario (CopyTestFile)
Z2=1		; Z2={0|1} - Perform second test scenario (CopyTestFileUsingIoC)
Z3=1		; Z3={0|1} - Perform third test scenario (CopyTestFileMultiple)
Z4=1		; Z4={0|1} - Perform fourth test scenario (CopyTestFileUsingWriteFileEx)
ZA=1		; ZA={0|1} - Perform ALL test scenarios


[mu]
RO=1				; {0|1} Do read only testing of MU (default=1)
WO=1				; {0|1} Do write only testing of MU (default=1)
					; If both RO and WO set then do read and write testing of MU
FileSize=512000		; Size of file to R/W mu (must be integer multiples of sector size)
Value=0x00			; Value to R/W mu
RandomValue=0		; {0|1} R/W random value to mu
RWOnlyOne=1			; {0|1} R/W only the first MU found


[misorbit]
ThreadStackSize=65536
TimeDuration=60
Parser=1


[mmstress]
ThreadStackSize=65536


[chessbrd]
ThreadStackSize=65536
TimeDuration=60


[clockwrk]
ThreadStackSize=65536
TimeDuration=900
TestEMC=1		; Changes scene to vertical black and white stripes, worst case for EMC


[dvdauth]
							; For First Challenge/Response
FirstCDFValidFlag=1			; CDFValid value to use for MODE_SELECT (default=1)
FirstAuthenticationFlag=0	; Authentication value to use for MODE_SELECT (default=0)
FirstPartitionFlag=0		; Partition value to use for MODE_SELECT (default=0)

							; For Next Challenge/Response(s)
OtherCDFValidFlag=1			; CDFValid value to use for MODE_SELECT (default=1)
OtherAuthenticationFlag=1	; Authentication value to use for MODE_SELECT (default=0)
OtherPartitionFlag=0		; Partition value to use for MODE_SELECT (default=0)

							; For Final Challenge/Response
LastCDFValidFlag=1			; CDFValid value to use for MODE_SELECT (default=1)
LastAuthenticationFlag=1	; Authentication value to use for MODE_SELECT (default=1)
LastPartitionFlag=1			; Partition value to use for MODE_SELECT (default=1)


[dvdperf]
DoAuth=1				; Do X2 Authentication IOCTL
RestartReps=5				; Number of Reps for Idle and Standby Times
ThirdStartLBA=0				; 1/3 Stroke Access Time Starting LBA
ThirdEndLBA=834760			; 1/3 Stroke Access Time Ending LBA
ThirdReps=200				; 1/3 Stroke Access Time Number of Seeks
FullStartLBA=0				; Full Stroke Access Time Starting LBA
FullEndLBA=1669520			; Full Stroke Access Time Ending LBA
FullReps=200				; Full Stroke Access Time Number of Seeks
StreamStartLBA=405121			; Sustained Data Rate Starting LBA
StreamEndLBA=517754			; Sustained Data Rate Ending LBA


[netdata]
NumMsg=500				; Number of messages to exchange with xbnettest, -1=run forever (default=1)


[hdsit]
Cylinder=19385 		; Cylinder NUmber of Test Location (default=DiskGeometry.Cylinders.QuadPart)
Head=15 			; Head NUmber of Test Location (default=DiskGeometry.TracksPerCylinder)
Sector=62 			; SectorNUmber of Test Location (default=DiskGeometry.SectorsPerTrack)
SectorsToRead=1 	; Number of Sectors to Read at Test Location (default=1)
;PatternFile=t:\pattern.txt	; Name of file that contains the test pattern
ReadOnly=1		; 1 = Read the location
WriteOnly=0		; 1 = Write the location
				; Use these two parameters to configure for read only, write only, or both
				; ReadOnly WriteOnly
				;    0			  1		       Only write the pattern to the location
				; 1 0 Write the pattern once and then only read 							;    1 1 Alternatly write and read the location
	 ; 0 0 Write the pattern once then do nothing
PatternByte0=0x00	; 8 pattern bytes, used to fill the SectorsToRead*512 byte pattern buffer
					; use 0x for hex or just integers 
PatternByte1=0x55
PatternByte2=0x00
PatternByte3=0xaa
PatternByte4=0x00
PatternByte5=0xee
PatternByte6=0x00
PatternByte7=0xff


[hdrw]
FileSize=8		; Size of file, in MB, to read/write (default=8)
ReadOnly=1		; 1 = Only Read the first and last sector
WriteOnly=1		; 1 = Only Write the first and last sector
				; Use these two parameters to configure for read only, write only, or both
				; ReadOnly WriteOnly
				;    0			  1            Only Write the first and last sector
				; 1 0 Only Read the first and last sector
				;    1 1 Alternatly read and write and read the first and last sector
; 0 0 Do nothing
TimeDuration=300	; Seconds to run test tool, 0 = For Ever (default=0)


[hdperf]
;StartUpReps=1			; Number of reps for average Startup time (default = 10)
;TrackToTrackStartLBA=585	; Starting LBA of average track-to-track access time (default = 585)
;TrackToTrackEndLBA=586		; EndingLBA of average track-to-track access time (default = 586)
;TrackToTrackReps=200		; Number of reps for average track-to-track access time (default = 200)
;FullStartLBA=	 		; Starting LBA of average full stroke access time (default = 0)
;FullEndLBA=			; Ending LBA of average full stroke access time (default = MaxLBA)
;FullReps=200			; Number of reps for average full stroke access time (default = 200)
StreamStartLBA=0 		; Starting LBA of raw read data transfer rate (default = 0)
StreamEndLBA=2048		; Ending LBA of raw read data transfer rate (default = 204800 = 100MB)
FileReadWriteTest=0		; Do Sequenial file read/write (default=1)
RawReadTest=0			; Do Raw read test (default=1)
SmallFileCreationTest=0		; Do Small file creation test (default=1)
RandomRawDiskRead=0		; Do random raw reads test (default=1)
DiskCacheTest=0			; Do Disk cache test (default=1)


[hdperf_ll]
;StartUpReps=10		; Number of reps for average Startup time (default = 10)
;TrackToTrackLBA=	; Starting LBA of average track-to-track access time (default = MaxLBA/2)
;TrackToTrackReps=200	; Number of reps for average track-to-track access time (default = 200)
;FullStartLBA= 		; Starting LBA of average full stroke access time (default = 0)
;FullEndLBA=		; Ending LBA of average full stroke access time (default = MaxLBA)
;FullReps=200		; Number of reps for average full stroke access time (default = 200)
;StreamStartLBA= 	; Starting LBA of raw read data transfer rate (default = 0)
;StreamEndLBA=		; Ending LBA of raw read data transfer rate (default = 204800 = 100MB)


[hdperf_sw]
FileReadWriteTest=1		; Do Sequenial file read/write (default=1)
RawReadTest=1			; Do Raw read test (default=1)
SmallFileCreationTest=1	; Do Small file creation test (default=1)
RandomRawDiskRead=1		; Do random raw reads test (default=1)
DiskCacheTest=1			; Do Disk cache test (default=1)


[peerclient]
LogMinutes=1		; Logging interval for peer-to-peer testing (default=1)


[dvdecc]
FileName=A:\*
				; Name of file to read, may use wild cards
StartLBA=0		; Starting LBA number for read range
EndLBA=0		; Ending LBA number for read range (set to 0 for no LBA range reading)
LogPerRead=0	; 1=Log ECC for read, 0=per file(or ECC range)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\buildxbe\hwharness\testini.ini ===
;
; Global Settings - if there is no per-module setting, global setting will be used
;
[GeneralSettings]
NtGlobalFlags=0x30                  ;Default is  FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK
StressTestMode=0                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=0                   ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=0x1FF                      ;default is XLL_LOGALL
LogOptions=0x8						 ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=65536               ;default is 16K
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
DontInitDevices=0	 				;default is 0, set to 1 to prevent the harness from calling XInitDevices()
DontMountMUs=1  					;default is 0, set to 1 to prevent mounting MUs
XDebugOutLevel=0                    ;For stress only, 0 will turn off spew from XTL
HungTimeout=600000                  ;10 Minutes. If not specified, default is 5 minutes
HungDetectInterval=-1
DirectSoundDebugLevel=1             ; turn off non critical warnings from dsound
 
[XNetRef]
cfgFlags=0x01                       ;bypass security

;
; List of the test modules to be loaded and executed
;
[TestList]
launcher			; Telnet (Title IP Port 99) to harness command line interface
clockwrk			; Clockwork graphics sample
DolphinClassic			; Dolphin Classic graphics sample
misorbit			; Misorbit graphics sample
chessbrd			; Chessboard graphics sample
hawk				; Loopback of all attached hawks
rumble				; Cycle all attached rumble motors
mu				; Read/Write all attached MUs
sdstress			; Storage device(s) stress test
mmstress			; multimedia (dsound and xmo) stress
cpuid				; Log CPU info
mempat				; Read/Write memory patterns
memsize				; Log memory size
memtest				; Address and data test, walk 0 and 1
memval				; Read/Write specified value to specified address
msr
netdata			; Read/Write network using xbnettest
idelog
memperf
speedtest
hdperf_sw
dvdauth
dvdecc
dvdperf
dvdservopage

;
;Module Name:
;    launcher
;
;Abstract:
;    Telnet server that allows a client to run different tests via a client.
;    Also allows for simple DOS commands (DIR, COPY, etc.)
;
;INI settings:
;    port=x     - customizes the TCP port number (99 = default)
;    timeout=x  - closes the connection after x seconds of idle time 
;                 (300 = default)
;Notes:
;    Place an autoexec.bat file in T:\ and/or Z:\ that will be run when the
;    server starts
;
[launcher]
SleepBetweenRun=0
NumberOfThreads=1
LogFile=launcher.log
;port=99
;timeout=300


[mempat]
Width128=1				; Read/Write 128 bit data patterns (default=1)
Width64=1				; Read/Write 64 bit data patterns (default=1)
Width32=1				; Read/Write 32 bit data patterns (default=1)
Width16=1				; Read/Write 16 bit data patterns (default=1)
Width8=1				; Read/Write 8 bit data patterns (default=1)
TestIterations=1		; Number of iterations, -1=run forever (default=1)
PercentAvail=10			; Percentage of available memory to test (default=80)
UseWriteCombine=1		; Allocate memory as write combine (default=0=NoCache)


[memtest]
DataTest=1				; Write/Read 0x00, 0x55, 0xaa, 0xff to all locations
AddressTest=1			; Repeat write 0x00 - 0xff to all locations, then verify
WalkOnes=1				; Walk a 1 across all locations
WalkZeros=1				; Walk a 0 across all locations
TestIterations=1		; Number of iterations, -1=run forever (default=1)
PercentAvail=80			; Percentage of available memory to test (default=80)
UseWriteCombine=1		; Allocate memory as write combine (default=0=NoCache)


[memval]
;Address=				; Physical address to R/W (default=MAXULONG_PTR)	
AVal0=0xffffffff		; Least Significant 32 bits of value A to R/W
AVal1=0x00000000
AVal2=0xffffffff
AVal3=0x00000000		; Most Significant 32 bits of value A to R/W
ARO=1					; {0|1} Do read value A from address   (default=1) 
AWO=1					; {0|1} Do write value A to address (default=1)
BVal0=0x55555555		; Least Significant 32 bits of B value to R/W
BVal1=0xaaaaaaaa
BVal2=0x55555555
BVal3=0xaaaaaaaa		; Most Significant 32 bits of B value to R/W
BRO=1					; {0|1} Do read value B from address   (default=1) 
BWO=1					; {0|1} Do write value B to address (default=1)
						; Set both RO and WO to do R/W
TestIterations=1		; Number of iterations, -1=run forever (default=1)
UseWriteCombine=1		; Allocate memory as write combine (default=0=NoCache)


[msr]
MsrNumber=42			;Address of MSR
MsrWrite=0				;0=Read Address, 1=Write Address
MsrWriteValLow=0		;Low byte of value to write to address
MsrWriteValHigh=0		;High byte of value to write to address
MsrRangeLow=32			;Low bit of bit range to output
MsrRangeHigh=63			;High bit of bit range to output
MsrBool=1				;Boolean output


[sdstress]
SleepBetweenRun=0
DEBUG=0		; DEBUG={0|1} - Breaks into debugger when error occurs
B=32		; B=n - Specifies block size (multiples of 512, maximum 128K)
R=1			; R={0|1} - Randomize block size
C=1			; C=n - Specify the CD thread multiplier
D=1			; D=n - Specify the Disk thread multiplier
P=1			; P=n - Specify the number of passes (per thread)
S=AT
			; S=l - Selects the specified drive for stress
T=2			; T=n - Test file size (in megabytes)
WT=1		; WT={0|1} - Perform I/O operations using cache write through
Z1=1		; Z1={0|1} - Perform first test scenario (CopyTestFile)
Z2=0		; Z2={0|1} - Perform second test scenario (CopyTestFileUsingIoC)
Z3=0		; Z3={0|1} - Perform third test scenario (CopyTestFileMultiple)
Z4=0		; Z4={0|1} - Perform fourth test scenario (CopyTestFileUsingWriteFileEx)
ZA=0		; ZA={0|1} - Perform ALL test scenarios


[mu]
RO=1				; {0|1} Do read only testing of MU (default=1)
WO=1				; {0|1} Do write only testing of MU (default=1)
					; If both RO and WO set then do read and write testing of MU
FileSize=512000		; Size of file to R/W mu (must be integer multiples of sector size)
Value=0x00			; Value to R/W mu
RandomValue=0		; {0|1} R/W random value to mu
RWOnlyOne=1			; {0|1} R/W only the first MU found


[misorbit]
ThreadStackSize=65536
TimeDuration=60
Parser=1


[mmstress]
ThreadStackSize=65536


[chessbrd]
ThreadStackSize=65536
TimeDuration=60


[clockwrk]
ThreadStackSize=65536
TimeDuration=900
TestEMC=1		; Changes scene to vertical black and white stripes, worst case for EMC


[dvdauth]
							; For First Challenge/Response
FirstCDFValidFlag=1			; CDFValid value to use for MODE_SELECT (default=1)
FirstAuthenticationFlag=0	; Authentication value to use for MODE_SELECT (default=0)
FirstPartitionFlag=0		; Partition value to use for MODE_SELECT (default=0)

							; For Next Challenge/Response(s)
OtherCDFValidFlag=1			; CDFValid value to use for MODE_SELECT (default=1)
OtherAuthenticationFlag=1	; Authentication value to use for MODE_SELECT (default=0)
OtherPartitionFlag=0		; Partition value to use for MODE_SELECT (default=0)

							; For Final Challenge/Response
LastCDFValidFlag=1			; CDFValid value to use for MODE_SELECT (default=1)
LastAuthenticationFlag=1	; Authentication value to use for MODE_SELECT (default=1)
LastPartitionFlag=1			; Partition value to use for MODE_SELECT (default=1)


[dvdperf]
DoAuth=0				; Do X2 Authentication IOCTL
RestartReps=5				; Number of Repsfor Idle and Standby Times
ThirdStartLBA=0				; 1/3 Stroke Access Time Starting LBA
ThirdEndLBA=834760			; 1/3 Stroke Access Time Ending LBA
ThirdReps=200				; 1/3 Stroke Access Time Number of Seeks
FullStartLBA=0				; Full Stroke Access Time Starting LBA
FullEndLBA=1669520			; Full Stroke Access Time Ending LBA
FullReps=200				; Full Stroke Access Time Number of Seeks
StreamStartLBA=405121			; Sustained Data Rate Starting LBA
StreamEndLBA=517754			; Sustained Data Rate Ending LBA


[netdata]
NumMsg=500			; Number of messages to exchange with xbnettest, -1=run forever (default=1)


[hdsit]
Cylinder=19385 		; Cylinder NUmber of Test Location (default=DiskGeometry.Cylinders.QuadPart)
Head=15 			; Head NUmber of Test Location (default=DiskGeometry.TracksPerCylinder)
Sector=62 			; SectorNUmber of Test Location (default=DiskGeometry.SectorsPerTrack)
SectorsToRead=1 	; Number of Sectors to Read at Test Location (default=1)
;PatternFile=t:\pattern.txt	; Name of file that contains the test pattern
ReadOnly=1		; 1 = Read the location
WriteOnly=0		; 1 = Write the location
				; Use these two parameters to configure for read only, write only, or both
				; ReadOnly WriteOnly
				;    0			  1            Only write the pattern to the location
				; 1 0 Write the pattern once and then only read 							;    1 1 Alternatly write and read the location
	; 0 0 Write the pattern once then do nothing
PatternByte0=0x00	; 8 pattern bytes, used to fill the SectorsToRead*512 byte pattern buffer
					; use 0x for hex or just integers 
PatternByte1=0x55
PatternByte2=0x00
PatternByte3=0xaa
PatternByte4=0x00
PatternByte5=0xee
PatternByte6=0x00
PatternByte7=0xff


[hdrw]
FileSize=8		; Size of file, in MB, to read/write (default=8)
ReadOnly=1		; 1 = Only Read the first and last sector
WriteOnly=1		; 1 = Only Write the first and last sector
				; Use these two parameters to configure for read only, write only, or both
				; ReadOnly WriteOnly
				;    0			  1            Only Write the first and last sector
				; 1 0 Only Read the first and last sector
				;    1 1 Alternatly read and write and read the first and last sector
	; 0 0 Do nothing
TimeDuration=300	; Seconds to run test tool, 0 = For Ever (default=0)


[hdperf]
;StartUpReps=1			; Number of reps for average Startup time (default = 10)
;TrackToTrackStartLBA=585	; Starting LBA of average track-to-track access time (default = 585)
;TrackToTrackEndLBA=586		; EndingLBA of average track-to-track access time (default = 586)
;TrackToTrackReps=200		; Number of reps for average track-to-track access time (default = 200)
;FullStartLBA=	 		; Starting LBA of average full stroke access time (default = 0)
;FullEndLBA=			; Ending LBA of average full stroke access time (default = MaxLBA)
;FullReps=200			; Number of reps for average full stroke access time (default = 200)
StreamStartLBA=0 		; Starting LBA of raw read data transfer rate (default = 0)
StreamEndLBA=2048		; Ending LBA of raw read data transfer rate (default = 204800 = 100MB)
FileReadWriteTest=0		; Do Sequenial file read/write (default=1)
RawReadTest=0			; Do Raw read test (default=1)
SmallFileCreationTest=0		; Do Small file creation test (default=1)
RandomRawDiskRead=0		; Do random raw reads test (default=1)
DiskCacheTest=0			; Do Disk cache test (default=1)


[hdperf_ll]
;StartUpReps=10		; Number of reps for average Startup time (default = 10)
;TrackToTrackLBA=	; Starting LBA of average track-to-track access time (default = MaxLBA/2)
;TrackToTrackReps=200	; Number of reps for average track-to-track access time (default = 200)
;FullStartLBA= 		; Starting LBA of average full stroke access time (default = 0)
;FullEndLBA=		; Ending LBA of average full stroke access time (default = MaxLBA)
;FullReps=200		; Number of reps for average full stroke access time (default = 200)
;StreamStartLBA= 	; Starting LBA of raw read data transfer rate (default = 0)
;StreamEndLBA=		; Ending LBA of raw read data transfer rate (default = 204800 = 100MB)


[hdperf_sw]
FileReadWriteTest=1		; Do Sequenial file read/write (default=1)
RawReadTest=1			; Do Raw read test (default=1)
SmallFileCreationTest=1	; Do Small file creation test (default=1)
RandomRawDiskRead=1		; Do random raw reads test (default=1)
DiskCacheTest=1			; Do Disk cache test (default=1)


[peerclient]
LogMinutes=1		; Logging interval for peer-to-peer testing (default=1)


[dvdecc]
FileName=A:\*
				; Name of file to read, may use wild cards
StartLBA=0		; Starting LBA number for read range
EndLBA=0		; Ending LBA number for read range (set to 0 for no LBA range reading)
LogPerRead=0	; 1=Log ECC for read, 0=per file(or ECC range)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\cover35src\cover30.ppt ===
Code Coverage Tools Kenneth Ma Overview What is Code Coverage? Steps of code coverage Instrument your binaries Run your binaries Gather your data Manage your data Generate reports on your data Advanced topics Where to get more info What is Code Coverage? Our Code Coverage Tools Installing the Coverage Tools \\covertools\cover30\install.bat copies tools to c:\coverage\tools installs services in system32 and system32\drivers Install on each machine that will be running the tests. Run install.bat again to update the tools periodically. To uninstall, delete these registry keys and files: HKLM\System\CurrentControlSet\Services\covermon HKLM\System\CurrentControlSet\Services\coverage HKLM\System\CurrentControlSet\Control\Session Manager\KnownDlls\coverage %SystemRoot%\system32\drivers\coverage.sys %SystemRoot%\system32\coverage.dll %SystemRoot%\system32\covermon.exe Instrumenting Binaries binprep.bat  \\x86fre\binaries.ns\notepad.exe creates c:\coverage\notepad.exe directory. copies notepad.exe and notepad.pdb from \\x86fre\binaries.ns runs bbcover.exe on notepad.exe to produce notepad.exe.instr May get warnings, but if notepad.exe.instr is produced, instrumentation succeeded. If notepad.exe.instr not produced, likely problems: wrong or missing .pdb file binary not built with full debug info binary contains .asm code and requires .bbtf instructions Install Instrumented Binaries Run Tests and Save Coverage Data Generate Reports reports.bat  notepad.exe Simple batch script to invoke bbcovrpt.exe Produces summary and source code reports notepad.exe.cov.sum.report notepad.c.cov.src.report (etc.) Assumes source code on \\x86fre\sources Excludes C-runtime code from reports Use bbcovrpt.exe directly for more flexibility. /Test and /Xtest provide reporting on subset of test names /Fun and /Xfun provide reporting on subset of function names /Src and /Xsrc provide reporting on subset of source files /SrcPath and /SrcSubst allow redirecting source file search /SrcSubst d:\nt=\\x86fre\sources Interpret Reports Problems with Source Reports Source file may have changed since binary was built \\x86fre\sources is always changing Compiler optimizations often produce code that does not correspond line-for-line with the source code inline functions switch statements Use /MixedReport to see how source code corresponds to blocks of assembly code. Use /AsmReport if source code not available or has changed too much since binary was built. Managing Coverage Results Advanced Topics Advanced Topics Advanced Topics Odd symbol names in reports $Exxx (C++ global constructors) $Lxxx (C and C++ exception handling) (no function name) __cppthunk import thunks multiple function names for same block of code (comdat folding) Relative path names for some source files in NT tree .hxx files .asm files C-runtime files Advanced Topics More Information This document (including slide notes) \\covertools\cover30\cover30.ppt Instructions http://covertools Vulcan Documentation http://msrweb/pprc/vulcan/VulcanCmdFile.htm Support Email: kenma bbtbug (for help with .bbtf files and bbflow.exe problems) Click to edit Master title style Click to edit Master text styles Second Level Third Level Fourth Level Fifth Level Click to edit Master title style Click to edit Master subtitle style Click to edit Master text styles Second level Third level Fourth level Fifth level Does not require source code and recompiling to instrument like other code coverage tools. Binaries containing template code may not instrument properly; need .bbtf command file Make sure c:\coverage\tools is in the PATH. Binprep.bat is just a batch file that copies the full debug binary to a local directory and then invokes bbcover.exe. Must keep the original full debug binary, not just the instrumented one, in the c:\coverage\notepad.exe directory -- will need it to run reports. Run binprep.bat for each binary you want to instrument. \\x86fre\binaries.ns flat share causes collisions of .pdb files for binaries with same base name but different extensions (mstask.exe and mstask.dll both reference mstask.pdb, but which mstask.pdb is on the share?). approx 3% of the source code on \\x86fre\sources changes each week.  drives.c.cov.src.report (615) switch statement drives.c.cov.mixed.report (1045) switch statement blocks For access to \\msradt\release, send email to bbtbug. Kernel-mode coverage in last 30 days (3/98 to 4/15/98) likely incorrect (total statistics accurate but correlation of blocks to symbol names incorrect).  Fixed bug yesterday (4/15/98 new bbcover.exe). Win98 coverage.dll may not be rebased in correct location.  Contact me if you have problems with coverage on Win98. No Slide Title Jenny & Tom McGuire C:\Office\Templates\Presentation Designs\Azure.pot Microsoft PowerPoint "Arial Code Coverage Tools "Arial Kenneth Ma Kenneth Ma "System On-screen Show Times New Roman Monotype Sorts Arial Azure Code Coverage Tools Overview  What is Code Coverage? Our Code Coverage Tools Installing the Coverage Tools Instrumenting Binaries Install Instrumented Binaries Run Tests and Save Coverage Data Generate Reports Interpret Reports Problems with Source Reports Managing Coverage Results Advanced Topics Advanced Topics Advanced Topics Advanced Topics More Information Fonts Used Design Template Slide Titles
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\cover35src\cover-xbox.ppt ===
Code Coverage for Xbox Steps of code coverage Instrument your binaries Run your binaries Gather your data Manage your data Generate reports on your data Advanced topics Where to get more info Xbox Code Coverage Tools Installing the Coverage Tools \\covertools\cover35\install.bat copies tools to c:\coverage\tools installs services in system32 and system32\drivers Install on your build machine Replace binprep.bat/reports.bat from \private\test\cover35src\xbox Instrumenting Binaries binprep.bat  c:\xboxbins\dump\xapi.dll creates c:\coverage\xapi.dll directory. copies xapi.dll and xapi.pdb from c:\xboxbins\dump runs bbcover.exe on xapi.dll to produce xapi.dll.instr May get warnings, but if xapi.dll.instr is produced, instrumentation succeeded. If xapi.dll.instr not produced, likely problems: wrong or missing .pdb file binary not built with full debug info binary contains .asm code and requires .bbtf instructions Ntoskrnl.exe and xapi.dll require .bbtf (checkin under test\cover35src\bbtf) Install Instrumented Binaries Copy xapi.dll.instr back to c:\xboxbins\dump, rename it to xapi.dll, and rebuild XBE file again For ntoskrnl.exe, just copy it to your target machine Copy coverage.sys to \xboxos\system32 Will see debug message under kernel debugger COVERAGE: xapi.dll registered (0x00405100 - 0x0040B1F8) Instrumented binaries run about 80% to 95% of the speed of the original binaries due to instrumentation overhead. System memory overhead is small. Run Tests and Save Coverage Data Run tests as normal, the test harness will save the collected coverage information after EndTest is called No coverage information lost when your app crashes. Automatically saved during each EndTest. Only lose coverage data for current test if bugcheck occurs.  Generate Reports Copy xapi.dll.covdata to c:\coverage\xapi.dll on your build/dev machine reports.bat  xapi.dll Simple batch script to invoke bbcovrpt.exe Produces summary and source code reports Xapi.dll.cov.sum.report xapiinit.c.cov.src.report (etc.) Excludes C-runtime code from reports Use bbcovrpt.exe directly for more flexibility. /Fun and /Xfun provide reporting on subset of function names /Src and /Xsrc provide reporting on subset of source files /SrcPath and /SrcSubst allow redirecting source file search /SrcSubst e:\xbox=\\xboxbuilds\source Advanced Topics Advanced Topics Binaries containing .asm code. .bbtf files \private\test\cover35src\bbtf\ntoskrnl.bbtf http://msrweb/pprc/vulcan/VulcanCmdFile.htm binprep.bat and bbcover.exe use .bbtf file if it exists. Some binaries requiring special handling. ntoskrnl.exe: copy ntoskrnl.bbtf to c:\coverage\ntoskrnl.exe\ Xapi.dll: copy xapi.bbtf to c:\coverage\xapi.dll\ More Information \\covertools\cover30\cover30.ppt (also checkin under \private\test\cover35src) Instructions http://covertools Vulcan Documentation http://msrweb/pprc/vulcan/VulcanCmdFile.htm Click to edit Master title style Click to edit Master text styles Second Level Third Level Fourth Level Fifth Level Click to edit Master title style Click to edit Master subtitle style Click to edit Master text styles Second level Third level Fourth level Fifth level Does not require source code and recompiling to instrument like other code coverage tools. Binaries containing template code may not instrument properly; need .bbtf command file Make sure c:\coverage\tools is in the PATH. Binprep.bat is just a batch file that copies the full debug binary to a local directory and then invokes bbcover.exe. Must keep the original full debug binary, not just the instrumented one, in the c:\coverage\notepad.exe directory -- will need it to run reports. Run binprep.bat for each binary you want to instrument. \\x86fre\binaries.ns flat share causes collisions of .pdb files for binaries with same base name but different extensions (mstask.exe and mstask.dll both reference mstask.pdb, but which mstask.pdb is on the share?). For access to \\msradt\release, send email to bbtbug. Kernel-mode coverage in last 30 days (3/98 to 4/15/98) likely incorrect (total statistics accurate but correlation of blocks to symbol names incorrect).  Fixed bug yesterday (4/15/98 new bbcover.exe). Win98 coverage.dll may not be rebased in correct location.  Contact me if you have problems with coverage on Win98. No Slide Title Jenny & Tom McGuire C:\Office\Templates\Presentation Designs\Azure.pot Sakphong Chanbai Microsoft PowerPoint Times New Roman Code Coverage for Xbox  Monotype Sorts Times New Roman Steps of code coverage Steps of code coverage Monotype Sorts Times New Roman Instrument your binaries Instrument your binaries Monotype Sorts Times New Roman Run your binaries Run your binaries Monotype Sorts Times New Roman Gather your data Gather your data Monotype Sorts Times New Roman Manage your data Manage your data Monotype Sorts Times New Roman Generate reports on your data Generate reports on your data Monotype Sorts Times New Roman Advanced topicsa Advanced topicsa Monotype Sorts Times New Roman Where to get more info Where to get more info Monotype Sorts Times New Roman "System On-screen Show Times New Roman Monotype Sorts Lucida Sans Unicode Azure Code Coverage for Xbox Xbox Code Coverage Tools Installing the Coverage Tools Instrumenting Binaries Install Instrumented Binaries Run Tests and Save Coverage Data Generate Reports Advanced Topics Advanced Topics More Information Fonts Used Design Template Slide Titles _PID_HLINKS Sakphong Chanbai Code Coverage for Xbox Steps of code coverage Instrument your binaries Run your binaries Gather your data Manage your data Generate reports on your data Advanced topics Where to get more info Xbox Code Coverage Tools Installing the Coverage Tools \\covertools\cover35\install.bat copies tools to c:\coverage\tools installs services in system32 and system32\drivers Install on your build machine Replace binprep.bat/reports.bat from \private\test\cover35src\xbox Instrumenting Binaries binprep.bat  c:\xboxbins\dump\harness.exe creates c:\coverage\foobar.exe directory. copies foobar.exe and foobar.pdb from c:\xboxbins\dump runs bbcover.exe on foobar.exe to produce foobar.exe.instr May get warnings, but if foobar.exe.instr is produced, instrumentation succeeded. If foobar.exe.instr not produced, likely problems: wrong or missing .pdb file binary not built with full debug info binary contains .asm code and requires .bbtf instructions xboxkrnl.exe requires .bbtf (checkin under test\cover35src\bbtf) Install Instrumented Binaries Copy foobar.exe.instr back to c:\xboxbins\dump, rename it to foobar.exe, and rebuild XBE file again For xboxkrnl.exe, just rebuild xboxrom.bin and copy it to your target machine Will see debug message under kernel debugger COVERAGE: foobar.exe registered (0x00405100 - 0x0040B1F8) Instrumented binaries run about 80% to 95% of the speed of the original binaries due to instrumentation overhead. System memory overhead is small. Run Tests and Save Coverage Data Run tests as normal, the test harness will save the collected coverage information after EndTest is called No coverage information lost when your app crashes. Automatically saved during each EndTest. Only lose coverage data for current test if bugcheck occurs.  Generate Reports Copy foobar.exe.covdata to c:\coverage\foobar.exe on your build/dev machine reports.bat  foobar.exe Simple batch script to invoke bbcovrpt.exe Produces summary and source code reports Foobar.exe.cov.sum.report foobar.c.cov.src.report (etc.) Excludes C-runtime code from reports Use bbcovrpt.exe directly for more flexibility. /Fun and /Xfun provide reporting on subset of function names /Src and /Xsrc provide reporting on subset of source files /SrcPath and /SrcSubst allow redirecting source file search /SrcSubst e:\xbox=\\xbuilds\source Advanced Topics Advanced Topics Binaries containing .asm code. .bbtf files \private\test\cover35src\bbtf\xboxkrnl.bbtf http://msrweb/pprc/vulcan/VulcanCmdFile.htm binprep.bat and bbcover.exe use .bbtf file if it exists. Some binaries requiring special handling. xboxkrnl.exe: copy xboxkrnl.bbtf to c:\coverage\xboxkrnl.exe\ More Information \\covertools\cover30\cover30.ppt (also checkin under \private\test\cover35src) Instructions http://covertools Vulcan Documentation http://msrweb/pprc/vulcan/VulcanCmdFile.htm On-screen Show Times New Roman Monotype Sorts Lucida Sans Unicode Azure Code Coverage for Xbox Xbox Code Coverage Tools Installing the Coverage Tools Instrumenting Binaries Install Instrumented Binaries Run Tests and Save Coverage Data Generate Reports Advanced Topics Advanced Topics More Information Fonts Used Design Template Slide Titles _PID_HLINKS Sakphong Chanbai
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\placebin.txt ===
; This file is used to specify where every file built by the NT build lab is
; binplaced relative to the root of the distribution point.  If a file is not
; listed, it will end up in the dump directory.
;
; The format is like this:
;
; <imagename>    <class name>
;
; where <imagename> is the filename.ext and <class name> is the directory off
; the root of the distribution point (retail is a placeholder for the root).
; If there are multiple class names for a single image, use a colon to separate
; each.
;
; All bits that ship in the NT base product and are installed with winnt32,
; must have a class name of retail.
;
; If you add a new file to the list, please refrain from creating your own
; special section.  Doing so makes it difficult to detect duplicates.  If
; you're unable to add your image due to a collision with an existing name,
; work it out with the other developer.  Options include creating another
; placefil.txt for your project or using the ALT_PROJECT_TARGET macro in your
; sources file to change the base of the distribution point (doing so means
; your project will not install as part of base NT).
;
;     sort /+17 < placefil.txt > placefil.srt
;
; will generate a list sorted by class name if you want.
;
; IMPORTANT NOTE:
;
; If you add a file to the system, YOU MUST make sure layout.inf is updated
; before you start depending on it or else you will cause a BVT break. Do
; not attempt to modify layout.inf yourself, but follow instructions on:
;     http://ntbld/addtob.htm
;
;        PLEASE KEEP THIS LIST SORTED
;---------------------------------------------
;---------------------------------------------

dp3lite.exe     xboxtest
dp3lite.dll     xboxtest
d3dbvt.exe      xboxtest
d3dbvt.dll      xboxtest
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\readme.txt ===
User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           Back            Quit the program
    -               Left trigger    Move the camera back
    +               Right trigger   Move the camera forward
    Delete          Left keypad     Pan the camera left
    Page down       Right keypad    Pan the camera right
    Home            Up keypad       Pan the camera up
    End             Down keypad     Pan the camera down
    Left arrow      Left stick 2    Rotate the camera left
    Right arrow     Right stick 2   Rotate the camera right
    Up arrow        Up stick 2      Rotate the camera up
    Down arrow      Down stick 2    Rotate the camera down
    Shift + left    Left stick 1    Orbit the camera left
    Shfit + right   Right stick 1   Orbit the camera right
    Shift + up      Up stick 1      Orbit the camera up
    Shift + down    Down stick 1    Orbit the camera down
                    Start + White   Switch sticks 1 and 2 for rotation and orbit
    O               White           Return the camera to its initial position
    Space           A               Single-step rendering
    Enter           Start + A       Pause/resume rendering
    ~               Black           Toggle console display
    Period          Start + Black   Toggle reference comparison display        
    F, M            RStick          Toggle frame rate and adapter mode displays
    T               B               Time dilation
    W, S            LStick          Toggle between wireframe and solid fill modes
    E               Start + LStick  Toggle zfunc between always and <=
    D                               Reset the device and toggle the use of automatic depth buffering
    A                               Reset the device and toggle the use of a multisample swap chain
    N               Start + B       Toggle FSAA multisampling
    I                               Toggle dithering
    Left arrow      Left stick 1    Scroll the console a line to the left
    Right arrow     Right stick 1   Scroll the console a line to the right
    Up arrow        Up stick 1      Scroll the console a line up
    Down arrow      Down stick 1    Scroll the console a line down
                    Left keypad     Scroll the console a page to the left
                    Right keypad    Scroll the console a page to the right
    Page up         Up keypad       Scroll the console a page up
    Page down       Down keypad     Scroll the console a page down
    Home                            Position the console at the far left
    End                             Position the console at the far right
    Insert          Y               Position the console at the top
    Delete          X               Position the console at the bottom
    Alt + Enter                     Toggle between full screen and windowed modes (Desktop)
    F2                              Open display selection dialog box (Desktop)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\alphpal1\readme.txt ===
Direct3D IM Translucent Palettized Texture Stress Test -- alphpal2.exe
--------------------------------------------------------------------

Usage:

    alphpal2

Description:

    This test stresses the creation and rendering of translucent 
    palettized textures.  It begins by creating six 8 bpp textures
    and ninety-six 4 bpp textures, each of which has a 50% chance
    of being created as a mipmap.  These textures are then rendered
    in various permutations every frame.  The way the textures are
    drawn can be broken into three categories, randomly chosen from
    at the beginning of a frame: homogenous palettes, heterogeneous 
    palettes, and recurring palettes.  When homogeneous palettes are
    selected, only 4 bpp or 8 bpp textures will be rendered in the
    frame.  Either four 8bpp textures are chosen from the pool of six,
    or sixty-four textures are chosen from the pool of ninety-six
    (for a total of 1024 unique palette entries used in the frame, the
    maximum supported by the hardware).  When heterogeneous palettes
    are selected, both 4 bpp and 8 bpp textures are rendered in the 
    frame.  The depth of the textures used alternates in a somewhat
    random order, but still does not exceed the palette entry limit
    in the hardware.  When recurring palettes are selected, both
    4 bpp and 8 bpp textures are rendered, but unlike hetergeneous
    palettes, individual textures are rendered multiple times in the 
    frame.  Whichever category appears in a frame, the textures that
    are drawn have two identifying numbers to verify they have been
    correctly rendered.  The larger number in the lower half of each
    texture is simply a 4 or an 8, corresponding to the bit depth of
    the texture.  The smaller number at the top of the texture is
    a number identifying its location within the texture pool.  When
    looking at the textures from left to right and top to bottom, these
    numbers should increase by one sequentially from a base number
    within a string of textures of the same depth.

    In addition to the variety of rendering combinations, each texture 
    is assigned a decay rate (measured in frames).  When a texture 
    decays, it is released and a new texture or mipmap is created in 
    its stead.

    When rendered on the screen, each texture is drawn on a quad.
    The quads are arranged in a grid of rows and columns.  They should
    appear translucent on the screen in front of a background texture
    that has been rendered opaque.  The alpha information for the
    translucency is stored in the palette entries of the textures.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    F7              Y               Toggle specular highlights
    P                               Point fill mode
    W               A               Wireframe fill mode (toggle)
    S               A               Solid fill mode (toggle)
    F2, F3          B               Toggle the shade mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\ball\ball.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft TextureStage TitleTextureStage Jeff Vezina Normal.dot Vladimir Kouznetsov Microsoft Word 9.0bjbjU Test type: Conformance / functional test Owner: Vladimir Kouznetsov General Description: The test verifies vertex blending. Detailed Description: The test verifies vertex blending transformations with different number of transformation matrices (from 2 to 4) by rendering a sphere with non-linear distribution of blending coefficients across its Y axis. At any given time only 2 matrices are used. Other matrices are set to identity (second matrix in 1, 3 case) or undefined (fours matrix in 1,3 case). During the loop test also goes across three different scenarios: (1) geometry only, (2) texture with texture coordinates, (3) texture with texture generation. Command Line options: General options Description -src:<device> choose device to run the test:  to run on hardware T&L device  to run on RGB(MMX) device for PSGP testing  to run on Reference device  -ref:<device> choose reference device -ball:<n>[-[<n>]] run specified range of  tests -debug run the test in debug mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\d3dsnow\readme.txt ===
Direct3D Immediate-Mode Sample -- d3dsnow.exe
--------------------------------------------------------------------

Usage:

    d3dsnow

Description:

    This sample demonstrates the use of translucent textures 
    (5-5-5-1 RGBA and 8 bit palettized) to achieve punch-through
    color keying.  The color keying is used to display both 
    individual snow flakes and multiple overlaid snow sheets.


User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    F2, F3          B               Toggle the shade mode
    F7              Y               Toggle specular highlights
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\fogmode\readme.txt ===
Direct3D IM Fog Test -- fogmode.exe
--------------------------------------------------------------------

Usage:

    fogmode

Description:

    This test verifies the correct display of vertex and table fog
    using the different fog modes.  When rendered correctly, the 
    test should display a spinning dome in the center of the screen
    partially obscured by a white fog.  The intensity of the fog
    will vary according to the fog mode used.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    Delete          Left keypad     Pan the camera left
    Page down       Right keypad    Pan the camera right
    Home            Up keypad       Pan the camera up
    End             Down keypad     Pan the camera down
    Left arrow      Left joystick   Rotate the camera left
    Right arrow     Right joystick  Rotate the camera right
    Up arrow        Up joystick     Rotate the camera up
    Down arrow      Down joystick   Rotate the camera down
    -               Left trigger    Move the camera back
    +               Right trigger   Move the camera forward
    F7              Y               Toggle specular highlights
                    A               Increment the fog mode
                    B               Toggle between vertex and table fog
                    Start           Toggle fog on and off
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\fvertex1\readme.txt ===
Direct3D IM Flexible Vertex Format Test -- fvertex1.exe
--------------------------------------------------------------------

Usage:

    fvertex1

Description:

    This application tests the rendering of geometry composed of
    vertices defined by a number of different flexible vertex 
    formats.  In each case the vertices define a teapot, but they
    vary in terms of the transformation state of their coordinates,
    their lighting information, and the number of their texture 
    coordinates.  In general, the top row of teapots on
    the screen corresponds to untransformed, unlit vertices.  The
    middle row corresponds to untransformed, pre-lit vertices.
    The bottom row is made up of transformed, pre-lit vertices.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    Delete          Left keypad     Pan the camera left
    Page down       Right keypad    Pan the camera right
    Home            Up keypad       Pan the camera up
    End             Down keypad     Pan the camera down
    Left arrow      Left joystick   Rotate the camera left
    Right arrow     Right joystick  Rotate the camera right
    Up arrow        Up joystick     Rotate the camera up
    Down arrow      Down joystick   Rotate the camera down
    -               Left trigger    Move the camera back
    +               Right trigger   Move the camera forward
    F7              Y               Toggle specular highlights
    P                               Point fill mode
    W               A               Wireframe fill mode (toggle)
    S               A               Solid fill mode (toggle)
    F2, F3          B               Toggle the shade mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\innrloop\readme.txt ===
Direct3D IM Inner Rendering Loop Test -- innrloop.exe
--------------------------------------------------------------------

Usage:

    innrloop [state]

    state    A state identifier specifying the initial state to render

Description:

    This test stresses the run-time generated, dynamic code of
    the inner rendering loop of DDHAL.  It cycles through all
    permutations of the following render states and draws spheres to
    the screen for each of them using different primitive and vertex 
    types: fill mode, front-clipping, texturing (untextured, textured, 
    multitextured, or bump mapped), wrapping (no wrapping or wrap u 
    and v), lighting (no lighting, single directional lighting, or 
    complex lighting with directional, point, spot, and parallel point 
    lights), vertex fog, and specular.

    For each frame rendered using the states above, 36 spheres are
    drawn to the screen using different primitive types, vertex types,
    and index types.  The spheres are arranged on the screen as
    follows:

                 |--------Untransformed-------|    |-Transformed-|

                                   |-Strided--|

                  NI       I        NI       I        NI       I

    Point list    O        O        O        O        O        O

    Line list     O        O        O        O        O        O

    Line strip    O        O        O        O        O        O

    Tri list      O        O        O        O        O        O

    Tri strip     O        O        O        O        O        O

    Tri fan       O        O        O        O        O        O


    NI: Non-indexed primitives rendered using DrawPrimitive
    I:  Indexed primitives rendered using DrawIndexedPrimitive

    In order to obtain a state identifier for a particular frame
    that may be used on the command line to immediately render
    that frame and its associated states without having to cycle
    through all the previous frames, press the Start button on
    the joystick when rendering the frame.  It will cause the 
    state value to be output to the debugger.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    Delete          Left keypad     Pan the camera left
    Page down       Right keypad    Pan the camera right
    Home            Up keypad       Pan the camera up
    End             Down keypad     Pan the camera down
    Left arrow      Left joystick   Rotate the camera left
    Right arrow     Right joystick  Rotate the camera right
    Up arrow        Up joystick     Rotate the camera up
    Down arrow      Down joystick   Rotate the camera down
    -               Left trigger    Move the camera back
    +               Right trigger   Move the camera forward
                    A               Toggle the pause state (when
                                    the test is not paused it will
                                    advance to a new set of loop
                                    states every frame
                    B               Advance to the next set of states
                    Y               Rewind to the previous set of states
                    Start           Output state information
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\LightBall\LightBall.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft TextureStage TitleTextureStage Jeff Vezina Normal.dot Vladimir Kouznetsov Microsoft Word 9.0bjbjU LightBall Test type: Conformance / scenario test Owner: Vladimir Kouznetsov General Description: The test verifies texture transformations. Detailed Description: The test verifies texture transformation capabilities with different types of input vertex data, number and type of out texture coordinates. The test application renders a sphere in orthogonal and perspective (on hardware that support projected textures) projections with texture that was  projected  from the background image with magnification. During the loop test tries to create from 1 to 3 output texture coordinate sets from one input set. Verification algorithm compares the result image with image rendered by reference device. Command Line options: General options Description -src:<device> choose device to run the test:  to run on hardware T&L device  to run on RGB(MMX) device for PSGP testing  to run on Reference device  -ref:<device> choose reference device -lightball:<n>[-[<n>]] run specified range of  tests -debug run the test in debug mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\mirror\readme.txt ===
Direct3D IM Texture Rendering Test -- mirror1.exe
--------------------------------------------------------------------

Usage:

    mirror1

Description:

    This test verifies the correct rendering of a scene to a
    texture surface.  When drawn correctly, the scene should
    display a mirror rotating on a quad, reflecting it to the
    viewer.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    Delete          Left keypad     Pan the camera left
    Page down       Right keypad    Pan the camera right
    Home            Up keypad       Pan the camera up
    End             Down keypad     Pan the camera down
    Left arrow      Left joystick   Rotate the camera left
    Right arrow     Right joystick  Rotate the camera right
    Up arrow        Up joystick     Rotate the camera up
    Down arrow      Down joystick   Rotate the camera down
    -               Left trigger    Move the camera back
    +               Right trigger   Move the camera forward
    F7              Y               Toggle specular highlights
    P                               Point fill mode
    W               A               Wireframe fill mode (toggle)
    S               A               Solid fill mode (toggle)
                    B               Toggle square or round mirror
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\misorbit\readme.txt ===
Direct3D Immediate-Mode Sample -- misorbit.exe
--------------------------------------------------------------------

Usage:

    misorbit

Description:

    This sample renders a sphere, cylinder, and cone that rotate
    about the y axis.  The sample demonstrates the creation and
    rendering of VQ compressed textures.  The sphere uses a texture
    with a VQ RGBA 5650 pixel format, the cylinder uses a texture
    with a VQ RGBA 5551 pixel format, and the cone uses a texture
    with a VQ RGBA 4444 pixel format.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    F2, F3          B               Toggle the shade mode
    F7              Y               Toggle specular highlights
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\mstage1\readme.txt ===
Direct3D IM Multitexture Test -- mstage1.exe
--------------------------------------------------------------------

Usage:

    mstage1

Description:

    This is a basic test of multitexturing in two stages.  The test
    renders a quad with vertices containing two texture coordinate
    sets.  The colors of two different textures are modulated
    together on the quad.  While rendering, the first texture 
    coordinate set is offset in the v direction and the second
    set is offset in the u direction.  This has the effect of
    scrolling the first texture up and the second texture to
    the left.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    Delete          Left keypad     Pan the camera left
    Page down       Right keypad    Pan the camera right
    Home            Up keypad       Pan the camera up
    End             Down keypad     Pan the camera down
    Left arrow      Left joystick   Rotate the camera left
    Right arrow     Right joystick  Rotate the camera right
    Up arrow        Up joystick     Rotate the camera up
    Down arrow      Down joystick   Rotate the camera down
    -               Left trigger    Move the camera back
    +               Right trigger   Move the camera forward
    F7              Y               Toggle specular highlights
    P                               Point fill mode
    W               A               Wireframe fill mode (toggle)
    S               A               Solid fill mode (toggle)
    F2, F3          B               Toggle the shade mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\mstage2\readme.txt ===
Direct3D IM Multitexture Test -- mstage2.exe
--------------------------------------------------------------------

Usage:

    mstage2

Description:

    This is a test of multitexturing using both color and alpha
    operations in four stages.  The test renders three spheres:
    the one to the left is textured with a 4444 surface containing
    alpha information and modulating the alpha in each stage;
    the center sphere is textured using surfaces of different
    formats with all alpha information set to opaque, but takes 
    translucent alpha values from a material modulated in during
    the first stage; the sphere to the right modulates colors 
    in the stages, but disables alpha operations and appears opaque.

    The vertices defining the spheres contain four texture
    coordinate pairs.  While rendering, one pair is offset in the +v
    direction, another in the -v direction, a third in the +u
    direction, and the last in the -u direction.  This has the 
    effect of scrolling each of the four textures in different
    directions.  On the spheres, each of the different colored
    arrows should be moving in a different direction from the
    rest.  But the texture of each of the arrows should be moving
    in the same direction that its arrows are facing.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    Delete          Left keypad     Pan the camera left
    Page down       Right keypad    Pan the camera right
    Home            Up keypad       Pan the camera up
    End             Down keypad     Pan the camera down
    Left arrow      Left joystick   Rotate the camera left
    Right arrow     Right joystick  Rotate the camera right
    Up arrow        Up joystick     Rotate the camera up
    Down arrow      Down joystick   Rotate the camera down
    -               Left trigger    Move the camera back
    +               Right trigger   Move the camera forward
    F7              Y               Toggle specular highlights
    P                               Point fill mode
    W               A               Wireframe fill mode (toggle)
    S               A               Solid fill mode (toggle)
    F2, F3          B               Toggle the shade mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\mstage3\readme.txt ===
Direct3D IM Multitexture Test -- mstage3.exe
--------------------------------------------------------------------

Usage:

    mstage3

Description:

    This is a basic test of multitexturing in eight stages.  The test
    renders a quad with vertices containing four texture coordinate
    sets.  The color and alpha values of eight different textures are 
    modulated together on the quad.  While rendering, one pair of 
    texture coordinates is offset in the +v direction, another in the 
    -v direction, a third in the +u direction, and the last in the -u 
    direction.  This has the effect of scrolling two pairs of each of
    the eight textures in different directions.  On the quad, each of 
    the different colored arrows should be moving in a different 
    direction from the rest.  But the texture of each of the arrows 
    should be moving in the same direction that its arrows are facing.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    Delete          Left keypad     Pan the camera left
    Page down       Right keypad    Pan the camera right
    Home            Up keypad       Pan the camera up
    End             Down keypad     Pan the camera down
    Left arrow      Left joystick   Rotate the camera left
    Right arrow     Right joystick  Rotate the camera right
    Up arrow        Up joystick     Rotate the camera up
    Down arrow      Down joystick   Rotate the camera down
    -               Left trigger    Move the camera back
    +               Right trigger   Move the camera forward
    F7              Y               Toggle specular highlights
    P                               Point fill mode
    W               A               Wireframe fill mode (toggle)
    S               A               Solid fill mode (toggle)
    F2, F3          B               Toggle the shade mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\mstage4\readme.txt ===
Direct3D IM Multitexture Cascade Stress Test -- mstage4.exe
--------------------------------------------------------------------

Usage:

    mstage4

Description:

    This test focuses on stressing the color and alpha operations
    and arguments for multitexturing in up to eight stages.  It
    renders a multitextured quad on the screen and randomly selects
    from valid color and alpha blending operations and arguments for
    each of the stages every frame.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    Delete          Left keypad     Pan the camera left
    Page down       Right keypad    Pan the camera right
    Home            Up keypad       Pan the camera up
    End             Down keypad     Pan the camera down
    Left arrow      Left joystick   Rotate the camera left
    Right arrow     Right joystick  Rotate the camera right
    Up arrow        Up joystick     Rotate the camera up
    Down arrow      Down joystick   Rotate the camera down
    -               Left trigger    Move the camera back
    +               Right trigger   Move the camera forward
    F7              Y               Toggle specular highlights
    P                               Point fill mode
    W               A               Wireframe fill mode (toggle)
    S               A               Solid fill mode (toggle)
    F2, F3          B               Toggle the shade mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\mstage5\readme.txt ===
Direct3D IM Multitexture Mipmapping Test -- mstage5.exe
--------------------------------------------------------------------

Usage:

    mstage5

Description:

    This is a test of multitexturing in four stages using mipmaps
    whose filter modes differ from stage to stage.  The test renders
    eight quads, each drawn using four texture stages.  The mipmap
    in a given stage is a mostly white surface with a strip 1/4 the
    width of the mipmap containing a brick image with yellow number
    on it indicating the level of the mipmap.  The brick strip runs
    the height of the mipmap and is placed on the far left of the
    mipmap if it is used in stage 0, 1/4 the way in to the mipmap if
    it is used in stage 1, 1/2 the way in to the mipmap if it is
    used in stage 2, and 3/4 to way in to the mipmap (on the far right)
    if it is used in stage 3.  When the colors of all mipmaps are
    modulated together they will produce a solid brick background
    for the quad with four numbers on it indicating the mipmap levels
    used in each of the stages.

    The four quads in the top row are all opaque mipmaps and the four
    quads on the bottom are translucent mipmaps with their translucent
    alpha values coming from a material and modulated with opaque
    texture values in the alpha cascade (different formats are
    used for each of the mipmaps).  The quads in the first column are
    rendered with the filtering set to none for all texture stages.
    The quads in the second column are rendered using a point
    filter in all stages.  The quads in the third column are rendered
    using a linear filter in the first and last stage and a point
    filter in the middle stages.  The quads in the last column are
    rendered with filtering set to none in the first and last
    texture stages (and the fourth texture in the cascade switched
    from a mipmap to a regular texture) and with filtering set to
    point in the middle stages.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    Delete          Left keypad     Pan the camera left
    Page down       Right keypad    Pan the camera right
    Home            Up keypad       Pan the camera up
    End             Down keypad     Pan the camera down
    Left arrow      Left joystick   Rotate the camera left
    Right arrow     Right joystick  Rotate the camera right
    Up arrow        Up joystick     Rotate the camera up
    Down arrow      Down joystick   Rotate the camera down
    -               Left trigger    Move the camera back
    +               Right trigger   Move the camera forward
    F7              Y               Toggle specular highlights
    P                               Point fill mode
    W               A               Wireframe fill mode (toggle)
    S               A               Solid fill mode (toggle)
    F2, F3          B               Toggle the shade mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\MultiLight\MultiLight.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft TextureStage TitleTextureStage Jeff Vezina Normal.dot Vladimir Kouznetsov Microsoft Word 9.0bjbjU Multilight Test type: Conformance / scenario test Owner: Vladimir Kouznetsov General Description: The test verifies lighting perform by different number of light sources. Detailed Description: By default test creates up to 300 directional lights using five different scenarios: (1) disable lights prior to initialization, (2) enable lights in 0 to MAX order, (3) enable lights in MAX to 0 order, (4) enable lights in pseudo random order, (5) enable lights without initialization to test default parameters. Verification performed by image comparison with image rendered by reference device. Command Line options: General options Description -src:<device> choose device to run the test:  to run on hardware T&L device  to run on RGB(MMX) device for PSGP testing  to run on Reference device  -ref:<device> choose reference device -multilight1[:<n>[-[<n>]]] run specified range of scenario 1 tests -multilight2[:<n>[-[<n>]]] run specified range of scenario 2 tests -multilight3[:<n>[-[<n>]]] run specified range of scenario 3 tests -multilight4[:<n>[-[<n>]]] run specified range of scenario 4 tests -multilight5[:<n>[-[<n>]]] run specified range of scenario 5 tests -debug run the test in debug mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\obelisk\readme.txt ===
Direct3D Immediate-Mode Sample -- obelisk.exe
--------------------------------------------------------------------

Usage:

    obelisk

Description:

    This sample renders an obelisk on the screen with the view 
    orbiting about it.  The sample demonstrates mipmapping,
    material translucency, and the animation of a superimposed 
    texture to produce a primitive environment-mapped effect.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    S, W, P         A               Toggle the fill mode
    F2, F3          B               Toggle the shade mode
    F7              Y               Toggle specular highlights
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\PalAlpha\PalAlpha.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft TextureStage TitleTextureStage Jeff Vezina Normal.dot Vladimir Kouznetsov Microsoft Word 9.0bjbjU PalAlpha Test type: Conformance test Owner: Vladimir Kouznetsov General Description: The test verifies texturing capabilities with palettized textures. Detailed Description: Test verifies texturing capabilities with 8-bit and 4-bit palettized textures with alpha and non-alpha palettes. During the loop it circles throw following scenarios: (1) create palettized texture tests, (2) load texture tests, (3) palette recreation test, (4) set entries test, (5)  wrap addressing mode test, (6) mirror addressing mode test, (7) clamp addressing mode, (8) border addressing mode, (9) color key test, (10) color key blend test. To verify texturing capabilities the application renders a full window rectangle over colored background and applies texture to it. Verification algorithm is based on image comparison with image generated by reference device. Command Line options: General options Description -src:<device> choose device to run the test:  to run on hardware T&L device  to run on RGB(MMX) device for PSGP testing  to run on Reference device  -ref:<device> choose reference device -palalpha:<n>[-[<n>]] run specified range of  tests -debug run the test in debug mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\Portal\Readme.txt ===
Direct3D sample program -- Portal
-----------------------------------------

* Purpose:
This sample demonstrates how to create a portal on WinCE for Dreamcast.
It displays a basic room with a portal rotating at the center.
The portal displays a reflected view of the room (although any arbitrary
view can be chosen for the portal).  It is blended into the scene using 
two-stage texturing.

* Required Files\Parameters:
None

* To exit this sample, press the 'Send ESC' button in DCTool or
press <Esc> on the keyboard
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\RearViewMirror\readme.txt ===
Direct3D sample program -- RearViewMirror
-----------------------------------------

* Purpose:
This sample demonstrates how to create a 'rear-view mirror' effect
using WinCE for DreamCast.  It displays a trench with a series of 
spinning cubes evenly spaced along its axis.  A mirror (of an arbitrary shape)
is positioned above and in front of the view, angled in such a way as to
reflect the scene behind the camera.  As the camera is moved along the trench 
it displays the cubes approaching from in front of the camera and falling away 
behind in the rear-view mirror.

* Required Files\Parameters:
None

* To exit this sample, press the 'Send ESC' button in DCTool or
press <Esc> on the keyboard
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\textr1\readme.txt ===
Direct3D IM Texture Stress Test -- textr1.exe
--------------------------------------------------------------------

Usage:

    textr1

Description:

    This test stresses the creation and rendering of large numbers
    of textures.  A grid of quads is rendered to the screen using
    a distinct texture for each of the quads.  Each texture is 
    composed of a solid color chosen by sampling a texel from a 
    given bitmap.  The texel color chosen for a quad is obtained by 
    taking the position of that quad in the grid and using the 
    corresponding texel position in the bitmap.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\textr2\readme.txt ===
Direct3D IM Texture Dimensions Test -- textr2.exe
--------------------------------------------------------------------

Usage:

    textr2

Description:

    This is a basic test of the rendering of textures of varying
    dimensions in u and v.  It covers all powers of two up to
    512x512.  A grid of quads is rendered to the screen using
    a distinct texture for each of the quads.  Each texture is 
    composed of a solid color chosen by sampling a texel from a 
    given bitmap.  The texel color chosen for a quad is obtained by 
    taking the position of that quad in the grid and using the 
    corresponding texel position in the bitmap.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\textr4\readme.txt ===
Direct3D IM Texture Filtering Test -- textr4.exe
--------------------------------------------------------------------

Usage:

    textr4

Description:

    This test verifies the display of mipmaps using the six modes
    of the D3DTEXTUREFILTER type.  The mipmaps are displayed on
    quads arranged on the screen in columns ordered in the same 
    manner as the filter modes are ordered in the enumerated
    type.  Two rows are also displayed: the top row contains opaque
    quads and the bottom contains translucent ones.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    F7              Y               Toggle specular highlights
    P                               Point fill mode
    W               A               Wireframe fill mode (toggle)
    S               A               Solid fill mode (toggle)
    F2, F3          B               Toggle the shade mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\textr5\readme.txt ===
Direct3D IM Texture Addressing Test -- textr5.exe
--------------------------------------------------------------------

Usage:

    textr5

Description:

    This is a basic test of texture addressing for tiled textures.
    The test displays four quads on the screen, each using a different
    texture addressing mode and containing vertices whose texture
    coordinates range from 0.0 to 2.0.  The top left is set to wrap mode,
    the top right is set to mirror mode, the bottom left is set to clamp
    mode and the bottom right is set to border mode (currently unsupported
    so it should appear as wrap would).

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    Delete          Left keypad     Pan the camera left
    Page down       Right keypad    Pan the camera right
    Home            Up keypad       Pan the camera up
    End             Down keypad     Pan the camera down
    Left arrow      Left joystick   Rotate the camera left
    Right arrow     Right joystick  Rotate the camera right
    Up arrow        Up joystick     Rotate the camera up
    Down arrow      Down joystick   Rotate the camera down
    -               Left trigger    Move the camera back
    +               Right trigger   Move the camera forward
    F7              Y               Toggle specular highlights
    P                               Point fill mode
    W               A               Wireframe fill mode (toggle)
    S               A               Solid fill mode (toggle)
    F2, F3          B               Toggle the shade mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vigil\crc_debug.log ===
   xӂlbGj=nj/F\2**ΊmEdcx/-įf?bɿh7Ӭh16uN,,kRrOy,D`q/qEzq;b$=`d,6"3DB?/'7^]˲`i#Е='q^~;iEnV&YXv"y1pz~+\qQӣjb\ڵUYA+)Fgnf-BPЇL1+^xg@sRvLAtk`_z9}:T\͔Xƻ%rzns^HoHZ/bVtK:/q"_2tÓoenTfD9sGR=Uə\;MzC4QVKa/ZM)goh`wTCoIUJCwv?c4֫@
jBƘI#Qǯ(ZʤkR:]L5q@v7+ٝv-dCesJR~+5py6: <4;-9
ڔѨ«R?nK@!ˆ37N{j|* `i"o_/0OGxk:Z=yB&DJU/yv4~b$$}Aےlal΁#B3Vb5 #֛U/x.9W2BK   s_	^[yqgDxJ9֦ֈU,$F(^5VjLHXj\?Op5b9b3m?ZS ܌+rj̶:RY<bx7`|~puvK/pj%TהREk+h#H7:xOc -
q=eEފoFy)0zHk +W}	]L@78	wVV8nj굣GT|THI !j/u^R'S cA[ijNǬJ1Ҧ7pGSy+pMMƸ[E<yd%Hz 5O*M<ҩ&r/=ܑZF0Q~)uP:M l`5j	t(
Wl3kONbza0i? iy
6)D
},l@ȝ{~(/\N
]m	YCQqԔ y1I='ހn@PTy }#Q{YCmCr.7?ۈ1~	@D>t}BYqEIm~h}v)'wH٤&̛xʫ7dh~G15g*?͕%7ƇBk ٺ'j'"RI$7S-.q   ǰ9K\j{JЕfk2RA3P(T$[!`	r.Id&-iQ	!Ԑ9d3|j__K3a@860
%j}E޴D;oVcg"%G~K
Kgvՠ7Z3"8. U'X8Ā=%8)R{`?4ԬƂ!E3D*#U>~XECHoS4d&&|4mQA:[Z&:tn?آ:;[aݮP-~d (eX/uk	G 4|@rcسn1S/FO\DhjڂEmC?tԑQ*\;*J(4t r~QX\%ѶhƦ.i`8:^΂ƢֳHFdSC_uFFR
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vigil\crc_retail.log ===
   xӂlbGj=nj/F\2**ΊmEdcx/-įf?bɿh7Ӭh16uN,,kRrOy,D`q/qEzq;b$=`d,6"3DB?/'7^]˲`i#Е='q^~;iEnV&YXv"y1pz~+\qQӣjb\ڵUYA+)Fgnf-BPЇL1+^xg@sRvLAtk`_z9}:T\͔Xƻ%rzns^HoHZ/bVtK:/q"_2tÓoenTfD9sGR=Uə\;MzC4QVKa/ZM)goh`wTCoIUJCwv?c4֫@
jBƘI#Qǯ(ZʤkR:]L5q@v7+ٝv-dCesJR~+5py6: <4;-9
ڔѨ«R?nK@!ˆ37N{j|* `i"o_/0OGxk:Z=yB&DJU/yv4~b$$}Aےlal΁#B3Vb5 #֛U/x.9W2BK   s_	^[yqgDxJ9֦ֈU,$F(^5VjLHXj\?Op5b9b3m?ZS ܌+rj̶:RY<bx7`|~puvK/pj%TהREk+h#H7:xOc -
q=eEފoFy)0zHk +W}	]L@78	wVV8nj굣GT|THI !j/u^R'S cA[ijNǬJ1Ҧ7pGSy+pMMƸ[E<yd%Hz 5O*M<ҩ&r/=ܑZF0Q~)uP:M l`5j	t(
Wl3kONbza0i? iy
6)D
},l@ȝ{~(/\N
]m	YCQqԔ y1I='ހn@PTy }#Q{YCmCr.7?ۈ1~	@D>t}BYqEIm~h}v)'wH٤&̛xʫ7dh~G15g*?͕%7ƇBk ٺ'j'"RI$7S-.   ǰ9K\j{JЕfk2RA3P(T$[!`	r.Id&-iQ	!Ԑ9d3|j__K3a@860
%j}E޴D;oVcg"%G~K
Kgvՠ7Z3"8. U'X8Ā=%8)R{`?4ԬƂ!E3D*#U>~XECHoS4d&&|4mQA:[Z&:tn?آ:;[aݮP-~d (eX/uk	G 4|@rcسn1S/FO\DhjڂEmC?tԑQ*\;*J(4t r~QX\%ѶhƦ.i`8:^΂ƢֳHFdSC_u.M
h*Qo	Up6QMgyH\cņO(k<[NsHR2F~Eֆh	bnq (EjSĦt.UFFR
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vigil\readme.txt ===
Graphics memory integrity test -- vigil.exe
--------------------------------------------------------------------

Usage:

    vigil

Description:

    This test allocates nearly all available memory (from the lower
    64M on 128M development kits) and uses it for resources in the
    form of vertex buffers, textures, and index lists.  All
    allocated resources are read by the GPU every frame to build an
    image in the frame buffer.  The frame buffer (color and alpha)
    and depth buffer (z and stencil) are written to every frame by
    the GPU.  The CPU reads from all resource memory as well as
    front, back, and depth buffers every frame and verfies the
    memory contents have not changed since the time of initialization.

Environment variable options:

    VIGILVERBOSE            - Output detailed debugging information.

    VIGILNORESOURCECHECK    - Only verify the frame buffers and
                              depth buffer each frame.  Errors in
                              the textures, vertex buffers, and
                              index lists will still likely propagate 
                              to the frame buffer and cause errors to
                              be reported, but the specific resources
                              with corrupt memory will not be 
                              identified until an error first appears
                              in the frame buffer.  Compiling with
                              this option will significantly boost
                              the frame rate.

    VIGILNOTEXTUREWRITES    - Do not perform GPU writes to all created
                              textures every frame.  If this option is
                              not defined, the system will perform a GPU
                              copy of the memory from all textures into
                              a temporary buffer, a CPU clear of the
                              textures, and another GPU copy of the
                              memory from the temporary buffer back
                              into the textures to restore them.

    VIGILGENERATECRCS       - Generate the CRC file used to verify
                              the frame buffer, depth buffer, and
                              resources.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\wrap1\readme.txt ===
Direct3D IM Texture Wrapping Test -- wrap1.exe
--------------------------------------------------------------------

Usage:

    wrap1

Description:

    This test verifies wrapping in the u and v directions for a 
    texture.  When running correctly a quad should appear in the
    center of the screen displaying a small red rectangle in its
    upper left, purple rectangles to the right and bottom of it, 
    and a larger blue square in the bottom right.

User Input:

    Keyboard        Gamepad         Action
    ----------------------------------------------------------------
    <Esc>           X               Quit the program
    F7              Y               Toggle specular highlights
    P                               Point fill mode
    W               A               Wireframe fill mode (toggle)
    S               A               Solid fill mode (toggle)
    F2, F3          B               Toggle the shade mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\harness\ini\all\testini.ini ===
;*****************************************************************************
; Global Settings - if there is no per-module setting, global setting will be used
;*****************************************************************************
[GeneralSettings]
NtGlobalFlags=0x30                  ;Default is  FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK
StressTestMode=1                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=100                 ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=0                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=0x01ff                     ;default is enabled all levels except XLL_VARIATION_TIME
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=65536               ;default is 64K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;*****************************************************************************
; List of the test modules to be loaded and executed
;*****************************************************************************
[TestList]
misorbit
chessbrd
clockwrk
rteapot
skulls
snowfall
address                         ;Texture addressing conformance test
alphabld                        ;Alpha blending conformance test
alphacmp                        ;Alpha compare conformance test
basicrst                        ;Basic rendering conformance test
blend                           ;Blending conformance test
bump                            ;DX6 style bump mapping conformance test
clear_test                      ;Clear conformance test
compress                        ;DXT texture compression conformance test
cubemap                         ;Cubemap conformance test
emboss                          ;Emboss mapping conformance test
fog                             ;Fog conformance test
gradient                        ;Gradient texture conformance test
lightmap                        ;Light map conformance test
linetex                         ;Textured line conformance test
luminanc                        ;Luminance conformance test
mapping                         ;Texture mapping conformance test
mipfilter                       ;Mip filtering conformance test
overdraw                        ;Overdraw conformance test
perspective                     ;Texture perspective conformance test
pointsprite                     ;Point sprites conformance test
pointtex                        ;Textured point conformance test
pshader                         ;Pixel shader conformance test
srt                             ;SetRenderTarget conformance test
;stateblocks                     ;State blocks conformance test
stencil                         ;Stencil conformance test
texturestage                    ;Multitexturing conformance test
tlvertexclip                    ;Vertex clipping conformance test
volume                          ;Volume texture conformance test
wbuffer                         ;W buffering conformance test
wcmp                            ;W compare conformance test
zbuffer                         ;Z buffering conformance test
zcmp                            ;Z compare conformance test
alphabnt                        ;Alpha blending and testing
ball                            ;Vertex blending
basic                           ;Basic test
bees                            ;Old Meltdown sample
bumpduv1                        ;DX6 style bump mapping
clipping
depthbuf                        ;Z and W buffering
dlight                          ;Old point light Meltdown sample
dxtnoise                        ;DXT1 decompression noise test
fsaa                            ;Multisampling and supersampling
fvertex1                        ;Fixed function rendering
gammarmp                        ;Gamma ramps
getrstat                        ;Raster status
hightide                        ;UP rendering of complex models
ibuffer                         ;Index buffer tests
innrloop                        ;Rendering tests
lightball                       ;DX6-style bump mapping
lighting
litetype                        ;Fixed function lighting
lockdepth
matsrc                          ;Material source lighting test
mstage1
mstage2
;mstage4
mstage5
multilight                      ;Multilight test
mxpalskin                       ;Matrix palette skinning
obelisk
palette0
pslights
psverify
reflect0
stencil0
terrain
texform
texgen
texgenxt
textr1
textr2
textr3
textr4
textr5
tunnel
vbbatch
vbib
vpshadr1
vshader
wireframe

[XNetRef]
cfgFlags=0x01                   ;bypass security

[misorbit]
TimeDuration=60

[chessbrd]
TimeDuration=60

[clockwrk]
TimeDuration=60

[rteapot]
TimeDuration=60

[skulls]
TimeDuration=60

[snowfall]
TimeDuration=60

[alphabnt]
TimeDuration=10

[basic]
TimeDuration=10

[bees]
TimeDuration=20

[bumpduv1]
TimeDuration=30

[dlight]
TimeDuration=20

[dxtnoise]
TimeDuration=10

[fvertex1]
TimeDuration=10

[hightide]
TimeDuration=20

[mstage1]
TimeDuration=10

[mstage2]
TimeDuration=10

[mstage3]
TimeDuration=10

[mstage4]
TimeDuration=10

[mstage5]
TimeDuration=10

[obelisk]
TimeDuration=20

[palette0]
TimeDuration=20

[pslights]
TimeDuration=60

[psverify]
FrameDuration=200

[stencil0]
TimeDuration=10

[terrain]
TimeDuration=10

[texgenxt]
TimeDuration=10

[textr1]
TimeDuration=2

[textr2]
TimeDuration=2

[textr3]
TimeDuration=2

[textr5]
TimeDuration=2

[tunnel]
TimeDuration=2

[vpshadr1]
TimeDuration=5
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\harness\ini\conf\testini.ini ===
;*****************************************************************************
; Global Settings - if there is no per-module setting, global setting will be used
;*****************************************************************************
[GeneralSettings]
NtGlobalFlags=0x30                  ;Default is  FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK
StressTestMode=1                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=100                 ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=0                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=0x01ff                     ;default is enabled all levels except XLL_VARIATION_TIME
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=65536               ;default is 64K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;*****************************************************************************
; List of the test modules to be loaded and executed
;*****************************************************************************
[TestList]
address                         ;Texture addressing conformance test
alphabld                        ;Alpha blending conformance test
alphacmp                        ;Alpha compare conformance test
basicrst                        ;Basic rendering conformance test
blend                           ;Blending conformance test
bump                            ;DX6 style bump mapping conformance test
clear_test                      ;Clear conformance test
compress                        ;DXT texture compression conformance test
cubemap                         ;Cubemap conformance test
emboss                          ;Emboss mapping conformance test
fog                             ;Fog conformance test
;gradient                        ;Gradient texture conformance test
lightmap                        ;Light map conformance test
linetex                         ;Textured line conformance test
luminanc                        ;Luminance conformance test
mapping                         ;Texture mapping conformance test
mipfilter                       ;Mip filtering conformance test
overdraw                        ;Overdraw conformance test
perspective                     ;Texture perspective conformance test
pointsprite                     ;Point sprites conformance test
pointtex                        ;Textured point conformance test
pshader                         ;Pixel shader conformance test
srt                             ;SetRenderTarget conformance test
;stateblocks                     ;State blocks conformance test
stencil                         ;Stencil conformance test
texturestage                    ;Multitexturing conformance test
tlvertexclip                    ;Vertex clipping conformance test
volume                          ;Volume texture conformance test
wbuffer                         ;W buffering conformance test
wcmp                            ;W compare conformance test
zbuffer                         ;Z buffering conformance test
zcmp                            ;Z compare conformance test
misorbit
chessbrd
clockwrk
rteapot
skulls
snowfall

[XNetRef]
cfgFlags=0x01                   ;bypass security

[misorbit]
TimeDuration=60

[chessbrd]
TimeDuration=60

[clockwrk]
TimeDuration=60

[rteapot]
TimeDuration=60

[skulls]
TimeDuration=60

[snowfall]
TimeDuration=60
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\harness\ini\func\testini.ini ===
;*****************************************************************************
; Global Settings - if there is no per-module setting, global setting will be used
;*****************************************************************************
[GeneralSettings]
NtGlobalFlags=0x30                  ;Default is  FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK
StressTestMode=1                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=100                 ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=0                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=0x01ff                     ;default is enabled all levels except XLL_VARIATION_TIME
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=65536               ;default is 64K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;*****************************************************************************
; List of the test modules to be loaded and executed
;*****************************************************************************
[TestList]
alphabnt                        ;Alpha blending and testing
ball                            ;Vertex blending
basic                           ;Basic test
bees                            ;Old Meltdown sample
bumpduv1                        ;DX6 style bump mapping
clipping
depthbuf                        ;Z and W buffering
dlight                          ;Old point light Meltdown sample
dxtnoise                        ;DXT1 decompression noise test
;fsaa                            ;Multisampling and supersampling
fvertex1                        ;Fixed function rendering
gammarmp                        ;Gamma ramps
getrstat                        ;Raster status
hightide                        ;UP rendering of complex models
ibuffer                         ;Index buffer tests
innrloop                        ;Rendering tests
lightball                       ;DX6-style bump mapping
;lighting
litetype                        ;Fixed function lighting
lockdepth
matsrc                          ;Material source lighting test
mstage1
mstage2
;mstage4
mstage5
multilight                      ;Multilight test
mxpalskin                       ;Matrix palette skinning
obelisk
palette0
pslights
psverify
reflect0
stencil0
terrain
texform
texgen
texgenxt
textr1
textr2
textr3
textr4
textr5
tunnel
vbbatch
vbib
vpshadr1
vshader
wireframe

[XNetRef]
cfgFlags=0x01                   ;bypass security

[alphabnt]
TimeDuration=10

[basic]
TimeDuration=10

[bees]
TimeDuration=20

[bumpduv1]
TimeDuration=30

[dlight]
TimeDuration=20

[dxtnoise]
TimeDuration=10

[fvertex1]
TimeDuration=10

[hightide]
TimeDuration=20

[mstage1]
TimeDuration=10

[mstage2]
TimeDuration=10

[mstage3]
TimeDuration=10

[mstage4]
TimeDuration=10

[mstage5]
TimeDuration=10

[obelisk]
TimeDuration=20

[palette0]
TimeDuration=20

[pslights]
TimeDuration=60

[psverify]
FrameDuration=200

[stencil0]
TimeDuration=10

[terrain]
TimeDuration=10

[texgenxt]
TimeDuration=10

[textr1]
TimeDuration=2

[textr2]
TimeDuration=2

[textr3]
TimeDuration=2

[textr5]
TimeDuration=2

[tunnel]
TimeDuration=2

[vpshadr1]
TimeDuration=5
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\harness\ini\init\testini.ini ===
;*****************************************************************************
; Global Settings - if there is no per-module setting, global setting will be used
;*****************************************************************************
[GeneralSettings]
NtGlobalFlags=0x30                  ;Default is  FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK
StressTestMode=1                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=100                 ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=0                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=0x01ff                     ;default is enabled all levels except XLL_VARIATION_TIME
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=65536               ;default is 64K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;*****************************************************************************
; List of the test modules to be loaded and executed
;*****************************************************************************
[TestList]
misorbit
chessbrd
clockwrk
rteapot
skulls
snowfall
address                         ;Texture addressing conformance test
alphabld                        ;Alpha blending conformance test
alphacmp                        ;Alpha compare conformance test
basicrst                        ;Basic rendering conformance test
blend                           ;Blending conformance test
bump                            ;DX6 style bump mapping conformance test
clear_test                      ;Clear conformance test
compress                        ;DXT texture compression conformance test
cubemap                         ;Cubemap conformance test
emboss                          ;Emboss mapping conformance test
fog                             ;Fog conformance test
gradient                        ;Gradient texture conformance test
lightmap                        ;Light map conformance test
linetex                         ;Textured line conformance test
luminanc                        ;Luminance conformance test
mapping                         ;Texture mapping conformance test
mipfilter                       ;Mip filtering conformance test
overdraw                        ;Overdraw conformance test
perspective                     ;Texture perspective conformance test
pointsprite                     ;Point sprites conformance test
pointtex                        ;Textured point conformance test
pshader                         ;Pixel shader conformance test
srt                             ;SetRenderTarget conformance test
;stateblocks                     ;State blocks conformance test
stencil                         ;Stencil conformance test
texturestage                    ;Multitexturing conformance test
tlvertexclip                    ;Vertex clipping conformance test
volume                          ;Volume texture conformance test
wbuffer                         ;W buffering conformance test
wcmp                            ;W compare conformance test
zbuffer                         ;Z buffering conformance test
zcmp                            ;Z compare conformance test
alphabnt                        ;Alpha blending and testing
ball                            ;Vertex blending
basic                           ;Basic test
bees                            ;Old Meltdown sample
bumpduv1                        ;DX6 style bump mapping
clipping
depthbuf                        ;Z and W buffering
dlight                          ;Old point light Meltdown sample
dxtnoise                        ;DXT1 decompression noise test
fsaa                            ;Multisampling and supersampling
fvertex1                        ;Fixed function rendering
;gammarmp                        ;Gamma ramps
getrstat                        ;Raster status
hightide                        ;UP rendering of complex models
ibuffer                         ;Index buffer tests
innrloop                        ;Rendering tests
lightball                       ;DX6-style bump mapping
lighting
;litetype                        ;Fixed function lighting
lockdepth
matsrc                          ;Material source lighting test
mstage1
mstage2
;mstage4
mstage5
multilight                      ;Multilight test
mxpalskin                       ;Matrix palette skinning
obelisk
palette0
pslights
psverify
reflect0
stencil0
terrain
texform
texgen
texgenxt
textr1
textr2
textr3
textr4
textr5
tunnel
vbbatch
vbib
vpshadr1
vshader
wireframe

[XNetRef]
cfgFlags=0x01                   ;bypass security

[misorbit]
FrameDuration=1

[chessbrd]
FrameDuration=1

[clockwrk]
FrameDuration=1

[rteapot]
FrameDuration=1

[skulls]
FrameDuration=1

[snowfall]
FrameDuration=1

[address]
FrameDuration=1

[alphabld]
FrameDuration=1

[alphacmp]
FrameDuration=1

[basicrst]
FrameDuration=1

[blend]
FrameDuration=1

[bump]
FrameDuration=1

[clear_test]
FrameDuration=1

[compress]
FrameDuration=1

[cubemap]
FrameDuration=1

[emboss]
FrameDuration=1

[fog]
FrameDuration=1

[gradient]
FrameDuration=1

[lightmap]
FrameDuration=1

[linetex]
FrameDuration=1

[luminanc]
FrameDuration=1

[mapping]
FrameDuration=1

[mipfilter]
FrameDuration=1

[overdraw]
FrameDuration=1

[perspective]
FrameDuration=1

[pointsprite]
FrameDuration=1

[pointtex]
FrameDuration=1

[pshader]
FrameDuration=1

[srt]
FrameDuration=1

[stencil]
FrameDuration=1

[texturestage]
FrameDuration=1

[tlvertexclip]
FrameDuration=1

[volume]
FrameDuration=1

[wbuffer]
FrameDuration=1

[wcmp]
FrameDuration=1

[zbuffer]
FrameDuration=1

[zcmp]
FrameDuration=1

[alphabnt]
FrameDuration=1

[ball]
FrameDuration=1

[basic]
FrameDuration=1

[bees]
FrameDuration=1

[bumpduv1]
FrameDuration=1

[clipping]
FrameDuration=1

[depthbuf]
FrameDuration=1

[dlight]
FrameDuration=1

[dxtnoise]
FrameDuration=1

[fsaa]
FrameDuration=1

[fvertex1]
FrameDuration=1

[gammarmp]
FrameDuration=1

[hightide]
FrameDuration=1

[ibuffer]
FrameDuration=1

[innrloop]
FrameDuration=1

[lightball]
FrameDuration=1

[lighting]
FrameDuration=1

[litetype]
FrameDuration=1

[lockdepth]
FrameDuration=1

[matsrc]
FrameDuration=1

[mstage1]
FrameDuration=1

[mstage2]
FrameDuration=1

[mstage3]
FrameDuration=1

[mstage4]
FrameDuration=1

[mstage5]
FrameDuration=1

[multilight]
FrameDuration=1

[mxpalskin]
FrameDuration=1

[obelisk]
FrameDuration=1

[palette0]
FrameDuration=1

[pslights]
FrameDuration=1

[psverify]
FrameDuration=1

[reflect0]
FrameDuration=1

[stencil0]
FrameDuration=1

[terrain]
FrameDuration=1

[texform]
FrameDuration=1

[texgen]
FrameDuration=1

[texgenxt]
FrameDuration=1

[textr1]
FrameDuration=1

[textr2]
FrameDuration=1

[textr3]
FrameDuration=1

[textr5]
FrameDuration=1

[tunnel]
FrameDuration=1

[vbbatch]
FrameDuration=1

[vbib]
FrameDuration=1

[vpshadr1]
FrameDuration=1

[vshader]
FrameDuration=1

[wireframe]
FrameDuration=1
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\benmark5.ini ===
[BENMARK5]
Loops = 2

[LOOP0]	; Parameters for the first loop
ApplyTextures = 0	;(0...2), default=0
UseTriList = 0		;1=TRUE, 0=FALSE, default=FALSE
Zenable = 1			;1=TRUE, 0=FALSE, default=TRUE
Specularenable = 0	;1=TRUE, 0=FALSE, default=FALSE
Localviewer = 0		;1=TRUE, 0=FALSE, default=FALSE

DirectionalLights = 1	;(0...oo), default=1 
SpotLights = 0		;(0...oo), default=0
PointLights = 0		;(0...oo), default=0

DrawFunc = 0		;default=DF_DRAWINDEXEDPRIMITIVE=0,else DF_DRAWINDEXEDPRIMITIVEUP=1
Precompile = 0		;1=TRUE, 0=FALSE, default=FALSE
FillMode = 6914		;use INT representation of D3DFILLMODE, default=D3DFILL_SOLID=0x1b02=6914

Time = 5000		;time in ms to run test, default=60000

[LOOP1]	; PArameters for the second loop
ApplyTextures = 2	;(0...2), default=0
UseTriList = 0		;1=TRUE, 0=FALSE, default=FALSE
Zenable = 1			;1=TRUE, 0=FALSE, default=TRUE
Specularenable = 0	;1=TRUE, 0=FALSE, default=FALSE
Localviewer = 0		;1=TRUE, 0=FALSE, default=FALSE

DirectionalLights = 1	;(0...oo), default=1 
SpotLights = 0		;(0...oo), default=0
PointLights = 0		;(0...oo), default=0

DrawFunc = 0		;default=DF_DRAWINDEXEDPRIMITIVE=0,else DF_DRAWINDEXEDPRIMITIVEUP=1
Precompile = 0		;1=TRUE, 0=FALSE, default=FALSE
FillMode = 6914		;use INT representation of D3DFILLMODE, default=D3DFILL_SOLID=0x1b02=6914

Time = 5000		;time in ms to run test, default=60000
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\fillrate.ini ===
;
; fillrate.ini
;

;
; some simple mappings
;

[defines]
$TEXINPUT = PS_REGISTER_T0
$COMPAREMODE = PS_COMPAREMODE_S_LT

;
; main fillrate options
;
[FILLRATE]
Loops = 1

[LOOP0]
AutoDepthStencilFormat = D3DFMT_D16
BackBufferFormat = D3DFMT_X8R8G8B8; // D3DFMT_R5G6B5

;; Number of samples, sample type, and filter:
;
;D3DMS_NONE
;D3DMS_2_SAMPLES_MULTISAMPLE_LINEAR
;D3DMS_2_SAMPLES_MULTISAMPLE_QUINCUNX
;D3DMS_4_SAMPLES_MULTISAMPLE_LINEAR
;D3DMS_4_SAMPLES_MULTISAMPLE_GAUSSIAN
;D3DMS_9_SAMPLES_MULTISAMPLE_GAUSSIAN
;D3DMS_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR
;D3DMS_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR
;D3DMS_4_SAMPLES_SUPERSAMPLE_LINEAR
;D3DMS_4_SAMPLES_SUPERSAMPLE_GAUSSIAN
;D3DMS_9_SAMPLES_SUPERSAMPLE_GAUSSIAN

;; Format of the pre-filter (big) color buffer
;D3DMS_PREFILTER_FORMAT_DEFAULT
;D3DMS_PREFILTER_FORMAT_X1R5G5B5
;D3DMS_PREFILTER_FORMAT_R5G6B5
;D3DMS_PREFILTER_FORMAT_X8R8G8B8
;D3DMS_PREFILTER_FORMAT_A8R8G8B8

MSType = D3DMS_NONE
MSFormat = D3DMS_PREFILTER_FORMAT_DEFAULT

numberscenes = 0        ; # of scenes to draw
                        ; (set to 0 to use testtime instead)
testtime = 5000         ; test time (ms)
timeflags = TIME_Render ; what to time (TIME_Present | TIME_Render)

zenable = 0
zwriteenable = 0
d3dcmpfunc = D3DCMP_NOTEQUAL

primez = 0;
primezcmpfunc = D3DCMP_ALWAYS;

alphablendenable = 0
alphatestenable = 0

rotatetex = 0
SwathWidth = D3DSWATH_128

clearflags = D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL
zclearval = 1.0f
sclearval = 0
cclearval = 0x00006688

quadwidth = 640
quadheight = 480
quadx = 0
quady = 0

FVF = D3DFVF_XYZRHW | D3DFVF_TEX1 | D3DFVF_DIFFUSE;

userpixelshader = 0
runtestonreload = 1
verboselevel = 1
verboseinireads = 1

colorwriteenable = D3DCOLORWRITEENABLE_ALL;

[LOOP1]
AutoDepthStencilFormat = D3DFMT_D16
BackBufferFormat = D3DFMT_R5G6B5

;; Number of samples, sample type, and filter:
;
;D3DMS_NONE
;D3DMS_2_SAMPLES_MULTISAMPLE_LINEAR
;D3DMS_2_SAMPLES_MULTISAMPLE_QUINCUNX
;D3DMS_4_SAMPLES_MULTISAMPLE_LINEAR
;D3DMS_4_SAMPLES_MULTISAMPLE_GAUSSIAN
;D3DMS_9_SAMPLES_MULTISAMPLE_GAUSSIAN
;D3DMS_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR
;D3DMS_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR
;D3DMS_4_SAMPLES_SUPERSAMPLE_LINEAR
;D3DMS_4_SAMPLES_SUPERSAMPLE_GAUSSIAN
;D3DMS_9_SAMPLES_SUPERSAMPLE_GAUSSIAN

;; Format of the pre-filter (big) color buffer
;D3DMS_PREFILTER_FORMAT_DEFAULT
;D3DMS_PREFILTER_FORMAT_X1R5G5B5
;D3DMS_PREFILTER_FORMAT_R5G6B5
;D3DMS_PREFILTER_FORMAT_X8R8G8B8
;D3DMS_PREFILTER_FORMAT_A8R8G8B8

MSType = D3DMS_NONE
MSFormat = D3DMS_PREFILTER_FORMAT_DEFAULT

numberscenes = 0        ; # of scenes to draw
                        ; (set to 0 to use testtime instead)
testtime = 5000         ; test time (ms)
timeflags = TIME_Render ; what to time (TIME_Present | TIME_Render)

zenable = 0
zwriteenable = 0
d3dcmpfunc = D3DCMP_NOTEQUAL

primez = 0;
primezcmpfunc = D3DCMP_ALWAYS;

alphablendenable = 0
alphatestenable = 0

rotatetex = 0
SwathWidth = D3DSWATH_128

clearflags = D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL
zclearval = 1.0f
sclearval = 0
cclearval = 0x00006688

quadwidth = 640
quadheight = 480
quadx = 0
quady = 0

FVF = D3DFVF_XYZRHW | D3DFVF_TEX1 | D3DFVF_DIFFUSE;

userpixelshader = 0
runtestonreload = 1
verboselevel = 1
verboseinireads = 1

colorwriteenable = D3DCOLORWRITEENABLE_ALL;

;
; Texture stages
;

[texture0]
type        = TEX_None;     ; TEX_None, TEX_2d, TEX_Cubemap, TEX_Volume
texsize     = 64
d3dFormat   = D3DFMT_A4R4G4B4
filtertype  = D3DTEXF_POINT

[texture1]
type        = TEX_None
texsize     = 256
d3dFormat   = D3DFMT_A4R4G4B4
filtertype  = D3DTEXF_LINEAR

[texture2]
type        = TEX_None
texsize     = 256
d3dFormat   = D3DFMT_A4R4G4B4
filtertype  = D3DTEXF_LINEAR

[texture3]
type        = TEX_None
texsize     = 256
d3dFormat   = D3DFMT_A4R4G4B4
filtertype  = D3DTEXF_LINEAR

;
; Texture addressing modes (user pixel shaders)
;

[PSTextureModes]
t0 = PS_TEXTUREMODES_PROJECT2D
t1 = PS_TEXTUREMODES_PROJECT2D
t2 = PS_TEXTUREMODES_PROJECT2D
t3 = PS_TEXTUREMODES_PROJECT2D

; Texture source for some texture modes
[PSInputTexture]
t2 = 0
t3 = 0

; Compare modes for clipplane texture mode
[PSCompareMode]
t0 = $COMPAREMODE
t1 = $COMPAREMODE
t2 = $COMPAREMODE
t3 = $COMPAREMODE

; Input mapping for dot product modes
[PSDotMapping]
t0 = PS_DOTMAPPING_MINUS1_TO_1_D3D
t1 = PS_DOTMAPPING_MINUS1_TO_1_D3D
t2 = PS_DOTMAPPING_MINUS1_TO_1_D3D
t3 = PS_DOTMAPPING_MINUS1_TO_1_D3D

; Active combiner count (Stages 0-7)
[PSCombinerCount]
count = 1
flags = PS_COMBINERCOUNT_MUX_LSB | PS_COMBINERCOUNT_SAME_C0 | PS_COMBINERCOUNT_SAME_C1

; C0 for each stage
[PSConstant0]
C0 = 0
C1 = 0
C2 = 0
C3 = 0
C4 = 0
C5 = 0
C6 = 0
C7 = 0

; C1 for each stage
[PSConstant1]
C0 = 0
C1 = 0
C2 = 0
C3 = 0
C4 = 0
C5 = 0
C6 = 0
C7 = 0

; RGB inputs for each stage
[PSRGBInputs]
A0 = $TEXINPUT | PS_INPUTMAPPING_SIGNED_IDENTITY | PS_CHANNEL_RGB
B0 = PS_REGISTER_ZERO | PS_INPUTMAPPING_UNSIGNED_INVERT
C0 = PS_REGISTER_ZERO
D0 = PS_REGISTER_ZERO
A1 = PS_REGISTER_ZERO
B1 = PS_REGISTER_ZERO
C1 = PS_REGISTER_ZERO
D1 = PS_REGISTER_ZERO
A2 = PS_REGISTER_ZERO
B2 = PS_REGISTER_ZERO
C2 = PS_REGISTER_ZERO
D2 = PS_REGISTER_ZERO
A3 = PS_REGISTER_ZERO
B3 = PS_REGISTER_ZERO
C3 = PS_REGISTER_ZERO
D3 = PS_REGISTER_ZERO
A4 = PS_REGISTER_ZERO
B4 = PS_REGISTER_ZERO
C4 = PS_REGISTER_ZERO
D4 = PS_REGISTER_ZERO
A5 = PS_REGISTER_ZERO
B5 = PS_REGISTER_ZERO
C5 = PS_REGISTER_ZERO
D5 = PS_REGISTER_ZERO
A6 = PS_REGISTER_ZERO
B6 = PS_REGISTER_ZERO
C6 = PS_REGISTER_ZERO
D6 = PS_REGISTER_ZERO
A7 = PS_REGISTER_ZERO
B7 = PS_REGISTER_ZERO
C7 = PS_REGISTER_ZERO
D7 = PS_REGISTER_ZERO

; Alpha inputs for each stage
[PSAlphaInputs]
A0 = $TEXINPUT | PS_INPUTMAPPING_UNSIGNED_IDENTITY | PS_CHANNEL_ALPHA
B0 = PS_REGISTER_ZERO | PS_INPUTMAPPING_UNSIGNED_INVERT
C0 = PS_REGISTER_ZERO
D0 = PS_REGISTER_ZERO
A1 = PS_REGISTER_ZERO
B1 = PS_REGISTER_ZERO
C1 = PS_REGISTER_ZERO
D1 = PS_REGISTER_ZERO
A2 = PS_REGISTER_ZERO
B2 = PS_REGISTER_ZERO
C2 = PS_REGISTER_ZERO
D2 = PS_REGISTER_ZERO
A3 = PS_REGISTER_ZERO
B3 = PS_REGISTER_ZERO
C3 = PS_REGISTER_ZERO
D3 = PS_REGISTER_ZERO
A4 = PS_REGISTER_ZERO
B4 = PS_REGISTER_ZERO
C4 = PS_REGISTER_ZERO
D4 = PS_REGISTER_ZERO
A5 = PS_REGISTER_ZERO
B5 = PS_REGISTER_ZERO
C5 = PS_REGISTER_ZERO
D5 = PS_REGISTER_ZERO
A6 = PS_REGISTER_ZERO
B6 = PS_REGISTER_ZERO
C6 = PS_REGISTER_ZERO
D6 = PS_REGISTER_ZERO
A7 = PS_REGISTER_ZERO
B7 = PS_REGISTER_ZERO
C7 = PS_REGISTER_ZERO
D7 = PS_REGISTER_ZERO

; Stage 0 RGB outputs
[PSRGBOutputs]
ab0         = PS_REGISTER_R0
cd0         = PS_REGISTER_DISCARD
mux_sum0    = PS_REGISTER_DISCARD
flags0      = PS_COMBINEROUTPUT_IDENTITY | PS_COMBINEROUTPUT_AB_MULTIPLY
ab1         = PS_REGISTER_ZERO
cd1         = PS_REGISTER_ZERO
mux_sum1    = PS_REGISTER_DISCARD
flags1      = PS_COMBINEROUTPUT_IDENTITY
ab2         = PS_REGISTER_ZERO
cd2         = PS_REGISTER_ZERO
mux_sum2    = PS_REGISTER_DISCARD
flags2      = PS_COMBINEROUTPUT_IDENTITY
ab3         = PS_REGISTER_ZERO
cd3         = PS_REGISTER_ZERO
mux_sum3    = PS_REGISTER_DISCARD
flags3      = PS_COMBINEROUTPUT_IDENTITY
ab4         = PS_REGISTER_ZERO
cd4         = PS_REGISTER_ZERO
mux_sum4    = PS_REGISTER_DISCARD
flags4      = PS_COMBINEROUTPUT_IDENTITY
ab5         = PS_REGISTER_ZERO
cd5         = PS_REGISTER_ZERO
mux_sum5    = PS_REGISTER_DISCARD
flags5      = PS_COMBINEROUTPUT_IDENTITY
ab6         = PS_REGISTER_ZERO
cd6         = PS_REGISTER_ZERO
mux_sum6    = PS_REGISTER_DISCARD
flags6      = PS_COMBINEROUTPUT_IDENTITY
ab7         = PS_REGISTER_ZERO
cd7         = PS_REGISTER_ZERO
mux_sum7    = PS_REGISTER_DISCARD
flags7      = PS_COMBINEROUTPUT_IDENTITY

; Alpha output for each stage
[PSAlphaOutputs]
ab0         = PS_REGISTER_R0
cd0         = PS_REGISTER_DISCARD
mux_sum0    = PS_REGISTER_DISCARD
flags0      = PS_COMBINEROUTPUT_IDENTITY | PS_COMBINEROUTPUT_AB_MULTIPLY
ab1         = PS_REGISTER_ZERO
cd1         = PS_REGISTER_ZERO
mux_sum1    = PS_REGISTER_DISCARD
flags1      = PS_COMBINEROUTPUT_IDENTITY
ab2         = PS_REGISTER_ZERO
cd2         = PS_REGISTER_ZERO
mux_sum2    = PS_REGISTER_DISCARD
flags2      = PS_COMBINEROUTPUT_IDENTITY
ab3         = PS_REGISTER_ZERO
cd3         = PS_REGISTER_ZERO
mux_sum3    = PS_REGISTER_DISCARD
flags3      = PS_COMBINEROUTPUT_IDENTITY
ab4         = PS_REGISTER_ZERO
cd4         = PS_REGISTER_ZERO
mux_sum4    = PS_REGISTER_DISCARD
flags4      = PS_COMBINEROUTPUT_IDENTITY
ab5         = PS_REGISTER_ZERO
cd5         = PS_REGISTER_ZERO
mux_sum5    = PS_REGISTER_DISCARD
flags5      = PS_COMBINEROUTPUT_IDENTITY
ab6         = PS_REGISTER_ZERO
cd6         = PS_REGISTER_ZERO
mux_sum6    = PS_REGISTER_DISCARD
flags6      = PS_COMBINEROUTPUT_IDENTITY
ab7         = PS_REGISTER_ZERO
cd7         = PS_REGISTER_ZERO
mux_sum7    = PS_REGISTER_DISCARD
flags7      = PS_COMBINEROUTPUT_IDENTITY

[PSFinalCombinerConstant0]
C = 0

[PSFinalCombinerConstant1]
C = 0

; Final combiner inputs (AB + (1-A)C + D)
[PSFinalCombinerInputsABCD]
A = PS_REGISTER_ZERO
B = PS_REGISTER_R0 | PS_INPUTMAPPING_UNSIGNED_IDENTITY | PS_CHANNEL_RGB
C = PS_REGISTER_R0 | PS_INPUTMAPPING_UNSIGNED_IDENTITY | PS_CHANNEL_RGB
D = PS_REGISTER_ZERO

; Final combiner inputs (continued)
[PSFinalCombinerInputsEFG]
E = PS_REGISTER_ZERO
F = PS_REGISTER_ZERO
G = PS_REGISTER_R0 | PS_INPUTMAPPING_UNSIGNED_IDENTITY | PS_CHANNEL_ALPHA
flags = PS_FINALCOMBINERSETTING_CLAMP_SUM
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\framework.ini ===
[FRAMEWORK]

RunBenMark	=	1
RunFillRate	=	1
RunFsaa		=	1
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\fsaa.ini ===
[FSAA]
Loops = 2

[LOOP0]
Type	= 9		;(0...10), default=0
Format	= 0		;(0...3), default=0
Flicker	= 4		;(0...4), default=4

Time	= 5000	;time in ms to run test, default=60000

[LOOP1]
Type	= 0		;(0...10), default=0
Format	= 0		;(0...3), default=0
Flicker	= 4		;(0...4), default=4

Time	= 5000	;time in ms to run test, default=60000
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\dplay\core\client\testini.ini ===
;
; Global Settings - if there is no per-module setting, global setting will be used
;
[GeneralSettings]
NtGlobalFlags=0x30                  ;Default is  FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK
StressTestMode=0                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=10000               ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=-1                         ;default is XLL_LOGALL
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=16384               ;default is 16K
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;
; List of the test modules to be loaded and executed
;
[TestList]
dptest

[dptest]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\dplay\docs\xdptest.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft DirectPlay for Xbox Test Plan Title _PID_HLINKSDirectPlay for Xbox Test Plan Tristan Jackson (tristanj) DirectPlay DPlay X-box Xbox FOGHORN.DOT Tristan Jackson Microsoft Word 9.00!p#`' !W8&U: elB2x  f[2x @\\RED-PRN-16\CORP0131 Ne00: winspool Xerox Document Centre 255 PS \\RED-PRN-16\CORP0131 Letter \\RED-PRN-16\CORP0131 Letter?Dg\: u*qz: v^'NAI+ (>u2n B-a[. MS'vt?i )Cf+>i0a gXv'ObjbjU DirectPlay8 for Xbox Test Plan Xbox OS Test Team xdptest.doc Written by: Tristan Jackson (  HYPERLINK "mailto:tristanj@microsoft.com"  mailto:tristanj@microsoft.com Revision 0.3 SAVEDATE \@ "MMMM d, yyyy" October 26, 2000 Confidential Information in this document is subject to change without notice. Companies, names, and data used in examples herein are fictitious unless otherwise noted. No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, for any purpose, without the express written permission of Microsoft Corporation. Published by  Microsoft Corporation  One Microsoft Way  Redmond, WA 98052-6399 Telephone (425) 882-8080 2000 Microsoft Corporation. All rights reserved. Printed in the USA. Microsoft, MS-DOS, and MS are registered trademarks of Microsoft Corporation. Contents  TOC \o "1-4"  Contents  PAGEREF _Toc497289173 \h  Document History  PAGEREF _Toc497289174 \h  Overview  PAGEREF _Toc497289175 \h  Open Issues  PAGEREF _Toc497289176 \h  Differences Between Xbox and Desktop Implementations  PAGEREF _Toc497289177 \h  Supported API  PAGEREF _Toc497289178 \h  Peer API s (IDirectPlay8Peer)  PAGEREF _Toc497289179 \h  Client API s (IDirectPlay8Client)  PAGEREF _Toc497289180 \h  Server API s (IDirectPlay8Server)  PAGEREF _Toc497289181 \h  Address API  not service provider specific (IDirectPlay8Address)  PAGEREF _Toc497289182 \h  Address API  IP specific (IDirectPlay8AddressIP)  PAGEREF _Toc497289183 \h  Unsupported API  PAGEREF _Toc497289184 \h  Peer API s (IDirectPlay8Peer)  PAGEREF _Toc497289185 \h  Client API s (IDirectPlay8Client)  PAGEREF _Toc497289186 \h  Server API s (IDirectPlay8Server)  PAGEREF _Toc497289187 \h  Lobby Client API s (IDirectPlay8LobbyClient)  PAGEREF _Toc497289188 \h  Lobbied Application API s (IDirectPlay8LobbiedApplication)  PAGEREF _Toc497289189 \h  Existing DirectPlay Test Resources  PAGEREF _Toc497289190 \h  Test Plans  PAGEREF _Toc497289191 \h  Test Tools  PAGEREF _Toc497289192 \h  Network State Test Tools  PAGEREF _Toc497289193 \h  Stress Test Tools  PAGEREF _Toc497289194 \h  Release Criteria  PAGEREF _Toc497289195 \h  Alpha 2 (Early December)  PAGEREF _Toc497289196 \h  Test Methodology  PAGEREF _Toc497289197 \h  Overview  PAGEREF _Toc497289198 \h  BVT/API Testing  PAGEREF _Toc497289199 \h  IDirectPlay8PeerTests  PAGEREF _Toc497289200 \h  DirectPlay8Create  PAGEREF _Toc497289201 \h  Initialize  PAGEREF _Toc497289202 \h  EnumServiceProviders  PAGEREF _Toc497289203 \h  CancelAsyncOperation  PAGEREF _Toc497289204 \h  Connect  PAGEREF _Toc497289205 \h  SendTo  PAGEREF _Toc497289206 \h  GetSendQueueInfo  PAGEREF _Toc497289207 \h   PAGEREF _Toc497289208 \h  GetApplicationDesc  PAGEREF _Toc497289209 \h  SetApplicationDesc  PAGEREF _Toc497289210 \h  CreateGroup  PAGEREF _Toc497289211 \h  DestroyGroup  PAGEREF _Toc497289212 \h  AddPlayerToGroup  PAGEREF _Toc497289213 \h  RemovePlayerFromGroup  PAGEREF _Toc497289214 \h  SetGroupInfo  PAGEREF _Toc497289215 \h  GetGroupInfo  PAGEREF _Toc497289216 \h  EnumPlayersAndGroups  PAGEREF _Toc497289217 \h  EnumGroupMembers  PAGEREF _Toc497289218 \h  SetPeerInfo  PAGEREF _Toc497289219 \h  GetPeerInfo  PAGEREF _Toc497289220 \h  Close  PAGEREF _Toc497289221 \h  EnumHosts  PAGEREF _Toc497289222 \h  DestroyPeer  PAGEREF _Toc497289223 \h  ReturnBuffer  PAGEREF _Toc497289224 \h  GetPlayerContext  PAGEREF _Toc497289225 \h  GetGroupContext  PAGEREF _Toc497289226 \h  GetCaps  PAGEREF _Toc497289227 \h  SetCaps  PAGEREF _Toc497289228 \h  SetSPCaps  PAGEREF _Toc497289229 \h  GetSPCaps  PAGEREF _Toc497289230 \h  GetConnectionInfo  PAGEREF _Toc497289231 \h  TerminateSession  PAGEREF _Toc497289232 \h  Stress Testing  PAGEREF _Toc497289233 \h  Network State Testing  PAGEREF _Toc497289234 \h  Host Migration  PAGEREF _Toc497289235 \h  Original host player leaving/dropping  PAGEREF _Toc497289236 \h  Chain-of-command disruption  PAGEREF _Toc497289237 \h  Simultaneous operation  PAGEREF _Toc497289238 \h  Connection/disconnection  PAGEREF _Toc497289239 \h  Simultaneous player connection/disconnection operations  PAGEREF _Toc497289240 \h  Hybrid procedural/parameter validation  PAGEREF _Toc497289241 \h  Sends  PAGEREF _Toc497289242 \h  Verification  PAGEREF _Toc497289243 \h  Hybrid procedural/parameter validation  PAGEREF _Toc497289244 \h  Groups  PAGEREF _Toc497289245 \h  Operations while players leaving/joining  PAGEREF _Toc497289246 \h  Hybrid procedural/parameter validation cases  PAGEREF _Toc497289247 \h  Enumerations  PAGEREF _Toc497289248 \h  Hybrid procedural/parameter validation cases  PAGEREF _Toc497289249 \h  Other notes  PAGEREF _Toc497289250 \h  Document History Revision Action Author 6/20/2000 Initial draft Tristan Jackson (tristanj) 8/1/2000 Updated with planned DirectPlay8 cases and tools to port Tristan Jackson (tristanj) 10/27/2000 Updated with release criteria for Alpha 2 release in December and added details on peer interface tests Tristan Jackson (tristanj) Overview Open Issues Will Xbox support server and client API s?  For what releases? What level of parameter checking will be present?  Will all error conditions cause an ASSERT? Differences Between Xbox and Desktop Implementations Supported API Currently, the DirectPlay8 interfaces are only documented in Beta versions of the DirectX 8 SDK.  From looking at the information there, I ve come up with the following basic list of API s.  The DirectVoice API s are made up of 3 interfaces   IdirectPlayVoiceClient, IdirectPlayVoiceServer and IDirectPlayVoiceTest.  These interfaces have been left out of this test plan pending an Xbox spec. Peer API s (IDirectPlay8Peer) AddPlayerToGroup CancelAsyncOperation Close Connect CreateGroup DestroyPeer DestroyGroup EnumPlayersAndGroups EnumGroupMembers EnumHosts EnumServiceProviders GetApplicationDesc GetCaps GetConnectionInfo GetGroupContext GetGroupInfo GetLocalHostAddresses GetPeerAddress GetPeerInfo GetPlayerContext GetSendQueueInfo GetSPCaps Initialize RemovePlayerFromGroup ReturnBuffer SendTo SetApplicationDesc SetCaps SetGroupInfo SetPeerInfo SetSPCaps TerminateSession Client API s (IDirectPlay8Client) CancelAsyncOperation Close Connect EnumHosts EnumServiceProviders GetApplicationDesc GetCaps GetConnectionInfo GetSendQueueInfo GetServerAddress GetServerInfo GetSPCaps Initialize ReturnBuffer SetCaps SetClientInfo SetSPCaps Server API s (IDirectPlay8Server) AddPlayerToGroup CancelAsyncOperation Close CreateGroup DestroyGroup EnumPlayersAndGroups EnumGroupMembers EnumServiceProviders GetApplicationDesc GetCaps GetClientAddress GetClientInfo GetConnectionInfo GetGroupContext GetLocalHostAddresses GetPlayerContext GetSendQueueInfo GetSPCaps Initialize RemovePlayerFromGroup ReturnBuffer SendTo SetApplicationDesc SetCaps SetGroupInfo SetServerInfo SetSPCaps Address API  not service provider specific (IDirectPlay8Address) BuildFromURLW BuildFromURLA Duplicate SetEqual IsEqual Clear GetURLW GetURLA GetSP GetUserData SetSP SetUserData GetNumComponents GetComponentByName GetComponentByIndex AddComponent GetDevice SetDevice BuildFromDPADDRESS Address API  IP specific (IDirectPlay8AddressIP) Duplicate SetEqual IsEqual GetURLW GetURLA GetUserData SetUserData BuildFromSockAddr Build Address BuildLocalAddress GetSockAddress GetLocalAddress GetAddress Unsupported API Because Xbox DirectPlay doesn t support lobbying, all of those API s are unsupported.  Other API s that existed for legacy application compatibility are also unsupported. Peer API s (IDirectPlay8Peer) RegisterLobby Client API s (IDirectPlay8Client) RegisterLobby Server API s (IDirectPlay8Server) RegisterLobby Lobby Client API s (IDirectPlay8LobbyClient) All API Lobbied Application API s (IDirectPlay8LobbiedApplication) All API Existing DirectPlay Test Resources Test Plans Core Test Plan   useful to Xbox testing, many tests carry-over  HYPERLINK "\\\\directx1\\public\\VSS\\Dplay\\Docs\\Test Dev Plans\\Dplay8 Core Test Plan.doc"  \\directx1\public\VSS\Dplay\Docs\Test Dev Plans\Dplay8 Core Test Plan.doc Voice Test Plan   useful to Xbox testing, many tests carry-over  HYPERLINK "\\\\directx1\\public\\VSS\\Dplay\\Docs\\Test Dev Plans/DPlay8Voice Test Plan.doc"  \\directx1\public\VSS\Dplay\Docs\Test Dev Plans/DPlay8Voice Test Plan.doc Lobby Test Plan   limited use to Xbox testing, possible Xmatch suggestions  HYPERLINK "\\\\directx1\\public\\VSS\\DPlay\\Docs\\Test Dev Plans\\DPlay8LobbyTestPlan.doc"  \\directx1\public\VSS\DPlay\Docs\Test Dev Plans\DPlay8LobbyTestPlan.doc Test Tools Network State Test Tools TestNet   automated test harness for distributed DPlay tests.  This harness allows for complex network events, such as hosts leaving and being disconnected from a session, to be scripted.  Much of the early effort for testing DirectPlay for Xbox has come via porting the TestNet harness and running the existing tests on the Xbox client.  Now that it has been decided that the Xbox version of DPlay will uses a polling model and Xbox will not support DLLs, it will be difficult to port the TestNet harness in its entirety.  Instead, the only modules that make up the DPlay8 TestNet tests will be ported (as much as is directly applicable to Xbox) and Netsync will be used as the synchronizing agent for tests, which require coordination between multiple machines.  If, at a later date, there is enough time available to look at porting the entire TestNet harness to Xbox, then it will be considered. To install the DirectPlay team s TestNet tools, run this batch file.  HYPERLINK "\\\\davis\\dplay\\testnet\\install.bat"  \\davis\dplay\testnet\install.bat Stress Test Tools DNSalvo   DirectPlay8 sends stress test  HYPERLINK "\\\\tell\\nt\\multimedia\\testsrc\\dplay\\dnsalvo"  \\tell\nt\multimedia\testsrc\dplay\dnsalvo DPVLoopy   DirectVoice loopback session test app  HYPERLINK "\\\\tell\\nt\\multimedia\\testsrc\\dplay\\dpvloopy"  \\tell\nt\multimedia\testsrc\dplay\dpvloopy Toast   Massively multiplayer test game  HYPERLINK "\\\\tell\\nt\\multimedia\\testsrc\\dplay\\toast"  \\tell\nt\multimedia\testsrc\dplay\toast Release Criteria Alpha 2 (Early December) The goal for Alpha 2 is to make DirectPlay available to developers such that they can begin experimenting with it and incorporating it into their titles in progress.  The quality bar is set below that of a beta product but should still be basically usable by developers.  Memory leaks and stress scenarios aren t as important as the basic ability to be able to set up communication sessions and exchange data.  Peer interfaces will be targeted above client and server cases.  For this release, the DirectX 8 SDK will be taken as the spec reference.  In later releases, when DirectPlay for Xbox changes from a callback model to a polling model, this dependence on the DirectX 8 SDK will be relaxed somewhat. DirectVoice will be tested to the extent that it integrates with DirectPlay.  DanRose will test all audio specific portions of DirectVoice. All IDirectPlay8Peer, IDirectPlay8Address and IDirectPlay8AddressIP functions must pass BVT and API level tests.  Some testing may be done on client and server interfaces, but these won t be a requirement for Alpha 2.  For Alpha 2, the majority of the API level testing will be done on a local machine without communicating via the network.    These tests are listed under the BVT/API Testing section. Must pass all network state tests such as host migration, connection/disconnection and enumeration.  These tests are listed under the Network State Testing section. Must pass thirty minutes of basic send/receive/group-management stress on the IDirectPlay8Peer interfaces in a session with 4 players.  This stress test will either be a ported version of DNSalvo, or a simple Xbox app that does something similar.  More information on these tests will be added to the Stress Testing section. Unless mentioned otherwise in the Xbox DirectPlay spec, all DirectPlay functions in the DirectX 8 SDK must at least have basic functionality.  Bugs will be RAIDed against anything that doesn t match these two sources.  These bugs must be resolved either by updating the Xbox DirectPlay spec, or fixing the function that has the problem. Must be able to setup and run a DirectVoice session over DirectPlay for 5 minutes.  More details on this Test Methodology Overview The initial goal of DirectPlay for Xbox testing will be to leverage tests from the DirectPlay team by porting them to the Xbox environment as quickly as possible.  Because the DirectPlay team s TestNet harness has dependencies on many things that are not present on Xbox (i.e. DLLs, callback model, local file system, registry, etc.) this will not be directly ported to Xbox at this time.  Instead, Netsync for Xbox will be used as a synchronizing agent for DirectPlay tests.  Many of these tests will be ported from TestNet test modules.   Several DirectPlay stress tests will also be ported.  Once porting is done and these tests can be run, any holes will be filled by creating Xbox-specific tests. BVT/API Testing Goal: Cover every DirectPlay8 API that will be supported by Xbox and call it with A case for each category of success (e.g. asynchronous, secure, etc.) A case for each error code indicating failure (debug only, retail will not have parameter checking) IDirectPlay8PeerTests DirectPlay8Create DirectPlay8PeerCreate with both pointers NULL DirectPlay8PeerCreate with voice pointer NULL DirectPlay8PeerCreate with peer pointer NULL DirectPlay8PeerCreate with both pointers valid Initialize Initialize with NULL context, handler and 0 flags using C++ macro Initialize with NULL context, handle and 0 flags Initialize with NULL context and invalid flags Initialize with 0 flags using C++ macro Initialize with 0 flags Initialize with 0 flags when already initialized Close initialized interface Re-initialize interface with 0 flags Close re-initialized interface Release initialized interface EnumServiceProviders Enumerating service providers with uninitialized interface, all NULLs and 0 flags using C++ macro Enumerating service providers with uninitialized interface, all NULLs and 0 flags Enumerating service providers with uninitialized interface, NULL GUIDs, NULL buffer, NULL size and 0 flags Enumerating service providers with uninitialized interface, NULL GUIDs, NULL buffer and invalid flags Initialize used interface with NULL context and 0 flags Enumerate service providers with NULL GUIDs, NULL buffer, non-zero size and 0 flags Enumerate service provider with NULL GUIDs, NULL buffer and 0 flags Enumerate service provider with NULL GUIDs, NULL buffer, non-zero count and 0 flags Enumerate service providers with NULL GUIDs and 0 flags Enumerate invalid service provider GUID devices Enumerate TCP/IP devices with invalid app GUID Enumerate TCP/IP devices with NULL GUIDs, NULL buffer and 0 flags Enumerate TCP/IP devices with NULL GUIDs and 0 flags Close used interface Release used interface CancelAsyncOperation Cancel async operation with uninitialized interface, NULL and 0 flags using C++ macro Cancel async operation with uninitialized interface, NULL and 0 flags Start async connect attempt to local address which will eventually fail Cancel async operation with invalid handle and 0 flags Cancel async operation with NULL handle and invalid flags Cancel async operation with valid connect handle and the CONNECT flag Cancel async operation with valid connect handle and ALL_OPERATIONS flag Cancel async operation with valid connect handle Wait for cancelled connection to complete Start second async connection to local address which will eventually fail Cancel async operations with ENUM flag Cancel async operations with CONNECT flag Wait for canceled connection to complete Close used interface Release used interface Connect Connect with uninitialized interface, all NULLs and 0 flags using C++ macro Connect with uninitialized interface, all NULLs and 0 flags Connect with uninitialized interface and NULL application description Connect with uninitialized interface and application description of size 0 Connect with uninitialized interface and application description too large Connect with uninitialized interface and invalid flags Connect with uninitialized interface and NULL host address Connect with uninitialized interface, empty host address and NULL device address Connect with uninitialized interface and non-NULL security descriptor Connect with uninitialized interface and non-NULL security credentials Connect with uninitialized interface, asynchronously with NULL async operation handle Connect with uninitialized interface, synchronously with valid async operation handle Connect with uninitialized interface and invalid flags Connect with uninitialized interface Connect with SP-only host address and empty device address Connect asynchronously to self which will eventually fail Connect asynchronously to self while another connection is still pending Wait for asynchronous connection to fail Connect synchronously to self which will eventually fail Host a session locally Connect when already hosting Close hosting peer that tried to connect Reinitialize peer that tried connecting while hosting Create new host Connect asynchronously to local host Wait for asynchronous connect completion Connect when already connected Close asynchronously connected peer Reinitialize peer that tried connecting when connected Connect synchronously to local host Close synchronously connected peer Close host Release host Release synchronously connected peer SendTo Send on uninitialized interface to 0 with all NULLs and 0s using C++ macro Send on uninitialized interface to 0 with all NULLs and 0s Send on uninitialized interface to AllPlayersGroup with NULL buffer descriptor Send on uninitialized interface to AllPlayersGroup with 0 buffer descriptor count Send on uninitialized interface to AllPlayersGroup asynchronously with NULL async handle Send on uninitialized interface to AllPlayersGroup synchronously with async handle Send on uninitialized interface to AllPlayersGroup with invalid flags Send on uninitialized interface to AllPlayersGroup with NOCOPY and NOCOMPLETE Send on uninitialized interface to AllPlayersGroup with COMPLETEONPROCESS Send on uninitialized interface to AllPlayersGroup with PRIORITY_LOW and PRIORITY_HIGH Send on uninitialized interface to AllPlayersGroup with NOCOPY Send to AllPlayersGroup without a connection Host a local session to send on Send to invalid player ID Send 1 byte asynchronously to AllPlayersGroup Wait for asynchronous send to complete Wait for receive to be indicated Send 128 bytes to self Wait for asynchronously send to complete Wait for receive to be indicated Send 1MB NOCOPY to AllPlayersGroup Wait for asynchronous send to complete Wait for receive to be indicated Send 1MB to self synchronously Wait for receive to be indicated Send 1MB to AllPlayersGroup Wait for asynchronous send to complete Wait for receive to be indicated Close peer object that ran send tests Release peer object that ran send tests GetSendQueueInfo Get send queue info on uninitialized interface with all NULLs and 0s using C++ macro Get send queue info on uninitialized interface with all NULLs and 0s Get send queue info on uninitialized interface with invalid flags Get send queue info on uninitialized interface Get send queue info without a connection Host a local session to get send queue info on Get send queue info for player 0 Get send queue info for invalid player ID Get send queue info for local player Close peer that ran send queue info tests Reinitialize peer that ran send queue info tests Create another host to connect to Connect peer to local host Get send queue info of host on client Get send queue of host on client with NULL dwNumMsgs Get send queue of host on client with NULL dwNumBytes Close peer object that ran send queue info tests Close host object that ran send queue info tests Release host object that ran send queue info tests Release peer object that ran send queue info tests Host on uninitialized interface with all NULLs and 0 flags Host on uninitialized interface with NULL application description Host on uninitialized interface when application description has size 0 Host on uninitialized interface when application description is too large Host on uninitialized interface with invalid flags Host on uninitialized interface with REQUIREPASSWORD but no password provided Host on uninitialized interface with password string without REQUIREPASSWORD Host on uninitialized interface with application description using GUID_NULL Host on uninitialized interface with NULL device address Host on uninitialized interface with 0 device address count Host on uninitialized interface with empty address Host on uninitialized interface Host with address using unknown SP GUID Host with CLIENT_SERVER flag Host with 2 devices where the second has no SP specified Host with 2 devices using same SP Close host that ran hosting tests Release host that ran hosting tests GetApplicationDesc Get application description on uninitialized interface with NULLs and 0 flags using C++ macro Get application description on uninitialized interface with NULLs and 0 flags Get application description on uninitialized interface with NULL buffer and invalid flags Get application description on uninitialized interface with NULL buffer Get application description with NULL buffer without a connection Host session to get application description on Get application description with NULL buffer Get application description with application descriptor size of 0 Get application description with application descriptor size that is too large  Get application description Get application description with extra buffer space Close peer object that ran application description tests Release peer object that ran application description test SetApplicationDesc Set application description on uninitialized interface with NULL and 0 flags using C++ macro Set application description on uninitialized interface with NULL and 0 flags Set application description on uninitialized interface with invalid flags Set application description on uninitialized interface Set application description without a connection Host session to run set application description tests on Set application description Wait for application description update to be indicated on host Close peer object that ran set application description tests Reinitialized peer object that ran set application description tests Create peer host object to run set application description tests Connect peer to local host Set application description on peer non-host Set application description on peer host Wait for application description update to be indicated on host Wait for application description update to be indicated on non-host Close peer object that ran set application description tests Close host object that ran set application description tests Release host object that ran set application description tests Release peer object that ran set application description tests CreateGroup Creating group on uninitialized interface with all NULLs and 0 flags using C++ macro Creating group on uninitialized interface with all NULLs and 0 flags Creating group on uninitialized interface with NULL group info Creating group on uninitialized interface with NULL async handle Creating group on uninitialized interface with invalid flags Creating group on uninitialized interface synchronously with async handle Creating group on uninitialized interface Creating group without a connection Host a session to create groups on Create group Wait for create group operation to asynchronously complete Create second group synchronously Close host that ran create group tests Reinitialize peer Create new host object Connect peer to local host Create group on host Wait for create group operation to asynchronously complete on host Wait for group creation to be indicated on peer Create group on peer Wait for create group operation to asynchronously complete on peer Wait for group creation to be indicated on host Close peer object that ran create group tests Close host object that ran create group tests Release host object that ran create group tests Release peer object that ran create group tests DestroyGroup AddPlayerToGroup RemovePlayerFromGroup SetGroupInfo GetGroupInfo EnumPlayersAndGroups EnumGroupMembers SetPeerInfo GetPeerInfo Close EnumHosts DestroyPeer ReturnBuffer GetPlayerContext GetGroupContext GetCaps SetCaps SetSPCaps GetSPCaps GetConnectionInfo TerminateSession Stress Testing Goal:  Create multithreaded applications that maximize network throughput and call as many DirectPlay API s in as many states and with as many parameters as possible over time. Network State Testing Goal:  Create special test cases for issues that are dependent on network state (e.g. host migration due to timeout).  These test cases come from the DirectPlay Core Test Plan and will be dependent on the TestNet test harness being ported to Xbox. Host Migration Original host player leaving/dropping Simple 3 player normal migration case Round robin 3 player normal migration case (50 iterations) Simple 3 player drop migration case Round robin 3 player drop migration case (50 iterations) Chain-of-command disruption Simple 4 player next-in-line leave case Simple 4 player next-in-line drop case Medium-sized next-in-line leave case Medium-sized next-in-line drop case Simultaneous operation Medium-sized n-player normal migration Outstanding sends while host migrating case Group operations while host migrating case Non-next-in-line player leave/drop while host migrating Non-next-in-line player leave/drop while next-in-line migrating Player/group info changes while host migrating Player join attempt while host migrating Connection/disconnection Simultaneous player connection/disconnection operations Many simultaneous connects and disconnects Server leave/drop connection Join while player leaving Join while player dropping In-or-out round-robin join while leaving In-or-out round-robin join while dropping Medium-sized in-or-out round-robin join while leaving Medium-sized in-or-out round-robin join while dropping case Hybrid procedural/parameter validation Multiple sessions Host reject connection Connect to wrong session Specify connection data Max-players Password-protected session Sends Verification Simple send Leave with sends pending Drop with sends pending Multiple players leave with sends pending Multiple players drop with sends pending Long term sends (vary parameters over time) Long terms sends (vary link quality) Sends with timeouts Validate send queue and connection info Queue many messages t return receive buffers Hybrid procedural/parameter validation Cancel sends from another thread Groups Operations while players leaving/joining Enumerate players while player being added/removed Enumerate players while player leaving Enumerate players while group being destroyed Hybrid procedural/parameter validation cases Simple group Sends to large groups Cancel group sends Cancel group sends from another thread Enumerations Hybrid procedural/parameter validation cases Simple enumerations Cancel enumerations Host refuse to respond Join with enumeration active Simultaneous enumerations Password-required Max players Medium-sized session Other notes DirectPlay8 for Xbox Test Plan DirectPlay8 for Xbox Test Plan       styleref RevisionNumber Revision 0.3 styleref date October 26, 2000 Microsoft Confidential Microsoft Confidential styleref RevisionNumber Revision 0.3 styleref date October 26, 2000
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\dplay\stress\dpstress\testini.ini ===
;
; Global Settings - if there is no per-module setting, global setting will be used
;
[GeneralSettings]
NtGlobalFlags=0x30                  ;Default is  FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK
StressTestMode=0                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=10000               ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=-1                         ;default is XLL_LOGALL
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=16384               ;default is 16K
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;
; List of the test modules to be loaded and executed
;
[TestList]
dppeerstress

[dppeerstress]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\dplay\testnet\modules\1sttest\scripts\t_script.txt ===
//==================================================================================
// This is a template script file.  It should be modified to reflect the actual test
// cases you wish to run
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//
// Requirements:
//     ?
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//
// Case authors:  ?
//
// Script history:
//     ?/?/?      ?
//==================================================================================


// Client object parameter validation

// 1.1.1 - First test A
[Exec: 1.1.1-1]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\dplay\testnet\tnshell\testini.ini ===
;
; Global Settings - if there is no per-module setting, global setting will be used
;
[GeneralSettings]
StressTestMode=0                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=10000               ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=-1                         ;default is XLL_LOGALL
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=16384               ;default is 16K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=0                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=0        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;
; List of the test modules to be loaded and executed
;
[TestList]
tnshell

[tnshell]
SleepBetweenRun=600000              ;10 minutes
NumberOfThreads=1
SynchronizeMultipleRun=1
LogFile=fileio.log
CommandLine0=xbox 1sttest t_script.txt
;CommandLine1=xbox 1sttest t_script.txt
;CommandLine2=xbox 1sttest t_script.txt
LogFile=tnshell.log
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\Arcade Testplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal.dot jpoley Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags Month Dfo[b&XBOX Arcade Kernel Test Plan Author: jpoley Last changed: 2/11/2002  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc1198571"  Owners  PAGEREF _Toc1198571 \h   HYPERLINK \l "_Toc1198572"  Resources  PAGEREF _Toc1198572 \h   HYPERLINK \l "_Toc1198573"  Overview  PAGEREF _Toc1198573 \h   HYPERLINK \l "_Toc1198574"  Test scenarios  PAGEREF _Toc1198574 \h   HYPERLINK \l "_Toc1198575"  Spec reviews  PAGEREF _Toc1198575 \h   HYPERLINK \l "_Toc1198576"  Tools needed  PAGEREF _Toc1198576 \h   HYPERLINK \l "_Toc1198577"  Hardware needed  PAGEREF _Toc1198577 \h   HYPERLINK \l "_Toc1198578"  Test methods  PAGEREF _Toc1198578 \h   HYPERLINK \l "_Toc1198579"  Configuration tests  PAGEREF _Toc1198579 \h   HYPERLINK \l "_Toc1198580"  Code reviews  PAGEREF _Toc1198580 \h   HYPERLINK \l "_Toc1198581"  Performance testing  PAGEREF _Toc1198581 \h   HYPERLINK \l "_Toc1198582"  Catastrophic failure testing  PAGEREF _Toc1198582 \h   HYPERLINK \l "_Toc1198583"  Interfaces with other components  PAGEREF _Toc1198583 \h   HYPERLINK \l "_Toc1198584"  Localization impact  PAGEREF _Toc1198584 \h   HYPERLINK \l "_Toc1198585"  Test variations  PAGEREF _Toc1198585 \h   HYPERLINK \l "_Toc1198586"  Test complete criteria  PAGEREF _Toc1198586 \h  Owners SW Test HYPERLINK "mailto:jpoley@microsoft.com" mailto:jpoley@microsoft.com SW Dev  HYPERLINK "mailto:tracysh@microsoft.com"  mailto:tracysh@microsoft.com SW PM  HYPERLINK "mailto:paullu@microsoft.com"  mailto:paullu@microsoft.com HW PM  HYPERLINK "mailto:natan@microsoft.com"  mailto:natan@microsoft.com Resources Source Source Depot: \private\ntos Test Source Source Depot: private\test Test Docs Source Depot: private\test\docs Overview This specification covers testing methodology for the kernel on the Xbox Arcade. This spec does not cover user input, networking, nor graphic / sound output. Test scenarios Add tests to the Test Harness to exercise Tracy s new kernel code. Run a version of the Test Harness (removing obsolete tests, and adding new tests) in the lab. Modify HVS tools to support IO on the new media formats (GD-ROM, DIMM, Flash etc.) Code Review new OS functionality Run static code analysis on code Boot testing the new boot sequence Spec reviews There are currently no detailed specifications on the software design or architecture. Tools needed Static Code Analysis PCLint PreFast typo.pl Hardware needed I must have the SEGA HW interfaced to the XBOX motherboard. The initial integration of SEGA and XBOX hardware is scheduled for the week of 2/18/2002. Full testing will not be possible until this occurs. I will need at least one bench in the lab for the test units. There are two types of completed development kits; I will need both versions for testing. Test methods Configuration tests Type 1 and Type 2 development kits Memory types: DIMM, NAND Flash, MASK Flash. User Input configurations will be tested by SEGA. Code reviews I will review all code modified/added by Tracy. Performance testing IO tests added to HVS can be used to benchmark performance on the GD-ROMs and memory ROMs. Catastrophic failure testing Power failures, network failures, ROM corruption Interfaces with other components Interfacing with JVS board will be tested by SEGA. Localization impact None for the kernel Test variations Test Harness Remove DVD and HD tests Remove nickname tests Remove soundtrack tests Remove save game tests Keep Graphics and Audio tests Keep memory tests Add DIMM/Flash tests Add DIMM/Flash tests Add GD-ROM tests Boot scenarios Test multiple boots from the following locations HD (devkit only) DVD and GD-ROM drive DIMM and FLASH Memory Tests Make sure entire address space is usable Verify that allocation functions (including graphics and audio) can allocate memory above 64meg. Other Tests Verify removal of the cache partition code Nickname APIs Soundtrack APIs Save game APIs Test complete criteria All new test code must run with 100% pass rate. PAGE   PAGE   Microsoft Confidential ufuUfuf uqmquqbu\u\qmqT gd%XQ gdkk| gdkk| gdkk|
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\coding.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Company Confidential TitleMicrosoft Corporation Company Confidential Johnson Apacible Normal.dot johndaly Microsoft Word 9.0Portable Systems Group NT OS/2 Coding Conventions Author: Mark Lucovsky, Helen Custer Revision 1.5, January 21, 1991  TOC \o "1-3"  Introduction  PAGEREF _Toc438977612 \h  Module Headers  PAGEREF _Toc438977613 \h  Function Headers  PAGEREF _Toc438977614 \h  Header Files  PAGEREF _Toc438977615 \h  Header File Inclusion  PAGEREF _Toc438977616 \h  Header File Format  PAGEREF _Toc438977617 \h  Naming  PAGEREF _Toc438977618 \h  Variable Names  PAGEREF _Toc438977619 \h  Initial Caps Format  PAGEREF _Toc438977620 \h  Unstructured Format  PAGEREF _Toc438977621 \h  Data Type Names  PAGEREF _Toc438977622 \h  Structure Field Names and Enumeration Constants  PAGEREF _Toc438977623 \h  Macro and Constant Names  PAGEREF _Toc438977624 \h  Indentation and Placement of Braces  PAGEREF _Toc438977625 \h  Constructs to Avoid  PAGEREF _Toc438977626 \h  Left Hand Side Typecasts  PAGEREF _Toc438977627 \h  Zero Length Arrays in Structures  PAGEREF _Toc438977628 \h  Introduction All code written for NT OS/2 by members of the Portable Systems Group adheres to a common coding style.  This style gives the system a uniform appearance that allows group members to read, modify, and maintain each other's modules without learning several different coding conventions. The following items are standardized: Module headers Function headers and declarations Header file format  Names of variables, data types, structure fields, macros, and constants Control structure indentation and placement of braces Module Headers The following prototype should appear at the beginning of each module.  The source to the prototype can be found in file \nt\bak\inc\modhdr.c. Copyright (c) 1989  Microsoft Corporation Module Name:     name-of-module-filename Abstract:     abstract-for-module Author:     name-of-author (email-name) creation-date-dd-mmm-yyyy [Environment:]     optional-environment-info (e.g. kernel mode only...) [Notes:]     optional-notes Revision History:     most-recent-revision-date email-name         description         .         .     least-recent-revision-date email-name         description The following is a sample of a completed module header: Copyright (c) 1989  Microsoft Corporation Module Name:     pool.c Abstract:     This module contains the pool allocator for the NT OS/2     executive. Author:     Mark Lucovsky (markl) 16-Feb-1989 Environment:     Kernel mode only. Revision History:     22-Feb-1989     markl         Modified module to conform to the new naming and coding         standards agreed to 21-Feb-1989.     20-Feb-1989     markl         Added module and function headers. Note that the revision history portion is not completed. Until we get further along in the project, we will not keep a revision history. The /*++ <text> --*/ construct is used by a comment extractor program that will be developed to assist in our documentation efforts. Function Headers The following is a prototype function declaration.  This declaration is to appear with the implementation of the function.  The source to the prototype can be found in file \nt\bak\inc\prochdr.c. Notice the following details in the function declaration: A form-feed character should appear one line before the    "return-type" line.  This convention is noted in this document with the  string "<form-feed>". All formal arguments are preceded by one of the following macro definitions:  Indicates that the argument is a non-modifiable input value (i.e., call-by-value semantics) Indicates that the argument is an address which refers to a variable or structure that will be modified by the function (i.e., call-by-reference semantics) IN OUT Indicates that the argument is the address of an input variable or structure that is both read and written by the function (i.e., call-by-reference semantics) The OPTIONAL macro appears after a formal argument of type pointer, HANDLE, or ULONG when the function accepts either a NULL or non-NULL value.  To determine whether the actual value supplied is NULL or non-NULL, the programmer must use the macro ARGUMENT_PRESENT, which takes the pointer, HANDLE, or ULONG variable as an argument and returns a value of type BOOLEAN. The order of the arguments in the comment block is the same as the order in which they appear in the function declaration. The function declaration follows: <form-feed> return-type function-name(     direction type-name argument-name,     direction type-name argument-name...     ) Routine Description:     description-of-function Arguments:     argument-name - [Supplies | Returns]  description-of-argument     .     .     . Return Value:     return-value - description-of-return-value     None         .     .     . The following is a sample of a completed function declaration: <form-feed> IoBuildPartialMdl(     IN PMDL SourceMdl,     IN PMDL TargetMdl,     IN PVOID VirtualAddress,     IN ULONG Length OPTIONAL     ) Routine Description: This routine maps a portion of a buffer as described by an MDL.  The portion of the buffer to be mapped is specified via a virtual address and an optional length.  If the length is not supplied, then the remainder of the buffer is mapped. Arguments:     SourceMdl - MDL for the current buffer.     TargetMdl - MDL to map the specified portion of the buffer.     VirtualAddress - Base of the buffer to begin mapping.     Length - Optional length of buffer to be mapped;  if zero,  remainder. Return value:     None. When a function is declared externally in a header file, its declaration contains only the function prototype and not the comment section. For example: IoBuildPartialMdl(     IN PMDL SourceMdl,     IN PMDL TargetMdl,     IN PVOID VirtualAddress,     IN ULONG Length OPTIONAL     ); Header Files The following sections define the requirements for inclusion and format of header files. Header File Inclusion There are three types of header files in the NT OS/2 system:   Header files that are private to a single operating system component (the kernel or the I/O system, for example) A header file that is shared by the internal components of the operating system (the kernel and the executive) A public header file that defines external application programming interfaces (APIs) for system components outside the kernel and executive Each component of the operating system has a private header file.  The naming convention for these header files is <component-name>p.h.  For example, the private header file for kernel component, ke, is called kep.h. The NT OS/2 shared header file, \nt\private\src\ntos\inc\ntos.h, is included by each component of the executive and by the kernel, using the following statement: #include "ntos.h" (This file is included by a component's private include file.) File ntos.h contains a list of #include statements, one for each operating system component. Each operating system component has a corresponding header file that defines prototypes for the functions that are shared with other components within the executive.  The naming convention for these header files is <component-name>.h. For example, the header file containing shared prototypes for kernel component, ke, is called ke.h. The public header file, \nt\sdk\inc\ntos2.h, is included by all components outside the NT OS/2 kernel and executive, using the following statement: #include <ntos2.h> Header File Format Modules should be able to nest header files without causing multiple definition problems.  To accomplish this, each header file should be conditionally expanded to itself, or to nothing if it has already been expanded. In the example below, if the module pool.h was not previously included, then the macro _POOL_ is defined and the header file is expanded.  Otherwise, _POOL_ is already defined and the remainder of the header file is ignored.  This results in the header file being included only once. The following header file style should be used: Copyright (c) 1989  Microsoft Corporation Module Name:     pool.h Abstract:     This module defines the NT OS/2 pool data structures and     function prototypes. Author:     Mark Lucovsky (markl) 16-Feb-1989 Revision History: #ifndef _POOL_ #define _POOL_ #include "ntdef.h" #include "list.h" #include "process.h" typedef enum _POOL_TYPE {     NonPagedPool,     PagedPool     } POOL_TYPE; #endif // _POOL_ Note that if module list.h were shown, the conditional would appear as follows:    #ifndef _LIST_    #define _LIST_    //    // body    //    #endif // _LIST_ Naming The following sections describe the naming conventions for variables, structure fields, types, constants, and macros. Variable Names Variable names are either in "initial caps" format, or they are unstructured.  The following two sections describe when each is appropriate. Note that the NT OS/2 system does not use the Hungarian naming convention used in some of the other Microsoft products. Initial Caps Format All global variables and formal argument names must use the initial caps format.  The following rules define this format: Words within a name are spelled out; abbreviations are discouraged. The first character of each word in a name is capitalized.  Acronyms are treated as words, that is, only the first character of the acronym is capitalized. The following list shows some sample names that conform to these rules: NumberOfBytes  TcbAddress BilledProcess Unstructured Format Local variables may appear in either the initial caps format, or in a format of the programmer's preference.  The following list shows some possibilities for local variable names: loopindex LoopIndex loop_index Data Type Names A set of primitive data types for use in the NT OS/2 system is defined in the file \nt\sdk\inc\ntdef.h.  All NT OS/2 software  must declare variables using these defined types rather than standard C types, where appropriate.  The following are some examples of NT OS/2 types: PVOID UQUAD STRING All new type names should be created in uppercase using typedef.  Words within the name may either be packed together or separated by underscores.  All types should have a corresponding typedef which defines a pointer to the type.  The name for the pointer is the type name with a "P" prefix. The following example illustrates how to use typedef to create a structure type: typedef struct _POOL_LIST_HEAD {     ULONG CurrentFreeLength;     ULONG TotalEverAllocated;     LIST_ENTRY ListHead; } POOL_LIST_HEAD, *PPOOL_LIST_HEAD; The following example illustrates how to use typedef to create an enumerated type: typedef enum _POOL_TYPE {     NonPagedPool,     PagedPool,     MaxPoolType     } POOL_TYPE; Structure Field Names and Enumeration Constants Structure field names should follow initial caps format.  They should not have field name prefixes tied to a type.  The following is a sample structure: typedef struct _POOL_LIST_HEAD {     ULONG CurrentFreeLength;     ULONG TotalEverAllocated;     LIST_ENTRY ListHead; } POOL_LIST_HEAD, *PPOOL_LIST_HEAD; As illustrated in the previous section, enumeration constants should also follow initial caps format.  Macro and Constant Names All macros and manifest constants should have uppercase names.  Words within a name may either be packed together, or separated by underscores. The following statements illustrate some macro and manifest constant names: #define PAGE_SIZE   4096 #define CONTAINING_RECORD(address, type, field) \         ((type *)((LONG)(address) - \                   (LONG)(&((type *)0)->field))) Note:  Any macro that is likely to be replaced by a function at a later time should use the naming conventions for functions. Indentation and Placement of Braces The following skeletal statements illustrate the proper indentation and placement of braces for C control structures.  In all cases, indentations consist of four spaces each. All control structures should routinely use braces even if there is only a single statement that will be executed. <form-feed> FooBar(     INT ArgumentOne,     PULONG ArgumentTwo     ) Routine Description:     This is the routine description. Arguments:     ArgumentOne - Supplies the value for argument 1.     ArgumentTwo - Supplies the address of argument 2. Return Value:     0 - Success     1 - Failure     //     // Local variables are indented one tab (tabs are 4 spaces)     //     ULONG LocalVariable1;     LONG Counter;     //     // for loops     //    - all for loops must have braces     //    - closing brace is at same indentation level as     //      for statement     //     for ( Counter = 0; Counter < 10; Counter++ ) {         //         // Body of loop         //     }     //     // if statement     //     //    - All if statements should use braces     //     if ( Counter == 0 ) {         //         // Then statements         //     }     //     // if then else     //     if ( Counter == 1 ) {         //         // Then statements         //     } else {         //         // Else statements         //     }     //     // switch statement     //     switch ( Counter ) {     case 1 :         //         // case 1 statements         //         break;     case 2 :         //         // case 2 statements         //         break;     default :         //         // default case         //         break;     } Constructs to Avoid NT OS/2 is written in portable, ANSI C. Due to differences in C compilers, there are a number of coding constructs that need to be avoided in order to promote portability. Left Hand Side Typecasts Some C compilers allow the cast operator on the left hand side of an assignment. This is not allowed by standard C and must be avoided in NT OS/2. Zero Length Arrays in Structures Zero length arrays embedded in structure definitions are not handled uniformly by all C compilers. They should not be used in NT OS/2. Revision History Original Draft 1.0, February 21, 1989 - ml Revision 1.1, February 23, 1989 - ml Revision 1.2, May 5, 1989 - hkc Extracted coding guidelines from exec.txt and converted text to Word. Added text regarding primitive data type definitions. Added text and example describing OPTIONAL arguments. Added text regarding the inclusion of header files in implementation modules. Style edit. Revision 1.3, May 11, 1989 - Incorporated group comments.  hkc Revision 1.5, January 21, 1991 tonye Emphasized that all control structures must use braces. NT OS/2 Coding Conventions Microsoft Confidential
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\ComplianceandCompatibilityTestProcess.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Compliance and Compatibility Test Process Title _PID_HLINKSCompliance and Compatibility Test Process MarkMc Normal.dot MarkMc Microsoft Word 9.0Compliance and Compatibility Test Process Created by: Mark McNulty Compliance and Compatibility Test Lead Date Created: 6/20/01 Highlights: Deliverables to ISVs: In order to help prepare ISVs for Certification, we are providing them with means to test the TCR Compliance of their own game.  Included with the future releases of the XDK will be: A complete list of all test cases to be run by the Xbox Compliance team A set of Certification tools, added to the XDK Launcher.  The tools will handle things from fragmenting the Hard Drive to corrupting saved games. The tools will allow ISVs to have a better sense of comfort while awaiting the results of their game through the Certification process. Compliance and Compatibility will be housed in to labs One dedicated to Final Compliance Passes Lab consists of 6 Test Stations: Storage Audio/Video Networking System User Interaction Stress Wall One dedicated to Compatibility and Pre-Certification Lab consists of 5 Test Stations: 3 Compatibility 2 Pre-Certification  Team Structure: Compliance and Compatibility Test Lead: Mark McNulty (FTE Test Lead) Final Compliance Lab Supervisor: Robert Rodrigues (FTE STE) Final Compliance Lab Support and Test Process support: TBH (FTE STE) Compatibility and Pre-Certification Lab Supervisor: TBH (FTE STE) Final Compliance Lab Test Team: 12 CSG TBH (STE 1) Compatibility and Pre-Certification Lab Test Team: 5 CSG TBH (STE 1) Max Game Throughput per lab: Final Compliance Lab: 2 Games per day 4 to 5 hours per game (12 Testers per game) Per Day is based upon 8 to 10 hours depending on size and type of game Compatibility and Pre-Certification Lab:  Compatibility: 3 Games per day 8 hours spent per game (1 Tester per game) Pre-Certification: 2 Games per day   4 hours per game (2 Testers per game) Pre-Certification Pass: The testing goal behind the pre-certification pass is the following:  The Compliance team will run all tests that the ISV has not been given the means to run (majority are system level hardware access tests) and to observe the game for any potential problem areas that may cause the game to fail during final certification. All contact between Compliance/Compatibility test and the Cert Coordinator or Account Managers will be handled through the Compliance Test Lead.  This will help to minimize confusion and present one story to all involved who need information regarding Xbox games going through the Certification process. Compliance and Compatibility Test Process: Final Certification: Game Files distribution from Certification Burn Lab: Once the tapes are received from the publishers, the Certification burn lab will prepare the RAW data dumps and FST image files (DVD emulator files) for use by all parts of Certification. The Certification burn lab will also create directories on their server with all of the submission media (saved games, covers, documentation, etc..) handed in by the publishers on CD. The bits will be given to the Compliance and Compatibility team one of two ways: The Certification Build lab server will auto pushes the bits to the Compliance Lab server.  Along with all required submission materials. The Compliance lab server has an automatic pull script that will grab all data for the current day. Once bits are received for a given game, the Compliance Lead will update the tracking materials on the internal server.  These are comprised of: Certification Tactics DB This is a Tracking Database used to log the certification process for a given title.  Marketing, Operations and Account Managers will use this as the overall tracking mechanism for Xbox games from proposal till it is sitting on store shelves.  Compliance will log that all test cases for the TCRs pass or fail Game Eval will enter their feedback or tracking issues for games Functional Test will enter any game related bugs as well as verify some TCR requirements When the games are received for the day, the XMIDs and release dates will be entered into the Database Certification Web Page  HYPERLINK "http://complianceX"  http://complianceX  will be the home of the Certification tracking system.  Any authorized user Tactics can visit this web page and find out the current status of a given game through certification.  Various reports and tracking statistics will be made available Compliance Lab Spreadsheet Overall history of Xbox Games that go through the compliance lab will be documented in a tracking Excel Spreadsheet.  This will be made available on the website if needed (This will also be archived daily) Internally this will be used as a quick means for the Compliance Lead to track a game through all phases of Compliance and prepare to send the final report once the game has completed. Once the data is on the Compliance lab server: The FST Images will be transferred to the Game Stress Wall to begin the 72-hour Stress pass. The Stress wall is comprised of: 12 TVs 12 XDK Consoles 12 PCs Each game will be moved to one TV where it will run for 72 hours, in the Attract/Initial Start screen loop. Xbox PerfMon will be used to track performance measurements over the 72 hours The FST Image will then be transferred to all TCR test stations, to prepare them for the days test pass There will be five main test stations: Storage All Hard Disk and Memory Unit read/write TCRs will be verified 3 Testers at station (CSG STE 1) System All system level game interaction TCRs will be verified 2 Testers at station (CSG STE 1) Audio and Video All Video (NTSC, HDTV, etc.) and Audio (Analog, Dolby, Digital, DTS, etc.) related TCRs will be verified 2 Testers at station (CSG STE 1) Networking All online and system link game play TCRs will be verified 1 Tester at station (CSG STE 1) User Interaction All peripheral, game disc, error message and UI TCRs will be verified 4 Testers at station (CSG STE 1) Once at the stations, the Compliance Lab Test Team will begin to verify the game against the Xbox TCRs. All testers will execute pre-made test cases from the Compliance Tactics DB  (  HYPERLINK "http://complianceX"  http://complianceX At all times there will be at least one if not two full time STEs in the lab to ensure that all tests are being run and to offer support to our CSG staff. All tests will be logged as a pass or fail (or N/A) against the requirements set forth by the Xbox TCRs. If a failure is found, one of the FTE Tester on site will verify the failure is valid, mark the test case as a fail and inform the Compliance Lab Lead of the issue. The Compliance Lab Lead will then verify the severity of the failure.  Using the TCR Priority guide, the Compliance Lead will make a determination of the severity of the failure. Once the severity is determined: If the TCR failure is a Priority One failure, mail will be sent to the Certification Coordinator immediately, detailing the failure. Else, the TCR failure will be documented and future failures of the same type will be tracked.  If a pattern if formed surrounding the failure, the Certification Coordinator will be mailed with detailed information regarding the failure and it s spread through the title As Compliance areas are finished, the testers assigned to the area will sign off on the Compliance Sign-Off sheet.  The Compliance Sign-Off sheet will be a web based internal lab tracking tool.  Each XMID will be tracked to ensure all areas are tested and signed off. Once an area (test station) is finished, the FTE lab support will also sign off to signify completion. When the current game is signed off on from an area, they will immediately move on to the next game for the day. If no other game is available, the testers will be assigned other areas to test in order to help out those stations that have yet to complete their pass. ***Throughout the day, the tracking website will be updated with a title s progress through all areas of Certification The updates will be derived from reports generated from Tactics as well as data pulled directly from the Database itself. *** Upon a completed pass for a game, the Compliance Test Lead will generate a final summary report This document will detail the entire Final Certification pass.  It will detail all TCR failures and their cause.  The report will list all information in a consistent and very clear manner as to minimize any confusion. The report will be sent to the Certification Coordinator and the appropriate Account Manager (This is still pending) as soon as possible, once a game has finished it s complete Compliance pass. Complete Compliance pass includes: Generally this will be a 6 day process Final Cert station pass 72 hour Stress pass Compatibility Pass TCR validation being done in conjunction with Functional Test It is not possible for the Compliance lab to verify all TCRs throughout the entire game.  It is not the charter of the Compliance lab to play through the complete game.  Due to this, certain TCRs will be assigned to Functional Test to have them verify over the course of a complete play through of a game.  Certain TCRs will be given a conditional pass and will await a full pass status after functional has signed off that they have indeed passed. Other issues of note: Compliance Server will be backed up daily.  Currently the exact scheme for this is still under discussion. FTE Testers will be responsible for Server upkeep and maintenance and creation of Certification Tools and process. Over initial launch cycle, process will be streamlined and optimized.  After initial wave of games, an automation review will take place.  Any new opportunities for automation will be exploited to the fullest to maximize lab efficiency and to alleviate any unnecessary burden upon personnel. Pre-Certification: Once the data is on the Compliance lab server for Pre-Certification submissions: The FST Image will be transferred to all Pre-Certification stations in the Compatibility Lab Once at the stations, the Pre-Certification testers will begin to verify the game against the Xbox TCRs. All testers will execute pre-made test cases from the Compliance Tactics DB  (  HYPERLINK "http://complianceX"  http://complianceX There will be an FTE tester acting as a lab supervisor to handle any issues that arise with the Pre-Certification process or testers. All tests will be logged as a pass or fail (or N/A) against the requirements set forth by the Xbox TCRs. During the Pre-Certification pass, the testers will also use the  Common Failure Areas  document and keep track of any issues that meet the criteria set forth in this document.  Upon completion of the Test pass, any notes regarding areas from this document will be passed into the Compatibility Lab supervisor. Common Failure Areas  document will be a growing list of the most common failures in Final Certification.  The tester will use this information as a guide for looking at the game through Pre-Certification.  The tester will look for potential areas that could cause failures in Final Certification.   Once a Pre-Certification pass is finished:  The Pre-Certification testers will sign off on the Compliance Sign-Off sheet.  The FTE Lab Supervisor will review the  Common Failure Areas  feedback and sync it to actual TCRs and review the Tactics data for TCR failures A Pre-Certification form will be filled out by the FTE and sent to the Compliance lead Once the Pre-Certification is done and form sent to Compliance lead, the FTE Tester will also sign off to signify completion. When the current game is signed off on, the Pre-Certification testers will immediately move on to the next game for the day. If no other game is available, the testers will be assigned to help out the Final Compliance team stations that have yet to complete their pass. Upon a completed pass for a game, the Compliance Test Lead will generate a final summary report This document will detail the entire Pre-Certification pass.  It will detail all TCR failures and their cause. Also any potential areas that may cause failures at final certification. The report will list all information in a consistent and very clear manner as to minimize any confusion. The report will be sent to the Certification Coordinator and the appropriate Account Manager (This is still pending) as soon as possible, once a game has finished it s complete Compliance pass. Other issues of note: Over initial launch cycle, process will be streamlined and optimized.  After initial wave of games, an automation review will take place.  Any new opportunities for automation will be exploited to the fullest to maximize lab efficiency and to alleviate any unnecessary burden upon personnel. Compatibility: Compatibility testing will begin when the game arrives back on official green discs.   Green discs are expected 6 days after original game DLT tapes are received. Once Green Discs are received: 30 Copies will go to the Compatibility lab 10 copies will go to each Compatibility tester 8 copies for use in each Hardware revision for running 24 hour stress pass 2 Copies for Compatibility Test Pass (All disc and machine numbers will change as more hardware revisions are made) The following details what a Compatibility tester will do: Each Tester will have 16 Xbox Consoles (2 full sets of Hardware) 8 of the consoles will be setup to run a 24-hour Stress pass, each running a copy of the game on Green Disc. The other 8 consoles will be used to run a 8 hour Compatibility test, one hour per hardware revision The Compatibility tests will cover basic game functionality, performance and stability.  All core tests are designed to hit all major areas of the hardware to ensure game/hardware synchronicity (ex. Save/Load games, watch Cinematics, etc.)  All test cases will be logged in Tactics. The Compatibility lab is staffed for 3 testers to cover up to 3 games per day.  If less games come in to test for compatibility the following will be done: 2 Games: 2 Testers will spend 8 hours on one game running through Tactics cases.  The third tester will select 2 of the hardware revisions and spend 4 hours per revision playing the 2 games. The tester will try to visit each level (will vary per game) and play a ways through the level.  This will provide a more in depth coverage over some of the hardware revisions. 1 Game: 1 tester will run through the 8 hour Tactics test pass.  The other two testers will select 2 hardware revisions each and spend 4 hours per revision playing the game.   The tester will try to visit each level (will vary per game) and play a ways through the level.  This will provide a more in depth coverage over some of the hardware revisions. No Game: All testers will re-assigned to work with the Pre-Certification or Final Certification test teams based on the current days needs and schedule. Any compatibility failures will be immediately brought to the attention of the Compatibility Supervisor, who will verify through a repro that the bug does exist and then report it to the Compliance Test Lead The Compatibility lead will review the data and send the necessary info to the Certification Coordinator. Once a game has finished the Compatibility 8 hour tests across hardware revisions and the 24-hour test, the compatibility tester will send mail to the Compatibility lab supervisor that the game has completed Compatibility and if it passed or failed.  If it failed the Test Case failure numbers will be sent in mail. The Compliance Lead will review all cases to ensure they are true reasons to fail the game for Compliance.  An email will be sent to the Certification Coordinator and Hardware contact that details the hardware incompatibilities and how they were found.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\build faq.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Expression Builder Test Plan  Title _PID_HLINKSExpression Builder Test Plan  Sujatha Normal.dot Toby Dziubala Microsoft Word 9.0;eUJB |hb\N (eT.z ^L*pp'\bjbjU XBox Build FAQ Microsoft Corporation Distribution:  Microsoft Internal Confidential  2000, Microsoft Corporation.  All Rights Reserved. Revision History 05/14/2000 Initial draft. 05/18/2000 First revision. 08/01/2000 Second revision. Stability: Medium Filename: xdemos.doc Date: May 13, 2000 Author: Toby Dziubala (a-tobydz) Index  TOC \o "1-2" \t "subheading,3"  Index  PAGEREF _Toc483219060 \h  Revision History  PAGEREF _Toc483219061 \h  Getting Started  PAGEREF _Toc483219062 \h  Before The Build  PAGEREF _Toc483219063 \h  The Build / BVT  PAGEREF _Toc483219064 \h  Post BVT  PAGEREF _Toc483219065 \h  Kernel Debugging the XBox  PAGEREF _Toc483219066 \h  Bug Reporting  PAGEREF _Toc483219067 \h  Related Doccuments  PAGEREF _Toc483219068 \h  Revision History First Draft Toby Dziubala 05/14/00 First Revision Toby Dziubala 05/16/00 Second Revision Toby Dziubala 08/01/00 Getting Started Hardware Requirements The build machines must meet the following requirements: Intel Pentium III !< 650 mhz 256 megs RAM 15g+ hard drive Remote debug cable (null modem) CDROM 1.44 Floppy Hardware Setup The hardware setup (as well as the rest of this document) assumes a multiple machine Config.  The hardware configuration for the build machine only requires one FAT32 partition. For the BVT machine, create two partitions (again, both FAT32). Connect the two machines using the null modem cable from port 1 on the BVT machine to port 1 on your  debugging  machine. This  debugging  machine can be your build machine. Software Setup 2.3.1 Setting up the Build machine Install (stock) Windows 2000 professional. Install Visual C++ 6 (with SP3) *DO NOT REGISTER ENVIORNMENT VARIABLES* Enlist in the XBox SLM tree (see   HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\public\\idw\\xcomer.doc"  \\cpitgcfs01\xboxro\src\public\idw\xcomer.doc install  file for the SLM project is   HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\public\\idw\\xboxenlist.cmd"  \\cpitgcfs01\xboxro\src\public\idw\xboxenlist.cmd Follow the rest of the instructions for setting up a razzle window. Create two folders on the root drive;   pvtrelease  and  release Share the  release  folder. Allow read-only access to the following cost centers: Hardware/Toddhol                   12686 BizDev/3rd Party/Jallard          12689 Mktg Jbooth/Dcoyner               12687 Platform/Toddro,Cameronf      12043 Mktg/Bethfe                           10991 Mktg/Done                             10987 Mktg/Edbland                         11184 / 12166 DX test  10892 DX dev  10894 2.3.2 Setting up the BVT machine The BVT machine should be a standard XBox Development Kit with 5 partitions and a DOS and Windows 2000 installation on the C drive. Create an  xboxbins  directory on the C partition.  This is where the latest build is copied before running the BVT.  Enable file sharing (RW) on the new directory, security setup is user discretion. Before The Build  re almost ready to begin the BVT. The following steps prepare you for the build. Build Machine: From a razzle window under  C:\xbox , run  ntsync  to update the SLM source tree.  You must baby-sit this process incase SLM requests user input. Under the   (type   in the razzle window) directory, edit the  setenv.cmd  file. Add / edit  SET _BUILDVER=[build #]  to reflect the latest build number. In %_NTROOT%\public\sdk\inc\ check out (using the out command)  xboxverp.h  and change the VER_PRODUCTBUILD accordingly. Don t forget to check in the file using the in command. Add three sub directories to %_NTDRIVE%\pvtrelease\usa\%_BUILDVER%\ ;  Checked Results Do this to the %_NTDRIVE\%\release\usa\%_BUILDVER%\ as well, without the  Results  folder. The Build / BVT Building the XBox OS: Build Machine: Start this process at 1:00 daily. From the root xbox directory in a razzle window, type  ntsync Once the sync has completed, in the razzle window, type  xbuild Running the BVT Once the build has completed, it should have copied itself to the %_NTDRIVE%\pvtrelease\usa\%_BUILDVER%\[Checked]/[Free] directories. BVT Machine: Copy the latest build (either checked or free) to the %_NTDRIVE%\xboxbins directory. Reboot the machine to the XBox OS partition. Type:  to run just the BVT tests. Stress   to run just the stress tests.  to run all tests. Build Machine: Before you execute the aforementioned commands on the BVT machine; Run either  BVT1.bat, BVT2.bat, BVT3.bat, BVT4.bat  to open a remote razzle window. Within these windows, type  i386kd Execute the appropriate command on the BVT machine. Watch the BVT go! Post BVT If the BVT has completed successfully, perform the following: BVT Machine: Copy the test logs from d: partition to the  results  folder on the build machine under the respective [free/checked] directories. Delete the logs on the BVT machine. Repeat section 4.2 for the other version. Build Machine: Copy the  verified  builds from the  pvtrelease  directory to the  release  directory under the proper build directory. Ensure the test logs are in their respective  results  directories. TBD: Posting results on the web, email format, etc. Kernel Debugging the XBox For detailed information on using the kernel debugger:  HYPERLINK "\\\\ntstress\\docs\\debug.doc"  \\ntstress\docs\debug.doc -and-  HYPERLINK "\\\\ntstress\\docs\\debug.hlp"  \\ntstress\docs\debug.hlp For your convenience, here is a quick command line reference guide: A [<address>] - assemble BC[<bp>] - clear breakpoint(s) BD[<bp>] - disable breakpoint(s) BE[<bp>] - enable breakpoint(s) BL[<bp>] - list breakpoint(s) BP[#] <address> - set breakpoint C <range> <address> - compare D[type][<range>] - dump memory E[type] <address> [<list>] - enter F <range> <list> - fill G [=<address> [<address>...]] - go J<expr> [']cmd1['];[']cmd2['] - conditional execution K[B] <count> - stacktrace KB = <base> <stack> <ip> - stacktrace from specific state L{+|-}[lost*] - Control source options LN <expr> - list near LS[.] [<first>][,<count>] - List source file lines LSA <addr>[,<first>][,<count>] - List source file lines at addr LSC - Show current source file and line LSF[-] <file> - Load or unload a source file for browsing M <range> <address> - move N [<radix>] - set / show radix P[R] [=<addr>] [<value>] - program step  quit #R - multiprocessor register dump R[F][L][M <expr>] [[<reg> [= <expr>]]] - reg/flag Rm[?] [<expr>] - Control prompt register output mask S <range> <list> - search SS <n | a | w> - set symbol suffix SX [e|d [<event>|*|<expr>]] - exception T[R] [=<address>] [<expr>] - trace U [<range>] - unassemble X [<*|module>!]<*|symbol> - view symbols .logopen [<file>] - open new log file .logappend [<file>] - append to log file .logclose - close log file ~ - list threads status ~#s - set default thread ~[.|#|*|ddd]f - freeze thread ~[.|#|ddd]k[expr] - backtrace stack | - list processes status |#s - set default process |#<command> - default process override ? <expr> - display expression #<string> [address] - search for a string in the dissasembly $< <filename> - take input from a command file <expr> ops: + - * / not by wo dw poi mod(%) and(&) xor(^) or(|) hi low        operands: number in current radix, public symbol, <reg> <type> : b (byte), w (word), d[s] (doubleword [with symbols]),          a (ascii), c (dword and Char), u (unicode), l (list)          f (float), D (double), s|S (ascii/unicode string)          q (quadword) <pattern> : [(nt | <dll-name>)!]<var-name> (<var-name> can include ? and *) <event> : ct, et, ld, av, cc <radix> : 8, 10, 16 <reg> : $u0-$u9, $ea, $exp, $ra, $p <addr> : %<32-bit address> <range> : <address> <address>         : <address> L <count> <list> : <byte> [<byte> ...] Kernel-mode options: I<type> <port> - read I/O port O<type> <port> <expr> - write I/O .cache [size] - set vmem cache size .reboot - reboot target machine i386 options: BA[#] <e|r|w|i><1|2|4> <addr> - addr bp <reg> : [e]ax, [e]bx, [e]cx, [e]dx, [e]si, [e]di, [e]bp, [e]sp, [e]ip, [e]fl,         al, ah, bl, bh, cl, ch, dl, dh, cs, ds, es, fs, gs, ss         cr0, cr2, cr3, cr4         dr0, dr1, dr2, dr3, dr6, dr7         gdtr, gdtl, idtr, idtl, tr, ldtr <flag> : iopl, of, df, if, tf, sf, zf, af, pf, cf <addr> : #<16-bit protect-mode [seg:]address>,          &<V86-mode [seg:]address> Bug Reporting TBD -  Use RAID Related Documents XBox New-Commer Doc  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\public\\idw\\xcomer.doc"  \\cpitgcfs01\xboxro\src\public\idw\xcomer.doc SLM help  HYPERLINK "http://officedev/slm.htm"  http://officedev/slm.htm RAID Installer  HYPERLINK "\\\\toolsvr\\tools\\toolbox\\raid\\4_1\\<x86"  \\toolsvr\tools\toolbox\raid\4_1\<x86  | alpha>\setup.exe Microsoft Internal Confidential XBox Build FAQ Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\guideline.doc ===
Microsoft Word Document MSWordDoc Word.Document.8US-DAPD IIS Title _PID_HLINKSFrancesco Olian Fannio Normal Microsoft Word 9.0bg<2\8b Whz48 BdD\V Rsv\0 JK\{XnBX P/L-j8 F$j-R@;@CAC gei_^` UTX\[_pos 113557 ==?;;=779 ./0KLMXYZrstjklghi beafge {{{nnncccHHH)))%%%""" cmPPJCmp0712 IDATx^ {lcif gWWuoQh ~QV~~ +-,// |P]Uu vLOO;9 G/#`}` `pf\@ ,cyzAA ,.-'..=I\ x)qy1 --.?YY 7FsSZ r/r1! pWwk$ +MV\( cGSSA Ifb9^ {,oQL/ ,,1L=> `x#1  N`DVL |^X e b:Tt@ XZ{72 Gi1ye jZEsQ^' ame|<n?JX ixxE$ 9iK=># g99~f 4?>z@^+ 7)H_Q$ue BPhotoshop 3.0 8BIM' 'File written by Adobe Photoshop Adobe 7GWgw AQaq" dEU6te '7GWgw VNv;r [1p1* ,bJzl/ s-cz} mclc( k1]S_ fEo5[Ic] ;F6]? .>-C6)Gc {Ym5_ 'File written by Adobe Photoshop Adobe 7GWgw 8HXhx )9IYiy *:JZjz 'dtU7 8HXhx 9IYiy *:JZjz $h>'v "t];Y kUZxS~ _1_y_ [MDXis <5]Ve&mc ./X|W s;Ika [~XA; Cw:G4 2(Z.T zSNep8 -_&aW *7Uh\ ZC3WL (y,SL h>[i- P/].l iij$]Y Xb@8u- IDATx^ <wNOu ??G;p/ 5 @>$? 3@G/d ILEVZ6./ HNv#B dikH?jZ 'NNDX kD p.mE !-ITJ F>PmW{ C[!51> x_K%K Je:,R ,X@@m+Ku bqmTz H(R9A 0i)n~ PU w. {FT7| (!Q0XTL _y7^| a{lCZ qHbRdU t//;3, J5br^D tPFwj hh4c"  .K(i 1K/>FI 'Q3!I3 tRZY6 O#P^" ecH5G -b[:d .K, T ?p=|07| I6)YFI $G]OU  ~HnI vzB<[ ]TKUN 6X;yK zH>45|, _isP{ V[nh@`: ZR\c\ WW/j  yvlR^7 :mPgsl bTyEu[ .w*0i x$gIA (y{B@O U[ttT *6ub4 .Tw"?Q y,f_$ 7n_[z '%[[2 snc9p~ Q|=oH [f#P< ?U8os 15xsT) aQcwS 3cb/( osU-UN ?5?7\ 7n_[z -X+>I U[tzT @O{YW wK:yriR #kE9_Sm5 uQUoh 4j<=_ I.i?k }Hhg0B .k7n| ^>=$En< oI$E>d oi7j~v Qv,}y 45jU;0 Tmm { Ej(nL DUK:"? }va!,= rEi!G aZqRN [~2Stc e8QIy K[m(6 eSdB; j/=|gq>Q zY.Pg IDATx^ {ggg>3 ?~ruu S33\dm IWQB9 ?XKao axSA? ,$G1. MSXSCL $;w7f "QB9iJH u*'3u_ R:auY Mmp/"r%|h 'JSN^ c[N>4 O2)}P aPQF1p -8}0K 6{E+3T -{^I/ wp:QK $!+gnat 7MN1- 7qO@y l=_]& Y4}(>f M.Un> >4@d.  ]2MR UL/m|=[ 5M'E@ Rkw"_ZE +WT(j 8`%+] (Kl%m WR;U~C hwE`( ^Qf'64F_ j`EiBH (KG-] 272Z} 8`%+] 'XXp47 ;Fgo^g evbc=O }DD#u E$+kI E{`Ei +0R=F^z WR;w%_Z8K q'Pt4 d@/=M EGz]Q* Q>dGO v}GBq }fdjU qoXjG h^E9F HIz.4b @&=,V E [6Vv ~eQaj ^+J&P*&C  1U*_9B ],^VVL ~i^Qy45 cJSW6 JDYaIbjbjU  HYPERLINK "http://xbox" \t "_parent"   INCLUDEPICTURE "http://xbox/images/header.gif" \* MERGEFORMATINET  Microsoft( XBox(  1.0 The incredible entertainment console  HYPERLINK "http://xbox"   INCLUDEPICTURE "http://xbox/images/email/stat_logo.jpg" \* MERGEFORMATINET  Test Team Guideline Jim Yagelowich (JimY) February 25, 2000 Version 1.0  Legal Notice The information contained in this document is strictly MICROSOFT CONFIDENTIAL. The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication. This document is for information purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT. Microsoft, Win32, Windows NT, and Windows are registered trademarks and BackOffice, and the BackOffice logo are trademarks of Microsoft Corporation. 0696 Part No. 0xx-xxxxx Printed in the United States of America.  Revisions Created by Jim Yagelowich (JimY); February 25, 2000.  TOC \o "1-3"  OvervieW & Schedule  PAGEREF _Toc472147451 \h   PAGEREF _Toc472147452 \h  Enlisting  PAGEREF _Toc472147453 \h  Tree Structure and rules Test Harness Overview Writing your tests 3.2.1 Functional  Tests 3.2.2 Lab Stress 3.2.3 Office Stress 3.2.4 CPU Scale-Testing 3.2.5 RAM Scale-Testing Setting up your Xbox test machine Overview Setting Up A PC-Based XBox 4.2.1 Running  Tests Setting Up A Console-Based XBox Overview & Schedule This document is written to provide information to new comers to the Xbox test team.  It contains guidelines and rules, which, if followed, will help maintain consistency among test team members. One important document all new comers to the Xbox OS Team should read is the   HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\public\\idw\\xcomer.doc"  Xbox Newcomer Orientation  document.   Here is the original schedule of the Xbox OS, dated Feb 28, 2000. Here is the current schedule of the Xbox OS, dated ??? ??, 2001. Enlisting The Xbox Test Team will use the same SLM server as the Xbox Dev Team which is located on   HYPERLINK "\\\\cpitgcfs01\\xbox"  \\cpitgcfs01\xbox When following Section 4.1.1.3 ( Installing yourself as a New Developer ) in the    HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\public\\idw\\xcomer.doc"  Xbox Newcomer Orientation  document, you will need to enlist in these 4 SLM projects: PRIVATE, NTOS, SDKTOOLS, TEST.  To do this you will need to edit your \xbox\private\developr\%USERNAME%\setenv.cmd file to read as: Set NTPROJECTS=private ntos, sdktools test After successfully enlisting in these 4 projects your directories should look like this: Tree Structure and Rules All work done by members of the test team will be located under the \xbox\private\test directory.  The main subdirectories here are: Docs   Test team documents Tools   Test team common tools (such as our test harness, common libraries, logging tools, log parsers)  Test team common headers (such as logging header, common library headers)  Prop directory for test team common libraries.  All common libraries should be placefil d here.  Any components that have a dependency on a common library should link to this directory. Kernel   Kernel teams  tests SDK -- SDK teams  tests Network   Network teams  tests Online   Online teams  tests TestDll   A sample DLL you can build  TestExe   A sample EXE you can build It is important that directory names reflect the component they test   we should NEVER use a tester s name as the name of directory.  Test names should be related to their function to help identify them. Test Harness Overview The test harness consists of a process that runs on the Xbox test machine that loads test DLLs.  The test DLLs are executed in threads managed by the test harness and the DLLs log results (to a text file stored on the Xbox, or through OutputDebugString() statements to be captured using NTSD, or to a network location).  Another tool is then used to summarize the log files and then automatically posts the results to a web page which tracks the build number the test was ran on and the pass/fail/investigate status of the results and a link to the log files containing the results. The tool used to parse the logged output will verify that the output data is of the correct version before coalescing the data into a summary report.  This will allow us to update our log output as needed, or even to create custom logging modules, if needed.  (do we need this?) Writing Your Tests The tests you create will be DLLs that run within the test harness engine.  Your DLLs will need to provide specific test functions, but common test tool functions (such as logging) will be contained in a global library, which your DLL must load and use.  To get started quickly there is a sample DLL you can use a template in the directory \Xbox\private\tools\<harness_name>\SampleDLL of the SLM enlistment on your dev machine. Functional  Tests A full functional test run of the entire IIS test suite will be ran against DataCenter to ensure general functionality. Lab Stress Lab stress will be run to ensure DataCenter survives heavy-loads to a sustained period of time without failure. Ship Criteria (based on Win2000 opinion) is to survive: Beta (March 15, 2000), 21 days of long haul RTM (June 30, 2000), 28 days of long haul There are 4 types of machines that need to survive long haul: Single big box (8 proc, 8 GB RAM) 4-node cluster (specific 4 node enabled machines) 2-node cluster (can be any 2 machines) Regular server-class box (single/dual proc with 512 KB RAM) Office Stress Nightly office stress, how many machines/cyberbricks are required?  50 machines per night with 92% pass rate? CPU Scale-Testing Previously, Windows 2000 supported scaling to 8 CPUs.  DataCenter will support 16 CPUs (possibly 32 CPUs by OEMs).  Tests will be performed to ensure IIS makes proper use of 8 CPU and 16 CPU configurations with the expectations that increased client load can be handled (assuming no hardware bottleneck such as network I/O or disk I/O) when moved from 8 CPU to 16 CPU configuration.  All CPUs should be pushed to 100% CPU usage. RAM Scale-Testing Previously, Windows 2000 supported up to 8 GB of RAM.  DataCenter will support 16 GB (possibly 32 GB) of RAM.  Tests will be performed to ensure IIS makes proper use of 8 GB and 16 GB of RAM configurations with the expectations that increased client load can be handled (assuming no hardware bottleneck such as network I/O or disk I/O) when moved from 8 GB to 16 GB of RAM.   IIS should demonstrate that it benefits from increases in RAM because IIS will have access to a larger (in-memory) cache.    Note, we think we ll have an issue about IIS tsunami cache being restricted to a 4 GB max! Setting Up Your XBox Test Machine Overview Your Xbox test machine is the machine in which most resembles an actual Xbox console.  In the early stages of development it ll basically be a PC that uses video/sound/net/disk components that are similar to those which will be used on the actual console.  These early PC-based machines will also have keyboards, and monitors.  In later development stages we ll have custom-built mainboards and chassis s, which will contain custom burned EEPROMs/ROM chips, which will more accurately resemble the final console.  These later-stage machines won t have a keyboard and may have a TV (instead of a computer monitor). Setting Up a PC-Based XBox To set up a PC-based Xbox, you should read Section 4.2 ( Setting Up Your Xbox Target Machine ) in the    HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\public\\idw\\xcomer.doc"  Xbox Newcomer Orientation  document. Briefly, these are the steps: Make your Xbox PC dual bootable with 2 partitions.  Put Windows98 on C: and  Win2000 Professional on D: Boot into Windows 2000 Professional and tweak some settings (MUST do this before installing the Xbox OS). Make a backup of the Windows 2000 Professional files. Modify your C:\BOOT.INI file so that your Windows 2000 Professional boot entry will appear as the Xbox boot entry (and enable /DEBUG). Boot into your Windows 98 partition. Copy the Xbox OS files to your Windows 2000 Professional installation directory/partition. Reboot your machine into the Xbox OS boot entry!  At this point you should have a machine that is Dual Bootable between  Windows 98  (C: drive) and  Xbox OS  (D: drive). Running Tests During  Step 6  (Section 4.2 of this document), you can also copy the test harness binaries and the test DLLs.  When your Xbox OS boots the test harness will automatically run.  When the harness runs it will load information from an .INI file which tells it which test DLLs should be loaded and executed.  Setting Up a Console-Based XBox To set up a Console-based Xbox    tbd. PAGE   Microsoft Confidential Page  PAGE   Microsoft Confidential Page   PAGE  Microsoft Confidential  Page  PAGE   Microsoft Confidential  Page  PAGE   Microsoft Confidential Page   PAGE  xkxeZeLZe
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\direct3d uma emulation test plan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Direct3D UMA Emulation Test Plan Title _PID_HLINKSDirect3D UMA Emulation Test Plan Jason Gould Normal.dot Jason Gould Microsoft Word 9.0Direct3D UMA Emulation Test Plan Owner: Jason Gould Last modified: 25 October 2000 Test   HYPERLINK "mailto:jgould"  JGould  HYPERLINK "mailto:andrewso"  AndrewSo  HYPERLINK "mailto:kylej"  KyleJ  HYPERLINK "mailto:karencs"  KarenCS Usability  HYPERLINK "mailto:tombro" TomBro Tools needed:  Code Coverage:  ICECap Static Analysis: PREfix PC-Lint Typo.pl Leak: Automated testing Corruption: Windows 2000 Driver Verifier? Injector Automated testing Hardware needed:  For alpha-2 release: standard Xbox dev-kit, including nv20 card For Beta release: xbox hardware with UMA architecture Exposed Methods and Enumerations: enum D3DMEMORY { D3DMEMORY_AGP = 0, D3DMEMORY_VIDEO = 1, D3DMEMORY_FORCE_DWORD = 0xffffffff HRESULT IDirect3DDevice::MoveResource(IDirect3DResource8*, D3DMEMORY); MoveResource will: Successfully move the resource to the memory location provided Do nothing if the resource is already in that memory location Return an error code if not enough memory is available Return D3D_OK if everything worked (note: MoveResource may be changed (before alpha 2) to return VOID) Description: MoveResource will be used to move various resources (vertex buffers, texture maps, etc) into video memory (and back to UMA-Emulated / AGP memory) in order to have speed similar to the final hardware. In addition to speed, nv20 requires that all render targets be in video memory, so MoveResource must be used to move any resources used as render targets into video memory. Test Methods: Focus: The goal of testing is to ensure that MoveResource will allow speedy transfers of resources between the two memory locations, without corruption, leaks, or crashing. MoveResource must also not be bloated in size, and must work while also using various other xbox routines (Sound, usb, networking, etc). In addition, the transition between Alpha hardware and final hardware must be as minimal as possible. For beta release, MoveResource will be changed to an empty inline function, with same return type, in order to minimize work for the game developers. Tests must also ensure that the resources function properly once in the new memory location. It should be noted that UMA emulation will be covered pretty thoroughly by the rest of D3D tests, since all resources except auto-frame/depth buffers will be created in UMA-emulated / AGP memory. Tests: Performance: Tests will provide performance data for moving the resources, and their speed after moving. Code Reviews: MoveResource will be included and reviewed in d3d code reviews. MoveResource will be included in all appropriate types of d3d tests (api, perf, bvt, etc) Test complete criteria: Once all appropriate tests have been written, test development for D3D UMA emulation can be declared complete Release criteria: All tests should pass in order to sign off on a release candidate.  If a shipping build is being considered for a specific title, all tests covering the features used by the title must pass.  The only failure cases acceptable in a release are those whose repro steps are declared too obscure to be hit by ISVs, a determination made by triage on a case-by-case basis.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\HardwareTest.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal.dot John Daly Microsoft Word 10.0bjbjk Hardware Test Plan Author: John Daly Last changed: 11/3/2001  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test  HYPERLINK "mailto:johndaly@microsoft.com" John Daly HYPERLINK "mailto:jpoley@microsoft.com" Josh Poley HYPERLINK "mailto:jimhelm@microsoft.com" Jim Helm HYPERLINK "mailto:jont@microsoft.com" Jon Thomason HYPERLINK "mailto:paullu@microsoft.com" Paul Lukinich Usability  International  Test scenarios Test scenarios for hardware cost reduction / manufacturing changes will be varied, some we can pull from the work we did for initial launch, other will be refined from those, and others will have to be created as we go. We need a process to create these for each cost reduction cycle / each cost reduced component. The process for figuring this out will be part of this overall process: hardware team proposes cost reduction change / component change and notifies all interested parties, and provides a proposed schedule for this hardware to be introduced so we can plan the testing. hardware and software team sit down and figure out how to test this Major components, like a DVD Rom drive, have gone through this cycle before, we have release criteria established for them (sort of   marcw/johndaly), and test tools / processes we use that we use to see whether the items meet the required performance and functional specifications. Minor components, such as a the TV encoder chip, may require an original or improved plan so we can target testing that component. A good spec is provided to the vendor so they can make sure they are making what we want. This spec must include measurable release criteria that then be taken into account when writing the test tools. A test plan (specifically, the test plan from step 2 above) is provided to the vendor so they can pre-test. This can be the same test plan we use, or one more tailored to their situation. For devices that we can write test software to use for testing, the tools are provided to the vendor along with complete instructions for their use. Tools may need some modification to work off-site. Tools will ideally provide data the vendor can use to determine whether their item meets our release criteria. When appropriate, a hardware test platform is supplied to the vendor to use for the duration of the testing. For items such as a DVD Rom drive, we can supply retail consoles, and retail signed tests for them to use. If the vendor requires debugging capabilities, the vendor will need to be supplied with devkits and the appropriate software. When the vendor has demonstrated that their component is ready for testing, it will be submitted to us in quantity sufficient for our testing as determined in the test plan created in step 2. At this point, the hardware and software test team stage in their respective labs and start testing. Once the tests have started, we need to get a feel for how things look and adjust the plan. Schedule another round of what happened in step 2 to make sure that we are doing the right thing. If we need to make a change, we iterate through the appropriate steps above to make the plan conform to reality. If we did everything right, there will be minimal iteration here. If we messed up, this is our chance to correct it. If we keep messing up, we ll have the same kind of fun that we did with the DVD Rom drives Once we have the tests running and adjusted as needed, the results are added to the weekly hardware test report. Results need to include failure data, pass rates, bug #, etc. Here I will enumerate the types of testing that we do for Xbox (mostly from the software perspective, but a lot of it will apply across the board) Kernel software testing File System Memory manager Threads Startup / system boot / initialization XDK library testing Graphics Sound Input Xbox-specific APIs (saved games, etc) Win32 APIs Network APIs Dashboard Sample code tests Debugger / development system tests Test for setting up the debugger / development tools Hardware Test Support DVD ROM tests Hard drive tests Memory tests Graphics tests Input / USB tests / USB simulator Stress testing Run all of the software tests above simultaneously to stress the system BVT Tests Run all the tests above sequentially after each build to uncover bugs in the current build Spec reviews For each proposed hardware change, these questions must be answered: Who owns the spec<provide a pointer>? 2.)  Where is the spec<provide a pointer>? 3.)  Is the spec sufficient to design, document, and test this feature? Tools needed For the purpose of testing cost reduced / 2nd sourced hardware components, we ll need 2 classes of tools, some of which we already have and can be adapted for this purpose, some of which we ll have to develop as needed. Class 1, support and test framework tools XDK launcher (need docs - jimhelm) This tool provides a menuing system from which specific tests can be selected by the console operator using a controller XLog logging system (test\docs\logging.doc) This provides logging to disk, to kernel debugger, and to server, the logging can be controlled from the testini.ini file that the test harness uses to initialize the test. Test Harness (test\docs\x-box test harness.doc and test\docs\ini file structure and functions.doc) This is an executable image that has all the required tests bound into it. It runs the tests as specified in the testini.ini file. Test Server (need docs - jpoley) Test Results web page (need docs - jpoley Class 2, specific tests (some of which are written and ready to integrate, some of which can be adapted from existing test code and made to conform to hardware test needs) hard disk functionality and perf test tools (jpoley/t-msanto/johndaly) DVD ROM drive functionality and perf test tool (jpoley/t-msanto) USB / Input functionality and perf test tool (jpoley/t-msanto) Network functionality and perf test tool (jimhelm) Memory functionality and perf test tool (jpoley/t-msanto) Graphics / TV encoder functionality and perf  test tool (mattbron) Automated power cycling tests (jpoley/johndaly) What the finished Hardware test product needs to look like and do use the harness for control / management / logging support use the launcher for test start if possible, display test status / pass fail / %complete stats on the screen if possible, control input through the USB   for example, stop / start test, etc  Test run logs to server, and web page for test run created for results distribution Hardware needed To do this, we need new hardware, or components mounted in old hardware / XDKs. We prefer XDK type kits, we can attach a kernel debugger and debug low-level problems more effectively. Test methods Test code This was covered above. Manual tests Currently, we are contracting out the manual final integration / manual power cycling tests. Automated power cycling tests are good, but the power-cycle interval is fixed, which does not cover real world scenarios. The manual power cycling tests cost ~$50k / week to perform. And automated solution to this would be nice, but would require specialized hardware (sethmil can probably make this for us, a programmable interval electronic switching thing that could run a bench of 25 boxes would be cool). Also covered by manual tests has been media detect testing for the Dashboard / DVD ROM drive. I don t see any way to automate most of this, since the disk needs to be changed. The service costs ~$50k / week. Last but not least, game testing. All hardware must perform the same, all games must play the same. Something that changes can make a game play better, but that same change may degrade another game. We have been using vendors managed by the certification test team for game testing. The group that does the functional testing part of cert testing will most likely be responsible for backwards compatibility testing new consoles with old games. Configuration tests All configurations must be tested using the entire test process, from component-level to game play before release. Performance testing The tools described above must also test performance using techniques that give meaningful results so that components may be compared with like components. If a performance change is noted, then game play testing must occur to make sure that no titles get broken. If no performance change is noted, game play must still be tested, but can be done so less intensively than for the case where there is a significant change. After low level component testing happens, the appropriate game play test must be scheduled.  Catastrophic failure testing Any component that suffers catastrophic failure must be evaluated for frequency of failure, and that data analyzed by competent, senior management before it is allowed to ship. We have not done a whole lot of thinking in that area, so our criteria are spotty. Marc Whitten and John Daly have written criteria for aspects of the DVD ROM drive, criteria of a similar nature must be developed for any changed components. Test complete criteria The test is complete when the test us usable by suppliers, the hardware team, and the software team. Tests must be easy to use, and provide numbers that are compatible with the release criteria mentioned elsewhere in this doc (the release criteria must be developed for each changed components). Release criteria Release criteria, as mentioned above, must be developed for each item as early as possible in the process outlined above so that the test tools know what to look for. This should be part of the spec process.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\ini file structure and functions.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. INI file structure and functions TitleINI file structure and functions johndaly Normal.dot Sakphong Chanbai Microsoft Word 9.0INI file structure and functions By John Daly, Kernel Test Lead To use INI files effectively, we need to access them in a consistent way. We ll steal the following API s from Win2K and implement them ourselves. We can also get the source code from Win2k. We may want to Unicode-ize them. If we have all of these API s, we can make the INI file as complex as we wish, but if we want to stick with the simple version below, we can cut several of these. Copied from MSDN, you can look at full descriptions there: Initialization-File Functions Initialization-file functions obtain information from and copy information to a system- or application-defined initialization file. The Windows initialization file (Win.ini) is a special file that contains entry-value pairs representing run-time options for applications. These functions are provided only for compatibility with 16-bit versions of Windows. UINT GetPrivateProfileInt(   LPCTSTR lpAppName,  // section name   LPCTSTR lpKeyName,  // key name   INT nDefault,       // return value if key name not found   LPCTSTR lpFileName  // initialization file name DWORD GetPrivateProfileSection(   LPCTSTR lpAppName,        // section name   LPTSTR lpReturnedString,  // return buffer   DWORD nSize,              // size of return buffer   LPCTSTR lpFileName        // initialization file name DWORD GetPrivateProfileSectionNames(   LPTSTR lpszReturnBuffer,  // return buffer   DWORD nSize,              // size of return buffer   LPCTSTR lpFileName        // initialization file name DWORD GetPrivateProfileString(   LPCTSTR lpAppName,        // section name   LPCTSTR lpKeyName,        // key name   LPCTSTR lpDefault,        // default string   LPTSTR lpReturnedString,  // destination buffer   DWORD nSize,              // size of destination buffer   LPCTSTR lpFileName        // initialization file name BOOL GetPrivateProfileStruct(   LPCTSTR lpszSection,  // section name   LPCTSTR lpszKey,      // key name   LPVOID lpStruct,      // return buffer   UINT uSizeStruct,     // size of return buffer   LPCTSTR szFile        // initialization file name BOOL WritePrivateProfileSection(   LPCTSTR lpAppName,  // section name   LPCTSTR lpString,   // data   LPCTSTR lpFileName  // file name BOOL WritePrivateProfileString(   LPCTSTR lpAppName,  // section name   LPCTSTR lpKeyName,  // key name   LPCTSTR lpString,   // string to add   LPCTSTR lpFileName  // initialization file BOOL WritePrivateProfileStruct(   LPCTSTR lpszSection,  // section name   LPCTSTR lpszKey,      // key name   LPVOID lpStruct,      // data buffer   UINT uSizeStruct,     // size of data buffer   LPCTSTR szFile        // initialization file The ini file used by the test harness, to be called testini.ini, will have the following structure. I have kept it as primitive and simple as possible: ; Global Settings ; If there is no per-module setting, global setting will be used [GeneralSettings] StressTestMode=0 ;0=APIs test, 1=stress test default is 0 ;SerialTestMode and ParallelTestMode will be ignored ;if StressTestMode=1 StressStartTime=03/15/2000/18:00 StressStopTime=03/15/2000/06:00 SerialTestMode=1 ;1=enable serial test, 0=disable, default is 1 ParallelTestMode=0 ;1=enable parallel test, 0=disable, default is 0 ;If both SerialTestMode=1 and ParallelTestMode=1 ;both serial and parallel mode will be tested LogLevel=0 ;default is 0 Iterations=1 ;default is 1 NumberOfThreads=1 ;default is 1 ThreadStackSize=16384 ;default is 16K SynchronizeMultipleRun=0 ;StartTest will be run simultaneously if 1 in multithread ;configuration (NumberOfThreads>1), default is 0 ; List of the test modules to be loaded and executed [TestList] Badman   ;No path specified, default location is \TestRoot XapiTest FileSystemTest [Badman] ;;;use all standardize parameters from global settings, no log file. Foo1=Bar1 ;User-defined parameter Foo2=Bar2 ;User-defined parameter [XapiTest] ;;;override global settings LogFile=XapiTest.log ;No path, that means \TestRoor\XapiTest.log LogLevel=1 Iterations=2 NumberOfThreads=3 ThreadStackSize=0 ;Use operating system default SynchronizeMultipleRun=1 ;StartTest will be run simultaneously Foo1=Bar1 ;User-defined parameter [FileSystemTest] LogFile=\SystemRoot\FstestLog.log ;Full path specified
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\leaks.doc ===
Microsoft Word Document MSWordDoc Word.Document.8microsoft Memory and Resource Leak Detection on NT Title _PID_GUID _PID_HLINKSMemory and Resource Leak Detection on NT john daly Leaks Matt Bandy Microsoft Word 8.0zy,inMemory and Resource Leak Detection on NT What are leaks and why are they bad?: A leak is a loss of resources caused by creation or allocation of a resource and failure to free the resource.  You can leak resources such as memory, user and gdi objects, handles, threads, etc. Leaks are a problem because system resources are limited, even under NT, and when the system becomes low on resources, it can impact not only the leaking process, but other process and the entire system as well. Symptoms of leaks: There are many ways customers are affected by leaks.  We have seen machines slow down, problems with apps ranging from not being able to start to not displaying text correctly.  Some of these things are caused by a low memory situation brought about by the leak.  Sometimes there may be a lot of memory left, but there are lots of allocations left around that slow down memory management functions.  Other times we have seen handle counts increase.  There are also pool leaks, which occur when the pool memory (memory used by the NT kernel and drivers) is consumed.  This can occur when an app leaks bitmaps, for example, which cause memory to be allocated in the kernel s pool.  When the app exits or frees the bitmaps, the memory is freed.  Bad drivers may also cause pool leaks.  There is a finite amount of memory allocated for usage by the pool, you can use pmon to see what that amount is. Customer impact of leaks: When a customer s machine enters a low memory condition that was caused by a leak, they will perceive several things.  There is a popup  System out of virtual memory .  If the customer has only one app open and sees this message, it can be very confusing.  You can do easily this with many versions of MS-Word. Strange app and system behavior.  When the machine is out of memory, applications that do not behave well in low memory are stressed, and this can cause problems like improper displays, abnormal termination, etc. Slowdown in the system.  When there is a lot of memory allocated, it can cause excessive swapping which will slow down the system. When the above situations are encountered by users, it isn t always obvious to them that there is a leak.  All they see is their system acting abnormally.  Bugs that cause faults and exception in a repeatable manner are less of a problem since they usually have causal actions associated with them.  The customer sees this and can work around it.  Leaks can manifest themselves in a way that appears to be random failure.  An application can fail at many different points in a situation where there are not enough resources to carry out the desired operation. When customers start seeing apparently  random  failures, their first thought is not  I have a bad app leaking memory and that is causing instability in my system , it is  this is an unstable operating system Pool leaks - these can be especially mysterious since you can exhaust pool memory even though you have plenty of swapfile left. Tools: Bounds Checker. (Nu-Mega Technologies) There are versions of this tool for Win31, NT, and Win95, and a less than fully functional version ships with Visual Test.  It provides parameter validation for API s, checks memory accesses, has memory and resource leak detection.  It is suitable for stand alone processes, it cannot be used to test system components (you can t test the kernel with it!).  It is easy to use, it will take you to the line of code that caused the problem.  It requires binaries to be built with debug information.  Suitable for testers and developers. PMON.EXE (MS) This is a very easy to use tool.  It is available from   HYPERLINK \\\\ntbuilds\\release\\usa\\<buildnum>\\  \\ntbuilds\release\usa\<buildnum>\ <x86 | alpha>\<fre | chk>.<wks | srv>  (ie \\ntbuilds\release\usa\latest.tst\x86\fre.wks\mstools).  It provides a wealth of information on processes running on the system.  Many common leaks can be found using this tool. You need to pay special attention to the commit charge and to the number of handles, these are usually the best leak indicators.  Commit charge is the amount of memory in pages that is allocated to a process.  Here is a sample display: Memory:   65072K Avail:   4108K  PageFlts:   251 InRam Kernel: 3020K P:10196K  Commit:  96340K/  60568K Limit: 176416K Peak: 182560K  Pool N: 4312K P:19504K                 Mem  Mem   Page   Flts Commit  Usage   Pri  Hnd Thd  Image CPU  CpuTime  Usage Diff   Faults Diff Charge NonP Page     Cnt Cnt  Name               17936    0  5270504    6                             File Cache 99  93:27:32     16    0        1    0      0    0    0  0    0  2 Idle Process  0   0:11:53     24    0     4657    0    252    0    0  8  222 32 System  0   0:00:02      0    0     6146    0    168    1    4 11   32  6 smss.exe  0   0:14:56   2672  112   176533  207   7084    6   25 13  429 20 csrss.exe  0   0:00:06    648    0    12658    0   1760   14   19 13  172 12 winlogon.exe  0   0:00:21   1072    0    31432    0   2572  240   21  9  499 31 services.exe  0   0:00:10    656    0    48168    0   2116   50   21  9  288 13 lsass.exe  0   0:00:01   1076    0     8042    0   1620   13   16  8   98 10 spoolsv.exe  0   0:00:02    360    0    19194    0    928  180   12  8  226 10 RpcSs.exe  0   0:00:00      0    0      767    0   1020   11   16  8   49  2 scesrv.exe  0   0:00:01    124    0     9147    0    828  107   17  8   79  6 MSTask.exe  0   0:00:03     80    0    62217    0   1292    4   18  8   80  8 ntmssvc.exe  0   0:00:00    388    0    16520    0   1356    5   16  8  105 10 sens.exe  0   0:00:00    132    0    17509    0    648    2   11  8   47  4 esserver.exe  0   0:00:04    120    0     6645    0   1012    4   18  8   43  1 SysTray.Exe  0   0:00:01    360    0    16576    0   1828   22   21  8  208 11 svchost.exe  0   0:19:25   6788    0    74848    0   5152  152   36  8  199  8 exchng32.exe  0   0:40:21   1700    0   583789   24    444    2   14 13   30  3 taskmgr.exe  0   0:00:02    780    0     9706    0   1388   85   22  8  103  8 MAPISP32.EXE  0   0:00:00    100    0     6134    0   1120   12   15  8   86 11 tapisrv.exe  0   0:00:45    940    0    10821    0   2920    2   16  8   21  1 vs.exe  0   0:02:47   1740    0    74002    0   4304    7   28  8  177  8 Explorer.exe  0   0:01:39    372    0    20379    0   3728    4   20  8   61  2 raid4.exe  0   0:00:09    952    0     6265    0   2372    5   39  8   81  4 excel.exe  0   0:00:00     20    0      326    0    348    1   14  8   23  1 CMD.exe  0   0:00:01      0    0      593    0    576    1   14  8   22  1 CMD.exe  0   0:00:25    668    0     8801    0   3884    4   18  8   50  3 Opera.exe  0   0:00:00     24    0      751    0    676   11   14  8   45  9 netdde.exe  0   0:00:20   7216    0     4757    0   4232    5   30  8  206  4 IV5.EXE  0   0:00:00    488    0      685    0    344    1   14  8   23  1 CMD.exe  0   0:00:45  11832    0     9662    0   4236    8   65  8  150  3 Winword.exe  0   0:00:00    484   20      228   14    360    1    6 13    9  1 pmon.exe CPU: % of the CPU used in the last 5 seconds. CpuTime: The CPU time that this process has used since it started. Mem Usage: Memory used by the app in kilobytes. Mem Diff: The difference in the amount of memory used by the app since the last measurement. Page Faults: The number of page faults in the process since it started. Flts Diff: The number of page faults that have occurred since the last measurement. Commit Charge: The amount of committed memory pages in kilobytes. Usage Nonp: Kernel non paged pool pages associated to the process. Usage Page: Kernel paged pool pages associated to the process. Pri: Priority. Hnd Cnt: Open handles owned by the process. Thd Cnt: Threads owned by the process. Image Name: Name of the process image. DH.EXE and DHCMP.EXE (MS) These are tools that are available as part of the daily build.  They are good for developers to use for tracking down leaks.  They are easily incorporated into batch files and can be called from scripts. dh.exe:   HYPERLINK \\\\ntbuilds\\release\\usa\\<buildnum>\\  \\ntbuilds\release\usa\<buildnum>\ <x86 | alpha>\<fre | chk>.<wks | srv>  (ie \\ntbuilds\release\usa\latest.tst\x86\fre.wks\idw) dhcmp.exe:   HYPERLINK \\\\ntbuilds\\release\\usa\\<buildnum>\\  \\ntbuilds\release\usa\<buildnum>\ <x86 | alpha>\<fre | chk>.<wks | srv>  (ie   HYPERLINK \\\\ntbuilds\\release\\usa\\latest.tst\\x86\\fre.wks\\mstools  \\ntbuilds\release\usa\latest.tst\x86\fre.wks\ Usage:  DH: Default _NT_SYMBOL_PATH to D:\WINNT\Symbols Usage: DH [-p n | -p -1 | -p 0 [-k] [-o]] [-l] [-m] [-s] [-g] [-h] [-t] [-f file Name] where: -p n - displays information about process with ClientId of n in DH_n.dmp        -p -1 - displays information about Win32 Subsystem process in DH_WIN32.DMP.        -l - displays information about locks.        -m - displays information about module table.        -s - displays summary information about heaps.        -g - displays information about memory hogs.        -h - displays information about heap entries for each heap.        -t - displays information about heap tags for each heap.        -b - displays information about stack back trace database.        -i - ignore information about stack back trace database.        -p 0 - displays information about kernel memory and objects in DH_SYS.DMP.        -o - displays information about object handles (only valid with -p 0).        -k - displays information about processes and threads (only valid with -p 0).        -f fileName - specifies the name of the file to write the dump to.        -# n - sets buffer size to n Meg        -- specifies the dump output should be written to stdout.        Default flags for -p n are -s -g        Default flags for -p 0 are -m -s -g -t -k -o DHCMP has two modes: 1)  DHCMP [-d] [-v] dh_dump1.txt dh_dump2.txt     This compares two DH dumps, useful for finding leaks.     dh_dump1.txt & dh_dump2.txt are obtained before and after some test     scenario.  DHCMP matches the backtraces from each file and calculates     the increase in bytes allocated for each backtrace. These are then     displayed in descending order of size of leak     The first line of each backtrace output shows the size of the leak in     bytes, followed by the (last-first) difference in parentheses.     Leaks of size 0 are not shown.  Specifying  v will include the full     stack backtraces and the increase in number of allocations for each      backtrace as well as the information listed above. 2)  DHCMP [-d] dh_dump.txt     For each allocation backtrace, the number of bytes allocated will be     attributed to each callsite (each line of the backtrace).  The number     of bytes allocated per callsite are summed and the callsites are then     displayed in descending order of bytes allocated.  This is useful for     finding a leak that is reached via many different codepaths.     ntdll!RtlAllocateHeap@12 will appear first when analyzing DH dumps of     csrss.exe, since all allocation will have gone through that routine.     Similarly, ProcessApiRequest will be very prominent too, since that     appears in most allocation backtraces.  Hence the useful thing to do     with mode 2 output is to use dhcmp to comapre two of them:         dhcmp dh_dump1.txt > tmp1.txt         dhcmp dh_dump2.txt > tmp2.txt         dhcmp tmp1.txt tmp2.txt     the output will show the differences. Flags:     -d   Output in decimal (default is hexadecimal)            -v   Verbose output     -?   This help To use DH, run x86 checked builds (these are the only builds that support this, in the future, this capability may be extended to free builds ant to RISC builds) with the following global flag settings and application flag settings (manipulate with gflags.exe) To enable checking with DH on your application, build with NTNOFPO=1 set in your environment. (which means, for those of you not using NT build, disable the FPO optimization as explained here: frame pointer optimization: the /Oy option for the cl386 compiler Syntax The /Oy option suppresses creation of frame pointers on the call stack. This option speeds function calls, since no frame pointers need to be set up and removed. It also frees one more register, EBP, for storing frequently used variables and subexpressions. The /Ox (full optimization) and /O2 (fast code) options imply /Oy. The /Oy  option overrides /Oy whether it is explicit or implied. So, to build your component for leak checking on NT, use this compiler switch: /Oy- ) System registry settings to use DH (set using gflags.exe): For user-mode stack traces, select the following options in gflags: Select  Create user mode stack trace DB Click  Apply Click  For kernel-mode stack traces, select the following options in gflags: Select  Create kernel mode stack trace DB Click  Apply Click  Application registry settings to use DH on a particular process (set using gflags.exe): In the  Image File Options  box in gflags, enter the name of the executable (ie windbg.exe) Select  Create user mode stack trace DB Click  Apply Click  How to read DH and DHCMP logs: DH Logs: *********** Module Information ******************** Number of loaded modules: 20 Module01 (00,19,65535): [015b0000 .. 015f9fff] D:\WINNTCHK\Explorer.exe Module02 (01,01,65535): [77f30000 .. 77fa6fff] D:\WINNTCHK\System32\ntdll.dll *********** Heap 00340000 Information ******************** information about each heap in a process *********** Heap 00340000 Hogs ******************** stack traces for largest heaps *********** Lock Information ******************** NumberOfLocks == 80 Lock1 at 77f903a0 (CriticalSection)     Contention: 0     Usage: 502     Owner:   (ThreadID == 54) sample stack trace from a heap allocation: 000010f8 bytes by: BackTrace02658  (NTDLL!LDR Database)         ntdll!RtlDebugAllocateHeap+0x14d         ntdll!RtlAllocateHeapSlowly+0x4e         ntdll!RtlAllocateHeap+0x9ef         SHELL32!_InitializeTask+0x5b         SHELL32!SHGetHandlerEntry+0xd3         SHELL32!_CreateInstance+0x18         SHELL32!SHCoCreateInstance+0x1ee         SHELL32!DCA_CreateInstance+0x23         SHELL32!HDXA_AppendMenuItems+0xfa         SHELL32!CDefFolderMenu_QueryContextMenu+0x200         Explorer!StartMenuFolder_ContextMenu+0xcf         Explorer!TrayWndProc+0x721         USER32!DispatchClientMessage+0x7f         USER32!__fnDWORD+0x24         ntdll!KiUserCallbackDispatcher+0x13         USER32!ButtonWndProcW+0x60 You can see that there is lots of information available from this tool.  By using some of the other switches, you can get even more, I am just showing you the basics. DHCMP Logs: these logs show the difference between 2 DH dumps, and they look like this: +    10f8 ( 10f8 -    0)        BackTrace02658  (NTDLL!LDR Database) +     bf8 (  bf8 -    0)        BackTrace03705  (BASEDLL!LMEM) +     a00 (  f00 -  500)        BackTrace01532  (BASEDLL!LMEM) +     810 (  d70 -  560)        BackTrace00623  (NTDLL!LDR Database)  means an increase in size, the next number is the size of the change, the numbers in brackets are the computation of the size difference (log1 size - log2 size),  the BackTraceXXXXX is a reference to the stack trace in the DH log.  So, for the first listing in the DHCMP log, the corresponding DH log entry is the preceding stack trace.   The best way to use these tools is to run test variations several times in a row, and run DH between the iterations, then at the end use DHCMP to diff the logs. At the end of this document, I will discuss test case design to help you get the most out of this technology. In a nutshell, you can run the tests like this: Testvar DH -p <pid of test process> -f log1 Testvar DH -p <pid of test process> -f log2 DHCMP log1 log2>comp.log Debug Heap Manager (MS) (information courtesy of Tom McGuire) Instructions for enabling and using the PageHeap testing feature in Windows NT. 1) Overview of PageHeap testing feature. 2) Configuring your system to enable the PageHeap testing feature. 3) Using the PageHeap testing feature. ------------------------------------------------------------------------------- 1) Overview of PageHeap testing feature. A common problem in application development is heap corruption.  This typically occurs when an application allocates a block of heap memory of a given size and then writes to memory addresses beyond the requested size of the heap block:     pszString = malloc( strlen( "SomeText" ));     strcpy( pszString, "SomeText" ); In this example, pszString references a heap allocation of 8 bytes (strlen of "SomeText"), but the strcpy function will write 9 bytes into the pszString allocation because strcpy also copies the terminating NULL character which is not included in the strlen calculation.  This particular example is probably the most common source of heap corruption. Another common cause of heap corruption is writing to block of memory that has already been freed:     pStruct = malloc( sizeof( *pStruct ));     free( pStruct );     pStruct->Member = 0; In this example, consider what would happen if the heap manager assigned the block of memory freed by the "free( pStruct )" statement to another allocation (possibly in another thread) before the "pStruct->Member = 0" statement was executed. There are various testing tools and techniques available to application developers for catching heap corruption problems in applications, but most of these techniques only catch the corruption at some point after the corruption occurs.  Even after learning that corruption did occur, it can still be difficult to trace through the code to find the source of the corruption. To help developers find heap corruption problems faster and more reliably, we designed the PageHeap testing feature into the Windows NT heap manager.  When the PageHeap feature is enabled for an application, all heap allocations in that application (including heap allocations from all DLL's in that process) are placed in memory such that the end of the heap allocation is aligned with the end of a virtual page of memory with the following page of virtual memory set to NO_ACCESS.  With the heap allocation aligned at the end of virtual page, any memory reads or writes beyond the end of the heap allocation will cause an immediate access violation in the application which can be caught within a debugger to show the developer the exact line of code that is causing heap corruption.  And similar for freed heap allocations, the PageHeap manager changes the freed allocation's virtual page protection to NO_ACCESS so that an access violation will occur if the application attempts to read or write memory in the freed heap block. The PageHeap feature will work for all heap allocations made through the Win32 heap APIs (HeapAlloc, GlobalAlloc, and LocalAlloc) as well as any C-runtime heap functions (malloc, calloc) that are implemented with the Win32 heap APIs. It will not work for C-runtime heap functions where the C-runtime library implements its own heap manager rather than using the Win32 heap manager. With the PageHeap feature enabled for an application, the application will run a little bit slower and require quite a bit more virtual memory (pagefile size) than normal because each heap allocation requires two full pages of virtual memory (a virtual page is 4096 bytes on most systems or 8192 bytes on some systems).  Depending on an application's heap usage, it might be necessary to increase the size of the system's pagefile while using the PageHeap testing feature to avoid getting "Out of Virtual Memory" error messages.  It is not advisable to run more than one application with the PageHeap feature enabled at the same time unless the system has a very large pagefile. ------------------------------------------------------------------------------- 2) Configuring your system to enable the PageHeap testing feature. The PageHeap testing feature is only available in Windows NT 4.0 and above, and it is only available while running the "checked" version of NTDLL.DLL (we did not want to add the overhead of this testing feature in the "retail" version of NTDLL.DLL for obvious performance reasons) except on NT 5.0, where it will run on  the free version.  While the recommended method of using the PageHeap testing feature  is to install and run a "checked" version of Windows NT (install Windows NT from the  Windows NT "checked" CD), it is possible to use the PageHeap testing feature on an  ordinary "retail" installation of Windows NT by replacing the retail version of  NTDLL.DLL with the checked version (note that this is not necessary on NT 5.0). Here are the instructions for replacing the system's retail NTDLL.DLL with the checked version.  WARNING: if any of these steps fail, or if for some reason the checked NTDLL.DLL doesn't run correctly, the system will fail to boot.  It will then be necessary to restore the original NTDLL.DLL either by using the emergency repair option in Windows NT Setup, or by booting another operating system and re-copying the original NTDLL.DLL. Assuming the Windows NT SDK has already been installed such that the rebase.exe program is in the PATH, and assuming Z: is the CD-ROM drive containing the Windows NT checked version, and assuming the system is an x86 system (change as necessary), from a CMD prompt:     cd /d %SystemRoot%\system32     copy z:\i386\ntdll.dll .\ntdll.chk     rebase -b 60100000 ntdll.chk     ren ntdll.dll ntdll.sav     ren ntdll.chk ntdll.dll     <shutdown and reboot> The rebase step is necessary to avoid DLL address collisions with other system DLLs because the checked version of NTDLL.DLL requires a larger address range than the retail version.  If the rebase step is not performed, the system will fail to boot. If renaming ntdll.dll fails indicating that ntdll.dll is in use by another process, Windows NT may be started with the /debug load option.   Remove the /debug option to rename ntdll.dll. Once the Windows NT system is running with a checked version of NTDLL.DLL, the PageHeap feature can be used. ------------------------------------------------------------------------------- 3) Using the PageHeap testing feature. The PageHeap testing feature can be enabled and disabled for individual applications with the pageheap.exe program or with gflags.exe on NT 5.0.   The pageheap.exe program takes the name of the application followed by  either the /enable or /disable option.  The application binary is not read or  modified by the pageheap.exe program   the program merely stores some  information in the system registry that is later referenced when the application  is started. Once the PageHeap feature is enabled for an application, every time the application is started it will run with heap allocations placed at the ends of virtual pages.  It is recommended that the application be started under control of a debugger while using the PageHeap feature so that access violations can be caught by the debugger rather than by the application's own structured exception handling mechanism.  Even if the application is started outside of a debugger (like with the Start menu), it will still run with the PageHeap feature enabled and fault if/when it encounters a heap violation. So, the steps to run an application with the PageHeap feature enabled are:     pageheap.exe appname.exe /enable      (or use gflags.exe on NT 5.0 and select  Place heap allocations at ends of pages     start appname.exe (or launch the app from a debugger)     use the app normally until an access violation occurs     debug the app to determine why it referenced memory         outside the allocated heap block (or inside the         freed heap block). To assist developers in debugging applications that fault while using the PageHeap feature, we've included some debugger extensions for the NTSD debugger program.  The NTSD debugger program can be found on the Windows NT checked CD under the \support\debug\i386 directory (or \support\debug\mips etc).  To use the NTSD debugger with PageHeap extensions, the NTSDEXTS.DLL file must be in the system PATH.  Once the application faults under the NTSD debugger, the PageHeap debugger extensions can be used from the NTSD debugger prompt.  For example, if the application caused an access violation attempting to write memory at address 0x455000, type this at the NTSD prompt:     !ntsdexts.dphfind 455000 The debugger will respond with something like this:     PAGEHEAP: 455000 is 0x1 bytes beyond the end of allocated heap block at               454ff8 of 0x8 bytes, allocated by:               77f3794b ntdll!RtlAllocateHeap+a0e               77ed5e09 kernel32!LocalAlloc+0x71               0040101d testapp!main+0x1d               004010f5 testapp!mainCRTStartup+0xc1 Note that the stack backtrace of the point where the heap block was allocated is only available on x86 systems, and the symbolic names of the stack backtrace addresses are only available if the appropriate .dbg files have been installed (see the SDK documentation). In addition to the "!ntsdexts.dphfind" debugger extension, there are also "!ntsdexts.dphdump" and "!ntsdexts.dphhogs" debugger extensions that are specific to applications running with the PageHeap testing feature. If the app you're trying to debug uses the msvcrt.dll malloc/new for its heap allocations, the NT5 version of MSVCRT.DLL contains its own small block suballocator.  To get the pageheap behavior on malloc/new calls going through MSVCRT.DLL, you need to disable the small block suballoctor when you start your app.  Assuming you have good msvcrt symbols, at the initial breakpoint in the debugger (or whenever you want the msvcrt malloc/new calls to start going to the Win32 heap apis), set the msvcrt!__sbh_threshold value to zero.  In ntsd, it would look like this: 0:000> ed msvcrt!__sbh_threshold<Enter> 7803e3ec 000001e0 0<Enter> 7803e3f0 ffffffff <Enter> 0:000> g If you have good msvcrt symbols, the __sbh_threshold default value should show up initially as 0x1E0. ------------------------------------------------------------------------------- We hope you find the PageHeap testing feature useful for tracking down heap corruption problems in applications. This heap tool has already helped track down many bugs throughout the system.  If you have any questions or problems using this heap tool, contact Tommcg. Memsnap.exe, Poolsnap.exe, Memfilt.exe, Poolfilt.exe, Sortlog.exe (MS) Memsnap works like pmon, except it puts all the information in a file.  Poolsnap works like poolmon, except it puts all the pool information into a file.  Pool tagging must be enabled to do this, and it works on a free build, use the gflags.exe application to enable pool tagging.  Sortlog sorts the file so you get the information in an easier to understand format.  Memfilt and Poolfilt are used after sortlog on Memsnap and Poolsnap output respectively to produce a brief summary of the information contained in these files.  Poolsnap.exe, Poolfilt.exe and Sortlog.exe are available on    HYPERLINK \\\\ntbuilds\\release\\usa\\<buildnum>\\  \\ntbuilds\release\usa\<buildnum>\ <x86 | alpha>\<fre | chk>.<wks | srv> \dump Memsnap.exe and Memfilt.exe are available on   HYPERLINK \\\\ntbuilds\\release\\usa\\<buildnum>\\  \\ntbuilds\release\usa\<buildnum>\ <x86 | alpha>\<fre | chk>.<wks | srv> \idw (ie \\ntbuilds\release\usa\latest.tst\x86\fre.wks\dump).  Just run them with the /? switch and they will tell you what command line parameters are used.  memsnap.exe log entry: Process ID           Proc.Name Wrkng.Set PagedPool  NonPgdPl  Pagefile    Commit   Handles   Threads          0              (null)     16384         0         0         0         0         0         1          2              System     24576         0         0     40960     36864       304        23         18            smss.exe    122880       929      1224    167936    167936        30         6         22           csrss.exe   1011712     15500      3824   1155072   1122304       204         7         32        winlogon.exe     16384     12090     10820    479232    471040        41         2         38        services.exe    876544     15889    109936   1241088   1232896       246        21         41           lsass.exe    675840     11234     16112    684032    675840       105        13         68         spoolss.exe    286720     12991     16060   1064960   1056768       103         8         83           RpcSs.exe    131072     10684   1314076    622592    602112        95         7        112        nddeagnt.exe     20480      9288      1796    286720    278528        16         1        121        Explorer.exe    610304     14000      3668    921600    876544        69         5         54         taskmgr.exe    774144     10663      2160    323584    294912        28         3         56             cmd.exe    892928     10836      1848    380928    372736        21         1        125         tapisrv.exe    389120     12400     11756    655360    651264        88        12        106          rasman.exe   1675264     15115      5176    880640    876544       156        11        144           ntvdm.exe     36864     25864      3544   1933312   1843200        50         2        173             cmd.exe    446464     10836      2004    438272    421888        21         1         92         WINWORD.EXE   5988352     43545      4344   1966080   1617920        85         2        163           sleep.exe    454656      3762       964    118784    114688         9         1    169         memsnap.exe    557056      3778      1120    249856    245760        10         1 sortlog-sorted memsnap entries: Process ID           Proc.Name Wrkng.Set PagedPool  NonPgdPl  Pagefile    Commit   Handles   Threads          0              (null)     16384         0         0         0         0         0         1          0              (null)     16384         0         0         0         0         0         1          2              System     24576         0         0     40960     36864       304        23          2              System     24576         0         0     40960     36864       304        23         18            smss.exe    122880       929      1224    167936    167936        30         6         18            smss.exe    122880       929      1224    167936    167936        30         6         22           csrss.exe   1011712     15500      3824   1155072   1122304       204         7         22           csrss.exe   1024000     15626      3928   1155072   1122304       209         7         32        winlogon.exe     16384     12090     10820    479232    471040        41         2         32        winlogon.exe     16384     12090     10820    479232    471040        41         2         38        services.exe    876544     15889    109936   1241088   1232896       246        21         38        services.exe    876544     15889    109936   1241088   1232896       246        21         41           lsass.exe    675840     11234     16112    684032    675840       105        13         41           lsass.exe    663552     11234     16008    667648    659456       104        12 Sample memfilt output (note that this does not correspond to the example sortlog/memsnap output above):           8              System                                 654->      3049 !         124            smss.exe     184320->    208896 !         156           csrss.exe    5390336->   5857280        412->       480 !         176        winlogon.exe    1540096->   2162688        145->       256           204        services.exe    2772992->   3432448 !         216           lsass.exe    2191360->  18898944        238->       329 !!        360           RpcSs.exe     974848->   1024000        163->       212 !         392            ntsd.exe                                76->        89           400         spoolsv.exe    1892352->   2969600        163->       191           508          llssrv.exe     864256->   1802240         75->       106           496            ntsd.exe                                41->        43           552         tcpsvcs.exe     692224->    806912         41->        49  !        612           msdtc.exe                               128->       129 !         752         ntmssvc.exe                                94->        98 !!        804          scesrv.exe     606208->    757760         37->        42 !        1020            ntsd.exe     913408->   1019904         99->       166           296        inetinfo.exe    2076672->   5349376        218->       557 !!       1036            ntsd.exe    1839104->   1863680         58->        99          1060        Explorer.exe    1503232->   4820992         86->       206 !        1116             CMD.exe     397312->    487424  !       1176            MTTF.exe                                17->        18  !       1192          remote.exe                                45->        47 !         280             CMD.exe     385024->    446464          1224             CMD.exe     385024->    401408 !!       1216         memsnap.exe     331776->    364544         10->        15 !        1332         svchost.exe     983040->   1032192           716        iexplore.exe    2387968->   2621440        160->       162 !!        632             MMC.exe    1568768->   1622016         74->       932 The first exclamation mark at the beginning of the line indicates that the commit charge for a particular process never decreased over the period covered by the memsnap output.  The second exclamation mark indicates that the number of open handles for a particular process never decreased over the period covered by the memsnap output.  The first pair of numbers shows the commit charge for a particular process at the beginning and end of the period covered by the memsnap output.  The second pair of numbers shows the number of open handles for a particular process at the beginning and end of the period covered by the memsnap output.  By default, processes for which neither the commit charge nor the number of open handles increase are not listed in the memfilt output. However, you can supply command line options to configure the minimum increase to be reported, or to report decreases as well.  Run memfilt /? for details. poolsnap.exe log entry: Tag  Type     Allocs     Frees      Diff   Bytes  Per Alloc  AcdM Nonp          1         0         1    8192       8192  AcdN Nonp          1         0         1    4096       4096  Adap Nonp          3         0         3     480        160  AfdA Paged        69        69         0       0          0  AfdB Nonp        482       476         6   21568       3594  AfdC Nonp        104        57        47   10528        224  AfdE Nonp         82        68        14    3584        256  AfdL Nonp         82        68        14     672         48  AfdP Nonp        166       165         1     352        352  AfdR Nonp         13        12         1      32         32  AfdS Paged         2         0         2     224        112 sortlog-sorted poolsnap entries: Tag  Type     Allocs     Frees      Diff   Bytes  Per Alloc  AcdM Nonp          1         0         1    8192       8192  AcdM Nonp          1         0         1    8192       8192  AcdN Nonp          1         0         1    4096       4096  AcdN Nonp          1         0         1    4096       4096  Adap Nonp          3         0         3     480        160  Adap Nonp          3         0         3     480        160  AfdA Paged        69        69         0       0          0  AfdA Paged        69        69         0       0          0  AfdB Nonp        482       476         6   21568       3594  AfdB Nonp        482       476         6   21568       3594  AfdC Nonp        104        57        47   10528        224  AfdC Nonp        104        57        47   10528        224  AfdE Nonp         82        68        14    3584        256  AfdE Nonp         82        68        14    3584        256  AfdL Nonp         82        68        14     672         48  AfdL Nonp         82        68        14     672         48 Sample poolfilt output(note that this doesn t correspond to the example poolsnap/sortlog output above):    AfdB Nonp           9->        11      14080->     14336    AfdC Nonp         464->       506      89088->     97152    AfdE Nonp         116->       160      33408->     46080    AfdL Nonp          43->        49       1728->      1920    AfdX Paged        109->       151      30752->     42848    Atk  Nonp          63->        73      17344->     23680    CMkb Paged        270->       320      55936->     69152 !! CMnb Paged         77->        97       4928->      6208    CMpa Nonp          56->        78       3584->      4992    CMpb Paged         59->        81       3776->      5184 !! CcBz Nonp           6->         7      53248->     61440    CcPc Nonp          11->        12       1056->      1152 !! CcVl Nonp           6->        11       5824->      8544    CcVp Nonp          10->        12       3136->      3328    Even Nonp        1013->      1208      66304->     78880    FSim Paged        431->       435      55168->     55680 !! FSrN Paged         26->        28       2496->      2688    FSrm Paged                            185344->    187840    FSro Paged         10->        31        640->      1984    FatC Paged         11->        16        704->      1024    FatE Nonp          17->        23       1088->      1472 !! FatF Paged          8->        13       2816->      4576 !! FatI Nonp           2->         3        192->       288 !! FatN Nonp           9->        14        288->       448    Fatn Paged         14->        18        544->       736 !! Fatx Nonp           4->         5        128->       160    File Nonp        1698->      1790     326016->    343680 The first exclamation mark at the beginning of the line indicates that the number of open allocations for a particular tag never decreased over the period covered by the poolsnap output.  The second exclamation mark indicates that the number of bytes allocated for a particular tag never decreased over the period covered by the poolsnap output.  The first pair of numbers shows the number of open allocations for a particular tag at the beginning and end of the period covered by the poolsnap output.  The second pair of numbers shows the number of bytes allocated for a particular tag at the beginning and end of the period covered by the poolsnap output.  By default, processes for which neither the number of open allocations nor the number of bytes allocated increase are not listed in the poolfilt output. However, you can supply command line options to configure the minimum increase to be reported, or to report decreases as well.  Run poolfilt /? for details. Ntlog.dll (MS) Ntlog.dll that is used by NTGUI for logging has the functionality of memsnap built in.  The information is incorporated with the other logging information. You can find it in the nttest project. Debugger Extensions.(MS) These are DLL s that contain procedures to dump important data structures, etc.  The procedures are called from the debugger.  These are subject to change.  To find out what we have, copy *.exts into your \system32 directory.  In the debugger, type !<extname>.help for a current listing of the functions in the DLL. There is more documentation of debugging available: \\ntstress\docs\debug.* Checked system.(MS) You should run you application under the checked build of NT and monitor all debugger output.  This can reveal problems that you might otherwise not see.  It is also required for other leak checking tools. Oh.exe/Ohcmp.exe (MS) Oh.exe lists the open handles held by a particular process, their types, and the names of the objects they are handles to.  In general, you will want to invoke it as oh  p PID  a.  (-a causes handles to unnamed objects to be reported.)  Ohcmp.exe can be run on two OH outputs to find differences between the two.  By default, Ohcmp reports only increases, but this can be configured with a command line option.  Run ohcmp /? for details.  Sample oh.exe output: 2896 prstatus.exe   Section        0004 2896 prstatus.exe   Event          0008 2896 prstatus.exe   Directory      000c \KnownDlls 2896 prstatus.exe   Directory      0010 \Windows 2896 prstatus.exe   Mutant         0014 2896 prstatus.exe   Port           0018 2896 prstatus.exe   Section        001c 2896 prstatus.exe   Event          0020 2896 prstatus.exe   WindowStation  0024 \Windows\WindowStations\WinSta0 2896 prstatus.exe   Desktop        0028 \Default 2896 prstatus.exe   WindowStation  002c \Windows\WindowStations\WinSta0 2896 prstatus.exe   Key            0030 \REGISTRY\USER\S-1-5-21-397955417-626881 126-188441444-2714308 2896 prstatus.exe   Directory      0034 \BaseNamedObjects 2896 prstatus.exe   Key            0038 \REGISTRY\MACHINE 2896 prstatus.exe   Event          003c 2896 prstatus.exe   Mutant         0040 2896 prstatus.exe   Event          0044 2896 prstatus.exe   Thread         0048 2896 prstatus.exe   Thread         004c (etc.) Sample ohcmp.exe output: Handle types: 4       Key 5       Event Named Objects: \REGISTRY\USER\S-1-5-21-397955417-626881126-188441444-2714308 This output would indicate that the process has 4 more key handles open in the second oh log than the second, as well as 5 more event handles and 4 more handles to \REGISTRY\USER\S-1-5-21-397955417-626881126-188441444-2714308. Test Design: Simple leak testing model. This is a very simple test model. Run the same variation at least twice in a row, and measure your memory usage between each run and at the end (more runs can be better if you have to deal with caching behavior that can appear to be leaks).  You may see an increase in memory usage in system components between the first measurement and the second measurement, this is usually due to caching and is normal.  If you see an increase between the second measurement and the third, there is probably a leak.  The last test run and measurement is just to help you spot trends in the leak.  Here is the sequence: run test scenario take memory measurement (use memsnap and poolsnap) (use DH here if you are trying to track specific leak) run test scenario take memory measurement (use memsnap and poolsnap) (use DH here if you are trying to track specific leak) run test scenario take memory measurement (use memsnap and poolsnap) (use DH here if you are trying to track specific leak) (run DHCMP to sort out the allocations) Long Duration testing model.  This model is designed to reveal resource problems encountered during extended use of your product.  This model has been used in the NT group to find many leaks and other memory related problems, and it is important because your products will be used over longer periods of time as they are adopted by large businesses.  Basically, you want to design tests to run over and over again for hours or days.  You should start by using existing tests, and making only the changes required to run the test without exiting your application.  For example, if I wanted to do a long duration test on MS-Word, I would take the word regression test and run it 50-100 times on the same instance of word, and take memory snapshots with memsnap.exe every 10th time, to see what was happening.  If I noticed that the commit charge was growing by 5 megabytes each time, I would then get a checked copy of Word (or use bounds checker or a similar tool) and run the test again to try and pinpoint where the leak is. This model is very important! People will start your application and leave it running for days if they can.  If you leak memory, you will cause performance to degrade not only in your application, but in the OS and in other applications, which reflects very badly on Microsoft. Repetition. A key aspect of leak detection is repetition.  If you do the same scenario over and over, and your memory usage goes up, then you have found a leak.  This can be as simple as running your app and pmon.exe at the same time, and watching your commit charge.  If you notice it go up, just re-do the last thing you did and see if it goes up again.  If it does, you have probably found a leak.  People have used this method to find leaks in many apps, including the new shell.  There was a leak caused by dropping down the listbox in explorer a while back, a very simple scenario, leaked 8k every time.  This is also a good way to catch leaking handles. System leak detection vs. Process leak detection. There is a distinction between system leaks and process leaks.  Many times we have seen apps from other vendors (as well as from the apps group) that had serious memory leaks.  These are usually pretty obvious, the process size increases as you use the app. On the other hand, there are leaks in system processes that are exposed by the application you are using.  For instance, if the spooler is not releasing memory after it prints a document, this shows up in the commit charge of the spooler.  You need to look for both system leaks and app leaks. Using memsnap, poolsnap, and having a good long duration test strategy will help reveal these things. Server Testing Testing for leaks on servers requires a slightly different approach to testing simple applications.  In the NT group, we are currently looking for leaks using the following method.  First, we run a batch file that uses memsnap.exe and poolsnap.exe to check the memory status every hour on print servers while they are running as targets for client printer stress.  Then every once in a while we copy those logs off the server and sort them using sortlog.exe, and look at the memory status for each process as the server runs.  When we detect leaks, either as increases in process commit charge or handle count, (which we have found in lsass.exe, spoolsv.exe, explorer.exe, services.exe, and winlogon.exe), we switch over to a checked server and enable stack trace databases for the leaking process. Then we run dh.exe on them after they boot, run the stress for a day or two, run dh.exe again, run dhcmp.exe on the logs, and see where the leaks are.  This is very effective, even though we were only looking for printer spooler leaks, we found very serious problems in several other components. It is critical that all groups that own components that run on servers test like this, the payoff is two-fold.  First, you will find the leaks in your server apps, which is critical if we are to provide a robust, never-need-to-reboot product to our customers. Second, you will help us track problems down in other parts of the OS, which is another thing that will boost our reliability. Outside of bad hardware, bad drivers, and other obvious  crashing  types of bugs, leaks are the 1 thing we can fix that will have a huge impact on our reliability. Increasing our reliability is crucial to having NT being perceived as  enterprise ready Another part of the server testing is running with PageHeap turned on.  Simpley turn this on for your server application and run with it for a few days (or weeks if possible) to look for heap corruption. Simply running your server apps  until they die  is a very good idea, this way you can learn what will most likely cause them to need a restart.  Your goal should be that they never need to be restarted, the goal is appliance-like stability, the thing should run until the power goes out! Testers: What tools are most effective for testers. Bounds Checker, pmon, memsnap/sortlog/poolsnap/memfilt/poolfilt, ntlog.dll. Developers: What tools are most effective for developers. Bounds Checker, ntdll.dll, DH/DHCMP, debugger extensions. Costs and Benefits: Costs:  The  costs are relatively minor.  The most important cost is time, you will have to use one of your best testers for this.  The person should have good observation skills, good operating system knowledge, and patience.  Another cost is equipment.  This is much less of a factor now that fast Pentiums are fairly cheap.  Fast systems are helpful, as is having at least 32 mb of memory and a large hard drive.  Many of these testing strategies require a checked build, and a fast machine lessens the impact of running these.  Test development costs can be negligible, this is a very good opportunity to leverage existing tests.  I used RATS test and Winstone 94 for most of my testing, mostly it is a matter of packaging them up in a suite and running them.  Batch files are ideal for this, anything beyond that (like a nice GUI, etc) is extraneous. Benefits: Your customers will not call you up and tell you they are out of memory.  The memory leaks in your component will not negate all the memory reduction work that has been going on lately. You will achieve appliance-like reliability, more and more large and small companies will adopt NT as their server software. The following information can be used to help ensure the integrity of memory use by drivers and other kernel components. If you have a driver or other kernel component, you should enable special pool for it s memory, and run long duration tests to help you find any instances of pool corruption. KERNEL POOL (information provided by Daniel Lovinger (danlo)) Kernel pool is to kernel components what malloc() and other memory allocators provide to usermode components. However, unlike usermode components which are kept in separate address spaces and cannot share memory, all kernel components share a single set of "pools" of allocable memory. In the simplest form, the kernel pool allocator takes each page (4k on x86, 8k on alpha) of a pool and considers it as a set of 32 byte pool blocks. As memory is allocated by kernel components, the allocator finds consecutive runs of pool blocks large enough to contain the request plus a small header (of information for the allocator) and returns them to the caller. Note: 32 byte pool blocks are an implementation detail of the current NT 5 allocator and are subject to change at any time. For instance, one reason 32 byte blocks are used currently is that this corresponds to the size of a cache line on current processors (a cache line is the unit of a memory cache - in multiprocessor configurations careful consideration of cache effects are often required). No kernel component should ever assume that even a single byte beyond the allocation requested is accessible in any way. In fact, special pool (described later) will catch many such errors. The !pool debugger extension shows how pool pages are allocated. Here is an example: kd> !pool ffa21b28  ffa21000 size:   c0 previous size:    0  (Allocated)  File (Protected)  ffa210c0 size:   20 previous size:   c0  (Free)         ffa210e0 size:   40 previous size:   20  (Allocated)  ReSe  ffa21120 size:   40 previous size:   40  (Allocated)  ReTa  ffa21160 size:   20 previous size:   40  (Free)       MmCa  ffa21180 size:   40 previous size:   20  (Allocated)  VadS  ffa211c0 size:  100 previous size:   40  (Free)       VadS  ffa212c0 size:   40 previous size:  100  (Allocated)  ReEv  ffa21300 size:  1a0 previous size:   40  (Free)       MmCa  ffa214a0 size:   40 previous size:  1a0  (Allocated)  FatN  ffa214e0 size:   60 previous size:   40  (Allocated)  FatE  ffa21540 size:  180 previous size:   60  (Free)       Irp  ffa216c0 size:  440 previous size:  180  (Allocated)  Npfs  ffa21b00 size:   20 previous size:  440  (Free)       Irp *ffa21b20 size:  140 previous size:   20  (Allocated) *Irp  ffa21c60 size:   e0 previous size:  140  (Allocated)  File (Protected)  ffa21d40 size:  280 previous size:   e0  (Allocated)  Thre (Protected)  ffa21fc0 size:   40 previous size:  280  (Allocated)  VadS Each allocation is given a pool tag,(shown at the right) by the caller, a four character unique stamp that should serve to track down the owner. These pool tags are listed in \nt\private\ntos\inc\pooltag.txt on an NT enlistment. With these tags, it is possible to track down pool leaks with the !poolused debugger extension or the poolmon tool from the mstools collection. Note: allocation sizes shown in !pool and elsewhere do not reflect the amount requested by the caller, only the actual size in a multiple of pool blocks. Since pool allocations are in close proximity, errors in one component - writing or reading beyond an allocation, perhaps an allocation already freed, and even perhaps freed by another component in error - can have impact on completely unrelated components. This is pool corruption, and is one of the hardest to find and unfortunately more common errors. SPECIAL POOL Special pool is a powerful mechanism that can catch a pool corrupter in action. Since pool is by design a shared area for all kernel components, what special pool does is fragment allocations in a way that causes erroneous access to trigger a page fault. These page faults then lead to the memory manager realizing that an invalid access was made, and it can bugcheck the system (code 50)  and show exactly where an error occurred. Special pool does this in (at least) these ways: every other page of special pool is invalid (cannot be touched without triggering a fatal page fault) each allocation is given its own valid page each allocation is placed against the end of the page as each allocation is freed, its page is made invalid for a period of time This attacks many of the common routes to pool corruption. Causing pool allocations to come out of special pool has to be done selectively since it uses up a lot of pages of kernel address space and unless a machine has a also has lot of RAM, not all pool allocations can be made from it. This selection is done by specifying pool tags or a specific allocation size. The persistent registry key to set is HKLM\System\CurrentControlSet\Control\Session Manager\Memory Management\PoolTag DWORD (or  you can set it by using the  Kernel Special Pool Tag  selection in gflags.exe) after which the machine should be rebooted. If the registry key is set, though, it should be removed before running regular stress. Stress will manipulate this key in normal operation so we get good coverage, but it checks to see if it has been set explicitly first. The kernel variable this affects is nt!MmSpecialPoolTag, which can be successfully changed at runtime if nt!MmSpecialPoolTagRotate is also set to zero. Rotation of the MmSpecialPoolTag is done automatically under certain conditions, again insuring reasonable coverage in stress runs. Since pool tags for a component usually have a common prefix, this "pool tag" can include wildcard characters, ? or *, to match a set of pool tags. To match an allocation size instead, set this "pool tag" to a size expressed as a multiple of pool blocks (for instance, an allocation of 0x37 bytes would occupy two 0x20 byte pool blocks, or 0x40 bytes). Note: DWORDs on NT systems are little endian (the least significant byte occupies the lowest byte address). To construct the DWORD for the pool tag "FatI", convert each character to its ASCII hexadecimal equivalent - 0x46 (F) 0x61 (a) 0x74 (t) 0x49 (I) - and put the first character in the lowest byte, second in the next, etc. So "FatI" == DWORD 0x49746146. ASCII Table D   H  C   D   H  C   D   H  C   D   H  C   D   H  C   D   H  C 32  20 SPC 48  30 0   64  40 @   80  50 P   96  60 `   112 70 p 33  21 !   49  31 1   65  41 A   81  51 Q   97  61 a   113 71 q 34  22 "   50  32 2   66  42 B   82  52 R   98  62 b   114 72 r 35  23 #   51  33 3   67  43 C   83  53 S   99  63 c   115 73 s 36  24 $   52  34 4   68  44 D   84  54 T   100 64 d   116 74 t 37  25 %   53  35 5   69  45 E   85  55 U   101 65 e   117 75 u 38  26 &   54  36 6   70  46 F   86  56 V   102 66 f   118 76 v 39  27 '   55  37 7   71  47 G   87  57 W   103 67 g   119 77 w 40  28 (   56  38 8   72  48 H   88  58 X   104 68 h   120 78 x 41  29 )   57  39 9   73  49 I   89  59 Y   105 69 i   121 79 y 42  2A *   58  3A :   74  4A J   90  5A Z   106 6A j   122 7A z 43  2B +   59  3B ;   75  4B K   91  5B [   107 6B k   123 7B { 44  2C ,   60  3C <   76  4C L   92  5C \   108 6C l   124 7C | 45  2D -   61  3D =   77  4D M   93  5D ]   109 6D m   125 7D } 46  2E .   62  3E >   78  4E N   94  5E ^   110 6E n   126 7E ~ 47  2F /   63  3F ?   79  4F O   95  5F _   111 6F o Other tools Here is another tool that you may find useful, SIFT, is an abbreviation for something like Systematic Injected Fault Testing.  It proceeds by monitoring a resource use of interest during a test variation (or run) and then repeating that variation while causing each of the resource uses detected to fail, one per repeat of the variation. More information about this tool is available at: \\nttest\ntct\slm\src\tools\sift\sift.doc Revised 7/31/98
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\d3dtestplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Direct3D Test Plan Title _PID_HLINKSDirect3D Test Plan Matt Bronder Normal.dot Matt Bronder Microsoft Word 9.0xXex9 *8g>N8\BIDATx^ HHxod 2xY@H .Ssm;1 9<A{^ 049[X <$aC> mhr2> mo3)n ;ie"x v$_Sg C?HPD/{ 8c66vH pO(2v LhF:b 9 djt xZH7\1 +Aa+k MRz+? A9|#282 4i6L*5II- |bhM0# Q^M^Z -}(6( *>v"W I1/U" qiEc96FQ sx--8 W.23  mgT04w ,^ 9p %L[{m 9@'n] @_ZM8 x$SEH XJnl9 1YXf  NTzM3 OjD3u yzwBO vN<_Q p|is! qOPX2 [|a6(O >H7";' ~+W|  6CX2QP G|lu> 7%LXV qySG5 O02:* `jCXu tW_ ( InO_8 }q k'D K K;/ 8Y%NK: V ne: Ygh!: T=g`L 5Q1+EV BsK\]- so w| HYC?# L4%LX VHM'g], wD!2[s| L z`l ~I:I_ u8YJ[ _v1NK^ 3]d&0D) ]rANT Yupfx, I1S9v d?z2z T&b)>N} q`b~z qvmE] 0ayT%b :a<UG 2unt}< y|C*3PBrush PBrush PBrush~~~}}}}}}~~~ ~~~||||||||||||{{{yyyvvvwww{{{|||||||||||||||~~~~~~}}}||||||||||||||||||||||||}}} }}}uuuppprrrzzz~~~ wwwjjjeeeggghhhggg```VVVUUUaaaiiihhhgggeeeiiirrrvvvqqqjjjhhhgggggggggffffffhhhooo{{{ lllVVVPPP^^^rrr{{{~~~}}}zzzwwwvvvvvvzzz|||zzzyyyqqqXXXIIIJJJOOOSSSNNN<<<111>>>NNNPPPLLLEEEDDDUUUdddaaaTTTNNNKKKKKKMMMJJJGGGDDDGGG___xxx}}}~~~~~~~~~~~~~~~~~~}}}~~~~~~ rrrEEE******AAA^^^ooopppaaaMMMAAA>>>JJJYYY```bbbaaaNNN<<<<<<CCCMMMSSSBBB---...<<<BBBAAA555(((111GGGNNNFFFAAA>>>===@@@>>>888,,, !!!CCC___mmmqqqpppoooooommmmmmooosssyyy~~~ TTT))) 111SSSggg___???$$$ 999JJJRRRZZZXXXLLLJJJOOOYYYddd```MMMDDDHHHNNNOOOHHH777333BBBNNNOOONNNMMMLLLNNNOOOIII===$$$ ,,,IIIYYYXXXVVVWWWUUUPPPPPPVVVeeewww YYY999    <<<```uuukkkWWWCCC999KKK]]]gggmmmwwwxxxvvvvvvyyy |||uuutttuuuvvvuuullleeejjjrrruuuvvvvvvvvvvvvwwwvvvrrr```???    ***===@@@>>>AAA@@@999222222HHHmmm ~~~lllMMM888===YYY{{{ ~~~~~~ aaa???666<<<@@@@@@CCCEEE===... ###YYY}}} ~~~ttthhhccceeesss xxxnnnjjjggghhhjjjfffQQQ$$$ )))___xxx |||yyyyyyyyyzzzzzzzzzzzzzzzyyyxxxzzz||| yyymmmuuu +++UUUqqquuuxxx||| zzzrrrhhheeefffggggggggggggggghhhddddddkkkvvv}}} {{{rrr]]]VVVppp ddd### !!!@@@IIIQQQbbbuuu {{{tttrrrwww~~~ }}}}}}~~~ ~~~|||}}} }}}||||||}}}}}}}}} zzzvvviiiWWWGGGAAABBBBBBCCCCCCCCCCCCEEEAAA<<<EEE^^^ttt}}} yyyhhhLLL;;;QQQttt ccc$$$ %%%>>>```yyy |||eeeUUU[[[mmm}}} }}}wwwpppmmmpppvvvyyytttnnnlllrrr{{{ ~~~zzzuuuooolllnnnooonnnrrr{{{zzzttteeeKKK888111111000111111111111444... ;;;```yyy yyygggJJJ999IIImmm cccKKKDDD---%%%999VVVlllwww}}} }}}YYY777222AAA[[[hhhfffgggllloootttooo\\\JJJBBBCCCMMMYYYTTTFFF>>>CCCYYYnnntttrrrqqqkkk\\\KKKDDDDDDFFFAAABBBUUUhhhtttuuuhhh]]]XXXXXXWWWWWWWWWWWWWWWXXXQQQ555 555^^^www~~~ zzziiiIII888LLLnnn zzztttSSS666EEE^^^bbbaaarrr~~~ ]]]000 """555HHHDDDAAAHHHSSSeeemmmSSS555%%%!!!---AAA@@@000 ***PPPccc```bbbdddWWW:::,,,***,,,'''###111NNNjjj|||}}}|||||||||||||||||||||||||||zzzeee999 :::bbbxxx jjjDDD(((;;;hhh ]]]111333KKKIII>>>YYYxxx |||QQQ444***111BBB@@@333333<<<WWWvvvpppYYYIII:::<<<QQQ]]]VVVAAA 333OOOQQQWWWiiiooo```QQQPPPPPPOOOLLLPPP]]]nnn}}} {{{ddd;;;''';;;\\\ttt uuuLLL !!!TTTzzz kkk666&&&555... 777kkk xxxbbbMMMIIISSSTTTFFF======QQQvvv yyywwwllleeemmmwwwyyytttQQQ...111FFFOOOVVVnnn}}}|||yyyyyyyyyyyyxxxxxxzzz||| xxx]]]DDDTTTkkkwww aaa+++ 777kkk||| bbbPPPRRR??? PPPyyy |||qqqkkkmmmooohhhaaa^^^cccvvv ~~~||| ~~~uuu___XXX^^^dddgggttt sss]]]MMMccczzz}}} uuuKKK RRRuuu }}}wwwwwweee222 000ggg||| }}}|||||||||{{{yyyxxxyyy{{{ ~~~yyywwwxxxyyyyyy{{{~~~ lllLLLDDDccc}}} ccc... ///ccc{{{ rrrOOO""" FFFmmm||| jjjEEE@@@ccc vvvLLL BBBlll{{{ xxxaaa<<<""")))MMMooo}}} |||fffCCCAAAeee hhh777 (((VVVuuu zzzlllPPP444   )))SSSvvv sssYYYOOOhhh yyyYYY&&& BBBlll }}}tttbbbLLL*** 222iii wwwvvvzzzzzzqqqsss qqq??? ...bbb~~~ {{{tttiiiIII CCCppp{{{ vvvsss ooo```iii}}} OOOzzz }}}zzzjjj666 GGGjjj{{{ kkkZZZjjj }}}{{{eeeKKKSSSrrr rrr222 444jjj||| zzz___))) JJJooo}}} gggKKK\\\uuu~~~ |||uuu```GGGKKKkkk PPPttt xxxYYY,,, +++[[[www ~~~fffFFF[[[yyy zzzlllXXXJJJSSSnnn qqq))) 444ggg tttRRR%%% ???mmm uuucccJJJ]]]zzz yyygggTTTOOOZZZppp PPP{{{ |||kkk??? ###YYY||| vvveeeUUUKKKccc~~~ www]]]NNNXXXggguuu mmm--- 444kkk}}} zzz\\\((( 333dddzzz rrraaaUUUQQQeee}}} |||dddNNN^^^rrryyy RRRvvv qqqDDD 777ddd||| jjjYYYbbbiiippp~~~ }}}qqq```jjj{{{}}} qqq*** 333fff}}} {{{fff::: >>>jjj||| ~~~dddLLLdddxxx||| |||xxxyyy{{{sssuuu DDDppp||| zzziii777 JJJlll||| yyy[[[>>>]]]}}} zzz{{{~~~ rrrfffeeeuuu mmm444 JJJjjj{{{ }}}bbb,,, )))MMMooo}}} xxx^^^>>>XXX{{{ ppp[[[XXXmmm~~~ ___'''    CCCgggzzz ~~~sssOOO))) +++WWWvvv ~~~vvvmmmdddSSSbbb}}} ~~~~~~oooZZZ[[[ooo WWW''' ###IIIooo {{{kkkJJJ$$$ 444hhh}}} ssseeeffffffnnn~~~ yyytttlllaaacccqqq YYY))) ;;;ggg {{{jjjCCC <<<iii{{{ zzzgggnnnwwwyyy rrr___]]]jjjsssyyy III&&&111```~~~ }}}ggg888 >>>kkk wwwyyy}}}pppuuu~~~~~~ oooSSSMMMiii|||}}} YYY%%% IIIxxx {{{ccc444 SSS{{{ }}}jjjWWW^^^hhhwww nnnQQQLLLiii qqq222 $$$]]]vvv~~~ {{{aaa*** ===rrr~~~ ~~~fffGGGFFFXXXppp }}}}}}mmmTTTTTTlll 000^^^yyy xxxEEE 777jjj}}} }}}gggLLLQQQaaarrr yyyooo^^^QQQ\\\rrr ~~~FFF 666fff||| ~~~WWW%%%222```zzz yyybbbNNN^^^ssszzz xxxhhhRRRLLL^^^uuu uuuBBB <<<kkk||| |||]]]&&& 999ccczzz sssVVVEEE```zzz {{{qqqddd___iiiwww sss999 EEErrr }}}hhh::: :::ggg{{{ qqqOOO===^^^}}} }}}}}}rrrlllsssyyy{{{||| hhh000 GGGppp}}} yyyfff888 KKKsss {{{rrrZZZHHHaaa {{{pppVVVHHH```zzz ```))) FFFppp~~~ }}}ggg111 +++ccc rrrhhhfff```lll |||oooFFF'''BBBppp }}}___+++ EEEmmm||| vvvRRR 555jjj||| tttbbblllrrrvvv yyyVVV222>>>jjj |||```+++ FFFnnn}}} ~~~lll??? 555jjj }}}|||uuueeeqqq~~~}}} }}}{{{gggOOOUUUnnn {{{```,,, ***]]]zzz |||ggg;;; 666iii{{{ }}}yyyxxxooosss }}}sss wwwrrrllldddiiivvv zzzZZZ&&&"""NNNttt~~~ sssccclll {{{jjj<<< 444fff}}} yyyrrrrrr}}}}}}{{{ xxxooo lll^^^dddrrryyy||| uuu;;; 444bbb{{{ |||jjj=== BBBsss~~~ ~~~|||uuuiiihhhwww yyy~~~ lllTTT\\\rrr AAAqqq {{{lll999 %%%\\\xxx }}}pppgggdddiiivvv }}}}}}mmmUUU___ttt YYY||| }}}\\\### ???jjj}}} }}}{{{ nnn^^^hhhpppxxx yyyvvvpppdddhhhwww ttt    666nnn mmm>>> %%%XXXyyy }}}vvv ~~~~~~zzzlll]]]mmm~~~~~~ pppfffkkksssyyy}}} CCCjjjpppvvv}}} xxxZZZ((( ???ppp~~~ www}}} ~~~yyytttoooeeeooo qqqccchhhuuu 888JJJYYYqqq~~~ ~~~qqqBBB $$$ZZZwww~~~ zzzjjjcccpppvvvxxx ~~~||| yyyrrrnnnjjjpppzzz sss555 $$$(((KKKppp}}} }}}\\\&&& >>>jjj||| www^^^RRRkkk|||}}} }}}}}}||| pppkkkrrrxxx||| zzzKKK999*** IIIppp~~~ nnn??? &&&XXXyyy pppSSSGGGhhh ~~~}}}}}} |||sssyyy gggPPP''' JJJqqq||| ~~~|||~~~ xxxZZZ))) <<<nnn}}} ~~~~~~qqqXXXKKKddd ~~~{{{uuu ~~~zzz uuuUUU''' NNNnnn}}}}}}uuuwww}}} ~~~qqqCCC OOOqqq}}} {{{qqqhhhaaa```ooo |||sssbbbaaawww xxxUUU%%% '''LLLjjjqqqdddhhhyyy }}}```+++ +++VVVuuu }}}nnn```gggpppvvv yyylllRRRJJJeeeyyy tttOOO'''   333TTT```OOOVVVrrr sssNNN### :::ddd{{{ {{{oooaaaooo}}}}}} wwwdddEEE999```}}} nnnIII222000GGGPPP777===hhh~~~ |||iii??? $$$HHHmmm}}} ~~~vvvjjjqqq wwwdddDDD333WWW{{{ yyybbbKKKAAAKKKLLL***   NNNuuu~~~ xxxZZZ/// (((VVVwww ssssss{{{}}}zzzyyy vvvcccKKK???[[[zzz uuuggg___```ZZZ333 )))XXXttt}}} rrrPPP### 888lll}}}~~~ vvvkkkuuu~~~ yyykkkXXXOOOddd{{{ yyyvvvtttmmmKKK    ---XXXuuu~~~ }}}pppDDD PPPpppzzz~~~ rrrvvv {{{vvvsssjjjppp}}} }}}jjjDDD ///ZZZuuu ddd... ...JJJ\\\qqq||| |||{{{ ~~~{{{}}} {{{lllCCC 111___zzz sssJJJ%%%!!!%%%)))DDDfff{{{ |||}}}~~~ zzz}}} |||{{{ lllDDD :::jjj||| |||fffHHH888((( 888ddd{{{ }}}}}} {{{{{{vvvsss ~~~{{{ }}}ppp??? AAAkkk||| {{{pppfffXXX111 777cccyyy ~~~~~~}}} sssggg\\\]]]xxx lll222 FFFooo}}} ~~~ggg777 999dddzzz ~~~yyy ~~~}}} ooo\\\OOONNNjjj |||ccc+++ RRRwww |||ggg777 CCCppp ~~~vvvqqqnnnrrr ~~~iiiZZZ___```ooo~~~ }}}\\\&&& +++ggg ~~~fff222 VVVzzz pppcccccclllxxx }}}eeeSSSkkkxxxzzz uuuNNN <<<nnn||| |||]]]""" ###XXXxxx }}}llliiisss}}} nnnXXXlll ~~~nnn;;; FFFmmm~~~ xxxPPP    WWWxxx|||}}}{{{||| zzzyyy }}}www|||{{{jjjppp }}}aaa... '''ZZZzzz ~~~uuuPPP """FFFQQQUUUQQQXXXrrr ~~~uuu~~~ ~~~yyyrrrxxx yyy___[[[uuu{{{zzz wwwVVV$$$ CCCttt yyyQQQ $$$'''(((+++MMMuuu {{{}}} |||mmmgggvvv wwwTTT===aaa}}} ~~~ppp??? JJJlllzzz ~~~rrrVVVCCCAAAAAABBBDDDGGGVVVooo~~~ }}}ttt }}}qqqsss||| iiiKKK```||| |||___))) :::```yyy }}}wwwsssrrrrrrrrrrrrtttwww|||www ~~~zzz~~~ |||{{{ rrrqqq ~~~|||xxx]]]/// 222^^^xxx zzzvvv ~~~{{{|||{{{fff<<< 111]]]yyy ~~~~~~ wwwuuu ~~~www xxxzzz ~~~~~~ {{{kkk??? 111\\\vvv}}} xxx}}} ~~~zzz~~~ }}}vvvvvv |||kkk??? 000YYYttt~~~ {{{hhhaaalllvvv {{{jjj>>> 666ccczzz |||vvv zzzbbbTTThhhuuuyyy |||iii@@@ NNNttt ~~~rrrwww vvv^^^NNNhhh~~~ zzzeee111 ,,,aaayyy~~~ |||zzztttttt }}}jjjXXXiii~~~ yyyQQQ 666___www sssrrryyy}}}~~~ zzz||| sssttt lll??? ...TTTttt~~~ }}}}}} |||rrr{{{ vvvkkkvvv zzzccc>>>    OOOttt yyy}}} |||vvvmmm___fff{{{ ~~~xxxgggKKK!!! RRRuuu~~~ }}}}}} zzzllleeefffhhhvvv ~~~{{{sssUUU!!! QQQttt rrr___\\\oooyyy||| vvvUUU    ###ZZZ{{{ ttt[[[XXXppp ~~~vvvTTT    :::kkk||| {{{}}}wwwcccaaasss qqqDDD ###RRRuuu ~~~yyypppmmmwww xxx[[[+++ 999jjj |||~~~ |||{{{}}} }}}pppEEE TTTyyy}}} ~~~||| yyy{{{ }}}bbb+++ $$$WWWsss}}} ~~~uuuxxx wwwkkkvvv uuuOOO """KKKmmm||| ~~~~~~{{{uuuppp||| zzzmmmnnnyyy }}}pppLLL!!! CCCkkk}}} |||tttuuuyyyzzz {{{yyy}}} ~~~rrrSSS+++ CCCnnn|||~~~ sssooo||| ~~~vvv___--- 999^^^ttt}}} tttooottt uuu{{{ }}}aaa/// ***VVVvvv {{{uuuqqqssssss|||zzzkkkcccsss |||iiiBBB ,,,___||| zzz```CCC@@@GGG\\\yyy wwwrrr yyyyyyyyyxxx tttJJJ DDDsss~~~ mmm777   (((>>>ggg pppgggsssyyyyyy ~~~ppp999 ;;;mmm~~~ rrrRRRSSSYYYjjj{{{ ttt^^^jjj||| ~~~TTT'''???lll}}} ~~~}}}~~~ yyy{{{zzziiilll{{{ |||TTT***BBBlll}}} wwwzzzwwwvvv~~~ ~~~UUU'''@@@lll}}} yyy~~~ ~~~KKKNNNppp}}} nnnwww~~~ ~~~xxx ~~~yyy~~~ |||dddlll |||hhhZZZnnn }}}qqq{{{ sssTTTHHHYYYxxx {{{```AAACCCDDD:::JJJlll~~~ xxxttt}}} zzzcccSSSUUUkkk |||eeeNNNWWWUUU--- ---ZZZwww zzz|||zzz{{{tttppppppuuu |||fff\\\||| hhh+++ !!!\\\{{{ |||yyyzzz}}}}}} |||bbbYYY vvv444 JJJxxx {{{|||{{{ }}}||| {{{]]]MMMxxx GGGQQQxxx xxxvvvuuu{{{{{{ {{{[[[<<<YYY vvvgggzzz uuummmhhhooowwwyyy {{{aaa888999ZZZ~~~ yyy||| yyyooojjjooo~~~ oooJJJ111222CCCccc ~~~zzzsss}}} ~~~hhhIII--- ***ZZZ}}} ~~~zzzsssyyy}}} |||kkkNNN ,,,ccc||| zzzkkkgggnnnyyy |||rrrIII FFFqqq |||xxxuuuwwwnnnfffmmmxxx ~~~~~~ ~~~iii666 $$$YYYxxx~~~ }}}rrrgggnnnyyytttuuuvvv ~~~{{{ }}}{{{~~~ vvvTTT### +++]]]www vvvgggjjj}}} }}}xxxssslllgggiiixxx ~~~oooHHH ///```{{{~~~ xxxqqqzzz}}} {{{zzz |||lll^^^NNN>>>FFFjjj~~~ |||mmmDDD >>>lllxxx}}} {{{yyyyyy |||zzz {{{zzzyyyiiiUUU>>>   !!!RRRyyy mmm::: GGGZZZjjjzzz wwwnnnjjjuuu ~~~yyy xxxqqqoookkkYYY))) 555jjj}}} ~~~^^^*** ###000DDDiii||| ~~~|||www{{{xxxjjjdddppp ~~~yyypppvvv ssssss{{{xxxIII !!!OOOttt {{{WWW777$$$ CCCooo}}} wwwjjjfffpppsssrrrrrr {{{aaaZZZqqq ~~~www}}}~~~aaa))) 222eee}}} yyyjjjSSS,,, CCCooo}}} ~~~xxxqqqooooootttwwwjjj^^^lll |||yyyyyy iiiSSSddd {{{III CCCmmmsssyyy}}} ___--- CCCqqq}}} qqqSSSFFFHHHUUUpppyyyrrrwww zzzeee]]]dddtttxxxmmmhhh yyy333 777III]]]vvv~~~ aaa/// DDDqqq}}} {{{QQQ222333DDDiii fffJJJOOOhhh~~~ jjj... '''UUUxxx}}} ccc--- DDDsss}}} vvv^^^ZZZ```ooo ~~~llleeeqqq lllUUU::: IIInnn||| |||ccc... >>>fffxxx |||||| sssNNN### CCCppp~~~ ~~~ddd000 ...[[[vvv~~~ }}}zzzuuuxxx www```... VVV{{{ |||iii>>> ...aaazzz }}}~~~ xxxjjjhhhuuu}}} bbb,,, 444kkk~~~ sssHHH >>>rrr ~~~uuuooo{{{ }}}{{{ {{{llldddwww ~~~~~~ tttlllvvv sssCCC 888eee{{{ }}}qqq@@@ CCCkkkzzz rrrdddhhh }}}zzz kkkMMM[[[}}} uuunnnvvv |||zzz ddd333 000^^^{{{ ~~~jjj333 666^^^yyy xxxjjj___^^^dddllllllhhhjjjwww ~~~zzz |||oooddd^^^[[[mmm {{{aaabbb{{{ lllhhh{{{ ggg::: $$$MMM^^^iiivvv~~~ zzzccc555 (((LLLgggxxx ```<<<888CCCSSScccnnnvvvxxxyyy||| iiiJJJ999111FFFqqq xxxvvv ooovvv qqqEEE (((444UUUvvv zzzhhh@@@ 111YYYyyy yyyooogggeeedddxxx sssKKK>>>NNN___ooo wwwyyy{{{}}} {{{rrrfffbbbqqq|||mmmRRRBBB:::FFFqqq |||{{{ eee===...    IIIaaakkkxxx~~~ ~~~nnnPPP000 """OOOkkkwww~~~ yyybbbKKKBBB@@@XXX qqqdddlllttt}}} tttyyy ~~~lllNNN<<<RRRrrrtttkkkfffdddcccyyy mmmHHH ...<<<[[[xxx ~~~xxxeeeEEE    :::XXXttt zzzpppmmmooobbbLLL@@@===LLLqqq |||xxx}}} {{{{{{|||sssVVV===NNNzzz UUU333''' ,,,ZZZuuu~~~ |||nnnSSS/// &&&HHHhhhwww~~~ oooYYY[[[dddaaa\\\[[[___ppp{{{ ~~~yyyyyyzzzppp\\\___ iiiWWW=== +++UUUsss |||vvvcccAAA!!! 777[[[www {{{tttuuu lllcccmmmtttvvvyyy |||zzzvvvwwwyyy||| zzzuuu hhhCCC $$$GGGeeepppvvv}}} {{{mmmSSS111 333ccc~~~ ~~~ppphhhttt wwwzzz|||||| }}}mmmpppyyyzzz}}} }}}}}} lllFFF    666III[[[nnn}}} |||wwwccc??? FFFttt }}}xxxvvvsssqqqtttyyyrrrlllqqq ~~~yyytttssssss~~~ {{{ttt zzzSSS000!!!   $$$///CCC```ttt}}} |||hhh333 '''UUUqqqzzz ~~~ooofffaaa```cccnnnuuuwwwxxx||| sss```^^^eeettt |||~~~ cccJJJ777%%% 000QQQooo}}} {{{TTT""" 222NNNeeewww }}}yyyxxxwwwvvvyyyuuu___RRRSSSXXXbbbmmmxxx~~~ }}}|||}}} |||xxxxxxwwwuuuooolllkkkdddKKKEEEUUUnnn }}}{{{~~~~~~ jjjRRR777 !!!@@@]]]nnnuuuwwwvvvxxxzzz}}} mmm???)))&&&(((999TTTlllvvvxxxvvvxxx||| |||lllgggfffiiiqqqpppWWWIIISSS```ooouuuzzz~~~ xxxjjjggggggggg___TTTOOOQQQHHH>>>MMMggg jjjGGG$$$ %%%AAAYYYdddbbbcccjjjuuu}}} ]]]DDD555!!! (((DDD^^^hhhbbbcccnnnzzz }}}zzzzzzwwwrrrpppmmmWWWLLLMMMWWWjjjuuuiiiZZZcccnnnzzz ~~~|||{{{{{{zzzyyywwwkkkSSSLLLOOOYYYbbb```[[[\\\bbb^^^gggwww ~~~\\\>>>%%% 555IIIFFF@@@AAAQQQlll{{{ ~~~~~~ jjj[[[DDD%%% ###===OOOFFF???OOOhhhyyy yyyoooqqqlllcccZZZWWWIII???BBBNNNiiizzzzzzsssvvvyyy}}}~~~xxx uuunnnqqqqqqtttqqq```GGG<<<AAAOOOkkk}}} yyyaaa???&&&,,,===<<<...!!!###CCCggg{{{ }}}zzz}}} xxxoooTTT777)))111AAA777'''///MMMkkk{{{}}}~~~ |||vvvrrroooooonnnfffUUUZZZddd```XXXXXXXXXRRRTTT\\\ooo |||uuu }}}yyywwwqqq```OOOUUU^^^jjjssshhh\\\VVV^^^hhh |||ZZZMMMRRRRRRGGG+++ 888XXXooowwwzzzooobbbgggsssyyy~~~ xxxdddSSSNNNSSSGGG((( ***EEE___fffhhhoootttzzz~~~ yyygggSSSGGGOOOVVVOOO@@@FFF```pppqqqlllppppppqqqsssxxx}}} uuu}}} ~~~~~~uuuoooeeeNNN888999JJJbbbwwwwwwrrrzzz tttqqqqqqnnnXXX/// ;;;```uuufffIIIBBBRRRdddvvv~~~ zzztttppppppiiiIII''' 222EEEGGGGGGPPPcccwww~~~ zzzeeeKKK333:::OOOSSSMMMOOOdddyyy xxx~~~ ~~~|||yyywwwwwwyyyzzz{{{vvvoooooommmlllfffXXXJJJHHHSSShhh~~~ yyy```BBB+++ 888ffffffCCC---,,,888SSSkkkyyy~~~ }}}nnnSSS;;;&&&!!!333>>>000)))@@@ggg||| vvvgggWWWUUUeeellllllmmmssszzz ~~~{{{ uuuhhh^^^[[[aaalllvvvwwwhhh[[[___llltttooommmmmmpppttt yyyooodddDDD )))UUUgggSSS999&&& """BBBfffzzz |||tttkkkZZZBBB@@@NNN???###...ZZZzzz |||vvv {{{zzzwww~~~ ~~~~~~ ~~~zzzxxxwwwvvvwwwuuuooofffgggnnniiiWWWDDD888:::III___vvvvvvccccccttt tttTTTFFFZZZmmmjjj[[[III,,, <<<[[[iiisssyyy}}} |||nnnbbbgggWWW+++ @@@kkk{{{ zzzjjjlll {{{~~~~~~ ~~~ooo^^^WWWUUUYYY^^^WWWDDD>>>LLLWWWRRRDDD222'''+++>>>ccc|||yyyuuu ~~~vvvmmmooovvvxxxuuuooo___000 (((333FFF]]]qqq||| |||xxxwwwiii;;; AAAjjj}}} ~~~{{{yyyzzzlll]]]ooo pppdddvvv uuuhhhhhhmmmvvvzzzzzzuuummmhhhfffeeeffffffffffffggghhhoootttgggLLL;;;555:::IIINNNAAA999FFFXXXbbbbbbWWWIIIBBBHHHfff }}}ddd:::***!!! +++GGG```hhhfffhhhooowww xxx\\\/// >>>aaaqqqyyy~~~ {{{tttnnnvvv sssppp{{{ ggg@@@666XXX|||xxxiiiXXXDDD777;;;QQQbbbiiidddSSSAAA999777777888888777777888EEEYYY```SSSDDD<<<===OOObbbeee```eeemmm}}} {{{mmmaaaTTT888    111;;;666555BBB\\\xxx ~~~wwwaaa/// ''':::YYYvvv }}}pppnnn ~~~kkk::: ###===BBBBBBDDD777 (((CCCSSSZZZNNN:::222///.........---------777OOOeeennnnnnllljjjrrr ~~~lllOOO666((()))000((( ,,,YYYrrrvvv }}}ccc666%%% """VVVxxx~~~ yyyyyy vvvTTT666666GGGMMMRRR^^^___GGG(((%%%999OOOdddjjjbbb]]]]]]\\\\\\\\\[[[[[[[[[^^^kkk~~~ ~~~ttthhh^^^ZZZ\\\WWW<<< """@@@???CCCkkk {{{kkk___HHH ...^^^xxx ~~~ppp]]][[[gggnnnrrryyy |||cccMMMPPP^^^qqq~~~ rrrHHH    :::sss vvvMMM 555ZZZsssxxxzzzzzz||| ~~~wwwtttyyy www___SSSRRRPPP>>>!!! &&&MMM {{{ggg=== &&&<<<GGGPPPYYYjjj{{{ |||___888 999ooo www___>>>&&& """???lll~~~ kkkTTT>>>AAAZZZttt yyyjjjXXXOOOJJJ===))) EEEsss~~~ vvvqqqrrrwww||| |||zzzzzzttt]]]/// NNNuuu yyyXXX&&& GGGmmm{{{ uuuTTT''' FFFmmm ~~~sssZZZ===222AAAeee~~~ }}}|||pppeee```mmm~~~ }}}xxxyyy ~~~~~~bjbjU  EMBED PBrush   Direct3D Test Plan Author: Matt Bronder Last changed: 05/10/2000  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test   HYPERLINK "mailto:mattbron@xbox.com"  mailto:mattbron@xbox.com  HYPERLINK "mailto:andrewgo@xbox.com"  mailto:andrewgo@xbox.com  HYPERLINK "mailto:cameronf@microsoft.com"  mailto:cameronf@xbox.com  HYPERLINK "mailto:karencs@xbox.com"  mailto:karencs@xbox.com Usability   HYPERLINK "mailto:tombro@xbox.com"  mailto:tombro@xbox.com International  Test scenarios Graphics infrastructure Resources Vertex processing Pixel processing Rendering Effects Performance Spec reviews The latest specifications for Direct3D 8.0 are as follows:  HYPERLINK "\\\\Directx1\\public\\Direct3D\\DX8Specs\\GraphicsInfrastructure16.doc"  \\Directx1\public\Direct3D\DX8Specs\GraphicsInfrastructure16.doc  (Jeff Noyle)  HYPERLINK "\\\\Directx1\\public\\Direct3D\\DX8Specs\\D3D8FuncSpec80.doc"  \\Directx1\public\Direct3D\DX8Specs\D3D8FuncSpec80.doc  (Chas Boyd)  HYPERLINK "\\\\Directx1\\public\\Direct3D\\DX8Specs\\3D Rendering Interfaces 2.doc"  \\Directx1\public\Direct3D\DX8Specs\3D Rendering Interfaces 2.doc  (Mike Toelle) These specifications are preliminary and will continue to evolve as DirectX 8.0 matures into beta and RTM releases.  Additional changes to the specifications will be necessary in adapting Direct3D to the XBox platform.  These changes will primarily entail a removal of features unsupported by the platform (windowed mode for example) but will also include new features supported by the hardware that we wish to expose.  Some of these new features will be provided as Direct3D extensions approved by the DirectX team, while others may be exposed in a separate library.  Although these specifications are in flux (especially in the areas of syntax), they still provide a sufficient foundation on which to begin test development. Tools needed Performance: DTrace Custom benchmarks Code coverage: ICECap Static analysis: PREfix PC-Lint Typo.pl Leak: Automated testing Corruption: Windows 2000 Driver Verifier Injector Automated testing Hardware needed Test development has begun using the standard PC SDK development machine (Intel PIII 800 Mhz, 128M RAM, ASUS 6800 32M AGP/DDR) as a reference platform.  As XBox prototype hardware becomes available (especially NV-20 and NV-25 cards from NVIDIA) it will be used for testing the driver, extensions, and performance.  NTSC, PAL, and HDTV televisions will also be required for display mode testing. Direct3D support on XBox From the perspective of an application, Direct3D on XBox should match its counterpart on the desktop as closely as possible.  However, due to certain restrictions in system and hardware support, and in the interest of code size and performance, not all features of Direct3D will appear on the XBox.  The following is a list of differences between the XBox and desktop in Direct3D and related areas.  Since the XBox will support the majority of features contained in Direct3D 8, the list is mostly limited to what we will not support. Only the HAL device will be supported (no software emulation or reference rasterizer).  Software vertex processing may not be supported either. No legacy Direct3D interfaces or methods will be supported, including D3D_OVERLOADS. No windowed mode -- all applications will run full-screen.  Only the implicit swap chain owned by the device will be exposed. With UMA memory, the only valid pool for resources will be non-local video memory.  Direct3D will not perform any resource management.  The device on the XBox can never become lost.  Resetting the device should have no effect on currently allocated resources (other than the swap chain) and vice versa.  The system has no support for paging. No multithreaded rendering support. No GDI or User (so no device contexts, fonts, bitmap APIs, etc.). No registry support. The D3DX utility library may not be supported in its present form. Available display mode dimensions may be restricted (i.e. 640x480 only).  Video output will include NTSC, PAL, and HDTV.  No support for stereo displays or multiple monitors. The mouse cursor API will not be supported. No COM support (CoCreateInstance cannot be used to create a Direct3D object) N patches will not be supported by the hardware. Edge antialiasing will not be supported. Shader debugging support will depend on support for software vertex processing and support in the NV-2x. Shader tuning can be performed since the XBox is a closed system.  Instruction timing should be well documented.  DirectShow will not be supported.  A custom method will be provided for streaming video to textures. Test methods Focus The goal of testing Direct3D on XBox is to ensure the following: Compatibility at the API level with Direct3D 8.0 on the desktop (where possible). Functional correctness as compared to the desktop.  (Tests will generally assume that the reference device on the desktop generates correct video output). Stability for well-behaved applications (no crashes, no memory leaks, etc.). Speed approaching that which can be achieved by writing directly to the metal.  Direct3D should be as thin a layer as possible between the application and the hardware, with minimal performance overhead. Small in size.  All code not directly related to the NVIDIA hardware and the XBox OS must be removed (legacy versions of Direct3D, multiple adapters, multiple devices, windowed mode, etc.). Ease of development.  Development-time error checking should be correctly performed on debug builds.  If vertex and/or pixel shader debugging is available it should work well with our tools.  Extensions for NVIDIA-specific features should closely map to those features while still conforming to the style of Direct3D. Successful integration with the XBox OS and XAPIs/XTL.  Functionality, stability, and speed must be maintained when simultaneously rendering, mixing sound buffers, pounding on joysticks, sending packets across the network, etc. Test code Two primary resources are available from which existing Direct3D tests can be taken and adapted.   The first source for tests is from the DirectX test team itself.  These tests have the benefit of being current for DirectX 8 and providing a good level of code coverage.  Test suites for the Direct3D utility library should prove especially useful.  However, these tests are targeted at a PC environment with PC resources.   The major obstacles to adapting Direct3D 8 tests developed for the PC are a reliance of these tests on the reference rasterizer for verification and the use of multiple processes in their Direct3D test framework.  Another challenge may lie in finding an efficient means of remaining in sync with these tests as they evolve.  Investigation of the feasibility of porting these tests is currently underway. Another useful set of tests comes from Direct3D for Dreamcast.  These tests have the advantage of being targeted at a console platform.  They do not require the reference rasterizer to be present on the test system and better take into account the console environment (focus on limited memory, test NTSC and PAL television displays, etc.).  Although they were written to use Windows CE, it should be fairly straightforward to port them.  The two main drawbacks of these tests are that they target version 6 of Direct3D (the version released for Dreamcast) and they include some features specific to the PowerVR chip (i.e. bump mapping is performed using perturbed normal maps rather than UV delta maps).  The work in porting these tests will concentrate on expanding them to include DirectX 8 functionality and adapting them to the NVIDIA chipset. Once all useful tests have been ported, their coverage of Direct3D on the XBox platform will be evaluated.  All exposed areas that remain will be addressed by new test development.  This will include all new extensions written specifically for our platform. As much test code as is meaningful, whether adapted from existing tests or developed from scratch, will be structured in such a way as to allow it to be easily migrated across multiple test scenarios.  Test modules will be built as libraries that can either be linked into the common OS test team harness in serial or stress modes taking full advantage of the logging engine, or be linked into separate executables that can be provided to a developer without access to the harness for bug reproduction.  In the latter case, logging output may be directed to the debugger, a file, the screen, or all of the above.  In generating output, tests will at the very least make use of the pass, fail, warn, block, exception, and info logging levels to detail their status.  The data generated by the tests during a run will generally fall into four categories: the results of individual method and function calls; the verification results of frame buffer composition in a test as compared to frame buffer composition on a reference platform; performance data; and system status detailing such things as memory usage. Manual tests Although some tests will allow changes the view and device states using the joystick, no tests are currently planned that will require manual interaction. Configuration tests Configurations in the graphics area will be restricted to video output devices.  Currently, these include NTSC, PAL, HDTV, and potentially VGA.  Display mode, swap chain, and FSAA tests will cover these devices. Code reviews Code reviews will be conducted after major check-ins and when release candidates are declared.  Reviews will typically involve the tester, the developer, the test lead, and the PM. Debug walkthrough  Debug walkthroughs will be useful in analyzing code for performance, identifying superfluous code from the desktop not relevant to our platform, and gauging test coverage. Security Direct3D should have no direct security implications. Performance testing All tests will support general performance measurements (frame rate, etc.).  In addition, a number of custom performance benchmarks will be developed to gauge the performance of specific areas (throughput, fill rate, fixed function shading, HOP tessellation, multi-sampling, particles, state changes, function call overhead, etc.)  The specifics of these benchmarks are still to be determined, but the focus of them should be less on quantifying hardware capabilities and more on reducing the performance impact of using Direct3D (over going straight to the metal) as much as possible. Catastrophic failure testing Fault injection will be the primary means of catastrophic failure testing.  In the event of graphics driver and/or Direct3D run-time DLL corruption, the system recovery disk must be able to restore the files and return the system to a working state. Interfaces with other components Components that are to rely on Direct3D are TBD. Localization impact None. Test variations API Set Direct3D Functions Direct3DCreate8 Interfaces IDirect3D8 IUnknown AddRef Release QueryInterface Methods CreateDevice  EnumAdapterModes  CheckDeviceFormats  CheckDeviceMultiSampleTypes  CheckDeviceTypes  GetAdapterCount  GetAdapterDisplayMode  GetAdapterModeCount  GetDeviceCaps  GetDeviceIdentifier IDirect3DDevice8 IUnknown AddRef Release QueryInterface Methods SetCursorPosition  SetCursorProperties  ShowCursor  CreateAdditionalSwapChain  CreateCubeMap  CreateDepthStencilSurface  CreateImageSurface  CreateIndexBuffer  CreateMipMap  CreateMipVolume  CreateRenderTarget  CreateVertexBuffer  ApplyStateBlock  BeginStateBlock  CaptureStateBlock  CreateStateBlock  DeleteStateBlock  EndStateBlock  GetClipStatus  GetRenderState  GetRenderTarget  GetTransform  SetClipStatus  SetRenderState  SetRenderTarget  SetTransform  GetGammaRamp  SetGammaRamp  GetIndices  SetIndices  GetAvailableTextureMem  GetCreationParameters  GetDeviceCaps  GetDirect3D  GetInfo  GetLight  GetLightEnable  GetMaterial  LightEnable  SetLight  SetMaterial  CopyRects  GetFrontBufferRectangle  MultiplyTransform  ProcessVertices  TestCooperativeLevel  CreatePixelShader  DeletePixelShader  GetPixelShader  GetPixelShaderConstant  SetPixelShader  SetPixelShaderConstant  Present  Resize  DrawIndexedPrimitive  DrawIndexedPrimitiveUP  DrawPrimitive  DrawPrimitiveUP  DrawPrimitiveGrid  BeginScene  EndScene  GetStreamSource  SetStreamSource  FlipToGDISurface  GetBackBuffer  GetDepthStencilSurface  GetTexture  GetTexturePalette  GetTextureStageState  SetTexture  SetTexturePalette  SetTextureStageState  TextureManagerDiscardBytes  UpdateTexture  ValidateDevice  GetClipPlane  SetClipPlane  Clear  GetViewport  SetViewport  CreateVertexShader  DeleteVertexShader  GetVertexShader  GetVertexShaderConstant  SetVertexShader  SetVertexShaderConstant IDirect3DSwapChain8 IUnknown AddRef Release QueryInterface Methods Present GetBackBuffer IDirect3DResource8 IUnknown AddRef Release QueryInterface Methods GetDevice  GetType  FreePrivateData  GetPrivateData  SetPrivateData  GetPriority  PreLoad  SetPriority IDirect3DSurface8 IUnknown AddRef Release QueryInterface Methods GetDevice  GetContainer  GetSurfaceDesc  LockRect  UnlockRect  FreePrivateData  GetPrivateData  SetPrivateData IDirect3DTexture8 IUnknown AddRef Release QueryInterface IDirect3DResource8 GetDevice  GetType  FreePrivateData  GetPrivateData  SetPrivateData  GetPriority  PreLoad  SetPriority Methods GetLOD SetLOD GetLevelCount IDirect3DMipMap8 IUnknown AddRef Release QueryInterface IDirect3DResource8 GetDevice  GetType  FreePrivateData  GetPrivateData  SetPrivateData  GetPriority  PreLoad  SetPriority IDirect3DTexture8 GetLOD SetLOD GetLevelCount Methods GetLevelDesc LockRect UnlockRect AddDirtyRect GetSurfaceLevel IDirect3DCubeMap8 IUnknown AddRef Release QueryInterface IDirect3DResource8 GetDevice  GetType  FreePrivateData  GetPrivateData  SetPrivateData  GetPriority  PreLoad  SetPriority IDirect3DTexture8 GetLOD SetLOD GetLevelCount Methods GetLevelDesc LockRect UnlockRect AddDirtyRect GetCubeMapSurface IDirect3DVolume8 IUnknown AddRef Release QueryInterface Methods GetDevice  GetContainer  GetVolumeDesc  LockBox  UnlockBox  FreePrivateData  GetPrivateData  SetPrivateData IDirect3DMipVolume8 IUnknown AddRef Release QueryInterface IDirect3DResource8 GetDevice  GetType  FreePrivateData  GetPrivateData  SetPrivateData  GetPriority  PreLoad  SetPriority IDirect3DTexture8 GetLOD SetLOD GetLevelCount Methods GetLevelDesc LockBox UnlockBox AddDirtyBox GetVolumeLevel IDirect3DVertexBuffer8 IUnknown AddRef Release QueryInterface IDirect3DResource8 GetDevice  GetType  FreePrivateData  GetPrivateData  SetPrivateData  GetPriority  PreLoad  SetPriority Methods GetVertexBufferDesc Unlock IDirect3DIndexBuffer8 IUnknown AddRef Release QueryInterface IDirect3DResource8 GetDevice  GetType  FreePrivateData  GetPrivateData  SetPrivateData  GetPriority  PreLoad  SetPriority Methods GetIndexBufferDesc Unlock Direct3DX Utility Library Structures D3DXATTRIBUTERANGE  D3DXCOLOR  Extensions Constructors D3DCOLOR float array D3DCOLORVALUE reference 4 floating point parameters (rgba) Casting D3DCOLOR float* const float* D3DCOLORVALUE* const D3DCOLORVALUE* Assignment += D3DXCOLOR& -= D3DXCOLOR& *= float /= float Unary Binary [Comparison] Math functions D3DXColorAdd  D3DXColorAdjustContrast  D3DXColorAdjustSaturation  D3DXColorLerp  D3DXColorModulate  D3DXColorNegative  D3DXColorScale  D3DXColorSubtract D3DXMATERIAL  D3DXMATRIX  Extensions Math functions D3DXMatrixAffineTransformation  D3DXMatrixfDeterminant  D3DXMatrixIdentity  D3DXMatrixInverse  D3DXMatrixIsIdentity  D3DXMatrixLookAt  D3DXMatrixLookAtLH  D3DXMatrixMultiply  D3DXMatrixOrtho  D3DXMatrixOrthoLH  D3DXMatrixOrthoOffCenter  D3DXMatrixOrthoOffCenterLH  D3DXMatrixPerspective  D3DXMatrixPerspectiveLH  D3DXMatrixPerspectiveFov  D3DXMatrixPerspectiveFovLH  D3DXMatrixPerspectiveOffCenter  D3DXMatrixPerspectiveOffCenterLH  D3DXMatrixReflect  D3DXMatrixRotationAxis  D3DXMatrixRotationQuaternion  D3DXMatrixRotationX  D3DXMatrixRotationY  D3DXMatrixRotationYawPitchRoll  D3DXMatrixRotationZ  D3DXMatrixScaling  D3DXMatrixShadow  D3DXMatrixTransformation  D3DXMatrixTranslation  D3DXMatrixTranspose D3DXPLANE  Extensions Math functions D3DXPlaneDot  D3DXPlaneDotCoord  D3DXPlaneDotNormal  D3DXPlaneIntersectLine  D3DXPlaneFromPointNormal  D3DXPlaneFromPoints  D3DXPlaneTransform D3DXQUATERNION  Extensions Math functions D3DXQuaternionBaryCentric  D3DXQuaternionConjugate  D3DXQuaternionDot  D3DXQuaternionExp  D3DXQuaternionIdentity  D3DXQuaternionInverse  D3DXQuaternionIsIdentity  D3DXQuaternionLength  D3DXQuaternionLengthSq  D3DXQuaternionLn  D3DXQuaternionMultiply  D3DXQuaternionNormalize  D3DXQuaternionRotationAxis  D3DXQuaternionRotationMatrix  D3DXQuaternionRotationYawPitchRoll  D3DXQuaternionSlerp  D3DXQuaternionSquad  D3DXQuaternionToAxisAngle D3DXVECTOR2  Extensions Math functions D3DXVec2Add  D3DXVec2BaryCentric  D3DXVec2CCW  D3DXVec2Dot  D3DXVec2Hermite  D3DXVec2Length  D3DXVec2LengthSq  D3DXVec2Lerp  D3DXVec2Maximize  D3DXVec2Minimize  D3DXVec2Normalize  D3DXVec2Scale  D3DXVec2Subtract  D3DXVec2Transform  D3DXVec2TransformCoord  D3DXVec2TransformNormal D3DXVECTOR3  Extensions Math functions D3DXVec3Add  D3DXVec3BaryCentric  D3DXVec3Cross  D3DXVec3Dot  D3DXVec3Hermite  D3DXVec3Length  D3DXVec3LengthSq  D3DXVec3Lerp  D3DXVec3Maximize  D3DXVec3Minimize  D3DXVec3Normalize  D3DXVec3Scale  D3DXVec3Subtract  D3DXVec3Transform  D3DXVec3TransformCoord  D3DXVec3TransformNormal D3DXVECTOR4 Extensions Math functions D3DXVec4Add  D3DXVec4BaryCentric  D3DXVec4Cross  D3DXVec4Dot  D3DXVec4Hermite  D3DXVec4Length  D3DXVec4LengthSq  D3DXVec4Lerp  D3DXVec4Maximize  D3DXVec4Minimize  D3DXVec4Normalize  D3DXVec4Scale  D3DXVec4Subtract  D3DXVec4Transform General library D3DXComputeBoundingSphere D3DXCreateVertexBufferFromMemory D3DXCreateIndexBufferFromMemory D3DXGetErrorStringA (if supported) D3DXGetErrorStringW D3DXGetFVFVertexSize D3DXToRadian (macro) D3DXToDegree (macro) Buffer library ID3DXBuffer D3DXCreateBuffer IUnknown AddRef Release QueryInterface Methods GetBufferPointer GetBufferSize Mesh library ID3DXBaseMesh IUnknown AddRef Release QueryInterface Methods GetIndexBuffer  GetVertexBuffer  CloneMesh  GetNumFaces  GetDevice  GetOptions  DrawSubset  GetAttributeTable  GetFVF  GetNumVertices ID3DXMesh Functions D3DXCreateMesh D3DXLoadMeshFromX D3DXLoadMeshFromXof D3DXSaveMeshToX D3DXSimplifyMesh D3DXTesselateMesh Shape functions D3DXCreateBox  D3DXCreateCylinder  D3DXCreatePolygon  D3DXCreateSphere  D3DXCreateTeapot  D3DXCreateTorus IUnknown AddRef Release QueryInterface ID3DXBaseMesh GetIndexBuffer  GetVertexBuffer  CloneMesh  GetNumFaces  GetDevice  GetOptions  DrawSubset  GetAttributeTable  GetFVF  GetNumVertices Methods GetFaceAttributes  GenerateAdjacency  GeneratePointReps  Optimize  SetMesh ID3DXPMesh Functions D3DXGeneratePMesh IUnknown AddRef Release QueryInterface ID3DXBaseMesh GetIndexBuffer  GetVertexBuffer  CloneMesh  GetNumFaces  GetDevice  GetOptions  DrawSubset  GetAttributeTable  GetFVF  GetNumVertices Methods ClonePMesh  GetMaxFaces  GetMinFaces  SetNumFaces  Save  GetMaxVertices  GetMinVertices  SetNumVertices ID3DXSPMesh Functions D3DXCreateSPMesh Methods CloneMesh  ClonePMesh  GetMaxFaces  GetNumFaces  ReduceFaces  GetDevice  GetOptions  GetFVF  GetMaxVertices  GetNumVertices  ReduceVertices Texture library Functions D3DXCheckCubeMapRequirements  D3DXCheckMipMapRequirements  D3DXCreateCubeMap  D3DXCreateCubeMapFromFileA  D3DXCreateCubeMapFromFileExA  D3DXCreateCubeMapFromFileExW  D3DXCreateCubeMapFromFileInMemory  D3DXCreateCubeMapFromFileInMemoryEx  D3DXCreateCubeMapFromFileW  D3DXCreateMipMap  D3DXCreateMipMapFromFileA  D3DXCreateMipMapFromFileExA  D3DXCreateMipMapFromFileExW  D3DXCreateMipMapFromFileInMemory  D3DXCreateMipMapFromFileInMemoryEx  D3DXCreateMipMapFromFileW  D3DXFilterCubeMap  D3DXFilterMipMap  D3DXLoadSurfaceFromFileA  D3DXLoadSurfaceFromFileInMemory  D3DXLoadSurfaceFromFileW  D3DXLoadSurfaceFromMemory  D3DXLoadSurfaceFromSurface Matrix stack library ID3DXMatrixStack Functions D3DXCreateMatrixStack IUnknown AddRef Release QueryInterface Methods MultMatrix  MultMatrixLocal  GetTop  LoadIdentity  LoadMatrix  Push  RotateAxis  RotateAxisLocal  RotateYawPitchRoll  RotateYawPitchRollLocal  Scale  ScaleLocal  Translate  TranslateLocal Shader library Functions D3DXAssemblePixelShader  D3DXAssemblePixelShaderFromFileA (if supported) D3DXAssemblePixelShaderFromFileW  D3DXAssembleVertexShader  D3DXAssembleVertexShaderFromFileA (if supported) D3DXAssembleVertexShaderFromFileW Font library (if supported) ID3DXFont Functions D3DXCreateFont D3DXDrawTextA (if supported) D3DXDrawTextW IUnknown AddRef Release QueryInterface Methods Feature test specifications Infrastructure Direct3D Initialization Direct3D creation Direct3DCreate8 Successfully returns a working IDirect3D8 interface Incorrect or incompatible SDK version numbers will cause the method to return NULL CoCreateInstance Successfully returns a working IDirect3D8 interface IDirect3D8::Release Correctly frees all memory allocated for Direct3D Returns a reference count of zero Leaves the system in a state in which a new functional Direct3D8 object can be created Correctly cleans up even if the device and resource objects were not explicitly released by the application (even if the application is in the middle of rendering a scene on release all memory should be freed and the display hardware should be left in a functional state). This is a lower priority test since rarely will the method get called by shipping games (the user will generally just shut the machine off) but it will be important for developers debugging their applications and running them multiple times in succession. Adapter(s) Enumeration IDirect3D8::GetAdapterCount Always returns 1 (and only 1) Information IDirect3D8::GetDeviceIdentifier Correctly initializes the D3DADAPTER_IDENTIFIER8 structure on success Correctly sets the WHQLLevel member of the identifier structure to 0 when the D3DENUM_NO_WHQL_LEVEL flag is specified Fails when given any adapter ordinal other than 0, any flag other than D3DENUM_NO_WHQL_LEVEL (including the D3DENUM_HOST_ADAPTER flag), a NULL identifier pointer, or an identifier pointer to read-only memory. Returns the correct development-time error on failure Does not modify the D3DADAPTER_IDENTIFIER8 memory on failure Display modes Enumeration IDirect3D8::GetAdapterModeCount Correctly returns the number of display modes available (TBD).  This number should be a constant and never change. IDirect3D8::EnumAdapterModes Returns the correct display mode information for all supported native modes, including NTSC, PAL, and HDTV (modes TBD), and all unknown format combinations corresponding to the native modes.  Only supported modes are enumerated, supported modes are only enumerated once for each refresh rate, and no unsupported modes are enumerated.  Fails when given any adapter ordinal other than 0, a mode of D3DCURRENT_DISPLAY_MODE, a mode ordinal equal to or exceeding the number of supported modes, a NULL display mode pointer, or a display mode pointer to read-only memory. In all failure cases other than a NULL or read-only display mode pointer, the D3DDISPLAYMODE structure is zeroed out.  REVIEW: Is this true of all information retrieval methods? Current mode IDirect3D8::GetAdapterDisplayMode Returns the correct display mode information for the adapter s current display mode.  The correct information is returned both when the device is set to each of the supported modes on creation (IDirect3D8::CreateDevice) and on resize (IDirect3DDevice8::Resize).  TBD: What is the display mode of the adapter on boot-up (before any device has been created)?  Will that display mode be restored when the device is released? Fails when given any adapter ordinal other than 0, a NULL display mode pointer, or a display mode pointer to read-only memory. Does not modify the D3DDISPLAYMODE structure on failure caused by an invalid adapter ordinal. Setting IDirect3D8::CreateDevice All supported display modes are correctly set in the device on creation. Fails with [TBD] on unsupported modes. IDirect3DDevice8::Resize All supported display modes are correctly set in the device on resize (including resizing into the current mode). Fails with [TBD] on unsupported modes. REVIEW: Potentially fails when any outstanding references to the swap chain or depth buffers are present (i.e. buffer interfaces obtained from IDirect3DDevice8::GetBackBuffer, IDirect3DDevice8::GetDepthStencilSurface, IDirect3DDevice8::GetRenderTarget, and IDirect3DDevice8::GetSwapChain methods).  If Resize does not fail then new buffer objects are created and existing objects are decremented (being released once the application releases them). REVIEW: Implications of performing a Resize when the device is still drawing or when one of the swap chain or depth buffers is being used as the destination in a copy operation that has not completed. Unknown formats The correct display modes (TBD) are set for each of the unknown format types, both on device creation and resize. Refresh rates The refresh rates for all supported display modes are correctly set in the device on creation and resize.  The refresh rate is verified by counting v-blanks per second using IDirect3DDevice8::GetRasterStatus. Dimensions and format of swap chain buffers The dimensions and format of all buffers in the swap chain correctly correspond to the display mode into which the device has been placed, both when the device is created and when it is resized, for all supported display modes. The dimensions of all buffers in the swap chain correctly reflect both the current display mode and the current multi-sampling set in the device, both when the device is created and when it is resized, for all supported display modes and multi-sample types. The formats of swap chain buffers are restricted to the following in DX8: D3DFMT_X1R5G5B5, D3DFMT_R5G5B5, D3DFMT_X8R8G8B8, and D3DFMT_A8R8G8B8. When a device is resized from one display mode to another, the correct amount of memory is allocated or released for the dimension and format change in buffers and the number of buffers in the swap chain. When a device is resized from one multi-sample type to another, the correct amount of memory is allocated or released for the multi-sample change in buffers and the number of buffers in the swap chain. Dimensions of depth/stencil buffer The dimensions of an implicitly created (auto) depth/stencil buffer correctly correspond to the dimensions of the display mode into which the device has been placed, both when the device is created and when it is resized, for all supported display modes. The dimensions of an implicitly created depth/stencil buffer correctly reflects both the current display mode and the current multi-sampling set in the device, both when the device is created and when it is resized, for all supported display modes and multi-sample types. When a device is resized from one display mode to another, the correct amount of memory is allocated or released for the dimensions and format change in depth/stencil buffers (including changing from having an implicit depth buffer to not having one and vice-versa). When a device is resized from one multi-sample type to another, the correct amount of memory is allocated or released for the multi-sample change in depth/stencil buffers. Implicit texture formats If certain texture formats are supported in some display modes and not in others and if those texture formats can be the default in unknown format selections, verify that they are not selected when an unknown texture format is specified and the current display mode does not support the format. Frame buffer Enumeration Supported render target formats IDirect3D8::CheckDeviceFormats Succeeds with D3DFMT_X1R5G5B5, D3DFMT_R5G5B5, D3DFMT_X8R8G8B8, and D3DFMT_A8R8G8B8 formats when checked against all supported display mode formats (and D3DFMT_UNKNOWN) with the D3DUSAGE_RENDERTARGET usage.  Fails for all other render target formats. Fails when given any adapter ordinal other than 0 and any device type other than D3DDEVTYPE_HAL. Implicit swap chains Single back buffer Multiple back buffers If the maximum number of back buffers in a device is limited by hardware (or DX8 itself), IDirect3D8::CreateDevice and IDirect3DDevice8::Resize should succeed for all back buffer counts up to the maximum.  For any counts that exceed the maximum, the methods should fail but modify the BackBufferCount member of D3DPRESENT_PARAMETERS to equal the maximum. Unless a hardware or DX8 limit is placed on the maximum number of back buffers in a device, the back buffer count is constrained only by available memory.  After attempting (and failing) to create or resize a device with 0xFFFFFFFF back buffers, the BackBufferCount member of the presentation parameters structure should be set to the maximum number of back buffers that can fit in available memory.  The device should be successfully created with as many back buffers as memory allows and should correctly swap them for each of the supported effects. Repeated changes to back buffer count Direct3DSwapChain8 interface testing of implicit chain (assuming the interface is supported for the implicit chain) IDirect3DDevice8::GetSwapChain Correctly returns a swap chain interface corresponding to the implicit swap chain in the device. Should return E_NOTIMPL (or D3DERR_x equivalent) if the interface is removed IDirect3DSwapChain8::Present Behaves identically to IDirect3DDevice8::Present.  All cases of success or failure apply to this method as they would to the device method. IDirect3DSwapChain8::GetBackBuffer Behaves identically to IDirect3DDevice8::GetBackBuffer.  All cases of success or failure apply to this method as they would to the device method. Explicit swap chains Unsupported since windowed mode is unsupported and only one swap chain can be full screen at any given time on a single adapter IDirect3DDevice8::CreateAdditionalSwapChain should fail with E_NOTIMPL. Recommend the removal of the IDirect3DSwapChain8 interface altogether so any attempts to use swap chains will result in compile time errors (and code size may be reduced as well) Multi-sample swap chains Enumeration IDirect3D8::CheckDeviceMultisampleTypes Succeeds for D3DFMT_X1R5G5B5, D3DFMT_R5G5B5, D3DFMT_X8R8G8B8, and D3DFMT_A8R8G8B8 formats (including D3DFMT_UNKNOWN) with the D3DMULTISAMPLE_16_SAMPLES multi-sample type.  Fails with D3DERR_INVALIDCALL for all other render target formats.  Potentially fails with D3DERR_NOTAVAILABLE for all other multi-sample types (TBD). Fails with D3DERR_INVALIDCALL when given any adapter ordinal other than 0, TRUE for windowed mode, and any device type other than D3DDEVTYPE_HAL. Retrieving the back buffer IDirect3DDevice8::GetBackBuffer Returns the correct surface interface for each back buffer in the swap chain. Fails with E_INVALIDARG when given a back buffer index equal to or exceeding the number of back buffers in the swap chain, a NULL surface interface pointer, or a surface interface pointer located in read-only memory. Clears the back buffer interface pointer on failure from an invalid buffer index. REVIEW: Are we providing any support for stereo displays? REVIEW: How are swap chain buffers represented internally in a device?  Will GetBackBuffer yield an interface on a Direct3DSurface8 object for the back buffer requested?  How will reference counts be affected by the method?  Will the back buffer interface have a reference count of two?  If reference counts are affected, verify them. IDirect3DDevice8::GetRenderTarget Returns the correct surface interface for the first back buffer (ordinal 0) in the swap chain. Correctly increments the reference count of the first back buffer. Fails with E_INVALIDARG when given a NULL surface interface pointer or a surface interface pointer located in read-only memory. Retrieving contents of the front buffer (debug) IDirect3DDevice8::GetFrontBufferRectangle Succeeds for all render target formats and multi-sample types, performing the correct conversion from the target format to the A8R8G8B8 format of the image buffer. Creates an image buffer of the same dimensions as the source rectangle and with an A8R8G8B8 format.  The image buffer should have a reference count of 1. Fails when given a source rectangle with invalid dimensions (i.e. coordinates outside the dimensions of the front buffer, right or bottom coordinates less than left or top coordinates, etc.). Fails when given a NULL surface interface pointer or a surface interface pointer located in read-only memory. Swap effects Discard Causes the back buffer at the end of the swap chain to be filled with noise on debug builds after the Present method has been called. Succeeds for all supported multi-sample types. REVIEW: The presentation method is unknown for discard swaps.  Can it be assumed that multiple back buffers will be rotated serially (as with Flip) for this effect? REVIEW: The first operation on every pixel in the back buffer after Present must be write-only for discard swaps.  Is this rule enforced in any way?  If so it must be verified for things like destination alpha blends and stencil operations. Correctly causes a serial rotation of back buffers. Preserves contents of the front buffer after presentation (the back buffer with the highest index contains the data). Synchronizes with v-blanks. Fails when used in presentation parameters where MultiSampleType has been set to any other value than D3DMULTISAMPLE_NONE. Preserves the contents of the back buffer after presentation (the contents of the back buffer and the front buffer will be identical after presentation). Not necessarily synchronized with a v-blank, image tearing can result. Fails when attempted with multiple back buffers (BackBufferCount > 1). Fails when used in presentation parameters where MultiSampleType has been set to any other value than D3DMULTISAMPLE_NONE. Copy with VSync Behaves identically to the copy swap effect with one exception: presentation is synchronized with the v-blank. Presentation intervals Enumeration All supported intervals are masked together in the PresentationIntervals member of D3DCAPS8. Setting All supported intervals yield a correct frame rate for all supported display mode refresh rates (i.e. a refresh rate of 60 Hz and a presentation interval of four would give a frame rate of 15 fps). Immediate presentation intervals yield frame rates exceeding refresh rates for swap effects that do not wait for v-blanks (copy).  Gamma correction IDirect3DDevice8::SetGammaRamp Correctly sets the red, green, and blue gamma ramps in the device. REVIEW: Do we have support for a gamma calibrator? If a calibrator is not installed, both calibration flags have the same effect on the gamma ramps in the device. REVIEW: If a calibrator is installed, D3DSGR_CALIBRATE will modify the given ramps.  Will these modifications be reflected in the ramps retrieved by GetGammaRamp or will retrieved ramps always be identical to what has been set? Fails when given a NULL gamma ramp pointer. IDirect3DDevice8::GetGammaRamp Correctly retrieves the red, green, and blue gamma ramps set in the device by SetGammaRamp. Correctly retrieves the gamma ramps initially set in the device on creation. Depth/stencil buffer Enumeration Supported depth buffer formats IDirect3D8::CheckDeviceFormats Succeeds for all depth buffer formats when checked against all supported display mode formats (and D3DFMT_UNKNOWN) with the D3DUSAGE_DEPTHSTENCIL usage.  Fails for all other resource formats. Fails when given any adapter ordinal other than 0 and any device type other than D3DDEVTYPE_HAL. Implicit depth buffers Formats The format of an implicitly created depth/stencil buffer correctly matches the format specified in the presentation parameters, both when the device is created and when it is resized, for all supported depth buffer formats in all supported display mode formats. Explicit depth buffers Surface resources IDirect3DDevice8::CreateDepthStencilSurface Succeeds in creating depth/stencil buffer surfaces in all depth buffer formats. REVIEW: The method includes a usage parameter and expects it to be set to D3DUSAGE_DEPTHSTENCIL.  But it doesn t make much sense to call the method without specifying the DEPTHSTENCIL usage.  So why even have the usage parameter at all why it could be implicitly set within the method? Other resources If DX8 supports other depth/stencil buffer resources (i.e. cube map depth buffer for dynamic environment mapping) they will have to be tested for creation and setting as render targets (using their surface interfaces).  All surface interfaces of these resources need to be verified.  All depth formats of supported resources must be created and set in all display mode formats. Setting IDirect3DDevice8::SetRenderTarget Association: Succeeds in setting depth/stencil surfaces of all formats in all supported display mode formats. Succeeds in setting all surface interfaces of any other supported depth resources (i.e. cube maps) using all depth formats for the resource and all surface interfaces on the resource. For all supported render target resource types, fails to set each frame buffer that has not been created with the D3DUSAGE_RENDERTARGET usage.  Fails to set each depth/stencil buffer that has not been created with the D3DUSAGE_DEPTHSTENCIL usage. Fails for all supported render target types when given a depth/stencil buffer with dimensions smaller than the frame buffer.  Fails in cases of both new and existing (SetRenderTarget passed NULL) frame and depth buffers. Preserves depth/stencil buffer contents on disassociation. Preserves depth/stencil buffer contents on re-association when the dimensions and format of the frame buffer match those of the frame buffer present when the depth/stencil buffer was disassociated.  Increments the reference count of both color and depth/stencil buffers that are being set. Decrements the reference count of both color and depth/stencil buffers that are being replaced. REVIEW: When a frame buffer has been implicitly created as part of a swap chain and SetRenderTarget is used to switch to a texture for rendering, what happens to the frame buffer?  Does it get released?  How can the reference count of the swap chain be correctly incremented so this doesn t happen -- by getting one of the back buffers and incrementing it?  How is the swap chain then restored as the render target   through the back buffer? Retains the current frame buffer and/or depth buffer when NULL is given as the pointer for both/either of them. Memory: Releases both implicitly created and explicitly set depth/stencil buffers. IDirect3DDevice8::GetDepthStencilSurface Succeeds in returning correct depth buffer surface interface. Correctly increments the reference count of the interface. Fails when no depth buffer has been associated with the device and sets the surface interface pointer to NULL. No automatic depth/stencil buffering No memory allocation for a depth buffer. No buffer interface retrived by GetDepthStencilBuffer. Enabling depth and stencil buffering fails (D3DRS_ZENABLE, D3DRS_ZWRITEENABLE, D3DRS_STENCILENABLE) Creating and releasing depth buffers with Resize Correct allocation of the depth buffer when autodepthstencil is set to FALSE when the device is created and then set to TRUE on resize (verify both memory consumption and presence of depth buffer using GetDepthStencilSurface). Correct release of the depth buffer when autodepthstencil is set to TRUE when the device is created and then set to FALSE on resize (verify both memory deallocation and absence of depth buffer using GetDepthStencilSurface). Correct format of the depth buffer when Resize is used to change the buffer format. Correct update of D3DRS_ZENABLE, D3DRS_ZWRITEENABLE, and D3DRS_STENCILENABLE render states when a depth buffer is created or released during a Resize. Device Enumeration IDirect3D8::CheckDeviceTypes fails for all display mode formats when D3DDEVTYPE_SW and D3DDEVTYPE_REF device types are given. IDirect3D8::CheckDeviceFormats, IDirect3D8::CheckDeviceMultisampleTypes, and IDirect3D8::CreateDevice fail when given SW or REF device types. IDirect3D8::GetDeviceCaps should either fail or return a caps structure with no capabilities reported. Creation IDirect3D8::CreateDevice Fails for all device types other the D3DDEVTYPE_HAL. Fails when windowed mode has been set to TRUE (the same must happen on Resize) Fails when another device object is currently instantiated. REVIEW: support for software vertex processing? REVIEW: Will we support only a pure device? ISSUE: In some cases pure devices cannot be relied upon to correctly return information about the state of the device.  If this turns out to be the case for us then it will have a significant impact on the usage of the Get methods for verification in testing. REVIEW: Multithreaded device support? REVIEW: Will we have any support for driver management of resources? Release IDirect3DDevice8::Release Correctly frees all memory allocated for the device. Returns a reference count of zero. Leaves the system in a state in which a new functional device object can be created (with no state information from the previous device retained in the new device). Correctly cleans up even if any resource objects were not explicitly released by the application (even if the application is in the middle of rendering a scene on release all memory should be freed and the display hardware should be left in a functional state). FPU Precision Setup Should be set by default Preserve Information IDirect3D8::GetDeviceCaps dumpcaps tool IDirect3DDevice8::GetCaps IDirect3DDevice8::GetDirect3D IDirect3DDevice8::GetCreationParameters IDirect3DDevice8::GetInfo IDirect3DDevice8::GetAvailableTextureMem Should be somewhat synonymous with unified memory available but how reliable will it be in our case? Lost devices The device will never become lost on the XBox platform.  All code dealing with the loss and restoration of devices should be removed. IDirect3DDevice8::TestCooperativeLevel should be a one line method: return D3D_OK. Resources Resources Private data Priorities Unsupported since we won t be supporting any form of resource management. ResourceManagerDiscardBytes should fail Information Surfaces Image surfaces Copying Failure when attempting to use in any Direct3D method calls other than IDirect3DDevice8::CopyRects and IDirect3DSurface8::Lock/UnlockRect. Private data Locking Information Base textures Level of detail control Methods should fail since LOD control is only supported for managed surfaces Information Textures (Mip Maps) Enumeration Creation and release Memory allocation for various formats (including compressed) and level counts Dimensions Non-power of 2, non-square textures Non-power of 2, non-square mip maps Levels REVIEW: How are ref counts for mipmap level surface objects given and used?  Does a texture have a single reference count or does each level within the texture have an individual ref count? Setting Ref count is incremented when SetTexture is called Ref count is decremented when SetTexture is used to switch to another texture or given NULL Formats Unknown REVIEW: Does CopyRect or UpdateTexture support conversion between RGBA  and compressed formats?  Does D3DXLoadSurfaceFromSurface? Palettized Setting palettes in the device Incompatible D3DFMT_DXVn D3DFMT_VERTEXDATA D3DFMT_INDEXn Usages Load once D3DUSAGE_TEXTURESTAGE_n flags should be ignored Pools REVIEW: How will the one supported memory pool be exposed?  Will only D3DPOOL_DEFAULT and D3DPOOL_NONLOCALVIDMEM succeed? Locking Lock flags All resources created with an unknown in the format are not lockable Attempting to render using a texture with one or more of its levels locked will fail Transfer CopyRect UpdateTexture Dirty regions Locked texture Attempting to copyrect or updatetexture from or to a locked texture should fail Leak detection Management Use of D3DPOOL_MANAGED should fail Get/SetPriority and Get/SetLOD should fail Cube Maps Enumeration Creation and release Memory allocation for various formats (including compressed) and level counts Dimensions Non-power of 2 cube maps Levels REVIEW: How are ref counts for mip map level surface objects for each of the faces given and used?  Does a texture have a single reference count or does each level within the texture have an individual ref count? Setting Ref count is incremented when SetTexture is called Ref count is decremented when SetTexture is used to switch to another texture or given NULL Formats Unknown Palettized Setting palettes in the device Incompatible D3DFMT_DXVn D3DFMT_VERTEXDATA D3DFMT_INDEXn Usages Load once D3DUSAGE_TEXTURESTAGE_n flags should be ignored Pools Locking Lock flags All resources created with an unknown in the format are not lockable Attempting to render using a cube map with one or more of its face levels locked will fail Transfer CopyRect UpdateTexture Dirty regions Locked faces Attempting to copyrect or updatetexture from or to a locked cube map should fail Leak detection Management Use of D3DPOOL_MANAGED should fail Get/SetPriority and Get/SetLOD should fail Volume Textures Enumeration Creation and release Memory allocation for various formats (including compressed) and level counts Dimensions Non-power of 2 widths, heights, and depths Levels REVIEW: How are ref counts for volume objects for each of the levels of a volume texture given and used?  Does the volume texture have a single reference count or does each volume level within the texture have an individual ref count? Setting Ref count is incremented when SetTexture is called Ref count is decremented when SetTexture is used to switch to another texture or given NULL Formats Unknown Palettized Setting palettes in the device Incompatible D3DFMT_DXTn D3DFMT_VERTEXDATA D3DFMT_INDEXn Usages Load once D3DUSAGE_TEXTURESTAGE_n flags should be ignored Pools Locking Lock flags All resources created with an unknown in the format are not lockable Attempting to render using a volume with one or more of its levels locked will fail Transfer UpdateTexture Dirty regions Locked faces Attempting to  updatetexture from or to a locked volume should fail REVIEW: What form will the volume container object take? (IDirect3DVolume8::GetContainer).  Will a copy method be added similar to CopyRects that operates on containers? Leak detection Management Use of D3DPOOL_MANAGED should fail Get/SetPriority and Get/SetLOD should fail Vertex Buffers Creation and release Locking Strides Processing Optimizing Formats Usages Index Buffers Creation and release Locking Strides. Formats Usages Display Vertex processing Fixed function FVF shaders Untransformed and unlit vertex formats Untransformed and pre-lit vertex formats Transformed and pre-lit vertex formats Elements Transformations World transform View transform Projection transform Setting Multiplying Geometry blending Additional world transforms Weighted vertices Setting Matrix palette skinning Lighting Lights Format Types Ambient {render state} Directional Point Spotlight Color Include negative intensities Position/direction Range (point and spot lights) D3DLIGHT_RANGE_MAX Attenuation (point and spot lights) Constant Linear Quadratic Include negative attenuation to produce intensification over distance Umbra, penumbra, and falloff (spot lights) Creation and release Get/SetLight Creating new lights Overwriting existing lights Enabling LightEnable to toggle light Default light Using uninitialized indices to create default lights Maximum active lights Materials Global Diffuse Ambient Specular Emissive Power How will negative values affect material colors and power? Setting Default material Rendering with no set material (should yield a default material with max diffuse, zero ambient, zero specular, and zero emission) Vertex Diffuse Specular States Material sources Diffuse Ambient Specular Emissive Mixed sources Mixed elements Choosing between all three sources (material, diffuse vertex, and specular vertex) for all four source types D3DRS_COLORVERTEX Specular D3DRS_SPECULARENABLE D3DRS_LOCALVIEWER Toggling lighting D3DRS_LIGHTING Stream sources Multiple input streams with fixed function shading Shader declarations D3DVSDE_x preprocessor macros All stream elements are correctly assigned to the correct input registers for fixed function processing Setting Strides Programmable Stream sources Setting Vertex shaders Creating Declaration Function Version Instruction set Op codes Macro ops Other macros TBD (OUTER, DETERMINANT, PROJECT, etc.) Instruction macros Instruction limit Registers Constant Setting Temporary Address Output Setting Run-time debugging Support TBD Pixel processing Fixed function Blending cascade Stages Operations Arguments COLORARG1 COLORARG2 Flags Diffuse Specular Texture TFactor Current Select mask Color and alpha Validation ValidateDevice Correct number of passes reported for all supported blending configurations Correct error codes returned for all invalid configurations Programmable Pixel shaders Creating Function Version Instruction set Texture addressing (declaration) TEXCOORD TEXKILL TEXBEM TEXBEML TEXREG2GR TEXREG2AB TEXDOT3 TEXM3x2 TEXM3x3 REFLECT TEXDEPTH TEXBRDF Pixel blending Addressing modifiers UBYTE SBYTE UWORD NWORD Input argument modifiers ALPHA Instruction modifiers UNBIAS Ordering Addressing operations must precede blending operations Instruction macros Instruction limit Registers Input (color) Constant (factor) Setting Texture Temporary Setting Run-time debugging Support TBD Texture stage states Shader-independent types D3DTSS_BUMPENVMAT00 D3DTSS_BUMPENVMAT01 D3DTSS_BUMPENVMAT10 D3DTSS_BUMPENVMAT11 D3DTSS_TEXCOORDINDEX D3DTSS_ADDRESS D3DTSS_ADDRESSU D3DTSS_ADDRESSV D3DTSS_BORDERCOLOR D3DTSS_MAGFILTER D3DTSS_MINFILTER D3DTSS_MIPFILTER D3DTSS_MIPMAPLODBIAS D3DTSS_MAXMIPLEVEL D3DTSS_MAXANISOTROPY D3DTSS_BUMPENVLSCALE D3DTSS_BUMPENVLOFFSET D3DTSS_TEXTURETRANSFORMFLAGS Rendering Drawing (vertex assembly) Ordering Indexed Non-indexed Strided Vertex sources Buffers Vertex buffers Creation and release Locking Flags Attempting to process and render from a locked buffer must fail Setting Setting a fvf vertex buffer to any stream source other than zero should fail Single stream Multiple streams Rendering Using differing vertex formats in the vertex buffer and vertex shader must fail nicely (i.e fvf in the shader and non-fvf buffer and vice-versa) Processing Processing using incompatible source and destination buffer vertex formats Source buffer must contain untransformed vertices Destination buffer must contain an FVF format and transformed vertices Lighting, clip flag generation, and extent calculation are optional, but tranformation always occurs (verify that each is properly performed and that optional components can be correctly disabled). D3DPV_DONOTCOPYDATA Processing using fvf and shaders with and without stride in the stream sources Processing buffers without a matching source fvf in setvertexshader should fail Clipping information Index buffers Creating Locking Attempting to render from a locked buffer must fail Setting User pointer Primitives Point Sprite list Attenuation Scale enable Clipping Frustum Arbitrary plane Strip Triangle Strip Higher-order primitives Grid patches Formation B-Spline Bezier Catmull-Rom Tesselation level Primitive order Position Normal Patch stride N patches Unsupported Presentation Present Presentation must fail when one or more of the back buffers are locked or under modification with CopyRects Subrects Dirty regions Raster status Extents Clip status Disabling Viewports Initialization Clearing Render target Depth buffer Stencil buffer Subrects Multisample device Clipping Planes Frustum User defined Primitives Line lists Line strips Triangle lists Triangle strips Triangle fans Sprite points Grid patches Disabling Multiple viewport rendering Device states State blocks Block handles Recording Capturing Applying Creating and deleting Antialiasing Full scene Unsupported Cull mode Fill mode Point Wireframe Solid Shade mode Line pattern Last pixel Dithering NormalizeNormals Only supported for fixed function Unsupported states ZVisible StippledAlpha EdgeAntialias SoftwareVertexProcessing Texturing Addressing Mirror Clamp Border Wrapping Dimension independent Perspective correction REVIEW: Can perspective correction be disabled? Filtering Minification Magnification Mipmapping Bilinear Trilinear LOD Bias D3DTSS_MAXMIPLEVEL Correct level selection Anisotropy Coordinate manipulation Automatic generation Vertex formats Vertices without coordinate information Vertices with coordinate information (ignored) CAMERASPACEPOSITION CAMERASPACENORMAL CAMERASPACEREFLECTIONVECTOR Transformations D3DTRANSFORMSTATE_TEXTUREn Projective D3DTEXTURETRANSFORMFLAGS and D3DTSS_TEXTURETRANSFORMFLAGS Transforming automatically generated coordinates Multitexturing Mixed states in separate stages Addressing Wrapping Filtering Coordinate generation Effects Translucency Blend factors Destination alpha Material and texture sources Alpha testing ALPHAREF ALPHAFUNC ALPHATESTENABLE Color keying Texture Check all formats All formats with alpha for translucency All formats for color keying Palettized with alpha in the palette Using different mip filtering, especially trilinear Depth buffering Initialization with Clear Direct surface access Z and w buffers Depth distribution curve comparison between z and w D3DRS_ZFUNC D3DRS_ZBIAS D3DRS_ZENABLE D3DZB_TRUE D3DZB_USEW D3DZB_FALSE D3DRS_ZWRITEENABLE Stencil buffering States STENCILREF STENCILMASK STENCILWRITEMASK D3DSTENCILOP STENCILFUNC STENCILFAIL STENCILZFAIL STENCILPASS Enabling STENCILENABLE Vertex REVIEW: Will D3D calculate the fog intensity values for pre-lit FVF vertices or programmable vertex shaders? Pixel Depth calculations Depth based Range based D3DRS_RANGEFOGENABLE State Color FOGCOLOR Range FOGSTART, FOGEND, FOGTABLESTART, FOGTABLEEND Density FOGDENSITY, FOGTABLEDENSITY Attenuation D3DFOG Linear Exponential Exponential-squared FOGVERTEXMODE, FOGTABLEMODE Enabling FOGENABLE Alternate render targets Supported formats Supported resource types (surface, texture, cube map, etc.) What about anti-aliasing and offscreen render targets?  How are multisample-capable targets created for things like cubemaps, mipmaps, etc.? REVIEW: Is it valid to set a mipmap sublevel as the render target? Usages Any attempt to set a render target to surface, texture, etc. not created with the rendertarget usage flag must fail Mirroring Arbitrary clip planes and offscreen render targets Environment mapping Bump maps Stage settings D3DTOP_BUMPENVMAP D3DTOP_BUMPENVMAPLUMINANCE Mapping Transform D3DTSS_BUMPENVMAPxx Luminance BUMPENVLSCALE BUMPENVLOFFSET BUMPENVMAPLUMINANCE Translucent bump maps Cube maps Diffuse maps Specular maps Reflection maps Parabolic maps Dynamic reflection maps Pixel lighting (DotProduct3) Cartoon rendering Particles Multisampling Depth of field (Focus blur) Motion blur Reflection blur Mouse cursor API Probably unsupported (D3D slaves cursor postion, properties, etc. to system cursor.  Since we don t have a system cursor if we supported the API the application would have to manually control the cursor) Streaming Streaming video to various render target formats and resource types XBox extensions Overlays Other extensions TBD Performance Utility library Authoring tool integration Skinning tool support for popular art packages Skinning library support Higher order primitive grid patch converters Progressive mesh tools X file format Effect framework Techniques and effects Controlled effect fallbacks Fallbacks aren t needed on the console since it is closed system, but the use of effects defined by simple text files is still useful for ease of development and would be in line with our desire for artist-driven games. Effect file format Effect objects Sprite library Texture utilities Image file loaders Format conversion Image re-sampling Mip-map generation Test complete criteria Once all useful DirectX and Dreamcast tests that can be adapted are running on the XBox platform and all additional tests have been developed to provide the remaining coverage outlined above, test development work for Direct3D can be declared complete. Release criteria All tests should pass in order to sign off on a release candidate.  If a shipping build is being considered for a specific title, all tests covering the features used by the title must pass.  The only failure cases acceptable in a release are those whose repro steps are declared too obscure to be hit by ISVs, a determination made by triage on a case-by-case basis.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\logging.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Internal Logging Specification TitleLogging Specification Steven Kehrli Normal.dot Steven Kehrli Microsoft Word 9.0zY_NF {zOsHU :CFQPHLogging Specification Author Steven Kehrli (steveke) Revision History 03/09/2000: Initial Spec 03/10/2000 Added Test DLL Dependencies section to detail Thread Local Storage (TLS) requirements. 03/16/2000 Removed Test DLL Dependencies section re. TLS requirements.  xlog.dll does this now. Clarified ANSI vs UNICODE. 04/06/2000: Added SetComponent() and SetFunctionName() APIs. 05/08/2000: Added hLog handle to xSetComponent() and xSetFunctionName() APIs. 05/17/2000: Added support for nested variations. Added support for logging outside of a variation. 06/16/2000: Added XLL_VARIATION_START and XLL_VARIATION_END. 08/10/2000: Added remote console functionality through a socket. Revised web post functionality. Added xLogResourceStatus() and xChangeLog() APIs. Removed the API Design section. User Experience Harness call xCreateLog(): Creates the log object. Sets the default logging level for this log object. Returns a handle to the log object. Harness calls Test DLL entry point, StartTest().  StartTest() takes one parameter, the handle to the log object. Test DLL calls xLog(): Logs a string at a specified log level.  Component, subcomponent, function name, and variation name are defaulted. If specified log level is not XLL_INFO, XLL_VARIATION_START, XLL_VARIATION_END, or XLL_VARIATION, increments the total number of variations and the appropriate variation result counter.  XLL_VARIATION_START, XLL_VARIATION_END, and XLL_VARIATION should never be passed to xLog().  They are for use with xCreateLog() and for internal use of the logging engine. Test DLL calls xSetComponent(): Sets the component and subcomponent for the logging sequences. Test DLL calls xLog(): Logs a string at a specified log level.  Function name and variation name are defaulted. If specified log level is not XLL_INFO, XLL_VARIATION_START, XLL_VARIATION_END, or XLL_VARIATION, increments the total number of variations and the appropriate variation counter (i.e. XLL_BLOCK increments variations blocked).  XLL_VARIATION_START, XLL_VARIATION_END, and XLL_VARIATION should never be passed to xLog().  They are for use with xCreateLog() and for internal use of the logging engine. Test DLL calls xSetFunctionName(): Sets the function name for the logging sequences. Test DLL calls xLog(): Logs a string at a specified log level.  Variation name is defaulted. If specified log level is not XLL_INFO, XLL_VARIATION_START, XLL_VARIATION_END, or XLL_VARIATION, increments the total number of variations and the appropriate variation counter (i.e. XLL_BLOCK increments variations blocked).  XLL_VARIATION_START, XLL_VARIATION_END, and XLL_VARIATION should never be passed to xLog().  They are for use with xCreateLog() and for internal use of the logging engine. Test DLL calls xStartVariation(): Starts a variation logging sequence for this thread. Increments the total number of variations. Logs a string, i.e. variation name, indicating the Test DLL has started a variation. Test DLL calls xLog(): Logs a string at a specified log level. Test DLL calls xStartVariation(): Starts a variation logging sequence for this thread. Increments the total number of variations. Logs a string, i.e. variation name, indicating the Test DLL has started a variation. Test DLL calls xLog(): Logs a string at a specified log level. Test DLL calls xEndVariation(): Ends a variation logging sequence for this thread. Increments the appropriate variation result counter. Logs a string indicating the Test DLL has ended a variation. Test DLL calls xEndVariation(): Ends a variation logging sequence for this thread. Increments the appropriate variation result counter. Logs a string indicating the Test DLL has ended a variation. Test DLL calls xLog(): Logs a string at a specified log level.  Variation name is defaulted. If specified log level is not XLL_INFO, XLL_VARIATION_START, XLL_VARIATION_END, or XLL_VARIATION, increments the total number of variations and the appropriate variation counter (i.e. XLL_BLOCK increments variations blocked).  XLL_VARIATION_START, XLL_VARIATION_END, and XLL_VARIATION should never be passed to xLog().  They are for use with xCreateLog() and for internal use of the logging engine. Harness calls xCloseLog(): Logs the results. Closes the log file.  Log File Output The log file will be a csv file. For each log string there are 8 columns: Thread Id   4 chars Time   8 chars (HH:MM:SS) Log Level   25 chars Component   32 chars Subcomponent   32 chars Function Name   32 chars Variation Name   32 chars Log String   255 chars The following code: xLog(hLog, XLL_INFO, "Info: No component, subcomponent, function name, or variation"); xLog(hLog, XLL_BLOCK, "Block: No component, subcomponent, function name, or variation"); xSetComponent(hLog, "Component", "Subcomponent"); xLog(hLog, XLL_INFO, "Info: No function name, or variation"); xLog(hLog, XLL_BLOCK, "Block: No function name, or variation"); xSetFunctionName(hLog, "FunctionName"); xLog(hLog, XLL_INFO, "Info: No variation"); xLog(hLog, XLL_BLOCK, "Block: No variation"); xStartVariation(hLog, "Variation Level 1"); xLog(hLog, XLL_INFO, "Meaningless info, Level 1"); xStartVariation(hLog, "Variation Level 2"); xLog(hLog, XLL_INFO, "Meaningless info, Level 2"); xStartVariation(hLog, "Variation Level 3"); xLog(hLog, XLL_FAIL, "Meaningless fail, Level 3"); xLog(hLog, XLL_INFO, "Meaningless info, Level 3"); xEndVariation(hLog); xLog(hLog, XLL_PASS, "Meaningless pass, Level 2"); xLog(hLog, XLL_INFO, "More meaningless info, Level 2"); xEndVariation(hLog); xLog(hLog, XLL_FAIL, "Meaningless fail, Level 1"); xLog(hLog, XLL_INFO, "More meaningless info, Level 1"); xEndVariation(hLog); xLog(hLog, XLL_INFO, "Info: No variation"); xLog(hLog, XLL_BLOCK, "Block: No variation"); xSetComponent(hLog, NULL, NULL); xLog(hLog, XLL_INFO, "Info: No function name, or variation"); xLog(hLog, XLL_BLOCK, "Block: No function name, or variation"); will yield the following output: 042c,14:00:53,INFO,<No Component>,<No Subcomponent>,<No Function>,<No Variation>,Info: No component  subcomponent  function name  or variation 042c,14:00:53,BLOCK,<No Component>,<No Subcomponent>,<No Function>,<No Variation>,Block: No component  subcomponent  function name  or variation 042c,14:00:53,INFO,Component,Subcomponent,<No Function>,<No Variation>,Info: No function name  or variation 042c,14:00:53,BLOCK,Component,Subcomponent,<No Function>,<No Variation>,Block: No function name  or variation 042c,14:00:53,INFO,Component,Subcomponent,FunctionName,<No Variation>,Info: No variation 042c,14:00:53,BLOCK,Component,Subcomponent,FunctionName,<No Variation>,Block: No variation 042c,14:00:53,VARIATION START,Component,Subcomponent,FunctionName,Variation Level 1,Variation Started: Variation Level 1 042c,14:00:53,INFO,Component,Subcomponent,FunctionName,Variation Level 1,Meaningless info  Level 1 042c,14:00:53,VARIATION START,Component,Subcomponent,FunctionName,Variation Level 2,Variation Started: Variation Level 2 042c,14:00:53,INFO,Component,Subcomponent,FunctionName,Variation Level 2,Meaningless info  Level 2 042c,14:00:53,VARIATION START,Component,Subcomponent,FunctionName,Variation Level 3,Variation Started: Variation Level 3 042c,14:00:53,FAIL,Component,Subcomponent,FunctionName,Variation Level 3,Meaningless fail  Level 3 042c,14:00:53,INFO,Component,Subcomponent,FunctionName,Variation Level 3,Meaningless info  Level 3 042c,14:00:53,VARIATION END: FAIL,Component,Subcomponent,FunctionName,Variation Level 3,Variation Ended: Variation Level 3 042c,14:00:53,PASS,Component,Subcomponent,FunctionName,Variation Level 2,Meaningless pass  Level 2 042c,14:00:53,INFO,Component,Subcomponent,FunctionName,Variation Level 2,More meaningless info  Level 2 042c,14:00:53,VARIATION END: PASS,Component,Subcomponent,FunctionName,Variation Level 2,Variation Ended: Variation Level 2 042c,14:00:53,FAIL,Component,Subcomponent,FunctionName,Variation Level 1,Meaningless fail  Level 1 042c,14:00:53,INFO,Component,Subcomponent,FunctionName,Variation Level 1,More meaningless info  Level 1 042c,14:00:53,VARIATION END: FAIL,Component,Subcomponent,FunctionName,Variation Level 1,Variation Ended: Variation Level 1 042c,14:00:53,INFO,Component,Subcomponent,FunctionName,<No Variation>,Info: No variation 042c,14:00:53,BLOCK,Component,Subcomponent,FunctionName,<No Variation>,Block: No variation 042c,14:00:55,INFO,<No Component>,<No Subcomponent>,<No Function>,<No Variation>,Info: No function name  or variation 042c,14:00:55,BLOCK,<No Component>,<No Subcomponent>,<No Function>,<No Variation>,Block: No function name  or variation Results The results table will look like: Total Variations,8 Exceptions,0 Breaks,0 Failures,2 Warnings,0 Blocked,5 Passed,1 Unknown,0 System Configuration The system configuration may be written to the log file when it is created.  Possible information in the system configuration is: OS Binaries date/time/version stamps Machine Identifier System Information (processor, graphics processor, nic, driver information, etc.) System State The system state may be written to the log file when it is created and again when it is closed.  Possible information in the system state is: Current System State (memory, handles, etc.) Web Post Output Logging may also be posted to a web server.  The exact format and behavior is TBD.  However, in general: A variation and its result may be posted The system configuration may be posted The system state may be posted HANDLE xCreateLog(   LPTSTR            lpszLogFileName,   PWEB_SERVER_INFO  pWebServerInfo,   SOCKET            sConsoleSocket,   DWORD             dwLogLevel,   DWORD             dwLogOptions Creates a log object. Parameters lpszLogFileName Pointer to a null-terminated string (ANSI or UNICODE) that specifies the filename to which the log output will be directed.  If this parameter is NULL, then a log file will not be created. pWebServerInfo Pointer to a WEB_SERVER_INFO structure.  This structure specifies the HTTP server and the web pages to which web posts of the system configuration, system state, and log outout will be made.  If this parameter is NULL, then no web posts will be made. typedef struct _WEB_SERVER_INFO {     LPTSTR  lpszHttpServer;     LPTSTR  lpszConfigPage;     LPTSTR  lpszStatePage;     LPTSTR  lpszLogPage; } WEB_SERVER_INFO, *PWEB_SERVER_INFO; lpszHttpServer Pointer to a null-terminated string (ANSI or UNICODE) that specifies the server to which a web post will be made.  If this parameter is NULL, then no web posts will be made. lpszConfigPage Pointer to a null-terminated string (ANSI or UNICODE) that specifies the web page to which web posts of the system configuration will be made.  If this parameter is NULL, then no web posts of the system configuration will be made. lpszStatePage Pointer to a null-terminated string (ANSI or UNICODE) that specifies the web page to which web posts of the system state will be made.  If this parameter is NULL, then no web posts of the system state will be made. lpszLogPage Pointer to a null-terminated string (ANSI or UNICODE) that specifies the web page to which web posts of the log output will be made.  If this parameter is NULL, then no web posts of the log output will be made. sConsoleSocket Specifies a socket descriptor to which all log output should be echoed. dwLogLevel Specifies the logging levels associated with the log object.  It can be any combination of the following values (XLL = X*Box Logging Level): XLL_INFO Enables logging of informational events XLL_EXCEPTION Enables logging of exception events XLL_FAIL Enables logging of failure events XLL_WARN Enables logging of warning events XLL_BREAK Enables logging to break into the debugger XLL_BLOCK Enables logging of blocking events XLL_PASS Enables logging of pass events XLL_VARIATION_START Enables logging of variation start events XLL_VARIATION_END Enables logging of variation end events XLL_VARIATION Enables logging of variation start and end events XLL_LOGALL Enables logging at all levels XLL_LOGNONE Disables all logging dwLogOptions Specifies the logging options associated with the log object.  It can be any combination of the following values (XLO = X*Box Logging Option): XLO_DEBUG Logging is echoed to the debugger XLO_CONFIG Enables logging of the system configuration when the log object is created XLO_STATE Enables logging of the system state when the log object is created and again when the log object is closed. XLO_REFRESH Creates a new log file.  If the file exists, the function overwrites the file and clears the existing attributes. Return Values If the function succeeds, the return value is a valid handle.  If the function fails, the return value is ERROR_INVALID_HANDLE.  To get extended error information, call GetLastError(). xCloseLog(   HANDLE  hLog Closes the log object. Parameters Handle to the log object. Return Values If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.  To get extended error information, call GetLastError(). HANDLE xChangeLog(     IN  HANDLE  hLog,     IN  DWORD   dwChangeOptions,     IN  SOCKET  sConsoleSocket,     IN  DWORD   dwLogLevel,     IN  DWORD   dwLogOptions Changes the remote console socket, log level, and log options associated with a log object. Parameters Handle to the log object. dwChangeOptions Specifies the options to be changed.  It can be any combination of the following values (XLC = X*Box Logging Change): XLC_SOCKET Changes the remote console socket XLC_LOGLEVEL Changes the log level XLC_LOGOPTIONS Changes the log options sConsoleSocket Specifies the new socket descriptor to which all log output should be echoed.  If XLC_SOCKET is not specified for dwChangeOptions, this parameter is ignored. dwLogLevel Specifies the new logging levels associated with the log object.  If XLC_LOGLEVEL is not specified for dwChangeOptions, this parameter is ignored.  It can be any combination of the following values (XLL = X*Box Logging Level): XLL_INFO Enables logging of informational events XLL_EXCEPTION Enables logging of exception events XLL_FAIL Enables logging of failure events XLL_WARN Enables logging of warning events XLL_BREAK Enables logging to break into the debugger XLL_BLOCK Enables logging of blocking events XLL_PASS Enables logging of pass events XLL_VARIATION_START Enables logging of variation start events XLL_VARIATION_END Enables logging of variation end events XLL_VARIATION Enables logging of variation start and end events XLL_LOGALL Enables logging at all levels XLL_LOGNONE Disables all logging dwLogOptions Specifies the new logging options associated with the log object.  If XLC_LOGOPTIONS is not specified for dwLogOptions, this parameter is ignored.  It can be any combination of the following values (XLO = X*Box Logging Option): XLO_DEBUG Logging is echoed to the debugger XLO_CONFIG Enables logging of the system configuration when the log object is created XLO_STATE Enables logging of the system state when the log object is created and again when the log object is closed. XLO_REFRESH Creates a new log file.  If the file exists, the function overwrites the file and clears the existing attributes. Return Values If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.  To get extended error information, call GetLastError(). xSetComponent(   HANDLE  hLog,   LPSTR   lpszComponentName,   LPSTR   lpszSubcomponentName Sets the component and subcomponent for the logging sequence. Parameters Handle to the log object. lpszComponentName Pointer to a null-terminated string (ANSI) that specifies the component. lpszSubcomponentName Pointer to a null-terminated string (ANSI) that specifies the subcomponent. Return Values If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.  To get extended error information, call GetLastError(). xSetFunctionName(   HANDLE  hLog,   LPSTR   lpszFunctionName Sets the function name for the logging sequence. Parameters Handle to the log object. lpszFunctionName Pointer to a null-terminated string (ANSI) that specifies the function name. Return Values If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.  To get extended error information, call GetLastError(). xStartVariation(   HANDLE  hLog,   LPSTR   lpszVariationName Starts a variation log sequence for this thread. Parameters Handle to the log object lpszVariationName Pointer to a null-terminated string (ANSI) that specifies the name for this variation. Return Values If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.  To get extended error information, call GetLastError(). DWORD xEndVariation(   HANDLE  hLog Ends a variation log sequence for this thread. Parameters Handle to the log object Return Values The return value is the most severe log level encountered during the variation. xLog_va(     IN  HANDLE   hLog,     IN  DWORD    dwLogLevel,     IN  LPSTR    lpszFormatString,     IN  va_list  varg_ptr Logs one line of output. Parameters Handle to the log object dwLogLevel Specifies the logging level for the output.  It can be one of the following values (XLL = X*Box Logging Level): XLL_INFO Informational event XLL_EXCEPTION Exception event XLL_FAIL Failure event XLL_WARN Warning event XLL_BREAK Debugger break event XLL_BLOCK Blocking event XLL_PASS Pass event XLL_VARIATION is a valid values, but should only be used by xStartVariation() and xEndVariation(): XLL_VARIATION Variation start/end event lpszFormatString Pointer to a null-terminated string (ANSI) that consists of format-control specifications. varg_ptr Pointer to the variable argument list. Return Values If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.  To get extended error information, call GetLastError(). xLog(   HANDLE  hLog,   DWORD   dwLogLevel,   LPSTR   lpszFormatString,   ... Logs one line of output. Parameters Handle to the log object dwLogLevel Specifies the logging level for the output.  It can be one of the following values (XLL = X*Box Logging Level): XLL_INFO Informational event XLL_EXCEPTION Exception event XLL_FAIL Failure event XLL_WARN Warning event XLL_BREAK Debugger break event XLL_BLOCK Blocking event XLL_PASS Pass event XLL_VARIATION is a valid values, but should only be used by xStartVariation() and xEndVariation(): XLL_VARIATION Variation start/end event lpszFormatString Pointer to a null-terminated string (ANSI) that consists of format-control specifications. Specifies one or more optional arguments.  The number and type of argument parameters depend on the corresponding format-control specifications in the lpszFormatString parameter. Return Values If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.  To get extended error information, call GetLastError(). xLogResourceStatus(     IN  HANDLE  hLog,     IN  LPSTR   lpszLogString_A Logs the current resource status of the machine. Parameters Handle to the log object lpszLogString_A Pointer to a null-terminated string (ANSI) to be output with the resource status. Return Values If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.  To get extended error information, call GetLastError(). xLogResults(   HANDLE  hLog Logs the results of the log object. Parameters Handle to the log object Return Values If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.  To get extended error information, call GetLastError().
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\performance.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Performance Testing Documentation TitlePerformance Testing Documentation Jason Gould Normal.dot Sakphong Chanbai Microsoft Word 9.0*R&1+R&Performance Testing Documentation Created by Jason Gould   5 Feb 2001 For gathering performance information, two APIs are available: QueryCpuTimesInformation  Routine to measure CPU utilization available in test\tools\xtestlib. QueryCpuTimesInformation(     PLARGE_INTEGER KernelTime,     PLARGE_INTEGER IdleTime,     PLARGE_INTEGER DpcTime OPTIONAL,     PLARGE_INTEGER InterruptTime OPTIONAL,     PLARGE_INTEGER UserTime OPTIONAL     ); IdleTime is the total time we spent in idle thread, the kernel schedules idle thread if there is no ready thread to run DpcTime is the total time we spent in DPC routines InterruptTime is the total time we spent in interrupt service routines All times are in units of 100ns increments Tsc routines, from the CPU s internal time-stamp counter: source in test\tools\tsc lib in test\lib\i386\tsc.lib header in test\inc\tsc.h accurate to the nearest clock cycle  however, measurements have noise, due to memory paging, randomness of the universe, etc. noise varies, based on the thing being measured.  for less-than-a-second measurements, noise can be up to +/-  .1%. there s also some very ugly noise that could be created by thread-switching, up to 60ms/thread. Documentation: call TscInit(0) once, in the beginning of your test. There are DWORD and INT64 versions of everything.  DWORDs are accurate for about 5.8 seconds. INT64s are accurate for about 797 years. StartTime = TscBegin( ) to start a measurement. CyclesUsed = TscEnd(StartTime), or CyclesUsedSoFar = TscCurrentTime(StartTime) Many conversion functions are provided in tsc.h. TscTicksTo*Seconds (convert to/from seconds, microseconds, milliseconds)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\networktestplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8US-DAPD IIS Title _PID_HLINKSFrancesco Olian Fannio Normal Microsoft Word 9.0bg<2\8b Whz48 BdD\V Rsv\0 Zw1zv= JK\{XnBX P/L-j8 F$j-R@;@CAC gei_^` UTX\[_pos 113557 ==?;;=779 ./0KLMXYZrstjklghi beafge {{{nnncccHHH)))%%%""" cmPPJCmp0712 IDATx^ {lcif gWWuoQh ~QV~~ +-,// |P]Uu vLOO;9 G/#`}` `pf\@ ,cyzAA ,.-'..=I\ x)qy1 --.?YY 7FsSZ r/r1! pWwk$ +MV\( cGSSA Ifb9^ {,oQL/ ,,1L=> `x#1  N`DVL |^X e b:Tt@ XZ{72 Gi1ye jZEsQ^' ame|<n?JX ixxE$ 9iK=># g99~f 4?>z@^+ 7)H_Q$ue BPhotoshop 3.0 8BIM' 'File written by Adobe Photoshop Adobe 7GWgw AQaq" dEU6te '7GWgw VNv;r [1p1* ,bJzl/ s-cz} mclc( k1]S_ fEo5[Ic] ;F6]? .>-C6)Gc {Ym5_ 'File written by Adobe Photoshop Adobe 7GWgw 8HXhx )9IYiy *:JZjz 'dtU7 8HXhx 9IYiy *:JZjz $h>'v "t];Y kUZxS~ _1_y_ [MDXis <5]Ve&mc ./X|W s;Ika [~XA; Cw:G4 2(Z.T zSNep8 -_&aW *7Uh\ ZC3WL (y,SL h>[i- P/].l iij$]Y Xb@8u-bjbjU  HYPERLINK "http://xbox" \t "_parent"   INCLUDEPICTURE "http://xbox/images/header.gif" \* MERGEFORMATINET  Microsoft( XBox(  1.0 The incredible entertainment console  HYPERLINK "http://xbox"   INCLUDEPICTURE "http://xbox/images/email/stat_logo.jpg" \* MERGEFORMATINET  Network Test Plan Jim Yagelowich (JimY) March 28, 2000 Version 1.0  Legal Notice The information contained in this document is strictly MICROSOFT CONFIDENTIAL. The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication. This document is for information purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT. Microsoft, Win32, Windows NT, and Windows are registered trademarks and BackOffice, and the BackOffice logo are trademarks of Microsoft Corporation. 0696 Part No. 0xx-xxxxx Printed in the United States of America.  Revisions Created by Jim Yagelowich (JimY); March 28, 2000.  TOC \o "1-3"  OvervieW & Schedule  PAGEREF _Toc472147451 \h  Networking Scenarios  PAGEREF _Toc472147452 \h  Possible Scenarios List  PAGEREF _Toc472147453 \h  Other? Wideband/LAN Testing Overview Functional Testing 3.2.1 Functional  Tests Stress Testing Narrowband/Modem Testing Overview Functional Testing 4.2.1 Running  Tests Stress Testing Overview & Schedule This document is written to provide information as to how the   networking feature of the Xbox console will be tested.  This document will cover basic networking functionality   namely testing of the broadband LAN adaptor, the narrowband USB-based modem interface, and the TCP/IP stack and related protocols.   This document will not cover  Online  components of the Xbox, such as modem dialup lists, Instant Messaging, or DirectPlay.  networking components for the Xbox consists of: Broadband: LAN Adaptor: (E100BNT5.SYS) The miniport driver NDIS 5.0: (NDIS.SYS) Wrapper for generic interfaces to the LAN adaptor TDI interface: (TDI.SYS)  (we might collapse this since it may not be needed) Narrowband: Modem Kernel support: (USBSER.SYS, MODEM.SYS, ASYNCMAC.SYS, WANARP.SYS, NDISWAN.SYS) kernel mode modem support Modem User support: (TAPI.DLL, TAPISRV.DLL, KMDDSP.TSP, NDSITAPI.SYS, RASMAN.DLL [PPP protocol], RASAPI.DLL) user mode modem support TCP/IP Stack and Protocols:  TCP/IP stack (TCPIP.SYS) Support for TCP, IP, UDP, ARP, ICMP (ping), IGMP (multicast) protocols Winsock2 Kernel: (AFD.SYS) Kernel mode Winsock. Winsock2 User: (WS2_32.DLL, WS2HELP.DLL, WSOCK32.DLL, MSAFD.DLL WSHTCPIP.DLL) User mode Winsock. DHCP client: (DHCPCSVC.DLL) For receiving IP addresses assignments from a DHCP server DNS client: (DNSRSLVR.DLL) For resolving   HYPERLINK "http://www.foo.com"  www.foo.com  to get it s IP address Web/WININET interfaces (WININET, URLMON, SCHANNEL? CRYPT32, SECURE32)? Remote NDIS: (RNDIS.SYS) ?? All components will be tested using  Functional  and  Stress  conditions using the same common harness used by other members of the Xbox OS Test Team. Here is the original schedule of the Xbox OS, relating to networking, dated Feb 28, 2000. Here is the current schedule of the Xbox OS, relating to networking, dated ??? ??, 2001. s the list of tools used by the Windows 2000 team to test various areas: TCP/IP, UDP, kelken, sandeep, ARP, ICMP, IGMP, kelken, sandeep, Ndis, timothyw, JamesB, HAPI (convert to vbscript) EB100t.sys timothyw, JamesB, HAPI (convert to vbscript) timothyw, vbscript TAPI, timothyw, vbscript Winsock DavidCat, JoryP HAPI, C tools Dhcp Client Service ElenaAp UsbSer.sys, modem.sys JamesB Asyncmac, wanarp, ndiswan TonyLe Tapi/Rasman/RasApi SudheerD DNS Client Wininet Networking Scenarios  Possible Scenarios List These are the scenarios under which the Xbox connectivity will have to operate and be tested. Broadband/LAN: Cable Modem and DSL connections. Null LAN Cable (a direct-connect/crossover LAN connector) Isolated home LAN with no DHCP server Isolated home LAN with a DHCP server Up-linked LAN, the ISP provides only 1 static IP address to the home site Up-linked LAN, the ISP provides multiple static IP address to the home site Up-linked LAN, the ISP provides a DHCP server LAN with and without a firewall/proxy servers LAN with a Network Address Translator (NAT) (tbd) Plugging into a PC running Internet Connection Sharing?  Can multiple XBoxes connect via a USB hub and thus through the PC? (tbd) RNDIS (Remote NDIS)?  Narrowband/Modem: Will support PPP protocol (tbd) Will not support SLIP, or PPTP, or VPN. Modem will be a 56.6 Kbps modem, but often times connections are made at only 28.8 Kbps (or slower). Will have it s own custom UI for ISP/Dialup support.  Will not support Dialup Networking logon and MSN logon. (tbd) Will need to support multiple ISPs, or even the same ISP with multiple dialup numbers. Will not support proprietary logons such as AOL, others like Prodigy? Protocols and Services: The LAN controller will be Ethernet (maybe not if we need to support wireless??). Will support TCP/IP (v4) Will support UDP/IP Will support client-side DHCP for receiving dynamic IP addresses   Will support SSL (secure sockets) for online shopping or encrypting of password for logons to remote on-line services? (tbd) Will support Winsock (it s usermode)?   (tbd) Will support DNS name resolution (client side)? (tbd) Will not support ARP, RARP Will support ICMP/PING, IGMP (group/multicasting)? Will support NDIS. Will support the following proxies: HTTP, Secure HTTP (HTTPS), FTP  (will not support Socks proxy?) (tbd) Needs to support IPSec ???  (probably not, we don t care about refusing DenialOfService attacks to the console.) (tbd) Do we need to support 802.1p  (TCP/IP QoS, RSVP, RGMP) protocols?  Is there any issue of 10 Mbit vs 100 Mbit support for this? Wideband/LAN Testing Overview The test harness consists of a process that runs on the Xbox test machine that loads test DLLs.  The test DLLs are executed in threads managed by the test harness and the DLLs log results (to a text file stored on the Xbox, or through OutputDebugString() statements to be captured using NTSD, or to a network location).  Another tool is then used to summarize the log files and then automatically posts the results to a web page which tracks the build number the test was ran on and the pass/fail/investigate status of the results and a link to the log files containing the results. The tool used to parse the logged output will verify that the output data is of the correct version before coalescing the data into a summary report.  This will allow us to update our log output as needed, or even to create custom logging modules, if needed.  (do we need this?) Writing Your Tests The tests you create will be DLLs that run within the test harness engine.  Your DLLs will need to provide specific test functions, but common test tool functions (such as logging) will be contained in a global library, which your DLL must load and use.  To get started quickly there is a sample DLL you can use a template in the directory \Xbox\private\tools\<harness_name>\SampleDLL of the SLM enlistment on your dev machine. Functional  Tests A full functional test run of the entire IIS test suite will be ran against DataCenter to ensure general functionality. Lab Stress Lab stress will be run to ensure DataCenter survives heavy-loads to a sustained period of time without failure. Ship Criteria (based on Win2000 opinion) is to survive: Beta (March 15, 2000), 21 days of long haul RTM (June 30, 2000), 28 days of long haul There are 4 types of machines that need to survive long haul: Single big box (8 proc, 8 GB RAM) 4-node cluster (specific 4 node enabled machines) 2-node cluster (can be any 2 machines) Regular server-class box (single/dual proc with 512 KB RAM) Office Stress Nightly office stress, how many machines/cyberbricks are required?  50 machines per night with 92% pass rate? CPU Scale-Testing Previously, Windows 2000 supported scaling to 8 CPUs.  DataCenter will support 16 CPUs (possibly 32 CPUs by OEMs).  Tests will be performed to ensure IIS makes proper use of 8 CPU and 16 CPU configurations with the expectations that increased client load can be handled (assuming no hardware bottleneck such as network I/O or disk I/O) when moved from 8 CPU to 16 CPU configuration.  All CPUs should be pushed to 100% CPU usage. RAM Scale-Testing Previously, Windows 2000 supported up to 8 GB of RAM.  DataCenter will support 16 GB (possibly 32 GB) of RAM.  Tests will be performed to ensure IIS makes proper use of 8 GB and 16 GB of RAM configurations with the expectations that increased client load can be handled (assuming no hardware bottleneck such as network I/O or disk I/O) when moved from 8 GB to 16 GB of RAM.   IIS should demonstrate that it benefits from increases in RAM because IIS will have access to a larger (in-memory) cache.    Note, we think we ll have an issue about IIS tsunami cache being restricted to a 4 GB max! Narrowband/Modem Testing Overview There will be 2 basics type of testing for this: Functional (aka  API level ) testing Stress testing Functional Testing To set up a PC-based Xbox, you should read Section 4.2 ( Setting Up Your Xbox Target Machine ) in the    HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\public\\idw\\xcomer.doc"  Xbox Newcomer Orientation  document. Briefly, these are the steps: Make your Xbox PC dual bootable with 2 partitions.  Put Windows98 on C: and  Win2000 Professional on D: Boot into Windows 2000 Professional and tweak some settings (MUST do this before installing the Xbox OS). Make a backup of the Windows 2000 Professional files. Modify your C:\BOOT.INI file so that your Windows 2000 Professional boot entry will appear as the Xbox boot entry (and enable /DEBUG). Boot into your Windows 98 partition. Copy the Xbox OS files to your Windows 2000 Professional installation directory/partition. Reboot your machine into the Xbox OS boot entry!  At this point you should have a machine that is Dual Bootable between  Windows 98  (C: drive) and  Xbox OS  (D: drive). Running Tests During  Step 6  (Section 4.2 of this document), you can also copy the test harness binaries and the test DLLs.  When your Xbox OS boots the test harness will automatically run.  When the harness runs it will load information from an .INI file which tells it which test DLLs should be loaded and executed.  Setting Up a Console-Based XBox To set up a Console-based Xbox    tbd. PAGE   Microsoft Confidential Page  PAGE   Microsoft Confidential Page   PAGE  Microsoft Confidential  Page  PAGE   Microsoft Confidential  Page  PAGE   Microsoft Confidential Page   PAGE  xkxeZeLZe
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\mmtestplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Memory Manager Test Plan Title _PID_HLINKSMemory Manager Test Plan Sakphong Chanbai Normal.dot Sakphong Chanbai Microsoft Word 9.0bjbjj8j8 Memory Manager Test Plan Author:   AUTHOR  \* MERGEFORMAT  Sakphong Chanbai Last changed:   SAVEDATE  \* MERGEFORMAT  5/5/2000 1:28 AM  LASTSAVEDBY  \* MERGEFORMAT  Sakphong Chanbai  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test   HYPERLINK "mailto:schanbai@xbox.com"  schanbai@xbox.com  HYPERLINK "mailto:tracysh@xbox.com"  tracysh@xbox.com  HYPERLINK "mailto:cameronf@xbox.com"  cameronf@xbox.com  HYPERLINK "mailto:karencs@xbox.com"  karencs@xbox.com Usability   HYPERLINK "mailto:tombro@xbox.com"  tombro@xbox.com International  Test scenarios Fault handling   to make sure that all kind of faults and exceptions are handled appropriately for every memory regions and IRQL levels Interactions with file system drivers Virtual memory APIs Cache manager (incidental to file system testing) Heap allocation APIs Kernel pool allocation APIs Spec reviews The following are original Windows NT specs regarding memory management  HYPERLINK "\\\\xbox\\specs\\test\\nt\\cache.doc"  \\xbox\specs\test\nt\cache.doc  HYPERLINK "\\\\xbox\\specs\\test\\nt\\vm.doc"  \\xbox\specs\test\nt\vm.doc  HYPERLINK "\\\\xbox\\specs\\test\\nt\\vmdesign.doc"  \\xbox\specs\test\nt\vmdesign.doc Relevant specification for Xbox is available from  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\XBox OS specification.doc"  \\xbox\specs\pm\CoreOS\XBox OS specification.doc Tools needed We need the following tools for various areas of testing. Some of these tools need to be modified for Xbox Performance testing   we will have a special version of   HYPERLINK "http://msrweb/pprc/performance/IceCAP/"  IceCAP  for Xbox from   HYPERLINK "http://msrweb/pprc/"   to measure performance of memory manager. Code coverage   IceCAP will be used to measure the code coverage. The goal is to cover at least 80% of memory manager code. Special fault injection technique will be used to achieve this number Fault Injection   HYPERLINK "http://msrweb/pprc/reliability/Injector/"  Injector  will be used to inject faults for some code paths that hard to cover Static analysis -  HYPERLINK "http://msrweb/pprc/reliability/prefix/" PREfix , TYPO.PL, and PC-Lint will be used regularly  Leak testing   this will be done through a combination of running the tests, measuring, and repeat. See  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\test\\docs\\leaks.doc" leaks.doc  for more information on leak testing. Corruption testing   this will be done using the driver verifier and fault injector Hardware needed For the beginning, a regular PC will be enough. After that we will need real Xbox machine to measure real performance. We also need at least 3-5 target machines in lab to run long-haul stress for leak and corruption testing. Test methods Test code What needs to be written? Test specific to Win32 memory allocation/de-allocation APIs (VirtualAlloc/VirtualFree, HeapAlloc/HeapFree, LocalAlloc/GlobalAlloc, etc) Page protection (PAGE_GUARD, PAGE_READWRITE, etc) What can be borrowed/adapted? Under   HYPERLINK "\\\\Index1\\src\\newnt\\base\\testsrc\\kernel\\mm"  \\Index1\src\newnt\base\testsrc\kernel\mm , there are some tools we could use abuseval - guard page testing beta - multi-threaded memory manager APIs test glmem - global/local memory stress kmode\kernelapistest\driver - NT kernel mode Mm APIs stress test mapflag - virtual memory APIs test memfile - memory manager APIs (including file I/O) testing movecopy   simple memory move/copy/fill testing newapi.10a   various memory APIs test/stress race   race condition testing timings   performance testing topdown   section testing viralloc   virtual memory APIs testing virtex   VirtualQuery/VirtualProtect testing vmstress   stress test for virtual memory manager witness   virtual memory stress What support code do we need, and who is responsible for providing it? Can your code go into a stress test? Manual tests Configuration tests There is no specific configuration for memory manager testing. Xbox ships with fix size 64MB RAM. Code reviews How often? We will do code review after a check-in for changed code and at least one time for all code before we ship. Which Dev/PM will attend? If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough  Watch all the tested code in the debugger, it will help to learn how things work and write better tests Security What impact on security does this feature have? How can this be used to break our security? There is no protection whatsoever in memory manager. Title could allocate page in memory, download and copy malicious code from DVD, and jump to run from there. This issue is beyond the scope of this test plan and will be address in certification plan How can this be improved to enhance our security? There is no way to do this without sacrificing performance of the box Performance testing Measures performance of memory allocation/de-allocation under various conditions like normal and low memory scenario Cache hit/miss under various memory conditions, number of threads accessing cache section Measures how pool/heap fragmentation affect performance of memory and cache manager How will you measure performance? IceCAP will be used, also if necessary we might have to write small tools to analyze performance data from log files Catastrophic failure testing We will use fault injection technique to simulate I/O error to make sure that cache manager works as expected under this error condition. Interfaces with other components File system and file cache   File system depends upon memory manager to help cache file stream data. Separated test plan for file system will address file cache testing. However underlying section object, used to implement file cache, will be tested to ensure the stability and quality of the file cache Threads stack   memory manager manages the stack frames allocated to all threads executing in the system. In Windows 2000, kernel stack size is three 4K pages and is not expandable. For Xbox, all threads run in kernel mode, we have to make sure that stack for XAPI threads is not limited by 12K, even through it won t be able to expand dynamically Localization impact There is no localization required for memory manager. Test variations Accessibility through memory manager APIs Allocate, reserve, and de-allocation virtual memory using virtual memory APIs (VirtualAlloc, VirtualFree, etc) Query and change page attributes of virtual memory using VirtualProtect, VirtualQuery, etc Allocate and free local memory using global/local memory APIs (GlobalAlloc, LocalAlloc, GlobalFree, LocalFree, etc) Create, allocate, and free heap using heap allocation/de-allocation APIs (HeapAlloc, HeapCreate, HeapFree, etc) Read/write to guard page for first and second time Mutual exclusion heaps access in multi-threaded environment Kernel pool allocation (ExAllocatePool, ExAllocatePoolWithTag, ExFreePool, ExFreePoolWithTag, etc.) MDL creation, driver allocation using Mm APIs Automated APIs test Good/bad parameter testing (badman) for all memory manager APIs Stress testing under normal and low memory condition to find memory leak and corruption Verifier and fault injection Accessibility through memory manager APIs under driver verifier enabled Automated APIs testing under driver verifier enabled Test complete criteria All of the above scenarios must be covered for memory manager to be declared  test complete Release criteria Which of these tests need to pass to ship? All of them, if necessary, with exceptions agreed by war team Which failures can we live with on this feature? None, this is core feature How do we know when your tests say, "this feature is ready to ship"? When they all pass with exceptions as noted above Note: System Address Space Layout As of 4/27/2000, this is the system address space layout based on new memory manager code (mmx). Range Content 00000000   0000FFFF Guard   No Access 00010000 - 7FFEFFFF Managed by virtual memory APIs (VirtualAlloc, VirtualFree, etc.) 7FFF0000 - 7FFFFFFF Unused   No Access (64K guard) 80000000 - 9FFFFFFF Cache view of lower 512M of physical memory, pool allocations for pool size < page size, system code (NTOSKRNL, HAL, boot drivers). First 4M is mapped using a large page PTE A0000000 - BFFFFFFF Unused   No Access (might be used by video in the future) C0000000 - C03FFFFF Page Tables and Page Directory. Page Directory is 4K in size at C0300000 C0400000 - C07FFFFF System Cache C0800000 - CFFFFFFF Unused D0000000 - EFFFFFFF System PTEs, pool allocations for pool size > page size, stacks, loaded images F0000000 - FFBFFFFF Unused FFC00000 - FFFFFFFF HAL usage Revision History
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\netsync.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Internal Logging Specification TitleLogging Specification Steven Kehrli Normal.dot Steven Kehrli Microsoft Word 9.0`0'+8J zY_NF {zOsHUDhH;ac ,D"T% b~^tI 93|o@ #O=qS da[{p 7zkz_ {ur~=_~ XML]E m-YcT U<aiQ\ Qk(W: "Y+6ls$ acayeJ$2 !8Uy8 X]hTG ww]cH ;vmgT Q(U4~<@ RT7"8 r|J5\ lA(<K1:: [vE89 6]MTI 7Y)QwT {5t20K7 ]\7)} ^:"J2 0=TOi,a 9U1O+U r&T%PK Y[LTG }pp]3 E\m"R' zeHgi [B&Ny. h#/M0 i lo%kj GRY!I ctrD!LW` _l>).|R,| ?.F{I yG|`  Siso" Vc4jj 1PI,4 t*4EW ,[0kF| zqvv6 O.Y1\ /Y-^<iz _@e36 g-mXfc 0<\<9 %b0K< VMh\U (".J( Bxk8J .ssP<Microsoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6Pages Masters Page-1 _VPID_PREVIEWS _VPID_ALTERNATENAMES _PID_LINKBASEstevekeVisio (TM) Drawing Arial Wingdz onotype  S?ymbol L/^&9 7AOY@;P P:?-\ tKf2| BOTOfOxO W?i?{4Lz $YkU1 $q"$q >q">q 2eqeqZ ?-??= 5/G/Y/ j?|?~/ rpl/YDE@a1LO _(_:_ ///A/S/e/w/ ?$?6?H?Z?l?~? O"O4OFOXOjO|O _ 0_B_T_f_ 9oKo]o I/[/m/ ?.?@?R?d?v? 2ODOVO !_3_E_W_i_{_ Ao}x^oK d-prn-15 \CORP012 6 USA/RE 9/K/]/o/ ?#?5?G7 winspo \\red -prn-15\ CORP0126  USA/RED /FLOOR1/ NEAR 125 NPIBA6 001:RAW Generi c box wi th text  and conn ection p oints. C an be st retched  y dimwens `7Copyri ght 1999  Visio C orporati on.  All "s rese rved.  _SBl .chm!#22 M1^%Y? P5!C:4" 5'qU@/R/d/ hine 1 O`,O>OPObOtC _'_9^ Sessio n Thread rveru T"55O 4=oo/ao NetsyncS topFunct inside  the DLL Dru*?<?N? rw8OJO Mac?hine 2| ?Client Guide TheDoc Page-1 ure Form Block Normal Visio 10 Block Shadow Visio 12 k Highl Visio 11 Connector Visio 90 Connecto ector Ar Visio 00 Visio 01 Visio 02 Visio 03 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Box.34 Box.35 Box.33 Box.37 Box.38 Box.39 7*L3 U 7*\3  7*l3 U 7*|3  @(= YMicrosoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6Pages Masters Page-1 Single arrowhead _VPID_PREVIEWS _VPID_ALTERNATENAMES _PID_LINKBASEstevekeVisio (TM) Drawing Arial Wingdz onotype  S?ymbol L/^&9 7AOY@;P P:?-\ tKf2| BOTOfOxO W?i?{4Lz $YkU1 $q"$q >q">q 2eqeqZ ?-??= 5/G/Y/ j?|?~/ rpl/YDE@a1LO _(_:_ ///A/S/e/w/ ?$?6?H?Z?l?~? O"O4OFOXOjO|O _ 0_B_T_f_ 9oKo]o I/[/m/ ?.?@?R?d?v? 2ODOVO !_3_E_W_i_{_ Ao}x^oK d-prn-15 \CORP012 6 USA/RE 9/K/]/o/ ?#?5?G7 winspo \\red -prn-15\ CORP0126  USA/RED /FLOOR1/ NEAR 125 NPIBA6 001:RAW Generi c box wi th text  and conn ection p oints. C an be st retched  y dimwens `7Copyri ght 1999  Visio C orporati on.  All "s rese rved.  _SBl .chm!#22 M1^%Y? Arrow  of varia ble dire ction. heads  through : both e nds; one rol_ hand *@B#H 8$a6b T189% d"(P# `Qps-8R `7Copyr ight 199 9 Visio  Corporat ion.  Al bs res erved. l.chm!#2  Direc row poin^,`in bK to the l eft7` e'c7` +v+r8 s"v!r Resize x!H.5`/r# Machin O-O?OQOcOuO _$_6_H_Z^ o%o^o Session  Thread EoS/d etsyncCa llbackFu ide the  DLL!2 ]?o?R achine 2 O,O>J ?Client Guide TheDoc Page-1 ure Form Block Normal Visio 10 Block Shadow Visio 12 k Highl Visio 11 Connector Visio 90 Connecto ector Ar Visio 00 Visio 01 Visio 02 Visio 03 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Box.7 le arrow ControlX Box.1 Box.2 Box.3 Box.5 Box.6 3 w7*L3 {7*\ 7*,A0 J7*dA0 7*U|A0 wJ|=@ J=@"wKc P8+Z\ PB+Zl* PL+Z|Microsoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6Pages Masters Page-1 Single arrowhead _VPID_PREVIEWS _VPID_ALTERNATENAMES _PID_LINKBASEstevekeVisio (TM) Drawing Arial Wingdz onotype  S?ymbol L/^&9 7AOY@;P P:?-\ tKf2| BOTOfOxO W?i?{4Lz $YkU1 $q"$q >q">q 2eqeqZ ?-??= 5/G/Y/ j?|?~/ rpl/YDE@a1LO _(_:_ ///A/S/e/w/ ?$?6?H?Z?l?~? O"O4OFOXOjO|O _ 0_B_T_f_ 9oKo]o I/[/m/ ?.?@?R?d?v? 2ODOVO !_3_E_W_i_{_ Ao}x^oK d-prn-15 \CORP012 6 USA/RE 9/K/]/o/ ?#?5?G7 winspo \\red -prn-15\ CORP0126  USA/RED /FLOOR1/ NEAR 125 NPIBA6 001:RAW Generi c box wi th text  and conn ection p oints. C an be st retched  y dimwens `7Copyri ght 1999  Visio C orporati on.  All "s rese rved.  _SBl .chm!#22 M1^%Y? Arrow  of varia ble dire ction. heads  through : both e nds; one rol_ hand *@B#H 8$a6b T189% d"(P# `Qps-8R `7Copyr ight 199 9 Visio  Corporat ion.  Al bs res erved. l.chm!#2  Direc row poin^,`in bK to the l eft7` e'c7` +v+r8 s"v!r Resize P5!,[4 p!.3< x!.5`/Rr# Machine  -O?OQOcOuO _$_6_H_Z^ Session  Thread EoS/d tsync ide the  DLL-2 ]?o?R achine 2 O,O>J ?Client T~a=1 Guide TheDoc Page-1 ure Form Block Normal Visio 10 Block Shadow Visio 12 k Highl Visio 11 Connector Visio 90 Connecto ector Ar Visio 00 Visio 01 Visio 02 Visio 03 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Box.19 Box.20 Box.21 Box.23 Box.29 Box.30 le arrow ControlX 3 i7* 3 q7*T3 u7*d 3 y7*t3 }7* @F>AJ @UNAJT @RAJ4 @^JAJ @fAF* Ce!wTFUMicrosoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6Pages Masters Page-1 _VPID_PREVIEWS _VPID_ALTERNATENAMES _PID_LINKBASEstevekeVisio (TM) Drawing Arial Wingdz onotype  S?ymbol L/^&9 7AOY@;P P:?-\ tKf2| BOTOfOxO W?i?{4Lz $YkU1 $q"$q >q">q 2eqeqZ ?-??= 5/G/Y/ j?|?~/ rpl/YDE@a1LO _(_:_ ///A/S/e/w/ ?$?6?H?Z?l?~? O"O4OFOXOjO|O _ 0_B_T_f_ 9oKo]o I/[/m/ ?.?@?R?d?v? 2ODOVO !_3_E_W_i_{_ Ao}x^oK d-prn-15 \CORP012 6 USA/RE 9/K/]/o/ ?#?5?G7 winspo \\red -prn-15\ CORP0126  USA/RED /FLOOR1/ NEAR 125 NPIBA6 001:RAW Generi c box wi th text  and conn ection p oints. C an be st retched  y dimwens `7Copyri ght 1999  Visio C orporati on.  All "s rese rved.  _SBl .chm!#22 M1^%Y? Dq15! p!X#< 5'U8@/R/d/ ine 1 O0OBO _'_9^ Sessi on Threa 4=oo/ao NetsyncS tartFunc insid e the DL H*?<?N? I:OLO Mac?hine 2| ?Client Guide TheDoc Page-1 ure Form Block Normal Visio 10 Block Shadow Visio 12 k Highl Visio 11 Connector Visio 90 Connecto ector Ar Visio 00 Visio 01 Visio 02 Visio 03 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Box.7 Box.1 Box.2 Box.3 Box.5 Box.6 7*T3  7*t3  @U`+Zt Ce!wTFU FI"Tg <Microsoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6Pages Masters Page-1 Single arrowhead _VPID_PREVIEWS _VPID_ALTERNATENAMES _PID_LINKBASEstevekeVisio (TM) Drawing Arial Wingdz onotype  S?ymbol L/^&9 7AOY@;P P:?-\ tKf2| BOTOfOxO W?i?{4Lz $YkU1 $q"$q >q">q 2eqeqZ ?-??= 5/G/Y/ j?|?~/ rpl/YDE@a1LO _(_:_ ///A/S/e/w/ ?$?6?H?Z?l?~? O"O4OFOXOjO|O _ 0_B_T_f_ 9oKo]o I/[/m/ ?.?@?R?d?v? 2ODOVO !_3_E_W_i_{_ Ao}x^oK d-prn-15 \CORP012 6 USA/RE 9/K/]/o/ ?#?5?G7 winspo \\red -prn-15\ CORP0126  USA/RED /FLOOR1/ NEAR 125 NPIBA6 001:RAW Generi c box wi th text  and conn ection p oints. C an be st retched  y dimwens `7Copyri ght 1999  Visio C orporati on.  All "s rese rved.  _SBl .chm!#22 M1^%Y? Arrow  of varia ble dire ction. heads  through : both e nds; one rol_ hand *@B#H 8$a6b T189% d"(P# `Qps-8R `7Copyr ight 199 9 Visio  Corporat ion.  Al bs res erved. l.chm!#2  Direc row poin^,`in bK to the l eft7` e'c7` +v+r8 s"v!r Resize P5!2:4 p!X#< 5'U8@/R/d/ ine 1 Op!"O4O FOXOjH _%_7_T erver Th readd Co?nnect  fw151 OO=w1( 8fhl= 9o8/]o Ep\Ses sion Thr 5_G_YX Guide TheDoc Page-1 ure Form Block Normal Visio 10 Block Shadow Visio 12 k Highl Visio 11 Connector Visio 90 Connecto ector Ar Visio 00 Visio 01 Visio 02 Visio 03 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Box.25 Box.26 Box.27 Box.28 le arrow ControlX Box.34 le arrow head.31 7*\3  :4+@U EL+@. @nTAKMicrosoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6Pages Masters Page-1 Single arrowhead _VPID_PREVIEWS _VPID_ALTERNATENAMES _PID_LINKBASEstevekeVisio (TM) Drawing Arial Wingdz onotype  S?ymbol L/^&9 7AOY@;P P:?-\ tKf2| BOTOfOxO W?i?{4Lz $YkU1 $q"$q >q">q 2eqeqZ ?-??= 5/G/Y/ j?|?~/ rpl/YDE@a1LO _(_:_ ///A/S/e/w/ ?$?6?H?Z?l?~? O"O4OFOXOjO|O _ 0_B_T_f_ 9oKo]o I/[/m/ ?.?@?R?d?v? 2ODOVO !_3_E_W_i_{_ Ao}x^oK d-prn-15 \CORP012 6 USA/RE 9/K/]/o/ ?#?5?G7 winspo \\red -prn-15\ CORP0126  USA/RED /FLOOR1/ NEAR 125 NPIBA6 001:RAW Generi c box wi th text  and conn ection p oints. C an be st retched  y dimwens `7Copyri ght 1999  Visio C orporati on.  All "s rese rved.  _SBl .chm!#22 M1^%Y? Arrow  of varia ble dire ction. heads  through : both e nds; one rol_ hand *@B#H 8$a6b T189% d"(P# `Qps-8R `7Copyr ight 199 9 Visio  Corporat ion.  Al bs res erved. l.chm!#2  Direc row poin^,`in bK to the l eft7` e'c7` +v+r8 s"v!r Resize 'p!|(5!* 5`/3# 2jX%Go qQrg~FuF {6vcF? chine 1 O%O7OIH Server ?ThreadC cFuFuFcF k`P@7 1\1;1 _1_C_ Guide TheDoc Page-1 ure Form Block Normal Visio 10 Block Shadow Visio 12 k Highl Visio 11 Connector Visio 90 Connecto ector Ar Visio 00 Visio 01 Visio 02 Visio 03 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Box.27 Box.28 le arrow ControlX Box.1 Box.2 le arrow head.31Microsoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6Pages Masters Page-1 _VPID_PREVIEWS _VPID_ALTERNATENAMES _PID_LINKBASEstevekeVisio (TM) Drawing Arial Wingdz onotype  S?ymbol L/^&9 7AOY@;P P:?-\ tKf2| BOTOfOxO W?i?{4Lz $YkU1 $q"$q >q">q 2eqeqZ ?-??= 5/G/Y/ j?|?~/ rpl/YDE@a1LO _(_:_ ///A/S/e/w/ ?$?6?H?Z?l?~? O"O4OFOXOjO|O _ 0_B_T_f_ 9oKo]o I/[/m/ ?.?@?R?d?v? 2ODOVO !_3_E_W_i_{_ Ao}x^oK d-prn-15 \CORP012 6 USA/RE 9/K/]/o/ ?#?5?G7 winspo \\red -prn-15\ CORP0126  USA/RED /FLOOR1/ NEAR 125 NPIBA6 001:RAW Generi c box wi th text  and conn ection p oints. C an be st retched  y dimwens `7Copyri ght 1999  Visio C orporati on.  All "s rese rved.  _SBl .chm!#22 M1^%Y? <h:#< l2$C10q U@!@! _}Zq^ h1,:' Machin #BG}& UG?U( %O7OIO[OvO wServe r Thread _ _VoD_V_ oJh2oDo Guide TheDoc Page-1 ure Form Block Normal Visio 10 Block Shadow Visio 12 k Highl Visio 11 Connector Visio 90 Connecto ector Ar Visio 00 Visio 01 Visio 02 Visio 03 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Box.1 Box.2 E Y7*,E ]7*< E a7*LE e7*t E i7*\E m7* E q7* E u7* E y7* E }7* m+RA0 7*dA0 7*|A0 m+=@IMicrosoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6Pages Masters Page-1 Single arrowhead _VPID_PREVIEWS _VPID_ALTERNATENAMES _PID_LINKBASEstevekeVisio (TM) Drawing Arial Wingdz onotype  S?ymbol L/^&9 7AOY@;P P:?-\ tKf2| BOTOfOxO W?i?{4Lz $YkU1 $q"$q >q">q 2eqeqZ ?-??= 5/G/Y/ j?|?~/ rpl/YDE@a1LO _(_:_ ///A/S/e/w/ ?$?6?H?Z?l?~? O"O4OFOXOjO|O _ 0_B_T_f_ 9oKo]o I/[/m/ ?.?@?R?d?v? 2ODOVO !_3_E_W_i_{_ Ao}x^oK d-prn-15 \CORP012 6 USA/RE 9/K/]/o/ ?#?5?G7 winspo \\red -prn-15\ CORP0126  USA/RED /FLOOR1/ NEAR 125 NPIBA6 001:RAW Generi c box wi th text  and conn ection p oints. C an be st retched  y dimwens `7Copyri ght 1999  Visio C orporati on.  All "s rese rved.  _SBl .chm!#22 M1^%Y? Arrow  of varia ble dire ction. heads  through : both e nds; one rol_ hand *@B#H 8$a6b T189% d"(P# `Qps-8R `7Copyr ight 199 9 Visio  Corporat ion.  Al bs res erved. l.chm!#2  Direc row poin^,`in bK to the l eft7` e'c7` +v+r8 s"v!r Resize P5!C:4 Dq1t! 5'U8@/R/d/ ine 1 O0OBO _%_7_T Sessi on Threa !(QIV _TI>`< Machi ne 21 lient >J_2\[ Guide TheDoc Page-1 ure Form Block Normal Visio 10 Block Shadow Visio 12 k Highl Visio 11 Connector Visio 90 Connecto ector Ar Visio 00 Visio 01 Visio 02 Visio 03 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 le arrow ControlX Box.34 Box.35 Box.33 Box.38 Box.39 7*\3  7*l3 U 7*|3 U :Ul+@" L+@Q<Microsoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6Pages Masters Page-1 _VPID_PREVIEWS _VPID_ALTERNATENAMES _PID_LINKBASEstevekeVisio (TM) Drawing Arial Wingdz onotype  S?ymbol L/^&9 7AOY@;P P:?-\ tKf2| BOTOfOxO W?i?{4Lz $YkU1 $q"$q >q">q 2eqeqZ ?-??= 5/G/Y/ j?|?~/ rpl/YDE@a1LO _(_:_ ///A/S/e/w/ ?$?6?H?Z?l?~? O"O4OFOXOjO|O _ 0_B_T_f_ 9oKo]o I/[/m/ ?.?@?R?d?v? 2ODOVO !_3_E_W_i_{_ Ao}x^oK d-prn-15 \CORP012 6 USA/RE 9/K/]/o/ ?#?5?G7 winspo \\red -prn-15\ CORP0126  USA/RED /FLOOR1/ NEAR 125 NPIBA6 001:RAW Generi c box wi th text  and conn ection p oints. C an be st retched  y dimwens `7Copyri ght 1999  Visio C orporati on.  All "s rese rved.  _SBl .chm!#22 M1^%Y? ?$?6?H? 5/G/Y/ 5`)Ha !$eV_ /Q0g<F3F Uc{*Fz Machi?ne 1 FOXOjO|O wServ er Threa #Qs5/_A_woe_w_ $o6okhSoeo Guide TheDoc Page-1 ure Form Block Normal Visio 10 Block Shadow Visio 12 k Highl Visio 11 Connector Visio 90 Connecto ector Ar Visio 00 Visio 01 Visio 02 Visio 03 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Box.35 Box.33 Box.38 )#7*D { '7*T{ +7*| { /7*d{ 37* { 77* { ;7* R{ ?[+{ C7* { K7* A0S7* $A0Wm+A0[7*\RA0_ +A0c7*tA0 +A0o$ +A0sI+A0wNetwork Synchronization Specification Author Steven Kehrli (steveke) Revision History 08/10/2000: Initial Spec 08/11/2000: Clarified clients and servers. 08/11/2000: Tweaked NetsyncCreateServer() and NetsyncCloseServer(). 11/16/2000: Complete rewrite. 05/05/2001: Changed enumeration and connection. 05/07/2001: Added NetsyncRemoveClientFromSession(). User Experience Machine1 calls NetsyncCreateServer().  This function starts the netsync server. Machine2 calls NetsyncEnumServers().  This function enumerates the available servers.  Each enumerated server is passed in a call to the NetsyncEnumCallback function specified in the function call. Machine2 calls NetsyncCreateClient().  This function creates the session client.  On the netsync server (Machine1), the session server is created. The session client (Machine2) may send messages to the session server (Machine1) or any other session client in the session (and vice versa), using NetsyncSendClientMessage(). The session client (Machine2) may receive client messages from the session server (Machine1) or any other session client in the session (and vice versa) using NetsyncReceiveClientMessage(). The session client (Machine2) may receive server messages from the netsync server (Machine1) using NetsyncReceiveServerMessage(). The session client (Machine2) may receive either type of message using NetsyncReceiveMessage(). Machine2 calls NetsyncCloseClient().  This function closes the session client. Machine1 calls NetsyncCloseServer().  This function stops all running sessions and the netsync server. NetsyncCreateServer( Starts the server.  This function is reference counted.  Each call to NetsyncCreateServer() must be matched by a call to NetsyncCloseServer(). Return Values If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.  To get extended error information, call GetLastError(). NetsyncCloseServer( Decrement the server reference count.  When the reference count reaches 0, the server is stopped. NetsyncRemoveClientFromSession(     IN HANDLE  hSessionObject,     IN HANDLE  hNetsyncObject,     IN u_long  ClientAddr Remove the specified client from the session. Parameters hSessionObject Handle to the session. hNetsyncObject Handle to the client object. ClientAddr Specifies the address of the client. NetsyncEnumServers(     IN DWORD                   dwSessionType,     IN LPVOID                  pSessionType,     IN PNETSYNC_ENUM_CALLBACK  pNetsyncEnumCallback,     IN LPVOID                  lpContext Enumerates the available servers. Parameters dwSessionType Specifies the session type.  It may be NETSYNC_SESSION_THREAD or NETSYNC_SESSION_CALLBACK.  See 3) Session Types for more information. pSessionType Pointer to the session information.  If dwSessionType is NETSYNC_SESSION_THREAD, pSessionType is treated as PNETSYNC_TYPE_THREAD.  If dwSessionType is NETSYNC_SESSION_CALLBACK, pSessionType is treated as PNETSYNC_TYPE_CALLBACK.  See 3) Session Types for more information. pNetsyncEnumCallback Pointer to a callback function: typedef BOOL (*PNETSYNC_ENUM_CALLBACK) (     IN u_long  ServerAddr,     IN BYTE    bySessionClientCount,     IN u_short nServerClientCount,     IN BYTE    bySessionCount,     IN LPVOID  lpContext Parameters ServerAddr Specifies the server address of the session. bySessionClientCount Specifies the number of clients in the session. nServerClientCount Specifies the number of clients on the server. bySessionCount Specifies the number of sessions on the server. lpContext Pointer to the context structure passed to NetsyncEnumServers. The callback function is called once for each enumerated session.  ServerAdd, bySessionClientCount, nServerClientCount, and bySessionCount will be specified. The callback function is also called once per second.  ServerAddr, bySessionClientCount, byServerClientCount, bySessionCount will be 0. The callback function should return TRUE to continue enumeration.  The callback function should return FALSE to stop enumeration. lpContext Pointer to a context buffer.  lpContext is passed to each call to pNetsyncEnumCallback. Return Values If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.  To get extended error information, call GetLastError(). NetsyncEnumCallback(     IN u_long  ServerAddr,     IN BYTE    bySessionClientCount,     IN u_short nServerClientCount,     IN BYTE    bySessionCount,     IN LPVOID  lpContext Generic enumeration callback function exposed by Netsync.  It returns the first session found. When using NetsyncEnumCallback, pass a pointer to a NETSYNC_ENUM_SETTINGS structure as lpContext during the NetsyncEnumServers() call: typedef struct _NETSYNC_ENUM_SETTINGS {     u_long  ServerAddr;     DWORD   dwTimeout; } NETSYNC_ENUM_SETTINGS, *PNETSYNC_ENUM_SETTINGS; Parameters ServerAddr Initialize to zero.  On return, it will specify the server address of the session, or 0 if no session was found. dwTimeout Specifies the enumeration timeout, in seconds.  A standard timeout would be 60 seconds. HANDLE NetsyncCreateClient(     IN  u_long   ServerAddr,     IN  DWORD    dwSessionType,     IN  LPVOID   pSessionType,     OUT u_short  *LowPort,     OUT u_short  *HighPort Creates a client and joins it to a session. Parameters ServerAddr Specifies the server address of the session. dwSessionType Specifies the session type.  It may be NETSYNC_SESSION_THREAD or NETSYNC_SESSION_CALLBACK.  See 3) Session Types for more information. pSessionType Pointer to the session information.  If dwSessionType is NETSYNC_SESSION_THREAD, pSessionType is treated as PNETSYNC_TYPE_THREAD.  If dwSessionType is NETSYNC_SESSION_CALLBACK, pSessionType is treated as PNETSYNC_TYPE_CALLBACK.  See 3) Session Types for more information. LowPort Pointer to a buffer to receive the low port reserved for the session. HighPort Pointer to a buffer to receive the high port reserved for the session. Return Values If the function succeeds, the return value is a valid handle.  If the function fails, the return value is ERROR_INVALID_HANDLE.  To get extended error information, call GetLastError(). NetsyncCloseClient(     IN HANDLE  hNetsyncObject Removes a client from the session and closes it. Parameters hNetsyncObject Handle to the client object. DWORD NetsyncSendClientMessage(     IN HANDLE  hNetsyncObject,     IN u_long  ToAddr,     IN DWORD   dwMessageSize,     IN char    *pMessage Sends a message to another client in the session. Parameters hNetsyncObject Handle to the client object. ToAddr Specifies the destination address.  Specify 0 to send the message to the server. dwMessageSize Specifies the size of the message buffer, in bytes. pMessage Pointer to the message buffer. Return Values If the function succeeds, the return value is WAIT_OBJECT_0.  If the function times out waiting for an ACK, the return value is WAIT_TIMEOUT.  If the function fails, the return value is WAIT_FAILED.  To get extended error information, call GetLastError(). DWORD NetsyncReceiveServerMessage(     IN  HANDLE  hNetsyncObject,     IN  DWORD   dwTimeout,     OUT u_long  *FromAddr,     OUT DWORD   &dwMessageSize,     OUT char *  *pMessage Receives a server message. Parameters hNetsyncObject Handle to the client object. dwTimeout Specifies the time-out internal, in milliseconds, to wait for a message. FromAddr Pointer to a buffer to receive the source address. dwMessageSize Pointer to a buffer to receive the size of the message buffer, in bytes. pMessage Address of the pointer to the message buffer. Return Values If the function succeeds, the return value is WAIT_OBJECT_0.  If the function times out waiting for an ACK, the return value is WAIT_TIMEOUT.  If the function fails, the return value is WAIT_FAILED.  To get extended error information, call GetLastError(). Remarks An application must call the NetsyncFreeMessage function to deallocate the message buffer. DWORD NetsyncReceiveClientMessage(     IN  HANDLE  hNetsyncObject,     IN  DWORD   dwTimeout,     OUT u_long  *FromAddr,     OUT DWORD   &dwMessageSize,     OUT char *  *pMessage Receives a client message. Parameters hNetsyncObject Handle to the client object. dwTimeout Specifies the time-out internal, in milliseconds, to wait for a message. FromAddr Pointer to a buffer to receive the source address. dwMessageSize Pointer to a buffer to receive the size of the message buffer, in bytes. pMessage Address of the pointer to the message buffer. Return Values If the function succeeds, the return value is WAIT_OBJECT_0.  If the function times out waiting for an ACK, the return value is WAIT_TIMEOUT.  If the function fails, the return value is WAIT_FAILED.  To get extended error information, call GetLastError(). Remarks An application must call the NetsyncFreeMessage function to deallocate the message buffer. DWORD NetsyncReceiveMessage(     IN  HANDLE  hNetsyncObject,     IN  DWORD   dwTimeout,     OUT u_long  *FromAddr,     OUT DWORD   &dwMessageType,     OUT DWORD   &dwMessageSize,     OUT char *  *pMessage Receives the first available server or client message. Parameters hNetsyncObject Handle to the client object. dwTimeout Specifies the time-out internal, in milliseconds, to wait for a message. FromAddr Pointer to a buffer to receive the source address. dwMessageType Pointer to a buffer to receive the message type.  It may be NETSYNC_MSGTYPE_SERVER or NETSYNC_MSGTYPE_CLIENT. dwMessageSize Pointer to a buffer to receive the size of the message buffer, in bytes. pMessage Address of the pointer to the message buffer. Return Values If the function succeeds, the return value is WAIT_OBJECT_0.  If the function times out waiting for an ACK, the return value is WAIT_TIMEOUT.  If the function fails, the return value is WAIT_FAILED.  To get extended error information, call GetLastError(). Remarks An application must call the NetsyncFreeMessage function to deallocate the message buffer. Session Types NETSYNC_TYPE_THREAD typedef struct _NETSYNC_TYPE_THREAD {     BYTE     byClientCount;     u_short  nMinPortCount;     LPWSTR   lpszDllName_W;     LPSTR    lpszMainFunction_A; } NETSYNC_TYPE_THREAD, *PNETSYNC_TYPE_THREAD; byClientCount Specifies the number of clients required to start a session.  This should be at least 1. nMinPortCount Specifies the minimum number of ports to reserve for the session. lpszDllName_W Pointer to a null-terminated string (UNICODE) that specifies the DLL to run the session. lpszMainFunction_A Pointer to a null-terminated string (ANSI) that specifies the function name to run the session.  See NetsyncThreadFunction. NetsyncThreadFunction NetsyncThreadFunction(   HANDLE   hNetsyncObject,   BYTE     byClientCount,   u_long   *ClientAddr,   u_short  LowPort,   u_short  HighPort Parameters hNetsyncObject Handle to the client object. byClientCount Specifies the number of clients in the session. ClientAddr Pointer to an array of client addresses. LowPort Pointer to a buffer to receive the low port reserved for the session. HighPort Pointer to a buffer to receive the high port reserved for the session. Remarks NetsyncThreadFunction is responsible for running the session.  It returns when the session is complete. NETSYNC_TYPE_CALLBACK typedef struct _NETSYNC_TYPE_CALLBACK {     BYTE     byMinClientCount;     BYTE     byMaxClientCount;     u_short  nMinPortCount;     LPWSTR   lpszDllName_W;     LPSTR    lpszMainFunction_A;     LPSTR    lpszStartFunction_A;     LPSTR    lpszStopFunction_A; } NETSYNC_TYPE_CALLBACK, *PNETSYNC_TYPE_CALLBACK; byMinClientCount Specifies the minimum number of clients required to start a session.  This should be at least 1.  byMaxClientCount Specifies the maximum number of clients supported by a session.  This should be at least byMinClientCount; if not, it is silently set to byMinClientCount. lpszDllName_W Pointer to a null-terminated string (UNICODE) that specifies the DLL to run the session. lpszMainFunction_A Pointer to a null-terminated string (ANSI) that specifies the function name to handle each received message.  See NetsyncCallbackFunction. lpszStartFunction_A Pointer to a null-terminated string (ANSI) that specifies the function name to call when starting the session.  See NetsyncStartFunction. lpszStopFunction_A Pointer to a null-terminated string (ANSI) that specifies the function name to call when stoping the session.  See NetsyncStopFunction. NetsyncCallbackFunction NetsyncCallbackFunction(   IN HANDLE  hNetsyncObject,   IN u_long  FromAddr,   IN DWORD   dwMessageType,   IN DWORD   dwMessageSize,   IN char    *pMessage,   IN LPVOID  lpContext hNetsyncObject Handle to the client object. FromAddr Specifies the source address of the message. dwMessageType Specifies the message type.  It may be NETSYNC_MSGTYPE_SERVER or NETSYNC_MSGTYPE_CLIENT. dwMessageSize Specifies the size of the message buffer, in bytes. pMessage Pointer to the message buffer. lpContext Pointer to the context buffer returned by NetsyncStartFunction(). Remarks The server is responsible for running the session.  The server is responsible for deallocating the message buffer.  NetsyncCallbackFunction is responsible for handling the message.  NetsyncCallbackFunction should return FALSE when the session is complete and no more messages should be received. NetsyncStartFunction LPVOID NetsyncStartFunction(   IN HANDLE   hNetsyncObject,   IN BYTE     byClientCount,   IN u_long   *ClientAddr,   IN u_short  LowPort,   IN u_short  HighPort hNetsyncObject Handle to the client object. byClientCount Specifies the number of clients in the session. ClientAddr Pointer to the array of client addresses. LowPort Specifies the low port reserved for the session. HighPort Specifies the high port reserved for the session. Remarks NetsyncStartFunction may return a pointer to a context buffer, lpContext.  This pointer is passed to NetsyncCallbackFunction() and NetsyncStopFunction(). NetsyncStopFunction NetsyncStopFunction(   IN HANDLE  hNetsyncObject,   IN LPVOID  lpContext hNetsyncObject Handle to the client object. lpContext Pointer to the context buffer returned by NetsyncStartFunction(). Remarks NetsyncStopFunction should free any resources used by the session, such as lpContext. Session Behavior When the server starts, it creates a server thread.  This server thread acts as a message pump, listening for enumeration and connection requests.  EMBED Visio.Drawing.6   A second machine broadcasts an enumeration request.  This request includes the desired session information.  If the server understands the session information (i.e. it can load the specified DLL and functions), it responds to the request.  EMBED Visio.Drawing.6   The second machine selects the desired server and sends the connect request.  The server creates the desired session, if necessary, and adds the client to the desired session.  When the session has the minimum number of clients, the server starts the session and responds to the client.  EMBED Visio.Drawing.6   If the session type is SESSION_CALLBACK, the session thread first calls the start function.  This function handles any initial setup of the session.  EMBED Visio.Drawing.6   If the session type is SESSION_THREAD, the session thread calls the thread function.  This function handles the session and returns when the session is complete.  EMBED Visio.Drawing.6   If the session type is SESSION_CALLBACK, the session thread then starts a receive message loop.  Each received message is passed to the message function.  This function returns FALSE when the session is complete.  EMBED Visio.Drawing.6   If the session type is SESSION_CALLBACK, the session thread calls the stop function.  This function handles any final teardown of the session.  EMBED Visio.Drawing.6   The session thread finally sends a message to each client in the session that the session has ended.  EMBED Visio.Drawing.6   The session thread ends and the client should close.  EMBED Visio.Drawing.6   Messages A session is free to define its own messages.  However, a message should conform to the following structure: typedef struct _NETSYNC_GENERIC_MESSAGE {     DWORD  dwMessageId; } NETSYNC_GENERIC_MESSAGE, *PNETSYNC_GENERIC_MESSAGE; That is, the first DWORD of the message buffer is the message id. Each session should be aware of the following message ids: NETSYNC_MSG_STOPSESSION NETSYNC_MSG_ADDCLIENT NETSYNC_MSG_DELETECLIENT NETSYNC_MSG_DUPLICATECLIENT NETSYNC_MSG_STOPSESSION is sent from the server to each session indicating the server is stopping.  The session should exit as quickly as possible. NETSYNC_MSG_ADDCLIENT is sent to the session indicating a client joined the session. If the session type is SESSION_THREAD, this message will not occur. If the session type is SESSION_CALLBACK, the client address is specified in the FromAddr parameter of the message function. NETSYNC_MSG_DELETECLIENT is sent to the session indicating a client left the session. If the session type is SESSION_THREAD, the client address is returned in the FromAddr parameter of the receive function. If the session type is SESSION_CALLBACK, the client address is specified in the FromAddr parameter of the message function. NETSYNC_MSG_DELETECLIENT is sent to the session indicating a client left the session. If the session type is SESSION_THREAD, the client address is returned in the FromAddr parameter of the receive function. If the session type is SESSION_CALLBACK, the client address is specified in the FromAddr parameter of the message function. NETSYNC_MSG_DUPLICATECLIENT is sent to the session indicating a client rejoined the session without first leaving the session. If the session type is SESSION_THREAD, this message will not occur. If the session type is SESSION_CALLBACK, the client address is specified in the FromAddr parameter of the message function. Each client should be aware of the following message ids: NETSYNC_MSG_STOPSESSION NETSYNC_MSG_STOPSESSION is sent from the session to each client indicating the session is stopping.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\recoverytest.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal.dot johndaly Microsoft Word 9.0System Update and Restore test plan Author: johndaly Last changed:   SAVEDATE \@ "M/d/yyyy" \* MERGEFORMAT  5/5/2000  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test  HYPERLINK "mailto:johndaly@microsoft.com" mailto:johndaly@microsoft.com  HYPERLINK "mailto:chrispi@microsoft.com"  mailto:chrispi@microsoft.com HYPERLINK "mailto:marcw@microsoft.com" mailto:marcw@microsoft.com  HYPERLINK "mailto:karencs@microsoft.com"  mailto:karencs@microsoft.com Usability   HYPERLINK "mailto:tombro@microsoft.com"  mailto:tombro@microsoft.com International  Test scenarios The feature allows for: Installation of new or old shell, we have to make sure that up/down/side grades work, and that all versions work with all shipping ROM kernels (hopefully there is only 1 Automatic detection of corruption, we have to make sure that works. In the following sections I used the word  damaged  to refer to a disk that has a problem detected by our software.  The types of problems our software will detect have not been specified yet. Reformatting data partition (on disk or memory unit) if corruption is detected, we have to make sure this works. Spec reviews  HYPERLINK "\\\\xbox\\specs\\pm\\coreos\\restore.doc"  \\xbox\specs\pm\coreos\restore.doc Is the spec sufficient to design, document, and test this feature? No, we need more reliability info so that we can make sure that our non-data-recoverable approach is the right thing, since it is a bad customer experience. There are other open issues in the spec, it does not seem to be complete at this time. Also, we need to define things like exactly what type of damage will the corruption detector detect? Corrupt FATs? Cross-linked files? We need to know this so we can make sure we can simulate all of them. Tools needed A tool to corrupt disks/MUs so we can test the corruption detection system would be very helpful. If we cannot find one we can easily write it. A tool / driver to read Xdisk format from a PC would also be helpful. Hardware needed What do you need immediately? - Nothing. What will you need further on down the road? - Xboxes and Xbox dev boxes, and MUs. What lab requirements do you have? - Enough space to accommodate Xboxes for every locale / region. Test methods Test code Aside from the tools we will need to simulate corruption, we ll probably also need image comparison tools so we can look at the image created by a recovery disk and compare it to a factory-fresh disk   we should be able to find a tool that does this. And a tool to verify that a newly-formatted partition is correctly formatted would be nice. Manual tests What are all the variations? Update Dashboard from recovery disk with good Dashboard and good data partition. Downgrade Dashboard from recovery disk with good Dashboard and good data partition. Sidegrade Dashboard from recovery disk with good Dashboard and good data partition. Update Dashboard from recovery disk on Xbox with damaged Dashboard and good data partition. Downgrade Dashboard from recovery disk on Xbox with damaged Dashboard and good data partition. Sidegrade Dashboard from recovery disk on Xbox with damaged Dashboard and good data partition. Update Dashboard from recovery disk with damaged Dashboard and damaged data partition. Downgrade Dashboard from recovery disk with damaged Dashboard and damaged data partition. Sidegrade Dashboard from recovery disk with damaged Dashboard and damaged data partition. Update Dashboard from recovery disk with good Dashboard and damaged data partition. Downgrade Dashboard from recovery disk with good Dashboard and damaged data partition. Sidegrade Dashboard from recovery disk with good Dashboard and damaged data partition. In all above scenarios, make sure everything (titles, network, shell, ROM kernel, etc) still works correctly by running all tests. What tools / equipment do you need for your variations? A way to make this work and testing go faster would be nice Configuration tests We will have to do all of the above tests with various sized hard drives to make sure everything will work together, for example if the year 5 hard drive is 20gb or whatever (someone needs to specify what the largest size we ll ever support is), we have to make sure an original recovery disk will still correctly recover the machine   we can have no errors here, or we ll start having version nightmares similar to DLL hell. Code reviews This code needs to be completely reviewed by the developer, PM, and tester assigned to this feature. Debug walkthrough  Watch all the tested code in the debugger. Are getting the coverage you think you are? It will help you learn how things work and write better tests. Security We need to make sure that the upgraded shell binaries are all correctly signed and that they boot.  In this respect they need to be checked like all other title binaries.  Performance testing This is not a performance critical item, although it should not take hideously long   that is up to usability, if they say it is too long then we will investigate. Catastrophic failure testing We need to make sure that the right thing happens when recovery fails. If the recovery disk detects an unrecoverable state, or preferably if the ROM detects this, we should tell the user this so that will quickly give up and exchange the unit rather than frustrating themselves for a long time with trying to get it going again. Interfaces with other components We need to ensure that any shell will work with any ROM kernel, the disks need to be forward and reverse compatible. We need to make sure that any shell will work with any recovered file system. We need to make sure that all upgrades can be down/side/up graded. Localization impact The recovery disks must recover to the language / region that the box was shipped as, so we need to make sure that the recovery disk can recover all languages, and that it does not change the region, install the incorrect shell, etc. Test variations The various permutations are enumerated above. They basically mean that we have to run all testing through each recovered configuration to make sure the box is exactly right   we cannot afford to have the boxes change in any way that will affect game functionality. All shell / Dashboard changes must have 0 impact on games, and the data recovery must work on all versions of hardware and software. So testing will basically go like this: Perform a recovery / upgrade as listed above. Run all of our tests on the machine. Do this on hardware that has a variety of disk sizes. If we have any other real variation on the boxes, other than disk size changes, we need to also take them into account. The tester who will be responsible for running these tests needs to build a matrix of the variations outlined in this document and run through all of them. We should also use a tool like  HYPERLINK "http://tactics/Default.asp" Tactics  to store the test cases and report the results to. We ll probably use a contractor for this testing after we have it all worked out, and it would be nice to already know all the test cases. Test complete criteria There is very little new test development that needs to happen. When all testing has been completed and we can t think of any other ways to test this Release criteria Which of these tests need to pass to ship? - When it passes all the tests. Which failures can we live with on this feature? - none really.   First, do no harm.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\rfc2516_pppoe.txt ===
Network Working Group                                        L. Mamakos
Request for Comments: 2516                                      K. Lidl
Category: Informational                                       J. Evarts
                                               UUNET Technologies, Inc.
                                                              D. Carrel
                                                              D. Simone
                                                 RedBack Networks, Inc.
                                                             R. Wheeler
                                                       RouterWare, Inc.
                                                          February 1999


          A Method for Transmitting PPP Over Ethernet (PPPoE)

Status of this Memo

   This memo provides information for the Internet community.  It does
   not specify an Internet standard of any kind.  Distribution of this
   memo is unlimited.

Copyright Notice

   Copyright (C) The Internet Society (1999).  All Rights Reserved.

Abstract

   The Point-to-Point Protocol (PPP) [1] provides a standard method for
   transporting multi-protocol datagrams over point-to-point links.

   This document describes how to build PPP sessions and encapsulate PPP
   packets over Ethernet.

Applicability

   This specification is intended to provide the facilities which are
   defined for PPP, such as the Link Control Protocol, Network-layer
   Control Protocols, authentication, and more.  These capabilities
   require a point-to-point relationship between the peers, and are not
   designed for the multi-point relationships which are available in
   Ethernet and other multi-access environments.

   This specification can be used by multiple hosts on a shared,
   Ethernet to open PPP sessions to multiple destinations via one or
   more bridging modems.  It is intended to be used with broadband
   remote access technologies that provide a bridged Ethernet topology,
   when access providers wish to maintain the session abstraction
   associated with PPP.




Mamakos, et. al.             Informational                      [Page 1]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


   This document describes the PPP Over Ethernet encapsulation that is
   being deployed by RedBack Networks, RouterWare, UUNET and others.

1. Introduction

   Modern access technologies are faced with several conflicting goals.
   It is desirable to connect multiple hosts at a remote site through
   the same customer premise access device.  It is also a goal to
   provide access control and billing functionality in a manner similar
   to dial-up services using PPP.  In many access technologies, the most
   cost effective method to attach multiple hosts to the customer
   premise access device, is via Ethernet.  In addition, it is desirable
   to keep the cost of this device as low as possible while requiring
   little or no configuration.

   PPP over Ethernet (PPPoE) provides the ability to connect a network
   of hosts over a simple bridging access device to a remote Access
   Concentrator.  With this model, each host utilizes it's own PPP stack
   and the user is presented with a familiar user interface.  Access
   control, billing and type of service can be done on a per-user,
   rather than a per-site, basis.

   To provide a point-to-point connection over Ethernet, each PPP
   session must learn the Ethernet address of the remote peer, as well
   as establish a unique session identifier.  PPPoE includes a discovery
   protocol that provides this.

2. Conventions

   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,
   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this
   document, are to be interpreted as described in [2].

3. Protocol Overview

   PPPoE has two distinct stages.  There is a Discovery stage and a PPP
   Session stage.  When a Host wishes to initiate a PPPoE session, it
   must first perform Discovery to identify the Ethernet MAC address of
   the peer and establish a PPPoE SESSION_ID.  While PPP defines a
   peer-to-peer relationship, Discovery is inherently a client-server
   relationship.  In the Discovery process, a Host (the client)
   discovers an Access Concentrator (the server).  Based on the network
   topology, there may be more than one Access Concentrator that the
   Host can communicate with.  The Discovery stage allows the Host to
   discover all Access Concentrators and then select one.  When
   Discovery completes successfully, both the Host and the selected
   Access Concentrator have the information they will use to build their
   point-to-point connection over Ethernet.



Mamakos, et. al.             Informational                      [Page 2]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


   The Discovery stage remains stateless until a PPP session is
   established.  Once a PPP session is established, both the Host and
   the Access Concentrator MUST allocate the resources for a PPP virtual
   interface.

4. Payloads

   The following packet formats are defined here.  The payload contents
   will be defined in the Discovery and PPP sections.

   An Ethernet frame is as follows:

                                       1
                   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                  |       DESTINATION_ADDR        |
                  |          (6 octets)           |
                  |                               |
                  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                  |         SOURCE_ADDR           |
                  |          (6 octets)           |
                  |                               |
                  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                  |    ETHER_TYPE  (2 octets)     |
                  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                  ~                               ~
                  ~           payload             ~
                  ~                               ~
                  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                  |           CHECKSUM            |
                  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The DESTINATION_ADDR field contains either a unicast Ethernet
   destination address, or the Ethernet broadcast address (0xffffffff).
   For Discovery packets, the value is either a unicast or broadcast
   address as defined in the Discovery section.  For PPP session
   traffic, this field MUST contain the peer's unicast address as
   determined from the Discovery stage.

   The SOURCE_ADDR field MUST contains the Ethernet MAC address of the
   source device.

   The ETHER_TYPE is set to either 0x8863 (Discovery Stage) or 0x8864
   (PPP Session Stage).







Mamakos, et. al.             Informational                      [Page 3]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


   The Ethernet payload for PPPoE is as follows:

                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  VER  | TYPE  |      CODE     |          SESSION_ID           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |            LENGTH             |           payload             ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The VER field is four bits and MUST be set to 0x1 for this version of
   the PPPoE specification.

   The TYPE field is four bits and MUST be set to 0x1 for this version
   of the PPPoE specification.

   The CODE field is eight bits and is defined below for the Discovery
   and PPP Session stages.

   The SESSION_ID field is sixteen bits.  It is an unsigned value in
   network byte order.  It's value is defined below for Discovery
   packets.  The value is fixed for a given PPP session and, in fact,
   defines a PPP session along with the Ethernet SOURCE_ADDR and
   DESTINATION_ADDR.  A value of 0xffff is reserved for future use and
   MUST NOT be used

   The LENGTH field is sixteen bits.  The value, in network byte order,
   indicates the length of the PPPoE payload.  It does not include the
   length of the Ethernet or PPPoE headers.

5. Discovery Stage

   There are four steps to the Discovery stage.  When it completes, both
   peers know the PPPoE SESSION_ID and the peer's Ethernet address,
   which together define the PPPoE session uniquely.  The steps consist
   of the Host broadcasting an Initiation packet, one or more Access
   Concentrators sending Offer packets, the Host sending a unicast
   Session Request packet and the selected Access Concentrator sending a
   Confirmation packet.  When the Host receives the Confirmation packet,
   it may proceed to the PPP Session Stage.  When the Access
   Concentrator sends the Confirmation packet, it may proceed to the PPP
   Session Stage.

   All Discovery Ethernet frames have the ETHER_TYPE field set to the
   value 0x8863.






Mamakos, et. al.             Informational                      [Page 4]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


   The PPPoE payload contains zero or more TAGs.  A TAG is a TLV (type-
   length-value) construct and is defined as follows:

                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          TAG_TYPE             |        TAG_LENGTH             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          TAG_VALUE ...                                        ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   TAG_TYPE is a sixteen bit field in network byte order.  Appendix A
   contains a list of all TAG_TYPEs and their TAG_VALUEs.

   TAG_LENGTH is a sixteen bit field.  It is an unsigned number in
   network byte order, indicating the length in octets of the TAG_VALUE.

   If a discovery packet is received with a TAG of unknown TAG_TYPE, the
   TAG MUST be ignored unless otherwise specified in this document.
   This provides for backwards compatibility if/when new TAGs are added.
   If new mandatory TAGs are added, the version number will be
   incremented.

   Some example Discovery packets are shown in Appendix B.

5.1 The PPPoE Active Discovery Initiation (PADI) packet

   The Host sends the PADI packet with the DESTINATION_ADDR set to the
   broadcast address.  The CODE field is set to 0x09 and the SESSION_ID
   MUST be set to 0x0000.

   The PADI packet MUST contain exactly one TAG of TAG_TYPE Service-
   Name, indicating the service the Host is requesting, and any number
   of other TAG types.  An entire PADI packet (including the PPPoE
   header) MUST NOT exceed 1484 octets so as to leave sufficient room
   for a relay agent to add a Relay-Session-Id TAG.

5.2 The PPPoE Active Discovery Offer (PADO) packet

   When the Access Concentrator receives a PADI that it can serve, it
   replies by sending a PADO packet.  The DESTINATION_ADDR is the
   unicast address of the Host that sent the PADI.  The CODE field is
   set to 0x07 and the SESSION_ID MUST be set to 0x0000.








Mamakos, et. al.             Informational                      [Page 5]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


   The PADO packet MUST contain one AC-Name TAG containing the Access
   Concentrator's name, a Service-Name TAG identical to the one in the
   PADI, and any number of other Service-Name TAGs indicating other
   services that the Access Concentrator offers.  If the Access
   Concentrator can not serve the PADI it MUST NOT respond with a PADO.

5.3 The PPPoE Active Discovery Request (PADR) packet

   Since the PADI was broadcast, the Host may receive more than one
   PADO.  The Host looks through the PADO packets it receives and
   chooses one.  The choice can be based on the AC-Name or the Services
   offered.  The Host then sends one PADR packet to the Access
   Concentrator that it has chosen.  The DESTINATION_ADDR field is set
   to the unicast Ethernet address of the Access Concentrator that sent
   the PADO.  The CODE field is set to 0x19 and the SESSION_ID MUST be
   set to 0x0000.

   The PADR packet MUST contain exactly one TAG of TAG_TYPE Service-
   Name, indicating the service the Host is requesting, and any number
   of other TAG types.

5.4 The PPPoE Active Discovery Session-confirmation (PADS) packet

   When the Access Concentrator receives a PADR packet, it prepares to
   begin a PPP session.  It generates a unique SESSION_ID for the PPPoE
   session and replies to the Host with a PADS packet.  The
   DESTINATION_ADDR field is the unicast Ethernet address of the Host
   that sent the PADR.  The CODE field is set to 0x65 and the SESSION_ID
   MUST be set to the unique value generated for this PPPoE session.

   The PADS packet contains exactly one TAG of TAG_TYPE Service-Name,
   indicating the service under which Access Concentrator has accepted
   the PPPoE session, and any number of other TAG types.

   If the Access Concentrator does not like the Service-Name in the
   PADR, then it MUST reply with a PADS containing a TAG of TAG_TYPE
   Service-Name-Error (and any number of other TAG types).  In this case
   the SESSION_ID MUST be set to 0x0000.

5.5 The PPPoE Active Discovery Terminate (PADT) packet

   This packet may be sent anytime after a session is established to
   indicate that a PPPoE session has been terminated.  It may be sent by
   either the Host or the Access Concentrator.  The DESTINATION_ADDR
   field is a unicast Ethernet address, the CODE field is set to 0xa7
   and the SESSION_ID MUST be set to indicate which session is to be
   terminated.  No TAGs are required.




Mamakos, et. al.             Informational                      [Page 6]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


   When a PADT is received, no further PPP traffic is allowed to be sent
   using that session.  Even normal PPP termination packets MUST NOT be
   sent after sending or receiving a PADT.  A PPP peer SHOULD use the
   PPP protocol itself to bring down a PPPoE session, but the PADT MAY
   be used when PPP can not be used.

6. PPP Session Stage

   Once the PPPoE session begins, PPP data is sent as in any other PPP
   encapsulation.  All Ethernet packets are unicast.  The ETHER_TYPE
   field is set to 0x8864.  The PPPoE CODE MUST be set to 0x00.  The
   SESSION_ID MUST NOT change for that PPPoE session and MUST be the
   value assigned in the Discovery stage.  The PPPoE payload contains a
   PPP frame.  The frame begins with the PPP Protocol-ID.

   An example packet is shown in Appendix B.

7. LCP Considerations

   The Magic Number LCP configuration option is RECOMMENDED, and the
   Protocol Field Compression (PFC) option is NOT RECOMMENDED.  An
   implementation MUST NOT request any of the following options, and
   MUST reject a request for such an option:

      Field Check Sequence (FCS) Alternatives,

      Address-and-Control-Field-Compression (ACFC),

      Asynchronous-Control-Character-Map (ACCM)

   The Maximum-Receive-Unit (MRU) option MUST NOT be negotiated to a
   larger size than 1492.  Since Ethernet has a maximum payload size of
   1500 octets, the PPPoE header is 6 octets and the PPP Protocol ID is
   2 octets, the PPP MTU MUST NOT be greater than 1492.

   It is RECOMMENDED that the Access Concentrator ocassionally send
   Echo-Request packets to the Host to determine the state of the
   session.  Otherwise, if the Host terminates a session without sending
   a Terminate-Request packet, the Access Concentrator will not be able
   to determine that the session has gone away.

   When LCP terminates, the Host and Access concentrator MUST stop using
   that PPPoE session.  If the Host wishes to start another PPP session,
   it MUST return to the PPPoE Discovery stage.







Mamakos, et. al.             Informational                      [Page 7]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


8. Other Considerations

   When a host does not receive a PADO packet within a specified amount
   of time, it SHOULD resend it's PADI packet and double the waiting
   period. This is repeated as many times as desired.  If the Host is
   waiting to receive a PADS packet, a similar timeout mechanism SHOULD
   be used, with the Host re-sending the PADR.  After a specified number
   of retries, the Host SHOULD then resend a PADI packet.

   The ETHER_TYPEs used in this document (0x8863 and 0x8864) have been
   assigned by the IEEE for use by PPP Over Ethernet (PPPoE).  Use of
   these values and the PPPoE VER (version) field uniquely identify this
   protocol.

   UTF-8 [5] is used throughout this document instead of ASCII.  UTF-8
   supports the entire ASCII character set while allowing for
   international character sets as well.  See [5] for more details.

9. Security Considerations

   To help protect against Denial of Service (DOS) attacks, the Access
   Concentrator can employ the AC-Cookie TAG.  The Access Concentrator
   SHOULD be able to uniquely regenerate the TAG_VALUE based on the PADR
   SOURCE_ADDR.  Using this, the Access Concentrator can ensure that the
   PADI SOURCE_ADDR is indeed reachable and can then limit concurrent
   sessions for that address.  What algorithm to use is not defined and
   left as an implementation detail.  An example is HMAC [3] over the
   Host MAC address using a key known only to the Access > Concentrator.
   While the AC-Cookie is useful against some DOS attacks, it can not
   protect against all DOS attacks and an Access Concentrator MAY employ
   other means to protect resources.

   While the AC-Cookie is useful against some DOS attacks, it can not
   protect against all DOS attacks and an Access Concentrator MAY employ
   other means to protect resources.

   Many Access Concentrators will not wish to offer information
   regarding what services they offer to an unauthenticated entity.  In
   that case the Access Concentrator should employ one of two policies.
   It SHOULD never refuse a request based on the Service-Name TAG, and
   always return the TAG_VALUE that was sent to it.  Or it SHOULD only
   accept requests with a Service-Name TAG with a zero TAG_LENGTH
   (indicating any service).  The former solution is RECOMMENDED.

10. Acknowledgments

   This document is based on concepts discussed in several forums,
   including the ADSL forum.



Mamakos, et. al.             Informational                      [Page 8]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


   Copious amounts of text have been stolen from RFC 1661, RFC 1662 and
   RFC 2364.

11. References

   [1] Simpson, W., Editor, "The Point-to-Point Protocol (PPP)", STD 51,
       RFC 1661, July 1994

   [2] Bradner, S., "Key words for use in RFCs to Indicate Requirement
       Levels", BCP 14, RFC 2119, March 1997.

   [3] Krawczyk, H., Bellare, M. and R. Canetti, "HMAC: Keyed-Hashing
       for Message Authentication", RFC 2104, February 1998.

   [4] Reynolds, J. and J. Postel, "Assigned Numbers", STD 2, RFC 1700,
       October 1994.  See also: http://www.iana.org/numbers.html

   [5] Yergeau, F., "UTF-8, a transformation format of ISO 10646", RFC
       2279, January 1998.
































Mamakos, et. al.             Informational                      [Page 9]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


Appendix A

   TAG_TYPES and TAG_VALUES

   0x0000 End-Of-List

      This TAG indicates that there are no further TAGs in the list. The
      TAG_LENGTH of this TAG MUST always be zero.  Use of this TAG is
      not required, but remains for backwards compatibility.

   0x0101 Service-Name

      This TAG indicates that a service name follows.  The TAG_VALUE is
      an UTF-8 string that is NOT NULL terminated. When the TAG_LENGTH
      is zero this TAG is used to indicate that any service is
      acceptable.  Examples of the use of the Service-Name TAG are to
      indicate an ISP name or a class or quality of service.

   0x0102 AC-Name

      This TAG indicates that a string follows which uniquely identifies
      this particular Access Concentrator unit from all others. It may
      be a combination of trademark, model, and serial id information,
      or simply an UTF-8 rendition of the MAC address of the box.  It is
      not NULL terminated.

   0x0103 Host-Uniq

      This TAG is used by a Host to uniquely associate an Access
      Concentrator response (PADO or PADS) to a particular Host request
      (PADI or PADR).  The TAG_VALUE is binary data of any value and
      length that the Host chooses.  It is not interpreted by the Access
      Concentrator.  The Host MAY include a Host-Uniq TAG in a PADI or
      PADR.  If the Access Concentrator receives this TAG, it MUST
      include the TAG unmodified in the associated PADO or PADS
      response.

   0x0104 AC-Cookie

      This TAG is used by the Access Concentrator to aid in protecting
      against denial of service attacks (see the Security Considerations
      section for an explanation of how this works).  The Access
      Concentrator MAY include this TAG in a PADO packet.  If a Host
      receives this TAG, it MUST return the TAG unmodified in the
      following PADR.  The TAG_VALUE is binary data of any value and
      length and is not interpreted by the Host.





Mamakos, et. al.             Informational                     [Page 10]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


   0x0105 Vendor-Specific

      This TAG is used to pass vendor proprietary information.  The
      first four octets of the TAG_VALUE contain the vendor id and the
      remainder is unspecified.  The high-order octet of the vendor id
      is 0 and the low-order 3 octets are the SMI Network Management
      Private Enterprise Code of the Vendor in network byte order, as
      defined in the Assigned Numbers RFC [4].

      Use of this TAG is NOT RECOMMENDED.  To ensure inter-operability,
      an implementation MAY silently ignore a Vendor-Specific TAG.

   0x0110 Relay-Session-Id

      This TAG MAY be added to any discovery packet by an intermediate
      agent that is relaying traffic.  The TAG_VALUE is opaque to both
      the Host and the Access Concentrator.  If either the Host or
      Access Concentrator receives this TAG they MUST include it
      unmodified in any discovery packet they send as a response.  All
      PADI packets MUST guarantee sufficient room for the addition of a
      Relay-Session-Id TAG with a TAG_VALUE length of 12 octets.

      A Relay-Session-Id TAG MUST NOT be added if the discovery packet
      already contains one.  In that case the intermediate agent SHOULD
      use the existing Relay-Session-Id TAG.  If it can not use the
      existing TAG or there is insufficient room to add a Relay-
      Session-Id TAG, then it SHOULD return a Generic-Error TAG to the
      sender.

   0x0201 Service-Name-Error

      This TAG (typically with a zero-length data section) indicates
      that for one reason or another, the requested Service-Name request
      could not be honored.

      If there is data, and the first octet of the data is nonzero, then
      it MUST be a printable UTF-8 string which explains why the request
      was denied.  This string MAY NOT be NULL terminated.

   0x0202 AC-System-Error

      This TAG indicates that the Access Concentrator experienced some
      error in performing the Host request.  (For example insufficient
      resources to create a virtual circuit.)  It MAY be included in
      PADS packets.






Mamakos, et. al.             Informational                     [Page 11]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


      If there is data, and the first octet of the data is nonzero, then
      it MUST be a printable UTF-8 string which explains the nature of
      the error.  This string MAY NOT be NULL terminated.

   0x0203 Generic-Error

      This TAG indicates an error.  It can be added to PADO, PADR or
      PADS packets when an unrecoverable error occurs and no other error
      TAG is appropriate.  If there is data then it MUST be an UTF-8
      string which explains the nature of the error.  This string MUST
      NOT be NULL terminated.








































Mamakos, et. al.             Informational                     [Page 12]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


Appendix B

   The following are some example packets:

   A PADI packet:

                           1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         0xffffffff                            |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |           0xffff              |        Host_mac_addr          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                    Host_mac_addr (cont)                       |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |    ETHER_TYPE = 0x8863        | v = 1 | t = 1 |  CODE = 0x09  |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     SESSION_ID = 0x0000       |      LENGTH = 0x0004          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |      TAG_TYPE = 0x0101        |    TAG_LENGTH = 0x0000        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+






























Mamakos, et. al.             Informational                     [Page 13]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


   A PADO packet:

                           1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         Host_mac_addr                         |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |      Host_mac_addr (cont)     | Access_Concentrator_mac_addr  |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |             Access_Concentrator_mac_addr (cont)               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |    ETHER_TYPE = 0x8863        | v = 1 | t = 1 |  CODE = 0x07  |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     SESSION_ID = 0x0000       |      LENGTH = 0x0020          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |      TAG_TYPE = 0x0101        |    TAG_LENGTH = 0x0000        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |      TAG_TYPE = 0x0102        |    TAG_LENGTH = 0x0018        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     0x47      |     0x6f      |     0x20      |     0x52      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     0x65      |     0x64      |     0x42      |     0x61      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     0x63      |     0x6b      |     0x20      |     0x2d      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     0x20      |     0x65      |     0x73      |     0x68      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     0x73      |     0x68      |     0x65      |     0x73      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     0x68      |     0x6f      |     0x6f      |     0x74      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+




















Mamakos, et. al.             Informational                     [Page 14]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


   A PPP LCP packet:  The PPP protocol value is shown (0xc021) but the
   PPP payload is left to the reader.  This is a packet from the Host to
   the Access Concentrator.

                           1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                  Access_Concentrator_mac_addr                 |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |Access_Concentrator_mac_addr(c)|        Host_mac_addr          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                     Host_mac_addr (cont)                      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |    ETHER_TYPE = 0x8864        | v = 1 | t = 1 |  CODE = 0x00  |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     SESSION_ID = 0x1234       |      LENGTH = 0x????          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |    PPP PROTOCOL = 0xc021      |        PPP payload            ~
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

Authors'  Addresses

   Louis Mamakos
   UUNET Technologies, Inc.
   3060 Williams Drive
   Fairfax, VA  22031-4648
   United States of America

   EMail: louie@uu.net


   Kurt Lidl
   UUNET Technologies, Inc.
   3060 Williams Drive
   Fairfax, VA  22031-4648
   United States of America

   EMail: lidl@uu.net


   Jeff Evarts
   UUNET Technologies, Inc.
   3060 Williams Drive
   Fairfax, VA  22031-4648
   United States of America

   EMail: jde@uu.net




Mamakos, et. al.             Informational                     [Page 15]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


   David Carrel
   RedBack Networks, Inc.
   1389 Moffett Park Drive
   Sunnyvale, CA  94089-1134
   United States of America

   EMail: carrel@RedBack.net


   Dan Simone
   RedBack Networks, Inc.
   1389 Moffett Park Drive
   Sunnyvale, CA  94089-1134
   United States of America

   EMail:dan@RedBack.net


   Ross Wheeler
   RouterWare, Inc.
   3961 MacArthur Blvd., Suite 212
   Newport Beach, CA  92660
   United States of America

   EMail: ross@routerware.com


























Mamakos, et. al.             Informational                     [Page 16]

RFC 2516             Transmitting PPP Over Ethernet        February 1999


Full Copyright Statement

   Copyright (C) The Internet Society (1999).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
























Mamakos, et. al.             Informational                     [Page 17]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\storageoverviewtesting.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal.dot johndaly Microsoft Word 9.0Storage Overview Testing Author: johndaly Last changed:   SAVEDATE \@ "M/d/yyyy" \* MERGEFORMAT  4/24/2000  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test  HYPERLINK "mailto:johndaly@xbox.com" mailto:johndaly@xbox.com HYPERLINK "mailto:chrispi@xbox.com;waltw@xbox.com" mailto:chrispi@xbox.com;waltw@xbox.com HYPERLINK "mailto:marcw@xbox.com" mailto:marcw@xbox.com  HYPERLINK "mailto:karencs@xbox.com"  mailto:karencs@xbox.com Usability   HYPERLINK "mailto:tombro@xbox.com"  mailto:tombro@xbox.com International  Test scenarios There are 3 stores, and each will have it s own test plan in addition to this testing over view: hard disk (sometimes called the XDisk) connected memory units (MU or XCard) online space (who knows what they ll call this) These need to be tested in different ways, due to the unique nature of each device.  Also, Namespace considerations must be taken into account, since the namespace mechanism virtualizes paths to storage (  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\namespace.doc"  \\xbox\specs\pm\CoreOS\namespace.doc The hard drive is always there, the MU may or may not be there, and the size can be different.  The online storage space may or may not be connected, and the connection may not be very good, and may be at different speeds (DSL vs. Modem) and through different devices.  The XDisk is used for System Data, User Data, Cache, Title Data.  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\xdisk.doc"  \\xbox\specs\pm\CoreOS\xdisk.doc The MU is used for personal data, such as saved games and high scores, etc  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\xcard.doc"  \\xbox\specs\pm\CoreOS\xcard.doc There is no online storage spec yet, but I expect that it will be a lot like the XCard but online. The most important thing is making sure that data can be written to and reliably read from the device. Other important things to look at also include seeing what happens when a device is full, empty, damaged, restored, swapped etc. Also, making sure the API s used to access the storage devices conform to what programmers are used to using for this purpose   they should match the same-named Win32 API s as closely as possible. Error testing is also important   how can we tell if the XDisk is broken? What do we do if it is? Remember   millions of people who have never touched a PC will be using these things, they must be as predictable as a toaster. Spec reviews  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\xbox_storage.doc"  \\xbox\specs\pm\CoreOS\xbox_storage.doc  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\xdisk.doc"  \\xbox\specs\pm\CoreOS\xdisk.doc  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\xcard.doc"  \\xbox\specs\pm\CoreOS\xcard.doc  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\namespace.doc"  \\xbox\specs\pm\CoreOS\namespace.doc <TODO   link to online storage> Is the spec sufficient to design, document, and test this feature? Tools needed Perf  ll need to measure performance of these storage mediums. The test plan for each medium will cover this in more detail, but in general, the important things to know will be: Data rate Latency CPU / Memory utilization Code coverage We are talking with MSR about getting ICECap modified for us to use for Code Coverage analysis.  All code will get this. Static analysis All code will be statically analyzed with PC-Lint, Typo.pl, and PreFix.  Leak testing All code relating to storage will be checked for this. It will be done through a combination of running the tests / measuring / repeat. Look at leaks.doc (checked into   HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs"  \\CPITGCFS01\xboxro\src\test\docs ) for notes on the how s and why s of leak checking. corruption testing This will be done with the Driver Verifier (  HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs"  \\CPITGCFS01\xboxro\src\test\docs Hardware needed What do you need immediately? As of 4/24 we have the SDK boxes and we have a USB reader to use for testing, we should be able to test these quite quickly. What will you need further on down the road? X-Boxes, and an Online thing when that becomes available. What lab requirements do you have? Aside from X-Boxes and XCards, we ll need servers to simulate the online part. We ll need XCards of every size, and we ll need some damaged ones to test with to make sure the OS does the right thing when a broken card is used. Test methods Test code What needs to be written? The test plans for the individual units will elaborate on this, but in general, API tests for all storage related API s, and programs / tests that simulate the expected use of the device will be needed for performance testing.  What can be borrowed / adapted? The test plans for the individual units will elaborate on this, but in general, there are some NT tests and tools that can be adapted for this. What support code do we need, and who is responsible for providing it? We may need some type of server for the Online storage. We may need some USB test code for the MUs. The test plans for the individual storage units will elaborate on this. Can your code go into a stress test? All test code for storage should be readily adaptable for stress. What logging levels are you going to use? The test plans for the individual storage units will elaborate on this. What other input / output is needed? The test plans for the individual storage units will elaborate on this. How do you generate test data? The test plans for the individual storage units will elaborate on this. Manual tests What are all the variations? The test plans for the individual units will elaborate on this. ll be using Tactics for this purpose (  HYPERLINK "http://tactics/default.asp"  http://tactics/default.asp What tools / equipment do you need for your variations? X-Boxes, MUs, Servers. Configuration tests What configurations are important to testing this feature? The test plans for the individual storage units will elaborate on this. For all tests, one area to be especially watchful of is the namespaces. The Nature of this feature causes paths to be changed based on the title running at the time. This mechanism is a lightweight access-limiting mechanism designed to keep titles from mashing each other, and to make it easier for users to manage user and title data. Please review this spec carefully and make sure your tests take it into account. Code reviews How often? For changed code, after a check-in, and on all code at least 1 time before we ship. Which Dev / PM will attend? The test plans for the individual storage units will elaborate on this. Debug walkthrough  This will be required for all storage code. Security What impact on security does this feature have? Storage is very important for security: Can software access storage that it is not allowed to? Can things being stored be modified inappropriately? Can Online data be eavesdropped or otherwise hacked? How can this be used to break our security? How can this be improved to enhance our security? Performance testing Should you measure performance in your test? Would your test be useful for performance testing? Tests designed to mimic real-world scenarios may be more useful for this than API tests. How will you measure performance? The test plans for the individual units will elaborate on this. Catastrophic failure testing How are you going to test failure of your feature? The test plans for the individual storage units will elaborate on this. What happens to the rest of the system should your feature fail? This is very important to storage: If the XDisk fails, the box is rendered inop. b.) If the XCard or the Online storage is failing / broken, the OS needs to behave in a predictable manner.  The test plans for the individual units will elaborate on this.  Interfaces with other components The test plans for the individual storage units will elaborate on this. Localization impact The names of files can be localized, all the API s will support Unicode and possible there will be ANSI version for some of these. API tests that use storage need to test both A and W version of the API. Test variations The test plans for the individual storage units will elaborate on this. Test complete criteria What needs to be done to say that 100% of the test development work is done? There need to be tests for all normal, failure, and edge cases for all the storage devices. All devices must be tested, including all the various sizes available, including minimum and maximum sized MUs, minimum to very large XDrives, and Online storage of varying sizes. Release criteria Which of these tests need to pass to ship? At first guess, all mainline cases, all failure cases, and most edge cases, the only exceptions agreed upon by a War Team or similar group. Which failures can we live with on this feature? Not many, these are core features. How do we know when your tests say, "this feature is ready to ship"? When they all pass with exceptions as noted above.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\savedgametesting.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal Microsoft Word 9.0?|.GXbjbjU Saved Game Test Plan  Author: John Daly Last changed: 6/13/2000  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test   HYPERLINK "mailto:johndaly@xbox.com"  mailto:johndaly@xbox.com  HYPERLINK "mailto:jimy@xbox.com"  mailto:jimy@xbox.com  HYPERLINK "mailto:chrispi@xbox.com"  mailto:chrispi@xbox.com  HYPERLINK "mailto:mgere@xbox.com"  mailto:mgere@xbox.com  HYPERLINK "mailto:marcw@xbox.com"  mailto:marcw@xbox.com  HYPERLINK "mailto:karencs@xbox.com"  mailto:karencs@xbox.com Usability   HYPERLINK "mailto:tombro@xbox.com"  mailto:tombro@xbox.com International  Test scenarios The things to consider in looking at saving games with the xbox are: where   xdisk, MU, or web server  through the game or managed by the shell storage format   directory / metadata / files These items are built upon the network support, file system support, and hardware support built into the OS, and are documented separately. These things must be working correctly for the saved games to function correctly, and testing them is covered in other test documents. This document will cover all the saved game features, and only talk about lower level system features when necessary. Another important issue is how all this works with identity. Directory paths to saved games are created from the pair (game ID, name). With this in mind, the basic set of scenarios will be: save game with game (use the APIs provided for this) vary usersame vary game ID vary media vary media states (full, etc) move / manage game with shell between all media types between xboxes using MUs and the web open game with game model on scenarios from items 1 and 2 verify all metadata and game data and user data was correctly manipulated. Verify scenarios specific to various media types  space, connections, data rates, errors, corruption, between boxes  space, errors, corruption, between boxes Xdisk - space, errors, corruption Spec reviews Owner: Marc Whitten Spec:   HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\save_games.doc"  \\xbox\specs\pm\CoreOS\save_games.doc Also, see:  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\XBox Identity Overview.doc"  \\xbox\specs\pm\CoreOS\XBox Identity Overview.doc  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\xbox_storage.doc"  \\xbox\specs\pm\CoreOS\xbox_storage.doc The spec looks fine for beginning to test this feature. Tools needed Perf   this is a low priority, if we get to it use the same tools we use for everything else code coverage - IceCap static analysis   lint, typo, prefix leak testing - verifier corruption testing - verifier important docs:  HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs"  \\CPITGCFS01\xboxro\src\test\docs Hardware needed What do you need immediately? s that can run the xbox OS   we have these. What will you need further on down the road? Memory units and web servers that can handle saved games. What lab requirements do you have? Nothing special for this. Test methods Test code We will need to write test code that tests the saved game APIs, which are listed here: Disk / MU APIs (these are preliminary API s and subject to change!): XgetSaveDevices XgetSaveRoot XcreateSaveGame XenumerateFirstSaveGame XenumerateNextSaveGame XdeleteSaveGame XcopySaveGame Online APIs (these are preliminary API s and subject to change!): XonlineOpenStorage XOnlineCloseStorage XOnlineUploadGame XOnlineDownloadGame XOnlineEnumerateFirstSaveGame XOnlineEnumerateNextSaveGame XonlineDeleteSaveGame The normal things that go into xbox tests need to go into test for these APIs, for instance stress versions, test until resources exhausted, startup tests, etc. I am not going to explain how to test APIs here. Manual tests The manual tests for saved games are all done from the shell / default title. Since this is not the test plan for that component, I will outline the basic scenarios and let the shell team fill in the details. Basically: Move games to and from every media type Make sure everything moved correctly. Configuration tests The important configuration scenarios are: Different network media configurations, states, and error conditions Yanked during save/retrieve of data Router going up/down during save/retrieve Online server might disconnect the xbox client connection (slow xfer?) Online server might be too busy to accept/process the save/retrieve game request (error popup UI?) Expected byte length different then actual (less vs. more).  Might cause game to hang to wait for a completion signal that will never complete? Saving data that exceeds online quota limit.  UI for warning or popup before transmit happens? Retrieving data that exceeds available/free harddisk space. Can we have 2 saves happening simultaneously from 1 xbox (I think not   safe). Will we have 2 saves happening simultaneously from 2 different xboxes?   (yes! Possible)  Full, empty, corrupted, yanked during save Xdisk Full, empty, corrupted, power cycled during save Code reviews How often? ll need 1 code review for the initial checkin of the APIs. Which Dev / PM will attend? Everybody that has anything to do with these. Debug walkthrough  Watch all the tested code in the debugger. Are getting the coverage you think you are? It will help you learn how things work and write better tests. Security What impact on security does this feature have? This is a major avenue of attack into the xbox. Data of all types can be saved, and this can include hostile code that can exploit any weaknesses we have in the code.  User might be able to hack  paths  of online saved files (via URL paths) How can this be used to break our security? I am most worried about buffer overruns, and somewhat worried about saved games being triggers for and backdoor code a title vendor may have slipped into their title either accidentally or on purpose. How can this be improved to enhance our security? We need to look at things like buffer overrun attacks, and be proactive in the code to make it hard to break. We also need to carefully examine the code for poor practices or methods that are exploitable and choose less vulnerable alternatives whenever possible. Performance testing Should you measure performance in your test? Sure, but it is not a big priority. Would your test be useful for performance testing? How will you measure performance? Take baseline measurements, and look for changes between builds that may indicate we are doing something that makes us slower. Net-based saves/retrieves, will we allow for HTTP  byte ranges , for completing partial transfers that are cancelled? Catastrophic failure testing How are you going to test failure of your feature? Simulate media / device failures Call-waiting phone/modem disconnect Simulate media / device corruption Remove various files and make sure that we correctly handle the error, alert the user, etc if we detect a problem with the saved game Interfaces with other components There will have to be extensive testing with the shell, this will be covered in the shell test plan. Localization impact We need to localize: Game names User nick names File names And make sure things work.  I see not real issues here since everything is Unicode.  Possible some display issues with the shell since they will have to interpret the names correctly given the language / region of the user. Test variations Disk / MU APIs (these are preliminary API s and subject to change!): XgetSaveDevices () XGetSaveRoot () XCreateSaveGame () XEnumerateFirstSaveGame () XEnumerateNextSaveGame () XDeleteSaveGame () XCopySaveGame () Test these APIs using all the standard API test techniques   good bad data, to exhaustion, stress, etc Online APIs (these are preliminary API s and subject to change!): XonlineOpenStorage XOnlineCloseStorage XOnlineUploadGame XOnlineDownloadGame XOnlineEnumerateFirstSaveGame XOnlineEnumerateNextSaveGame XonlineDeleteSaveGame Test these APIs using all the standard API test techniques   good bad data, to exhaustion, stress, etc Test complete criteria All API tests must be complete, to include stress. Code reviews must be completed, along with debug walkthroughs, etc. Release criteria Which of these tests need to pass to ship? All of these API s need to work correctly for titles that ship with them. Which failures can we live with on this feature? How do we know when your tests say, "this feature is ready to ship"? When the tests are complete and there are no outstanding approved bugs.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\securitytest.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal.dot johndaly Microsoft Word 9.0ik70D{Security Test Plan Author: John Daly Last changed:   SAVEDATE \@ "M/d/yyyy" \* MERGEFORMAT  5/5/2000  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test  HYPERLINK "mailto:johndaly@microsoft.com" mailto:johndaly@microsoft.com  HYPERLINK "mailto:jont@microsoft.com"  mailto:jont@microsoft.com  HYPERLINK "mailto:cameronf@microsoft.com"  mailto:cameronf@microsoft.com Usability  International  Test scenarios The software side of Xbox security includes: Encrypted / compressed kernel decryption / decompression on boot. Loading only signed code. Prevention / mitigation of downloading unauthorized code. Prevention / mitigation of unauthorized use of the hard disk. Recovery from successful attacks (see recovery spec   HYPERLINK "http://xbox/Specs/pm/CoreOS/restore.doc"  http://xbox/Specs/pm/CoreOS/restore.doc Detecting and not playing / executing invalid media. Ensuring during the certification process that the title is  clean All images must be scanned with a virus scanner to detect and virus code that may have been slipped into the title. Using Driver Verifier and other monitoring tools, ensure both the quality and that the title is not attempting to do anything illegal. Ensuring that the network stack is robust enough to survive attacks that crash the Xbox. Ensure that the network stack is not susceptible to buffer overrun attacks that can be used to inject code and hijack the Xbox. Spec reviews Here is the high-level X-Box security spec: HYPERLINK "http://xbox/Specs/pm/CoreOS/XBOX Protection.doc" http://xbox/Specs/pm/CoreOS/XBOX Protection.doc The spec is very high level, we ll need to look at more detailed specs to determine how the software will implement each security feature. Here is the recovery spec, it is also relevant:  HYPERLINK "http://xbox/Specs/pm/CoreOS/restore.doc"  http://xbox/Specs/pm/CoreOS/restore.doc Tools needed Tools to modify / sign code that is using our modified PE format. Tools to modify the signature in signed files for testing. Hardware needed Xboxes as soon as they are available so we can play with the encryption stuff in the south bridge. Test methods Test code What can be borrowed / adapted? Tools to do net attacks against the Xbox IP stack. Tools to scan for viruses in our images and title images. What support code do we need, and who is responsible for providing it? Tools for cert manipulation in images in our format. Manual tests What are all the variations? - See the test variations below. What tools / equipment do you need for your variations? ll need tools for changing images and for making various kinds of media.  We ll also need music CD s, DVD s, etc. Configuration tests See the test variations below. Code reviews This code needs to be completely reviewed by the developer, PM, and tester assigned to security. It should also be reviewed (or at least the spec reviewed) by and outside party, such as the NT security team. Security through Obscurity is NOT acceptable for the security code. Debug walkthrough  Watch all the tested code in the debugger. Are getting the coverage you think you are? It will help you learn how things work and write better tests. Security This is the security Performance testing The decryption code for loading the kernel needs to be profiled, as well as the code in the loader that performs decryption. If it is unacceptably slow we need to know early on so we can modify our approach, select different algorithm, etc. Catastrophic failure testing How are you going to test failure of your feature? What happens to the rest of the system should your feature fail? Interfaces with other components How will these be tested? Localization impact The only real localization impact is the region codes on DVD s, we can t have them subverted like the PS2 initially did. Test variations Encrypted / compressed kernel decryption / decompression on boot. Run the power on / boot tests with: ROM that is not signed. ROM that is corrupted (should fail checksum). ROM with incorrect cert. Loading only signed code. Run the power on / boot tests with: Title with corrupted image (should fail checksum). Media with tampered / corrupt cert. Prevention / mitigation of downloading unauthorized code. If we actually do anything to try and stop this, add test cases here. We pretty much have to trust the title vendor on this. Prevention / mitigation of unauthorized use of the hard disk. Run the power on / boot tests with: Boot with a tampered-with hard disk - do we do the right thing? If we check for head / disk activity with a watchdog during certification: Write test that moves heads / reads / writes using alternate means while test is running and see if watchdog thread detects this. See if there is a way for the driver stack to determine if the caller is our code (this may be tricky, something like COM reference counting). Recovery from successful attacks See recovery spec and test plan. Detecting and not playing / executing invalid media. Try to boot images from media other than DVD-9 media format. Try to play DVD s from unsupported / wrong region. Try to make CDw/r copies of titles and play them. Ensuring during the certification process that the title is 'clean'. All images must be scanned with a virus scanner to detect and virus code that may have been slipped into the title. Using Driver Verifier and other monitoring tools, ensure both the quality and that the title is not attempting to do anything illegal. Set dates ahead to uncover time-bombs. Ensuring that the network stack is robust enough to survive attacks that crash the Xbox. Attack with various IP attack tools, the network test plan should cover this. Ensure that the network stack is not susceptible to buffer overrun attacks that can be used to inject code and hijack the Xbox. Attack with various IP attack tools, the network test plan should cover this. Review the code for dangerous memory allocation strategies and remove the ones that may be susceptible. Look at the new VC compiler that can detect stack overruns and see if the technology is appropriate for us (it will have some performance impact). Test complete criteria All test software needs to be written and function correctly.  There should be very little test software needed, so I don t see much of an impact here as far as time / resources needed to write code.  For the net attack stuff we should be able to use off the shelf software. The security testing will be Test Complete when all variations are enumerated and executed on the final hardware. Release criteria Which of these tests need to pass to ship? - All of the security tests need to pass before we ship. Which failures can we live with on this feature? - All fixable failures need to be fixed. How do we know when your tests say, "this feature is ready to ship"? - When no fixable failures exist.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\rfc1661_ppp.txt ===
rfc1661rfc1661
Press here to go to the top of the rfc 'tree'. 





Network Working Group                                 W. Simpson, Editor
Request for Comments: 1661                                    Daydreamer
STD: 51                                                        July 1994
Obsoletes: 1548
Category: Standards Track


                   The Point-to-Point Protocol (PPP)



Status of this Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.


Abstract

   The Point-to-Point Protocol (PPP) provides a standard method for
   transporting multi-protocol datagrams over point-to-point links.  PPP
   is comprised of three main components:

      1. A method for encapsulating multi-protocol datagrams.

      2. A Link Control Protocol (LCP) for establishing, configuring,
         and testing the data-link connection.

      3. A family of Network Control Protocols (NCPs) for establishing
         and configuring different network-layer protocols.

   This document defines the PPP organization and methodology, and the
   PPP encapsulation, together with an extensible option negotiation
   mechanism which is able to negotiate a rich assortment of
   configuration parameters and provides additional management
   functions.  The PPP Link Control Protocol (LCP) is described in terms
   of this mechanism.


Table of Contents


     1.     Introduction ..........................................    1
        1.1       Specification of Requirements ...................    2
        1.2       Terminology .....................................    3

     2.     PPP Encapsulation .....................................    4


Simpson                                                         [Page i]
RFC 1661                Point-to-Point Protocol                July 1994


     3.     PPP Link Operation ....................................    6
        3.1       Overview ........................................    6
        3.2       Phase Diagram ...................................    6
        3.3       Link Dead (physical-layer not ready) ............    7
        3.4       Link Establishment Phase ........................    7
        3.5       Authentication Phase ............................    8
        3.6       Network-Layer Protocol Phase ....................    8
        3.7       Link Termination Phase ..........................    9

     4.     The Option Negotiation Automaton ......................   11
        4.1       State Transition Table ..........................   12
        4.2       States ..........................................   14
        4.3       Events ..........................................   16
        4.4       Actions .........................................   21
        4.5       Loop Avoidance ..................................   23
        4.6       Counters and Timers .............................   24

     5.     LCP Packet Formats ....................................   26
        5.1       Configure-Request ...............................   28
        5.2       Configure-Ack ...................................   29
        5.3       Configure-Nak ...................................   30
        5.4       Configure-Reject ................................   31
        5.5       Terminate-Request and Terminate-Ack .............   33
        5.6       Code-Reject .....................................   34
        5.7       Protocol-Reject .................................   35
        5.8       Echo-Request and Echo-Reply .....................   36
        5.9       Discard-Request .................................   37

     6.     LCP Configuration Options .............................   39
        6.1       Maximum-Receive-Unit (MRU) ......................   41
        6.2       Authentication-Protocol .........................   42
        6.3       Quality-Protocol ................................   43
        6.4       Magic-Number ....................................   45
        6.5       Protocol-Field-Compression (PFC) ................   48
        6.6       Address-and-Control-Field-Compression (ACFC)

     SECURITY CONSIDERATIONS ......................................   51
     REFERENCES ...................................................   51
     ACKNOWLEDGEMENTS .............................................   51
     CHAIR'S ADDRESS ..............................................   52
     EDITOR'S ADDRESS .............................................   52










Simpson                                                        [Page ii]
RFC 1661                Point-to-Point Protocol                July 1994


1.  Introduction

   The Point-to-Point Protocol is designed for simple links which
   transport packets between two peers.  These links provide full-duplex
   simultaneous bi-directional operation, and are assumed to deliver
   packets in order.  It is intended that PPP provide a common solution
   for easy connection of a wide variety of hosts, bridges and routers
   [1].

   Encapsulation

      The PPP encapsulation provides for multiplexing of different
      network-layer protocols simultaneously over the same link.  The
      PPP encapsulation has been carefully designed to retain
      compatibility with most commonly used supporting hardware.

      Only 8 additional octets are necessary to form the encapsulation
      when used within the default HDLC-like framing.  In environments
      where bandwidth is at a premium, the encapsulation and framing may
      be shortened to 2 or 4 octets.

      To support high speed implementations, the default encapsulation
      uses only simple fields, only one of which needs to be examined
      for demultiplexing.  The default header and information fields
      fall on 32-bit boundaries, and the trailer may be padded to an
      arbitrary boundary.

   Link Control Protocol

      In order to be sufficiently versatile to be portable to a wide
      variety of environments, PPP provides a Link Control Protocol
      (LCP).  The LCP is used to automatically agree upon the
      encapsulation format options, handle varying limits on sizes of
      packets, detect a looped-back link and other common
      misconfiguration errors, and terminate the link.  Other optional
      facilities provided are authentication of the identity of its peer
      on the link, and determination when a link is functioning properly
      and when it is failing.

   Network Control Protocols

      Point-to-Point links tend to exacerbate many problems with the
      current family of network protocols.  For instance, assignment and
      management of IP addresses, which is a problem even in LAN
      environments, is especially difficult over circuit-switched
      point-to-point links (such as dial-up modem servers).  These
      problems are handled by a family of Network Control Protocols
      (NCPs), which each manage the specific needs required by their



Simpson                                                         [Page 1]
RFC 1661                Point-to-Point Protocol                July 1994


      respective network-layer protocols.  These NCPs are defined in
      companion documents.

   Configuration

      It is intended that PPP links be easy to configure.  By design,
      the standard defaults handle all common configurations.  The
      implementor can specify improvements to the default configuration,
      which are automatically communicated to the peer without operator
      intervention.  Finally, the operator may explicitly configure
      options for the link which enable the link to operate in
      environments where it would otherwise be impossible.

      This self-configuration is implemented through an extensible
      option negotiation mechanism, wherein each end of the link
      describes to the other its capabilities and requirements.
      Although the option negotiation mechanism described in this
      document is specified in terms of the Link Control Protocol (LCP),
      the same facilities are designed to be used by other control
      protocols, especially the family of NCPs.



1.1.  Specification of Requirements

   In this document, several words are used to signify the requirements
   of the specification.  These words are often capitalized.

   MUST      This word, or the adjective "required", means that the
             definition is an absolute requirement of the specification.

   MUST NOT  This phrase means that the definition is an absolute
             prohibition of the specification.

   SHOULD    This word, or the adjective "recommended", means that there
             may exist valid reasons in particular circumstances to
             ignore this item, but the full implications must be
             understood and carefully weighed before choosing a
             different course.

   MAY       This word, or the adjective "optional", means that this
             item is one of an allowed set of alternatives.  An
             implementation which does not include this option MUST be
             prepared to interoperate with another implementation which
             does include the option.






Simpson                                                         [Page 2]
RFC 1661                Point-to-Point Protocol                July 1994


1.2.  Terminology

   This document frequently uses the following terms:

   datagram  The unit of transmission in the network layer (such as IP).
             A datagram may be encapsulated in one or more packets
             passed to the data link layer.

   frame     The unit of transmission at the data link layer.  A frame
             may include a header and/or a trailer, along with some
             number of units of data.

   packet    The basic unit of encapsulation, which is passed across the
             interface between the network layer and the data link
             layer.  A packet is usually mapped to a frame; the
             exceptions are when data link layer fragmentation is being
             performed, or when multiple packets are incorporated into a
             single frame.

   peer      The other end of the point-to-point link.

   silently discard
             The implementation discards the packet without further
             processing.  The implementation SHOULD provide the
             capability of logging the error, including the contents of
             the silently discarded packet, and SHOULD record the event
             in a statistics counter.
























Simpson                                                         [Page 3]
RFC 1661                Point-to-Point Protocol                July 1994


2.  PPP Encapsulation

   The PPP encapsulation is used to disambiguate multiprotocol
   datagrams.  This encapsulation requires framing to indicate the
   beginning and end of the encapsulation.  Methods of providing framing
   are specified in companion documents.

   A summary of the PPP encapsulation is shown below.  The fields are
   transmitted from left to right.

           +----------+-------------+---------+
           | Protocol | Information | Padding |
           | 8/16 bits|      *      |    *    |
           +----------+-------------+---------+


   Protocol Field

      The Protocol field is one or two octets, and its value identifies
      the datagram encapsulated in the Information field of the packet.
      The field is transmitted and received most significant octet
      first.

      The structure of this field is consistent with the ISO 3309
      extension mechanism for address fields.  All Protocols MUST be
      odd; the least significant bit of the least significant octet MUST
      equal "1".  Also, all Protocols MUST be assigned such that the
      least significant bit of the most significant octet equals "0".
      Frames received which don't comply with these rules MUST be
      treated as having an unrecognized Protocol.

      Protocol field values in the "0***" to "3***" range identify the
      network-layer protocol of specific packets, and values in the
      "8***" to "b***" range identify packets belonging to the
      associated Network Control Protocols (NCPs), if any.

      Protocol field values in the "4***" to "7***" range are used for
      protocols with low volume traffic which have no associated NCP.
      Protocol field values in the "c***" to "f***" range identify
      packets as link-layer Control Protocols (such as LCP).











Simpson                                                         [Page 4]
RFC 1661                Point-to-Point Protocol                July 1994


      Up-to-date values of the Protocol field are specified in the most
      recent "Assigned Numbers" RFC [2].  This specification reserves
      the following values:

      Value (in hex)  Protocol Name

      0001            Padding Protocol
      0003 to 001f    reserved (transparency inefficient)
      007d            reserved (Control Escape)
      00cf            reserved (PPP NLPID)
      00ff            reserved (compression inefficient)

      8001 to 801f    unused
      807d            unused
      80cf            unused
      80ff            unused

      c021            Link Control Protocol
      c023            Password Authentication Protocol
      c025            Link Quality Report
      c223            Challenge Handshake Authentication Protocol

      Developers of new protocols MUST obtain a number from the Internet
      Assigned Numbers Authority (IANA), at IANA@isi.edu.


   Information Field

      The Information field is zero or more octets.  The Information
      field contains the datagram for the protocol specified in the
      Protocol field.

      The maximum length for the Information field, including Padding,
      but not including the Protocol field, is termed the Maximum
      Receive Unit (MRU), which defaults to 1500 octets.  By
      negotiation, consenting PPP implementations may use other values
      for the MRU.


   Padding

      On transmission, the Information field MAY be padded with an
      arbitrary number of octets up to the MRU.  It is the
      responsibility of each protocol to distinguish padding octets from
      real information.






Simpson                                                         [Page 5]
RFC 1661                Point-to-Point Protocol                July 1994


3.  PPP Link Operation

3.1.  Overview

   In order to establish communications over a point-to-point link, each
   end of the PPP link MUST first send LCP packets to configure and test
   the data link.  After the link has been established, the peer MAY be
   authenticated.

   Then, PPP MUST send NCP packets to choose and configure one or more
   network-layer protocols.  Once each of the chosen network-layer
   protocols has been configured, datagrams from each network-layer
   protocol can be sent over the link.

   The link will remain configured for communications until explicit LCP
   or NCP packets close the link down, or until some external event
   occurs (an inactivity timer expires or network administrator
   intervention).



3.2.  Phase Diagram

   In the process of configuring, maintaining and terminating the
   point-to-point link, the PPP link goes through several distinct
   phases which are specified in the following simplified state diagram:

   +------+        +-----------+           +--------------+
   |      | UP     |           | OPENED    |              | SUCCESS/NONE
   | Dead |------->| Establish |---------->| Authenticate |--+
   |      |        |           |           |              |  |
   +------+        +-----------+           +--------------+  |
      ^               |                        |             |
      |          FAIL |                   FAIL |             |
      +<--------------+             +----------+             |
      |                             |                        |
      |            +-----------+    |           +---------+  |
      |       DOWN |           |    |   CLOSING |         |  |
      +------------| Terminate |<---+<----------| Network |<-+
                   |           |                |         |
                   +-----------+                +---------+

   Not all transitions are specified in this diagram.  The following
   semantics MUST be followed.







Simpson                                                         [Page 6]
RFC 1661                Point-to-Point Protocol                July 1994


3.3.  Link Dead (physical-layer not ready)

   The link necessarily begins and ends with this phase.  When an
   external event (such as carrier detection or network administrator
   configuration) indicates that the physical-layer is ready to be used,
   PPP will proceed to the Link Establishment phase.

   During this phase, the LCP automaton (described later) will be in the
   Initial or Starting states.  The transition to the Link Establishment
   phase will signal an Up event to the LCP automaton.

   Implementation Note:

      Typically, a link will return to this phase automatically after
      the disconnection of a modem.  In the case of a hard-wired link,
      this phase may be extremely short -- merely long enough to detect
      the presence of the device.



3.4.  Link Establishment Phase

   The Link Control Protocol (LCP) is used to establish the connection
   through an exchange of Configure packets.  This exchange is complete,
   and the LCP Opened state entered, once a Configure-Ack packet
   (described later) has been both sent and received.

   All Configuration Options are assumed to be at default values unless
   altered by the configuration exchange.  See the chapter on LCP
   Configuration Options for further discussion.

   It is important to note that only Configuration Options which are
   independent of particular network-layer protocols are configured by
   LCP.  Configuration of individual network-layer protocols is handled
   by separate Network Control Protocols (NCPs) during the Network-Layer
   Protocol phase.

   Any non-LCP packets received during this phase MUST be silently
   discarded.

   The receipt of the LCP Configure-Request causes a return to the Link
   Establishment phase from the Network-Layer Protocol phase or
   Authentication phase.








Simpson                                                         [Page 7]
RFC 1661                Point-to-Point Protocol                July 1994


3.5.  Authentication Phase

   On some links it may be desirable to require a peer to authenticate
   itself before allowing network-layer protocol packets to be
   exchanged.

   By default, authentication is not mandatory.  If an implementation
   desires that the peer authenticate with some specific authentication
   protocol, then it MUST request the use of that authentication
   protocol during Link Establishment phase.

   Authentication SHOULD take place as soon as possible after link
   establishment.  However, link quality determination MAY occur
   concurrently.  An implementation MUST NOT allow the exchange of link
   quality determination packets to delay authentication indefinitely.

   Advancement from the Authentication phase to the Network-Layer
   Protocol phase MUST NOT occur until authentication has completed.  If
   authentication fails, the authenticator SHOULD proceed instead to the
   Link Termination phase.

   Only Link Control Protocol, authentication protocol, and link quality
   monitoring packets are allowed during this phase.  All other packets
   received during this phase MUST be silently discarded.

   Implementation Notes:

      An implementation SHOULD NOT fail authentication simply due to
      timeout or lack of response.  The authentication SHOULD allow some
      method of retransmission, and proceed to the Link Termination
      phase only after a number of authentication attempts has been
      exceeded.

      The implementation responsible for commencing Link Termination
      phase is the implementation which has refused authentication to
      its peer.



3.6.  Network-Layer Protocol Phase

   Once PPP has finished the previous phases, each network-layer
   protocol (such as IP, IPX, or AppleTalk) MUST be separately
   configured by the appropriate Network Control Protocol (NCP).

   Each NCP MAY be Opened and Closed at any time.





Simpson                                                         [Page 8]
RFC 1661                Point-to-Point Protocol                July 1994


   Implementation Note:

      Because an implementation may initially use a significant amount
      of time for link quality determination, implementations SHOULD
      avoid fixed timeouts when waiting for their peers to configure a
      NCP.

   After a NCP has reached the Opened state, PPP will carry the
   corresponding network-layer protocol packets.  Any supported
   network-layer protocol packets received when the corresponding NCP is
   not in the Opened state MUST be silently discarded.

   Implementation Note:

      While LCP is in the Opened state, any protocol packet which is
      unsupported by the implementation MUST be returned in a Protocol-
      Reject (described later).  Only protocols which are supported are
      silently discarded.

   During this phase, link traffic consists of any possible combination
   of LCP, NCP, and network-layer protocol packets.



3.7.  Link Termination Phase

   PPP can terminate the link at any time.  This might happen because of
   the loss of carrier, authentication failure, link quality failure,
   the expiration of an idle-period timer, or the administrative closing
   of the link.

   LCP is used to close the link through an exchange of Terminate
   packets.  When the link is closing, PPP informs the network-layer
   protocols so that they may take appropriate action.

   After the exchange of Terminate packets, the implementation SHOULD
   signal the physical-layer to disconnect in order to enforce the
   termination of the link, particularly in the case of an
   authentication failure.  The sender of the Terminate-Request SHOULD
   disconnect after receiving a Terminate-Ack, or after the Restart
   counter expires.  The receiver of a Terminate-Request SHOULD wait for
   the peer to disconnect, and MUST NOT disconnect until at least one
   Restart time has passed after sending a Terminate-Ack.  PPP SHOULD
   proceed to the Link Dead phase.

   Any non-LCP packets received during this phase MUST be silently
   discarded.




Simpson                                                         [Page 9]
RFC 1661                Point-to-Point Protocol                July 1994


   Implementation Note:

      The closing of the link by LCP is sufficient.  There is no need
      for each NCP to send a flurry of Terminate packets.  Conversely,
      the fact that one NCP has Closed is not sufficient reason to cause
      the termination of the PPP link, even if that NCP was the only NCP
      currently in the Opened state.












































Simpson                                                        [Page 10]
RFC 1661                Point-to-Point Protocol                July 1994


4.  The Option Negotiation Automaton

   The finite-state automaton is defined by events, actions and state
   transitions.  Events include reception of external commands such as
   Open and Close, expiration of the Restart timer, and reception of
   packets from a peer.  Actions include the starting of the Restart
   timer and transmission of packets to the peer.

   Some types of packets -- Configure-Naks and Configure-Rejects, or
   Code-Rejects and Protocol-Rejects, or Echo-Requests, Echo-Replies and
   Discard-Requests -- are not differentiated in the automaton
   descriptions.  As will be described later, these packets do indeed
   serve different functions.  However, they always cause the same
   transitions.

   Events                                   Actions

   Up   = lower layer is Up                 tlu = This-Layer-Up
   Down = lower layer is Down               tld = This-Layer-Down
   Open = administrative Open               tls = This-Layer-Started
   Close= administrative Close              tlf = This-Layer-Finished

   TO+  = Timeout with counter > 0          irc = Initialize-Restart-Count
   TO-  = Timeout with counter expired      zrc = Zero-Restart-Count

   RCR+ = Receive-Configure-Request (Good)  scr = Send-Configure-Request
   RCR- = Receive-Configure-Request (Bad)
   RCA  = Receive-Configure-Ack             sca = Send-Configure-Ack
   RCN  = Receive-Configure-Nak/Rej         scn = Send-Configure-Nak/Rej

   RTR  = Receive-Terminate-Request         str = Send-Terminate-Request
   RTA  = Receive-Terminate-Ack             sta = Send-Terminate-Ack

   RUC  = Receive-Unknown-Code              scj = Send-Code-Reject
   RXJ+ = Receive-Code-Reject (permitted)
       or Receive-Protocol-Reject
   RXJ- = Receive-Code-Reject (catastrophic)
       or Receive-Protocol-Reject
   RXR  = Receive-Echo-Request              ser = Send-Echo-Reply
       or Receive-Echo-Reply
       or Receive-Discard-Request










Simpson                                                        [Page 11]
RFC 1661                Point-to-Point Protocol                July 1994


4.1.  State Transition Table

   The complete state transition table follows.  States are indicated
   horizontally, and events are read vertically.  State transitions and
   actions are represented in the form action/new-state.  Multiple
   actions are separated by commas, and may continue on succeeding lines
   as space requires; multiple actions may be implemented in any
   convenient order.  The state may be followed by a letter, which
   indicates an explanatory footnote.  The dash ('-') indicates an
   illegal transition.

      | State
      |    0         1         2         3         4         5
Events| Initial   Starting  Closed    Stopped   Closing   Stopping
------+-----------------------------------------------------------
 Up   |    2     irc,scr/6     -         -         -         -
 Down |    -         -         0       tls/1       0         1
 Open |  tls/1       1     irc,scr/6     3r        5r        5r
 Close|    0       tlf/0       2         2         4         4
      |
  TO+ |    -         -         -         -       str/4     str/5
  TO- |    -         -         -         -       tlf/2     tlf/3
      |
 RCR+ |    -         -       sta/2 irc,scr,sca/8   4         5
 RCR- |    -         -       sta/2 irc,scr,scn/6   4         5
 RCA  |    -         -       sta/2     sta/3       4         5
 RCN  |    -         -       sta/2     sta/3       4         5
      |
 RTR  |    -         -       sta/2     sta/3     sta/4     sta/5
 RTA  |    -         -         2         3       tlf/2     tlf/3
      |
 RUC  |    -         -       scj/2     scj/3     scj/4     scj/5
 RXJ+ |    -         -         2         3         4         5
 RXJ- |    -         -       tlf/2     tlf/3     tlf/2     tlf/3
      |
 RXR  |    -         -         2         3         4         5















Simpson                                                        [Page 12]
RFC 1661                Point-to-Point Protocol                July 1994



      | State
      |    6         7         8           9
Events| Req-Sent  Ack-Rcvd  Ack-Sent    Opened
------+-----------------------------------------
 Up   |    -         -         -           -
 Down |    1         1         1         tld/1
 Open |    6         7         8           9r
 Close|irc,str/4 irc,str/4 irc,str/4 tld,irc,str/4
      |
  TO+ |  scr/6     scr/6     scr/8         -
  TO- |  tlf/3p    tlf/3p    tlf/3p        -
      |
 RCR+ |  sca/8   sca,tlu/9   sca/8   tld,scr,sca/8
 RCR- |  scn/6     scn/7     scn/6   tld,scr,scn/6
 RCA  |  irc/7     scr/6x  irc,tlu/9   tld,scr/6x
 RCN  |irc,scr/6   scr/6x  irc,scr/8   tld,scr/6x
      |
 RTR  |  sta/6     sta/6     sta/6   tld,zrc,sta/5
 RTA  |    6         6         8       tld,scr/6
      |
 RUC  |  scj/6     scj/7     scj/8       scj/9
 RXJ+ |    6         6         8           9
 RXJ- |  tlf/3     tlf/3     tlf/3   tld,irc,str/5
      |
 RXR  |    6         7         8         ser/9


   The states in which the Restart timer is running are identifiable by
   the presence of TO events.  Only the Send-Configure-Request, Send-
   Terminate-Request and Zero-Restart-Count actions start or re-start
   the Restart timer.  The Restart timer is stopped when transitioning
   from any state where the timer is running to a state where the timer
   is not running.

   The events and actions are defined according to a message passing
   architecture, rather than a signalling architecture.  If an action is
   desired to control specific signals (such as DTR), additional actions
   are likely to be required.

   [p]   Passive option; see Stopped state discussion.

   [r]   Restart option; see Open event discussion.

   [x]   Crossed connection; see RCA event discussion.






Simpson                                                        [Page 13]
RFC 1661                Point-to-Point Protocol                July 1994


4.2.  States

   Following is a more detailed description of each automaton state.

   Initial

      In the Initial state, the lower layer is unavailable (Down), and
      no Open has occurred.  The Restart timer is not running in the
      Initial state.

   Starting

      The Starting state is the Open counterpart to the Initial state.
      An administrative Open has been initiated, but the lower layer is
      still unavailable (Down).  The Restart timer is not running in the
      Starting state.

      When the lower layer becomes available (Up), a Configure-Request
      is sent.

   Closed

      In the Closed state, the link is available (Up), but no Open has
      occurred.  The Restart timer is not running in the Closed state.

      Upon reception of Configure-Request packets, a Terminate-Ack is
      sent.  Terminate-Acks are silently discarded to avoid creating a
      loop.

   Stopped

      The Stopped state is the Open counterpart to the Closed state.  It
      is entered when the automaton is waiting for a Down event after
      the This-Layer-Finished action, or after sending a Terminate-Ack.
      The Restart timer is not running in the Stopped state.

      Upon reception of Configure-Request packets, an appropriate
      response is sent.  Upon reception of other packets, a Terminate-
      Ack is sent.  Terminate-Acks are silently discarded to avoid
      creating a loop.

      Rationale:

         The Stopped state is a junction state for link termination,
         link configuration failure, and other automaton failure modes.
         These potentially separate states have been combined.

         There is a race condition between the Down event response (from



Simpson                                                        [Page 14]
RFC 1661                Point-to-Point Protocol                July 1994


         the This-Layer-Finished action) and the Receive-Configure-
         Request event.  When a Configure-Request arrives before the
         Down event, the Down event will supercede by returning the
         automaton to the Starting state.  This prevents attack by
         repetition.

      Implementation Option:

         After the peer fails to respond to Configure-Requests, an
         implementation MAY wait passively for the peer to send
         Configure-Requests.  In this case, the This-Layer-Finished
         action is not used for the TO- event in states Req-Sent, Ack-
         Rcvd and Ack-Sent.

         This option is useful for dedicated circuits, or circuits which
         have no status signals available, but SHOULD NOT be used for
         switched circuits.

   Closing

      In the Closing state, an attempt is made to terminate the
      connection.  A Terminate-Request has been sent and the Restart
      timer is running, but a Terminate-Ack has not yet been received.

      Upon reception of a Terminate-Ack, the Closed state is entered.
      Upon the expiration of the Restart timer, a new Terminate-Request
      is transmitted, and the Restart timer is restarted.  After the
      Restart timer has expired Max-Terminate times, the Closed state is
      entered.

   Stopping

      The Stopping state is the Open counterpart to the Closing state.
      A Terminate-Request has been sent and the Restart timer is
      running, but a Terminate-Ack has not yet been received.

      Rationale:

         The Stopping state provides a well defined opportunity to
         terminate a link before allowing new traffic.  After the link
         has terminated, a new configuration may occur via the Stopped
         or Starting states.

   Request-Sent

      In the Request-Sent state an attempt is made to configure the
      connection.  A Configure-Request has been sent and the Restart
      timer is running, but a Configure-Ack has not yet been received



Simpson                                                        [Page 15]
RFC 1661                Point-to-Point Protocol                July 1994


      nor has one been sent.

   Ack-Received

      In the Ack-Received state, a Configure-Request has been sent and a
      Configure-Ack has been received.  The Restart timer is still
      running, since a Configure-Ack has not yet been sent.

   Ack-Sent

      In the Ack-Sent state, a Configure-Request and a Configure-Ack
      have both been sent, but a Configure-Ack has not yet been
      received.  The Restart timer is running, since a Configure-Ack has
      not yet been received.

   Opened

      In the Opened state, a Configure-Ack has been both sent and
      received.  The Restart timer is not running.

      When entering the Opened state, the implementation SHOULD signal
      the upper layers that it is now Up.  Conversely, when leaving the
      Opened state, the implementation SHOULD signal the upper layers
      that it is now Down.



4.3.  Events

   Transitions and actions in the automaton are caused by events.

   Up

      This event occurs when a lower layer indicates that it is ready to
      carry packets.

      Typically, this event is used by a modem handling or calling
      process, or by some other coupling of the PPP link to the physical
      media, to signal LCP that the link is entering Link Establishment
      phase.

      It also can be used by LCP to signal each NCP that the link is
      entering Network-Layer Protocol phase.  That is, the This-Layer-Up
      action from LCP triggers the Up event in the NCP.

   Down

      This event occurs when a lower layer indicates that it is no



Simpson                                                        [Page 16]
RFC 1661                Point-to-Point Protocol                July 1994


      longer ready to carry packets.

      Typically, this event is used by a modem handling or calling
      process, or by some other coupling of the PPP link to the physical
      media, to signal LCP that the link is entering Link Dead phase.

      It also can be used by LCP to signal each NCP that the link is
      leaving Network-Layer Protocol phase.  That is, the This-Layer-
      Down action from LCP triggers the Down event in the NCP.

   Open

      This event indicates that the link is administratively available
      for traffic; that is, the network administrator (human or program)
      has indicated that the link is allowed to be Opened.  When this
      event occurs, and the link is not in the Opened state, the
      automaton attempts to send configuration packets to the peer.

      If the automaton is not able to begin configuration (the lower
      layer is Down, or a previous Close event has not completed), the
      establishment of the link is automatically delayed.

      When a Terminate-Request is received, or other events occur which
      cause the link to become unavailable, the automaton will progress
      to a state where the link is ready to re-open.  No additional
      administrative intervention is necessary.

      Implementation Option:

         Experience has shown that users will execute an additional Open
         command when they want to renegotiate the link.  This might
         indicate that new values are to be negotiated.

         Since this is not the meaning of the Open event, it is
         suggested that when an Open user command is executed in the
         Opened, Closing, Stopping, or Stopped states, the
         implementation issue a Down event, immediately followed by an
         Up event.  Care must be taken that an intervening Down event
         cannot occur from another source.

         The Down followed by an Up will cause an orderly renegotiation
         of the link, by progressing through the Starting to the
         Request-Sent state.  This will cause the renegotiation of the
         link, without any harmful side effects.

   Close

      This event indicates that the link is not available for traffic;



Simpson                                                        [Page 17]
RFC 1661                Point-to-Point Protocol                July 1994


      that is, the network administrator (human or program) has
      indicated that the link is not allowed to be Opened.  When this
      event occurs, and the link is not in the Closed state, the
      automaton attempts to terminate the connection.  Futher attempts
      to re-configure the link are denied until a new Open event occurs.

      Implementation Note:

         When authentication fails, the link SHOULD be terminated, to
         prevent attack by repetition and denial of service to other
         users.  Since the link is administratively available (by
         definition), this can be accomplished by simulating a Close
         event to the LCP, immediately followed by an Open event.  Care
         must be taken that an intervening Close event cannot occur from
         another source.

         The Close followed by an Open will cause an orderly termination
         of the link, by progressing through the Closing to the Stopping
         state, and the This-Layer-Finished action can disconnect the
         link.  The automaton waits in the Stopped or Starting states
         for the next connection attempt.

   Timeout (TO+,TO-)

      This event indicates the expiration of the Restart timer.  The
      Restart timer is used to time responses to Configure-Request and
      Terminate-Request packets.

      The TO+ event indicates that the Restart counter continues to be
      greater than zero, which triggers the corresponding Configure-
      Request or Terminate-Request packet to be retransmitted.

      The TO- event indicates that the Restart counter is not greater
      than zero, and no more packets need to be retransmitted.

   Receive-Configure-Request (RCR+,RCR-)

      This event occurs when a Configure-Request packet is received from
      the peer.  The Configure-Request packet indicates the desire to
      open a connection and may specify Configuration Options.  The
      Configure-Request packet is more fully described in a later
      section.

      The RCR+ event indicates that the Configure-Request was
      acceptable, and triggers the transmission of a corresponding
      Configure-Ack.

      The RCR- event indicates that the Configure-Request was



Simpson                                                        [Page 18]
RFC 1661                Point-to-Point Protocol                July 1994


      unacceptable, and triggers the transmission of a corresponding
      Configure-Nak or Configure-Reject.

      Implementation Note:

         These events may occur on a connection which is already in the
         Opened state.  The implementation MUST be prepared to
         immediately renegotiate the Configuration Options.

   Receive-Configure-Ack (RCA)

      This event occurs when a valid Configure-Ack packet is received
      from the peer.  The Configure-Ack packet is a positive response to
      a Configure-Request packet.  An out of sequence or otherwise
      invalid packet is silently discarded.

      Implementation Note:

         Since the correct packet has already been received before
         reaching the Ack-Rcvd or Opened states, it is extremely
         unlikely that another such packet will arrive.  As specified,
         all invalid Ack/Nak/Rej packets are silently discarded, and do
         not affect the transitions of the automaton.

         However, it is not impossible that a correctly formed packet
         will arrive through a coincidentally-timed cross-connection.
         It is more likely to be the result of an implementation error.
         At the very least, this occurance SHOULD be logged.

   Receive-Configure-Nak/Rej (RCN)

      This event occurs when a valid Configure-Nak or Configure-Reject
      packet is received from the peer.  The Configure-Nak and
      Configure-Reject packets are negative responses to a Configure-
      Request packet.  An out of sequence or otherwise invalid packet is
      silently discarded.

      Implementation Note:

         Although the Configure-Nak and Configure-Reject cause the same
         state transition in the automaton, these packets have
         significantly different effects on the Configuration Options
         sent in the resulting Configure-Request packet.

   Receive-Terminate-Request (RTR)

      This event occurs when a Terminate-Request packet is received.
      The Terminate-Request packet indicates the desire of the peer to



Simpson                                                        [Page 19]
RFC 1661                Point-to-Point Protocol                July 1994


      close the connection.

      Implementation Note:

         This event is not identical to the Close event (see above), and
         does not override the Open commands of the local network
         administrator.  The implementation MUST be prepared to receive
         a new Configure-Request without network administrator
         intervention.

   Receive-Terminate-Ack (RTA)

      This event occurs when a Terminate-Ack packet is received from the
      peer.  The Terminate-Ack packet is usually a response to a
      Terminate-Request packet.  The Terminate-Ack packet may also
      indicate that the peer is in Closed or Stopped states, and serves
      to re-synchronize the link configuration.

   Receive-Unknown-Code (RUC)

      This event occurs when an un-interpretable packet is received from
      the peer.  A Code-Reject packet is sent in response.

   Receive-Code-Reject, Receive-Protocol-Reject (RXJ+,RXJ-)

      This event occurs when a Code-Reject or a Protocol-Reject packet
      is received from the peer.

      The RXJ+ event arises when the rejected value is acceptable, such
      as a Code-Reject of an extended code, or a Protocol-Reject of a
      NCP.  These are within the scope of normal operation.  The
      implementation MUST stop sending the offending packet type.

      The RXJ- event arises when the rejected value is catastrophic,
      such as a Code-Reject of Configure-Request, or a Protocol-Reject
      of LCP!  This event communicates an unrecoverable error that
      terminates the connection.

   Receive-Echo-Request, Receive-Echo-Reply, Receive-Discard-Request
   (RXR)

      This event occurs when an Echo-Request, Echo-Reply or Discard-
      Request packet is received from the peer.  The Echo-Reply packet
      is a response to an Echo-Request packet.  There is no reply to an
      Echo-Reply or Discard-Request packet.






Simpson                                                        [Page 20]
RFC 1661                Point-to-Point Protocol                July 1994


4.4.  Actions

   Actions in the automaton are caused by events and typically indicate
   the transmission of packets and/or the starting or stopping of the
   Restart timer.

   Illegal-Event (-)

      This indicates an event that cannot occur in a properly
      implemented automaton.  The implementation has an internal error,
      which should be reported and logged.  No transition is taken, and
      the implementation SHOULD NOT reset or freeze.

   This-Layer-Up (tlu)

      This action indicates to the upper layers that the automaton is
      entering the Opened state.

      Typically, this action is used by the LCP to signal the Up event
      to a NCP, Authentication Protocol, or Link Quality Protocol, or
      MAY be used by a NCP to indicate that the link is available for
      its network layer traffic.

   This-Layer-Down (tld)

      This action indicates to the upper layers that the automaton is
      leaving the Opened state.

      Typically, this action is used by the LCP to signal the Down event
      to a NCP, Authentication Protocol, or Link Quality Protocol, or
      MAY be used by a NCP to indicate that the link is no longer
      available for its network layer traffic.

   This-Layer-Started (tls)

      This action indicates to the lower layers that the automaton is
      entering the Starting state, and the lower layer is needed for the
      link.  The lower layer SHOULD respond with an Up event when the
      lower layer is available.

      This results of this action are highly implementation dependent.

   This-Layer-Finished (tlf)

      This action indicates to the lower layers that the automaton is
      entering the Initial, Closed or Stopped states, and the lower
      layer is no longer needed for the link.  The lower layer SHOULD
      respond with a Down event when the lower layer has terminated.



Simpson                                                        [Page 21]
RFC 1661                Point-to-Point Protocol                July 1994


      Typically, this action MAY be used by the LCP to advance to the
      Link Dead phase, or MAY be used by a NCP to indicate to the LCP
      that the link may terminate when there are no other NCPs open.

      This results of this action are highly implementation dependent.

   Initialize-Restart-Count (irc)

      This action sets the Restart counter to the appropriate value
      (Max-Terminate or Max-Configure).  The counter is decremented for
      each transmission, including the first.

      Implementation Note:

         In addition to setting the Restart counter, the implementation
         MUST set the timeout period to the initial value when Restart
         timer backoff is used.

   Zero-Restart-Count (zrc)

      This action sets the Restart counter to zero.

      Implementation Note:

         This action enables the FSA to pause before proceeding to the
         desired final state, allowing traffic to be processed by the
         peer.  In addition to zeroing the Restart counter, the
         implementation MUST set the timeout period to an appropriate
         value.

   Send-Configure-Request (scr)

      A Configure-Request packet is transmitted.  This indicates the
      desire to open a connection with a specified set of Configuration
      Options.  The Restart timer is started when the Configure-Request
      packet is transmitted, to guard against packet loss.  The Restart
      counter is decremented each time a Configure-Request is sent.

   Send-Configure-Ack (sca)

      A Configure-Ack packet is transmitted.  This acknowledges the
      reception of a Configure-Request packet with an acceptable set of
      Configuration Options.

   Send-Configure-Nak (scn)

      A Configure-Nak or Configure-Reject packet is transmitted, as
      appropriate.  This negative response reports the reception of a



Simpson                                                        [Page 22]
RFC 1661                Point-to-Point Protocol                July 1994


      Configure-Request packet with an unacceptable set of Configuration
      Options.

      Configure-Nak packets are used to refuse a Configuration Option
      value, and to suggest a new, acceptable value.  Configure-Reject
      packets are used to refuse all negotiation about a Configuration
      Option, typically because it is not recognized or implemented.
      The use of Configure-Nak versus Configure-Reject is more fully
      described in the chapter on LCP Packet Formats.

   Send-Terminate-Request (str)

      A Terminate-Request packet is transmitted.  This indicates the
      desire to close a connection.  The Restart timer is started when
      the Terminate-Request packet is transmitted, to guard against
      packet loss.  The Restart counter is decremented each time a
      Terminate-Request is sent.

   Send-Terminate-Ack (sta)

      A Terminate-Ack packet is transmitted.  This acknowledges the
      reception of a Terminate-Request packet or otherwise serves to
      synchronize the automatons.

   Send-Code-Reject (scj)

      A Code-Reject packet is transmitted.  This indicates the reception
      of an unknown type of packet.

   Send-Echo-Reply (ser)

      An Echo-Reply packet is transmitted.  This acknowledges the
      reception of an Echo-Request packet.



4.5.  Loop Avoidance

   The protocol makes a reasonable attempt at avoiding Configuration
   Option negotiation loops.  However, the protocol does NOT guarantee
   that loops will not happen.  As with any negotiation, it is possible
   to configure two PPP implementations with conflicting policies that
   will never converge.  It is also possible to configure policies which
   do converge, but which take significant time to do so.  Implementors
   should keep this in mind and SHOULD implement loop detection
   mechanisms or higher level timeouts.





Simpson                                                        [Page 23]
RFC 1661                Point-to-Point Protocol                July 1994


4.6.  Counters and Timers

   Restart Timer

      There is one special timer used by the automaton.  The Restart
      timer is used to time transmissions of Configure-Request and
      Terminate-Request packets.  Expiration of the Restart timer causes
      a Timeout event, and retransmission of the corresponding
      Configure-Request or Terminate-Request packet.  The Restart timer
      MUST be configurable, but SHOULD default to three (3) seconds.

      Implementation Note:

         The Restart timer SHOULD be based on the speed of the link.
         The default value is designed for low speed (2,400 to 9,600
         bps), high switching latency links (typical telephone lines).
         Higher speed links, or links with low switching latency, SHOULD
         have correspondingly faster retransmission times.

         Instead of a constant value, the Restart timer MAY begin at an
         initial small value and increase to the configured final value.
         Each successive value less than the final value SHOULD be at
         least twice the previous value.  The initial value SHOULD be
         large enough to account for the size of the packets, twice the
         round trip time for transmission at the link speed, and at
         least an additional 100 milliseconds to allow the peer to
         process the packets before responding.  Some circuits add
         another 200 milliseconds of satellite delay.  Round trip times
         for modems operating at 14,400 bps have been measured in the
         range of 160 to more than 600 milliseconds.

   Max-Terminate

      There is one required restart counter for Terminate-Requests.
      Max-Terminate indicates the number of Terminate-Request packets
      sent without receiving a Terminate-Ack before assuming that the
      peer is unable to respond.  Max-Terminate MUST be configurable,
      but SHOULD default to two (2) transmissions.

   Max-Configure

      A similar counter is recommended for Configure-Requests.  Max-
      Configure indicates the number of Configure-Request packets sent
      without receiving a valid Configure-Ack, Configure-Nak or
      Configure-Reject before assuming that the peer is unable to
      respond.  Max-Configure MUST be configurable, but SHOULD default
      to ten (10) transmissions.




Simpson                                                        [Page 24]
RFC 1661                Point-to-Point Protocol                July 1994


   Max-Failure

      A related counter is recommended for Configure-Nak.  Max-Failure
      indicates the number of Configure-Nak packets sent without sending
      a Configure-Ack before assuming that configuration is not
      converging.  Any further Configure-Nak packets for peer requested
      options are converted to Configure-Reject packets, and locally
      desired options are no longer appended.  Max-Failure MUST be
      configurable, but SHOULD default to five (5) transmissions.










































Simpson                                                        [Page 25]
RFC 1661                Point-to-Point Protocol                July 1994


5.  LCP Packet Formats

   There are three classes of LCP packets:

      1. Link Configuration packets used to establish and configure a
         link (Configure-Request, Configure-Ack, Configure-Nak and
         Configure-Reject).

      2. Link Termination packets used to terminate a link (Terminate-
         Request and Terminate-Ack).

      3. Link Maintenance packets used to manage and debug a link
         (Code-Reject, Protocol-Reject, Echo-Request, Echo-Reply, and
         Discard-Request).

   In the interest of simplicity, there is no version field in the LCP
   packet.  A correctly functioning LCP implementation will always
   respond to unknown Protocols and Codes with an easily recognizable
   LCP packet, thus providing a deterministic fallback mechanism for
   implementations of other versions.

   Regardless of which Configuration Options are enabled, all LCP Link
   Configuration, Link Termination, and Code-Reject packets (codes 1
   through 7) are always sent as if no Configuration Options were
   negotiated.  In particular, each Configuration Option specifies a
   default value.  This ensures that such LCP packets are always
   recognizable, even when one end of the link mistakenly believes the
   link to be open.

   Exactly one LCP packet is encapsulated in the PPP Information field,
   where the PPP Protocol field indicates type hex c021 (Link Control
   Protocol).

   A summary of the Link Control Protocol packet format is shown below.
   The fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Code      |  Identifier   |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Data ...
   +-+-+-+-+


   Code

      The Code field is one octet, and identifies the kind of LCP



Simpson                                                        [Page 26]
RFC 1661                Point-to-Point Protocol                July 1994


      packet.  When a packet is received with an unknown Code field, a
      Code-Reject packet is transmitted.

      Up-to-date values of the LCP Code field are specified in the most
      recent "Assigned Numbers" RFC [2].  This document concerns the
      following values:

         1       Configure-Request
         2       Configure-Ack
         3       Configure-Nak
         4       Configure-Reject
         5       Terminate-Request
         6       Terminate-Ack
         7       Code-Reject
         8       Protocol-Reject
         9       Echo-Request
         10      Echo-Reply
         11      Discard-Request


   Identifier

      The Identifier field is one octet, and aids in matching requests
      and replies.  When a packet is received with an invalid Identifier
      field, the packet is silently discarded without affecting the
      automaton.

   Length

      The Length field is two octets, and indicates the length of the
      LCP packet, including the Code, Identifier, Length and Data
      fields.  The Length MUST NOT exceed the MRU of the link.

      Octets outside the range of the Length field are treated as
      padding and are ignored on reception.  When a packet is received
      with an invalid Length field, the packet is silently discarded
      without affecting the automaton.

   Data

      The Data field is zero or more octets, as indicated by the Length
      field.  The format of the Data field is determined by the Code
      field.








Simpson                                                        [Page 27]
RFC 1661                Point-to-Point Protocol                July 1994


5.1.  Configure-Request

   Description

      An implementation wishing to open a connection MUST transmit a
      Configure-Request.  The Options field is filled with any desired
      changes to the link defaults.  Configuration Options SHOULD NOT be
      included with default values.

      Upon reception of a Configure-Request, an appropriate reply MUST
      be transmitted.

   A summary of the Configure-Request packet format is shown below.  The
   fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Code      |  Identifier   |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Options ...
   +-+-+-+-+


   Code

      1 for Configure-Request.

   Identifier

      The Identifier field MUST be changed whenever the contents of the
      Options field changes, and whenever a valid reply has been
      received for a previous request.  For retransmissions, the
      Identifier MAY remain unchanged.

   Options

      The options field is variable in length, and contains the list of
      zero or more Configuration Options that the sender desires to
      negotiate.  All Configuration Options are always negotiated
      simultaneously.  The format of Configuration Options is further
      described in a later chapter.









Simpson                                                        [Page 28]
RFC 1661                Point-to-Point Protocol                July 1994


5.2.  Configure-Ack

   Description

      If every Configuration Option received in a Configure-Request is
      recognizable and all values are acceptable, then the
      implementation MUST transmit a Configure-Ack.  The acknowledged
      Configuration Options MUST NOT be reordered or modified in any
      way.

      On reception of a Configure-Ack, the Identifier field MUST match
      that of the last transmitted Configure-Request.  Additionally, the
      Configuration Options in a Configure-Ack MUST exactly match those
      of the last transmitted Configure-Request.  Invalid packets are
      silently discarded.

   A summary of the Configure-Ack packet format is shown below.  The
   fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Code      |  Identifier   |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Options ...
   +-+-+-+-+


   Code

      2 for Configure-Ack.

   Identifier

      The Identifier field is a copy of the Identifier field of the
      Configure-Request which caused this Configure-Ack.

   Options

      The Options field is variable in length, and contains the list of
      zero or more Configuration Options that the sender is
      acknowledging.  All Configuration Options are always acknowledged
      simultaneously.








Simpson                                                        [Page 29]
RFC 1661                Point-to-Point Protocol                July 1994


5.3.  Configure-Nak

   Description

      If every instance of the received Configuration Options is
      recognizable, but some values are not acceptable, then the
      implementation MUST transmit a Configure-Nak.  The Options field
      is filled with only the unacceptable Configuration Options from
      the Configure-Request.  All acceptable Configuration Options are
      filtered out of the Configure-Nak, but otherwise the Configuration
      Options from the Configure-Request MUST NOT be reordered.

      Options which have no value fields (boolean options) MUST use the
      Configure-Reject reply instead.

      Each Configuration Option which is allowed only a single instance
      MUST be modified to a value acceptable to the Configure-Nak
      sender.  The default value MAY be used, when this differs from the
      requested value.

      When a particular type of Configuration Option can be listed more
      than once with different values, the Configure-Nak MUST include a
      list of all values for that option which are acceptable to the
      Configure-Nak sender.  This includes acceptable values that were
      present in the Configure-Request.

      Finally, an implementation may be configured to request the
      negotiation of a specific Configuration Option.  If that option is
      not listed, then that option MAY be appended to the list of Nak'd
      Configuration Options, in order to prompt the peer to include that
      option in its next Configure-Request packet.  Any value fields for
      the option MUST indicate values acceptable to the Configure-Nak
      sender.

      On reception of a Configure-Nak, the Identifier field MUST match
      that of the last transmitted Configure-Request.  Invalid packets
      are silently discarded.

      Reception of a valid Configure-Nak indicates that when a new
      Configure-Request is sent, the Configuration Options MAY be
      modified as specified in the Configure-Nak.  When multiple
      instances of a Configuration Option are present, the peer SHOULD
      select a single value to include in its next Configure-Request
      packet.

      Some Configuration Options have a variable length.  Since the
      Nak'd Option has been modified by the peer, the implementation
      MUST be able to handle an Option length which is different from



Simpson                                                        [Page 30]
RFC 1661                Point-to-Point Protocol                July 1994


      the original Configure-Request.

   A summary of the Configure-Nak packet format is shown below.  The
   fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Code      |  Identifier   |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Options ...
   +-+-+-+-+


   Code

      3 for Configure-Nak.

   Identifier

      The Identifier field is a copy of the Identifier field of the
      Configure-Request which caused this Configure-Nak.

   Options

      The Options field is variable in length, and contains the list of
      zero or more Configuration Options that the sender is Nak'ing.
      All Configuration Options are always Nak'd simultaneously.



5.4.  Configure-Reject

   Description

      If some Configuration Options received in a Configure-Request are
      not recognizable or are not acceptable for negotiation (as
      configured by a network administrator), then the implementation
      MUST transmit a Configure-Reject.  The Options field is filled
      with only the unacceptable Configuration Options from the
      Configure-Request.  All recognizable and negotiable Configuration
      Options are filtered out of the Configure-Reject, but otherwise
      the Configuration Options MUST NOT be reordered or modified in any
      way.

      On reception of a Configure-Reject, the Identifier field MUST
      match that of the last transmitted Configure-Request.
      Additionally, the Configuration Options in a Configure-Reject MUST



Simpson                                                        [Page 31]
RFC 1661                Point-to-Point Protocol                July 1994


      be a proper subset of those in the last transmitted Configure-
      Request.  Invalid packets are silently discarded.

      Reception of a valid Configure-Reject indicates that when a new
      Configure-Request is sent, it MUST NOT include any of the
      Configuration Options listed in the Configure-Reject.

   A summary of the Configure-Reject packet format is shown below.  The
   fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Code      |  Identifier   |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Options ...
   +-+-+-+-+


   Code

      4 for Configure-Reject.

   Identifier

      The Identifier field is a copy of the Identifier field of the
      Configure-Request which caused this Configure-Reject.

   Options

      The Options field is variable in length, and contains the list of
      zero or more Configuration Options that the sender is rejecting.
      All Configuration Options are always rejected simultaneously.


















Simpson                                                        [Page 32]
RFC 1661                Point-to-Point Protocol                July 1994


5.5.  Terminate-Request and Terminate-Ack

   Description

      LCP includes Terminate-Request and Terminate-Ack Codes in order to
      provide a mechanism for closing a connection.

      An implementation wishing to close a connection SHOULD transmit a
      Terminate-Request.  Terminate-Request packets SHOULD continue to
      be sent until Terminate-Ack is received, the lower layer indicates
      that it has gone down, or a sufficiently large number have been
      transmitted such that the peer is down with reasonable certainty.

      Upon reception of a Terminate-Request, a Terminate-Ack MUST be
      transmitted.

      Reception of an unelicited Terminate-Ack indicates that the peer
      is in the Closed or Stopped states, or is otherwise in need of
      re-negotiation.

   A summary of the Terminate-Request and Terminate-Ack packet formats
   is shown below.  The fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Code      |  Identifier   |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Data ...
   +-+-+-+-+


   Code

      5 for Terminate-Request;

      6 for Terminate-Ack.

   Identifier

      On transmission, the Identifier field MUST be changed whenever the
      content of the Data field changes, and whenever a valid reply has
      been received for a previous request.  For retransmissions, the
      Identifier MAY remain unchanged.

      On reception, the Identifier field of the Terminate-Request is
      copied into the Identifier field of the Terminate-Ack packet.




Simpson                                                        [Page 33]
RFC 1661                Point-to-Point Protocol                July 1994


   Data

      The Data field is zero or more octets, and contains uninterpreted
      data for use by the sender.  The data may consist of any binary
      value.  The end of the field is indicated by the Length.



5.6.  Code-Reject

   Description

      Reception of a LCP packet with an unknown Code indicates that the
      peer is operating with a different version.  This MUST be reported
      back to the sender of the unknown Code by transmitting a Code-
      Reject.

      Upon reception of the Code-Reject of a code which is fundamental
      to this version of the protocol, the implementation SHOULD report
      the problem and drop the connection, since it is unlikely that the
      situation can be rectified automatically.

   A summary of the Code-Reject packet format is shown below.  The
   fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Code      |  Identifier   |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Rejected-Packet ...
   +-+-+-+-+-+-+-+-+


   Code

      7 for Code-Reject.

   Identifier

      The Identifier field MUST be changed for each Code-Reject sent.

   Rejected-Packet

      The Rejected-Packet field contains a copy of the LCP packet which
      is being rejected.  It begins with the Information field, and does
      not include any Data Link Layer headers nor an FCS.  The
      Rejected-Packet MUST be truncated to comply with the peer's



Simpson                                                        [Page 34]
RFC 1661                Point-to-Point Protocol                July 1994


      established MRU.



5.7.  Protocol-Reject

   Description

      Reception of a PPP packet with an unknown Protocol field indicates
      that the peer is attempting to use a protocol which is
      unsupported.  This usually occurs when the peer attempts to
      configure a new protocol.  If the LCP automaton is in the Opened
      state, then this MUST be reported back to the peer by transmitting
      a Protocol-Reject.

      Upon reception of a Protocol-Reject, the implementation MUST stop
      sending packets of the indicated protocol at the earliest
      opportunity.

      Protocol-Reject packets can only be sent in the LCP Opened state.
      Protocol-Reject packets received in any state other than the LCP
      Opened state SHOULD be silently discarded.

   A summary of the Protocol-Reject packet format is shown below.  The
   fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Code      |  Identifier   |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Rejected-Protocol       |      Rejected-Information ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


   Code

      8 for Protocol-Reject.

   Identifier

      The Identifier field MUST be changed for each Protocol-Reject
      sent.

   Rejected-Protocol

      The Rejected-Protocol field is two octets, and contains the PPP
      Protocol field of the packet which is being rejected.



Simpson                                                        [Page 35]
RFC 1661                Point-to-Point Protocol                July 1994


   Rejected-Information

      The Rejected-Information field contains a copy of the packet which
      is being rejected.  It begins with the Information field, and does
      not include any Data Link Layer headers nor an FCS.  The
      Rejected-Information MUST be truncated to comply with the peer's
      established MRU.



5.8.  Echo-Request and Echo-Reply

   Description

      LCP includes Echo-Request and Echo-Reply Codes in order to provide
      a Data Link Layer loopback mechanism for use in exercising both
      directions of the link.  This is useful as an aid in debugging,
      link quality determination, performance testing, and for numerous
      other functions.

      Upon reception of an Echo-Request in the LCP Opened state, an
      Echo-Reply MUST be transmitted.

      Echo-Request and Echo-Reply packets MUST only be sent in the LCP
      Opened state.  Echo-Request and Echo-Reply packets received in any
      state other than the LCP Opened state SHOULD be silently
      discarded.


   A summary of the Echo-Request and Echo-Reply packet formats is shown
   below.  The fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Code      |  Identifier   |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         Magic-Number                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Data ...
   +-+-+-+-+


   Code

      9 for Echo-Request;

      10 for Echo-Reply.



Simpson                                                        [Page 36]
RFC 1661                Point-to-Point Protocol                July 1994


   Identifier

      On transmission, the Identifier field MUST be changed whenever the
      content of the Data field changes, and whenever a valid reply has
      been received for a previous request.  For retransmissions, the
      Identifier MAY remain unchanged.

      On reception, the Identifier field of the Echo-Request is copied
      into the Identifier field of the Echo-Reply packet.

   Magic-Number

      The Magic-Number field is four octets, and aids in detecting links
      which are in the looped-back condition.  Until the Magic-Number
      Configuration Option has been successfully negotiated, the Magic-
      Number MUST be transmitted as zero.  See the Magic-Number
      Configuration Option for further explanation.

   Data

      The Data field is zero or more octets, and contains uninterpreted
      data for use by the sender.  The data may consist of any binary
      value.  The end of the field is indicated by the Length.



5.9.  Discard-Request

   Description

      LCP includes a Discard-Request Code in order to provide a Data
      Link Layer sink mechanism for use in exercising the local to
      remote direction of the link.  This is useful as an aid in
      debugging, performance testing, and for numerous other functions.

      Discard-Request packets MUST only be sent in the LCP Opened state.
      On reception, the receiver MUST silently discard any Discard-
      Request that it receives.













Simpson                                                        [Page 37]
RFC 1661                Point-to-Point Protocol                July 1994


   A summary of the Discard-Request packet format is shown below.  The
   fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Code      |  Identifier   |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         Magic-Number                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Data ...
   +-+-+-+-+

   Code

      11 for Discard-Request.

   Identifier

      The Identifier field MUST be changed for each Discard-Request
      sent.

   Magic-Number

      The Magic-Number field is four octets, and aids in detecting links
      which are in the looped-back condition.  Until the Magic-Number
      Configuration Option has been successfully negotiated, the Magic-
      Number MUST be transmitted as zero.  See the Magic-Number
      Configuration Option for further explanation.

   Data

      The Data field is zero or more octets, and contains uninterpreted
      data for use by the sender.  The data may consist of any binary
      value.  The end of the field is indicated by the Length.
















Simpson                                                        [Page 38]
RFC 1661                Point-to-Point Protocol                July 1994


6.  LCP Configuration Options

   LCP Configuration Options allow negotiation of modifications to the
   default characteristics of a point-to-point link.  If a Configuration
   Option is not included in a Configure-Request packet, the default
   value for that Configuration Option is assumed.

   Some Configuration Options MAY be listed more than once.  The effect
   of this is Configuration Option specific, and is specified by each
   such Configuration Option description.  (None of the Configuration
   Options in this specification can be listed more than once.)

   The end of the list of Configuration Options is indicated by the
   Length field of the LCP packet.

   Unless otherwise specified, all Configuration Options apply in a
   half-duplex fashion; typically, in the receive direction of the link
   from the point of view of the Configure-Request sender.

   Design Philosophy

      The options indicate additional capabilities or requirements of
      the implementation that is requesting the option.  An
      implementation which does not understand any option SHOULD
      interoperate with one which implements every option.

      A default is specified for each option which allows the link to
      correctly function without negotiation of the option, although
      perhaps with less than optimal performance.

      Except where explicitly specified, acknowledgement of an option
      does not require the peer to take any additional action other than
      the default.

      It is not necessary to send the default values for the options in
      a Configure-Request.


   A summary of the Configuration Option format is shown below.  The
   fields are transmitted from left to right.

    0                   1
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Type      |    Length     |    Data ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+





Simpson                                                        [Page 39]
RFC 1661                Point-to-Point Protocol                July 1994


   Type

      The Type field is one octet, and indicates the type of
      Configuration Option.  Up-to-date values of the LCP Option Type
      field are specified in the most recent "Assigned Numbers" RFC [2].
      This document concerns the following values:

         0       RESERVED
         1       Maximum-Receive-Unit
         3       Authentication-Protocol
         4       Quality-Protocol
         5       Magic-Number
         7       Protocol-Field-Compression
         8       Address-and-Control-Field-Compression


   Length

      The Length field is one octet, and indicates the length of this
      Configuration Option including the Type, Length and Data fields.

      If a negotiable Configuration Option is received in a Configure-
      Request, but with an invalid or unrecognized Length, a Configure-
      Nak SHOULD be transmitted which includes the desired Configuration
      Option with an appropriate Length and Data.

   Data

      The Data field is zero or more octets, and contains information
      specific to the Configuration Option.  The format and length of
      the Data field is determined by the Type and Length fields.

      When the Data field is indicated by the Length to extend beyond
      the end of the Information field, the entire packet is silently
      discarded without affecting the automaton.
















Simpson                                                        [Page 40]
RFC 1661                Point-to-Point Protocol                July 1994


6.1.  Maximum-Receive-Unit (MRU)

   Description

      This Configuration Option may be sent to inform the peer that the
      implementation can receive larger packets, or to request that the
      peer send smaller packets.

      The default value is 1500 octets.  If smaller packets are
      requested, an implementation MUST still be able to receive the
      full 1500 octet information field in case link synchronization is
      lost.

      Implementation Note:

         This option is used to indicate an implementation capability.
         The peer is not required to maximize the use of the capacity.
         For example, when a MRU is indicated which is 2048 octets, the
         peer is not required to send any packet with 2048 octets.  The
         peer need not Configure-Nak to indicate that it will only send
         smaller packets, since the implementation will always require
         support for at least 1500 octets.

   A summary of the Maximum-Receive-Unit Configuration Option format is
   shown below.  The fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Type      |    Length     |      Maximum-Receive-Unit     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


   Type

      1

   Length

      4

   Maximum-Receive-Unit

      The Maximum-Receive-Unit field is two octets, and specifies the
      maximum number of octets in the Information and Padding fields.
      It does not include the framing, Protocol field, FCS, nor any
      transparency bits or bytes.




Simpson                                                        [Page 41]
RFC 1661                Point-to-Point Protocol                July 1994


6.2.  Authentication-Protocol

   Description

      On some links it may be desirable to require a peer to
      authenticate itself before allowing network-layer protocol packets
      to be exchanged.

      This Configuration Option provides a method to negotiate the use
      of a specific protocol for authentication.  By default,
      authentication is not required.

      An implementation MUST NOT include multiple Authentication-
      Protocol Configuration Options in its Configure-Request packets.
      Instead, it SHOULD attempt to configure the most desirable
      protocol first.  If that protocol is Configure-Nak'd, then the
      implementation SHOULD attempt the next most desirable protocol in
      the next Configure-Request.

      The implementation sending the Configure-Request is indicating
      that it expects authentication from its peer.  If an
      implementation sends a Configure-Ack, then it is agreeing to
      authenticate with the specified protocol.  An implementation
      receiving a Configure-Ack SHOULD expect the peer to authenticate
      with the acknowledged protocol.

      There is no requirement that authentication be full-duplex or that
      the same protocol be used in both directions.  It is perfectly
      acceptable for different protocols to be used in each direction.
      This will, of course, depend on the specific protocols negotiated.

   A summary of the Authentication-Protocol Configuration Option format
   is shown below.  The fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Type      |    Length     |     Authentication-Protocol   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Data ...
   +-+-+-+-+


   Type

      3





Simpson                                                        [Page 42]
RFC 1661                Point-to-Point Protocol                July 1994


   Length

      >= 4

   Authentication-Protocol

      The Authentication-Protocol field is two octets, and indicates the
      authentication protocol desired.  Values for this field are always
      the same as the PPP Protocol field values for that same
      authentication protocol.

      Up-to-date values of the Authentication-Protocol field are
      specified in the most recent "Assigned Numbers" RFC [2].  Current
      values are assigned as follows:

      Value (in hex)  Protocol

      c023            Password Authentication Protocol
      c223            Challenge Handshake Authentication Protocol


   Data

      The Data field is zero or more octets, and contains additional
      data as determined by the particular protocol.



6.3.  Quality-Protocol

   Description

      On some links it may be desirable to determine when, and how
      often, the link is dropping data.  This process is called link
      quality monitoring.

      This Configuration Option provides a method to negotiate the use
      of a specific protocol for link quality monitoring.  By default,
      link quality monitoring is disabled.

      The implementation sending the Configure-Request is indicating
      that it expects to receive monitoring information from its peer.
      If an implementation sends a Configure-Ack, then it is agreeing to
      send the specified protocol.  An implementation receiving a
      Configure-Ack SHOULD expect the peer to send the acknowledged
      protocol.

      There is no requirement that quality monitoring be full-duplex or



Simpson                                                        [Page 43]
RFC 1661                Point-to-Point Protocol                July 1994


      that the same protocol be used in both directions.  It is
      perfectly acceptable for different protocols to be used in each
      direction.  This will, of course, depend on the specific protocols
      negotiated.

   A summary of the Quality-Protocol Configuration Option format is
   shown below.  The fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Type      |    Length     |        Quality-Protocol       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Data ...
   +-+-+-+-+


   Type

      4

   Length

      >= 4

   Quality-Protocol

      The Quality-Protocol field is two octets, and indicates the link
      quality monitoring protocol desired.  Values for this field are
      always the same as the PPP Protocol field values for that same
      monitoring protocol.

      Up-to-date values of the Quality-Protocol field are specified in
      the most recent "Assigned Numbers" RFC [2].  Current values are
      assigned as follows:

      Value (in hex)  Protocol

      c025            Link Quality Report


   Data

      The Data field is zero or more octets, and contains additional
      data as determined by the particular protocol.






Simpson                                                        [Page 44]
RFC 1661                Point-to-Point Protocol                July 1994


6.4.  Magic-Number

   Description

      This Configuration Option provides a method to detect looped-back
      links and other Data Link Layer anomalies.  This Configuration
      Option MAY be required by some other Configuration Options such as
      the Quality-Protocol Configuration Option.  By default, the
      Magic-Number is not negotiated, and zero is inserted where a
      Magic-Number might otherwise be used.

      Before this Configuration Option is requested, an implementation
      MUST choose its Magic-Number.  It is recommended that the Magic-
      Number be chosen in the most random manner possible in order to
      guarantee with very high probability that an implementation will
      arrive at a unique number.  A good way to choose a unique random
      number is to start with a unique seed.  Suggested sources of
      uniqueness include machine serial numbers, other network hardware
      addresses, time-of-day clocks, etc.  Particularly good random
      number seeds are precise measurements of the inter-arrival time of
      physical events such as packet reception on other connected
      networks, server response time, or the typing rate of a human
      user.  It is also suggested that as many sources as possible be
      used simultaneously.

      When a Configure-Request is received with a Magic-Number
      Configuration Option, the received Magic-Number is compared with
      the Magic-Number of the last Configure-Request sent to the peer.
      If the two Magic-Numbers are different, then the link is not
      looped-back, and the Magic-Number SHOULD be acknowledged.  If the
      two Magic-Numbers are equal, then it is possible, but not certain,
      that the link is looped-back and that this Configure-Request is
      actually the one last sent.  To determine this, a Configure-Nak
      MUST be sent specifying a different Magic-Number value.  A new
      Configure-Request SHOULD NOT be sent to the peer until normal
      processing would cause it to be sent (that is, until a Configure-
      Nak is received or the Restart timer runs out).

      Reception of a Configure-Nak with a Magic-Number different from
      that of the last Configure-Nak sent to the peer proves that a link
      is not looped-back, and indicates a unique Magic-Number.  If the
      Magic-Number is equal to the one sent in the last Configure-Nak,
      the possibility of a looped-back link is increased, and a new
      Magic-Number MUST be chosen.  In either case, a new Configure-
      Request SHOULD be sent with the new Magic-Number.

      If the link is indeed looped-back, this sequence (transmit
      Configure-Request, receive Configure-Request, transmit Configure-



Simpson                                                        [Page 45]
RFC 1661                Point-to-Point Protocol                July 1994


      Nak, receive Configure-Nak) will repeat over and over again.  If
      the link is not looped-back, this sequence might occur a few
      times, but it is extremely unlikely to occur repeatedly.  More
      likely, the Magic-Numbers chosen at either end will quickly
      diverge, terminating the sequence.  The following table shows the
      probability of collisions assuming that both ends of the link
      select Magic-Numbers with a perfectly uniform distribution:

         Number of Collisions        Probability
         --------------------   ---------------------
                 1              1/2**32    = 2.3 E-10
                 2              1/2**32**2 = 5.4 E-20
                 3              1/2**32**3 = 1.3 E-29


      Good sources of uniqueness or randomness are required for this
      divergence to occur.  If a good source of uniqueness cannot be
      found, it is recommended that this Configuration Option not be
      enabled; Configure-Requests with the option SHOULD NOT be
      transmitted and any Magic-Number Configuration Options which the
      peer sends SHOULD be either acknowledged or rejected.  In this
      case, looped-back links cannot be reliably detected by the
      implementation, although they may still be detectable by the peer.

      If an implementation does transmit a Configure-Request with a
      Magic-Number Configuration Option, then it MUST NOT respond with a
      Configure-Reject when it receives a Configure-Request with a
      Magic-Number Configuration Option.  That is, if an implementation
      desires to use Magic Numbers, then it MUST also allow its peer to
      do so.  If an implementation does receive a Configure-Reject in
      response to a Configure-Request, it can only mean that the link is
      not looped-back, and that its peer will not be using Magic-
      Numbers.  In this case, an implementation SHOULD act as if the
      negotiation had been successful (as if it had instead received a
      Configure-Ack).

      The Magic-Number also may be used to detect looped-back links
      during normal operation, as well as during Configuration Option
      negotiation.  All LCP Echo-Request, Echo-Reply, and Discard-
      Request packets have a Magic-Number field.  If Magic-Number has
      been successfully negotiated, an implementation MUST transmit
      these packets with the Magic-Number field set to its negotiated
      Magic-Number.

      The Magic-Number field of these packets SHOULD be inspected on
      reception.  All received Magic-Number fields MUST be equal to
      either zero or the peer's unique Magic-Number, depending on
      whether or not the peer negotiated a Magic-Number.



Simpson                                                        [Page 46]
RFC 1661                Point-to-Point Protocol                July 1994


      Reception of a Magic-Number field equal to the negotiated local
      Magic-Number indicates a looped-back link.  Reception of a Magic-
      Number other than the negotiated local Magic-Number, the peer's
      negotiated Magic-Number, or zero if the peer didn't negotiate one,
      indicates a link which has been (mis)configured for communications
      with a different peer.

      Procedures for recovery from either case are unspecified, and may
      vary from implementation to implementation.  A somewhat
      pessimistic procedure is to assume a LCP Down event.  A further
      Open event will begin the process of re-establishing the link,
      which can't complete until the looped-back condition is
      terminated, and Magic-Numbers are successfully negotiated.  A more
      optimistic procedure (in the case of a looped-back link) is to
      begin transmitting LCP Echo-Request packets until an appropriate
      Echo-Reply is received, indicating a termination of the looped-
      back condition.

   A summary of the Magic-Number Configuration Option format is shown
   below.  The fields are transmitted from left to right.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Type      |    Length     |          Magic-Number
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         Magic-Number (cont)       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


   Type

      5

   Length

      6

   Magic-Number

      The Magic-Number field is four octets, and indicates a number
      which is very likely to be unique to one end of the link.  A
      Magic-Number of zero is illegal and MUST always be Nak'd, if it is
      not Rejected outright.







Simpson                                                        [Page 47]
RFC 1661                Point-to-Point Protocol                July 1994


6.5.  Protocol-Field-Compression (PFC)

   Description

      This Configuration Option provides a method to negotiate the
      compression of the PPP Protocol field.  By default, all
      implementations MUST transmit packets with two octet PPP Protocol
      fields.

      PPP Protocol field numbers are chosen such that some values may be
      compressed into a single octet form which is clearly
      distinguishable from the two octet form.  This Configuration
      Option is sent to inform the peer that the implementation can
      receive such single octet Protocol fields.

      As previously mentioned, the Protocol field uses an extension
      mechanism consistent with the ISO 3309 extension mechanism for the
      Address field; the Least Significant Bit (LSB) of each octet is
      used to indicate extension of the Protocol field.  A binary "0" as
      the LSB indicates that the Protocol field continues with the
      following octet.  The presence of a binary "1" as the LSB marks
      the last octet of the Protocol field.  Notice that any number of
      "0" octets may be prepended to the field, and will still indicate
      the same value (consider the two binary representations for 3,
      00000011 and 00000000 00000011).

      When using low speed links, it is desirable to conserve bandwidth
      by sending as little redundant data as possible.  The Protocol-
      Field-Compression Configuration Option allows a trade-off between
      implementation simplicity and bandwidth efficiency.  If
      successfully negotiated, the ISO 3309 extension mechanism may be
      used to compress the Protocol field to one octet instead of two.
      The large majority of packets are compressible since data
      protocols are typically assigned with Protocol field values less
      than 256.

      Compressed Protocol fields MUST NOT be transmitted unless this
      Configuration Option has been negotiated.  When negotiated, PPP
      implementations MUST accept PPP packets with either double-octet
      or single-octet Protocol fields, and MUST NOT distinguish between
      them.

      The Protocol field is never compressed when sending any LCP
      packet.  This rule guarantees unambiguous recognition of LCP
      packets.

      When a Protocol field is compressed, the Data Link Layer FCS field
      is calculated on the compressed frame, not the original



Simpson                                                        [Page 48]
RFC 1661                Point-to-Point Protocol                July 1994


      uncompressed frame.

   A summary of the Protocol-Field-Compression Configuration Option
   format is shown below.  The fields are transmitted from left to
   right.

    0                   1
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Type      |    Length     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


   Type

      7

   Length

      2































Simpson                                                        [Page 49]
RFC 1661                Point-to-Point Protocol                July 1994


6.6.  Address-and-Control-Field-Compression (ACFC)

   Description

      This Configuration Option provides a method to negotiate the
      compression of the Data Link Layer Address and Control fields.  By
      default, all implementations MUST transmit frames with Address and
      Control fields appropriate to the link framing.

      Since these fields usually have constant values for point-to-point
      links, they are easily compressed.  This Configuration Option is
      sent to inform the peer that the implementation can receive
      compressed Address and Control fields.

      If a compressed frame is received when Address-and-Control-Field-
      Compression has not been negotiated, the implementation MAY
      silently discard the frame.

      The Address and Control fields MUST NOT be compressed when sending
      any LCP packet.  This rule guarantees unambiguous recognition of
      LCP packets.

      When the Address and Control fields are compressed, the Data Link
      Layer FCS field is calculated on the compressed frame, not the
      original uncompressed frame.

   A summary of the Address-and-Control-Field-Compression configuration
   option format is shown below.  The fields are transmitted from left
   to right.

    0                   1
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Type      |    Length     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


   Type

      8

   Length

      2







Simpson                                                        [Page 50]
RFC 1661                Point-to-Point Protocol                July 1994


Security Considerations

   Security issues are briefly discussed in sections concerning the
   Authentication Phase, the Close event, and the Authentication-
   Protocol Configuration Option.



References

   [1]   Perkins, D., "Requirements for an Internet Standard Point-to-
         Point Protocol", RFC 1547, Carnegie Mellon University,
         December 1993.

   [2]   Reynolds, J., and Postel, J., "Assigned Numbers", STD 2, RFC
         1340, USC/Information Sciences Institute, July 1992.


Acknowledgements

   This document is the product of the Point-to-Point Protocol Working
   Group of the Internet Engineering Task Force (IETF).  Comments should
   be submitted to the ietf-ppp@merit.edu mailing list.

   Much of the text in this document is taken from the working group
   requirements [1]; and RFCs 1171 & 1172, by Drew Perkins while at
   Carnegie Mellon University, and by Russ Hobby of the University of
   California at Davis.

   William Simpson was principally responsible for introducing
   consistent terminology and philosophy, and the re-design of the phase
   and negotiation state machines.

   Many people spent significant time helping to develop the Point-to-
   Point Protocol.  The complete list of people is too numerous to list,
   but the following people deserve special thanks: Rick Adams, Ken
   Adelman, Fred Baker, Mike Ballard, Craig Fox, Karl Fox, Phill Gross,
   Kory Hamzeh, former WG chair Russ Hobby, David Kaufman, former WG
   chair Steve Knowles, Mark Lewis, former WG chair Brian Lloyd, John
   LoVerso, Bill Melohn, Mike Patton, former WG chair Drew Perkins, Greg
   Satz, John Shriver, Vernon Schryver, and Asher Waldfogel.

   Special thanks to Morning Star Technologies for providing computing
   resources and network access support for writing this specification.







Simpson                                                        [Page 51]
RFC 1661                Point-to-Point Protocol                July 1994


Chair's Address

   The working group can be contacted via the current chair:

      Fred Baker
      Advanced Computer Communications
      315 Bollay Drive
      Santa Barbara, California  93117

      fbaker@acc.com



Editor's Address

   Questions about this memo can also be directed to:

      William Allen Simpson
      Daydreamer
      Computer Systems Consulting Services
      1384 Fontaine
      Madison Heights, Michigan  48071

      Bill.Simpson@um.cc.umich.edu
          bsimpson@MorningStar.com


























Simpson                                                        [Page 52]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\svr_setup.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft XONLINE LAB - SERVER MACHINE SETUP Title _PID_HLINKSXONLINE LAB - SERVER MACHINE SETUP Sean Wohlgemuth Normal.dot Sean Wohlgemuth Microsoft Word 9.0XONLINE LAB - SERVER MACHINE SETUP Revision History Author Comment 10/13/00  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth Initial Draft 10/26/00  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth Updated Owners 10/30/00  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth Updated Security Policy Owners  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth SUMMARY This document outlines the installation procedure that should be followed when installing a server machines for use in the Xonline lab.  Adherence to this document during machine setup will result in a server installation that mimics the installations deployed at the Canyon Park data center.  A few utilities have been added for testing and are denoted with the (Lab Only) suffix in that section s header. MAKING A NETWORK BOOT DISK Go to   HYPERLINK "http://qtools"  http://qtools Select on the   HYPERLINK "http://qtools/webimage/websetup.exe"  http://qtools/webimage/websetup.exe  hyperlink to install WebImage on the machine you are making the boot disk from. Select "Boot Disk Images" from the menu. Select "Network Boot Disks". Select AP3-1.144 boot disk image located at   HYPERLINK "http://qtools/images/35/netdisks/EUS-CT1.144"  http://qtools/images/35/netdisks/EUS-CT1.144 Insert a formatted blank floppy disk in drive A. Select A Drive from the WebImage dialog. After boot disk is completed, insert boot disk in target install machine. PARTITIONING THE DISKS Boot the target machine with the boot disk. Select the "Command Prompt with DOS Utilities" startup option from the boot disk menu. At the command prompt, run "fdisk". Select "Y" for support of Large Disks. Create target machine partitions and set the first partition on the first disk to ACTIVE. (Recommendation is that first partition on the first disk should be 4G and remaining space is allocated to second partition; subsequent drives to additional partitions). Exit fdisk. Reboot the machine keeping the boot disk in the bootable floppy drive. Select the "Command Prompt with DOS Utilities" startup option from the boot disk menu. At the command prompt, run "format c: /u" and answer Yes to the subsequent question. When prompted for a volume label, press enter for none. When the format is complete, keep the boot disk in the bootable floppy drive. INSTALLING THE OPERATING SYSTEM Boot the target machine with the boot disk. Select the "Desktop Setting Mode" startup option from the boot disk menu. If Apsetup did not detect your network card, try the alternate apsetup disk for lesser known NICS before proceeding. Provide the username: xboxlab. Provide the password: (see system administrator for xboxlab password). Provide the domain: Redmond. Select "Net Connect Only" option. Select Login. At the command prompt, run "net use * \\cpitggmasa02\gmas". For this example we will assume that this share mapped to F:. Run "f:". Run "cd gold\ntbuilds\win2k". Run "w2kinst net c c winnt [server name] redmond tsra addit redmond\xboxlab password" where [server name] is to be the name of this box and password is the xboxlab password (see system administrator for xboxlab password). Remove the boot disk from the bootable floppy drive. POST OS INSTALL CONFIGURATION FIRST TIME LOGIN Login as "administrator" with password "ITG2install!". WINDOWS 2000  CONFIGURE YOUR SERVER  DIALOG Select "One or more servers already running in my network". Press next. Unselect "Show this screen at startup" and close the dialog. CHANGE PASSWORD Press Ctrl-Alt-Del, select "Change Password.." and set the password (see system administrator for administrator password). FORMAT NON BOOT DRIVES Format any remaining drives (drives other than the boot drive) as NTFS. ADMINISTRATORS (Lab Only) From the start menu, select Program, Administrative Tools, Computer Management. Select Local Users and Groups, Groups, Administrators. Select Add.. Type redmond\xboxlab (use xboxlab credentials) Now, remove "Redmond\Domain Administrators" from the list of Administrators. Logoff as localhost\Administrator and Login as Remdond\xboxlab user. Select No to install any virus software and answer the "Windows 2000 Configure Your Server Dialog" as you did above. From the start menu, select Programs, Administratrive Tools, Local Security Settings. Double-click  Local Policies , then double-click  User Rights Assignment  from the tree list. Double-lick the  Log on locally  policy setting and unselect  Users  from the group. Select OK. PATCHING At the command prompt, run "net use * \\cpitggmasa02\gmas /persistent:no". For this example we will assume that this share mapped to F:. Run "f:". Run "cd gold\ipak\nt5.02". Run "W2kUpdate /cp-corp" (If this machine's final destination is the internet run with the /cp-int) You will be prompted to type in the machines asset tag, serial number and location. After the update is complete you will be prompted to reboot. INSTALLING IIS (If required) At the command prompt, run "net use * \\cpitggmasa02\gmas /persistent:no". For this example we will assume that this share mapped to F:. Run "f:". Run "cd gold\ipak\iis5.02". Run "Wwwsetup /cp-corp d:\Webroot /nosmtp" (If this machine's final destination is the internet run with the /cp-int) After the update is complete you will need to reboot. After reboot, login and run   HYPERLINK "http://localhost/coresmoke.asp"  http://localhost/coresmoke.asp  to verify installation. SCREEN RESOLUTION (Lab Only) If you system cannot support 800x600 resolution in 256+ colors or more, install the latest video drivers. Set your resolution to 800x600 with 256 or more colors.  Do not exceed 800x600 or VNC will not perform very well. DISABLE POWERSAVE FEATURES (Lab Only) Right click on the desktop and select properties. Select the Screen saver tab and press the button labeled "Power..." Select Presentation Mode. Press OK, Press OK again to save. WINZIP (Lab Only) Install WinZip Version 8.0 from   HYPERLINK "\\\\sitelic\\WINZIP8.0\\setup.exe"  \\sitelic\WINZIP8.0\setup.exe Select default install point (C:\Program Files\WinZip). Select "Start with WinZip Classic", press next. Select "Custom Setup", press next. Unselect "Include WinZip in Start Menu" and "Include WinZip on Desktop", press next, press next, press finished. WinZip will launch, select "Never show tips at startup", press close. Close WinZip and any windows launched via WinZip setup. VNC (Lab Only) Download the latest (zip) version of VNC from   HYPERLINK "http://www.uk.research.att.com"  http://www.uk.research.att.com Unzip VNC and run setup.exe. Accept the default install options. From the start menu, select Programs, VNC, Administrative Tools, Install WinVNC Service. From the start menu, select Programs, Administrative Tools, Services. Right click on "VNC Server" and select "start". Set the password to the Administrator's password. UI SETTINGS (Lab Only) Perform these steps for both the administrator s profile and the xboxlab s profile. Double-click the shortcut on the Desktop for  Internet Connection Wizard Select  I want to setup my Internet connection manually, or Press next. Select  I connect through a local area network (LAN) Press next. For corpnet machines, select only the  Automatic discovery of proxy server (recommended) For internet machines, unselect all options. Continue pressing next until you get to the mail confguration screen. Answer   to settting up an Internet mail account. Press next. Uncheck option to launch browser and press Finished. Double-click My Computer. Select View, Arrange Icons, Auto-Arrange. Select Tools, Folder Options Select Use Windows classic folders. Select the View Tab. Select Display compressed files and folders with alternate color Select Display the full path in the address bar Select Display the full path in the title bar Unselect Remember each folder s view settings Press Apply, press YES to the dialog, press OK. Right Click on the Task bar and select properties Unselect Use Personalized Menus. Press OK.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\TCRTools.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal.dot johndaly Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags MonthTCR tools Author: johndaly Last changed: 5/23/2001  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test  HYPERLINK "mailto:MarkMc@microsoft.com" MarkMc HYPERLINK "mailto:jimhelm@microsoft.com" Jim Helm  HYPERLINK "mailto:humeno@microsoft.com"  Hiroo Umeno Usability  International  This document will need to be updated as the TCR and TCR test plan are updated. Tools needed These are the items we need for TCR in the XDK launcher: Cert_1.0-1-11 (removes all system files, soundtracks, etc) This option removes all system files. These include: Soundtracks Nicknames Cert_1.0-2-1 (fragments tdata \ udata) This option fragments the Tdata and Udata (Title and User data). It basically works like this: move all or a portion of the tdata files to a utility partition full the free space in the tdata area with small files for each file saved to the utility partition, delete a random collection of the small files in the tdata partition to free enough space to hold the file copy the file back from the utility partition repeat until there are no more files left to copy back do the same thing for any files in the tdata partition that you could not get the first time (since the utility partition is potentially smaller than the tdata) do the same thing for the udata partition Cert_1.0-2-2 (removes all soundtracks) Delete soundtracks, pretty self explanatory. Cert_1.0-2-7 (fills udata\<titleid>with 4096 entries) Create 4096 entries in the udata\titleid partition. Do this fast, probably with 0-length files, no need to have data in them. Cert_1.0-2-10 (clears utility drive\titleID) Delete all files in udata\titleid. Cert_1.0-2-18 (draws outline of non-HDTV safe area)  Draw 560x420 centered rectangle on the screen so the tester can outline this to determine the safe area. It should be 87.5% of the viewable area. We need to double check these numbers. Cert_1.0-2-19 (draws outline of HDTV safe area) Draw 608x456 centered rectangle (for 640x480) on the screen so the tester can outline this to determine the safe area. We need to determine the appropriate size for other HDTV resoulutions. Cert_1.0-3-2 (fills udata area, but with less than 4096 entries) This uses all space, but not all directory entries. Just fill udata quickly with a few files, they need no data, just lay them down with SetFilePointer(). Cert_1.0-3-3 (fills tdata area) This uses all space, but not all directory entries. Just fill tdata quickly with a few files, they need no data, just lay them down with SetFilePointer(). Cert_1.0-3-4 (fills tdata and udata area) This uses all space, but not all directory entries. Just fill udata and tdata () quickly with a few files, they need no data, just lay them down with SetFilePointer(). Cert_1.0-3-7 (check saved game signature) This option checks the signature of a saved game I have no idea how this works (at the moment), but you basically do it like this; input the title ID of the title input the Key the game uses to produce the signature navigate to the games, click on them to try the validation function Cert_1.0-3-11 (lists available blocks for all attached memory devices) This should just create a list of the available blocks for each device Cert_1.0-3-14 (change language setting) Change the language setting. Cert_1.0-3-15 (change time zone setting) Change the time zone setting. Cert_1.0-3-26 (creates saved games, nicknames, MU and soundtrack names with localized text) To test that titles correctly display undisplayable characters, create saved games, nicknames, MU names, soundtracks using localized text. For saved games, you ll need to: input the title ID of the title input the Key the game uses to produce the signature make a saved game with the correct signature and some localized text For the rest, these are not title specific, so just make them in the correct place Cert_1.0-3-33 (makes list of all files on console, both hard disk and MUs) Create a list of all files on all devices, save it to the disk. This will be copied over and examined. Make sure to include dates, times, sizes. Cert_1.0-3-34 (list all global settings) Dump all global settings from the EEPROM. Other tools for TCR: Imagebld   needs to be modified to dump the library versions from an image Debugger macros: Most will take the form of: bp xboxkrnl!NtCreateFile "dt OBJECT_ATTRIBUTES poi(esp+0xc);g" this will dump params to the functions we wish to monitor, they end up in a debugger log file. I ll figure out if I can get them in from a command line, I think this is possible debugger extensions: We need 1 to dump all the bus speed info so we can see if the app has changed it, the tester will need to break in every once and a while and check. We ll make this a post-RTM work item, Yasser Asmi is probably the right guy to do this. Debugger Output Scanner The logs created by the debugger can be manually read, or we can write a tool to scan them. This will be easy and is low-priority. Netmon, possibly modified to look at our packets. Imaging tool to get the tape image onto the DVD Simulators This is being handled by Adam Green. Certification Kernel So far, the only thing we may do is remap some PCI data to move the addresses of devices we are concerned about (right now, only the IDE controller) so that direct access to this device will cause a failure we can detect and fail a tile for. Tactics Database For each title submitted for certification, a record of all test variations attempted will be kept, and a summary report from these tests, along with a PASS or FAIL status, will be generated and passed to the next team in the release process. Deliverables Launcher List of Certification test cases derived from Tactics database so title developers can pre-test their titles before submission. gd0Ek gd0Ek
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\tcpip testplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8LitHangW Microsoft Corp. TCPIP Test Plan Title _PID_HLINKSTCPIP Test Plan XBox TCPIP Net Testing Plan Normal Microsoft Word 9.0&zb3* VC45* .1:K* /.GV* 0VC45bjbjU TCPIP Test Plan Author: jimy Last changed:   SAVEDATE \@ "M/d/yyyy" \* MERGEFORMAT  5/19/2000  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc483375886"  Owners  PAGEREF _Toc483375886 \h   HYPERLINK \l "_Toc483375887"  Resources  PAGEREF _Toc483375887 \h   HYPERLINK \l "_Toc483375888"  Test scenarios  PAGEREF _Toc483375888 \h   HYPERLINK \l "_Toc483375889"  Spec reviews  PAGEREF _Toc483375889 \h   HYPERLINK \l "_Toc483375890"  Tools needed  PAGEREF _Toc483375890 \h   HYPERLINK \l "_Toc483375891"  Hardware needed  PAGEREF _Toc483375891 \h   HYPERLINK \l "_Toc483375892"  Test methods  PAGEREF _Toc483375892 \h   HYPERLINK \l "_Toc483375893"  Test code  PAGEREF _Toc483375893 \h   HYPERLINK \l "_Toc483375894"  Manual tests  PAGEREF _Toc483375894 \h   HYPERLINK \l "_Toc483375895"  Stress tests  PAGEREF _Toc483375895 \h   HYPERLINK \l "_Toc483375896"  Code reviews  PAGEREF _Toc483375896 \h   HYPERLINK \l "_Toc483375897"  Debug walkthrough  PAGEREF _Toc483375897 \h   HYPERLINK \l "_Toc483375898"  Security  PAGEREF _Toc483375898 \h   HYPERLINK \l "_Toc483375899"  Performance testing  PAGEREF _Toc483375899 \h   HYPERLINK \l "_Toc483375900"  Catastrophic failure testing  PAGEREF _Toc483375900 \h   HYPERLINK \l "_Toc483375901"  Interfaces with other components  PAGEREF _Toc483375901 \h   HYPERLINK \l "_Toc483375902"  Localization impact  PAGEREF _Toc483375902 \h   HYPERLINK \l "_Toc483375903"  Test variations  PAGEREF _Toc483375903 \h   HYPERLINK \l "_Toc483375904"  API Tests  PAGEREF _Toc483375904 \h   HYPERLINK \l "_Toc483375906"  Test complete criteria  PAGEREF _Toc483375906 \h   HYPERLINK \l "_Toc483375907"  Release criteria  PAGEREF _Toc483375907 \h  Owners HYPERLINK "mailto:jpoley@microsoft.com" mailto:jimy@microsoft.com HYPERLINK "mailto:mitchd@microsoft.com" mailto:davidx@microsoft.com HYPERLINK "mailto:marcw@microsoft.com" mailto:ravim@microsoft.com  HYPERLINK "mailto:karencs@microsoft.com"  mailto:karencs@microsoft.com Usability HYPERLINK "mailto:marcw@microsoft.com" mailto:tombro@microsoft.com International Resources  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\ntos\\network\\doc\\tcpip\\"  \\cpitgcfs01\xboxro\src\ntos\network\doc\tcpip\ Source  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\ntos\\xnet\\ip\\"  \\cpitgcfs01\xboxro\src\ntos\xnet\ip\  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\ntos\\xnet\\tcp\\"  \\cpitgcfs01\xboxro\src\ntos\xnet\tcp\ Test source  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\test\\net\\tcpip\\"  \\cpitgcfs01\xboxro\src\test\net\tcpip\ Test Docs  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\test\\docs\\win2k_tcpip_testplan.doc"  \\cpitgcfs01\xboxro\src\test\docs\win2k_tcpip_testplan.doc Win2000 Test Docs  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\test\\docs\\"  \\cpitgcfs01\xboxro\src\test\docs\ TCPIP Specifications  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\ntos\\network\\doc\\tcpip\\"  \\cpitgcfs01\xboxro\src\ntos\network\doc\tcpip\ Test scenarios This plan covers testing of the TCPIP stack and protocols. This includes TCP, IP, UDP, ICMP, ARP, IGMP, multicasting, DHCP, Autonet and Static IPs. This plan does not cover Winsock, Wininet, DirectPlay, or DNS testing. Three Ways of Testing Private (non-exported) API parameter checking Testing of actual TCPIP functionality (sending frames, receiving frames, and responding to other devices on the net) IP Address assignment Scenario tests.  This includes infrastructure such as: 10mbit vs 100mbit vs. DSL vs. Cable Modem, NAT/ICS testing. Note: There are no exported APIs from this layer of the networking stack.  The closest way that ISVs get to these APIs is via Sockets APIs. The first will be relatively easy and will get additional coverage by the Winsock, Wininet, and DirectPlay APIs. The second and third piece requires having a Windows 2000 machine to act as another device on the network and interoperate with an Xbox console (and may require the NetMon sniffer utility). Spec reviews Is the spec sufficient to design, document, and test this feature? There are currently no design specifications.  However the code is based on the Windows 2000 TCPIP stack.  Tools needed Code coverage We are talking with MSR about getting ICECap modified for us to use for Code Coverage analysis.  All code will get this type of analysis. We may also use BBCover/Sleuth for this analysis. Static analysis All code will be statically analyzed with PC-Lint, Typo.pl, and PreFix.  Leak testing All code relating to storage will be checked for this. It will be done through a combination of running the tests / measuring / repeat. Look at   HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs\\leaks.doc"  \\CPITGCFS01\xboxro\src\test\docs\leaks.doc  for notes on the how s and why s of leak checking. Corruption testing This will be done with the Driver Verifier (  HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs\\verifier.doc"  \\CPITGCFS01\xboxro\src\test\docs\verifier.doc ) as well as extensive manual tests. Network sniffing This will be done using the NetMon utility that runs on a Windows 2000 machine. Kernel Debugger extention DLL To test private APIs which are not exported. Hardware needed What do you need immediately? An Xbox client machine with the Xbox-based TCPIP stack enabled A Windows 2000 machine to act as an DHCP Server, a sniffer, and a partner machine. What will you need further on down the road? USB Modem with outgoing analog phone line DSL modem with a DSL provider that uses bridged ethernet DSL modem with a DSL provider that uses PPPoE DSL modem with a DSL provider that uses G-Lite hardware DSL providers who provide a range of bandwidth speeds Cable modems (USA DOCSIS 1.0 and 1.1 compatible: Surfboard, Cisco, others?) DOCSIS uses TDMA signaling (Chips from BroadCom:BRCM and TexasInsturments:TXN) Terayon:TERN uses S-CDMA signaling (Canada: Rogers/Shaw, Europe: United Pan Europe Communications, Japan, Hkong, China, USA: Cox, Time Warner, CableVision. MediaOne) Cable modems (Europe DVB/DAVIC EuroModem  ETS 300800  compatiable modems? Nokia, Thomson, Philips, Alcatel, COCOM, Terayon) Cable modems (DEMOS-1 or DEMOS-38, Netherlands. Supports both DAVIC and DOCSIS)? Cable modems (Asia? Info !??? Japan??) Cellular modem (for japan; tested in Japan?) Wireless modem (perhaps!) MSN/GST satellite (perhaps!) Accounts with various dialup ISPs, DSL providers, and cable modem providers A router (can be Win2000 machine with 2 NICs) NATS: Windows 98 machine with Internet Connect Sharing Windows 98 SE machine with Internet Connect Sharing Windows 98 ME machine with Internet Connect Sharing  Windows 2000 machine with Internet Connect Sharing  Windows 2000 SP1 machine with Internet Connect Sharing  Windows 2001 / Whistler machine with Internet Connect  Sharing WebRamp 700 Firewall/Proxy Box (  HYPERLINK "http://www.webramp.com/products/700s/index.html"  http://www.webramp.com/products/700s/index.html NetGear RT311 Firewall/Proxy Box (  HYPERLINK "http://www.netgear.com/products/rt311ds.shtml"  http://www.netgear.com/products/rt311ds.shtml Windows 2000 IAS server Firewalls: Windows 2000 machine with IPSec and Firewall installed with TCP and UDP ports open/closed Mandrake Linux machine with Firewall installed with TCP and UDP ports open/closed  (This is for Online and not CoreNet?) What lab requirements do you have? USB Modems, DSL modems, Cable modems, Cellular modems (Japan), Wireless modems (TBD), MSN/GST satellite dish.  802.11B  Wi-Fi  wireless (Lucent, 3Com, Nokia 11 Mbit RF/wireless), HomeRF wireless (Intel, Motorola, Proxim, 2Mbit RF/wireless soon to be 10/11 Mbit), HomePNA 1.0 (1 Mbit) and HomePNA 2.0 (10 Mbit) (Intel Anypoint, Diamond HomeFree, NetGear), Powerline electrical outlet homenets (Intellon, Enikia, 10 Mbit) Test methods Test code What needs to be written? TCPIP Tests used by NT team are written in HAPI and will need to re-written to work with the XBox test harness. A Windows 2000  based service to coordinate sending/receiving of specific network frames to the XBox. Might also need to write an NDIS-level sniffer program or use VisualTest to automate the NetMon utility running on a Windows 2000 machine. What can be borrowed / adapted? Nothing, unless we want to port HAPI to the XBox. Can use Sparta & AutoSrv from the NT TCPIP test team Manual tests TBD. There usually are quite a few, but this is undecided. User Interface Verify IP Address when consumer tries to config a static address Modem Dialup config UI  (tone/pulse, speaker on/off, user/passwd, dialup number) PPPoE config settings (user/passwd, session name) DSL config settings Boot testing Boot with no LAN or modem connected, then connect the LAN   Boot with no LAN or modem connected, then connect the modem Boot with both the LAN and modem connected Boot with 2 modems connected Boot with modem connected then connect the LAN Boot with LAN connected then connect the modem Use the wrong Direct-connect LAN cable (non crossover) Disconnection testing for Internet-Lan, Internet-modem, local Lan Unplug the host-peer during game play Unplug the dealer-peer during play Unplug a client during play Send a Call-waiting signal to bump off a modem user during play Verify if Modem or NIC connections are restored during a WARMBOOT (important if game title needs disc swapping feature). Stress tests Fast networks (max the throughput) for 1/16/100 s of sockets Slow modem speeds Latency over satellite Long-haul / Duration testing API stress Code reviews How often? For changed code, after a check-in, and on all code at least 1 time before we ship. Which Dev / PM will attend? If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough Watch all the tested code in the debugger. Are getting the coverage you think you are? It will help you learn how things work and write better tests. Security What impact on security does this feature have? Ping Of Death system crashes, BONK and BOINK attacks. Denial Of Service attacks, SYN attack.   Encoding of username/passwords (CHAP, MD5-CHAP authentication). Buffer Overflows could come from ARP requests, ARP replies, ICMP/Ping Requests. Verify Create/Read/WriteFile(xnet.dll) will NOT read/write to the NIC/modem driver!  Performance testing We should ensure the stack performs on par with what a Windows 2000 machine can handle. Also, testing on congested networks will be performed (80% busy). Catastrophic failure testing The following tests will attempt to gauge the stability of the networking stack  under unusual circumstances. Corrupt or missing frames of data Modem or LAN jack not connected firmly Unplugging the modem/lan then replugging it back in. Hub loses power for a moment (bent power connector wires) Static on the modem/net connection  effect on a modem connection Poor line conditions on the modem (how they corrupt data)? Corruption to TCPIP .sys files Power failure/surge/flicker to XBox when connected on a net DHCP server going offline/online Routers/gateways going up/down/pausing Modem gets dropped in water Modem/Lan cable is freyed/weak Chewing gum shoved into the LAN port User puts a RJ-11(phone) jack into the RJ-45(LAN) socket of the console Lightning storms during game play can jolt a phone line TBD. Note that the hardware test team will cover some of these tests.  Interfaces with other components Possibly with the modem or other net drivers (wireless LAN, cellular modem), Winsock, NDIS, miniport, DirectPlay, and Wininet. Localization impact Test variations Private (non-exported) API parameter checking TBD: Jim. API tests will consist of the typical scenarios.  Since they re not exported API, testing might be achieved using a kernel debugger extention DLL. Valid inputs Invalid inputs Boundary cases Stress Private Device Driver APIs (ntos\xnet\tcp\tcp.h ntos\xnet\ip\*.h ntos\xnet\inc\inetp.h) TCP/UDP: TcpInitialize TcpCleanup TcpReceivePacket UdpReceivePacket UdpReceivePacket UdpSendPacket IpInitialize IpCleanup IpSendPacket IcmpSendError IpReceivePacket IpAddDefaultGateway IpRemoveDefaultGateway ReleaseCachedRTE IfSetIpAddr DHCP: DhcpInitialize DhcpCleanup DhcpTimerProc DhcpReceivePacket DhcpNotifyAddressConflict NIC:  EnetInitialize ? (not available yet) ICMP: ? (not available yet) TCPIP functionality TBD: Jim. This covers basic network functionality, such as sending frames out of sequence (TCP re-assembly), responding to ARP requests, receive of broadcast packets, etc.   Refer to:  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\test\\docs\\win2k_tcpip_testplan.doc"  \\cpitgcfs01\xboxro\src\test\docs\win2k_tcpip_testplan.doc  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\test\\docs\\win2k_dupelicateip_testplan.doc"  \\cpitgcfs01\xboxro\src\test\docs\win2k_dupelicateip_testplan.doc  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\test\\docs\\win2k_igmpv2_testplan.doc"  \\cpitgcfs01\xboxro\src\test\docs\win2k_igmpv2_testplan.doc ICMP (4.1.x.x):  ICMP Reply for valid Requests only  Ping to unicast address   expected a response Ping to allnet broadcast address 255.255.255.255   no response and no net traffic Ping to 0.0.0.0   expected no response Ping to subnet broadcast a.b.255.255   expected no response Ping multicast address   expected no response Ping loopback address ( 127.0.0.1)   expected a response but no net traffic Check response on receiving a ICMP packet with the source address a multicast address, broadcast address or 0.0.0.0 or a.b.255.255 or loopback address ICMP Invalid Header Fields / Bad Packets Send a packet with incorrect checksum value of 0, FFFF Send packets with invalid values in the type field of 0, FF, 02 Send packets with invalid values in the code field of FF, F0 ICMP Address mask Request / Reply (DHCP only) Check to see if the host is able to find its subnet mask   send a address mask request to the all net broadcast and the subnet broadcast  - check response for correct subnet mask ICMP Timestamp Request/Reply   (TBD - DavidX) Send a request to a unicast address   expected a response Send a request to the subnet broadcast   expected no response Send a request to the allnet broadcast   expected no response ICMP Redirect  Send a message to a host A through router R1. Let R1 send a redirect message with the next hop now being R2. Check if the routing table is updated and the next message to A is sent to R2. Now send another redirect message changing the router for Destination A to R1. Check if the routing table is updated. Have the router R1 send a network redirect (after the above test) and check the routing table of the hosts connected to that subnet ICMP Destination Unreachable Check to see if the host sends, port unreachable, destination unreachable messages and host unreachable. ICMP Parameter Problem Fragmentation and Forwarding Send a fragmented ICMP packet from A to B and check if the reassembly works fine Send a fragmented ICMP packet from A to B through router R which also fragments the packet further (MTU varies over the different nets) and check if reassembly works fine. Send a fragmented ICMP packet with the packets having overlapping data bytes / and non-overlapping data with a few bytes missing. (Send a large amount of data) Currently no tool to test directly. JP driver does limited test. Send a fragmented ICMP packet with the packets having the non-fragment flag set and check the response of the stack on receiving the fragmented packets.  Miscellaneous Check the response of the host machine on receiving an unsolicited ICMP error message. Check the response of the host on being bombarded with a huge load of ICMP packets. ARP (4.2.x.x):  Invalid Header / Packet Checks Invalid value in the hardware type (default is 1 [ethernet]) Invalid value in the protocol address type (0x0800 for IP) Invalid value in the protocol size field (default is 4 [bytes]) Invalid value in the opcode field (only 1 and 2 are valid) Have a value in the target Ethernet address for an ARP request ARP Cache Timeout Values Make sure that the ArpCache gets updated after receiving an Arp request. Make sure we do not ARP for address in the ArpCache (Static & Dynamic entries) Make sure unreferenced ArpCache entries timeout after 120 seconds Make sure referenced  ArpCache entries timeout after 600 seconds Add 10 ArpCache entries.  Assuming first entry was added at the time t, add the nth entry at t+n*10.  Reference NONE of the entries.  Make sure each entry timeout independent of the others after 120 seconds. Add 10 ArpCache entries.  Assuming first entry was add at the time t, add the nth entry at t+n*10. Continually reference ALL of the dynamic entries.  Make sure each entry timeout independent of the others after 600 seconds. Add 10 ArpCache entries.  Assuming first entry was add at the time t, add the nth entry at t+n*10. Continually reference 5 of the entries.  Make sure referenced entries timeout after 600 seconds and unreferenced entries timeout after 120 seconds. Attempt to fill the ArpCache by making 1000 s of entries, especially under low memory conditions (verifier.dll can help create low memory situation?) Boot time Checks (On a multi-homed machine   check on logically and physically multihomed hosts ) Does the machine send three ARP requests for all the IP addresses it has? If there is an IP conflict is the interface disabled Are error messages popped on the conflicting machines Check whether the host ARPs for any address when its IP address is the same as the default gateway address ARP requests for/from different addresses ARP for a list of addresses and get replies and then check the ARP table to see that the entries are in the cache Send an ARP request for the address 0.0.0.0   expected no reply Send an ARP request for a multicast address   expected no reply Send an ARP request for broadcast address   255.255.255.255 or a.b.255.255 Send an ARP request for the loop-back address Send an ARP request with the IP address and the MAC address of the sender set to broadcast address   Expect a reply Send and ARP request with the IP address of the Sender set to 0.0.0.0 and correct MAC address. Expect a reply Send the Arp request with the MAC address of the sender set to zero   expect no response. Send an ARP request with the IP address and the MAC address of the sender set to multicast address   Expect no reply Send an ARP request with the Sender IP address set to broadcast address and the MAC address of the sender set to unicast address.  Make sure the receivers ARP cache does not get updated. Send an ARP request with the Sender IP address set to a Multicast address and the MAC address of the sender set to unicast address.  Make sure the receivers ARP cache does not get updated. Miscellaneous Cases For a ARP request let two different hosts respond with a ARP reply   check the response on receiving two ARP replies. Check the response of the host on being flooded with ARP requests for one of its IP addresses Check the response of the host on receiving a unsolicited ARP reply Check the response of the host on being bombarded with ARP requests IP (4.3.x.x): Invalid Header /Packet Checks Send a ICMP echo request with IP Version = 5; no response from test machine Send a ICMP echo request with IP Version = 0; no response from test machine Send a ICMP echo request with IP version = F; no response from the test machine Send a ICMP echo request with a bad IP header length of 0; expected no response from the test machine Send a ICMP echo request with a bad IP header length of 7; expected no response from the test machine Send a ICMP echo request with a bad IP header length of F; expected no response from the test machine Send a ICMP echo request with a bad IP checksum value of FFFF; expected no response from the test machine Send a ICMP echo request with a bad IP checksum value of 0; expected no response from the test machine Send a ICMP echo request with a bad IP Protocol type of 0x13; expected ICMP destination protocol unreachable   Send a ICMP echo request with a bad IP Protocol type of 0xFF; expected ICMP destination protocol unreachable Send a ICMP echo request with a bad IP Total Length of 0; expected no response from the test machine Send a ICMP echo request with a bad IP Total Length of 20; expected no response from the test machine Send a ICMP echo request with a bad IP Total Length of FFFF; expected no response from the test machine Send a fragment with the Total length field equal to the length of the segment before fragmentation Testing IP Options Invalid IP option headers Send an ICMP echo request with 20 bytes of value 0xFF as IP options   expected ICMP Parameter Problem as response.  Send an ICMP echo request with 20 bytes of value 00 as IP options   expected a echo reply response Send an ICMP echo request with 20 bytes of value 0-9 & 0-9 as options   expected ICMP Parameter Problem as response. Send an ICMP echo request with an incomplete Timestamp Option   expected ICMP Parameter problem as response Record Route Option Send a ICMP echo request with the record route option containing space for 4 hops   expected a echo response with options Send a ICMP echo request with the record route option containing space for 1 hop   expected echo response with options Send a ICMP echo request with the record route option containing space for 9 hops   expected echo response with options Send a ICMP echo request with a bad record route option saying that there is space for 63 hops but actual available space is for max of 9 hops   expected ICMP parameter Problem as response Send a ICMP echo request with space for 1-2 hops but the option length = 0  - expected ICMP Parameter Problem as response Send a ICMP echo request with space for 1 hops but the option length = 0x1  - expected ICMP Parameter Problem as response Send a ICMP echo request with a invalid Pointer field value of 0,1, 0xFF  - expected ICMP Parameter problem Time Stamp Option Send a ICMP echo request with the Timestamp option containing space for 4 Timestamps   expected a echo response with options Send a ICMP echo request with the Timestamp option containing space for 1 timestamp    expected echo response with options Send a ICMP echo request with the timestamp option containing space for 9 timestamps   expected a echo response with options with the flag field having values 0, 1 and 3 Send a ICMP echo request with an invalid timestamp option length of 0, 0xFF   expected ICMP Parameter problem Send a ICMP echo request with an invalid timestamp option pointer value of 0, 0xFF   expected ICMP Parameter Problem Send a ICMP echo request with an invalid timestamp overflow value of 0xF, 1   expected ICMP parameter problem Send a ICMP echo request with an invalid timestamp flag value of 0xF, 4   expected ICMP parameter problem Strict Source Routing Option Send an ICMP echo request with a valid route specified and check the response received. Send an ICMP echo request to the test machine with the packet containing a strict route through a non existent gateway expected ICMP destination unreachable. Send an ICMP echo request with the SSR option pointer field having an invalid value of 0,0xFF   expected no response but destination unreachable Send an ICMP echo request with the SSR length field having an invalid value of 1, 0, 0xFF   expected ICMP parameter problem Send an ICMP echo request with the SSR IP address field having invalid IP addresses like a broadcast or multicast IP address. In a multi-home machine enable forwarding and enable source routing (HKLM\CCS\...\Services\tcpip\Parameters\DisableIPSourceRouting=0). Send a strict source routed packet such that packet gets forwarded from interface A to interface B.  Make sure the packet gets forwarded.  Disable the source routing by deleting the registry value.  Send a packet without source routing option.  The packet should get forwarded.  Send the packet with source routing option and the packet should not get forward. Loose Source Routing Option Send an ICMP echo request with a non existent gateway address in the LSR   expected Destination unreachable Send an ICMP echo request to the test machine with a correct route specified and a router between two machines not included in the LSR   expected a echo response Send an ICMP echo request with the LSR option pointer field having an invalid value of 3, 0xA   expected no response but destination unreachable Send an ICMP echo request with the LSR length field having an invalid value of 1, 0, 0xFF   expected ICMP parameter problem Send a ICMP echo request with the LSR IP address field having invalid IP addresses like a broadcast or multicast IP address Miscellaneous Send a ICMP echo request with both the IP record route option with length for 3 hops and an IP timestamp with length for 3 timestamps Valid IP Address Tests Send an ICMP echo request to 0.0.0.0  -  no response Send a ICMP echo request to 0.0.HostID - no response Send a ICMP echo request to sub-net broadcast a.b.255.255   no response Send a ICMP echo request to all-net broadcast 255.255.255.255   no response Send a ICMP echo request to loop back address 127.0.0.1  - no response Send a ICMP echo request to 127.255.255.255  - no response Send a ICMP echo request to a multicast address (228.0.0.1)   no response Send a ICMP echo request to the all host multicast group 224.0.0.1   no response Send a ICMP echo request from source address 0.0.0.0  - expected no response Send a ICMP echo request from 0.0.hostID   expected no response Send a ICMP echo request from sub-net broadcast   expected no response Send a ICMP echo request from all-net broadcast   expected no response Send a ICMP echo request from loop-back address   expected no response Send a ICMP echo request from 127.255.255.255   expected no response Send a ICMP echo request from a multicast group   expected no response Send a ICMP echo request from the all host multicast address 224.0.0.1   expected no response TOS field Check Send ICMP echo request with different TOS ( 0-255 )  and check that the echo reply has the same  TOS value as in the packet sent if it is  valid Change the DefaultTOSValue registry parameter to 0 and check the TOS field in the Packets sent is 0 Change the DefaultTOSValue registry parameter to 6 and check the TOS field in the Packets sent is 0x4 as bytes 6 and 7 are not used in the TOS field Try to change the TOS value using socket option on TCP/UDP packets.  Expect no change since the TOS change with socket option is disabled by default. Add the registry value DisableUserTOSSetting = 0. Check to see that TOS value can be changed using socket option. TTL field Check Send packets with TTL values of  0, 1, FF, 200 and check that only packets with valid TTL values are accepted . Change the DefaultTTL registry parameter to 0; check that the packets are not sent with a TTL value of 0 Change the DefaultTTL registry parameter to 18; check that the packets are sent with a TTL value of 18 Change the DefaultTTL registry parameter to 200; check that the packets are sent with a TTL value of FF IP Filtering Dead Gateway Detection   (TBD   DavidX) Dead gateway detection and switching Add three default gateways (G1, G2, and G3) with the Metrics M1>M2>M3 respectively.  Make sure there are no active connections on the gateways. Attempt to establish connection T1.  Observe that the first two SYN are sent to the G1.  Do not allow connection establishment. Attempt to establish connection T1 again. Observe that T1 attempts to establish a connection through G2. Allow T1 to establish a connection through G2 and start transferring data. Stop responding through G2 after some data has been sent. Observe that the connection is switched to G3.  Allow data transfer through G3. After some data transfer through G3 then stop responses through G3.  Observe that the connection is switched back to G1. Active gateway selection (Switch Default gateway if 25% of connections have switched) Add three default gateways (G1, G2, and G3) with the Metrics M1>M2>M3 respectively.  Make sure there are no active connections on the gateways. Establish twelve connections (T1 T12) through G1. Stop responding to the connection T1.  Observe that connection T1 is switching to G2. Other connections stay active through G1.  Stop responding to connection T2 and T3.  Observe that T2 and T3 will attempt to transfer data through G2.  Allow data transfer through G2 for T2 and T3.  Observe rest of the connections (T4 T12) are switched to G2. Attempt to establish connection T13. Observe that the connection is established using G2. Comprehensive Dead gateway detection test Establish twelve connections (T1 T12) through G1. Stop responding to the connection T1.  Observe that connection T1 attempts to use G2. Other connections stay active through G1. Allow some data flow for T1 through G2.  Stop responding to T1 through G2.  Observe that T1 switches to G3.  Allow data flow through G3 Stop responding to T2.  Observe that T2 attempts transfer through G3. Allow data transfer for T2 through G3.  Stop responding to connection T3.  Observe that T3 attempts to use G3.  Allow data transfer through G3.  Observe that the rest of the connections  (T4 T12) are switched to G3. Stop responding to T1, T2, and T3.  Observe that all connections are switched back to G1.  Allow data transfer through G1. Comprehensive test should be executed for following Configurations: All routes are discovered G1 static, G2 & G3 are discovered G1 static, G2 & G3 are discovered All routes are static Router Discovery Specific Test  (TBD, probably out, DavidX) Add three default gateways (G1, G2, and G3) using Router Discovery. Establish a T1 through G1. Configure G1 such that the Lifetime of the G1 expires while T1 is still transferring data. Observe the behavior of the system. Establish connections T1-T12 through G1. Stop responding to T1 and T2.  Allow connection establishment for T1 and T2 through G2.  Configure the G1 such that the Lifetime of G1 expires while T3-T12 are still transferring data through G1. Observe the behavior of the system. Establish T1-T12 through G1.  Stop responding to T1.  Allow data flow for T1 through G2. Advertise a new gateway Gx with better preference metric. Stop responding to T2. Observe the behavior of the system. MultiHoming Issues Check whether on a multihomed machine packets are forwarded from one interface to the other if IP forwarding is enabled Check whether Packets are sent with the proper interface address and that packets sent from the router machine gets the proper address Check that packets on a logically multihomed machine are sent and received with the proper IP address Fragmentation and Forwarding Check whether the IP header is copied to all fragments correctly Set the MTU value in the registry to 500 and check that packets sent are fragmented and reassembled properly Check that if the MTU is set to a really small value say 20 then the MTU used is 0x68 Check that if the MTU set is greater than the Max segment size specified for a media i.e. 1500 for Ethernet then the packets sent are of size MSS Check that fragmentation and re-assembly work fine when there is a router in between two machines which fragments the packets once more Check the response of the machine on receiving packets with overlapping fragments / fragments with some data bytes missing (using the fragment offset field) Check the response of the host machine on receiving fragments with different IP header values / options Check that if IP forwarding is enabled a router forwards packets from one subnet to another Check that the router does not forward packets between two subnets if the TTL field has a value of zero Check that the router decrements the TTL by 1 when forwarding the packets between two subnets. Check the response of the host on receiving fragmented packets with the more fragments bit in the flag turned off / on alternately Check the response on the host on receiving fragmented packets with the don t fragment bit in the flag turned on   it should reassemble the packet Check whether the router send a ICMP error message if it has to fragment packets before forwarding it and the NO fragment bit is set in the packets IP fragmentation: Reassemble XBox stack will reassemble up to n frames.  (Verify exceeding this limit!) Send 65507 byte of data- echo request   all the fragments have the same size. Try following packet sizes: (FragmentSize = 8 * n) when (n = 1...1500) Send 65507 bytes of data - echo request - each time increment the fragmentation offset such that  FragmentatonOffset = LastPacketSize +1 (e.g. offset = 10, 21, 32, 43, 54, 65 Send 65507 bytes of data - echo request - start from 1500 first fragment decrement the fragment offset by one Send 65507 bytes of data - echo request - start from 1500 first fragment decrement the fragment offset by eight. Send 65507 bytes of data - echo request - each fragment have random size Send 65507 bytes of data - echo request - each fragment have random size - set the do not fragment bit in all fragments. Send 65507 bytes of data - echo request   each fragment has random size - set the TTL values differently in each packet. Make sure some TTL values are zero. Send 65507 bytes of data - echo request   each fragment has random size   only the protocol field is different in some packet. Send 65507 bytes of data - echo request   with random size small packets and a very large packet in the end. Send a large echo request - each fragment has random size.  Send the fragments out of order and send each fragment more than once. Create large fragmented echo request   Send all the fragments except the last fragment. Assemble large fragmented echo request   Send all the fragments except one middle fragment. Send four fragments.  Third and fourth fragments with the same offset but different IP packet size (payload). Send four fragments.  Third and fourth fragments with the same offset but third packet sizes zero. (Payload). Send (UDP, TCP, ICMP, and IGMP) fragmented packets that after reassemble the total length of the packet is zero. Send (UPD, TCP, ICMP and IGMP) fragmented packets that after reassemble the total length of the packet exceeds the Max Packet size (65535). (Teardrop & NewTear Variation) Send ICMP fragmented packets such that the offset of the last fragment overwrite the data in the previous packet but the total data in the last packet and privies packet is less than the packet size of the first packet.    Example: Packet size Offset ------------ ------- First packet: Second packet:  Send N zero byte IP packets with more fragment bit set and incremental offset. (Packets do not contain any data) N = 10  Send N zero byte IP packets with more fragments bit set and offset zero.  Last packet unset the more fragment bit. N = 10  Send many zero byte IP packets with more fragments bit set and zero offset.  In last packet the more fragment bit is unset and packet contains data. Send packets such that second fragment overwrite the data of first fragment (Bonk & Boink Variation ) Send 65507 bytes packet such that every fragment overwrite the data of previous fragment (Bonk & Boink Variation ) Send 65507 bytes packet such that last fragment overwrite the data of previous fragment Send fragmented packets when the last fragment contains no data. Send fragmented packets when the last fragment contains no data and the offsets point to the last byte of the previous packet. Send fragmented packets when one fragment has the Max offset (8191) and IP packet contains 7 bytes Send fragmented packets when one fragment has the Max offset (8191) and IP packet contains 8 bytes Send fragmented packets when one fragment has the Max offset (8191) and IP packet contains Max Number of bytes. Send fragmented packets with large offset (<8191) and enough data to Max the packet size but do not unset the last fragment bit and send the next packet with larger fragmentation offset and more data. Do not set the more fragmentation bit but send fragments.  Repeat cases: 1, 2, 5, 14, 15 Set the fragmentation bit but do not send any fragments Identification field Check Send two echo requests to a host and check that the replies contain different identification numbers Send a fragmented data gram with different identification numbers on some fragments and check the response of the host machine on receiving it. Miscellaneous Check the response of the host on being bombarded with IP packets like ICMP echo packets; or a huge number of fragmented IP packets. TCP (4.4.x.x) Invalid Header / Packet Tests Sending a SYN to the broadcast address 255.255.255.255   expected no response Sending a SYN to a sub-net broadcast address   expected no response Sending a SYN to the loop-back address   expected no response Sending a SYN to a multicast address   expected no response Sending a SYN from a broadcast address   expected no response Sending a SYN from a sub-net broadcast address   expected no response Sending a SYN from a loop-back address   expected no response Sending a SYN from a multicast address   expected no response Sending a SYN with a bad TCP checksum   expected no response Sending a SYN with a bad TCP and IP checksum   expected no response Sending a TCP segment with all reserved bits =1   expected no response Sending a TCP segment with all flag bits =1  - expected no response Send a TCP segment with the URG bit turned on and the urgent pointer containing a offset value which is outside the range of sequence numbers transmitted Send a TCP segment with the URG turned off and the urgent pointer field containing a non zero offset   the urgent pointer field should be ignored Send a TCP segment with a sequence number which is not valid in the current connection   the segment should be ignored Send a TCP ACK segment with the ACK number not valid for the current connection   the ACK segment sent is ignored Duplicate SYN Send a duplicate SYN after connection setup   expected that the duplicate SYN is ignored Send a non duplicate SYN after connection setup   a RST packet is sent in response Sequence Space Wrapping Send a SYN with sequence number = FFFFFFFF Establish a connection so that the sequence number (in the FIN segment) is wrapped around Random Sequence Number check (ISN JP doing this ones) State Conformance Checks Server Side Checks Listen  ( SYN Sent  ( Established ( Fin wait1 ( Fin wait2 ( Time Wait Listen ( SYN  Sent ( Established ( Fin wait1 ( Time Wait Listen ( SYN Sent  ( Established ( Fin wait1 ( Closing ( Time Wait Listen ( SYN Sent  ( Established ( Close Wait ( Last ACK Client Side Checks Listen  ( SYN Received ( Established ( Fin wait1 ( Fin wait2 ( Time Wait Listen ( SYN Received ( Established ( Fin wait1 ( Time Wait Listen ( SYN Received ( Established ( Fin wait1 ( Closing ( Time Wait Listen ( SYN Received ( Fin wait1 ( Time wait Listen ( SYN Received ( Established ( Close Wait ( Last ACK State Non - Conformance Checks Check the response of the server on receiving a Non SYN packet when listening on a port Check the response if a SYN is received after a FIN has been sent. Check the response on sending a FIN but not ACKing the data received Check whether a data segment sent after a FIN segment had been sent and ACKed is accepted Check the response on receiving a SYN segment from another host after sending a SYN and waiting for a response Check that after sending a FIN and not receiving a ACK or FIN in response we close the connection after the timeout expires RTT Measurement Establish a TCP connection and send packets with slight delays   Do not ACK a data segment and check the retransmission time of the segment Note: RTT increases as a percentage of the previous RTT and the new RTT and hence it will take some time to reach the value of the RTT calculated and so send a large number of bytes before checking the retransmission time of the segment SYN / RST Sequence Send a RST in response to a SYN and check whether connection is not opened Send a RST in response to a SYN-ACK sent and then check whether able to open a connection and transfer data correctly Send a RST segment instead of sending an ACK in response to a SYN-ACK and check whether the data sent in the RST segment is not received. Zero Window Probing Send some data with a advertised window of zero (to the Echo Port 7) and wait for the other side to do the zero window probing. ACK with a zero window and then increase the advertised window size. Check whether the connection is terminated when the receiver closed without sending a FIN on a zero window advertisement (Note: If keep-alive are sent then it is detected and the connection terminated else the connection is not terminated.) Slow Start / Exponential back-off Send a SYN segment with the other machine not responding. Check the timeouts and the retransmissions should occur after timeouts which double. Send a huge amount of data and check whether the rate at which packets are sent is a slow start and then as the ACK s come more number of unacknowledged are sent Out of order Segment Processing Send TCP segments which are not in order   the segments are stored and then ACKed once all segments are received Check that we send an ACK as soon as the first out of sequence segment is received. Send out of order TCP segments with 1-2 segments lost   the segments not received are retransmitted and data is transferred correctly Check that when a out of order segment is received then the maximum number of Duplicate ACKs sent is MaxDupAcks (which is set in the registry) Check the response of the host  TCP Segments   Bad Data Offset Send TCP data segments with bad header Length (or Data Offset) values of 0, 3 and 0xF   expected the packet should be ignored Send TCP data segments with the Data offset (greater than the TCP header Length) value pointing to the middle of the data stream   expected the packet should not be accepted Naggling Check that when a large number of small data packets are being sent then the packets are combined into larger packets and sent with naggling enabled Check that when a large number of small data packets are being sent then the packets are not combined into larger packets and sent with naggling disabled Check that when a large number of data packets are being sent to different ports on the same host the packets are not mixed up while combining them PMTU Detection Check that when a connection and the two hosts exchange the MSS value the smaller of the MSS values is used in the connection Check that when a connection is established to a host not in the subnet the MTU used is the Minimum over all hops in the connection (this is when EnablePMTUDiscovery in the registry is set) Check that a default MTU of 576 is used when a connection is established to a host in another sub-net and the EnablePMTUDiscovery is disabled. TCP  Keepalives Set the registry entry KeepAliveInterval and establish a TCP connection and check that Keep Alive transmissions are sent every KeepAliveInterval units and the other machine responds Set the Registry entry TcpMaxDataRetransmissions to a value 7 and establish a TCP connection and then disconnect the systems. Check that Keepalive segments are sent for TcpMaxDataRetransmissions times and then the connection is aborted if no reply is received. TCP Option Invalid Header Check Send a SYN segment with an MSS (Kind=2) option with invalid lengths of 0, 1, 2, 3, 5, 8, 9, F when the TCP header length reflect the correct length of a TCP packet with the MSS option (6).  The default segment size of 536 is used for that connection Send a SYN segment with a MSS option which had an invalid segment size of 0, 1, 8, 1460, 1461,1500, FFFF.  All other fields must be valid   the default segment size is used Send a SYN with TCP header length of 6, four No Operation option followed by a valid MSS option. Send a SYN with TCP header length of 6, five No Operation option followed by a valid MSS option. Send a SYN with two consecutive MSS option when both options indicate a valid segment size MSS value. Send a SYN with two consecutive MSS option when the first option indicates a valid segment size but the second option indicates a very small segment size e.g. 8. Send a SYN with 20 consecutive MSS and correct header length of F. Send a SYN with a leading No Operation option, followed by a valid MSS option followed by End of Option List option. Send a SYN with TCP header length of 7 a single MSS option followed by three No Operation option and an End of Option List option.  Send a SYN with 57 leading No Operation followed a valid MSS option. Send a SYN with TCP header length of F and 60 End of Option List options. Send a SYN with TCP header length of F and 60 NO Operation options. Functionality Check Send a SYN segment with a MSS of value 1460 and the other has a value of 536   check that the connection is established with a value of 536 Valid Timestamp Check Is the timestamp values in non decreasing order in the consecutive TCP segments sent Send a segment with timestamp value of zero   it should be accepted Send a segment with timestamp value FFFFFFFF and then a segment with TS value of zero   it should be accepted Send segments with decreasing timestamp values   they should not be accepted Check whether the Tsecr field in the returning ACK \ Data segments is set to the correct value Send a ACK\ Data segment with a missing Timestamp field  - the segment is accepted if it is in sequence Send a segment with an invalid Tsecr field  - the segment should not be accepted Send a segment with an invalid length field in the TS option   the option is ignored Connection Setup Establish a connection with TS option and then send ACK \ Data segments without TS   segments are accepted if in sequence Establish a connection without TS in SYN and then send ACK \ Data segments with the TS option  - accept the data but ignore the TS option Send a duplicate SYN after connection has been established   the duplicate SYN is ignored Send a RST segment with a decreasing TS value   the RST segment is accepted irrespective of its TS value PAWS functionality Check Send a duplicate data / ACK segment   the duplicate segment is ignored Send a segment with sequence value outside the current window but valid TS   the segment should be ignored Send a segment with valid sequence no and TS value   it should be accepted Send segments out of sequence  - the out of sequence segments are stored till the in-sequence segment is received Check whether the data transfer is done properly TimeStamp Clock Requirements Check whether the timestamp value changes at least once for a window of data sent Check that the timestamp values are monotonic between connection resets Outdated Timestamps Check that if the TCP connection is idle for 24 days then the packet received is not checked for its TS value RTT Measurement Check that the RTT calculation using the TimeStamp values exchanged works fine. Repeat the RTT measurement check in TCP Scalable Windows Option on \ off check Check that the registry parameter Tcp1323Opts turns on / off the Window Scaling option Check that the TcpWindowSize registry value determines the scale factor used Connection Establishment Check whether connection is established and data transferred correctly when window scaling is supported by both machines Check that the server uses the window scaling option only if the client supports the scaling option  Check whether the client stops using the window scaling option if the server does not support it Send a SYN-ACK with the scale option in response to a SYN without the scale option - a RST segment was sent in response Zero Scale factor Check that a connection is established and data transferred with a scale factor of zero  Check that the connection with the client/server having a scale factor of zero and the server/client having a non zero scale factor Scale Factor Change checks Send a Window scale option in a Data / ACK segment   expected that the option is ignored in all segments except the SYN and SYN ACK Send a duplicate SYN once a connection is established with a different scale option   the scale factor sent in the later SYN is ignored and we use the original scale factor Invalid Option Check Send a SYN / SYN ACK with an invalid option length of 04   expected the scale factor sent is ignored Send a SYN / SYN-ACK with a scale factor greater than 14   expected that the connection is established using a scale factor of 14 Send Window Functionality check Establish a connection and transfer data using different scale factors by varying the TcpWindowSize   expected the data should be transferred correctly Valid SACK connection Check Check that the data is transferred correctly on a connection using the SACK option. Check that the SACK option is interpreted correctly   blocks not SACKed are retransmitted by sending a SACK with alternating data blocks included in the SACK Check that the SACK permit option is sent only on the SYN segments Invalid header Checks Send a SACK Permit option in a non SYN segment like ACK or Data   the SACK permit option should be ignored Send a SYN / SYN_ACK with an invalid SACK option (length =4; kind = C)  - a connection should be established without the SACK option Send a SACK option in a Data segment   the server should ignore the SACK option sent Send a invalid SACK option (length = 0; kind =5)   the server should ignore the SACK option sent Send a ACK segment with a SACK option of length > 40   expected the client resets the connection Send a SACK option with an invalid block of data in the SACK   the client ignores the invalid data block specified Invalid SACK connectivity client side check Send a duplicate SYN with the SACK permit option once the connection is established   the server should ignore the duplicate SYN Send a SACK option in a ACK segment in a connection established without the SACK permit option   the client should ignore the SACK option Establish a TCP connection with the SACK option and send a ACK with a SACK option and duplicate block information in the SACK   expected that the duplicate information is just considered once Establish a TCP connection with the SACK option and send a Ack with a SACK option for a block of data already ACKed  - the server just ignores the SACK sent Establish a TCP connection with the SACK option and send a ACK with a SACK option for out of sequence blocks of data   later ACK a out of sequence block of data not included in the SACK   the client does not retransmit the data block Establish a TCP connection with the SACK option and send a ACK with a SACK option for a few blocks of data   Do not ACK these blocks   the client should timeout and retransmit the data blocks in the SACK but not ACKed Invalid SACK connectivity server side check Establish a TCP connection with SACK options. Retransmit a segment which has not been ACKed but is present in the SACK   server drops the duplicate segment sent Miscellaneous Send a SACK with overlapping Block boundaries Send a SACK with boundaries that overlaps the blocks that have been received and acknowledged. Check the response of the host on being bombarded with TCP packets ie like SYN packets Check the response of the host on receiving a valid TCP packet with the TCP header exceeding the max TCP header size. UDP (4.5.x.x) Invalid Header / Packet Tests Send a UDP packet with UDP length = 0, FFFF   expected the UDP packet is dropped Send a UDP packet with a wrong checksum value of 0, FFFF and 1234   the packet is dropped Send a UDP packet with an invalid source / destination port no of 0   the packet is dropped ICMP Error Processing Check Send a UDP datagram to a port where no one is listening   expected a ICMP destination and port unreachable message UDP Send / Receive Send and Receive Data using UDP with size of data less then the MTU UDP Send / Receive Zero Byte Packet Send and Receive UDP packets with 0 bytes of data   expected that we care able to send / receive empty UDP packets UDP Broadcasts Send UDP broadcast to subnet broadcast   a.b.255.255  - expected Packets are sent on only one adapter if host is multi-homed Send UDP broadcast to allnet broadcast   255.255.255.255  - expected Packets are sent on all adapter s if host is multi-homed Receive a UDP broadcast to a subnet to a particular port  Receive a UDP broadcast to the allnet broadcast address on a particular port  Multi Homing Issues On a logically multihomed machine check that the UDP packets are sent with the correct interface address On a physically multihomed machine check that the UDP packets are send on the correct NIC and that the IP address in the packet is correct On a physically multihomed machine the UDP packet is sent to the other interface if the destination is reachable through the other adapter Miscellaneous Flood Test performed by Sandeep Send invalid UDP packets on reserved ports and check the behavior of the host IGMP (4.6.x.x) Check Packet Header Values Check that IGMP messages sent with TTL field having a value 1 Check that all IGMP messages contain the router Alert option Check that the Report and leave frames have the correct field types Check that the correct group address is set in the report / leave frames Check whether we send a IGMP report when we join a multicast group Is the Max Response time field in the header interpreted correctly Invalid Header values Send a IGMP frame with the type filed having value 0 , FF   expected the frame  is ignored Send a IGMP query with a bad checksum value of 0 , FFFF   expected no response to the query Send a IGMP query with the group address not valid ie 157.55.50.56, 0.0.0.0, 156.255.255.255  - no response to the query IGMP Registry Level Checks Check that if the registry variable IGMPLevel has a value 0 we cannot send / receive IGMP packets Check that if the registry variable IGMPLevel  has value 1 we can send IGMP packets but cannot receive them Check that if the registry variable IGMPLevel has value 2 we can send / receive IGMP packets Check that if the registry variable IGMPLevel has an invalid value of 3 then by default we can send / receive IGMP packets Report First process on a machine to join a multicast group sends a membership report Second process to join a identical multicast group from same / different IP address   does not send a report Second process joins a different multicast group from the same / different IP address   send a membership report Check whether we report all memberships in response to a General query Check whether only the report for the particular multicast address is sent in response to a group specific query Check whether in response to a query only one host on the subnet replies with the report Check that in response to a general query no reports is sent for 224.0.0.1 Leave Group Check to see if the program sends the leave group message on exit when we stack was the last member to reply to the all group query. Check to see if the program sends the leave group message on exit when we stack was the last member to reply to the group specific query. Check whether we suppress leave messages if the host wasn t the host sending a report in response to a query the last query. Check that once we have left a multicast group we do not reply to general or group specific query IGMP v1 Compatibility Check whether the max response time in IGMP v1 queries interpreted as 100 Check whether we wait for 400 seconds after hearing a IGMP v1 query before we send any IGMP v2 messages Check whether the IGMP v2 reports are suppressed by a IGMPv1 report in response to a IGMPv1 query Send / receive Multicast packets Able to send / receive messages on the multicast address On a card with multiple IP addresses  - only the interface which joins the multicast group receives the messages More than one process belongs to the multicast group   on receiving the multicast message all processes should receive the message More than one process belongs to the multicast group on different interfaces   on receiving the multicast message all processes should receive the message Check that if data greater than the MTU is sent the fragmentation and reassembly work fine Check that if bad fragments with overlapping and non overlapping data bytes are sent  - the packets are discarded Membership Lists Multiple processes join the same multicast group on different IP address. Send a Specific / general query   Expected only one report Multiple processes join different multicast groups. Send a general query   expected report for all groups IP Address Assignment TBD: Jim. This covers DHCP, Autonet, and Static IP configuration.  Refer to:  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\test\\docs\\win2k_dupelicateip_testplan.doc"  \\cpitgcfs01\xboxro\src\test\docs\win2k_dupelicateip_testplan.doc DHCP:  Receive a DHCP address DHCP is out of IP s to lease What is renewal interval to DHCP addresses? Have 2 DHCP servers attempt to lease the host an address Autonet:  Generate a valid AutoNet address What happens when all AutoNet addresses are being used and host wants one? Generate Autonet then start a DHCP server   should use the DHCP address Verify Autonet cannot communicate beyond the local subnet Static IP:  Use valid Static IP Use an IP that is used by another host   ARP should disable stack Use a static IP then start DHCP server   should use Static IP Scenario Tests LAN port Direct-lan cable connection, crossover cable Direct-lan cable connection, non-crossover cable Hub with uplink enabled Hub with uplink disabled Use a 10 Mbit hub Use a 100 Mbit hub Category 3 (10 Mbit) vs Category 5 (10/100 Mbit) cable Xbox playing against a PC w/ 10 Mbit NIC   (hub and non-hubbed) Xbox playing against a PC w/ 100 Mbit NIC (hub and non-hubbed) Xbox connected to Internet via Win98/ICS (over Win98 modem) Xbox connected to Internet via Win98/ICS (over Win98 DSL) Xbox connected to Internet via Win98/ICS (over Win98 cable modem) Xbox using DSL Xbox using cable modem Xbox connected to Internet via home Win2K Firewall Xbox connected to Internet via home Linux/Mandrake Firewall (more list from the PM spec I wrote!!!) Modem  Connected to the Internet via modem Connected to the Internet via cellular modem (tbd) Connected to the Internet via 2-way MSN/GST satellite (tbd) 1 Xbox connected via modem to the Internet playing against another Xbox that is connected to the Internet via modem Poor connection, 9600 baud Medium connection, 28.8K Great connection, 56K  LAN/modem mixed 1 Xbox connected via modem to the Internet playing against another Xbox that is connected to the Internet via DSL/CableModem Test complete criteria All of the above scenarios must be covered for this component to be declared  test complete Release criteria Which of these tests need to pass to ship? At first guess, all mainline cases, all failure cases, and most edge cases, the only exceptions agreed upon by a War Team or similar group.  Definitely, Ping-Of-Death and SYN attacks must be passing. Which failures can we live with on this feature? Not many, these are core features. How do we know when your tests say, "this feature is ready to ship"? When they all pass with exceptions as noted above. PAGE   PAGE   Microsoft Confidential
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\threadingtestplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Threading Test Plan Title _PID_HLINKSThreading Test Plan Sakphong Chanbai Normal.dot Sakphong Chanbai Microsoft Word 9.0Threading Test Plan Author:   AUTHOR  \* MERGEFORMAT  Sakphong Chanbai Last changed:   SAVEDATE  \* MERGEFORMAT  5/5/2000 1:28 AM  LASTSAVEDBY  \* MERGEFORMAT  Sakphong Chanbai  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test   HYPERLINK "mailto:schanbai@xbox.com"  schanbai@xbox.com  HYPERLINK "mailto:tracysh@xbox.com"  tracysh@xbox.com  HYPERLINK "mailto:cameronf@xbox.com"  cameronf@xbox.com  HYPERLINK "mailto:karencs@xbox.com"  karencs@xbox.com Usability   HYPERLINK "mailto:tombro@xbox.com"  tombro@xbox.com International  Test scenarios Basic threading   threads creation/termination, thread stack allocation/de-allocation, threads priority, and suspend/resume of threads Threads synchronization using various synchronization APIs Asynchronous procedure calls (and DPC maybe?) Threads local storage Spec reviews The following are original Windows NT specs related to this feature  HYPERLINK "\\\\xbox\\specs\\test\\nt\\proc.doc"  \\xbox\specs\test\nt\proc.doc  HYPERLINK "\\\\xbox\\specs\\test\\nt\\ke.doc"  \\xbox\specs\test\nt\ke.doc  HYPERLINK "\\\\xbox\\specs\\test\\nt\\apc.doc"  \\xbox\specs\test\nt\apc.doc  HYPERLINK "\\\\xbox\\specs\\test\\nt\\suspend.doc"  \\xbox\specs\test\nt\suspend.doc Relevant specification for Xbox is available from  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\XBox OS specification.doc"  \\xbox\specs\pm\CoreOS\XBox OS specification.doc Tools needed We need the following tools for various areas of testing. Some of these tools need to be modified for Xbox Performance testing   we will have a special version of   HYPERLINK "http://msrweb/pprc/performance/IceCAP/"  IceCAP  for Xbox from   HYPERLINK "http://msrweb/pprc/"   to measure performance Code coverage   IceCAP will be used to measure the code coverage. The goal is to cover at least 80% of memory manager code. Special fault injection technique will be used to achieve this number Fault Injection   HYPERLINK "http://msrweb/pprc/reliability/Injector/"  Injector  will be used to inject faults for some code paths that is hard to cover Static analysis -  HYPERLINK "http://msrweb/pprc/reliability/prefix/" PREfix , TYPO.PL, and PC-Lint will be used regularly  Leak testing   this will be done through a combination of running the tests, measuring, and repeat. See  HYPERLINK "\\\\cpitgcfs01\\xboxro\\src\\test\\docs\\leaks.doc" leaks.doc  for more information on leak testing. Corruption testing   this will be done using the driver verifier and fault injector Hardware needed For the beginning, a regular PC will be enough. After that we will need real Xbox machine to measure real performance. We also need at least 3-5 target machines in lab to run long-haul stress for leak and corruption testing. Test methods Test code What needs to be written? Basic threading APIs Stress test What support code do we need, and who is responsible for providing it? Can your code go into a stress test? Manual tests Configuration tests There is no specific configuration for threading testing Code reviews How often? We will do code review after a check-in for changed code and at least one time for all code before we ship. Which Dev/PM will attend? If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough  Watch all the tested code in the debugger, it will help to learn how things work and write better tests Security What impact on security does this feature have? How can this be used to break our security? Kernel and user mode thread? How can this be improved to enhance our security? Currently there is no way to identify which thread is kernel or XAPI thread but finally there is be a flag or similar to distinguish between kernel and XAPI thread. Games are not allowed to terminate kernel threads. Performance testing How will you measure performance? IceCAP will be used, also if necessary we might have to write small tools to analyze performance data from log files Catastrophic failure testing Interfaces with other components Localization impact There is no localization required for this component Test variations Test complete criteria All of the above scenarios must be covered for memory manager to be declared  test complete Release criteria Which of these tests need to pass to ship? All of them, if necessary, with exceptions agreed by war team Which failures can we live with on this feature? None, this is core feature How do we know when your tests say, "this feature is ready to ship"? When they all pass with exceptions as noted above Revision History
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\testdoc.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal.dot johndaly Microsoft Word 9.0Test Plan Template<put  featurename TEST Plan  up here> Author:  Last changed:   SAVEDATE \@ "M/d/yyyy" \* MERGEFORMAT  0/0/0000  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test   HYPERLINK "mailto:lithangw@microsoft.com"  mailto:lithangw@microsoft.com  HYPERLINK "mailto:jont@microsoft.com"  mailto:jont@microsoft.com  HYPERLINK "mailto:cameronf@microsoft.com"  mailto:cameronf@microsoft.com Usability  International  Test scenarios In general, what are the types of things you are going to do to test this feature? Spec reviews Who owns the spec<provide a pointer>? Where is the spec<provide a pointer>? Is the spec sufficient to design, document, and test this feature? Tools needed code coverage static analysis leak testing corruption testing important docs:  HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs"  \\CPITGCFS01\xboxro\src\test\docs Did you find the test docs for this same feature in Win2k? DX? Hardware needed What do you need immediately? What will you need further on down the road? What lab requirements do you have? Test methods Test code What needs to be written? What can be borrowed / adapted? What support code do we need, and who is responsible for providing it? Can your code go into a stress test? What logging levels are you going to use? What other input / output is needed? How do you generate test data? Manual tests What are all the variations? What tools / equipment do you need for your variations? Configuration tests What configurations are important to testing this feature? Code reviews How often? Which Dev / PM will attend? Debug walkthrough  Watch all the tested code in the debugger. Are getting the coverage you think you are? It will help you learn how things work and write better tests. Security What impact on security does this feature have? How can this be used to break our security? How can this be improved to enhance our security? Performance testing Should you measure performance in your test? Would your test be useful for performance testing? How will you measure performance? Catastrophic failure testing How are you going to test failure of your feature? What happens to the rest of the system should your feature fail? Interfaces with other components How will these be tested? Localization impact What is your testing doing to support the localization of your feature? Test variations For each feature / API etc, list the main variations. This should be detailed enough so that it provides a roadmap to what your test code is doing or what your manual variations will be, but not 20 pages telling me what each line of code does, please use common sense!          Test complete criteria What needs to be done to say that 100% of the test development work is done? Release criteria Which of these tests need to pass to ship? Which failures can we live with on this feature? How do we know when your tests say, "this feature is ready to ship"?
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\verifier.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Windows NT AGP Specification Title _PID_HLINKSWindows NT AGP Specification John Vert Normal.dot Sakphong Chanbai Microsoft Word 9.01<wN:Pbjbjj8j8  TITLE  \* MERGEFORMAT  Windows NT2000 AGP Driver Verifier Specification Windows NT2000 Infrastructure Base Group Author:  Landy Wang  AUTHOR  \* MERGEFORMAT  John Vert Version 346.04.0,   TIME \@ "M/d/yy h:mm am/pm"  3/6/00 6:23 PM10/1/99 3:53 PM3/25/99 6:31 PM2/16/99 5:27 PM2/8/99 1:03 PM1/20/99 1:15 PM  SAVEDATE  \* MERGEFORMAT  05/05/98 10:12 PM11/06/97 4:19 PM  TOC \o "1-3"  Windows 2000 Driver Verifier Specification  PAGEREF _Toc457620518 \h  Introduction  PAGEREF _Toc457620519 \h  Driver Verifier Capabilities  PAGEREF _Toc457620520 \h  I/O Verifier  PAGEREF _Toc457620521 \h  Driver Verifier Requirements  PAGEREF _Toc457620522 \h  How to enable the Driver Verifier  PAGEREF _Toc457620523 \h  Debugging Driver Verifier Violations  PAGEREF _Toc457620524 \h  Driver Verifier and Graphics Drivers  PAGEREF _Toc457620525 \h  The Driver Verifier Manager (verifier.exe)  PAGEREF _Toc457620526 \h  Driver Status  PAGEREF _Toc457620527 \h  Global Counters  PAGEREF _Toc457620528 \h  Pool Tracking  PAGEREF _Toc457620529 \h  Settings  PAGEREF _Toc457620530 \h  Volatile Settings  PAGEREF _Toc457620531 \h  The command line interface  PAGEREF _Toc457620532 \h  Future  PAGEREF _Toc457620533 \h  Revision History  PAGEREF _Toc457620534 \h  Windows 2000 Driver Verifier Specification Introduction Driver Verifier Capabilities I/O Verifier Driver Verifier Requirements How to enable the Driver Verifier Debugging Driver Verifier Violations Driver Verifier and Graphics Drivers Future Revision History Windows NT2000 AGP Driver Verifier Specification Introduction PCI /Driver Verifier Capabilities AGP interface Boot and Initialization Video Port / AGP interfaceDriver Verifier Requirements DirectX / Video Port interfaceHow To Enable the Driver Verifier 5      Debugging Driver Verifier Violations             5 Interface SpecificationsFuture New Base Services AGPLIB Services Videoport Services Open Issues 77       Revision History 61513 Introduction One of the majorSupport  issues for Windows 2000 is reliability. Developing Windows 2000 kernel mode components is a complicated task where even the slightest error can cause system corruption and crashes.  Clearly an automated method to apply directed pressure and conclusively test a system component is needed. After the development phase concludes, the second part of the problem is at the customer site.  When the system crashes here, information needs to be quickly extracted from it and the cause accurately determined.  The customer has no idea whether Windows 2000 crashed due to a flaw in Windows 2000 itself or due to a flaw in some third party product that was installed.  Developing an automated method for quickly identifying the component responsible for the crash is absolutely a requirement for Windows 2000 to succeed in the enterprise space. An automated tool that solves the above problems could be employed by developers, testers, certification suites and customers/customer support in a wide variety of scenarios. for AGP in NT5 requires changes to a number of system components. AGP is really an extension to the PCI bus, not a bus itself. Knowledge of AGP could be built directly into the existing PCI driver, but this would require support for multiple incompatible AGP implementations and significant modifications to the base PCI driver as more chipset implementations emerge. Instead, AGP functionality will be added to the PCI driver by implementing a bus filter driver that sits on top of PCI. This filter driver will be chipset-specific. In order to make development easier for IHVs, Microsoft will supply common code for implementing the filter driver and interfacing with the NT kernel and I/O system. IHVs will be able to easily integrate this code with their chipset-specific code to create a complete filter driver.We worked with PSS to analyze the root causes of Windows 2000 crashes/hangs.  We reviewed existing internal and customer reliability data. We met customers with high availability requirements.  We developed the event log analyst tool to collect and analyze reliability data from Windows 2000 event logs, which provides a methodology for measuring and comparing reliability data across multiple Windows 2000 sites.  800 internal servers and 1300 customer servers were measured, with every system crash being recorded. The Driver Verifier is an automated tool based on the information we gained from the project above. Note that in order to meet the requirement that this tool be suitable for real-world customer and support usage, various features can be enabled/disabled so that the overhead is negligible. Driver Verifier Capabilities Note that enabling of the Driver Verifier simply involves adding a registry entry and a reboot.  No recompilation or other changes are needed to any driver you wish to analyze.  The Driver Verifier can be enabled on free or checked systems. The Driver Verifier currently provides the following capabilities (which can be enabled or disabled via the registry): Attempt to allocate all of a driver s pool allocations from special pool.  What this means is that instead of sharing pool allocations with the rest of the system, this driver s allocations are isolated and bounded by NO ACCESS permissions.  This quickly ascertains whether a driver allocates n bytes and accesses n+1.  This also catches a driver who allocates n bytes, frees the allocation and then accesses the allocation.  These two very common problems are the root of many crashes where the core Windows 2000 system is left holding the bag long after the driver has left the scene of the corruption.  Provided the target machine has enough physical and virtual memory, all of the driver s allocations will be automatically redirected into special pool. Provide extreme memory pressure on a specific driver without affecting other drivers and regardless of system memory size.  This is accomplished by instructing memory management to invalidate all of  the driver s pageable code and data as well as system paged pool, code and data.  This catches driver that incorrectly hold spinlocks or raise IRQL and then access paged code or data.  Instead of these problems only showing up under memory pressure once every few months, these are systematically triggered immediately. All spinlock, IRQL and pool allocation calls made by the driver receive automatic parameter validation.  This means that checks are made to ensure: A raise IRQL really is a raise (ie: the current IRQL is less than the target IRQL). A lower IRQL really is a lower IRQL. Double release of a spinlock. Spinlock acquisitions/releases are made at the proper IRQL. Paged pool allocations/frees are made at the correct IRQL (APC_LEVEL or below). Nonpaged pool allocations/frees are made at the correct IRQL (DISPATCH_LEVEL or below). No random (uninitialized) values are specified to these APIs. Pool allocation injection failures : Pool allocations which are not marked MUST_SUCCEED by the driver can be randomly failed to ensure the driver can handle this low memory situation correctly. All pool being freed is examined to ensure no pending timers are inside the pool allocation as these cases would cause extremely hard to track down system crashes. Pool leakage detection : All of the driver s pool allocations are automatically tracked.  At driver unload time, a bugcheck will occur if any of the allocations have not been freed.  The developer can then use the !verifier 3 kernel debugger command to show all the allocations that have not been freed.  Note this command can be used even prior to unload to see what allocations the driver has outstanding at any point in time. Driver unload checking is done to catch drivers that unload forgetting to delete lookaside lists, pending DPCs, worker threads, queues, timers and other resources that are guaranteed to cause a system bugcheck shortly after the driver disappears. I/O Verifier. If the I/O verifier flag is turned on through the verifier applet or through  the VerifyDriverLevel registry key, some IO manager verifications are turned on.  This includes Notably,: All IRPS allocated through IoAllocateIrp are allocated from special pool. Some cChecks are made in IoCallDriver, IoCompleteRequest and IoFreeIrp to catch the driver s errorsinconsistent behavior. All I/O verifier failures bugcheck with the code  DRIVER_VERIFIER_IOMANAGER_VIOLATION (0xC9). PCI / AGP interfaceDriver Verifier Requirements Figure 1 describes the layout of the PCI devices and bridges in the Intel 440LX chipset. Note that the host PCI bridge appears as a device on the root PCI bus (identifier 8086-7180). This device contains the PCIThe only requirement at this point is Windows 2000, Build 1933 (free or checked) or later. configuration registers and BARs that control AGP. Since it controls the AGP functionality, this is a natural place to attach the AGP miniport driver. But this device is not a parent of anything in the NT device tree. It shows up as just another device on the root PCI bus. So getting this device to communicate with the AGP video card involves jumping through a lot of hoops. There is also no requirement that AGP registers must be in the host-PCI bridge and other implementations may put their AGP control registers in different locations.   Since AGP really needs to be a parent of  the video device, the AGP driver will load as an upper filter for the PCI-PCI bridge (identifier 8086-7181). The normal interfaces provided by PCI will allow the AGP filter easy access to any AGP registers in PCI config space for the PCI-PCI bridge. Unfortunately, since many of the AGP registers are actually located in the host-PCI bridge, there is no easy way to get access to these registers through the preferred PnP mechanisms. Instead, the AGP filter will have to use the old HalGet/SetBusData interface to access these registers. Since the location of these registers is chipset-specific, there is no any standard way for PCI to expose them. The AGP miniport will be responsible for locating the device containing these registers and determining the correct bus and slot ids.  By loading as a filter on the PCI-PCI bridge, AGP will be able to intercept IRP_MN_FILTER_RESOURCE_REQUIREMENTS IRPs sent to the PCI-PCI bridge. After the bridge has filled in its standard PCI resource requirements, AGP will add on the resource requirements for the AGP physical memory aperture and any additional AGP-specific resource requirements. It will also intercept the IRP_MN_START_DEVICE to filter out the AGP-specific resource requirements and program the GART appropriately. How to enable the Driver Verifier The preferred method is to use verifier.exe (this is shipped with every copy of Windows 2000 and automatically installed into the system32 directory).  This application has both a command line and GUI interface that allows you to specify drivers to verify and various levels of verification as desired.  It also shows the driver verifier statistics in real-time. See section 7   The Driver Verifier Manager - for more details. The other (less-user-friendly) method is as follows : Using a registry editor (ie: regedt32), edit the REG_SZ key  HYPERLINK \\\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session  \\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session  Manager\Memory Management\VerifyDrivers Set this key to the case-insensitive name(s) of the driver(s) you want to test.  Multiple drivers can be specified, but using only one driver is recommended in order to best ensure that available system resources are not prematurely depleted.  Premature depletion of resources will not result in any system reliability problems but can cause the bypassing of some driver checking due to lack of resources. Examples of values for the key above would be: Ntfs.sys Win32k.sys ftdisk.sys *.sys The level of driver verification can be specified in the REG_DWORD key below:  HYPERLINK \\\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session  \\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session  Manager\Memory Management\VerifyDriverLevel The bitfield values for this key (which can be freely combined) are: Attempt to satisfy all allocations from special pool Apply memory pressure to this driver to validate IRQL usage in regards to accessing pagable code and data. Randomly fail various pool allocation requests.  Note this is only done after the system has booted to a point so these failures can be treated as reasonable situations that must be handled. Enable pool allocation tracking.  Every allocation must be freed before the driver unloads or the system will bugcheck. Enable the I/O verifier (see section   REF _Ref443114822 \r \h  The default value is 3 if the key does not exist or no level of driver verification is specified.  Debugging Driver Verifier Violations Both the !verifier command in the kernel debugger and the verifier.exe user application show the current driver verifier configuration and statistics in real time. All driver verifier violations result in bugchecks, the most common ones (although not necessarily all of them) are: IRQL_NOT_LESS_OR_EQUAL PAGE_FAULT_IN_NONPAGED_AREA ATTEMPTED_WRITE_TO_READONLY_MEMORY SPECIAL_POOL_DETECTED_MEMORY_CORRUPTION DRIVER_VERIFIER_DETECTED_VIOLATION DRIVER_CAUGHT_MODIFYING_FREED_POOL TIMER_OR_DPC_INVALID DRIVER_VERIFIER_IOMANAGER_VIOLATION Driver Verifier and Graphics Drivers Windows 2000 kernel-mode graphics drivers (such as printer and display driver DLLs) are restricted from calling the pool entry point directly.  Rather, pool allocations are done indirectly via graphics DDI (device driver interface) callbacks to win32k.sys.  For example, EngAllocMem is the callback that a graphics driver would call to explicitly allocate pool memory.  Also, other specialized callbacks such as EngCreatePalette and EngCreateBitmap return pool memory as well. To provide the same sort of automated testing for the graphics drivers, support for some of the Driver Verifier functions have been incorporated into win32k.sys.  However, because graphics drivers are more restricted than other kernel-mode drivers, they require only a subset of the Driver Verifier functionality.  Specifically, IRQL checking and I/O verification are not needed.  The other functionality, namely using special pool, random failure of pool allocations, and pool tracking, are supported to varying degrees in the different graphics DDI callbacks. Random failures are supported for the following graphics DDI callback functions: EngAllocMem EngAllocUserMem EngCreateBitmap EngCreateDeviceSurface EngCreateDeviceBitmap EngCreatePalette EngCreateClip EngCreatePath EngCreateWnd EngCreateDriverObj BRUSHOBJ_pvAllocRbrush CLIPOBJ_ppoGetPath In addition, using special pool and pool tracking are supported for EngAllocMem. Enabling Driver Verifier for the graphics drivers is identical to the other drivers (see Section 4   How to enable the Driver Verifier).  Unsupported flags such as IRQL checking will be ignored.  In addition, !gdikdx.verifier kernel debugger command can help to examine current Driver Verifier state and pool traces for graphics drivers. Note that the random allocation failure setting should only be used for robustness testing.  This setting may cause rendering errors.  Therefore, it should not be used with verification tests check the correctness of the graphics driver's implementation (for example, by comparing the graphics driver output to a reference image). The Driver Verifier Manager (verifier.exe)DRIVER_VERIFIER_IOMANAGER_VIOLATION (0xC9) The Driver Verifier Manager application (verifier.exe) is the preferred way to create and modify driver verifier settings and to gather statistics from the driver verifier. The application is in %windir%\system32 for every Windows 2000 installation. Driver Status The Driver Status property page gives you an image of the current status of the driver verifier. The user can see in the list what are the drivers the verifier is aware of. The status can be one of the following: Loaded   the driver is loaded and verified right now; Unloaded   the driver is not loaded now but it has been loaded at least once since reboot; Never Loaded   the driver was never loaded. This can be a hint that the driver s image file is corrupted or that the user specified a driver name that is missing from the system. The list can be sorted by the driver names or by their status by clicking on the list header. In the upper-right zone of the dialog you can view what are the current types of the verification that are in effect. The status of the drivers is updated automatically if the user does not switch to manual refresh mode. You can modify the refresh rate using the bottom-left radio buttons. The user can also force an update of the status with a click on the Update Now button. If you have the Special Pool flag enabled and less than 95% of the pool allocations went to the special pool you will see a warning message on this page. This means that you need to select a smaller set of drivers to verify or add more physical memory to the machine to get a better coverage of the pool allocations verification. Global Counters The Global Counters property page shows the current value of some counters maintained by the driver verifier (see section 7.3 - Pool Tracking - for per-driver counters).  A zero value of a counter can be an indication that the associated driver verifier flag is not enabled. For instance, if the counter Other/Faults injected is zero this is an indication that the low resource simulation flag is not enabled. The user can monitor the activity of the verifier since the values of the counters are updated automatically (by default). You can change the refresh rate, switch to manual refresh or force a refresh using the bottom-left group of controls.  Pool Tracking This property page shows more statistics gathered from the driver verifier. All of the counters shown on this page are related to the pool tracking flag of the verifier. Most of them are per-driver counters (E.g. current allocations, current allocated bytes, etc.) This means you must select a driver s name from the top combo-box and you will see the counters for that specific driver.  Settings This page can be used to create and modify driver verifier settings. The settings are saved in the registry and you must restart the computer for the settings to take effect. The user can use the list to view what are the currently installed drivers in the system. Each driver can be in four possible states: Verify Enabled   the driver is currently verified. Verify Disabled   the driver is currently NOT verified. Verify Enabled (Reboot Needed)   the driver will be verified only after the next reboot. Verify Disabled (Reboot Needed)   the driver is currently verified but will NOT be verified after the next reboot. The user can select one or several drivers from the list and switch the status using the two buttons under the list.  One can also right-click the drivers  names and a contextual menu will popup, allowing state toggling.  The user can specify in the bottom edit additional drivers to be verified after next reboot, separated by spaces. The typical usage of this edit control is when the user wants to install a new driver that is not loaded already. Obviously such a driver will not be in the Drivers currently active in the system list.  If the radio buttons group on the top of the list is set to Verify all drivers then the list plus the Verify and Don t Verify buttons and the edit control are grayed. This means that after the next reboot, all the drivers in the system will be verified.  The verification type can be set using the check-boxes in the upper-right zone. The I/O verification can be enabled at level 1 or at level 2. Level 2 verification is stronger than level 1. Any modification in the settings must be saved with the Apply button before it can be taken in consideration.  There are two more buttons in this page: Preferred Settings   this will select some common used settings (with all drivers verified); Reset All   this will clear all the driver verifier settings so that no drivers will be verified. After committing the changes with the Apply button the system must be rebooted so that the changes to take effect. Volatile Settings This property page can be used to change the driver verifier flags on the fly. You can only toggle the state of some of the driver verifier flags and you cannot change the list of the drivers that are being verified. After you change the status of some check-boxes you must click the Apply button to make the changes effective. The changes take effect immediately and they last until they are changed again or the system is rebooted. The command line interface The application can operate in command line too. Please see  verifier.exe /?  for more information. The commonly used command line flags are: Verifier.exe /flags VALUE [/iolevel 2]   specify a decimal value of the driver verifier flags and possibly the level for the IO verification  (See  verifier.exe /?  or section 4 - How to enable the Driver Verifier - for a list of the available flags); Verifier.exe /all   verify all the drivers in the system; Verifier.exe /volatile /flags VALUE   change verifier flags on the fly; Verifier.exe /reset   erase all the current driver verifier settings; Verifier /query   dump the current driver verifier status and counters to the standard output; Verifier.exe /log LOG_FILE_NAME [/interval SECONDS]   log the driver verifier status and counters to a log file with SECONDS as the period of time. Future The Driver Verifier is a foundation for adding more and more features as time goes on.  The intent is to make it easier for driver writers to validate their products, for Windows 2000 systems to run much more reliably and to provide an easy definitive way to troubleshoot problems when they do occur. Special IRP verification is an example of a feature that will be added shortly. More IO manager verifier functionality is planned for the future. Boot and Initialization The boot process is unchanged except for an addition to the INF file and a new driver, AGPxxx.SYS (AGP440.SYS for a 440LX). The INF declares the AGP driver to be an upper filter for the PCI-PCI bridge (VEN_8086&DEV_7181). The PnP Manager will now load AGP440.SYS and it will attach to the PDO for the PCI-PCI bridge. Once AGP is attached, it will filter the following IRPs: IRP_MN_QUERY_RESOURCES   Add current AGP-specific resources after PCI has returned standard PCI-PCI resources. IRP_MN_FILTER_RESOURCE_REQUIREMENTS   Add AGP-specific resource requirements after PCI has determined the standard PCI-PCI bridge resource requirements. IRP_MN_START_DEVICE   Program GART and any AGP-specific resources to match resource requirements, strip off AGP-specific resources. IRP_MN_STOP_DEVICE   Disable GART and release any AGP-specific resources. This assumes that video driver will fail any stop request if it has memory allocated in the GART. AGP should never get a stop if there is any memory committed. IRP_MN_QUERY_DEVICE_RELATIONS   AGP uses this to attach an AGP filter device to all children of the PCI-PCI bus. (see   REF _Ref402343481 \h  Video Port / AGP interface IRP_MN_SET_POWER   Reinitialize GART registers when waking from D3 Video Port / AGP interface The video port driver uses AGP by calling functions in the AGP_BUS_INTERFACE_STANDARD interface provided by its parent PDO. Since the AGP filter originally attached to the PDO of the PCI-PCI bridge, and not the video driver s PDO, the AGP filter will also attach a filter device to all the child PDOs of the PCI-PCI bridge. This AGP filter device handles only the IRP_MN_QUERY_INTERFACE IRP. The AGP_BUS_INTERFACE_STANDARD interface supports the following methods: ReserveMemory   Finds and reserves contiguous physical address space mapped by the GART. Flags specify whether the memory will be uncached or write-combined ReleaseMemory   Releases contiguous physical address space reserved by ReserveMemory CommitMemory   Assigns physical memory pages to the GART space previously reserved by ReserveMemory. FreeMemory   Frees physical memory pages currently added to the GART by CommitMemory. GetMappedPages   Returns a MDL for a portion of a commited region. Note that the AGP memory allocation mechanism explicitly does not use any of the PnP arbitration mechanisms. This is because of the following assumptions All AGP memory of the same type is equivalent (no such thing as  preferred  allocation) Users of AGP memory are user apps, therefore rebalancing is not feasible, The current PnP interfaces are not well-suited to dynamic allocate/free resource usage patterns. Allocation policies for AGP memory are expected to be very different than the normal arbitration policies. (i.e. all write-combined memory should be allocated in a contiguous chunk so it consumes only a single MTRR) If any of the above assumptions change, this decision may be revisited without changing the AGP miniport. The AGP driver always returns only physical addresses to the video driver. Some devices may have special requirements on the physical memory that is usable, so AGP always allocates and frees any physical memory pages. The AGP driver uses the new MM service MmAllocatePagesForMdl to obtain a list of free physical pages. The video driver is responsible for mapping these physical addresses into virtual space. The virtual addresses may be either user or kernel space as required.  Future AGP chipsets will not allow the processor access to GART-mapped memory, so video port will need to map the MDL rather than the physical GART address. The NT5 Memory Manager has a new interface, MmMapLockedPagesSpecifyCache, for this purpose. The Capabilities field in the AGP_BUS_INTERFACE_STANDARD structure will have a bit defined to indicate to video port whether the physical address returned from CommitMemory can be used from the processor. The video driver is responsible for looking at the characteristics returned from the AGP interface and then using the appropriate MM call to map the physical memory. If the AGP chipset supports processor access through the GART, the existing MmMapIoSpace/ZwMapViewOfSection calls should be used. If not, the new MM routine MmMapLockedPagesSpecifyCache should be used. DirectX / Video Port interface  who knows what they are doing? Interface Specifications New Base Services KeFlushDcacheMdl( IN PMDL MemoryDescriptorList Routine Description: This function flushes the specified physical pages from the CPU caches on all processors in the system. Arguments: MemoryDescriptorList - Supplies a valid Memory Descriptor List  Return Value: PVOID MmMapLockedPagesSpecifyCache ( IN PMDL MemoryDescriptorList, IN KPROCESSOR_MODE AccessMode, IN MEMORY_CACHING_TYPE CacheType Routine Description: This function maps physical pages described by a memory descriptor list into the system virtual address space or the user portion of the virtual address space. Arguments: MemoryDescriptorList - Supplies a valid Memory Descriptor List which has been updated by MmProbeAndLockPages. AccessMode - Supplies an indicator of where to map the pages; KernelMode indicates that the pages should be mapped in the system part of the address space, UserMode indicates the pages should be mapped in the user part of the address space. CacheType - Supplies the type of cache mapping to use for the MDL.  MmCached indicates "normal" kernel or user mappings. Return Value: Returns the base address where the pages are mapped.  The base address has the same offset as the virtual address in the MDL. This routine will raise an exception if the processor mode is USER_MODE and quota limits or VM limits are exceeded. MmAllocatePagesForMdl ( IN PHYSICAL_ADDRESS LowAddress, IN PHYSICAL_ADDRESS HighAddress, IN PHYSICAL_ADDRESS SkipBytes, IN ULONG TotalBytes Routine Description: This routine searches the PFN database for contiguous free, zeroed, or standby pages to satisfy the request.  This does not map the pages - it just allocates them and puts them into an MDL.  It is expected that our caller will map the MDL as needed. NOTE: this routine may return an MDL mapping a smaller number of bytes than the amount requested.  It is the caller's responsibility to check the MDL upon return for the size actually allocated. These pages comprise physical non-paged memory and are zero-filled. This routine is designed to be used by an AGP driver to obtain physical memory in a specified range since hardware may provide substantial performance wins depending on where the backing memory is allocated. Arguments: LowAddress - Supplies the low physical address of the first range that the allocated pages can come from. HighAddress - Supplies the high physical address of the first range that the allocated pages can come from. SkipBytes - Number of bytes to skip (from the Low Address) to get to the next physical address range that allocated pages can come from. TotalBytes - Supplies the number of bytes to allocate. Return Value: MDL - an MDL mapping a range of pages in the specified range.  This may map less memory than the caller requested if the full amount is not currently available. NULL - No pages in the specified range are available at this time. AGPLIB Services Microsoft will provide a common library (AGPLIB) for use in creating AGP filter drivers. This library will handle all the common AGP tasks, interfacing with the NT kernel and I/O system, and general unpleasantness associated with being a real filter driver. We will make source for this library available, but it is expected that most AGP drivers will not need to change it. Below are the entrypoints that AGPLIB will use for chipset-specific tasks. NTSTATUS AgpInitializeTarget( IN PVOID AgpContext Routine Description: This routine will be called once for each AGP target (AGP bridge) in the system. It is called from the AddDevice routine of the AGP driver. Arguments: AgpContext  Supplies the AGP context that will be supplied by AGPLIB on subsequent calls.  Return Value: NTSTATUS NTSTATUS AgpInitializeMaster( IN PVOID AgpExtension, OUT ULONG *AgpCapabilities Routine Description: AGPLIB calls this routine once for each AGP master (AGP card) in the system. At this point the chipset-specific code should initialize the AGP capabilities for both master and target. Arguments: AgpExtension  Supplies the AGP context  AgpCapabilities   Returns the software-visible capabilities of the AGP target. Only capability currently defined is  AGP_CAPABILITIES_MAP_PHYSICAL Return Value: NTSTATUS AgpShutdown( IN PVOID AgpContext Routine Description: This routine is called by AGPLIB when an AGP bridge should be shutdown. Arguments: AgpContext  Supplies the AGP extension  Return Value: None, this routine must always succeed. NTSTATUS AgpQueryAperture( IN PVOID AgpContext, OUT PHYSICAL_ADDRESS *CurrentBase, OUT ULONG *CurrentSizeInPages, OUT OPTIONAL PIO_RESOURCE_LIST *ApertureRequirements Routine Description: AGPLIB calls this routine to determine the current size of the physical memory aperture and the possible sizes for the physical memory aperture.  Arguments: AgpContext  Supplies the AGP context CurrentBase   Returns the current physical memory base of the AGP aperture CurrentSizeInPages   Returns the current length in pages of the AGP aperture ApertureRequirements   if present, returns the possible settings for the AGP aperture. The memory for the IO_RESOURCE_LIST is allocated by the miniport and will be freed by AGPLIB Return Value: STATUS_SUCCESS if successful NT status code otherwise. NTSTATUS AgpSetAperture( IN PVOID AgpContext, IN PHYSICAL_ADDRESS NewBase, OUT ULONG NewSizeInPages Routine Description: This routine is called by AGPLIB to change the size of the physical memory aperture. Arguments: AgpContext  Supplies the AGP extension  NewBase   Supplies the new physical memory base for the AGP aperture NewSize   Supplies the new length in pages of the AGP aperture Return Value: STATUS_SUCCESS if successful NT status code otherwise. NTSTATUS AgpReserveMemory( IN PVOID AgpContext, IN OUT PAGP_RANGE Range, IN MEMORY_CACHING_TYPE Type, OUT PHYSICAL_ADDRESS *MemoryBase, OUT PVOID *MapHandle Routine Description: AGPLIB calls this routine to reserve physical address space in the current AGP physical memory aperture.  Arguments: AgpContext  Supplies the AGP extension  Range   Supplies a description of the reservation to be made. Returns the reserved range typedef struct _AGP_RANGE {     PHYSICAL_ADDRESS MemoryBase;     ULONG NumberOfPages;     MEMORY_CACHING_TYPE Type;     PHYSICAL_ADDRESS MemoryBase;     PVOID Context;     ULONG CommittedPages; } AGP_RANGE, *PAGP_RANGE; The NumberOfPages and Type field will be initialized by AGPLIB. MemoryBase and Context will be filled in by this call.  Supplies one of the following memory types: MmNonCached MmWriteCombined MemoryBase  Returns the physical address of the reserved space in the AGP aperture MapHandle  Returns a handle that AGPLIB will pass back on subsequent calls. This is for private use of the chipset-specific code. Return Value: STATUS_SUCCESS if successful NT status code otherwise. NTSTATUS AgpReleaseMemory( IN PVOID AgpContext, IN PAGP_RANGE Range Routine Description: AGPLIB calls this routine to release physical address space in the current AGP physical memory aperture. The address space must have been previously reserved with AgpReserveMemory. AgpReleaseMemory will always release the entire region reserved by AgpReserveMemory.  Arguments: AgpContext  Supplies the AGP extension  Range   Supplies a description of the range to be released. Return Value: STATUS_SUCCESS if successful NT status code otherwise. NTSTATUS AgpMapMemory( IN PVOID AgpContext, IN PAGP_RANGE Range, IN PMDL Mdl, IN ULONG OffsetInPages, OUT PHYSICAL_ADDRESS *MemoryBase Routine Description: AGPLIB calls this routine to map physical memory into the current AGP physical memory aperture. The address space must have been previously reserved with AgpReserveMemory. Arguments: AgpContext  Supplies the AGP extension  Range   Supplies a description of the range that the memory should be mapped into  Supplies an MDL describing the physical pages to be mapped into the AGP physical memory aperture. OffsetInPages   Supplies the offset into the reserved range where the memory to be mapped should start MemoryBase   Returns the physical address in the aperture where the memory was mapped. Return Value: STATUS_SUCCESS if successful NT status code otherwise. NTSTATUS AgpUnMapMemory( IN PVOID AgpContext, IN PAGP_RANGE Range, IN ULONG NumberOfPages, IN ULONG PageOffsetInPages, Routine Description: AGPLIB calls this routine to unmap physical memory that has been mapped into the current AGP physical memory aperture.  Arguments: AgpContext  Supplies the AGP extension  Range   Supplies the range that the memory should be unmapped from NumberOfPages   Supplies the number of pages to be unmapped PageOffset OffsetInPages  Supplies the offset in pages into the reserved range where the unmapping should begin. Return Value: STATUS_SUCCESS if successful NT status code otherwise. NTSTATUS AgpFindFreeRun( IN PVOID AgpContext, IN PAGP_RANGE Range, IN ULONG NumberOfPages, IN ULONG OffsetInPages, OUT ULONG *FreePages, OUT ULONG *FreeOffset Routine Description: AGPLIB calls this routine to find a contiguous run of free pages in the specified part of the reserved range. Arguments: AgpContext  Supplies the AGP extension  Range   Supplies the range that should be searched for free pages NumberOfPages   Supplies the size of the region to be searched OffsetInPages  Supplies the start of the region to be searched. FreePages   Returns the length of the first free contiguous run of pages FreeOffset   Returns the start of the first contiguous run of pages Return Value: STATUS_SUCCESS if successful NT status code otherwise. NTSTATUS AgpGetMappedPages( IN PVOID AgpContext, IN PAGP_RANGE Range, IN ULONG NumberOfPages, IN ULONG OffsetInPages, OUT PMDL Mdl Routine Description: AGPLIB calls this routine to query which physical pages were previously mapped into the GART. Arguments: AgpContext  Supplies the AGP extension  Range   Supplies the range. NumberOfPages   Supplies the number of pages to be returned OffsetInPages  Supplies the start of the region.  Returns the list of physical pages mapped in the specified range. Return Value: STATUS_SUCCESS if successful NT status code otherwise. AgpFlushPages( IN PVOID AgpContext, IN PMDL Mdl Routine Description: This routine is an optional function pointer. If initialized to a valid function (not NULL), it indicates the chipset has the ability to flush pages from the CPU cache. If the AGP miniport sets this to NULL, the PCI driver will flush the CPU cache itself. This routine will be called once and must flush the specified pages from the processor caches on all processors in the system. If this routine is not supported, AGPLIB will flush the caches on all processors by calling the kernel. On x86 systems, the kernel will use the WBINVD instruction. On Alpha machines, the kernel will call KeFlushDcache. Note that this is currently a NOP and Digital will have to figure out how to implement this. It may be useful to add a new routine to the Alpha HALs which flushes an MDL rather than the entire cache. Arguments: AgpContext  Supplies the AGP extension   Supplies an MDL describing the physical pages to be flushed from the CPU cache on all processors Return Value: None, this routine must succeed. Videoport Services All AGP services are provided to the video driver through the AGP_BUS_INTERFACE_STANDARD interface. The video driver sends an IRP_MN_QUERY_INTERFACE IRP down its driver stack to obtain this interface. typedef struct _AGP_BUS_INTERFACE_STANDARD {     //     // generic interface header     //     USHORT Size;     USHORT Version;     PVOID Context;     PINTERFACE_REFERENCE InterfaceReference;     PINTERFACE_DEREFERENCE InterfaceDereference;     //     // AGP bus interfaces     //     DWORD Capabilities;     PAGP_BUS_RESERVE_MEMORY ReserveMemory;     PAGP_BUS_RELEASE_MEMORY ReleaseMemory;     PAGP_BUS_COMMIT_MEMORY CommitMemory;     PAGP_BUS_FREE_MEMORY FreeMemory;     PAGP_GET_MAPPED_PAGES GetMappedPages; } AGP_BUS_INTERFACE_STANDARD, *PAGP_BUS_INTERFACE_STANDARD; NTSTATUS ReserveMemory( IN PVOID Context, IN ULONG NumberOfPages, IN MEMORY_CACHING_TYPE MemoryType, OUT PVOID *MapHandle Routine Description: The video port driver calls this routine to reserve physical address space in the current AGP physical memory aperture.  Arguments: Context   Supplies the context that was returned in the AGP_BUS_INTERFACE_STANDARD structure NumberOfPages   Supplies the number of pages to reserve MemoryType   Supplies one of the following memory types: MmNonCached MmWriteCombined MapHandle  Returns a mapping handle that video must pass back to the AGP driver on subsequent calls. This is for private use of the PCI driver. Return Value: STATUS_SUCCESS if successful NT status code otherwise. NTSTATUS ReleaseMemory( IN PVOID Context, IN PVOID MapHandle Routine Description: The video port driver calls this routine to release physical address space in the current AGP physical memory aperture. The address space must have been previously reserved with ReserveMemory. ReleaseMemory will always release the entire region reserved by ReserveMemory.  Arguments: Context   Supplies the context that was returned in the AGP_BUS_INTERFACE_STANDARD structure MapHandle   Supplies the mapping handle returned by ReserveMemory. Return Value: STATUS_SUCCESS if successful NT status code otherwise. NTSTATUS CommitMemory( IN PVOID Context, IN PVOID MapHandle IN ULONG NumberOfPages, IN ULONG OffsetInPages, OUT IN PMDL *Mdl, OUT PHYSICAL_ADDRESS *MemoryBase, Routine Description: The video port driver calls this routine to map physical pages into the current AGP physical memory aperture.  This interface explicitly allows a range of memory to be committed multiple times. If the range to be committed overlaps a previously committed range, the physical pages committed in the first range are returned by the second commit call.  Note that no reference counting is done on the pages that are committed multiple times. The caller is responsible for not freeing a range that overlaps another committed range. (i.e. you can commit a range multiple times, but you can only free it once) Arguments: Context   Supplies the context that was returned in the AGP_BUS_INTERFACE_STANDARD structure MapHandle   Supplies the mapping handle returned by ReserveMemory. NumberOfPages   Supplies the number of pages to commit OffsetInPages   Supplies the offset, in pages, into the aperture reserved by ReserveMemory where the memory should be committed.  Returns Supplies an the empty MDL large enough to contain describing the number of physical pages committedrequested. The physical pages in thisis MDL will be filled in by the AGP driver. The resulting MDL is then owned by the caller and should be freed after it is mapped.  This parameter is optional.is owned by the PCI driver and is not freed or modified by the video port. MemoryBase  Returns the physical address of the reserved committed space in the AGP aperture Return Value: STATUS_SUCCESS if successful NT status code otherwise. NTSTATUS FreeMemory( IN PVOID Context, IN PVOID MapHandle, IN ULONG NumberOfPages, IN ULONG OffsetInPages, IN PHYSICAL_ADDRESS MemoryBase Routine Description: The video port driver calls this routine to free physical pages committed into the current AGP physical memory aperture. These pages must have previously been committed with CommitMemory. Arguments: Context   Supplies the context that was returned in the AGP_BUS_INTERFACE_STANDARD structure MapHandle   Supplies the mapping handle returned by ReserveMemory. NumberOfPages   Supplies the number of pages to free OffsetInPages   Supplies the offset into the aperture reserved by ReserveMemory where the pages should be freed. MemoryBase   Supplies the physical address in the aperture where the freeing should begin. Return Value: STATUS_SUCCESS if successful NT status code otherwise. NTSTATUS GetMappedPages(     IN PMASTER_EXTENSION Extension,     IN PVOID MapHandle,     IN ULONG NumberOfPages,     IN ULONG OffsetInPages,     OUT PMDL Mdl     ) Routine Description: The video port driver calls this routine to get the MDL for pages in the current AGP physical memory aperture.  Arguments: Context   Supplies the context that was returned in the AGP_BUS_INTERFACE_STANDARD structure MapHandle   Supplies the mapping handle returned by ReserveMemory. NumberOfPages   Supplies the number of pages to commit OffsetInPages   Supplies the offset, in pages, into the aperture reserved by ReserveMemory where the memory should be committed.  Pointer to a pre-allocated MDL large enough to hold the list of pages returned. Return Value: STATUS_SUCCESS if successful NT status code otherwise. Open Issues MP synchronization required   if the GART is changing, the other processors probably need to be captured until the change is complete. Also need to understand the L1/L2 flushing and the HW capabilities. Growing/shrinking GART on the fly   punted for NT5 More info on MTRR usage, etc. Win9x interface allows you to map pages to replace ones that are already mapped. Not sure why this is necessary and seems like it would complicate the bookkeeping. Also allows for unmapping pages that aren t mapped which also seems unnecessary (and likely to hide bugs). Revision History  John VertLandy Wang, Initial document created 11/24/98  DATE  \* MERGEFORMAT  03/25/9902/16/9902/08/9901/20/9906/24/9805/05/98  Landy Wang, cover pool allocation tracking.  Nar Ganapathy, Added notes on the IO verifier.John Vert, changed AGP driver from a miniport to a bus filter driver. Incorporated misc. KenR feedback. John Vert, reality check   updated to match code. John Vert, added back in offsets for commit and free  Landy Wang, bring up to date.  Gilman Wong, added section on Graphics Drivers  Daniel Mihai, added documentation for verifier.exe. Microsoft Corporation Company Confidential Microsoft Corporation Company Confidential -%FcH {ohoUHoh -%FmH -%FcH dhCC2&mH hCC2&cH 4C&mH 4C&mH KC2&mH 4C&mH 4C&mH 4C&mH 4C&mH 4C&mH 4C&mH lTlTlTl KC2&cH 4C&mH 4C&mH ~w~p~wpwpwiwb~[b[~[~[~ |u|u|unugu`YRYR hKC2&6 hGC2& hZC2& hLC2& hKC2& hIC2&cH h\C2&cH hIC2& hHC2&cH hHC2& hGC2&cH h\C2& h[C2& hGC2& hJC2&6 hKC2&6 KC2&cH ~w~pi~ibPC +F0J# h\C2&cH h]C2& h\C2& h^C2& +F0J# h\C2& h]C2&cH h]C2&U {t{f_t_t_t hMC2&cH hLC2&cH xqxjx hNC2&cH -%FcH -%FOJ -%FOJ -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH -%FcH ]yVyOHA -%FcH hMC2& dhCC2&mH hCC2&cH
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\usb testplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8johndaly Microsoft Corp. USB Test Plan Title _PID_HLINKSUSB Test Plan XBOX USB jpoley Normal.dot Josh Poley Microsoft Word 9.0DfaDKfbjbjU USB Test Plan Author: jpoley Last changed:   SAVEDATE \@ "M/d/yyyy" \* MERGEFORMAT  6/15/2000  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc498338942"  Owners  PAGEREF _Toc498338942 \h   HYPERLINK \l "_Toc498338943"  Resources  PAGEREF _Toc498338943 \h   HYPERLINK \l "_Toc498338944"  Test scenarios  PAGEREF _Toc498338944 \h   HYPERLINK \l "_Toc498338945"  Spec reviews  PAGEREF _Toc498338945 \h   HYPERLINK \l "_Toc498338946"  Tools needed  PAGEREF _Toc498338946 \h   HYPERLINK \l "_Toc498338947"  Hardware needed  PAGEREF _Toc498338947 \h   HYPERLINK \l "_Toc498338948"  Test methods  PAGEREF _Toc498338948 \h   HYPERLINK \l "_Toc498338949"  Test code  PAGEREF _Toc498338949 \h   HYPERLINK \l "_Toc498338950"  Manual tests  PAGEREF _Toc498338950 \h   HYPERLINK \l "_Toc498338951"  Stress tests  PAGEREF _Toc498338951 \h   HYPERLINK \l "_Toc498338952"  Code reviews  PAGEREF _Toc498338952 \h   HYPERLINK \l "_Toc498338953"  Debug walkthrough  PAGEREF _Toc498338953 \h   HYPERLINK \l "_Toc498338954"  Security  PAGEREF _Toc498338954 \h   HYPERLINK \l "_Toc498338955"  Performance testing  PAGEREF _Toc498338955 \h   HYPERLINK \l "_Toc498338956"  Catastrophic failure testing  PAGEREF _Toc498338956 \h   HYPERLINK \l "_Toc498338957"  Interfaces with other components  PAGEREF _Toc498338957 \h   HYPERLINK \l "_Toc498338958"  Localization impact  PAGEREF _Toc498338958 \h   HYPERLINK \l "_Toc498338959"  Test variations  PAGEREF _Toc498338959 \h   HYPERLINK \l "_Toc498338960"  API Tests  PAGEREF _Toc498338960 \h   HYPERLINK \l "_Toc498338961"  USB Simulator Tests  PAGEREF _Toc498338961 \h   HYPERLINK \l "_Toc498338962"  Test complete criteria  PAGEREF _Toc498338962 \h   HYPERLINK \l "_Toc498338963"  Release criteria  PAGEREF _Toc498338963 \h  Owners HYPERLINK "mailto:jpoley@microsoft.com" mailto:jpoley@microsoft.com HYPERLINK "mailto:mitchd@microsoft.com" mailto:mitchd@microsoft.com HYPERLINK "mailto:marcw@microsoft.com" mailto:marcw@microsoft.com Usability International Hardware Test HYPERLINK "mailto:jwilcox@microsoft.com" mailto:jwilcox@microsoft.com Resources ntos\dd\usbnew\docs Source ntos\dd\usbnew Test source test\USB\USB Test Docs test\docs Win2000 Test Docs test\USB\docs USB Specifications  HYPERLINK "http://www.usb.org/developers/docs.html"  http://www.usb.org/developers/docs.html USB Simulator Specification test\docs\USB Simulator.doc Test scenarios This plan covers testing of the USB XID (Duke) support. Which includes device enumeration and communication. This test plan does not cover bulk transfers which are covered in the MU Test plan (xcardtesting.doc). Three Ways of Testing APIs called by games APIs called by USB device drivers Testing of actual USB IO The first two will be relatively easy and will get additional coverage by actual developers (e.g. our Duke controller). The third piece requires extra hardware and software (called the XID Simulator in this doc)   of which none currently exists for testing our flavor of USB. Spec reviews Is the spec sufficient to design, document, and test this feature? There are currently no design specifications and two architecture specs. The first dev spec is the USB Base Driver Architecture document, which the author admits is slightly out of date. The second is the XID Specification, which contains some open issues.  Tools needed Code coverage We are talking with MSR about getting ICECap modified for us to use for Code Coverage analysis.  All code will get this type of analysis. Static analysis All code will be statically analyzed with PC-Lint, Typo.pl, and PreFix.  Leak testing All code relating to storage will be checked for this. It will be done through a combination of running the tests / measuring / repeat. Look at leaks.doc (checked into   HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs"  \\CPITGCFS01\xboxro\src\test\docs ) for notes on the how s and why s of leak checking. Corruption testing This will be done with the Driver Verifier (  HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs"  \\CPITGCFS01\xboxro\src\test\docs ) as well as extensive manual tests. Hardware needed What do you need immediately? USB Simulator Chief Plus USB Monitor Supported PC Game Controllers USB Hubs What will you need further on down the road? Duke Controllers (with memory units) What lab requirements do you have? Test methods Test code What needs to be written? A USB test environment will need to be written to provide API tests as well as a test bed for manual cases Scripts for the USB Simulator What can be borrowed / adapted? USB Tests used by NT team Manual tests If we can get a good USB Simulator solution many of the below tests can be automated. Boot Time Boot with no devices attached Boot with 1 device attached Boot with multiple devices attached Play Time Add first device Add second device Remove first device Add first and third device Controller Tests Verify different types of controllers Verify all buttons and range inputs work Verify controllers in all ports work Miscellaneous Plug in big hub with all devices installed to try and overrun device enumeration buffer Stress tests Data stress (Retrieving lots of data from XID Simulator) Plug stress (device enumeration) API stress Code reviews How often? For changed code, after a check-in, and on all code at least 1 time before we ship. Which Dev / PM will attend? If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough Watch all the tested code in the debugger. Are getting the coverage you think you are? It will help you learn how things work and write better tests. Security What impact on security does this feature have? Performance testing The USB specification allows for 90% of the bandwidth to isochronous transfers (if needed), which doesn t leave much for other types of transfers (including HID). To test device responsiveness, we need to flush the pipe with isochronous data as well as bulk transfer data and verify that a user is not locked out or views noticeable delays/skips in control feedback. (Though there are no isochronous devices for year 1). We also need to ensure that the required bandwidth percentages are met with this implementation of the USB driver. It is also important to address the performance metrics of device enumeration as well as how it affects IO performance. Catastrophic failure testing The following tests will attempt to gauge the stability of the USB driver under unusual circumstances. Alternate power supply (on hub or device) is turned off/on Device not inserted fully Sledgehammer and drowning of device Corruption to USB .sys files Power failure/surge/flicker to XBox Random acts of John Note that the hardware test team will cover some of these tests. Interfaces with other components The Memory Units will use USB Bulk transfers. Testing of this component is covered in the XCard test plan (xcardtesting.doc). Although it is necessary to run these XID tests while running MU tests to ensure there are no conflicts or errors that occur. Localization impact Test variations API Tests API tests for the XInput functions (xbox.h) will consist of the typical scenarios Valid inputs Invalid inputs Boundary cases Stress USB Simulator Tests These tests are assuming an ideal USB Simulator, if we don t get a good USB Simulator then these will become manual tests. Invalid inputs for different devices Invalid ranges Invalid (nonexistent) buttons Corrupted data packets Packets in wrong sequence Simulate EFT (Electric Fast Transient)  babble Stress Valid inputs for different (and multiple) devices Verify ranges on inputs Verify all buttons Stress Device enumeration (Insert and Remove) Different types of devices Stress Unsupported devices Many devices simultaneously Verify memory remains constant when adding/removing devices Verify bandwidth/scheduling is restored when devices are removed Max out the scheduler with devices and try to add more devices XID Tests Test boundaries on all packet fields (e.g. the bDescriptorType field in the Standard Device Descriptor packet) Test invalid values on packet fields Try to flood the Transfer Descriptor buffer by opening many endpoints on devices. Test complete criteria All of the above scenarios must be covered for this component to be declared  test complete Release criteria Which of these tests need to pass to ship? At first guess, all mainline cases, all failure cases, and most edge cases, the only exceptions agreed upon by a War Team or similar group. Which failures can we live with on this feature? Not many, these are core features. How do we know when your tests say, "this feature is ready to ship"? When they all pass with exceptions as noted above. PAGE   PAGE   Microsoft Confidential
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\win2k_dupelicateip_testplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Windows 2000 TitleWindows 2000 pranavk Normal Microsoft Word 9.0@F:\folders\docs\Duplicate IP Address Detection_files\dupeIP1.gifbjbjU Windows 2000 Test Plan  Duplicate IP Address Detection on broadcast media Microsoft Confidential Revision history: June 8, 1999 Pranav Kedia Added feedback from last week s meeting. Changes concern receipt of Gratuitous ARP from DHCP Host. June 1, 1999 Pranav Kedia Modified it and added feedback from JP. May 24, 1999 Pranav Kedia Created Duplicate IP Address Detection Overview TCP/IP implements duplicate IP address detection (a.k.a. Address Conflict Detection) on the broadcast media (Ethernet, Token Ring, ATM/LANE, etc.) at the ARP level (Layer 2). The detection occurs whenever ARP packet is received indicating that there's another host on the network with the same IP address. Such packets include: regular ARP request, ARP reply and two forms of gratuitous ARP. Implementation If two interfaces on different machines boot up at the same time, they send out gratuitous ARPs. A machine receiving gratuitous ARP after sending out one, realizes that it is a duplicate IP address and does not plumb the IP address. When an interface boots up, it broadcasts a gratuitous ARPs enquiring for address conflict. If another interface on the network has the same address, it responds back and the booting interface does not plumb the IP address. If an interface receives an ARP broadcast with the source IP address equal to IP address on the receiving interface, then the receiving machine detects address conflict. Test Tools Test environment:  Three machines,  clean installation multi home box   referred to as the test box or the first test box. machine running a variety of test programs   the control box. Single home box that listens to the traffic on the wire- the second test box Test programs:  1. Netmon 2. A program to generate different type of ARP packets. (may exist   see muppet/HAPI ?) For automation: t use netmon to manually verify activity, instead parse the netmon sniff. Create an automated tool to send/receive packets from control box (muppet/HAPI may do it). Write program to monitor popup messages and event log. Use Visual Test to change from DHCP to Static and viceversa. Note 1: There are 2 types of Gratuitous ARPs, one for static and one for DHCP address. For static Gratuitous ARP both the source and destination address are present. For DHCP gratuitous ARP, the source address is set to 0(NULL) and only the destination address is present. In whichever case possible, tests should be run with both types of ARPs. Note 2: If an interface on boot up detects that its IP address conflict its action differs, depending on the type of IP address: a) Static address (i.e. in use address): A message is popped up, an event logged and the IP address is not plumbed on the interface. b) DHCP address: The system asks DHCP server to mark the address as invalid and gets a new address. There is no popup or event log. Note 3: Ways of booting up an interface: There are four ways of booting up an interface The interface boots up on booting up the machine. The interface boots up on connecting after a disconnect (from the UI or by inserting a PCMCI card). The interface boots up on causing a media connect event after a media disconnect event. The interface boots up on causing a suspend followed by a resume: Bug here. Add an address to an interface (through UI or through IpHlpApi.). Tests  LISTNUM testlist \l 4 \s 1   Simultaneous boot (active-active) Shutdown the test machine s interface. Using a control box, broadcast gratuitous ARPs for the IP address of the test server at interval of one second. Boot up an interface on the same network as the control box on the test machine. The booting interface sends out a gratuitous ARP.  Result: The test box interface on receiving gratuitous ARP for the same IP address from the control box s interface, does not plumb the IP address on the interface.  Perform the test for the test box s interface having static and DHCP address. As described in notes above, for static one gets a popup message and event log. For DHCP the test box marks the old address as invalid and gets a new address, however there is no PopUp or event log message. Perform the above test for all the five modes of boot up for the test box s interface as described in notes 3 above: namely boot up the test box disconnect and connect the interface disconnect the cable and then connect it back suspend and resume the test box add duplicate IP address to interface. (2) Duplicate address joining the network (active-passive) (a) First Test box s interface is the active machine Shut down the first test box s interface (described in note 3 above). Run a test program on the control box such that it will respond to the gratuitous ARPs broadcast by the interface of the first test box, telling that the address is already in use. Add ARP entry in second test box having the IP address and mac address of the control box. In less than 2 minutes(ARP cache entry s life is just 2 minutes), boot up the first test box s interface. The interface sends out a gratuitous ARP. The control box s interface responds back with an ARP reply.  Result: The first test box s interface on receiving the ARP reply for the same IP address, does not plumb the IP address on the interface. The first test box s interface sends out a gratuitous ARP with the MAC address of the control box s interface to reset the ARP cache table of the second test box to point to the control box. Check the ARP cache of the second test box, such that it has the MAC address of the control box s interface in the ARP table for the IP address. Perform the test for first test box s interface having static and DHCP address. As described in notes above, for static one gets a popup message and event log. For DHCP the server marks the old address as invalid and gets a new address, however there is no PopUp or event log message. Perform the above test for all the four modes of boot up for the test box s interface as described in notes 3 above: namely boot up the test box disconnect and connect the interface disconnect the cable and then connect it back suspend and resume the test box add duplicate IP address to interface. (b) Test box is the passive machine Bring up test box s interface. Use the control box s interface to send out gratuitous ARPs, having the same address as the test box s interface. Result: the test box s interface should respond to the gratuitous ARPs, have popup message and log an event. Test with the control box s interface broadcasting both type of gratuitous ARPs (One for DHCP address and one for static address) as described in notes above. On receipt of gratuitous ARP for static address, the response should have both source as well as destination address. On receipt of gratuitous ARP for DHCP address (source address of gratuitous ARP is 0), the response from test box should have destination address 0. (3) Conflict during normal operation (passive-passive) Start test box. Configure control box s interface to broadcast ARP request packet giving source address equal to the IP address of the test box s interface and the target address equal to the address of a third (or non existent) machine.  Result: The test box has a popup message and an event log indicating an address conflict. Miscellaneous Registry Parameter validation HKLM\CCS\ \tcpip\parameters\ArpRetryCount: determines the number of times gratuitous ARP packet is broadcast. Configure this value to 0, 1, 5 to check that no gratuitous ARP is broadcast, one gratuitous ARP is broadcast per IP address and five gratuitous ARP is broadcast per IP address. b) Non ARP packet with duplicate address does not trigger duplicate IP address detection. Send a UDP packet to the test box with source IP address same as the IP address of the test box s interface IP address. The test box accepts the packet and does not trigger duplicate address detection. c) Number of gratuitous ARPs and the time interval between them. Boot up test box s interface. Check that it sends out three gratuitous ARPs with a time interval of one second between successive gratuitous ARPs. d) System deactivates only the conflicting address and not the whole interface Configure an interface of the test box, with multiple static IP address, such that one of the address is conflicting with the interface address of the control box. Boot up the interface on the test box. The server should have the popup message and event log as expected. It should disable only the conflicting IP address and bring up the interface with rest of the address. e) Internal conflicts on a multi-home box are discovered without resorting to ARP On the multi-home test box, try assigning the same IP address to couple of interfaces. The UI (or API) should detect the conflict internally, without sending out ARP packets. f) Non local conflict on a multi-home box are not detected  INCLUDEPICTURE  \d "F:\\folders\\docs\\Duplicate IP Address Detection_files\\dupeIP1.gif" \* MERGEFORMATINET  In the figure Above the machine Y is the test box and X is the control box. The interface on machine Y with IP address A, does not see the machine X. From the machine X (the control box) broadcast gratuitous ARPs for address A. The machine Y(test box) should not detect the IP address conflict. g) Addresses in active phase not used for communication The address in the active phase should not be used for communication or visible to the applications (invisible to Layer 3). The only acceptable use of the IP address in active phase is gratuitous ARP. Host in active phase for specific address should not respond to ARP requests for that address, or generate non-gratuitous ARP requests. Start sniffing the test box and then boot it up. Ensure that The test box does not send out any packet with the IP address except the gratuitous ARP packet till one second after the last gratuitous ARP broadcast. h) Address conflict detection for multiple addresses Add few thousand IP addresses to an interface on test box. Reboot the interface. Sniff to check that the machine sends out gratuitous ARPs for each address added ArpRetryCount times.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\usb simulator.doc ===
Microsoft Word Document MSWordDoc Word.Document.8John Daly Microsoft Corp. XBox USB Simulator Title _PID_HLINKSXBox USB Simulator XBox Testing Tools Josh Poley (C) 2000 Microsoft Microsoft Confidential Normal.dot Josh Poley Microsoft Word 9.0P|<m/+ ]~eUnden '|MeG =A3f8 vaDNjhf9 eOp53 ` SFq b&S<9 `&P<! 5-7yn g;w7Y 607P|C cE-+jZ pG=M= eOp#s3 eOp!S; jT+pZ pVn&m qN:6N z ~^Mwq, MMEPc m%QF1n nw:q2 8oBlO1 n*Op!SMq nBm8g nBm8g `:SNq 1hOq{ xojD`\D D[<^~y @XX{W }-mgj z~435 {7r?L ZZ*Ov u3w_K V0%4. Ob??c R::*/ \zUtp _*Op{ .{r}e @%OpD K2woL .{r}e x}XUzV qt<m/+*\ qWyv  qWyv! 1s?2v qWy^@ </"F0 KGrl, kd#^#~ $f5{> q$jC$ vF2~s |We}W T6Ou!OM %Ou)OMe T6Ou!OM KF6gV e[eq. ZY>gY|+ WVVvi \N>~~ ja]u$ ef,3c T6Ou!OM %Ou)OMe QLgBl za]}dsf e3i>) lk J3 e[?Aif 5J3{{0 \el&h [Y9VFe `_'{2 ?7'6e VF2^q g?Q2vt K\v-( |We}W T6Ou!O &h7a? A?E5C @?A5C oM\7q za]}d ^Eif_ lk*J3 J3{U0 lk6J3{s0 mg)mg uh<n} qXV0u]N `_'{EEE  'M$Eq VD2>l ef,3c ,w0,S Va]k$ $cGg1 tnr$= e[mE\ e[_@ifo ?J3{: Lwb!?Vx `_'{UUU  WVVvi `mE\e /{>'_ ef,3c 5{>'_ %Ou)OMe T6Ou!OM %Ou)OMe &h7a? /{>g[Q- :a]]dsf .?c=X tnr$= `_'{EEE  ef,3c  E1^>A T6Ou!OM %Ou)OMe T6Ou!OM av\wH fh7c_' oM\7q EQcb$ q;;ng q;;ng q;;ng ds'gP &-t.- ~kJ6V sIb}j I>IT_ aD/&Cq Dw&Cq  fQ>+p #Pggf Dej{b =QEyU =\g>j =;RM(o ?;Tmz Lr.}7 CnL4D |wc3oZ `}](YN {@k&~ ?gJ).M na&S< F3M(nb >dfS< Le&Q< cLn+S{ hLqcc {9ZwO +97qyaa m{PFN {@!SLq m{PFN }-J[s m}:q& AWvF9 ;Kbnk -bZ;s AO~|U H%r\1!{ 2tg2Oh Gy?Cw z{ Ey U3>kk hOy{C hKy[C q(wbu cf.XL 8ojM~ }L6S& w0iw(c h;EO~ 9tF'<nI 9~a6. e>HMdf vhbCjhb]j y.KTQ^ a=Ki=K dEWe]V0 {0C(B 8M<*f Q39jFG mnOms }]_I< f1Jlh xQu0^T0^T xQu0^T0^T xQu0^T0^ ?1'X$ D(_MX D(_OX -D(O! %D(?F &T|D  Z|{0U mnOms }]_I< :Cr~P u`>QC n3^T0^T xQu0^T0^T xQu0^T0^T =J[g*L\ }]_M< mkOm[ u=9][ r_ors &By a D(_FX =J[cjJ \FD(G \HD(G o$64~ V;~mP V>w=F *D(/$ #By;a <ND(G <FD(G mnOms }]_I< +#.{O P>YRX )B9XRX =E(GJ C=E(GK X,/=*: Q39*n Wz.Av ;'zfi }]_I< RYD^Y %64~w xQu0^T0^T xQu0^T0^T xQu0^T0^ g?o%z~ hu=9][Microsoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6Pages Masters Page-1 Dynamic connector Hub / switch Desktop PC Color box Line-curve connector Mouse.12 _VPID_PREVIEWS _VPID_ALTERNATENAMES _PID_LINKBASEjpoleyVisio (TM) Drawing Arial Wingdz onotype  Symbo L/^&9 7AOY@;P P:?-\ tKf2| BOTOfOxO iW?i?{4Lz Pi0"f .q.qZ 2oqoq O!O!yb f1fOJf BgVc- /0/B/ T/f/x/ ?,?>?P?b? O#O5OGOYOkO @_R_d_v_ o(o:o`Lo^opo cF/X& `d/v/ ?-???Q?c? PPObOtO _&_8_ J_\_n_ 1oCoUo@goyeJ 5/G/Y/k/}/ _$_&O8OJO\O ?-??? /1/C/U/ 1?C?U?g?y? %JO\OnO o0oBoTofoxo &0[Y=< d-prn-15 \CORP012 6 USA/RE Letter( ?PRIV ///A/S/ ?+?=? winspo \\red -prn-15\ CORP0126  USA/RED /FLOOR1/ NEAR 125 NPIBA6 001:RAW Repres ents a h ost mach ine. Rig ht-click property  informa?tion. s_SBN.ch m!#22335 opyright  2000  o Corpor ation.   eserved. ~DrE>qE cm@Dd ufacture nter the  name uct Numb Assev erial: uilding? menUtP G`jRB Reposi perti custom cted sha rEK42 E"K43 0UK44 [U"K45 uK:7e `7Copyr ight 200 0 Visio  Corporat ion.  Al l '"s res erved. %r$w? `7Copyri ght 2000  Visio C orporati on.  All  '"s rese rved. Mozs? `7Cop yright 2 000 Visi o Corpor ation.   All '"s r eserved. `7Copyr ight 200 0 Visio  Corporat ion.  Al l '"s res erved. %r$6w? Mozs? `7Cop yright 2 000 Visi o Corpor ation.   All '"s r eserved. `7Cop yright 2 000 Visi o Corpor ation.   All ;"s r eserved. O"OqG Mozs? `7Cop yright 2 000 Visi o Corpor ation.   All '"s r eserved. `7Copyr ight 200 0 Visio  Corporat ion.  Al l '"s res erved. %r$6w? Mozs? `7Cop yright 2 000 Visi o Corpor ation.   All '"s r eserved. `7Copy right 20 00 Visio  Corpora tion.  A ll '"s re served. i_'e! pyright  2000 Vis io Corpo ration.   All  reserved >'L1z% Copyrigh t 2000 V isio Cor poration .  All '" s reserv 7Copyrig ht 2000  Visio Co rporatio n.  All  '"s reser `7Copy right 20 00 Visio  Corpora tion.  A ll '"s re served. Network Repres ents a h ub or si milar de vice. Ri ght-clic k to   propert y inform ation. SBN.chm! #22321 `7Cop yright 2 Corporat ion.  Al 2s res erved. |GF5qD Reposi%1  D7.{*_N TqAA' 2%a$%a Manufact Enter th duct NumUbf crip%1 Serial~ Loc$2 uilding Rosom perties7 "$ fo piece of  equip `7Cop yright 2 000 Visi o Corpor ation.   All '"s r eserved. %6K~6MO` %r$w? `7Cop yright 2 000 Visi o Corpor ation.   All '"s r eserved. (E6&(Y6 :(E6N(Y6b(E6v(Y6 7Copyrig ht 2000  Visio Co rporatio n.  All  #Rs reser?ved. UAmFUoU Lo^oi 1X/j/|/ rVQ?' i_'e! `7Cop yright 2 000 Visi o Corpor ation.   eserved. rAz%~N _rA;5 onnector This c onnector  automat ically r outes be tween th e shap Vis_SBN. chm!#223 Copyrigh t 2000  @ io Corpo ration.   All @Bs  reserved ?_g?2 ? $2~ Repres ents a h ub or sw itch. Ri ght-clic k to   propert y inform ation. Vis_SBN .chm!#22 `7Copyri ght 2000 io Cor poration .  All  s reserv?ed. 8!8!| eposi  T_ext ufacture er the m>88 name Produc?t NumbA;>q* 5Descriqp (<Asse a7aURI SeriKalY_ `_rYlWd 7?'IjBuild'ing^orYb RoomoIO a7rKp cAmene erties `0SWPg1cu Tlected  shap{1Y ck and W 7Copyrig ht 2000  Visio Co rporatio n.  All  "s reser iAX%uO `7Copy right 20 00 Visio  Corpora tion.  A "s re served. <!<!9 <KV3PO D$5<K OvSf_xU| `7Copyr ight 200 0 Visio  Corporat ion.  Al l c"s res erved. j'(U_ (1#P(%&% 7Copyrig ht 2000  Visio Co rporatio n.  All  Bs reser?ved. c(jQgQ &t_e; t("5$ opyright  2000 Vi sio Corp oration.   All E"s  reserve M?_?q? U@Xlb'v `7Copyr ight 200 0 Visio  Corporat ion.  Al "s res erved. `7Copyr ight 200 0 Visio  Corporat ion.  Al "s res erved. 7Copyrig ht 2000  Visio Co rporatio n.  All  "s reser 7Copyrig ht 2000  Visio Co rporatio n.  All  "s reser `7Copy right 20 00 Visio  Corpora tion.  A "s re served. ?@+`t `7Copy right 20 00 Visio  Corpora tion.  A "s re served. U@g#vb' `7Copy right 20 00 Visio  Corpora tion.  A "s re served. H;oMo s?Pn6 `7Cop yright 2 000 Visi o Corpor ation.   eserved. `7Copyr ight 200 0 Visio  Corporat ion.  Al "s res erved. `7Cop yright 2 000 Visi o Corpor ation.   eserved. `7Copyri ght 2000  Visio C orporati on.  All "s rese rved. ?@YCt `7Copy right 20 00 Visio  Corpora tion.  A "s re served. U@fsb'v `7Copy right 20 00 Visio  Corpora tion.  A "s re served. U@Pob'v `7Copyr ight 200 0 Visio  Corporat ion.  Al "s res erved. E`HA3 NmG<H H;oMo `7Copyri ght 2000  Visio C orporati on.  All "s rese rved. H;oMo `7Copy right 20 00 Visio  Corpora tion.  A "s re served. `7Copyr ight 200 0 Visio  Corporat ion.  Al "s res erved. `7Copyr ight 200 0 Visio  Corporat ion.  Al "s res erved. EHA03 ;o$Mo U@L`'vb `7Cop yright 2 000 Visi o Corpor ation.   eserved. `7Cop yright 2 000 Visi o Corpor ation.   eserved. `7Copyr ight 200 0 Visio  Corporat ion.  Al l x"s res erved.  A?%,K ?mC]O opyright  2000 Vi sio Corp oration.   All   reserve O!Hg% OjNt1Q L5|*Kq M;?r#7r# o+n~%]*vb'vb G0iL5=~ Or?*O =4/O_ ?"?4?F? 5OGOb o{Cb^ _G_U@ HoZolo~o 7U@ K U@0l0 {C*J4p _]?3I  Name ntory Nu $'iz&n "7 oPs Repres ents an  IBM comp atible d esktop P C. Right -click t er pr operty i nform Vis_SB N.chm!#2 `7Copyr ight 200  io Co rporatio n.  All  2s reser GP5{D Reposi/1  mja{5 2/a/a Manuf acturer Enter  the m nameI0S Product  Descrip/1\ Serial Loc.2 Buildi men ` rties lected Oshap iY7_1 pyright  2000 Vis io Corpo ration.   All  reserved 3_ETlQHP5x^ Tt5xU 1T/%H G?Y? k?}? [fO%N `7Cop yright 2 000 Visi o Corpor ation.   All /"s r eserved. O;6&O DS_eV OD$^1 1$d!Lo ]r1v( opyright  2000 Vi sio Corp oration.   All ;"s  reserve ~%Y9q? &1_UD_V_h_z_ ;oMo_oqo4 D?V?h?v Sb'vb' i_'e! `7Cop yright 2 000 Visi o Corpor ation.   eserved. _rA;5 Networ Repres ents a u ser-defi ned prot ocol or  device.  Right-cl ick to c hange  s_SBN.ch m!#22415 opyright  2000  o Corpor ation.   eserved. RA\%^D SNTShow l @BClu 2"rF}3>f odify De k6,"D 6ti>sT facturer Enter th Produc t Numb scrip.1 SeorialD BuilOdingS ox Colo 7a cH1 fb0 Q;Gre en;Yello w;Orange ;Purpl q;RBQDPRC 222DBAOA iveh5\02-d~  appea[` bD0._2 rties> ustom X1ed sh ix'~! `7Copyr ight 200 0 Visio  Corporat ion.  Al "s res erved. FillFor?egnd dLinePa_ttern Copyrigh t 2000 V isio Cor poration .  All  s reserv E*BBS (zas` FillFor ePattern iF7L1 opyright  2000 Vi sio Corp oration.   All   reserve illForeg O07S3 r.Color  I!*q=5M! MtLinePat/ternv yx0AQ T/f/r Repres ents a c omputer  card or  ce. Righ t-click  perty in formatio _SBN.chm !#22410 pyright  2000   Corpora tion.  A Rs re served. (\d.[ U)tV!4w )t`!4w4 !4wSe )tB!4w %x~!4w %x.!4w Reposi  Text "23m@ Manuf acturer )s`B`)r Enter  the m` Product  Numbi Descrip oAsse Seria-l Buildi QXX[Q rties lected Oshap LU,D3 ck and W )Mde,J (1#(%&% io'u! `7Copyr ight 200 0 Visio  Corporat ion.  Al Bs res erved. #1#0z &t_e? jB("g `7Copyri ght 2000  Visio C orporati on.  All "s rese rved. )?5OGO ORN\1Q ,#<"% y&"(e&6(y& `7Copyr ight 200 0 Visio  Corporat ion.  Al 2s res erved. Ew?{@ ?@XUiQ O%`TiQu 6_hH[-u^W hSiQe `7Copy right 20 00 Visio  Corpora tion.  A ll >"s re served. A)p\Ob Copyrigh t 2000 V isio Cor poration .  All  s reserv #NTA8% GTAs%`E `7Cop yright 2 000 Visi o Corpor ation.   eserved. a?]Py j#j!j# j#*!j#@` `7Copy right 20 00 Visio  Corpora tion.  A Bs re served. <-2!!$ `7Copyr ight 200 0 Visio  Corporat ion.  Al 2s res erved. 2!3PE2A N#[?< opyright  2000 Vi sio Corp oration.   All   reserve 2!3E2A N#[?< opyright  2000 Vi sio Corp oration.   All   reserve 2!3E2A "/24$ GN[?< Copyrigh t 2000 V isio Cor poration .  All  s reserv 2!3E2A "/24$ GN[?< Copyrigh t 2000 V isio Cor poration .  All  s reserv 2!3E2A N#[?< opyright  2000 Vi sio Corp oration.   All   reserve 2!3E2A "/24$ GN[?< Copyrigh t 2000 V isio Cor poration .  All  s reserv 2!3E2A N#[?< opyright  2000 Vi sio Corp oration.   All   reserve 2!3E2A "/24$ GN[?< Copyrigh t 2000 V isio Cor poration .  All  s reserv 2!3E2A N#[?< opyright  2000 Vi sio Corp oration.   All   reserve 2!3E2A d"/4$ 7Copyrig ht 2000  Visio Co rporatio n.  All  2s reser?ved. 2!3E2A N#[?< opyright  2000 Vi sio Corp oration.   All   reserve 2!3E2A N#[?< opyright  2000 Vi sio Corp oration.   All   reserve 2!3E2A _J#UG 7Copyrig ht 2000  Visio Co rporatio n.  All  c"s reser 7Copyrig ht 2000  Visio Co rporatio n.  All  2s reser?ved. 2!3E2A !8# ! opyright  2000 Vi sio Corp oration.   All   reserve U@1.9 "'34h_ pyright  2000 Vis io Corpo ration.   All  reserved 2!3E2A (_\=@Nr Copyrigh t 2000 V isio Cor poration .  All  s reserv 2!3E2A -Iq?@ (l=@6J' N#[?< pyright  2000 Vis io Corpo ration.   All  reserved 2!3E2A )|=@f N#[?< opyright  2000 Vi sio Corp oration.   All   reserve 2!3E2A EQtu= OrBI$$ `7Copy right 20 00 Visio  Corpora tion.  A 2s re served. !3E2A JBI$$ `7Copy right 20 00 Visio  Corpora tion.  A 2s re served. !3E2A N[?H< `7Cop yright 2 000 Visi o Corpor ation.   eserved. A2!3E2A U@_B> N[?H< `7Cop yright 2 000 Visi o Corpor ation.   eserved. A2!3E2A -Ia?@PU `7Copyri ght 2000  Visio C orporati on.  All Bs rese rved. <-2!$ N[?H< `7Cop yright 2 000 Visi o Corpor ation.   eserved. A2!3E2A d"/4$ 7Copyrig ht 2000  Visio Co rporatio n.  All  2s reser?ved. 2!3E2A d"/4$ 7Copyrig ht 2000  Visio Co rporatio n.  All  2s reser?ved. 2!3E2A `7Copyri ght 2000  Visio C orporati on.  All 2s rese rved. 2!3E2 `7Copyri ght 2000  Visio C orporati on.  All 2s rese rved. 2!3E2 d"/4$ 7Copyrig ht 2000  Visio Co rporatio n.  All  2s reser?ved. 2!3E2A `7Copyri ght 2000  Visio C orporati on.  All 2s rese rved. 2!3E2 "/24$ GN[?< Copyrigh t 2000 V isio Cor poration .  All  s reserv 2!3E2A `7Copyri ght 2000  Visio C orporati on.  All 2s rese rved. 2!3E2 d"/4$ 7Copyrig ht 2000  Visio Co rporatio n.  All  2s reser?ved. 2!3E2A `7Copyr ight 200 0 Visio  Corporat ion.  Al 2s res erved. 2!3E2A d"/4$ 7Copyrig ht 2000  Visio Co rporatio n.  All  2s reser?ved. 2!3E2A d"/4$ 7Copyrig ht 2000  Visio Co rporatio n.  All  2s reser?ved. _J#UG !L# !L#4! `7Copyr ight 200 0 Visio  Corporat ion.  Al 2s res erved. >W(E3T Q/X !>W #Q/X4!>S `7Copyri ght 2000  Visio C orporati on.  All 2s rese rved. 2!3E2 N[?H< `7Cop yright 2 000 Visi o Corpor ation.   eserved. A2!3E2A `7Copyr ight 200 0 Visio  Corporat ion.  Al 2s res erved. 2!3PE2A `7Copyr ight 200 0 Visio  Corporat ion.  Al 2s res erved. 2!3PE2A `7Copyri ght 2000  Visio C orporati on.  All 2s rese rved. 2!3E2 `7Copyri ght 2000  Visio C orporati on.  All 2s rese rved. 2!3E2 `7Copy right 20 00 Visio  Corpora tion.  A 2s re served. !3E2A `7Copyr ight 200 0 Visio  Corporat ion.  Al 2s res erved. 2!3PE2A `7Copy right 20 00 Visio  Corpora tion.  A 2s re served. !3E2A Copyrigh t 2000 V isio Cor poration .  All x" s reserv %O7OE `7Copyr ight 200 0 Visio  Corporat ion.  Al l |"s res erved. OFNP1A o5RUH `7Copy right 20 00 Visio  Corpora tion.  A ll |"s re served. OFNP1A X?`j?|? o5RUH `7Copyri ght 2000  Visio C orporati on.  All "s rese rved. OJNT1Q \?`n? O8oJd \_n_  e?]P6 `7Copyri ght 2000  Visio C orporati on.  All "s rese rved. GTAs% pyright  2000 Vis io Corpo ration.   All n"s  reserved %,_=oP_an}1Y u?]P} opyright  2000 Vi sio Corp oration.   All r"s  reserve A9%&N u?@PO% `7Cop yright 2 000 Visi o Corpor ation.   All ~"s r eserved. =-GR1Q <OqHYOkO}O _6_R1Y P_b_t_ Ko]ooo Oz?4O OL_^_ etwork Use to  create  either a  straigh t or cur ved conn ector. trol? handl ge shape7 of 7=$@6 `7Copy right 20 00 Visio  Corpora tion.  A 2s re served. BN.chm!# 22333 \(^h$8L 'St4" )mtP2 nufacturOer ter the }m  name Produ ct Numb! rial9 lding> Room\O ment(O moCC% @ Posi rties lected Oshap[ _%?ypSTP 1(9Ls User  Inven tory Num J$'iz&n "7 os Netwo eprese nts a ty pical tw o-button  mouse.  Right-cl ick to  er prope rty info rmation. Vis_S BN.chm!# 22330 `7Copy right 20 00 k io C orporati on.  All "s rese rved. Reposi ! Text XYJoFb "q1q3 nufactur er the m>   name Produc t Numb) Descriqp ldingF Room\W men@P*Y B(E!d pertie{s custom ted shap /(58, i8W>Q opyright  2000 Vi sio Corp oration.   All   reserve /oAoSoeo lN|]D rEN['_ DYG7Q YM'P" :q" l NbjqXI i_'e! pyright  2000 Vis io Corpo ration.   All  reserved L1V%L1a Mouse @b*[#Ab& !y'EJ\" ?F=;8 Connecto)rCI 24Wy1_W  3X%!_W 3X<?Z 5"7T=?Z 3X2?Z 3X5\V /!/!%! U-.rW x//[| T/f/x/ /?@+U #?5?G?Y?k?}? _@*_<_N_`_r_ 8oJo\ono H?Z?l? O O2O OVOhOzO /_A_S_e_w_ o.o@oRodo XBoxV OQ8+/p %?U@pL2o ?@.T2 mH]A57Uh8? 3TBJq'" 1"{a{aX" 7?I?[8 SCFU?SB HubPObO _(_:_L_ `'@z3 5!V&B/ PU/g. bTxQe BxRdS 1mTZA Q4PG& HJ?{W _!_3_E_W_i_ (O:OLO !=(0e Wa2a} `>/P/b/aH ?0?B?n 0OBOn ;_G_Y_k_}_ o#o5oGoYoko}o /"/4/`F/X/j/|/B H3&C?U? ob'O9OKO]O /\Wef\u@ o(o:oB @&75@;%L xa0$~ O,O>O PObOtO 5/G/Y/ _$_6_H_Z_l_ _U?g? .;oMo{a ?%?7?I?[? ?@_RR oO*o<b i_TPO "'$pAo :ziVQP thernet  b2F5[\}@2N /.^g@ 6<d\r @z3eqb <?N?1 SoAQ%a) %a d7 FUSB Si mulator b*Qdt2@>1>1 5hOzO o!o3o EoWoio{o $L$%q RjPrp?@ I5!5%o A!?3?E?W?i?{? EOWOiO{O ontrolle '3[^?Cy ]bq1g Bfa$fa j-J&\#k /O/a/ ot_2o )?@;?M?_?q? =r*/4BR EBA@MC q=_U@p ZRu?@ uq`ZS ._@^Ep Vu-12 T1a1n1{1c  o2oDod 7?I?[?KS BOTOfOxO f9_K_ ///A/a P]0w/ A+1|GIC?U@ AcOFJOE75 1^S\Q ?0hMi _JO\O%_ YLqHLy q^]_RW_S `uUTaS eUTcS Nn7mNr` E|Z9! )|=@f EQtu=@ nPZ5EK oPZD,QG /*/</U Y?k?}? 1!O3OEOWO sK_]_}Q2t_ #o5oU Qpko}o ?c5*/</ ?$?6?H? =$_6_H_&dW oZ_l_~[ oU@ct fafec _8gR9 (ot_Lm} cS_qw #;#0O U:/L#" %TCQFB wpXCP f/OAG 1o/gH CuCoUogo%O SqVXtPO% %q%}U &?8?J? 9_K_]_o_ v0oBo @\CP@eC QQ/c  P@_"( (l=v? lFs1o =BvTo| LMCe; )|=@f- EQtu=@ lTEJO P0_B> ?G!%>/P/ @PU$Ak@ /}0g1 ?e/w/ g??`gO Qaoso 6K2Ip O@i?{? wPObO _*_@<_N_`_r_ |3ko}oSd seBd$ ;"/4/F/X/j/ IZE!?3?;c O-O?OX 8_U@~ o-o?o oU@ct ~$Q@x $Q0orU ZquqrtM T Q4~ GpoqZp$Q Zp ZpU!Zp"Zp#Zp$ZpU%Zp&Zp'Zp(ZpU)Zp*Zp+Zp,ZpU-Zp.Zp/Zp0ZpU1Zp2Zp3Zp4ZpU5Zp6Zp7Zp8ZpU9Zp:Zp;Zp<Zp =Zp>Zpg ,!$$RI-.$ 9Ex0GH? dPO/% &D/_- /!/3/] Z/l/~/ ?,?>?P?b? Dfd_v_ Ko]ooo @W?@m !6C4A n[(l= O"?4? ?aC$a8 e"-D +z8e-D!+z q")H"+z U-D#+z E"-D$+z q)H%+v.q *qcO lzce_N1_ )|=@f EQtu= o$o6o ?@PUX1  w.(J x0(J#q ?+ADA W<No`oro ?/?A?S?e?0 +3#O5OUA2LO )`(C_U_ goU=m 5U/g/ =?O?a? O OeD iFO_a_s_ 2ODOVK @<oNonaBeowo ^CQq1|z dtI?K eN Z# n5xe7 `2~@} 1o/gH ;_G_Y_ )?;?7.Ep -O?OQOq O/a/s/ &FF?`X? -O?OQOcO _._P@_R_d_ Zolo~o !p/S*\% !k3i1 ?W/i/2? 9YQHYY Q^j?_7_`j:Ub4 ``jmUb4a`j<a^8 Eb4c`j d`jHa^8e`fca_a NnDMNr` @6J') )|=@f EQtu=@ G_Y_k_ !(o:oB!` LoUg`o Ugh}oUgi oUgj$ Ugn]:B%Xdo ]:91Thp]:XaThq AThr]: /`1y1 _&_8_J_\_% (CoUo@goyo 1./@/R/ d/v/ @%?7?" ksX?j? O0OBOb ^PxOT gG-Pt HiD_U@ XjS%p E"rtvzzPertwzz e"rtxzzRqnxyzz U"rtzzz0Urt{zz^q"nx|zzoert}zv 4'o9o _._@_e _Ur], /)/;/M/ o:1=1?C?U? doGj6E RUu.e 9ce8] ^2OZ_"H ?@p at xV4@^p qT0qf t0p`. u*O'? -O9OKO :_L_^_ o]OoO O}>E_p -c'&o`" T/f/x/ pG9?K?0 P"O4OFO 0_B_T_ HqDoPoboto $Q+~! d' o,S1~! nPW?@m 53?E3eL$S1 O K1@ /f O1z ?J/\/n/ 0(R(\= [(l=%?`MOI3 -O?OQO ieE\Q $mT=Q Woio(_:_L_^_p_ `_B>/ a?@PU F L+'46,0A /&/8/ '6oHoZolo~o !/3/E/W/i/{/ ?*?<; QN?`? O#O5O QPkO}O<; gR_d_v_ _<7Gs`u dEkra Xg clGqra 9se@d <Xg@Wa6i _Z`Cq >oPoboto /+/=/ -?9?K?]?o? C`q`y 6oU@ct w?@Ver UutuP` ?@-pfqt $q$q: q$q!t u'_9_`K_ 6aV~;dPO% ?@0Lb /-/?/ ?#?5? PV?h? O.O@O ROdOvO 0oI&F|! Fvfoxo 0?330H3 30\B(\=p _\OnO %f7__o1 _)|=@f EQtu=@ =l75JO `_B>c W"/J? 1D_V_ 'j_|_ waoso 20L/^/p+ w3?E?W?i? COUOgO 3N_`_6Ty[ ?P l[Oa e[omcetT KvBvBhDw <uMo`u qa/m/ EW?i? QBp<v KVUj_U@ct o&o8o4_ nMa@[ Ma0RbU XaXanyMa =aXaUd0 yQocj \6@vr 'Y$=b (O%??k 1I?[:x +O7OIOMo_oV\ 1_ogH o[OmO O{>Ep a'$o  @/R/d/v/ 2ODOVOc_ _._@_R_ FqBoNo`oro [7G}  $O+|! m,Q1|! ?APB+%1 ?H/Z/l/~/ 0&R(\=p =#?KOG3 +O=OOO Uogo&_8_J_x\_n_ _)|=@f EQtu=@ `_B>- $d&,o o[/U@ D L)'4 4,.A.Al $/6/H/ '4oFoXo /1/C/U/g/y/ ?(?:; O!O3O OPiO{O:;3 gP_b_t_ dCkpa  alEqpa 7se>d VgUa4i <oNo`o +?7?I?[?m? ZU!O3O S>LOT  e4oU@ct ?@Vcr ?@F[bUuruN`}se|mA ?[@pdqt T-uOF2 U"q"q8 Guide TheDoc Page-1 ure Form Visio 90 Connector Visio 00 Visio 01 Visio 02 Visio 03 Visio 10 Visio 11 Visio 12 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Net Normal Thin lin Net Contrast Net Text Net Shadow Connecto et Highl 3D Net Face et Shado et Dark  Shadow 3D Net LED et Scree 3D Net Hole Manufacturer uctNumbe PartNumber uctDescr iption AssetNumber SerialNumber Location Building Department mic conn?ector Hub / switch FillPattern FillForegnd FillBkgnd Desktop PC UserName Inventory mic conn ector.60 Color box Color ColorPicker Saturation ShowLine Luminosity Dimension ColorProp ScaleFactor JamFill JamText FillColor TextColor JamLinePat mic conn ector.61 mic conn ector.50 Card.194 Card.258 Card.322 Card.386 Card.450 Card.514 -curve c onnector Mouse.12 *E$/0 :l/0r |R/0| 7=PVG ZLKPQ Kj|KPU ?@(;WbjbjU XBox USB Simulator Table Of Contents  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc484316173"  Introduction  PAGEREF _Toc484316173 \h   HYPERLINK \l "_Toc484316174"  Sample Transaction  PAGEREF _Toc484316174 \h   HYPERLINK \l "_Toc484316175"  Type of Tests  PAGEREF _Toc484316175 \h   HYPERLINK \l "_Toc484316176"  Functional Requirements  PAGEREF _Toc484316176 \h   HYPERLINK \l "_Toc484316177"  Simulator Requirements  PAGEREF _Toc484316177 \h   HYPERLINK \l "_Toc484316178"  Ethernet Communication  PAGEREF _Toc484316178 \h   HYPERLINK \l "_Toc484316179"  TCP/UDP Ports  PAGEREF _Toc484316179 \h   HYPERLINK \l "_Toc484316180"  Packet Definition  PAGEREF _Toc484316180 \h   HYPERLINK \l "_Toc484316181"  Command List  PAGEREF _Toc484316181 \h   HYPERLINK \l "_Toc484316182"  Device Enumeration Sample  PAGEREF _Toc484316182 \h   HYPERLINK \l "_Toc484316183"  Connect A Device  PAGEREF _Toc484316183 \h   HYPERLINK \l "_Toc484316184"  Get Device Descriptor  PAGEREF _Toc484316184 \h   HYPERLINK \l "_Toc484316185"  Set Address  PAGEREF _Toc484316185 \h   HYPERLINK \l "_Toc484316186"  Get Configuration Description  PAGEREF _Toc484316186 \h   HYPERLINK \l "_Toc484316187"  Set Configuration  PAGEREF _Toc484316187 \h   HYPERLINK \l "_Toc484316188"  Get XID Descriptor  PAGEREF _Toc484316188 \h   HYPERLINK \l "_Toc484316189"  Future Enhancements  PAGEREF _Toc484316189 \h   HYPERLINK \l "_Toc484316190"  Appendices  PAGEREF _Toc484316190 \h   HYPERLINK \l "_Toc484316191"  References  PAGEREF _Toc484316191 \h   HYPERLINK \l "_Toc484316192"  Glossary  PAGEREF _Toc484316192 \h  Version 1.1 Last Edited:   SAVEDATE \@ "M/d/yyyy" \* MERGEFORMAT  6/1/2000 Introduction This document describes the functionality required for testing the XBox USB software and hardware. A custom USB device (called the USB Simulator in this document) will be used to simulate multiple XBox peripherals.  These  virtual devices  will be programmable and controlled through software on another computer, or the same XBox, (called the Controller in this document). The Simulator will act like a USB hub and must support multiple virtual devices, each with different capabilities. These virtual devices will support XID and bulk transfers. The actual devices will be operated in real-time via the controller through an Ethernet (TCP/IP communication) connection. So responses to USB commands from the Host will always come from the controller. Our current XBox hardware configuration will allow up to 5 simulators will be attached at the same time.  EMBED Visio.Drawing.6   Sample Transaction Protocol Description Simulator IN packet Simulator Controller TCP/IP IN packet Controller Simulator TCP/IP DATA1 + 8bytes data  Simulator DATA1 + 8bytes data + CRC  Type of Tests The following is a short list of the types of tests that will be used to validate the XBox USB hardware and software. Device enumeration stress Data stress Testing the limits on the total number of connected devices XID packet tests (e.g. boundary cases on the different fields) MU testing (simulate memory cards on the controller) Isocronous tests (such as voice and audio) Invalid data (e.g. sending corrupted XID packets or bad responses during device enumeration) Functional Requirements This is the list of general functional requirements of the USB Simulator. Act like a hub Support at least seven devices Support for bulk transfer Support for Isocronous transfers Send all USB communication from the host to the controller Send USB responses from the controller back to the host Simulator Requirements Here is a list of hardware and software requirements on the simulator. USB connection Dongle to support XBox s USB connector USB Cable must be able to extend up to 8 feet and be robust with respect to noise immunity (braided shields, etc.) 100Mbit Ethernet connector Jumpers that configure the IP address Access to the electrical signals and power Breakout functions that allow probing of D+ and D- Ability to insert a different power supply TCP/UDP Server that listens on ports 200 and 201 Take care of the USB CRCs and ACK and NAKs at the appropriate times Ethernet Communication Communication with the Simulator and Controller will be handled through TCP/IP sockets over the Ethernet connection. The Simulator will act as a  server  and listen on ports 200 and 201. The controller will be the  client  and initiate any connections. Since the controller will not necessarily know the IP address of all the connected simulators   the controller will send out a broadcast command asking for their IPs. The simulators will then respond with their IP address then the controller will be able to initialize a TCP connection on port 201. The controller and simulator will be required to send and receive on port 201 without blocking each other. Thus while the controller is sending a USB request, the simulator can be receiving that request and sending a response from the previous request. If the simulator does not get a response from the controller quickly enough what happens, then it should respond with a NAK. TCP/UDP Ports Description 200 UDP Broadcast 201 TCP Packet Definition Packet Format Description 8bits Function # 8bits Command 8bits Subcommand 8bits Data Size (number of bytes) Command List Direction From Sub Cmd Description Data Example Simulator Data contains USB request Setup packet: 0xB4 0x00 0x00 Controller Data contains USB response Data0 response: 0xC3 0x01 0x02   0x08 Controller IP Query (broadcast) Simulator IP Query Response (broadcast) 0x01 0x02 0x03 0x04 Controller Connect a new device Controller Disconnect an existing device Controller Request status of devices Simulator Bit mask of connected devices 0010110 Controller Request MAC Address Simulator MAC Address response 0x27 0xA5   0x43 Controller Send an ACK at the next appropriate time Controller Send a NAK at the next appropriate time Controller Do not send an ACK or NAK Simulator Data contains sent ACK or NAK Simulator Data contains USB response that controller does know about Default response for XID packet: 0xC3 0x01 0x02   0x08 Device Enumeration Sample Connect A Device TCP: Controller sends a  connect new device  command to simulator for port 3 Func # Sub Cmd Data Size Get Device Descriptor USB: Host sends setup packet 0x00 0x00 USB: Host sends data0 packet 0x80 0x06 0x00 0x01 0x00 0x00 0xFF 0x00 USB: Simulator automatically responds with ACK TCP: Simulator forwards setup to controller Func # Sub Cmd Data Size 0xB4 0x00 0x00 Data contains: setup PID, address, and endpoint. TCP: Simulator forwards data0 to controller Func # Sub Cmd Data Size 0xC3 0x80 0x06 0x00 0x01 0x00 0x00 0xFF 0x00 TCP: Simulator notifies controller of the ACK Func # Sub Cmd Data Size USB: Host sends IN packet 0x00 0x00 TCP: Simulator forwards IN packet to controller Func # Sub Cmd Data Size 0x96 0x00 0x00 TCP: Controller sends data1 response Func # Sub Cmd Data Size 0xD2 0x12 0x01 0x10 0x01 0x00 0x00 0x00 0x08 USB: Simulator forwards response to host 0x12 0x01 0x10 0x01 0x00 0x00 0x00 0x08 USB: Host responds with ACK TCP: Simulator forwards the ACK Func # Sub Cmd Data Size Set Address USB: Host sends setup packet 0x00 0x00 USB: Host sends data0 packet 0x00 0x05 0x02 0x00 0x00 0x00 0x00 0x00 USB: Simulator automatically responds with ACK TCP: Simulator forwards setup to controller Func # Sub Cmd Data Size 0xB4 0x00 0x00 TCP: Simulator forwards data0 to controller Func # Sub Cmd Data Size 0xC3 0x00 0x05 0x02 0x00 0x00 0x00 0x00 0x00 TCP: Simulator notifies controller of the ACK Func # Sub Cmd Data Size USB: Host sends IN packet 0x00 0x00 TCP: Simulator forwards IN packet to controller Func # Sub Cmd Data Size 0x96 0x00 0x00 TCP: Controller sends data1 response Func # Sub Cmd Data Size USB: Simulator forwards response to host USB: Host responds with ACK TCP: Simulator forwards the ACK Func # Sub Cmd Data Size Get Configuration Description USB: Host sends setup packet 0x02 0x00 USB: Host sends data0 packet 0x80 0x06 0x00 0x02 0x00 0x00 0x50 0x00 USB: Simulator automatically responds with ACK TCP: Simulator forwards setup to controller Func # Sub Cmd Data Size 0xB4 0x02 0x00 TCP: Simulator forwards data0 to controller Func # Sub Cmd Data Size 0xC3 0x80 0x06 0x00 0x02 0x00 0x00 0x50 0x00 TCP: Simulator notifies controller of the ACK Func # Sub Cmd Data Size USB: Host sends IN packet 0x02 0x00 TCP: Simulator forwards IN packet to controller Func # Sub Cmd Data Size 0x96 0x02 0x00 TCP: Controller sends data1 response Func # Sub Cmd Data Size 0xD2 0x09 0x02 0x29 0x00 0x01 0x01 0x04 0x80 USB: Simulator forwards response to host 0x09 0x02 0x29 0x00 0x01 0x01 0x04 0x80 USB: Host responds with ACK TCP: Simulator forwards the ACK Func # Sub Cmd Data Size USB: Host sends IN packet 0x02 0x00 TCP: Simulator forwards IN packet to controller Func # Sub Cmd Data Size 0x96 0x02 0x00 TCP: Controller sends data0 response Func # Sub Cmd Data Size 0xC3 0x32 0x09 0x04 0x00 0x00 0x02 0x03 0x00 USB: Simulator forwards response to host 0x32 0x09 0x04 0x00 0x00 0x02 0x03 0x00 USB: Host responds with ACK TCP: Simulator forwards the ACK Func # Sub Cmd Data Size Set Configuration USB: Host sends setup packet 0x02 0x00 USB: Host sends data0 packet 0x00 0x09 0x01 0x00 0x00 0x00 0x00 0x00 USB: Simulator automatically responds with ACK TCP: Simulator forwards setup to controller Func # Sub Cmd Data Size 0xB4 0x02 0x00 TCP: Simulator forwards data0 to controller Func # Sub Cmd Data Size 0xC3 0x00 0x09 0x01 0x00 0x00 0x00 0x00 0x00 TCP: Simulator notifies controller of the ACK Func # Sub Cmd Data Size USB: Host sends IN packet 0x02 0x00 TCP: Simulator forwards IN packet to controller Func # Sub Cmd Data Size 0x96 0x02 0x00 TCP: Controller sends data1 response Func # Sub Cmd Data Size USB: Simulator forwards response to host USB: Host responds with ACK TCP: Simulator forwards the ACK Func # Sub Cmd Data Size Get XID Descriptor USB: Host sends setup packet 0x02 0x00 USB: Host sends data0 packet 0xC1 0x06 0x00 0x41 0x00 0x00 0x08 0x00 USB: Simulator automatically responds with ACK TCP: Simulator forwards setup to controller Func # Sub Cmd Data Size 0xB4 0x02 0x00 TCP: Simulator forwards data0 to controller Func # Sub Cmd Data Size 0xC3 0xC1 0x06 0x00 0x41 0x00 0x00 0x08 0x00 TCP: Simulator notifies controller of the ACK Func # Sub Cmd Data Size USB: Host sends IN packet 0x02 0x00 TCP: Simulator forwards IN packet to controller Func # Sub Cmd Data Size 0x96 0x02 0x00 TCP: Controller sends data1 response Func # Sub Cmd Data Size 0xD2 0x08 0x41 0x00 0x01 0x01 0x01 0x1A 0x04 USB: Simulator forwards response to host 0x08 0x41 0x00 0x01 0x01 0x01 0x1A 0x04 USB: Host responds with ACK TCP: Simulator forwards the ACK Func # Sub Cmd Data Size Future Enhancements Support for HID so other teams (NT, etc) could leverage this tool Macro language so the Simulator will perform operations without interaction with the controller Appendices References USB Specification 2.0  HYPERLINK "http://www.usb.org/developers/docs.html"  http://www.usb.org/developers/docs.html RFC 793 and 1122 RFC 768 and 1122 RFC 791 and 1122 Glossary Controller   An XBox or PC that responds to all USB communication packets forwarded on by the Simulator. Host   The host is the primary USB controller on the XBox.  Internet Protocol, allows for fragmenting, routing and reassembling data packets. An IP Address is a four-byte value representing a unique destination. Simulator   The hardware/software solution, which will simulate multiple USB devices.  Transmission Control Protocol referred to as a  reliable  data transport.  User Datagram Protocol, which is a connectionless data transport. PAGE   PAGE   Microsoft Confidential PAGE   PAGE   Microsoft Confidential |u|mu|u
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\TitleCertificationTestPlan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal.dot MarkMc Microsoft Word 9.0\})$' )"0L@ -LcfA Q=YVb Kj8]6 9nn8gSaved XBox Game Certification Test Plan Author: johndaly Edited by: Mark McNulty Last changed: 6/20/01 by: Mark McNulty Previous edit: 6/11/01 by: Mark McNulty  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test  HYPERLINK "mailto:markmc@microsoft.com" MarkMc HYPERLINK "mailto:humeno@microsoft.com" Hiroo Umeno Usability  International  Test scenarios The test scenarios described in this document are directly derived from the TCR, and will need to be periodically updated as the TCR changes. Spec reviews The spec is owned by Hiroo Umeno. It is located in   HYPERLINK "\\\\xbox\\Specs\\cert"  \\xbox\Specs\cert It is currently a work in progress and is being finalized at this time, although it will be frequently revised as we make progress with online features, etc. Tools needed Perf   none, or maybe framerate measuring with XBPerfmon. XDK Launcher Functions to set the machine up as required for certification test scenarios will be built into the XDK Launcher, and will be accessible via menu selection. These will be enumerated in the test case section. Kernel Debugger The standard kernel debugger (i386kd.exe) will be used with the DevKits that will be used for certification testing.  Debugger Macros Debugger macros to check things like arguments passed to NtCreateFile(), etc, need to be written to support some certification requirements. These will be enumerated in the test case section. Debugger Output Scanner The logs created by the debugger can be manually read, or we can write a tool to scan them. This will be easy and is low-priority. Debugger extensions to dump certain data structures in the kernel we may want to look at We need to evaluate if there are any kernel data structures we want to make sure never get changed by a game, and then use an extension or a debugger command macro to check these during/after a game test run. Netmon, possibly modified to look at our packets. Tool to dump XTL version information from submitted XBE files. Imaging tool to get the tape image onto the DVD Simulators This is being handled by Adam Green. Certification Kernel So far, the only thing we may do is remap some PCI data to move the addresses of devices we are concerned about (right now, only the IDE controller) so that direct access to this device will cause a failure we can detect and fail a tile for. Tactics Database For each game submitted for certification, a record of all test variations attempted will be kept, and a summary report from these tests, along with a PASS or FAIL status, will be generated and passed to the next team in the release process. Deliverables Launcher List of Certification test cases derived from Tactics database so game developers can pre-test their games before submission. Hardware needed 31 XDK kits 29 Development Host PCs w/DVD EMU 14 13  Color TVs 11 20  Color TVs w/S-Video and Composite in 11 17  monitors 18 Debug Xbox consoles 18 Retail consoles 6 AV switches w/S-Video and Composite 1 Studio grade monitor 2 HDTV (480p, 720p, 1080i and 16:9 widescreen support) 1 Dedicated PC Win2K Server 2 Dolby Digital/DTS receiver 48 Xbox standard controllers (does not include those in the XDKs) 58 Xbox Memory Units (does not include those in the XDKs) 2set Dolby 5.1 Speakers 15 Pairs Headphones 15 RCA to Headphones converters 2 USB simulators Network Hubs Further on down the road: If we want to do this in Japan and England, we need to duplicate this setup in those locations. The Online Test Team will need to provide server access so games can be run against backends to satisfy Online Certification Requirements. Test methods Test code What needs to be written? Some simple debugger macros to check data passed to certain APIs. This is trivial. A tool to parse debugger logs if reading them manually is too time consuming. What can be borrowed / adapted? The XDK Launcher will be modified to have functions for setting the box up for some of the Certification test scenarios. XBPerfmon can be used to look at various performance characteristics and to track memory utilization. We can use Tactics to store test scenarios and results. We can use Raid to track bugs. We can generate reports that summarize and list all problems found by querying Raid and Tactics. What support code do we need, and who is responsible for providing it? Jim Helm will provide the changes to the XDK Launcher to support the required Certification test scenarios. Someone will have to write the parser for the debugger log files. Someone will have to write the tool for generating the Certification test report from data in Raid and Tactics. How do you generate test data? XDK Launcher. Tests 1.0-1-1 ROM Access There is no good way to do this. Ideas are: If we knew where our code was in the image, we could make sure that all calls into the kernel came from that region (but we don t know this where our code is..). There are various other schemes, all of which are hard, expensive, and require a lot of work No test case for this for now. 1.0-1-2 System Management Controller Access The way we test for this is with a Certification Kernel that turns off port access when we are not making changes. The shipped DevKits have all the ports left on. Any game that does not turn them back on before attempting to change them will fault. This information should be considered internal only. 1.0-1-3 Ethernet Controller Hardware Access  For games that are not authorized to do network access, we connect a sniffer (Netmon) and see if this machine emits any packets. For games that are authorized to use networking code, we look at packets to make sure they are correctly signed. As far as detecting code which touches the network hardware directly, There are 3 ways to do this, none of which are practical during the early phase of this project. It is to disassemble all the game code, and look for   and   instructions that target the NIC specific registers. Put data BPs on all addresses used to access this device. Have a debugger extension log the state of this device at various times so we can see what it is, and then break in a few times and look to see if it has changed. 1.0-1-4 USB Access Level Using the USB Simulator, we can simulate devices that anyone writing their own USB stack has never seen, and we can catch people not using the libraries. We can also use boxes without the daughter card and short-cabled controllers, which removes the internal hub from the equation, and see that the game responds correctly. External developers will not have seen a system like this, it may expose any hacks they may have made. This information should be considered internal only. 1.0-1-5 TV Encoder Hardware Access The way we test for this is with a Certification Kernel that turns off port access when we are not making changes. The shipped DevKits have all the ports left on. Any game that does not turn them back on before attempting to change them will fault. This information should be considered internal only. 1.0-1-6 XTL Version ll need a tool to do this, should be simple, scan all the XBE files in a tile, and dump out their XTL version numbers.  Make sure those version numbers are approved release versions. 1.0-1-6-a XTL Libraries Assuming we can get the version, we can check the reported game version with the list of approved versions of the XTL. 1.0-1-7 Startup Code Without symbols, verifying that this is the case will be difficult. No test case for this for now. 1.0-1-8 Memory/Clock Speed The way we test for this is with a Certification Kernel that turns off port access when we are not making changes. Port access is required to change these settings. The shipped DevKits have all the ports left on. Any game that does not turn them back on before attempting to change them will fault. This information should be considered internal only. 1.0-1-9  Faster Storage Performance When available, we ll obtain faster Hard Disk Drives and faster DVD drives and install them and run the game. No difference should be noted. This may be initially difficult since there may be software changes required to get the new hardware to work (we can t really get off the shelf replacement faster DVD drives due to the special firmware we use). We should not have too many problems getting a faster hard drive to work. 1.0-1-10 Memory Unit Maximum Capacity When available, we will insert one of these units into a controller, and then save / load a game from it. These units are not currently available. 1.0-1-11 Hard Disk System File Reliance After using the Cert_1.0-1-11 (removes all system files, soundtracks, etc) menu option from the XDK Launcher, the game will be played and should not have any problems. Global Settings Access  Test will use Cert Tool 1.0-1-12 and record the four provided checksums and all settings for the areas of the EPROM.  The game will be played and after it is shut down, test will run the Cert Tool again and verify no settings have changed and all checksums are valid. 1.0-1-13 Display Time Tester looks at time displayed on Game and verifies that the correct time is displayed. Tester adjusts time zone on console using XDK Launcher, boots game, and makes sure correct time is displayed. 1.0-1-14 Device Types 1.) Play game with standard controller, it should be recognized and work correctly 2.) Use the USB Simulator to simulate some illegal device types, they should be ignored by the game. 1.0-1-15 Widescreen Display Games will be played on a normal aspect-ratio (4:3) television with the widescreen mode disabled. The tester will verify that the game does not attempt to use widescreen mode. 1.0-1-16 NTSC Signal Output Games will be played on Xbox units set for North America or Japan with each type of AV pack installed. Testers will use an NTSC television to verify that the output signal is correct. 1.0-1-17 HDTV Signal Output Games will be played on Xbox units set for North America or Japan with an HDTV AV Pack installed. Testers will use an HDTV-enabled television to verify that the output signal is correct. The 720p and 1080i HDTV modes will not be enabled for this test. 1.0-1-18  PAL Display Games will be played on Xbox units set for Europe with each type of AV pack installed.  A PAL television will be used to verify that the output signal is correct. The PAL-60 option will not be enabled for this test. 1.0-1-19  PAL-60 Support Games will be played on a system set for the Europe region with each AV pack except the HDTV AV Pack installed. After enabling the PAL-60 option in the Dashboard, the tester will connect the Xbox to a television that supports PAL-60 and verify that it displays properly. 1.0-1-20 High-Resolution HDTV Modes If the game claims to support 720p, it will be played with an HDTV AV Pack installed driving a television that supports 720p. The tester will enable the 720p option in the Dashboard and verify proper display. If the game claims to support 1080i, it will be played with an HDTV AV Pack installed driving a television that supports 1080i.  The tester will enable the1080i option in the Dashboard and verify that it displays properly. 1.0-1-21  Dual Audio Outputs The game will be played using an AV pack that supports both outputs. The output will be connected first to an analog device, then to an optical device. 1.0-1-22 System Link Configuration For games that are allowed to support System Link, the feature will be tested with a direct system link, a 100mbps hub, and a 100mbps hub. The game should function normally in all cases. Connect 2 consoles with the system link cable Launch game on both consoles Check to see that it plays as expected Connect 2 consoles with the standard network cables and a hub Launch game on both consoles Check to see that it plays as expected 1.0-1-23 Network Bandwidth During certification, testers will watch network utilization across both 10Mbps and 100Mbps hubs. There must be no noticeable game play differences on game play between 10Mbps and 100Mbps networks. 1.0-1-24 Interference to Existing Network To test whether games generate unacceptably high levels of network traffic / interfere with LANs they are connected to, the game will be tested on a LAN with several PCs attached which will be performing network operations. None of these operations should be interfered with to the point where the LAN is unusable. 1.0-2-1 Slower Storage Performance After running a tile, and letting it use the Game Data (tdata) and User Data (udata) regions of the Hard Disk and MUs, the files will be fragmented using the Cert_1.0-2-1 (fragments tdata \ udata) menu option from the XDK Launcher, and the game will be played. Performance should not degrade below acceptable limits when accessing the fragmented storage. 1.0-2-2  Global Soundtrack Dependencies After using the Cert_1.0-2-2 (removes all soundtracks) menu option from the XDK Launcher, the game will be played and should not have any problems. 1.0-2-3 Memory Unit Access Speed Currently this area is under review for a test case. 1.0-2-4 Saved Game Roaming The tester plays the game, saves a game to the Hard Disk, and then the game is moved to a MU using the Dashboard. On a second XBox, the game is installed, and then the game is loaded from the MU. There must be no problem with using this game related to data stored on the Hard Disk. 1.0-2-5 Saved Game Name The tester navigates to the game-saving feature of the game during various times during the game, and saves the game. The saved games are then viewed through the Dashboard to make sure the names are user-friendly and easy to use. 1.0-2-6 Saved Game Default Name The tester plays the game, and saves periodically. There should be a default name for the game played. 1.0-2-7 Saved Game Directory Entry Limit The tester fills the udata section with 4096 entries using Cert_1.0-2-7 (fills udata\<gameid>with 4096 entries) option from the XDK Launcher, then loads the game and attempts to save a game. The game must fail to save a game gracefully, and also have no other failures related to this. 1.0-2-8 Memory Unit Persistence The tester loads a game from the memory unit, then replaces the memory unit with a different one and plays the game. The game should function correctly. 1.0-2-9 Dynamic Update of Memory Units The tester will navigate to the game saving area of the game, and will remove and insert various memory units. After each change, the game UI must update within 1 second to reflect the changes in attached devices. 1.0-2-10 Utility Region Persistence The TCR states:  During certification, the hard disk will be examined during the initial boot to ensure that data is being loaded first from the DVD into RAM, and being streamed to the utility region only after being in RAM This isn t going to happen; there isn t really a good way to check this. What will happen is that we ll purge the game s cache partition periodically, and resume play, something like: load game, play, save a game using Cert_1.0-2-10 (clears utility drive\gameID) option from the XDK Launcher, clear the cache partition the game has been using. boot game, load game saved in step 1, everything should work fine. 1.0-2-11 Static Content There is no way for Test to verify that the data files created outside of the Game s Utility Region are to improve I/O performance.  Test will verify that the game does not depend on data files not in the game s Utility Region, but that is covered elsewhere. There is no test case for this now. 1.0-2-12 Audio Fidelity Tester listens to audio during gameplay to determine whether there are audio problems. 1.0-2-13 Game Identification Copied from cert doc: During certification, the tester will launch the game to the main menu, turn off the Xbox console and then boot into the Xbox Dashboard. The tester will ensure that the game information is displayed correctly in the Dashboard. 1.0-2-14 Game Representative Image Copied from cert doc: During certification, the tester will load the game to the main menu, turn off the box, and then boot to the Dashboard. The tester will ensure that the appropriate image is displayed in the Games Area. 1.0-3-14-a Saved Game Representative Image Copied from cert doc: During certification, the tester will save a game. The tester will ensure that the appropriate image is displayed in the memory area of the Xbox Dashboard.  The game may, at its option, choose to create unique descriptive images for each saved game or use a common image for all of its saved games.  Saved game images must be distinct from the game representative image. 1.0-2-15 Game Stability The game should not ever crash during Cert (and probably not during Functional and Play testing as well) 1.0-2-16 Robustness Against Lost Link  Tester will go to all places in the game related to network access / connectivity and connect / disconnect the network link on the box, and these areas should be stable. They will also start a networked play session, and disconnect, and the game should be stable. 1.0-2-17 Out of Frame Video Copied from cert doc: During certification, testers will play the game on a TV that reveals the overscan area. Displaying debug information, system status, or performance data in the overscan area is not acceptable. 1.0-2-18 Game Safe Area (Non-HDTV) The tester will play the game on a television that has a clearly marked  safe area  on the screen (the marking will be made either through electronic means, or even through marking the screen with tape or a marker) and make sure that no critical display information appears outside this area. The TCR defines the safe are as the 85% inner area of the screen.  Using Cert_1.0-2-18 (draws outline of non-HDTV safe area) option from the XDK Launcher, the tester will mark the safe area on the TV used for testing. The tester plays the game and looks for critical text and menu items falling outside of this are during testing. 1.0-2-19 Game Safe Area (HDTV) The tester will play the game on a television that has a clearly marked  safe area  on the screen (the marking will be made either through electronic means, or even through marking the screen with tape or a marker) and make sure that no critical display information appears outside this area. The TCR defines the safe are as the 95% inner area of the screen (inner 608   456 pixels) using Cert_1.0-2-19 (draws outline of HDTV safe area) option from the XDK Launcher, the tester will mark the safe area on the TV used for testing. The tester plays the game and looks for critical text and menu items falling outside of this are during testing. 1.0-2-20  Error Handling Testers will note any error notifications during gameplay and note those that appear to be irrelevant. 1.0-2-21 Error Messages Testers will examine each error message encountered during game play, and note those that appear to have incorrect information or inappropriate text. 1.0-2-22 Unusable MUs Testers will verify that unformatted, corrupt or damaged MUs are not listed by Xbox games as a viable saving location. *Games can inform the User that an MU is unformatted and prompt them to go to the Dashboard to format it. 1.0-2-23 Message While Loading Testers will verify that no Xbox games use terms like  Setup Install  while loading content from the game disc or directly to/from the Hard Disk.  All User messages will be verified. 1.0-2-24 Game Loading Time Limit Tester will verify that no Xbox game sits in a state of inactivity for more than 15 seconds while loading data to the Utility Region.  Tester will verify this TCR through timing the  loading  sections of the game. 1.0-3-1 Hard Disk Saved Game Support Tester will attempt to save game to Hard Disk, this should work flawlessly. 1.0-3-2 Hard Disk Saved Game Free Space Copied from cert doc: During certification, the tester will play the game on an Xbox video game system that has no free space. When warned, the tester will free only the minimum space required. Later, the tester will attempt to save the game state.    Using Cert_1.0-3-2 (fills udata area, but with less than 4096 entries) option from the XDK Launcher, tester will fill the udata area. 1.0-3-3 Hard Disk Game Free Space Copied from cert doc: During certification, the tester will play the game on an Xbox video game system that has no free space. When warned, the tester will free only the minimum required space.   Using Cert_1.0-3-3 (fills tdata area) option from the XDK Launcher, tester will fill the tdata area. 1.0-3-4 Cleanup Support Copied from cert doc: During certification, the tester will play the game on an Xbox video game system that has no free space. When warned, the tester must be allowed to boot into the Xbox Dashboard to free space. Using Cert_1.0-3-4 (fills tdata and udata area) option from the XDK Launcher, tester will fill the drive. The game will then be started and must allow the user to clean up either by booting the Dashboard or through internal cleanup mechanisms that do not cause problems with the user s data or other game data (they should only be cleaning their own regions). 1.0-3-5 Memory Unit Capacity The tester will attempt to save a game to a clean MU. It should fit on the MU with no problems. 1.0-3-6 Memory Unit Roaming Copied from cert doc: During certification, the tester will play the game on an Xbox video game system and save at various points on a memory unit (either in-game or through Xbox Dashboard transfer). The tester will then take the memory unit to a second Xbox console on which the game has never been saved and attempt to launch and play the saved game. 1.0-3-7 Saved Game Management Using the game, the tester saves a game Using Cert_1.0-3-7 (check saved game signature) option from the XDK Launcher, the tester opens a saved game and notes whether the launcher detects that the game is signed. Note that there is some work still required at this time to support doing this. 1.0-3-8 Memory Unit Warning During all times a memory unit is being written to, there must be a correct warning displayed. To test: Identify all places in the game where a game can be saved to an MU In these places, save a game. Make sure the warning is properly displayed during the save. 1.0-3-9 Hard Disk Warning During all times the hard drive is being written to (except for the utility drive, which gets formatted), there must be a correct warning displayed. To test: Identify all places in the game where a game writes to tdata or udata (this may be problematic   maybe we can expose a light from the drive so we can more easily detect activity) Make sure the warning is properly displayed (see TCR for definition of  properly ) during disk activity. 1.0-3-10 Memory Unit Personalization Using the Dashboard or XDK Launcher, personalize MUs. At least one with the maximum number of characters you can use, and one with the minimum you can use. Launch the game. Navigate to areas that display MUs and make sure the name is correctly displayed.  1.0-3-11 Space Display The tester launches the game, and observes the amount of space listed for each attached memory device displayed by the game The game is ejected and the XDK Launcher is started Using Cert_1.0-3-11 (lists available blocks for all attached memory devices) option from the XDK Launcher, the tester notes the amount of space listed as available. The tester compares the amounts listed by the game and those listed by the XDK launcher and makes sure these numbers agree. 1.0-3-12 Maximum Number of Blocks Using the Dashboard, the tester makes sure that the tdata region or udata region has 50,000 free blocks. Saved games and game data are deleted to make more room if there is not this much already available. The tester launches the game and examines those areas where free space is displayed. When the game is looking at a region with more than 50,000 free blocks the tester makes sure that this information is correctly displayed. 1.0-3-13 Memory Unit Location Using a controller and a MU, the tester will save a game using each controller position, and each MU position to make sure that a game can be saved. 1.0-3-14 Global Language Setting Using Cert_1.0-3-14 (change language setting) option from the XDK Launcher, the tester will cycle though each setting, then launch the game to make sure it took the appropriate action as defined in the TCR. 1.0-3-15 Global Time Zone Setting Using Cert_1.0-3-15 (change time zone setting) option from the XDK Launcher, the tester will cycle though each setting, then launch the game to make sure it took the appropriate action as defined in the TCR. 1.0-3-16 Menu Buttons During gameplay, the tester will make sure the buttons conform to the standards in the TCR, namely: The A button must select the current option or confirm an action The B button and the BACK button cancel an action The START button may be mapped to the same functionality as the A button, or it may perform a more appropriate action The tester will use the buttons to navigate through the game s interface, and make sure the buttons are correctly utilized. Please see the TCR for more details, I copied the salient info here, but there is more to this.  1.0-3-17 Menu Navigation The tester will make sure the directional pad can navigate through all out-of-game menus. 1.0-3-18 In-Game Pause If the game supports in-game pausing, this functionality shall be accessed through the START button. The tester will use the START button to enter a paused state, and then resume the game. Also, the tester should try activating the START button several times in rapid succession to pause/restart the game quickly several times and make sure that it behaves correctly and does not crash or have any other error. 1.0-3-19 Vibration Function Outside Gameplay During testing, the tester will note if they notice any vibration outside of gameplay aside from what is allowed in the TCR. 1.0-3-20 Controller Selection The tester will ensure that the game can be started from any controller plugged into any controller port on the console. Using 1 controller, start the game, exit the game, move the controller to the next slot and repeat until all slots have been used. Using 4 controllers plugged into the console, start the game from each one. Using different 1st and 3rd party controllers, make sure you can start the game. 1.0-3-21 Controller Discovery Note all areas in the game UI where controller information is exposed. In each of these areas, perform the following tasks: Using 1 controller, plug it into each of the 4 ports and make sure the game updates it s display within 1 second If the game displays MUs, while plugged into each port, plug 1 MU into the controller and make sure the game updates it s display within 1 second If the game displays MUs, when plugged into each port, plug 2 MUs into the controller and make sure the game updates it s display within 1 second If the game displays MUs, when plugged into each port, unplug all MUs from controller and make sure the game updates it s display within 1 second. 1.0-3-22 Loss of Controller The game should, if pausing is supported, enter the paused state when a controller is removed during gameplay.  If the pause feature is supported, during gameplay, remove an in-use controller. The game should pause. Reconnect the controller, the game should remain paused Press the START button, gameplay should resume Try this in each controller position. 1.0-3-23 Button Availability Games must not map game actions to non-existent controls. To test this we should use a Duke controller, since it has the fewest allowed buttons of any input device. We will not be building versions of controllers with missing buttons. 1.0-3-24 Selection User Interface The tester will examine the selection method a game uses in it s menu system and make sure that when something is selected, it is very obvious   the must not be states where selection is ambiguous. 1.0-3-25 Xbox Official Naming Standards All text in the game that refers to XBox, controllers, the console, etc, must conform to the XBox Terminology guide, please see the guide for these standards. The tester will look at all text and note any that does not conform to this standard. 1.0-3-26 Unsupported Characters Games must display characters they icknames, MU and soundtrack names with localized text) option from the XDK Launcher, the tester programs a MU with the desired text for these items. The tester, after determining where in the game this information is displayed, inserts the MU and notes the display   it should either correctly display the text, or display the  guage, please see the guide for these standards. The tester will look at all text and note any that does not conform to this standard. 1.0-3-28 Terminology Consistency During testing, the tester will read all text (that covered by the Terminology Guide and all other text) and try to notice any that is inconsistent or confusing. 1.0-3-29 In-Game Non-Interactive Cinematic Sequences The tester will identify all those non-interactive cinematic sequences in the game The tester will then attempt to interrupt each one using the A button. If it is the first time the sequence is played, it may continue. If it is not the first time, the sequence must be skipped when the A button is pressed. 1.0-3-30 Initial Interactive State The tester will ensure that the game become interactive within 20 seconds of the end of the XBox boot animation sequence. Tester inserts game XBox Boot animation sequence starts When that sequence is finished, tester starts timing Within 20 seconds, the game should be in a start where it accepts user input of some kind, as the TCR states  The screen must contain text that prompts players to press the Start button to begin interacting with the game 1.0-3-31 Non-Interactive Pause Any time the game pauses for more than 5 seconds, there must be some visual indication that the game is paused. The tester will note all places in the game where pauses greater than 5 seconds occur. The game must show something that indicates the paused state. It must be something other than static text, the game must do something visually that shows activity. 1.0-3-32 Soundtrack Access Since the Soundtrack APIs are in the XTL, which are bound to the game, which we won t have symbols for, there is nothing we can do in the kernel to ensure that these APIs are being used to access the soundtrack.  No test case for this for now. 1.0-3-33 Copying Soundtrack Songs We can detect reading soundtracks (along with all other file reads as discussed in 1.0-2-11). We may notice if a game is trying to do this, or we may not notice it, it is easy to hide. What we can do is make a list of the files on the hard drive and all attached MUs before the game is played, and make a list after, and compare them to see if it appears that any soundtrack data was copied. Use Cert_1.0-3-33 (makes list of all files on console, both hard disk and MUs) option from the XDK Launcher before we test a game. After we have played a game, we make another list using Cert_1.0-3-33 option from the XDK Launcher We compare the lists, and look for any files that are the same length as soundtrack items 1.0-3-34 Transporting Soundtrack Songs Again, we can t really use the kernel for this requirement as proposed by the TCR, but we can look at before and after changes in the filesystem. Use Cert_1.0-3-33 (makes list of all files on console, both hard disk and MUs) option from the XDK Launcher before we test a game. After we have played a game, we make another list using Cert_1.0-3-33 option from the XDK Launcher We compare the lists, and look for any files that are the same length as soundtrack items We do the same thing for any machines that were connected to the XBox LAN and used for LAN play   we want to check that the games did not share music between the consoles on the LAN. 1.0-3-35 Global Settings Update Using Cert_1.0-3-34 (list all global settings) option from the XDK Launcher, generate list of all settings before playing the game. Play the game, and if there are options to change the settings, use them After changing the settings in the game, exit the game and use Cert_1.0-3-34 option from the XDK Launcher and compare it with the first list that was made. Nothing should have changed. 1.0-3-36 System Clock Change your watch to the displayed time when starting the game As you play the game, when the time is displayed, make sure it matched your watch If the game has overridden the display with their own bias, make sure to take that into account Exit the game, launch the XDK Launcher and make sure the time matches what is displayed on your watch. 1.0-3-37 Attract Mode Insert the game into the console, and wait for the attract mode to start  When attract mode has started, watch it and make sure it does not repeat itself for at least 60 seconds 1.0-3-38 Attract Mode Cycle Insert the game into the console, and wait for the attract mode to start  When attract mode has started, watch it and make sure it switches between the attract mode and an interactive screen. Verify that the game never stays at the initial Start screen for more than 75 seconds. 1.0-3-39 Attract Mode Stability We require that a game run in attract mode for 1 week. This means that we need to tie up a console for a week to make sure that this is the case, or we can cheat and do the following with a pretty good chance that we can predict that it will actually stay up for a week. Insert the game into the console, and wait for the attract mode to start  Start XBPerfmon Turn logging on in XBPerfmon, and pay particular attention to memory usage and handle counts Track the memory usage and handle counts over a 24 hour period Using the data generated over 24 hours, extrapolate it to 7 days and see if any leak noticed will run the machine out of memory over that time period If in doubt, keep running in attract mode. ll need more test consoles to support this 1.0-3-40 Attract Mode Interrupt On a console with at least 1 controller and 1 MU, insert a game and let it start and enter attract mode Unplug the controller, nothing should happen Plug the controller back in, attract mode should quit within 1 second and the user should be at a menu Let the game enter attract mode again Remove a MU, nothing should happen Plug the MU back in, attract mode should quit within 1 second and the user should be at a menu Let the game enter attract mode again Press a button on the controller, attract mode should quit within 1 second and the user should be at a menu 1.0-3-41 Start-up Without Controller Disconnect all controllers from console Insert the game into the console, and wait for the attract mode to start  It should start as expected and enter attract mode as expected. 1.0-3-42 Networking Configuration During gameplay, the tester will note if they were prompted for this type of information. If they were, the game fails. 1.0-3-43 System Link Play Interoperability To talk to anything other than another XBox, the game would have to implement its own net stack, the one we provide will not talk to anything but other XBox consoles and XBox servers. Probably the easiest thing to do would be to have a sniffer on an all-console network, and see if we can detect any traffic that is not our packets. The network guys will need to help with this one. 1.0-3-44 System Link Play Menu Option If a game has System Link functionality: Connect the console to a network (with or without other consoles? Does it matter?) Navigate to the menu in the game that controls System Link functionality It should be enabled Unplug the network cable The menu should be disabled within 1 second Plug the network cable back in The menu should be enabled within 1 second Repeat this procedure in all parts of the game where system Link functionality is exposed 1.0-3-45 Restart for Networking The game should not have to restart to enable System Link play on a console that was started without a connection to the network, or on a console that was connected, disconnected, and reconnected. Launch System Link enabled game with console disconnected from the network After the game has launched, reconnect the box to the network Play the game, the System Link functionality should work Go into the game s menu Disconnect the network cable Reconnect the network cable Play the game, the System Link functionality should work 1.0-3-46 Maximum Number of Connected Xboxes The limit is 17 Our internal XBox lab network will need to support 17+ units for this test Connect 16 consoles to the network, launch the game on all of the consoles, make sure it works correctly in this mode Add a 17th console to the network Make sure that the 17th console cannot join the game Make sure the other 16 consoles are still functioning correctly 1.0-3-47  Use of Dolby Digital If the game is Dolby Digital enabled, plug it into a Dolby Digital receiver The sound should function correctly 1.0-3-48  Interactive Dolby Digital Feature If the game supports Interactive Dolby Digital, plug it into a Dolby Digital Reciever Play through in-game scenarios, sound output at least once in-game must by Dolby Digital There is no way to verify if our APIs are being used.  This has been omitted from the Test Cases for now. 1.0-3-49  Dolby Digital Transmission Test will verify this TCR by: Connecting game to Dolby Digital Receiver via Optical cable and verifying Dolby Digital is output. Using Netmon, the Ethernet port will be sniffed for packets.  Test will ensure that no Dolby Digital data is being transmitted.  While it is true, we cannot tell if the packets contain pre-rendered Dolby Digital or Interactive, it allows us to flag it and question the ISV as to why any Dolby data is being sent out via the network. 1.0-3-50  Dolby Digital Pre-Encoded Data To verify Test will enable Dolby Digital (on a game that supports Dolby digital)in the dash and play the game through a Dolby Digital receiver.  Test will re-run the above test but disable the Dolby Digital in the dash. If Dolby Digital is disabled in the dash, no Dolby transmissions must occur. 1.0-3-51  DTS Pre-Encoded Data To verify Test will enable DTS (on a game that supports DTS)in the dash and play the game through a DTS receiver.  Test will re-run the above test but disable the DTS in the dash. If DTS is disabled in the dash, no DTS transmissions must occur. 1.0-3-52 Game Soundtrack Volume Control If game supports player-created soundtracks, tester will verify that volume control for player-created soundtracks exists, and verify that it actually works. If soundtracks are supported, locate volume control Make sure it works 1.0-3-53 Player Confirmation of Destructive Actions In general, the tester will need to make sure that the game does not allow the user to do things with negative consequences (lose data) without first warning the user that this will happen. The tester will need to follow a procedure similar to the following to test this. Determine what areas change data, for instance, loading a saved game while in the middle of a level will lose the state for that level. In these areas, make sure the user gets notified that their action will have a possibly negative consequence, and prompt for a response. The TCR has some guidelines as to what constitutes good ways to prompt and bad ways to prompt (for instance, pressing A blindly and repeatedly should not wipe out your data) 1.0-3-54 Controller Representation If game uses graphical representations of the Xbox controller, Test will verify: Graphic used is for correct default region Graphic matches rules set forth in the Xbox Terms Guide 1.0-3-55 Controller Button Representation Games may represent controller buttons to the users either graphically or in text form.  Test will verify: Graphics used match rules set forth in the Xbox Terms Guide Games that use their own artistic version of button graphics must use the button label text set forth in the Xbox Terms Guide. 1.0-3-56  Vibration Option Test will verify that if an Xbox game supports vibration features that there is a way for the User to disable the features. 1.0-3-57 Default Choices Presented For System Link Play For Xbox games that use system link play, there must be intelligent defaults for all options.  Test will verify: That a User can join a Link Play game w/o having to change any options (default options are selected) If a User does not want to change any options, they should be able to navigate through System Link Menu, just by pressing A button 1.0-3-58 Naming of Multiple Game Sessions for System Link Play For Xbox games that use system link play, there must be a descriptive default name a game session.  Test will verify: That a User can Host a new game session w/o having to come up with a name for the session (default  descriptive  name created) User must be given the option of changing the default session name. Default or edited session names must be displayed by the game UIs list of available sessions to join. 1.0-3-59 Session Discovery Time for System Link Play For a game that supports System Link play, Tester will verify that the game discovers all available sessions in 3 seconds or under. 1.0-3-60 Game Sound Volume For Xbox games that use both in-game music and sound effects, Test will verify that the user is given the option to adjust the volume of each individually. 1.0-3-61 Multi-Disc Game For multiple disc Xbox games, test will verify that the user is never prompted in game to insert the next disc. 1.0-3-62 Soft Reset For Xbox games that support Soft-Reset, Test will verify that holding down the START and BACK buttons for 3 seconds or more, resets the Xbox.  This will be checked at various locations in the game. 1.0-4-1 IDE Hardware Access In the Certification Kernel, we ll remap PCI data to move the addresses of devices we are concerned about (right now, only the IDE controller) so that direct access to this device will cause a failure we can detect and fail a tile for. When this change is made, it will be documented so that this condition can be recognized by the tester. 1.0-4-2 Hard Disk and Memory Unit Access Layer This isn t feasible, aside from checking that all filesystem accesses are to legal (in the appropriate data areas), we ll not check this. 1.0-4-3 Hard Disk and Memory Unit Region Access This one is pretty simple, we use a debugger macro that looks like this: kd> bp xboxkrnl!NtCreateFile "dt OBJECT_ATTRIBUTES poi(esp+0xc);g" kd> g    +0x000 RootDirectory    : 0xfffffffd    +0x004 ObjectName       : 0xd003bed8 "c:\devkit\SAMPLES\ShadowBuffer\SHADOWBUFFER.XBE"    +0x008 Attributes       : 0x40    +0x000 RootDirectory    : 0xfffffffd    +0x004 ObjectName       : 0xd003bed8 "c:\devkit\SAMPLES\XDASH\XBOXDASH.XBE"    +0x008 Attributes       : 0x40    +0x000 RootDirectory    : 0xfffffffd    +0x004 ObjectName       : 0xd003c5c0 "c:\devkit\STRESS.XBE"    +0x008 Attributes       : 0x40 It dumps the OBJECT_ATTRIBUTES passed to NtCreateFile(), which gives us the file accessed. This is put in a debugger log created by .logopen on the host debugger at the beginning of  gameplay. You must also note that this debug output has a performance impact, and not run debugger commands like this when measuring performance We can do similar things with other APIs where this is deemed necessary, and have them all dumped to a debugger log. 1.0-4-4 Nickname Access Since the Nickname APIs are in the XTL, which are bound to the game, which we won t have symbols for, there is nothing we can do in the kernel to ensure that these APIs are being used to access the nicknames.  No test case for this for now. 1.0-4-5 Xbox Dashboard Stability The tester notes each section of the game where there is user data (saved games) written to the hard disk or a MU. From these areas, the tester saves data The tester exits the tile and browses this are with the Dashboard, for instance, with saved games, the tester uses the saved game management are of the Dashboard to browse this data. Browsing this data should cause mo problems with the Dashboard 1.0-4-6 Ethernet Port Access copied from Cert doc: During certification, each XBE will be scanned for code that connects to the Ethernet port and run on a special, instrumented Xbox that will flag port activity. 1.0-4-7 Sharing Storage over the Network Examine the game and look for functionality that does things like copying files from one console for another. This type of thing is forbidden. Things like sharing game state are acceptable. 1.0-4-8  Saved Game Content Protection Using Cert_1.0-3-7 (check saved game signature) option from the XDK Launcher, the tester opens a saved game and notes whether the launcher detects that the game is signed. Note that there is some work still required at this time to support doing this. This is pretty much the same as 1.0-3-7 1.0-5-1 Memory Unit If a game is trying to acquire the Memory Unit icon, test will verify: Game supports roaming saved games Memory Unit is available in-game as a valid save location Amount of free blocks on MU is presented in the Save UI. 1.0-5-2 Non-Standard Peripheral If an Xbox game is trying to acquire a non-standard peripheral icon, test will verify: All game menus can be navigated using the standard Xbox default controller Unless the game is going for a  Bundle with  option for the controller, the game s basic functionality can be controlled via the standard Xbox default controller Game detects a supported non-standard peripheral and configures it correctly The non-standard peripheral can be used to control the game from any port. 1.0-5-3 Single Console Multiplayer Based upon the number of supported players reported on the game submission form, test will verify game can be player with one to maximum number of allowed players supported by the game. 1.0-5-4 Xbox System Link Any Xbox game that wants to display the System Link icon must meet all requirements for the System Link and Networking TCRs.  Testing will make note for this TCR, that all other System Link and Network tests pass and no TCRs are broken.  Successful pass on all other System Link and Network TCR tests is considered a pass for this TCR. 1.0-6-1 Surprise MU Removal Test will verify under all save and load MU scenarios, that if an MU is removed before the operation could finish, the following message is displayed: The memory unit <NAME> was removed during use.  <ACTION> failed. Test will also verify: <NAME> is replaced with: Name of memory card if it is personalized MU location if it is not personalized <ACTION> is  replaced with the current operation being performed Message must require user interaction to go away.  User must press A or START to confirm and dismiss message. 1.0-6-2 MU Write Warning Test will verify under all save scenarios, the following message is displayed: Saving memory unit <NAME> was removed during use.  Please do not remove memory units or disconnect any controllers. Test will also verify: <NAME> is replaced with: Name of memory card if it is personalized MU location if it is not personalized Message does not require user interaction to go away.  (must be displayed for 3 seconds or duration of write) 1.0-6-3 MU Read Warning Test will verify under all load MU scenarios, the following message is displayed: Loading <CONTENT>. Please don t remove memory units or disconnect any controllers. Test will also verify: <CONTENT> is replaced with: the data being loaded Message does not require user interaction to go away.  (must be displayed for 3 seconds or duration of read) 1.0-6-4 Hard Disk Write Warning Test will verify under all non-MU save scenarios, the following message is displayed: Saving <CONTENT>. Please don t turn off your Xbox. Test will also verify: <CONTENT> is replaced with: the data being written (saved) Message does not require user interaction to go away.  (must be displayed for 3 seconds or duration of read) 1.0-6-5 Content Protection Fault Test will verify under all load scenarios, the following message is displayed if content fails protection check: Unable to load <CONTENT>. Please A to continue. Test will also verify: <CONTENT> is replaced with: the data that was attempted Message must require user interaction to go away.  User must press A or START to confirm and dismiss message. 1.0-6-6 Press Start Test will verify on the initial interaction screen, the following message (or close approximation) is displayed:  Please press START to begin. Test will also verify: START button brings user to main game menu 1.0-6-7 Lost Controller Test will verify under all situations where a controller currently being used in a game is disconnected, the following message is displayed: Please reconnect the controller and press START to continue. Test will also verify: In games where pause is not supported,  and press START to continue  is omitted from the message In games that support pause, that after controller reconnection, that pressing START allows the player to resume game play. Message must require user interaction to go away.  User must press START to confirm and dismiss message (if pause is supported). 1.0-6-8 Low Storage Test will verify under all full Hard Disk scenarios, the following message is displayed: Your Xbox doesn t have <BLOCKS> free blocks to save games.  Press A to continue saving or B to start the Xbox Dashboard. Test will also verify: Message is displayed at game startup if not enough free space on Xbox Hard Disk <BLOCKS> is replaced with the number of blocks needed to create the saved game. Message must require user interaction to go away.  User must press A or B to confirm and dismiss message. 1.0-6-9 Bad Game Disc Test will verify under all potential bad scenarios, the following message is displayed: There s a problem with the disc you re using.  It may be dirty or damaged.  Press A to continue. Test will also verify: Message must require user interaction to go away.  User must press A to confirm and continue.  The game must offer some functionality if the user is asked to continue. Configuration tests The following Xbox configurations will be used for testing: XDK Xbox consoles Debug Xbox Consoles Retail Xbox consoles All hardware variants of both Debug and Retail Xbox consoles Performance testing Xbox games will not be measured for performance per say, during Compliance testing.  The following list are some ways in which performance will be checked and what tools will be used to do so: Game Inactivity State: Stopwatch Game load/save: Stop Watch, Xbox Certification Tools 72 Hour Stress run: Xbox PerfMon Initial Boot: Stopwatch Controller and Peripheral Enumeration: Stopwatch Localization impact The Redmond Compliance lab will be responsible for testing in the North American region.  This includes Mexico, United States and Canada.  Compliance test will be responsible for certifying games that are localized for Spanish and French languages.  Currently the localization issue is being discussed and this plan will be updated when more information is made available. Test complete criteria all tools written all test cases entered into Tactics database successful completion of August 2001 Pre-Certification pass. Release criteria When a game has completed all Certification requirements, it can continue through the release process. Exceptions to this will have to be approved by upper management in a case-by-case manner.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\win2k_igmpv2_testplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Recommended procedure:  TitleRecommended procedure:  Balash Akbari Normal Microsoft Word 9.0bjbjU IGMPv2 Test Guide Notes: Refer to Appendix I for instruction in how to use the IGMP program to create, join, or send data to a multicast group. Make sure there are at least two functioning NIC are in the test machine. Configure each NIC to have multiple IP address. Field values (6 Cases) Start the NetMon program. Create a multicast group on the test machine Terminate the IGMP program. Stop the NetMon and observe the results. NetMon should at least show two packets: A Version 2 Membership Report generated from step #1 A Leave Group generated from step # 3 Check for the field values specified in the test plan. Case 6 Packet with Max Response Time set to 0 will interpreted as IGMPv1 query.  Therefore the test machine must response with IGMPv1 membership report for 400 second after receiving the query.  Before performing the next test wait for 400 seconds. Are all IGMP messages sent with TTL = 1? Scenario: Join and leave a multcast group. Sniff the IGMP packets.  Expected: TTL=1 in all of them.  Do all IGMP messages contain the Router Alert option? Scenario: Join and leave a multicast group. Sniff the IGMP packets.  Expected: The Router Alert option is included in all of them.  Are the type fields correct in the Report and Leave frames? Scenario: Join and leave a multcast group. Sniff the IGMP packets.  Expected: The Type field in the Report is 0x16. The Type field in the Leave is 0x17.  Is the Group Address field set correctly in the Report and Leave frames? Scenario: Join and leave a multicast group. Sniff the IGMP frames.  Expected: The Group Address field should contain the address of the multicast group entered into igmp.exe.  Do we transmit a Report immediately when we join a multicast group? Scenario: Join a multicast group. Look at the sniff. Expected: 3 Membership Reports.  Is the "Max Response Time" field interpreted correctly? Scenario: Join a multicast group. Send a Membership Query with the "Max Response Time" field set to:  30 - Expected Membership Report from the test host within 3 secs. 255 - Expected Membership Report from the test host within 26 secs. 0 - Expected Immediate IGMP Level 1 Membership Report from the test host. Bad Header (3 Cases) Start the NetMon program Use the BadHv2.tst Send header with type field 0x00 and 0xFF Send a packet with incorrect checksum Send a query when the group address is not a multicast group address Expect no response from the test machine. Are frames with invalid type information ignored? Scenario: Join a multicast group. Send frames to that group with the type field set to 0x0 and 0xFF. Expected: These frames should be ignored without bad side effects.  Is the checksum verified before processing the packet? Scenario: Send a Membership Query with an incorrect checksum.  Expected: the host should send No Report.  Do we discard the Query if the Group Address field is not a multicast group? Scenario: Join a few multicast groups. Send a Query to the host with the Group Address field set to a generic non-multicast IP address.  Expected: the host sends No Report. Query (5 Cases) Start the NetMon Use the GQueryV2.tst to general query. Use the MQueryv2.tst to generate group specific query. Confirm the responses are according to test plan. Do we report all memberships when responding to a General Query? Scenario: Join a few multicast groups on the host. Send a General Query to the host.  Expected: The host sends a response for each group before the Max Response Time specified inthe Query frame expires.  Do we report only the group which the Group Specific Query asked for? Scenario: Join a few multicast groups. Send a Group Specific Query targeting one of them.  Expected: The host should send a Report only for that one group.  Do we intercept Reports by other hosts, and supress reports? Scenario: Have two machines join the same multicast group. Send a Query with a long Max.Response Time. Expected: One of the hosts repsponds first. The second host shouldn't send a Report.  Are any reports sent for the 224.0.0.1 group? Scenario: Send a General Query. Expected: The host should not send a Response indicating his membership in the all-systems group.  Do we send Leave Group frames if this host Reported the last time? fall through - the next test covers this one too Leave Group (2 Cases) Start the NetMon Create a multicast group on two interfaces Use GQueryv2.tst to send a query Stop the NetMon Check the result for the correct behavior.  Do we really leave a group? Scenario: Join an multicast group. Send a General Query. Test host answers. Leave the group. Send a query again. Expected: The host should not answer any more.  Do we suppress reports if this host wasn't the last one sending a Report? Scenario: Have two machines join the same multicast group. Send a query. One of the hosts responds to the all-routers multicast group (224.0.0.2). Leave the multicast group on both of them. Expected: Only the host sending the Report earlier should send a Leave Group frame. IGMPv1 Compatibility (3 Cases) Start the NetMon Create Multicast groups using IGMP program. Use GQueryv2.tst to generate IGMPv2 query and Gqueryv1.tst to generate IGMPv2 query  Follow the test plan. Is the Max Response Time in the IGMPv1 Queries interpreted as 100? Scenario: Join a multicast group on the host. Send an IGMPv1 Query. Expected: The host should not reply immediately. The answer should have a random delay up to 10 sec.  Do we wait 400 secs after hearing an IGMPv1 Query before we send any IGMPv2 messages?  Send an IGMPv1 Query. Keep sending IGMPv2 Queries. Expected: The first IGMPv2 Report should be sent after 400 secs. Before that all Reports should be IGMPv1 reports.  Send an IGMPv1 Query. Keep joining and leaving a multicast group. Expected. Until the 400 secs expire the host should send IGMPv1 Membership Reports and should supress Leave frames.  Are our Reports suppressed by a version 1 Membership Report? Scenario: Join a multicast grop. Send an IGMPv1 Query with a long Max. Response Time. Send an IGMPv1 Report for the same multicast group. Expected: The test host should remain silent. Registry Entries (Cases 4) Change the value of IGMPLevel in the registry.  Reboot the machine and test the send and receive for each case. In NT the value must be added to the following Registry key: HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Tcpip\Parameters Value type: REG_DWORD In Memphis the value must be added to the following Registry key: HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\VxD\MSTCP Value Type: String 0 = No multicast support.  1 = Send IP multicast packets only.  2 = Send and receive IP multicast packets (participate in IGMP).  IGMPLevel = 0  try to send expected: fail  try to receive expected: fail  IGMPLevel = 1  try to send expected: success  try to receive expected: fail  IGMPLevel = 2  try to send expected: success  try to receive expected: success  IGMPLevel = 3 (invalid)  try to send expected: ?  try to receive expected: ?  Multi-homing and Receiving data (5 Cases) Create mulithome group. Use IGMP.exe to send data to that group. Follow the instruction in test plan. Scenario: Join a multicast group. Other host sends UDP packets to that address. Expected: Incoming data from the socket.  Do we send Reports on all interfaces in a multihomed machine? Scenario: Set up a host with two NICs one of them logically multihomed too. Join a multicast group on both NICs. Send a General Query on one side. Expected: Report sent only on that side  Try the other (logically multihomed) side. Expected: Only one Report is sent.  Scenario: Logically multihomed NIC. Multiple processes join a multicast group using separate specific IP addresses from the NIC. Expected: Incoming data show up in every process.  Crosstalk Scenario: Multiple processes join different multicast groups. (INADDR_ANY, SO_REUSEADDR - Paul_C_Drews@ccm.jf.intel.com ) Data sent to one of the groups. Expected: Only one of the processes (and the right one) should receive the data.  Scenario: Multiple processes join the same multicast group (different UDP port). Data sent to the group.(Van Jacobson; van@ee.lbl.gov) Expected: Only the process with the right UDP port will receive the data. Membership lists (2 Cases) Start the NetMon Use IGMP.exe to create multicast groups Use Gqueryv2.tst to generate IGMPv2 query Scenario: Multiple process join the same multicast group. Send a General Query. Expected: Only one Report. Scenario: Logically multihomed NIC. Multiple processes join a multicast group using separate specific IP addresses from the NIC. Expected: Only one Report. Only one Leave when the last process exits. IGMP is alive after reestablishment of WAN connection (Hammer into Anvil) As the date of this document this case has never been tested Scenario: Join a multicast group over a WAN link. Disconnect WAN link. Redial. Send Query. Expected: Host answer the Query.  setsokopt ip_multicast_if As the date of this document this case has never been tested Scenario: Physically(logically) multihomed box. Socket opened on one IP address. setsokopt IP_multicast_if tells us to use another of our addresses. Send data. Expected: It comes out only on the interface which has the IP address given in setsockopt().  Interoperability As the date of this document this case has never been tested Appendix I: IGMPv2 Test Guide Program igmp.exe is used to create, join, leave, or send data to a multicast group. Parameters: IGMP <s/r> <Local IP> <Multicast IP> <TTL> <Port> <Data size> <Iterations> join/create a multicast group send data to a multicast group Local IP  IP address of the local interface Multicast IP: IP address of the multicast group Time To Live value of IP packet (in IGMPv2 always 1) Port: port number that data is sent/received Data size Data size that is sent with s option  Iterations: Number of time data will be sent  Examples: Following command creates a process (A1) that establishes a multicast group with the multicast address of 233.0.1.1 on an interface with the IP address of 26.26.10.31 to receive data on port number 9000. IGMP r 26.26.10.31 233.0.1.1 9000 1 300 1 Since 233.01.1 is already created the following command creates a process (A2) that joins the 233.0.1.1 multicast group on an interface with the IP address of 26.26.10.33 to receive data on the port 9000.  IGMP r 26.26.10.33 233.0.1.1 9000 1 300 1 Following command creates a process (A3) that joins the 233.0.1.1 multicast group on an interface with the IP address of 26.26.10.35 to receive data on the port 9001.  IGMP r 26.26.10.35 233.0.1.1 9001 1 300 1 The following command multicast two 300 bytes set of data to the 233.0.1.1 multicast group from the 26.26.10.70 interface. IGMP s 26.26.10.70 233.0.1.1 9000 1 300 1 As the result members of the multicast group 233.0.1.1 that expects data on port 9000 (A1, A2) receives two sets of 300 bytes. To cause the IGMP process to leave a multicast group terminate the process. IGMPv2 Test Guide Balash Akbari  DATE \@ "MM/dd/yy"  03/05/97  PAGE
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\x-box test harness.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. X-Box Test Harness TitleX-Box Test Harness johndaly Normal.dot Sakphong Chanbai Microsoft Word 9.0X-Box Test Harness The purpose of the test harness is to make it easy to run tests in several different ways. Due to the X-Box system being uniprocess, any time we need to run more than one test simultaneously we need to package the test into many static libraries and load/run the tests from a main program. And since most test executable will probably look about the same anyway, there is no sense in writing more than one in any case. several different ways  include running the tests individually, from now on known as APITestMode, and running them all together from now on known as StressTestMode. StressTestMode is equivalent to running the tests in APITestMode with the mode set to parallel and with some other stress specific settings. Please see the  INI file structure and functions  document for more details. How the test harness works It starts up Initializes logging and other things requiring initialization. It reads the general settings in the INI file to determine StressMode or APITestMode mode [APITestMode] mode Reads   from [APITestMode] to determine serial, parallel, or both Reads name of next test from the [TestList] Serial mode Reads  NumberOfThreads  from the [testmodule] section for the test found on [Test] Reads  LogLevel  and  LogFile  for the test  Reads  iterations  from the [test] section for the test found on TestList If more threads>1, spawns threads, otherwise just calls the StartTest() entry for that and passes the  LogLevel  and  LogFile  entries Iterates step   for  iterations  from the [test] section In the case of 1 thread, control is returned when the test finishes, runs test cleanup code (EndTest() from your test), then the next test is called from [TestList] In the case of multiple threads, the test harness waits until the threads are completed before running test cleanup code (EndTest() from your test) and then calling the next test from [TestList] Parallel mode Reads  NumberOfThreads  from the [test] section for the test found on [TestList] Reads  LogLevel  and  LogFile  for the test  Reads  iterations  from the [test] section for the test found on TestList Creates a controlling thread to run this test in, and this thread: If more threads>1, spawns threads, otherwise just calls the StartTest() entry for that test and passes the  LogLevel  and  LogFile  entries Iterates step   for  iterations  from the [test] section In the case of 1 thread, control is returned to controlling thread when the test finishes, then the cleanup code is called (EndTest() from your test) In the case of multiple threads, the controlling thread waits until the threads are completed before running test cleanup code (EndTest() from your test) and exiting  Then the next test is called from [TestList] When all the tests from [TestList] have been started up, waits for them to finish Both mode Does one pass through [TestList] in serial mode Does one pass through [TestList] in parallel mode Reads iterations for that test and starts loop Reads threads for that test, and if >1 starts appropriate number of threads Stress mode Runs parallel mode from above As each test thread returns, sleep for the specified interval under  SleepBetweenRun  and spawns a thread which runs the test again How do log files get cleaned up or saved If a LogFile is specified in your [test] section, the logging mechanism will write to this file during the test, and then send it to  server  set in the [LogServer] section of the ini file. How does logging work See Logging Doc How to use driver verifier Since NT s driver verifier must be configured by setting the registry key and there is no registry in XBox. We have modified the NT executive to read driver verifier s settings from loader parameter block. The parameters are similar to the registry version. For example, the key Verify=drivername.sys, VerifyLevel=3 will be appeared as Xboxldr.com /debug /verify= *.sys  /verifylevel=27 /ioverifylevel=2 Please see verifier.doc for more information regarding driver verifier settings. What should your test do Your test needs to do the following: Export void WINAPI StartTest(HANDLE LogHandle) This is your test entry point It must be thread safe It must use the log handle passed in It must return only if all tests are done Do not call TerminateThread or ExitThread in StartTest Export void WINAPI EndTest(void) If you need to do any cleanup, do it here It must be thread safe Do not call TerminateThread or ExitThread in EndTest Remember, it is only called 1 time each time your test is called, NOT 1 time per thread if your test is running multiple threads. Each test must create its own heap using HeapCreate, allocate using HeapAlloc, HeapReAlloc, and free/destroy heap using HeapFree and HeapDestroy. Do not use GlobalAlloc/LocalAlloc, which will be default process heap. How to run test harness As of 4/25/2000, there is no way to configure XBox to load the test harness. To force XAPI to load the harness, you have to set special environment variable as shown below and re-build XAPI E:\xbox\private\ntos\xapi>SET ALT_PROJECT=XBOXTEST E:\xbox\private\ntos\xapi>bcz We will change this ugly hack as soon as the title loader code is ready Debugging Tips You can add DebugVerbose=1 under [GeneralSettings] section to enable printing debug messages to kernel debugger You can add BreaksBeforeLoadTestModule=1 under [GeneralSettings] section to break into kernel debugger everytime the harness tries to load) test modules. What other magic do we need for stress / leak detection / corruption detection Future features: More support for Driver verifier (driver verifier monitor like verifier.exe?) And other cool things
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\win2k_tcpip_testplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8TCPIP TEST SUITE SPECIFICATION TitleTCPIP TEST SUITE SPECIFICATION Normal Microsoft Word 9.0bjbjU TCPIP TEST SUITE SPECIFICATION (ICMP, ARP, IP, TCP , UDP ,IGMP  & Router Discovery ) TCPIP Test Team  Version 2.0: Revision History: Bama Ramarathnam (bamar) July 2,1997 (Added more test cases to the original TCPIP regression test suite) Balash Akbari (balasha) May 20, 1998 IP fragmentation cases for reassemble was added Balash Akbari (balasha) August 14, 1998 Dead Gateway Detection cases were added Balash Akbari (balasha) January 8, 1999 New cases was added for ARP Balash Akbari (Balasha) June 03, 1999 Cases for DHCP configuration for Router Discovery was added Balash Akbari (Balasha) October 09, 1999 General test case clean up IGMP V1 and IGMP V2 was merged TCPIP Test Specification : Introduction The TCPIP Protocol Suite includes not only the TCP and  IP protocols but also ICMP , ARP ,UDP and IGMP. This test plan Specification covers all the above areas. The goal of this document  is to provide information about the different tests which are run on the TCPIP stack in NT5.0 .  Most of these tests were also run on Win95 and NT4.0. Further versions of this document will add more details to the test plan and add additional test cases to consider. This document covers the tests performed which a mention about how these tests are performed but does not go into detail about the way the tests are done. Features that are tested  The specification covers the following areas: Wireless Media Registry Parameters Router Discovery Coverage The tests cover all the basic functionality of the TCPIP Stack and also checks compatibility with systems having different TCPIP implementations and options. All new features added to the stack will be part of this test plan once they have been unit tested and integrated into the stack. The specification also includes boundary/special conditions with emphasis on tests which attack the system. The tests should also check special configurations and different media like Token Ring, FDDI etc. At present the tests are semi-automated but work is on to automate them. Functionality Testing The tests for the different protocols is as follows:  ICMP   ICMP Reply for valid Requests only  Ping to unicast address   expected a response Ping to allnet broadcast address 255.255.255.255   no response and no net traffic Ping to 0.0.0.0   expected no response Ping to subnet broadcast a.b.255.255   expected no response Ping multicast address   expected no response Ping loopback address ( 127.0.0.1)   expected a response but no net traffic Check response on receiving a ICMP packet with the source address a multicast address, broadcast address or  0.0.0.0  or a.b.255.255 or loopback address   ICMP Invalid Header Fields / Bad Packets Send a packet with incorrect checksum value of 0 , FFFF Send packets with invalid values in the type field  of 0 ,FF , 02 Send packets with invalid values in the code field of FF , F0   ICMP Address mask Request / Reply Check to see if the host is able to find its subnet mask   send a address mask request to the all net broadcast and the subnet broadcast  - check response for correct subnet mask   ICMP Timestamp Request/Reply Send a request to a unicast address   expected a response Send a request to the  subnet broadcast   expected no response Send a  request to the allnet broadcast   expected no response   ICMP Redirect  Send a message to a host A through router RI. Let R1 send a redirect message with the next hop now being R2. Check if the routing table is updated and the next message to A is sent to R2. Now send another redirect message changing the router for Destination A to R1. Check if the routing table is updated. Have the router R1 send a network redirect (after the above test) and check the routing table of the hosts connected to that subnet ICMP Destination Unreachable Check to see if the host sends, port unreachable, destination unreachable messages and host unreachable.   ICMP Parameter Problem Fragmentation and Forwarding Send a fragmented ICMP packet from A to B and check if the reassembly works fine Send a fragmented ICMP packet from A to B through router R which also fragments the packet further (MTU varies over the different nets) and check if reassembly works fine. Send a fragmented ICMP packet with the packets having overlapping data bytes / and non-overlapping data with a few bytes missing. (Send a large amount of data ) Currently no tool to test directly. JP driver does limited test. Send a fragmented ICMP packet with the packets having the non-fragment flag set and check the response of the stack on receiving the fragmented packets.   Miscellaneous Check the response of the host machine on receiving a unsolicited ICMP error message. Check the response of the host on being bombarded with a huge load of ICMP packets.    Invalid Header / Packet Checks Invalid value in the hard type ( type of hardware address) Invalid value in the protocol type ( type of protocol address being mapped ) Invalid value in the protocol size field Invalid value in the opcode field Have a value in the target Ethernet address for an ARP request    ARP Cache Timeout Values Make sure that the ArpCache gets updated after receiving an Arp request. Make sure we do not ARP for address in the ArpCache (Static & Dynamic entries) Make sure unreferenced ArpCache entries timeout after 120 seconds Make sure referenced  ArpCache entries timeout after 600 seconds Set the TCPIP\Parameters\ArpCacheLife to 60 seconds make sure unreferenced entries timeout after 60 second and referenced entries timeout after 600 seconds. Set the TCPIP\Parameters\ArpCacheMinReferencedLife to 300 seconds make sure referenced entries timeout after 300 second and unreferenced entries timeout after 120 seconds. Set the TCPIP\Parameters\ArpCacheLife to 300 seconds and TCPIP\Parameters\ArpCacheMinReferencedLife to 120 seconds. Make sure referenced and unreferenced ArpCache entries timeout after 300 seconds. Add 10 ArpCache entries.  Assuming first entry was add at the time t, add the nth entry at t + n*10.  Reference NONE of the entries.  Make sure each entry timeout independent of the others after 120 seconds. Add 10 ArpCache entries.  Assuming first entry was add at the time t, add the nth entry at t + n*10. Continually reference ALL of the dynamic entries.  Make sure each entry timeout independent of the others after 600 seconds. Add 10 ArpCache entries.  Assuming first entry was add at the time t, add the nth entry at t + n*10. Continually reference 5 of the entries.  Make sure referenced entries timeout after 600 seconds and unreferenced entries timeout after 120 seconds. Add five static addresses to the ArpCach.  Add 10 dynamic addresses to the ArpCache.  Assuming first dynamic entry was add at the time t add the nth entry at t + n*10.  Continually reference 5 of the dynamic entries.  Make sure referenced entries timeout after 600 seconds and unreferenced entries timeout after 120 seconds. Boot time Checks (On a multi-homed machine   check on logically and physically multihomed hosts ) NEW TEST PLAND SHOULD BE MEARGED HERE Does the machine send three ARP requests for all the IP addresses it has? If there is an IP conflict is the interface disabled Set the TCPIP\Parameters\ArpRetryCount to 1 make sure stack ARPs only once for each IP address.  Do the non conflicting interface work fine Are error messages popped on the conflicting machines Check whether the host ARPs for any address when its IP address is the same as the default gateway address    Multi homing issues and forwarding Make sure that ARP requests are sent from the correct interface and only the correct interface. Make sure that the addressees are added to the correct interface and only correct interface. Add 10 ArpCache entries on each interface.  Assuming first entry was add at the time t add the nth entry at t + n*10.  Reference NONE of the entries.  Make sure each entry timeouts independent of the others after 120 seconds. Add 10 ArpCache entries on each interface.  Assuming first entry was add at the time t add the nth entry at t + n*10. Continually reference ALL of the dynamic entries.  Make sure each entry timeouts independent of the others after 600 seconds. Add 10 ArpCache entries on each interface.  Assuming first entry was add at the time t, add the nth entry at t + n*10. Continually reference 5 of the entries.  Make sure referenced entries timeout after 600 seconds and unreferenced entries timeout after 120 seconds. Add five static addresses on each interface.  Add 10 dynamic addresses on each interface.  Assuming first dynamic entry was add to the ArpCache at the time t Add the nth entry at t + n*10.  Continually reference 5 of the dynamic entries on each interface.  Make sure referenced entries timeout after 600 seconds and unreferenced entries timeout after 120 seconds. Enable forwarding on a multihome system.  Send a packet to interface A of the system such that the packet has to be forwarded to the interface B.  Make sure ARP requests are sent for the correct address on the interface B only. Enable forwarding on a multihome system.  Add multiple IP addresses to the interface B.  Send a packet to the interface A of the system with final destination of the packet being one of the IP addresses on the interface B.  Make sure we do not ARP for the address on any of the interfaces. Enable forwarding and source routing on a multihome system.  Send a source routed packet to interface A.  The next hope specified in the packet should be connected to interface B.  Make sure ARP requests are send for the next hope address on the interface B only.    ARP requests for/from different addresses ARP for a list of addresses and get replies and then check the ARP table to see that     the entries are in the cache Send an ARP request for the address 0.0.0.0   expected no reply Send an ARP request for a multicast address   expected no reply Send an ARP request for broadcast address   255.255.255.255 or a.b.255.255 Send an ARP request for the loop-back address Send an ARP request with the IP address and the MAC address of the sender set to broadcast address   Expect a reply Send and ARP request with the IP address of the Sender set to 0.0.0.0 and correct MAC address. Expect a reply Send the Arp request with the MAC address of the sender set to zero   expect no response. Send an ARP request with the IP address and the MAC address of the sender set to multicast address   Expect no reply Send an ARP request with the Sender IP address set to broadcast address and the MAC address of the sender set to unicast address.  Make sure the receivers ARP cache does not get updated. Send an ARP request with the Sender IP address set to a Multicast address and the MAC address of the sender set to unicast address.  Make sure the receivers ARP cache does not get updated.    Miscellaneous Cases For a ARP request let two different hosts respond with a ARP reply   check the response on receiving two ARP replies. Check the response of the host on being flooded with ARP requests for one of its IP addresses Check the response of the host on receiving a unsolicited ARP reply Check the response of the host on being bombarded with ARP requests Invalid Header /Packet Checks Send a ICMP echo request with  IP Version = 5  ; no response from test machine Send a ICMP echo request with IP Version = 0  ; no response from test machine Send a ICMP echo request with IP version = F ; no response from the test machine Send a ICMP echo request with a bad IP header length of 0 ; expected no response from the test machine end a ICMP echo request with a bad IP header length of 7 ; expected no response from the test machine Send a ICMP echo request with a bad IP header length of F ; expected no response from the test machine Send a ICMP echo request with a bad IP checksum value of FFFF ; expected no response from the test machine Send a ICMP echo request with a bad IP checksum value of 0 ; expected no response from the test machine Send a ICMP echo request with a bad IP Protocol type of 0x13 ; expected ICMP destination protocol  unreachable   Send a ICMP echo request with a bad IP Protocol type of 0xFF ; expected ICMP destination protocol  unreachable Send a ICMP echo request with a bad IP Total Length of 0 ; expected no response from the test machine Send a ICMP echo request with a bad IP Total Length of 20; expected no response from the test machine Send a ICMP echo request with a bad IP Total Length of FFFF; expected no response from the test machine Send a fragment with the Total length field equal to the length of the segment before fragmentation    Testing IP Options   Invalid IP option headers Send a ICMP echo request with 20 bytes of value 0xFF as IP options   expected ICMP Parameter Problem as response.  Send a ICMP echo request with 20 bytes of value 00 as IP options   expected a echo reply response Send an ICMP echo request with 20 bytes of value 0-9 & 0-9 as options   expected ICMP Parameter Problem as response. Send a ICMP echo request  with an incomplete Timestamp Option   expected ICMP Parameter problem as response   Record Route Option Send a ICMP echo request with the record route option containing space for 4 hops   expected a echo response with options Send a ICMP echo request with the record route option containing space for 1 hop   expected echo response with options Send a ICMP echo request with the record route option containing space for 9 hops   expected echo response with options Send a ICMP echo request with a bad record route option saying that there is space for 63 hops but actual available space is for max of 9 hops   expected ICMP parameter Problem as response Send a ICMP echo request with space for 1-2 hops but the the option length = 0  - expected ICMP Parameter Problem as response Send a ICMP echo request with space for 1 hops but the the option length = 0x1  - expected ICMP Parameter Problem as response Send a ICMP echo request with a invalid Pointer field value of 0,1, 0xFF  - expected ICMP Parameter problem   Time Stamp Option Send a ICMP echo request with the Timestamp option containing space for 4 Timestamps   expected a echo response with options Send a ICMP echo request with the Timestamp option containing space for 1 timestamp    expected echo response with options Send a ICMP echo request with the timestamp option containing space for 9 timestamps   expected a echo response with options with the flag field having values 0 , 1 and 3 Send a ICMP echo request with an invalid timestamp option length of 0 , 0xFF   expected ICMP Parameter problem Send a ICMP echo request with an invalid timestamp option pointer value of 0 , 0xFF   expected ICMP Parameter Problem Send a ICMP echo request with an invalid timestamp overflow value of 0xF , 1   expected ICMP parameter problem Send a ICMP echo request with an invalid timestamp flag value of 0xF , 4   expected ICMP parameter problem   Strict Source Routing Option Send an ICMP echo request with a valid route specified and check the response received. Send a ICMP echo request to the test machine with the packet containing a strict route through a non existent gateway expected ICMP destination unreachable. Send a ICMP echo request with the SSR option pointer field having an invalid value of  0 ,0xFF   expected no response but destination unreachable Send a ICMP echo request with the SSR length field having an invalid value of  1 , 0  , 0xFF   expected ICMP parameter problem Send a ICMP echo request with the SSR IP address field having invalid IP addresses like a broadcast or multicast IP address. In a multi-home machine enable forwarding and enable source routing (HKLM\CCS\...\Services\tcpip\Parameters\DisableIPSourceRouting=0). Send a strict source routed packet such that packet gets forwarded from interface A to interface B.  Make sure the packet gets forwarded.  Disable the source routing by deleting the registry value.  Send a packet without source routing option.  The packet should get forwarded.  Send the packet with source routing option and the packet should not get forward.   Loose Source Routing Option Send a ICMP echo request with a non existent gateway address in the LSR   expected Destination unreachable Send a ICMP echo request to the test machine with a correct route specified and a router between two machines not included in the LSR   expected a echo response Send a ICMP echo request with the LSR option pointer field having an invalid value of 3, 0xA   expected no response but destination unreachable Send a ICMP echo request with the LSR length field having an invalid value of  1 , 0  , 0xFF   expected ICMP parameter problem Send a ICMP echo request with the LSR IP address field having invalid IP addresses like a broadcast or multicast IP address   Miscellaneous Send a ICMP echo request with both the IP record route option with length for 3 hops and an IP timestamp with length for 3 timestamps    Valid IP Address Tests send a ICMP echo request to 0.0.0.0  -  no response send a ICMP echo request to 0.0.HostID  -  no response send a ICMP echo request to sub-net broadcast a.b.255.255   no response send a ICMP echo request to all-net broadcast  255.255.255.255   no response send a ICMP echo request to  loop back address 127.0.0.1  - no response send a ICMP echo request to 127.255.255.255  - no response send a ICMP echo request to a multicast address ( 228.0.0.1)   no response send a ICMP echo request to the all host multicast group 224.0.0.1   no response send a ICMP echo request from source address 0.0.0.0  - expected no response send a ICMP echo request from 0.0.hostID   expected no response send a ICMP echo request from sub-net broadcast   expected no response send a ICMP echo request from all-net broadcast   expected no response send a ICMP echo request from loop-back address   expected no response send a ICMP echo request from 127.255.255.255   expected no response send a ICMP echo request from a multicast group   expected no response send a ICMP echo request from the all host multicast address 224.0.0.1   expected no response    TOS field Check Send ICMP echo request with different TOS ( 0-255 )  and check that the echo reply has the same  TOS value as in the packet sent if it is  valid Change the DefaultTOSValue registry parameter to 0 and check the TOS field in the Packets sent is 0 Change the DefaultTOSValue registry parameter to 6 and check the TOS field in the Packets sent is 0x4 as bytes 6 and 7 are not used in the TOS field Try to change the TOS value using socket option on TCP/UDP packets.  Expect no change since the TOS change with socket option is disabled by default. Add the registry value DisableUserTOSSetting = 0. Check to see that TOS value can be changed using socket option.   TTL field Check Send  packets with TTL values of  0 , 1 , FF , 200 and check that only packets with valid TTL values are accepted . Change the DefaultTTL registry parameter to 0 ; check that the packets are not sent with a TTL value of 0 Change the DefaultTTL registry parameter to 18  ; check that the packets are sent with a TTL value of 18 Change the DefaultTTL registry parameter to 200 ; check that the packets are sent with a TTL value of FF   IP Filtering NEW TEST PLAND SHOULD BE MEARGED HERE   Dead Gateway Detection Dead gateway detection and switching Add three default gateways (G1, G2, and G3) with the Metrics M1>M2>M3 respectively.  Make sure there are no active connections on the gateways. Attempt to establish connection T1.  Observe that the first two SYN are sent to the G1.  Do not allow connection establishment. Attempt to establish connection T1 again. Observe that T1 attempts to establish a connection through G2. Allow T1 to establish a connection through G2 and start transferring data. Stop responding through G2 after some data has been sent. Observe that the connection is switched to G3.  Allow data transfer through G3. After some data transfer through G3 then stop responses through G3.  Observe that the connection is switched back to G1. Active gateway selection (Switch Default gateway if 25% of connections have switched) Add three default gateways (G1, G2, and G3) with the Metrics M1>M2>M3 respectively..  Make sure there are no active connections on the gateways. Establish twelve connections (T1 T12) through G1. Stop responding to the connection T1.  Observe that connection T1 is switching to G2. Other connections stay active through G1.  Stop responding to connection T2 and T3.  Observe that T2 and T3 will attempt to transfer data through G2.  Allow data transfer through G2 for T2 and T3.  Observe rest of connections (T4 T12) are switched to G2. Attempt to establish connection T13. Observe that the connection is established using G2. Comprehensive Dead gateway detection test Establish twelve connections (T1 T12) through G1. Stop responding to the connection T1.  Observe that connection T1 attempts to use G2. Other connections stay active through G1. Allow some data flow for T1 through G2.  Stop responding to T1 through G2.  Observe that T1 switches to G3.  Allow data flow through G3 Stop responding to T2.  Observe that T2 attempts transfer through G3. Allow data transfer for T2 through G3.  Stop responding to connection T3.  Observe that T3 attempts to use G3.  Allow data transfer through G3.  Observe that the rest of the connections  (T4 T12) are switched to G3. Stop responding to T1, T2, and T3.  Observe that all connections are switched back to G1.  Allow data transfer through G1. Comprehensive test should be executed for following Configurations: All routes are discovered G1 static, G2 & G3 are discovered G1 static, G2 & G3 are discovered All routes are static Router Discovery Specific Test Add three default gateways (G1, G2, and G3) using Router Discovery. Establish a T1 through G1. Configure G1 such that the Lifetime of the G1 expires while T1 is still transferring data. Observe the behavior of the system. Establish connections T1-T12 through G1. Stop responding to T1 and T2.  Allow connection establishment for T1 and T2 through G2.  Configure the G1 such that the Lifetime of G1 expires while T3-T12 are still transferring data through G1. Observe the behavior of the system. Establish T1-T12 through G1.  Stop responding to T1.  Allow data flow for T1 through G2. Advertise a new gateway Gx with better preference metric. Stop responding to T2. Observe the behavior of the system.   MultiHoming Issues Check whether on a multihomed machine packets are forwarded from one interface to the other if IP forwarding is enabled Check whether Packets are sent with the proper interface address and that packets sent from the router machine gets the proper address Check that packets on a logically multihomed machine are sent and received with the proper IP address   Fragmentation and Forwarding Check whether the IP header is copied to all fragments correctly Set the MTU value in the registry to 500 and check that packets sent are fragmented and reassembled properly Check that if the MTU is set to a really small value say 20 then the MTU used is 0x68 Check that if the MTU set is greater than the Max segment size specified for a media i.e. 1500 for Ethernet then the packets sent are of size MSS Check that fragmentation and re-assembly work fine when there is a router in between two machines which fragments the packets once more Check the response of the machine on receiving packets with overlapping fragments / fragments with some data bytes missing ( using the fragment offset field) Check the response of the host machine on receiving fragments with different IP header values / options Check that if IP forwarding is enabled a router forwards packets from one subnet to another Check that the router does not forward packets between two subnets if the TTL field has a value of zero Check that the router decrements the TTL by 1 when forwarding the packets between two subnets. Check the response of the host on receiving fragmented packets with the more fragments bit in the flag turned off / on alternately Check the response on the host on receiving fragmented packets with the don t fragment bit in the flag turned on   it should reassemble the packet Check whether the router send a ICMP error message if it has to fragment packets before forwarding it and the NO fragment bit is set in the packets IP fragmentation: Reassemble Send 65507 byte of data- echo request   all the fragments have the same size.   Try following packet sizes: (FragmentSize = 8 * n) when (n = 1...1500) Send 65507 bytes of data - echo request - each time increment the fragmentation offset such that FragmentatonOffset = LastPacketSize +1 (e.g. offset = 10, 21, 32, 43, 54, 65 Send 65507 bytes of data - echo request - start from 1500 first fragment decrement the fragment offset by one Send 65507 bytes of data - echo request - start from 1500 first fragment decrement the fragment offset by eight. Send 65507 bytes of data - echo request - each fragment have random size   Send 65507 bytes of data - echo request - each fragment have random size - set the do not fragment bit in all fragments. Send 65507 bytes of data - echo request   each fragment has random size - set the TTL values differently in each packet. Make sure some TTL values are zero. Send 65507 bytes of data - echo request   each fragment has random size   only the protocol field is different in some packet. Send 65507 bytes of data - echo request   with random size small packets and a very large packet in the end.   Send a large echo request - each fragment has random size.  Send the fragments out of order and send each fragment more than once. Create large fragmented echo request   Send all the fragments except the last fragment. Assemble large fragmented echo request   Send all the fragments except one middle fragment. Send four fragments.  Third and fourth fragments with the same offset but different IP packet size (payload). Send four fragments.  Third and fourth fragments with the same offset but third packet sizes zero. (Payload). Send (UDP, TCP, ICMP, and IGMP) fragmented packets that after reassemble the total length of the packet is zero. Send (UPD, TCP, ICMP and IGMP) fragmented packets that after reassemble the total length of the packet exceeds the Max Packet size (65535). (Teardrop & NewTear Variation)  Send ICMP fragmented packets such that the offset of the last fragment overwrite the data in the previous packet but the total data in the last packet and privies packet is less than the packet size of the first packet. Example: Packet size offset First packet: Second packet:  Send N zero byte IP packets with more fragment bit set and incremental offset. (Packets do not contain any data) N = 10  Send N zero byte IP packets with more fragments bit set and offset zero.  Last packet unset the more fragment bit. N = 10  Send many zero byte IP packets with more fragments bit set and zero offset.  In last packet the more fragment bit is unset and packet contains data.   Send packets such that second fragment overwrite the data of first fragment (Bonk & Boink Variation ) Send 65507 bytes packet such that every fragment overwrite the data of previous fragment (Bonk & Boink Variation ) Send 65507 bytes packet such that last fragment overwrite the data of previous fragment Send fragmented packets when the last fragment contains no data. Send fragmented packets when the last fragment contains no data and the offsets point to the last byte of the previous packet. Send fragmented packets when one fragment has the Max offset (8191) and IP packet contains 7 bytes Send fragmented packets when one fragment has the Max offset (8191) and IP packet contains 8 bytes Send fragmented packets when one fragment has the Max offset (8191) and IP packet contains Max Number of bytes. Send fragmented packets with large offset (<8191) and enough data to Max the packet size but do not unset the last fragment bit and send the next packet with larger fragmentation offset and more data.  Do not set the more fragmentation bit but send fragments.  Repeat cases: 1, 2, 5, 14, 15   Set the fragmentation bit but do not send any fragments  Identification field Check  Send two echo requests to a host and check that the replies contain different identification numbers Send a fragmented data gram with different identification numbers on some fragments and check the response of the host machine on receiving it. Miscellaneous Check the response of the host on being bombarded with IP packets like ICMP echo packets; or a huge number of fragmented IP packets.   Invalid Header / Packet Tests sending a SYN to the broadcast address 255.255.255.255   expected no response sending a SYN to a sub-net broadcast address   expected no response sending a SYN to the loop-back address   expected no response sending a SYN to a multicast address   expected no response sending a SYN from a broadcast address   expected no response sending a SYN from a sub-net broadcast address   expected no response sending a SYN from a loop-back address   expected no response sending a SYN from a multicast address   expected no response sending a SYN with a bad TCP checksum   expected no response sending a SYN with a bad TCP and IP checksum   expected no response sending a TCP segment with all reserved bits =1   expected no response sending a TCP segment with all flag bits =1  - expected no response Send a TCP segment with the URG bit turned on and the urgent pointer containing a offset value which is outside the range of sequence numbers transmitted Send a TCP segment with the URG turned off and the urgent pointer field containing a non zero offset   the urgent pointer field should be ignored Send a TCP segment with a sequence number which is not valid in the current connection   the segment should be ignored Send a TCP ACK segment with the ACK number not valid for the current connection   the ACK segment sent is ignored   Duplicate SYN Send a duplicate SYN after connection setup   expected that the duplicate SYN is ignored Send a non duplicate SYN after connection setup   a RST packet is sent in response   Sequence Space Wrapping Send a SYN with sequence number = FFFFFFFF Establish a connection so that the sequence number (in the FIN segment) is wrapped around Random Sequence Number check (ISN JP doing this ones)   State Conformance Checks Server Side Checks Listen  ( SYN Sent  ( Established ( Fin wait1 ( Fin wait2 ( Time Wait Listen ( SYN  Sent ( Established ( Fin wait1 ( Time Wait Listen ( SYN Sent  ( Established ( Fin wait1 ( Closing ( Time Wait Listen ( SYN Sent  ( Established ( Close Wait ( Last ACK Client Side Checks Listen  ( SYN Received ( Established ( Fin wait1 ( Fin wait2 ( Time Wait Listen ( SYN Received ( Established ( Fin wait1 ( Time Wait Listen ( SYN Received ( Established ( Fin wait1 ( Closing ( Time Wait Listen ( SYN Received ( Fin wait1 ( Time wait Listen ( SYN Received ( Established ( Close Wait ( Last ACK  State Non - Conformance Checks Check the response of the server on receiving a Non SYN packet when listening on a port Check the response if a SYN is received after a FIN has been sent. Check the response on sending a FIN but not ACKing the data received Check whether a data segment sent after a FIN segment had been sent and ACKed is accepted Check the response on receiving a SYN segment from another host after sending a SYN and waiting for a response Check that after sending a FIN and not receiving a ACK or FIN in response we close the connection after the timeout expires RTT Measurement Establish a TCP connection and send packets with slight delays   Do not ACK a data segment and check the retransmission time of the segment Note: RTT increases as a percentage of the previous RTT and the new RTT and hence it will take some time to reach the value of the RTT calculated and so send a large number of bytes before checking the retransmission time of the segment SYN / RST Sequence Send a RST in response to a SYN and check whether connection is not opened Send a RST in response to a SYN-ACK sent and then check whether able to open a connection and transfer data correctly Send a RST segment instead of sending an ACK in response to a SYN-ACK and check whether the data sent in the RST segment is not received.   Zero Window Probing Send some data with a advertised window of zero ( to the Echo Port  7 ) and wait for the other side to do the zero window probing. ACK with a zero window and then increase the advertised window size. Check whether the connection is terminated when the receiver closed without sending a FIN on a zero window advertisement (Note: If keep-alive are sent then it is detected and the connection terminated else the connection is not terminated.)   Slow Start / Exponential back-off Send a SYN segment with the other machine not responding. Check the timeouts and the retransmissions should occur after timeouts which double. Send a huge amount of data and check whether the rate at which packets are sent is a slow start and then as the ACK s come more number of unacknowledged are sent   Out of order Segment Processing Send TCP segments which are not in order   the segments are stored and then ACKed once all segments are received Check that we send an ACK as soon as the first out of sequence segment is received. Send out of order TCP segments with 1-2 segments lost   the segments not received are retransmitted and data is transferred correctly Check that when a out of order segment is received then the maximum number of Duplicate ACKs sent is MaxDupAcks (which is set in the registry) Check the response of the host   TCP Segments   Bad Data Offset Send TCP data segments with bad header Length (or Data Offset) values of 0, 3 and 0xF   expected the packet should be ignored Send TCP data segments with the Data offset (greater than the TCP header Length) value pointing to the middle of the data stream   expected the packet should not be accepted  Naggling Check that when a large number of small data packets are being sent then  the packets are combined into larger packets and sent with naggling enabled Check that when a large number of small data packets are being sent then  the packets are not combined into larger packets and sent with naggling disabled Check that when a large number of data packets are being sent to different ports on the same host the packets are not mixed up while combining them  PMTU Detection Check that when a connection and the two hosts exchange the MSS value the smaller of the MSS values is used in the connection Check that when a connection is established to a host not in the subnet the MTU used is the Minimum over all hops in the connection ( this is when EnablePMTUDiscovery in the registry is set ) Check that a default MTU of 576 is used when a connection is established to a host in another sub-net and the EnablePMTUDiscovery is disabled.  TCP  Keepalives Set the registry entry KeepAliveInterval and establish a TCP connection and check that Keep Alive transmissions are sent every KeepAliveInterval units and the other machine responds Set the Registry entry TcpMaxDataRetransmissions to a value 7 and establish a TCP connection and then disconnect the systems. Check that Keepalive segments are sent for TcpMaxDataRetransmissions times and then the connection is aborted if no reply is received.  TCP Multihoming Issues On a logically multi-homed host check whether the correct interface address is used in packets being sent from on a specific logical interface On a physically multi-homed host check whether packets sent through a particular interface contain the correct interface address On a physically multi-homed host with IP forwarding enabled check whether two applications on the same ports but different interfaces receive the correct data meant for that interface Check whether we are able to establish a connection between two interfaces on the same host TCP Option   Invalid Header Check Send a SYN segment with an MSS (Kind=2) option with invalid lengths of 0, 1, 2, 3, 5, 8, 9, F when the TCP header length reflect the correct length of a TCP packet with the MSS option (6).  The default segment size of 536 is used for that connection Send a SYN segment with a MSS option which had an invalid segment size of 0, 1, 8, 1460, 1461,1500, FFFF.  All other fields must be valid   the default segment size is used Send a SYN with TCP header length of 6, four No Operation option followed by a valid MSS option. Send a SYN with TCP header length of 6, five No Operation option followed by a valid MSS option. Send a SYN with two consecutive MSS option when both options indicate a valid segment size MSS value. Send a SYN with two consecutive MSS option when the first option indicates a valid segment size but the second option indicates a very small segment size e.g. 8. Send a SYN with 20 consecutive MSS and correct header length of F. Send a SYN with a leading No Operation option, followed by a valid MSS option followed by End of Option List option. Send a SYN with TCP header length of 7 a single MSS option followed by three No Operation option and an End of Option List option.  Send a SYN with 57 leading No Operation followed a valid MSS option. Send a SYN with TCP header length of F and 60 End of Option List options. Send a SYN with TCP header length of F and 60 NO Operation options.   Functionality Check Send a SYN segment with a MSS of value 1460 and the other has a value of 536   check that the connection is established with a value of 536  PAWS   Valid Timestamp Check Is the timestamp values in non decreasing order in the consecutive TCP segments sent Send a segment with timestamp value of zero   it should be accepted Send a segment with timestamp value FFFFFFFF and then a segment with TS value of zero   it should be accepted Send segments with decreasing timestamp values   they should not be accepted Check whether the Tsecr field in the returning ACK \ Data segments is set to the correct value Send a ACK\ Data segment with a missing Timestamp field  - the segment is accepted if it is in sequence Send a segment with an invalid Tsecr field  - the segment should not be accepted Send a segment with an invalid length field in the TS option   the option is ignored   Connection Setup Establish a connection with TS option and then send ACK \ Data segments without TS   segments are accepted if in sequence Establish a connection without TS in SYN and then send ACK \ Data segments with the TS option  - accept the data but ignore the TS option Send a duplicate SYN after connection has been established   the duplicate SYN is ignored Send a RST segment with a decreasing TS value   the RST segment is accepted irrespective of its TS value   PAWS functionality Check Send a duplicate data / ACK segment   the duplicate segment is ignored Send a segment with sequence value outside the current window but valid TS   the segment should be ignored Send a segment with valid sequence no and TS value   it should be accepted Send segments out of sequence  - the out of sequence segments are stored till the in-sequence segment is received Check whether the data transfer is done properly   TimeStamp Clock Requirements Check whether the timestamp value changes at least once for a window of data sent Check that the timestamp values are monotonic between connection resets   Outdated Timestamps Check that if the TCP connection is idle for 24 days then the packet received is not checked for its TS value   RTT Measurement Check that the RTT calculation using the TimeStamp values exchanged works fine. Repeat the RTT measurement check in TCP  Scalable Windows  Option on \ off check Check that the registry parameter Tcp1323Opts turns on / off the Window Scaling option Check that the TcpWindowSize registry value determines the scale factor used  Connection Establishment Check whether connection is established and data transferred correctly when window scaling is supported by both machines Check that the server uses the window scaling option only if the client  supports the scaling option  Check whether the client stops using the window scaling option if the server does not support it Send a SYN-ACK with the scale option in response to a SYN without the scale option - a RST segment was sent in response  Zero Scale factor Check that a connection is established and data transferred with a scale factor of zero  Check that the connection with the client/server having a scale factor of zero and the server/client having a non zero scale factor  Scale Factor  Change checks Send a  Window scale option in a Data / ACK segment   expected that the option is ignored in all segments except the SYN and SYN ACK Send a duplicate SYN once a connection is established with a different scale option   the scale factor sent in the later SYN is ignored and we use the original scale factor  Invalid Option Check Send a SYN / SYN ACK with an invalid option length of 04   expected the scale factor sent is ignored Send a SYN / SYN-ACK with a scale factor greater than 14   expected that the connection is established using a scale factor of 14   Send Window Functionality check Establish a connection and transfer data using different scale factors by varying the TcpWindowSize   expected the data should be transferred correctly  SACK   Valid SACK connection Check Check that the data is transferred correctly on a connection using the SACK option. Check that the SACK option is interpreted correctly   blocks not SACKed are retransmitted by sending a SACK with alternating data blocks included in the SACK Check that the SACK permit option is sent only on the SYN segments   Invalid header Checks Send a SACK Permit option in a non SYN segment like ACK or Data   the SACK permit option should be ignored Send a SYN / SYN_ACK with an invalid SACK option (length =4; kind = C)  - a connection should be established without the SACK option Send a SACK option in a Data segment   the server should ignore the SACK option sent Send a invalid SACK option (length = 0; kind =5)   the server should ignore the SACK option sent Send a ACK segment with a SACK option of length > 40   expected the client resets the connection Send a SACK option with an invalid block of data in the SACK   the client ignores the invalid data block specified    Invalid SACK connectivity client side check Send a duplicate SYN with the SACK permit option once the connection is established   the server should ignore the duplicate SYN Send a SACK option in a ACK segment in a connection established without the SACK permit option   the client should ignore the SACK option Establish a TCP connection with the SACK option and send a ACK with a SACK option and duplicate block information in the SACK   expected that the duplicate information is just considered once Establish a TCP connection with the SACK option and send a Ack with a SACK option for a block of data already ACKed  - the server just ignores the SACK sent Establish a TCP connection with the SACK option and send a ACK with a SACK option for out of sequence blocks of data   later ACK a out of sequence block of data not included in the SACK   the client does not retransmit the data block Establish a TCP connection with the SACK option and send a ACK with a SACK option for a few blocks of data   Do not ACK these blocks   the client should timeout and retransmit the data blocks in the SACK but not ACKed   Invalid SACK connectivity server side check Establish a TCP connection with SACK options. Retransmit a segment which has not been ACKed but is present in the SACK   server drops the duplicate segment sent Miscellaneous Send a SACK with overlapping Block boundaries Send a SACK with boundaries that overlaps the blocks that have been received and acknowledged. Check the response of the host on being bombarded with TCP packets ie like SYN packets Check the response of the host on receiving a valid TCP packet with the TCP header exceeding the max TCP header size.  Invalid Header / Packet Tests Send a UDP packet with UDP length = 0, FFFF   expected the UDP packet is dropped Send a UDP packet with a wrong checksum value of 0, FFFF and 1234   the packet is dropped Send a UDP packet with an invalid source / destination port no of 0   the packet is dropped  ICMP Error Processing Check Send a UDP datagram to a port where no one is listening   expected a ICMP destination and port unreachable message  UDP Send / Receive Send and Receive Data using UDP with size of data less then the MTU UDP Send / Receive Zero Byte Packet Send and Receive UDP packets with 0 bytes of data   expected that we care able to send / receive empty UDP packets  UDP Broadcasts Send UDP broadcast to subnet broadcast   a.b.255.255  - expected Packets are sent on only one adapter if host is multi-homed Send UDP broadcast to allnet broadcast   255.255.255.255  - expected Packets are sent on all adapter s if host is multi-homed Receive a UDP broadcast to a subnet to a particular port  Receive a UDP broadcast to the allnet broadcast address on a particular port   Multi Homing Issues On a logically multihomed machine check that the UDP packets are sent with the correct interface address On a physically multihomed machine check that the UDP packets are send on the correct NIC and that the IP address in the packet is correct On a physically multihomed machine the UDP packet is sent to the other interface if the destination is reachable through the other adapter  Miscellaneous Flood Test performed by Sandeep Send invalid UDP packets on reserved ports and check the behavior of the host IGMP  Check Packet Header Values Check that IGMP messages sent with TTL field having a value 1 Check that all IGMP messages contain the router Alert option Check that the Report and leave frames have the correct field types Check that the correct group address is set in the report / leave frames Check whether we send a IGMP report when we join a multicast group Is the Max Response time field in the header interpreted correctly  Invalid Header values Send a IGMP frame with the type filed having value 0 , FF   expected the frame  is ignored Send a IGMP query with a bad checksum value of 0 , FFFF   expected no response to the query Send a IGMP query with the group address not valid ie 157.55.50.56, 0.0.0.0, 156.255.255.255  - no response to the query IGMP Registry Level Checks Check that if the registry variable IGMPLevel has a value 0 we cannot send / receive IGMP packets Check that if the registry variable IGMPLevel  has value 1 we can send IGMP packets but cannot receive them Check that if the registry variable IGMPLevel has value 2 we can send / receive IGMP packets Check that if the registry variable IGMPLevel has an invalid value of 3 then by default we can send / receive IGMP packets  Report First process on a machine to join a multicast group sends a membership report Second process to join a identical multicast group from same / different IP address   does not send a report Second process joins a different multicast group from the same / different IP address   send a membership report Check whether we report all memberships in response to a General query Check whether only the report for the particular multicast address is sent in response to a group specific query Check whether in response to a query only one host on the subnet replies with the report Check that in response to a general query no reports is sent for 224.0.0.1  Leave Group Check to see if the program sends the leave group message on exit when we stack was the last member to reply to the all group query. Check to see if the program sends the leave group message on exit when we stack was the last member to reply to the group specific query. Check whether we suppress leave messages if the host wasn t the host sending a report in response to a query the last query. Check that once we have left a multicast group we do not reply to general or group specific query  IGMP v1 Compatibility Check whether the max response time in IGMP v1 queries interpreted as 100 Check whether we wait for 400 seconds after hearing a IGMP v1 query before we send any IGMP v2 messages Check whether the IGMP v2 reports are suppressed by a IGMPv1 report in response to a IGMPv1 query Send / receive Multicast packets Able to send / receive messages on the multicast address On a card with multiple IP addresses  - only the interface which joins the multicast group receives the messages More than one process belongs to the multicast group   on receiving the multicast message all processes should receive the message More than one process  belongs to the multicast group on different interfaces   on receiving the multicast message all processes should receive the message Check that if data greater than the MTU is sent the fragmentation and reassembly work fine Check that if bad fragments  with overlapping and non overlapping data bytes are sent  - the packets are discarded MultiHoming Issues Logically Multihomed host. Multiple processes join a multicast group using different IP addresses. Send a specific / General query   Expected only one report In a physically multihomed host. Send a general query on one interface    Expected a report is sent on only that interface Multiple processes join a multicast group on different ports   Send data to the group   Expected that only processes on the correct port will receive the data Multiple processes join different multicast groups. Send data to one of the groups   Expected only processes on that group will receive the data  Membership Lists Multiple processes join the same multicast group on different IP address. Send a Specific / general query   Expected only one report Multiple processes join different multicast groups. Send a general query   expected report for all groups  Wireless Media Registry Parameter    TcpWindowSize (defined per Adapter basis) Check that the Max window size for a TCP connection on that interface is the specified window size in the registry for that adapter Check that this window Size specified doesn t affect other interfaces Check that the window size used on any connection doesn t exceed the global MaxTCPWindowSize    TcpInitialRTT (defined per Adapter basis) Check that if the TcpInitailRTT is not specified the global RTT of 3000 msecs is used Check that the adapter specific RTT is used on a connection on that interface    TcpDelAckTicks ( defined per Adapter basis ) Check whether the adaptor specific TcpDelAckTicks is used in the connection over this interface Check that if the TcpDelAckTicks parameter is not specified then the default global DelAck time of 200msecs is used  Router Discovery  Host Configuration Does registry value PerformRouterDiscovery enable/disable router discovery Is the default solicitation address 224.0.0.2 Does registry value SolicitationAddressBCast set the address for Solicitation Messages  Invalid Message Checks Send a advertisement with an invalid checksum value of 0 , FFFF   it should be ignored Send an advertisement with an invalid code value of 1 , FF   it should be ignored Send a advertisement with the number of addresses set to 0   it should be ignored Send a advertisement with the address entry size set to 0 ,1   it should be ignored Send a advertisement with the value of Num Addrs greater than the number of addresses in the packet Send a advertisement with an incorrect length field   Expected it should be ignored  Host Behavior Check whether we send Router solicitation frames at boot time   check that a max of 3 is sent Check that the performance level advertised is honored Check whether non-neighboring addresses are ignored Check whether we listen to 224.0.0.1 address to receive Router Advertisement Messages Check whether the preference level of a route an advertised route is updated on receiving a different preference level Check that the new advertised routes are added to the routing table Check that the default gateway configuration is not reset. Send a advertisement for the default gateway with a different preference level   it should not be changed Check that routes are deleted after their lifetime expires Check that the lifetimes on routes are updated on receiving a new advertisement Check that routes with preference level 0x80000000  are ignored Check how fragmented ICMP Router Advertisement packets are handled Check that a route with a lifetime of 0 is ignored Check the behavior of the host on receiving a large number of advertisements in an interval shorter than 3 seconds If an interface releases its IP address   check whether the routes for that interface are also discarded DHCP configuration for Router Discovery Notes: Throughout this section the behavior of the system has been refereed to as BehaviorA and BehaviorB.  Following is the description of each behavior: BehaviorA: No router solicitation massages are sent at startup No router solicitation message are sent after media sense event No router solicitation message are sent after adding IP using IP Help API Route table does not get updated after receiving a valid router advertisement packet. System does not send router solicitation in case of IP change BehaviorB: Router solicitation massages are sent at startup Router solicitation message are sent after media sense event Router solicitation message are sent after adding IP using IP Help API Route table gets updated after receiving a valid router advertisement packet. System sends router solicitation in case of IP change Single-Homed System:   Static Configuration address on the system PerformRouterDiscovery is absent from registry observe:  BehavoirA Disable router discovery by setting registry value PerformRouterDiscovery = 0: BehavoirA Enable router discovery by setting registry value PerformRouterDiscovery = 1: BehavoirB   Setting registry value PerformRouterDiscovery = 2 observe:  BehavoirA DHCP configuration. Router Discovery option is not configured in DHCP server Do not make any changes to registry observe:BehavoirA Disable router discovery by setting registry value PerformRouterDiscovery = 0: BehavoirA  Enable router discovery by setting registry value PerformRouterDiscovery = 1: BehavoirB  Setting registry value PerformRouterDiscovery = 2:  BehavoirA DHCP configuration. Router Discovery option is configured but set to 0 in DHCP server Do not make any changes to registry:  BehavoirA  Disable router discovery by setting registry value PerformRouterDiscovery = 0:  BehavoirA  Enable router discovery by setting registry value PerformRouterDiscovery = 1:  BehavoirB   Setting registry value PerformRouterDiscovery = 2: BehavoirA DHCP configuration.  Router Discovery option is configured and set to 1 in DHCP server  Do not make any changes to registry: BehavoirB Disable router discovery by setting registry value PerformRouterDiscovery = 0: BehavoirA Enable router discovery by setting registry value PerformRouterDiscovery = 1:  BehavoirB   Setting registry value PerformRouterDiscovery = 2:  BehavoirB Transition:  Change the system from static address to DHCP and observe the behavior:   PerformRouterDiscovery is absent from the registry:  Router Discovery option is not configured in DHCP server: BehavoirA  Router Discovery option is configured but set to 0 in DHCP server BehavoirA Router Discovery option is configured and set to 1 in DHCP server BehavoirB  Set the registry value PerformRouterDiscovery = 0: Router Discovery option is not configured in DHCP server: BehavoirA  Router Discovery option is configured but set to 0 in DHCP server BehavoirA Router Discovery option is configured and set to 1 in DHCP server BehavoirA Set the registry value PerformRouterDiscovery = 1: Router Discovery option is not configured in DHCP server: BehavoirB  Router Discovery option is configured but set to 0 in DHCP server BehavoirB Router Discovery option is configured and set to 1 in DHCP server BehavoirB   Set the registry value PerformRouterDiscovery = 2:   Router Discovery option is not configured in DHCP server: BehavoirA  Router Discovery option is configured but set to 0 in DHCP server BehavoirA Router Discovery option is configured and set to 1 in DHCP server BehavoirB  Transition: Change the system from DHCP address to static address and observe the behavior:  PerformRouterDiscovery is absent from the registry:  Router Discovery option is not configured in DHCP server: BehavoirA  Router Discovery option is configured but set to 0 in DHCP server BehavoirA Router Discovery option is configured and set to 1 in DHCP server BehavoirA Set the registry value PerformRouterDiscovery = 0: Router Discovery option is not configured in DHCP server: BehavoirA Router Discovery option is configured but set to 0 in DHCP server BehavoirA Router Discovery option is configured and set to 1 in DHCP server BehavoirA  Set the registry value PerformRouterDiscovery = 1:  Router Discovery option is not configured in DHCP server: BehavoirB Router Discovery option is configured but set to 0 in DHCP server BehavoirB  Router Discovery option is configured and set to 1 in DHCP server BehavoirB  Set the registry value PerformRouterDiscovery = 2: Router Discovery option is not configured in DHCP server: BehavoirA Router Discovery option is configured but set to 0 in DHCP server BehavoirA Router Discovery option is configured and set to 1 in DHCP server BehavoirA  Transition: Change the system from DHCP address to AutoNet address and observe the behavior:  PerformRouterDiscovery is absent from the registry: Router Discovery option is not configured in DHCP server: BehavoirA Router Discovery option is configured but set to 0 in DHCP server BehavoirA Router Discovery option is configured and set to 1 in DHCP server BehavoirA Set the registry value PerformRouterDiscovery = 0: Router Discovery option is not configured in DHCP server:  BehavoirA Router Discovery option is configured but set to 0 in DHCP server  BehavoirA Router Discovery option is configured and set to 1 in DHCP server  BehavoirA Set the registry value PerformRouterDiscovery = 1: Router Discovery option is not configured in DHCP server:  BehavoirA Router Discovery option is configured but set to 0 in DHCP server  BehavoirA  Router Discovery option is configured and set to 1 in DHCP server BehavoirA Set the registry value PerformRouterDiscovery = 2: Router Discovery option is not configured in DHCP server: BehavoirA Router Discovery option is configured but set to 0 in DHCP server  BehavoirA Router Discovery option is configured and set to 1 in DHCP server  BehavoirA  Transition:  Change the system from Static address to AutoNet address and observe the behavior: PerformRouterDiscovery is absent from the registry:   Router Discovery option is not configured in DHCP server:  BehavoirA  Router Discovery option is configured but set to 0 in DHCP server BehavoirA Router Discovery option is configured and set to 1 in DHCP server BehavoirA Set the registry value PerformRouterDiscovery = 0: Router Discovery option is not configured in DHCP server: BehavoirA Router Discovery option is configured but set to 0 in DHCP server BehavoirA  Router Discovery option is configured and set to 1 in DHCP server BehavoirA Set the registry value PerformRouterDiscovery = 1: Router Discovery option is not configured in DHCP server:  BehavoirA Router Discovery option is configured but set to 0 in DHCP server BehavoirA  Router Discovery option is configured and set to 1 in DHCP server BehavoirA Set the registry value PerformRouterDiscovery = 2:  Router Discovery option is not configured in DHCP server:  BehavoirA Router Discovery option is configured but set to 0 in DHCP server  BehavoirA Router Discovery option is configured and set to 1 in DHCP server  BehavoirA Multi-Homed System: Try the following setup combination on a system with two NICs the behavior on each interface should remain the same as single homed case: (4.9.1,4.9.1), (4.91,4.9.2), (4.9.2,4.9.2), (4.9.1, 4.9.3), (4.9.1, 4.9.4), (4.9.1, 4.9.4), (4.9.1, 4.9.5), (4.9.1, 4.9.6), (4.9.1, 4.9.7), (4.9.1, 4.9.8) Interoperability   Backword Compalibility Check that compatible with different versions and host which do not have advanced features  Inter operable with different vendors Check whether operable with different implementations like SUN OS etc.  Inter Operable with implementations on different platforms Check that we are able to communicate between a Intel and Alpha platform Interoperability with different Media Check that the protocol works for different media like Ethernet , Token Ring , Wireless media  it works correctly. Regression and Stress Tests At present some of the regression tests are manual and work is being done to automate them. There are tools to stress the stack and if any new tests are to be added to the stress test they will be integrated with the existing tests. Stress tools for bombarding the stack with  packets are being developed. Other Information Tests for PnP and IPSEC are in separate Test Specifications Some of the tests have to be implemented and integrated with the existing regression test suite There are separate documents with details on how the tests are performed for specific components Tools Using MUPPET & WALDO to send bad packets Use sockets to send bad frames   for stress tests Issues Check limit on the size of the first IP fragment   the check is not in presently but maybe added and so this test maybe be added later Test on Serial and LAN types of adapters    any special tests? Serial: can do with null modem ? Test on the firewall issues: need to come up with test cases New TCPIP registry parameters for the SYN Attack   need to get details and include test cases PAGE   PAGE   Microsoft Confidential
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\Xbox Default Title - DVD Area Test Plan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox - DVD Test Plan Title _PID_HLINKSXbox - DVD Test Plan a-tylerh Normal.dot jimhelm Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags country-region urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags place Month *[B&0 Q#9s  *C0w$R SMTP:SRIDHAR.DAVULURU@ST.COMbjbjk Xbox default title - DVD Area Test Plan Author: David Brender (a-davbre) Last changed: 4/16/2001  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc518268071"  Owners  PAGEREF _Toc518268071 \h   HYPERLINK \l "_Toc518268072"  Resources  PAGEREF _Toc518268072 \h   HYPERLINK \l "_Toc518268073"  Test scenarios  PAGEREF _Toc518268073 \h   HYPERLINK \l "_Toc518268074"  Spec reviews  PAGEREF _Toc518268074 \h   HYPERLINK \l "_Toc518268075"  Tools needed  PAGEREF _Toc518268075 \h   HYPERLINK \l "_Toc518268076"  Software Needed:  PAGEREF _Toc518268076 \h   HYPERLINK \l "_Toc518268077"  Hardware needed:  PAGEREF _Toc518268077 \h   HYPERLINK \l "_Toc518268078"  Test methods  PAGEREF _Toc518268078 \h   HYPERLINK \l "_Toc518268079"  Test code  PAGEREF _Toc518268079 \h   HYPERLINK \l "_Toc518268080"  Manual tests  PAGEREF _Toc518268080 \h   HYPERLINK \l "_Toc518268081"  Standby The DVD is not playing  PAGEREF _Toc518268081 \h   HYPERLINK \l "_Toc518268082"  Stop The DVD is not playing, but a state has been stored of a current location  PAGEREF _Toc518268082 \h   HYPERLINK \l "_Toc518268083"  Play The DVD is playing at normal speed  PAGEREF _Toc518268083 \h   HYPERLINK \l "_Toc518268084"  Pause The DVD is playing, but is now paused by the user  PAGEREF _Toc518268084 \h   HYPERLINK \l "_Toc518268085"  Root Menu Root menu of a DVD title  PAGEREF _Toc518268085 \h   HYPERLINK \l "_Toc518268086"  Sub Menu Any menu that branches off of the main Root Menu  PAGEREF _Toc518268086 \h   HYPERLINK \l "_Toc518268087"  Fast Playback The DVD is playing at a faster than normal rate  PAGEREF _Toc518268087 \h   HYPERLINK \l "_Toc518268088"  Slow Playback The DVD is playing at a slower than normal rate  PAGEREF _Toc518268088 \h   HYPERLINK \l "_Toc518268089"  Fast (rev) Playback The DVD is playing in reverse at a faster than normal rate  PAGEREF _Toc518268089 \h   HYPERLINK \l "_Toc518268090"  Slow (rev) Playback The DVD is playing in reverse at a slower than normal rate  PAGEREF _Toc518268090 \h   HYPERLINK \l "_Toc518268091"  Boot A DVD is placed in the drive as the system boots  PAGEREF _Toc518268091 \h   HYPERLINK \l "_Toc518268092"  Dongle The DVD Dongle is removed, inserted, or swapped out etc.  PAGEREF _Toc518268092 \h   HYPERLINK \l "_Toc518268093"  Audio  PAGEREF _Toc518268093 \h   HYPERLINK \l "_Toc518268094"  MacroVision  PAGEREF _Toc518268094 \h   HYPERLINK \l "_Toc518268095"  Code reviews  PAGEREF _Toc518268095 \h   HYPERLINK \l "_Toc518268096"  Debug walkthrough  PAGEREF _Toc518268096 \h   HYPERLINK \l "_Toc518268097"  Security  PAGEREF _Toc518268097 \h   HYPERLINK \l "_Toc518268098"  Performance testing  PAGEREF _Toc518268098 \h   HYPERLINK \l "_Toc518268099"  Catastrophic failure testing  PAGEREF _Toc518268099 \h   HYPERLINK \l "_Toc518268100"  Interfaces with other components  PAGEREF _Toc518268100 \h   HYPERLINK \l "_Toc518268101"  Localization impact  PAGEREF _Toc518268101 \h   HYPERLINK \l "_Toc518268102"  Test complete criteria  PAGEREF _Toc518268102 \h   HYPERLINK \l "_Toc518268103"  Release criteria  PAGEREF _Toc518268103 \h  Owners Resources Test scenarios Spec reviews Tools needed Software needed Tools needed Hardware needed Test methods Test code Manual tests Standby Pause Root Menu Sub Menu Fast Playback Slow Playback Fast Reverse Playback Slow Reverse Playback Dongle    MacroVision Code reviews Debug walkthrough Security Performance testing Catastrophic failure testing Interfaces with other components Localization impact Test complete criteria Release criteria Owners Test   HYPERLINK "mailto:lithangw@microsoft.com"  mailto:jimhelm@xbox.com HYPERLINK "mailto:chrispi@microsoft.com" mailto:bradch@microsoft.com HYPERLINK "mailto:marcw@microsoft.com" mailto:victorbl@microsoft.com HYPERLINK "mailto:karencs@microsoft.com" mailto:karencs@microsoft.com Usability  HYPERLINK "mailto:tombro@microsoft.com" mailto:tombro@microsoft.com International  Resources Specs  HYPERLINK "http://xbox/specs/pm/shell/"  http://xbox/specs/pm/shell/ Source Test source Test Docs Win2000 Test Docs Test scenarios This test plan will cover the following scenarios: DVD Menu Choose among the different options Navigation between controls and choices Choose different features and chapters DVD Play Back Test the following: Play from beginning to the end Play in Repeat mode Click on click-able object while movie is playing (e.g., the Rabbit mode in Matrix) FF/REW 2x, 4x, 8x, 16x, 32x play Stop/pause Pause/Slow motion forward and reverse Frame by frame forward and reverse Next chapter/previous chapter (and title) While: Playing Fast forwarding Rewinding 2x or higher play Stopped Paused Slow motion forward and reverse Frame by frame forward and reverse Next chapter Previous chapter Playing at first chapter Playing at the last chapter Choose chapter from DVD menu Display Closed Caption (in English, Japanese, and Latin languages) Display credits, actor/actress bios, trailers etc. Play DVDs from different zones, or DVDs that are not zoned Performance on CPU/decoder while playing complicated scenes  What dictates a complicated scene? Multiple dialogs/sound tracks selection Play different screen sizes (4:3 vs. 16:9), and verify the fallback order (if you have your default set to 4:3Letterbox, but the DVD only has 4:3Normal) Using different A/V packs Dolby Digital 5.1 output Play PC-compatible DVDs (playing DVDs with Windows programs with extra features, but not playing the extra features)  Spec reviews You should also read the shell specs on: HYPERLINK "\\\\xbox\\specs\\pm\\shell" file://xbox/specs/pm/shell Tools needed Most, if not all, of the UI testing will be done by hand; automating the testing would be expensive and time intensive to setup.  The tools we will need to perform UI testing are minimal.  We will need the tools which are covered below.   Software Needed: A DVD loaded with a  Complicated scene , wether that s a specifically created scenario program that generates massive audio and visual data, or just a DVD that happens to have a scene that fits that criteria is still unknown. A tool that would allow us to simulate low disk space situations for the Xdisk. For completeness of testing.  A DVD loaded with an extreme amount of  Sub-menus  that branch off of the root menu, to test functionality as the number gets ridiculously huge.  We will need a checked version of the shell to test performance, code coverage, static analysis, and leak testing. Hardware needed: At least 1 Xbox. Controllers, up to 4 per Xbox. TVs that are capable of doing 4:3Normal, 4:3Letterbox, 16:9, HDTV, in NTSC and PAL formats. All supported Xbox A/V packs. A/V receiver(s) capable of PCM, and Dolby Digital (AC-3) 5.1 speakers (for Dolby Digital output) CD burner capable of CD-RW, Audio, Enhanced, and Mixed CD s, to create custom test CDs. DVD-R Burner DVD Stamper, if available DVD Player (Consumer-level)   Must support same A/V outputs of the Xbox for test comparison. Movie DVDs with variations of these formats (to test fallback scenarios):  4:3Normal, 4:3Letterbox, 16:9 Widescreen, and 16:9 Anamorphic Widescreen. DVD Dongle (Region 1 USA, Canada) DVD Dongle (Region 2 Europe, Near East, South Africa, Japan ) DVD Dongle (Region 3 South East Asia ) DVD Dongle (Region 4 Australia, Middle & South America ) DVD Dongle (Region 5 Africa, Asia, Eastern Europe ) DVD Dongle (Region 6 China )  DVD (Stamped) (Region 1) (No Parental control) DVD (Stamped) (Region 1) (Parental Control Level 1) DVD (Stamped) (Region 1) (Parental Control Level 2) DVD (Stamped) (Region 1) (Parental Control Level 3) DVD (Stamped) (Region 1) (Parental Control Level 4) DVD (Stamped) (Region 1) (Parental Control Level 5) DVD (Stamped) (Region 1) (Parental Control Level 6) DVD (Stamped) (Region 1) (Parental Control Level 7)  DVD (Stamped) (Region 1) (Parental Control Level 8) DVD (Stamped) (Region 2) - (Ratings?) DVD (Stamped) (Region 3) DVD (Stamped) (Region 4) DVD (Stamped) (Region 5) DVD (Stamped) (Region 6)  DVD (Stamped) (Not Zoned) Data DVD (Stamped) (No WMAs) Data DVD (Stamped) (WMAs) Data DVD (DVD-R) (No WMAs) Data DVD (DVD-RAM) (No WMAs) Data DVD (DVD-R) (WMAs) Data DVD (DVD-R) (Invalid WMAs) Data DVD (DVD-RAM) (WMAs) 1 Video Cassete Recorder 1 VHS Tape 1 Composite Audio/Video Cable Test methods Test code A DVD loaded with a  Complicated scene , whether that s a specifically created scenario program that generates massive audio and visual data, or just a DVD that happens to have a scene that fits that criteria is still unknown. A DVD loaded with an extreme amount of  Sub-menus  that branch off of the root menu, to test functionality as the number gets ridiculously huge.  Manual tests The following tests are to be completed using DVDs from every region, and of every rating. (But not necessarily every rating from every region) Standby The DVD is not playing Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify a combination of the INVALID controls / buttons perform no action Verify the up arrow moves you up in the OSD (etc.) Verify that the state of the DVD and/or the On Screen Display (OSD) is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify Button functionality as per spec, as well as whether the appropriate icon and text appears when activated: Verify an icon and localized text are displayed for 3 seconds in corner of display Playback should start at the beginning of the default title of the DVD movie Pause  Nothing happens Nothing happens If the user is on the ROOT menu already, verify text  the operation you have chosen cannot be performed If the user is NOT on the ROOT menu, they should be taken to the previous menu Forward Verify text  the operation you have chosen cannot be performed Reverse Verify text  the operation you have chosen cannot be performed Skip + Verify text  the operation you have chosen cannot be performed Skip  Verify text  the operation you have chosen cannot be performed Verify text  the operation you have chosen cannot be performed Numeric pad Verify text  the operation you have chosen cannot be performed Title Go to the Title menu Arrows (Up, Down, Left, Right) Cursor is moved in the corresponding direction of the arrow (if in a menu) Select Verify currently selected menu item is activated (if any) Display Verify the On Screen Display is brought up along the bottom of the screen If the user is on the ROOT menu already, verify they re returned to the start of the ROOT menu If the user is NOT on the ROOT menu, they should be taken to the ROOT menu Verify the OSD operates correctly in this state (navigation works properly, back returns user to playback, and all options operate correctly) Angle Verify button increments through supported video angles Verify when the focus is on the button the text  Angle Options  is displayed. Verify when the button is activated  Angle: [Angle Name] Subtitle Verify button increments through supported subtitle options, including  Verify when the focus is on the button the text  Subtitle Options  is displayed. Verify when the button is activated  Subtitle: [Subtitle Name] Audio Verify button increments through supported audio options Verify when the focus is on the button the text  Audio Options  is displayed. Verify when the button is activated  Audio: [Audio Name] A-B Repeat Verify that A-B functionality is inactive while not in   mode Verify button toggles between the zoom modes of 2x, 4x, 6x, 8x, 10x. And dismissing the On Screen display allows the user to navigate around the screen with the arrow buttons. Verify when the focus is on the button the text   is displayed. Verify when the button is activated  Zoom: [Zoom Level] Setup Verify button toggles the user into a setup menu to deal with settings related to default languages, video, and audio options. Display is TBD Verify that screen saver is initiated after 5 minutes Verify that selecting an option/pressing a button which is not supported by the current DVD displays the correct error message. Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Stop The DVD is not playing, but a state has been stored of a current location Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify a combination of the INVALID controls / buttons perform no action Verify the up arrow moves you up in the OSD (etc.) Verify that the state of the DVD and/or the On Screen Display (OSD) is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify Button functionality as per spec, as well as whether the appropriate icon and text appears when activated: Verify an icon and localized text are displayed for 3 seconds in corner of display Playback should resume from where the user put the DVD in to STOP mode Pause Verify nothing happens Verify the state is put in to STANDBY mode, and Playback should resume from the beginning of the movie If the user is on the ROOT menu already, what happens? If the user is NOT on the ROOT menu, they should be taken to the previous menu Forward Verify text  the operation you have chosen cannot be performed Reverse Verify text  the operation you have chosen cannot be performed Skip + Verify text  the operation you have chosen cannot be performed Skip  Verify text  the operation you have chosen cannot be performed Verify text  the operation you have chosen cannot be performed Numeric pad What happens? Title Go to the Title menu Arrows (Up, Down, Left, Right) Cursor is moved in the corresponding direction of the arrow (if in a menu) Select Verify currently selected menu item is activated (if any) Display  - Verify the On Screen Display is brought up along the bottom of the screen If the user is on the ROOT menu already, what happens? If the user is NOT on the ROOT menu, they should be taken to the root menu Verify the OSD operates correctly in this state (navigation works properly, back returns user to playback, and all options operate correctly) Angle Verify button increments through supported video angles Verify when the focus is on the button the text  Angle Options  is displayed. Verify when the button is activated  Angle: [Angle Name] Subtitle Verify button increments through supported subtitle options, including  Verify when the focus is on the button the text  Subtitle Options  is displayed. Verify when the button is activated  Subtitle: [Subtitle Name] Audio Verify button increments through supported audio options Verify when the focus is on the button the text  Audio Options  is displayed. Verify when the button is activated  Audio: [Audio Name] A-B Repeat Verify that A-B functionality is inactive while not in   mode Verify button toggles between the zoom modes of 2x, 4x, 6x, 8x, 10x. And dismissing the On Screen display allows the user to navigate around the screen with the arrow buttons. Verify when the focus is on the button the text   is displayed. Verify when the button is activated  Zoom: [Zoom Level] Setup Verify button toggles the user into a setup menu to deal with settings related to default languages, video, and audio options. Display is TBD Verify that screen saver is initiated after 5 minutes Verify that selecting an option/pressing a button which is not supported by the current DVD displays the correct error message. Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Play The DVD is playing at normal speed Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify a combination of the INVALID controls / buttons perform no action Verify the up arrow moves you up in the OSD (etc.) Verify that the state of the DVD and/or the On Screen Display (OSD) is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify Button functionality as per spec, as well as whether the appropriate icon and text appears when activated: Nothing happens (playback should continue as normal) During playback Click on click-able object while movie is playing (e.g., the Rabbit mode in Matrix) Play from beginning to end Pause Verify an icon and playback speed are displayed for 3 seconds in the corner of the display Verify current playback is 'frozen' on screen Verify pressing puts the user in to STOP mode (allowing them to resume playback where they left off) Verify nothing happens Forward Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify FAST forward playback is initiated Verify pressing this repeatedly causes a shift in FAST forward playback speed (2x, 4x, 8x, 16x, 32x) Reverse Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify FAST reverse playback is initiated Verify pressing this repeatedly causes a shift in FAST reverse playback speed (2x, 4x, 8x, 16x, 32x) Skip + Verify an icon and localized text are displayed for 3 seconds in corner of display Verify that playback begins from the beginning of the next chapter Verify NOTHING happens if you press this while on the LAST frame of the LAST Chapter Skip  Verify NOTHING happens if you press this while on the FIRST frame of CHAPTER 1 Verify an icon and localized text are displayed for 3 seconds in corner of display Verify that if the chapter has been playing for more than 2 seconds, playback begins from the beginning of the current chapter Verify that if the chapter has been playing for less than 2 seconds, playback beings from the beginning of the previous chapter Verify on-screen information appears for 3 seconds along the top of the screen Verify pressing INFO more than once cycles through the type of information displayed *Does this button remember the last info-menu the user saw, and bring that back up? Numeric pad Allows the user to skip to another chapter Verify the localized text "Chapter #" is displayed Verify entering a VALID chapter number, and pressing SELECT Verify entering a VALID chapter number, and waiting 5 seconds Verify entering an INVALID chapter number, and pressing SELECT Verify entering an INVALID chapter number, and waiting 5 seconds  (Is there anyway to cancel out of this if you accidentally hit the button?) Title Go to the Title menu in Stop mode Arrows (Up, Down, Left, Right) Cursor is moved in the corresponding direction of the arrow (if in the OSD) Select Verify currently selected menu item is activated (if any) Display  - Verify the On Screen Display is brought up along the bottom of the screen Return to the Root menu in Stop mode Verify the OSD operates correctly in this state (navigation works properly, back returns user to playback, and all options operate correctly) Angle Verify button increments through supported video angles Verify when the focus is on the button the text  Angle Options  is displayed. Verify when the button is activated  Angle: [Angle Name] Subtitle Verify button increments through supported subtitle options, including  Verify when the focus is on the button the text  Subtitle Options  is displayed. Verify when the button is activated  Subtitle: [Subtitle Name]  Change subtitle types during playback. Audio Verify button increments through supported audio options Verify when the focus is on the button the text  Audio Options  is displayed. Verify when the button is activated  Audio: [Audio Name]  Change audio types during playback. A-B Repeat Verify first press will set the A point; second press will set the B point and begin loop reply from A to B; third press will turn A-B off. Verify when the focus is on the button the text  A-B Repeat  is displayed. Verify when the button is activated first time  Verify when the button is activated first time  Verify when the button is activated first time  A-B Repeat Off Skip ahead while repeating, see if you loop around to the beginning of the selection, or skip to the next chapter Skip back while repeating, see if you loop around to the beginning of the selection, or the beginning of the chapter Verify button toggles between the zoom modes of 2x, 4x, 6x, 8x, 10x. And dismissing the On Screen display allows the user to navigate around the screen with the arrow buttons. Verify when the focus is on the button the text   is displayed. Verify when the button is activated  Zoom: [Zoom Level] Make sure everything operates the same while zoomed. (I.E. run all test cases) Setup Verify button toggles the user into a setup menu to deal with settings related to default languages, video, and audio options. Display is TBD Verify that screen saver is not initiated after 5 minutes Verify that selecting an option/pressing a button which is not supported by the current DVD displays the correct error message. Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Pause The DVD is playing, but is now paused by the user Click on click-able object while movie is playing (e.g., the Rabbit mode in Matrix) FF/REW Pause/Slow motion forward and reverse Frame by frame forward and reverse Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify a combination of the INVALID controls / buttons perform no action Verify the up arrow moves you up in the OSD (etc.) Verify that the state of the DVD and/or the On Screen Display (OSD) is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify Button functionality as per spec, as well as whether the appropriate icon and text appears when activated: Click on click-able object while movie is playing (e.g., the Rabbit mode in Matrix) Verify an icon and localized text are displayed for 3 seconds in corner of display Playback should resume from where the user put the DVD in to PAUSE mode Pause Nothing should happen Verify the state is put in to STOP mode, and Playback should resume from where the user pressed STOP Verify nothing happens Forward Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify a SLOW forward playback is initiated Verify pressing this repeatedly causes a shift in SLOW forward playback speed (1/2, 1/4, 1/8, 1x) Reverse Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify a SLOW reverse playback is initiated Verify pressing this repeatedly causes a shift in SLOW reverse playback speed (1/2, 1/4, 1/8, 1x) Skip + Verify an icon and localized text are displayed for 3 seconds in corner of display Verify you are taken to the next frame, and are still in PAUSE mode Verify NOTHING happens if you press this while on the LAST frame of the LAST Chapter Skip  Verify an icon and localized text are displayed for 3 seconds in corner of display Verify you are taken to the previous frame, and are still in PAUSE mode Verify NOTHING happens if you press this while on the FIRST frame of CHAPTER 1 Verify behavior when pressing this on the FIRST frame of chapters 2+ (should jump to LAST frame of prev chapter) Verify on-screen information appears for 3 seconds along the top of the screen Verify pressing INFO more than once cycles through the type of information displayed *Does this button remember the last info-menu the users saw, and bring that back up? Numeric pad Allows the user to skip to another chapter (in pause mode) Verify the localized text "Chapter #" is displayed Verify entering a VALID chapter number, and pressing SELECT Verify entering a VALID chapter number, and waiting 5 seconds Verify entering an INVALID chapter number, and pressing SELECT Verify entering an INVALID chapter number, and waiting 5 seconds Title Go to the Title menu, entering stopped mode Arrows (Up, Down, Left, Right) Cursor is moved in the corresponding direction of the arrow (if in a menu) Select Verify currently selected menu item is activated (if any) Display  - Verify the On Screen Display is brought up along the bottom of the screen Return to the Root menu in stopped mode Verify the OSD operates correctly in this state (navigation works properly, back returns user to playback, and all options operate correctly) Angle Verify button increments through supported video angles Verify when the focus is on the button the text  Angle Options  is displayed. Verify when the button is activated  Angle: [Angle Name] Subtitle Verify button increments through supported subtitle options, including  Verify when the focus is on the button the text  Subtitle Options  is displayed. Verify when the button is activated  Subtitle: [Subtitle Name] Audio Verify button increments through supported audio options Verify when the focus is on the button the text  Audio Options  is displayed. Verify when the button is activated  Audio: [Audio Name] A-B Repeat Verify that A-B functionality is inactive while not in   mode Verify button toggles between the zoom modes of 2x, 4x, 6x, 8x, 10x. And dismissing the On Screen display allows the user to navigate around the screen with the arrow buttons. Verify when the focus is on the button the text   is displayed. Verify when the button is activated  Zoom: [Zoom Level] Setup Verify button toggles the user into a setup menu to deal with settings related to default languages, video, and audio options. Display is TBD Verify that screen saver is initiated after 5 minutes Verify that selecting an option/pressing a button which is not supported by the current DVD displays the correct error message. Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Root Menu Root menu of a DVD title Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify a combination of the INVALID controls / buttons perform no action Verify the up arrow moves you up in the OSD (etc.) Verify that the state of the DVD and/or the On Screen Display (OSD) is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify Button functionality as per spec, as well as whether the appropriate icon and text appears when activated: Pause Exits menu and resumes playback Forward Reverse Skip + Skip  Numeric pad Title Go to the Title menu Arrows (Up, Down, Left, Right) Cursor is moved in the corresponding direction of the arrow (if in a menu) Select Verify currently selected menu item is activated (if any) Display  - Verify the On Screen Display is brought up along the bottom of the screen Verify the OSD operates correctly in this state (navigation works properly, back returns user to playback, and all options operate correctly) Angle Verify button increments through supported video angles Verify when the focus is on the button the text  Angle Options  is displayed. Verify when the button is activated  Angle: [Angle Name] Subtitle Verify button increments through supported subtitle options, including  Verify when the focus is on the button the text  Subtitle Options  is displayed. Verify when the button is activated  Subtitle: [Subtitle Name] Audio Verify button increments through supported audio options Verify when the focus is on the button the text  Audio Options  is displayed. Verify when the button is activated  Audio: [Audio Name] A-B Repeat Verify that A-B functionality is inactive while not in   mode Verify button toggles between the zoom modes of 2x, 4x, 6x, 8x, 10x. And dismissing the On Screen display allows the user to navigate around the screen with the arrow buttons. Verify when the focus is on the button the text   is displayed. Verify when the button is activated  Zoom: [Zoom Level] Setup Verify button toggles the user into a setup menu to deal with settings related to default languages, video, and audio options. Display is TBD  Verify that screen saver is initiated after 5 minutes Verify that selecting an option/pressing a button which is not supported by the current DVD displays the correct error message. Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Sub Menu Any menu that branches off of the main Root Menu Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify a combination of the INVALID controls / buttons perform no action Verify the up arrow moves you up in the OSD (etc.) Verify that the state of the DVD and/or the On Screen Display (OSD) is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify Button functionality as per spec, as well as whether the appropriate icon and text appears when activated: Pause Always takes user to previous menu Forward Reverse Skip + Skip  Numeric pad Title Go to the Title menu Arrows (Up, Down, Left, Right) Cursor is moved in the corresponding direction of the arrow (if in a menu) Select Verify currently selected menu item is activated (if any) Display  - Verify the On Screen Display is brought up along the bottom of the screen Verify the OSD operates correctly in this state (navigation works properly, back returns user to playback, and all options operate correctly) Angle Verify button increments through supported video angles Verify when the focus is on the button the text  Angle Options  is displayed. Verify when the button is activated  Angle: [Angle Name] Subtitle Verify button increments through supported subtitle options, including  Verify when the focus is on the button the text  Subtitle Options  is displayed. Verify when the button is activated  Subtitle: [Subtitle Name] Audio Verify button increments through supported audio options Verify when the focus is on the button the text  Audio Options  is displayed. Verify when the button is activated  Audio: [Audio Name] A-B Repeat Verify that A-B functionality is inactive while not in   mode Verify button toggles between the zoom modes of 2x, 4x, 6x, 8x, 10x. And dismissing the On Screen display allows the user to navigate around the screen with the arrow buttons. Verify when the focus is on the button the text   is displayed. Verify when the button is activated  Zoom: [Zoom Level] Setup Verify button toggles the user into a setup menu to deal with settings related to default languages, video, and audio options. Display is TBD Verify that screen saver is initiated after 5 minutes Verify that selecting an option/pressing a button which is not supported by the current DVD displays the correct error message. Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Fast Playback The DVD is playing at a faster than normal rate Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify a combination of the INVALID controls / buttons perform no action Verify the up arrow moves you up in the OSD (etc.) Verify that the state of the DVD and/or the On Screen Display (OSD) is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify Button functionality as per spec, as well as whether the appropriate icon and text appears when activated: Click on click-able object while movie is playing (e.g., the Rabbit mode in Matrix) Play from beginning to end Verify an icon and localized text are displayed for 3 seconds in corner of display Verify movie playback resumes at normal speed at the current location (Verify if in 2x, 4x, 8x, and 16x speeds) Pause Verify an icon and localized text are displayed for 3 seconds in corner of display Verify playback is PAUSED (frozen) on the screen Verify pressing ONCE allows the user to resume where they left off when they resume playing Verify nothing happens Forward Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify the speed is INCREMENTED each time this button is pressed, in these intervals ( 2x, 4x, 8x, 16x, 32x) Reverse Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify the speed is DECREMENTED each time this button is pressed, in these intervals (16x, 8x, 4x, 2x, 1x) Skip + Verify text  the operation you have chosen cannot be performed Skip  Verify text  the operation you have chosen cannot be performed Verify on-screen information appears for 3 seconds along the top of the screen Verify pressing INFO more than once cycles through the type of information displayed *Does this button remember the last info-menu the user saw, and bring that back up? Numeric pad Verify text  the operation you have chosen cannot be performed Title Go to the Title menu in Stop mode Arrows (Up, Down, Left, Right) Cursor is moved in the corresponding direction of the arrow (if in a menu) Select Verify currently selected menu item is activated (if any) Display  - Verify the On Screen Display is brought up along the bottom of the screen Return to the Root menu in Stop Mode Verify the OSD operates correctly in this state (navigation works properly, back returns user to playback, and all options operate correctly) Angle Verify button increments through supported video angles Verify when the focus is on the button the text  Angle Options  is displayed. Verify when the button is activated  Angle: [Angle Name] Subtitle Verify button increments through supported subtitle options, including  Verify when the focus is on the button the text  Subtitle Options  is displayed. Verify when the button is activated  Subtitle: [Subtitle Name] Audio Verify button increments through supported audio options Verify when the focus is on the button the text  Audio Options  is displayed. Verify when the button is activated  Audio: [Audio Name] A-B Repeat Verify that A-B functionality is inactive while not in   mode Verify button toggles between the zoom modes of 2x, 4x, 6x, 8x, 10x. And dismissing the On Screen display allows the user to navigate around the screen with the arrow buttons. Verify when the focus is on the button the text   is displayed. Verify when the button is activated  Zoom: [Zoom Level] Setup Verify button toggles the user into a setup menu to deal with settings related to default languages, video, and audio options. Display is TBD Verify that screen saver is not initiated after 5 minutes Verify that selecting an option/pressing a button which is not supported by the current DVD displays the correct error message. Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Slow Playback The DVD is playing at a slower than normal rate Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify a combination of the INVALID controls / buttons perform no action Verify the up arrow moves you up in the OSD (etc.) Verify that the state of the DVD and/or the On Screen Display (OSD) is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify Button functionality as per spec, as well as whether the appropriate icon and text appears when activated: Click on click-able object while movie is playing (e.g., the Rabbit mode in Matrix) Play from beginning to end Verify an icon and localized text are displayed for 3 seconds in corner of display Verify movie playback resumes at normal speed at the current location (Verify if in 1/8x, 1/4x, 1/2x, and 1x speeds) Pause Verify an icon and localized text are displayed for 3 seconds in corner of display Verify playback is PAUSED (frozen) on the screen Verify pressing ONCE allows the user to resume where they left off when they resume playing Verify nothing happens Forward Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify the speed is INCREMENTED each time this button is pressed, in these intervals (1/8x, 1/4x, 1/2x, 1x) Reverse Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify the speed is DECREMENTED each time this button is pressed, in these intervals (1x, 1/2x, 1/4x, 1/8x) Skip + Verify text  the operation you have chosen cannot be performed Skip  Verify text  the operation you have chosen cannot be performed Verify on-screen information appears for 3 seconds along the top of the screen Verify pressing INFO more than once cycles through the type of information displayed *Does this button remember the last info-menu the user saw, and bring that back up? Numeric pad Verify text  the operation you have chosen cannot be performed Title Go to the Title menu in Stopped mode Arrows (Up, Down, Left, Right) Cursor is moved in the corresponding direction of the arrow (if in a menu) Select Verify currently selected menu item is activated (if any) Display  - Verify the On Screen Display is brought up along the bottom of the screen Return to the Root menu in Stopped mode Verify the OSD operates correctly in this state (navigation works properly, back returns user to playback, and all options operate correctly) Angle Verify button increments through supported video angles Verify when the focus is on the button the text  Angle Options  is displayed. Verify when the button is activated  Angle: [Angle Name] Subtitle Verify button increments through supported subtitle options, including  Verify when the focus is on the button the text  Subtitle Options  is displayed. Verify when the button is activated  Subtitle: [Subtitle Name] Audio Verify button increments through supported audio options Verify when the focus is on the button the text  Audio Options  is displayed. Verify when the button is activated  Audio: [Audio Name] A-B Repeat Verify that A-B functionality is inactive while not in   mode Verify button toggles between the zoom modes of 2x, 4x, 6x, 8x, 10x. And dismissing the On Screen display allows the user to navigate around the screen with the arrow buttons. Verify when the focus is on the button the text   is displayed. Verify when the button is activated  Zoom: [Zoom Level] Setup Verify button toggles the user into a setup menu to deal with settings related to default languages, video, and audio options. Display is TBD Verify that screen saver is not initiated after 5 minutes Verify that selecting an option/pressing a button which is not supported by the current DVD displays the correct error message. Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Fast (rev) Playback The DVD is playing in reverse at a faster than normal rate Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify a combination of the INVALID controls / buttons perform no action Verify the up arrow moves you up in the OSD (etc.) Verify that the state of the DVD and/or the On Screen Display (OSD) is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify Button functionality as per spec, as well as whether the appropriate icon and text appears when activated: Click on click-able object while movie is playing (e.g., the Rabbit mode in Matrix) Play from  beginning beginning  Does it loop back around? Only if it set to repeat? Play from end to beginning Verify an icon and localized text are displayed for 3 seconds in corner of display Verify movie playback resumes at normal speed at the current location (Verify if in 2x, 4x,  8x, and 16x speeds) Pause Verify an icon and localized text are displayed for 3 seconds in corner of display Verify playback is PAUSED (frozen) on the screen When you resume playback, does it resume reverse playback?  Verify pressing ONCE allows the user to resume where they left off when they resume playing When you press play to start the movie again, does it resume reverse playback? Verify nothing happens Forward Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify the speed is DECREMENTED each time this button is pressed, in these intervals (16x, 8x, 4x, 2x, 1x) Reverse Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify the speed is INCREMENTED each time this button is pressed, in these intervals ( 2x, 4x, 8x, 16x, 32x) Is this reversed for reverse play (forward for normal play?) Skip + Skip ahead at the end of the movie Does skipping ahead a chapter continue reverse playback, or reset (what state do you end up in?) Verify an icon and localized text are displayed for 3 seconds in corner of display Verify nothing happens if you are on the LAST chapter Skip  Skip back at the beginning of the movie Does skipping ahead a chapter continue reverse playback, or reset (what state do you end up in?) Verify an icon and localized text are displayed for 3 seconds in corner of display Verify if you are within the first 2 seconds of chapter playback, you are taken to the previous chapter (what state?) Verify if you are on chapter 1, you are taken to the beginning of the chapter no matter what time (what state?) Verify on-screen information appears for 3 seconds along the top of the screen Verify pressing INFO more than once cycles through the type of information displayed *Does this button remember the last info-menu the user saw, and bring that back up? Numeric pad Allows the user to skip to another chapter (what state are they in?) Verify the localized text "Chapter #" is displayed Verify entering a VALID chapter number, and pressing SELECT Verify entering a VALID chapter number, and waiting 5 seconds Verify entering an INVALID chapter number, and pressing SELECT Verify entering an INVALID chapter number, and waiting 5 seconds Title Go to the Title menu Arrows (Up, Down, Left, Right) Cursor is moved in the corresponding direction of the arrow (if in a menu) Select Verify currently selected menu item is activated (if any) Display  - Verify the On Screen Display is brought up along the bottom of the screen Return to the Root menu (In   mode?) Verify the OSD operates correctly in this state (navigation works properly, back returns user to playback, and all options operate correctly) Angle Verify button increments through supported video angles Verify when the focus is on the button the text  Angle Options  is displayed. Verify when the button is activated  Angle: [Angle Name] Subtitle Verify button increments through supported subtitle options, including  Verify when the focus is on the button the text  Subtitle Options  is displayed. Verify when the button is activated  Subtitle: [Subtitle Name] Audio Verify button increments through supported audio options Verify when the focus is on the button the text  Audio Options  is displayed. Verify when the button is activated  Audio: [Audio Name] A-B Repeat Verify that A-B functionality is inactive while not in   mode Verify button toggles between the zoom modes of 2x, 4x, 6x, 8x, 10x. And dismissing the On Screen display allows the user to navigate around the screen with the arrow buttons. Verify when the focus is on the button the text   is displayed. Verify when the button is activated  Zoom: [Zoom Level] Setup Verify button toggles the user into a setup menu to deal with settings related to default languages, video, and audio options. Display is TBD Verify that screen saver is not initiated after 5 minutes Verify that selecting an option/pressing a button which is not supported by the current DVD displays the correct error message. Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Slow (rev) Playback The DVD is playing in reverse at a slower than normal rate Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify a combination of the INVALID controls / buttons perform no action Verify the up arrow moves you up in the OSD (etc.) Verify that the state of the DVD and/or the On Screen Display (OSD) is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify Button functionality as per spec, as well as whether the appropriate icon and text appears when activated: Click on click-able object while movie is playing (e.g., the Rabbit mode in Matrix) Play from  beginning beginning  Does it loop back around? Only if it set to repeat? Play from end to beginning Verify an icon and localized text are displayed for 3 seconds in corner of display Verify movie playback resumes at normal speed at the current location (Verify if in 1/8x, 1/4x, 1/2x, and 1x speeds) Pause Verify an icon and localized text are displayed for 3 seconds in corner of display Verify playback is PAUSED (frozen) on the screen Verify pressing ONCE allows the user to resume where they left off when they resume playing Verify nothing happens Forward Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify the speed is DECREMENTED each time this button is pressed, in these intervals (1x, 1/2x, 1/4x, 1/8x) Reverse Verify an icon and playback speed are displayed for 3 seconds in corner of display Verify the speed is INCREMENTED each time this button is pressed, in these intervals (1/8x, 1/4x, 1/2x, 1x) Skip + Verify an icon and localized text are displayed for 3 seconds in corner of display Verify you are taken to the beginning of the next chapter (what state?) Verify nothing happens if you are on the LAST chapter Skip  Verify an icon and localized text are displayed for 3 seconds in corner of display Verify if you are within the first 2 seconds of chapter playback, you are taken to the previous chapter (what state?) Verify if you are on chapter 1, you are taken to the beginning of the chapter no matter what time (what state?) Verify on-screen information appears for 3 seconds along the top of the screen Verify pressing INFO more than once cycles through the type of information displayed *Does this button remember the last info-menu the user saw, and bring that back up? Numeric pad Allows the user to skip to another chapter (what state are they in?) Verify the localized text "Chapter #" is displayed Verify entering a VALID chapter number, and pressing SELECT Verify entering a VALID chapter number, and waiting 5 seconds Verify entering an INVALID chapter number, and pressing SELECT Verify entering an INVALID chapter number, and waiting 5 seconds Title Go to the Title menu Arrows (Up, Down, Left, Right) Cursor is moved in the corresponding direction of the arrow (if in a menu) Select Verify currently selected menu item is activated (if any) Display  - Verify the On Screen Display is brought up along the bottom of the screen Return to the Root menu (In   mode?) Verify the OSD operates correctly in this state (navigation works properly, back returns user to playback, and all options operate correctly) Angle Verify button increments through supported video angles Verify when the focus is on the button the text  Angle Options  is displayed. Verify when the button is activated  Angle: [Angle Name] Subtitle Verify button increments through supported subtitle options, including  Verify when the focus is on the button the text  Subtitle Options  is displayed. Verify when the button is activated  Subtitle: [Subtitle Name] Audio Verify button increments through supported audio options Verify when the focus is on the button the text  Audio Options  is displayed. Verify when the button is activated  Audio: [Audio Name] A-B Repeat Verify that A-B functionality is inactive while not in   mode Verify button toggles between the zoom modes of 2x, 4x, 6x, 8x, 10x. And dismissing the On Screen display allows the user to navigate around the screen with the arrow buttons. Verify when the focus is on the button the text   is displayed. Verify when the button is activated  Zoom: [Zoom Level] Setup Verify button toggles the user into a setup menu to deal with settings related to default languages, video, and audio options. Display is TBD Verify that screen saver is not initiated after 5 minutes Verify that selecting an option/pressing a button which is not supported by the current DVD displays the correct error message. Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Boot A DVD is placed in the drive as the system boots Verify that the state of the DVD is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify that booting to a DVD initializes the DVD, and that region code is checked and verified correctly during boot. Verify that booting with a DVD of an incorrect region code produces an error. Verify with an invalid Dongle (from a different region then is encoded on the Xbox) produces an error. Verify boot with a DVD movie from each region in the drive but no Dongle: Having never inserted a Dongle before Having inserted a Dongle before Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Dongle The DVD Dongle is removed, inserted, or swapped out etc. Make sure functionality is not impaired when the Dongle is: Inserted BEFORE boot Inserted DURING boot Inserted AFTER boot time Removed DURING boot Removed AFTER boot Removed DURING Movie Playback (each state) Reinserted DURING Movie Playback (each state) Reinserted DURING boot Reinserted DURING boot AFTER being removed DURING boot Reinserted AFTER boot AFTER being removed DURING boot Insert REGION X DVD Dongle Insert every other REGION Dongle and verify Error Message with and w/o a DVD movie in the drive. Insert same REGION Dongle and verify functionality Verify the ability to play a game title with the Dongle inserted. Verify the ability to play a audio CD with the Dongle inserted. Verify navigation works as expected: (should be no navigating until Dongle is (re)inserted) Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify a combination of the INVALID controls / buttons perform no action Verify the up arrow moves you up in the OSD (etc.) Verify that the state of the DVD and/or the On Screen Display (OSD) is not adversely affected by Multiple Control press combinations, such as: Fast Forward + Fast Reverse Pause + Stop Any sort of button input from the Xbox controllers Verify Button functionality as per spec, as well as whether the appropriate icon and text appears when activated: (should not work until Dongle is (re)inserted) Verify the OSD operates correctly in this state: (should not work until Dongle is (re)inserted) Verify reinserting the Dongle restarts playback in its prior state (Fast Play x2 continues to play at x2 speed, Reversed play is still reversed, A-B repeat continues to repeat, etc.) Eject the DVD Verify that after playback has begun removing the dongle stops play back and replacing it with a different region Dongle does not let playback continue.  Verify that screen saver is initiated after 5 minutes if the Dongle is removed. Verify that upon ejection of a DVD the user is booted in the root of the Xdash. Verify that upon ejection of a DVD, and the reinsertion of a new DVD or any other media (or a blank drive) the Xbox reboots. Audio Verify playing DVDs that support these modes: NORMAL, DOLBY DIGITAL, and DTS in these configurations Audio Modes: MONO, STEREO, and DOLBY SURROUND Dolby Digital: OFF, DTS: OFF Dolby Digital: ON, DTS: OFF Dolby Digital: OFF, DTS: ON Dolby Digital: ON, DTS: ON MacroVision Verify that a DVD with Type 0 copy protection ( Rocky  by MGM) plays correctly (no distortion) while recording to VHS Verify that a DVD with Type 1 copy protection ( Twister  by WARNER) is adequately distorted while recording to VHS Verify that a DVD with Type 2 copy protection ( Batman and Robin  by WARNER) is adequately distorted while recording to VHS Verify that a DVD with Type 3 copy protection ( Urban Legend  by COLUMBIA/TRISTAR) is adequately distorted while recording to VHS Verify that the encyption is turned ON after: Warm Reboot Cold Reboot Verify that the encryption is turned OFF after: DVD is ejected Warm Reboot Cold Reboot Code reviews For changed code, after a check-in, and on all code at least 1 time before we ship.  If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough Debugger must be hooked up to the text machine during testing.  If the test engineer does not know how to debug, s/he will need to notify our SDE/Ts or our development owner to debug. Security Security testing specifically on the shell will be minimal.  Overall security testing will be covered in the Security test plan. Performance testing Performance testing will be done on the following: Boot and load times Sound Output Quality (Dolby Digital 5.1 output) DVD visual output quality Play different screen sizes (4:3 vs. 16:9), and verify the fallback order (if you have your default set to 4:3Letterbox, but the DVD only has 4:3Normal) Use all different A/V packs Catastrophic failure testing Verify that when catastrophic failure happens (power cord pulled, box dropped on the floor, lightening strike) the hardware is still operable upon reboot and the Default Title is still functional.  If data is lost or the hard disk becomes corrupted, verify that the Default Title can be recovered from the recovery disc. Interfaces with other components Localization impact All test cases will be executed on every language we support to verify everything is localized correctly and there is no clipping.   Test complete criteria All of the above scenarios must be covered for the Default Title to be declared  test complete Release criteria All tests must pass at 100%.  The only exceptions will be bugs that the War Team declares as postponed, won t fix, or by design. PAGE   PAGE   tj\j\C. xbxQBxb wawPAwa o^H^7(^ xbxQBxb wawPAwa wawPAwa fpfpfpfp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\Xbox Default Title - Boot - Error Test Plan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Default Title   Boot / Error Test Plan Title _PID_HLINKSXbox Default Title   Boot / Error Test Plan jimhelm Normal.dot jimhelm Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags Month Q#9s  *C0w$Rbjbjk Xbox Default Title   Boot / Error Test Plan Author: Jim Helm (jimhelm) Last changed: 05/25/2001 Modified By: James Helm (jimhelm)  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc515411877"  Owners  PAGEREF _Toc515411877 \h   HYPERLINK \l "_Toc515411878"  Resources  PAGEREF _Toc515411878 \h   HYPERLINK \l "_Toc515411879"  Test scenarios  PAGEREF _Toc515411879 \h   HYPERLINK \l "_Toc515411880"  Spec reviews  PAGEREF _Toc515411880 \h   HYPERLINK \l "_Toc515411881"  Tools needed  PAGEREF _Toc515411881 \h   HYPERLINK \l "_Toc515411882"  Hardware needed  PAGEREF _Toc515411882 \h   HYPERLINK \l "_Toc515411883"  Test methods  PAGEREF _Toc515411883 \h   HYPERLINK \l "_Toc515411884"  Test code  PAGEREF _Toc515411884 \h   HYPERLINK \l "_Toc515411885"  Manual tests  PAGEREF _Toc515411885 \h   HYPERLINK \l "_Toc515411886"  Error Messages  PAGEREF _Toc515411886 \h   HYPERLINK \l "_Toc515411887"  Code reviews  PAGEREF _Toc515411887 \h   HYPERLINK \l "_Toc515411888"  Debug walkthrough  PAGEREF _Toc515411888 \h   HYPERLINK \l "_Toc515411889"  Security  PAGEREF _Toc515411889 \h   HYPERLINK \l "_Toc515411890"  Performance testing  PAGEREF _Toc515411890 \h   HYPERLINK \l "_Toc515411891"  Catastrophic failure testing  PAGEREF _Toc515411891 \h   HYPERLINK \l "_Toc515411892"  Interfaces with other components  PAGEREF _Toc515411892 \h   HYPERLINK \l "_Toc515411893"  Localization impact  PAGEREF _Toc515411893 \h   HYPERLINK \l "_Toc515411894"  Test complete criteria  PAGEREF _Toc515411894 \h   HYPERLINK \l "_Toc515411895"  Release criteria  PAGEREF _Toc515411895 \h  Owners Test   HYPERLINK "mailto:lithangw@microsoft.com"  mailto:jimhelm@xbox.com HYPERLINK "mailto:chrispi@microsoft.com" mailto:bradch@microsoft.com HYPERLINK "mailto:marcw@microsoft.com" mailto:victorbl@microsoft.com HYPERLINK "mailto:karencs@microsoft.com" mailto:karencs@microsoft.com Usability  HYPERLINK "mailto:tombro@microsoft.com" mailto:tombro@microsoft.com International  Resources Specs  HYPERLINK "http://xbox/specs/pm/shell/"  http://xbox/specs/pm/shell/ Source Test source Test Docs Win2000 Test Docs Test scenarios This test plan will cover the following scenarios: Boot sequence Spec reviews You should also read the shell specs on: file://xbox/specs/pm/shell Tools needed Most, if not all, of the UI testing will be done by hand because automating the testing will be expensive and we may not have the time to do it.  The tools we will need to perform UI testing is minimal.  Hardware tools are covered below We will need a checked version of the shell to test performance, code coverage, static analysis, and leak testing. Hardware needed Controllers, up to 4 per test machine. TVs that are capable of doing 4:3Normal, 4:3Letterbox, 16:9, HDTV, in NTSC and PAL formats. All supported Xbox A/V packs. Test methods Test code If there is time permitting, there will be test code written that will test the underlying engine that the UI is running on.  If we can ensure that the underlying engine is solid, it will save time in the future if UI has to be changed late in the testing/release process. Manual tests Error Messages These tests invoke each possible error message that the Dashboard will display.  Those messages that are covered by other test areas will be called out in this plan. Generic Error Message How do we invoke this? Can we invoke this? Media Read Error Insert a disc other than an Xbox Game, DVD Movie, or Audio CD, and verify the user is presented with this message What types of media can/should we use for this test? Corrupted C Drive Tests   Boot with following in tray: NOTHING Xbox Game DVD DVD Movie Verify Memory Block information is displayed correctly when the user has a corrupted C Partition on the Xbox Hard Disk Verify Copying a Saved Game displays the proper error message when the C Partition is corrupt Verify Copying Music displays the proper error message when the C Partition is corrupt Memory Unit Errors (These errors and tests will be displayed by the Memory Management tests) Remove a Memory Unit during a Copy / Delete operation User erases an MU (they are prompted with an  are you sure  message) Erasing an MU Fails How do we make this happen? Attempt to copy data to an MU that does not have enough space available Attempt to copy data to the Hard Disk that does not have enough space available MU is bad (Dash recognizes a problem with the MU file system) Is this error moot because of our automatic erase? User deletes a Saved Game (they are prompted with an  are you sure  message) Dashboard is writing to a memory unit (Copying a Saved Game to a Memory Unit) Dashboard is writing to the Hard Disk (Copying a Saved Game / Song to the Hard Disk) User attempts to copy a Saved Game to the Hard Disk from a new Game, and the Hard Disk has 4096 games already on it Parental Control Errors (These errors are covered by the Parental Control test plan) Game rating exceeds the parental control setting Movie rating exceeds the parental control setting Storage Errors A user inserts a new Xbox game, and the Xbox fails to configure the Hard Disk. (This can be simulated by filling up the Xbox, and trying to play a new game?) Factory Reset   User initiates a  Recovery  from within the Dashboard, and they are prompted with an  Are you sure  message User tries to launch a game that doesn t have enough hard disk space to run. How do we simulate this?  How does the Dashboard / Kernel know this?  Does the Game Title boot to the Dash telling the Dash how much space it needs? Music / Soundtrack Errors (These errors and tests will be displayed by the Memory Management tests) User tries to create more than 100 soundtracks User tries to add more than 500 tracks to one soundtrack User runs out of Disk space when trying to create a Soundtrack User runs out of Disk space when trying to copy a track Region Errors User inserts an Xbox Game from a different Game Region. Xbox Region 1 Game Region 2 Game Region 3 Xbox Region 2 Game Region 1 Game Region 3 Xbox Region 3 Game Region 1 Game Region 2  DVD Messages (These errors and tests will be displayed by the DVD tests) User inserts a DVD Movie from a different DVD Region User tries to play a DVD Movie without the Dongle inserted User tries to activate a feature on the DVD that is not supported Code reviews For changed code, after a check-in, and on all code at least 1 time before we ship.  If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough Debugger must be hooked up to the text machine during testing.  If the test engineer does not know how to debug, s/he will need to notify our SDE/Ts or our development owner to debug. Security Security testing specifically on the shell will be minimal.  Overall security testing will be covered in the Security test plan. Performance testing Performance testing will be done on the following: Boot up time to Default Title Game Portal Game Portal navigation Start a new game from Game Portal Start a saved game from Game Portal Audio CD playback DVD playback DVD menu navigation Catastrophic failure testing Verify that when catastrophic failure happens (power cord pulled, box dropped on the floor, lightening strike, as long as the hardware is still operable, upon reboot, the Default Title is still functional.  If data is lost or the hard disk becomes corrupted, verify that the Default Title can be recovered from the recovery disc. Interfaces with other components What other components does the default title interface with? Localization impact All test cases will be executed on every language we support to verify everything is localized correctly and there is no clipping.  When text can be entered, always use extended characters and Japanese characters.  English alphabets will be covered by usage testing. Test complete criteria All of the above scenarios must be covered for the Default Title to be declared  test complete Release criteria All tests must pass at 100%.  The only exceptions will be bugs that the War Team declares as postponed, won t fix, or by design. PAGE   PAGE   Microsoft Confidential {wskakY
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\XBox Default Title - Main Test Plan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Xbox Default Title Test Plan Title _PID_HLINKSXbox Default Title Test Plan Lit Wong Normal.dot Jim Helm Microsoft Word 9.0d?j_p Q#9s  *C0w$R xbox_default_title_test_plan.doc -Xbox Default Title - Music Area Test Plan.doc Xbox Default Title   Memory Management Test Plan Author: James Helm (jimhelm) Last changed:   TIME \@ "M/d/yyyy"  10/19/2000  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc495393785"  Owners  PAGEREF _Toc495393785 \h   HYPERLINK \l "_Toc495393786"  Resources  PAGEREF _Toc495393786 \h   HYPERLINK \l "_Toc495393787"  Test scenarios  PAGEREF _Toc495393787 \h   HYPERLINK \l "_Toc495393788"  Spec reviews  PAGEREF _Toc495393788 \h   HYPERLINK \l "_Toc495393789"  Tools needed  PAGEREF _Toc495393789 \h   HYPERLINK \l "_Toc495393790"  Hardware needed  PAGEREF _Toc495393790 \h   HYPERLINK \l "_Toc495393791"  Test methods  PAGEREF _Toc495393791 \h   HYPERLINK \l "_Toc495393792"  Test code  PAGEREF _Toc495393792 \h   HYPERLINK \l "_Toc495393793"  Manual tests  PAGEREF _Toc495393793 \h   HYPERLINK \l "_Toc495393794"  User Interface  PAGEREF _Toc495393794 \h   HYPERLINK \l "_Toc495393795"  Functionality  PAGEREF _Toc495393795 \h   HYPERLINK \l "_Toc495393796"  Code reviews  PAGEREF _Toc495393796 \h   HYPERLINK \l "_Toc495393797"  Debug walkthrough  PAGEREF _Toc495393797 \h   HYPERLINK \l "_Toc495393798"  Security  PAGEREF _Toc495393798 \h   HYPERLINK \l "_Toc495393799"  Performance testing  PAGEREF _Toc495393799 \h   HYPERLINK \l "_Toc495393800"  Catastrophic failure testing  PAGEREF _Toc495393800 \h   HYPERLINK \l "_Toc495393801"  Interfaces with other components  PAGEREF _Toc495393801 \h   HYPERLINK \l "_Toc495393802"  Localization impact  PAGEREF _Toc495393802 \h   HYPERLINK \l "_Toc495393803"  Test complete criteria  PAGEREF _Toc495393803 \h   HYPERLINK \l "_Toc495393804"  Release criteria  PAGEREF _Toc495393804 \h  Owners Test   HYPERLINK "mailto:lithangw@microsoft.com"  mailto:jimhelm@xbox.com HYPERLINK "mailto:chrispi@microsoft.com" mailto:bradch@microsoft.com HYPERLINK "mailto:marcw@microsoft.com" mailto:victorbl@microsoft.com HYPERLINK "mailto:karencs@microsoft.com" mailto:karencs@microsoft.com Usability  HYPERLINK "mailto:tombro@microsoft.com" mailto:tombro@microsoft.com International  Resources Specs  HYPERLINK "http://xbox/specs/pm/shell/"  http://xbox/specs/pm/shell/ Source Test source Test Docs Win2000 Test Docs Test scenarios This test plan will cover the following scenarios: User wishes to view information about his saved games from the Xdisk, or the Memory Units that s/he owns. User wishes to delete saved games that s/he is no longer interested in. User wishes to delete all saved games out of a specific Memory Area. User wishes to delete all saved games pertaining to a specific title. User goes to play a game, and the game informs the user that they do not have enough space to play.  The user is then sent to the Default Title to clear out some space. During various operations the user is performing with their Memory Areas, they decide to quit (power down). During various operations the user is performing with their Memory Areas, the power goes out.  (Unplug the box) Spec reviews You should also read the shell specs on: file://xbox/specs/pm/shell Tools needed Most, if not all, of the UI testing will be done by hand because automating the testing will be expensive and we may not have the time to do it.  The tools we will need to perform UI testing are minimal.  We will need to simulate some out of space scenarios, etc, which will require either some software to be developed that will quickly generate this scenario, or an easy way to fill up a Memory Area without the need for software.  Hardware tools are covered below.  Here are some software tools we will need: An Xbox Title that will reboot in to the Xdash, as if the user needed to perform storage clean up.  (Specifying various size requirements) A tool that will allow me to compare two files to ensure they are identical.  (Such as windiff).  I will need to be able to compare that data that will live on an MU.  If it s not possible to copy this data to the PC for comparison, a   program will have to be created that works on the Xbox. A tool that would allow us to simulate low disk space situations for both MU s and Xdisk.  This tool may have to be an  Xbox Title  in order to access MU We will need a checked version of the shell to test performance, code coverage, static analysis, and leak testing. Hardware needed At least 1 Xbox. Controllers, up to 4 per Xbox. Memory Units (standard size), at least 8 per Xbox. Memory Units (larger sizes), for future compatibility testing. An Xbox compatible hard disk that is larger than the standard 8MB we will be shipping, for future compatibility testing. TVs that are capable of doing 4:3Normal, 4:3Letterbox, 16:9, HDTV, in NTSC and PAL formats. Test methods Test code Due to the fact that we cannot simulate USB input programmatically, and we cannot get information back out of the Xbox, no test code will be written to automate the testing. The test cases, steps, and variations WILL be written in C++ and executed on the Xbox so that if automation is possible, the test cases and steps are already in the proper location and format. Manual tests User Interface These tests are to ensure that the user interface of the Memory Management area of the Xdash can handle the types of issues that arise when dealing with Memory Management. Types of tests that will NOT be performed are: Testing any title specific UI that needs to be presented to the end user when a failure, or title boot scenario occurs (Out of space during a save, Memory Management Needed, etc). Types of tests that will be performed are: Each message the Memory Management area can display will be called out through the various UI and functionality test cases.  ALL text must be displayed.  4 Controllers plugged in, in various combinations, with various combinations of MU s plugged in to them (i.e., empty, only 1 MU inserted, 2 MU s inserted, etc) Verify the proper amount of space is displayed when highlighting each MU Memory Area that is: empty, 1 block used, half of the blocks used, all blocks save 1 used, and full. Verify the proper amount of space is displayed when highlighting the Hard Drive Memory Area that is: empty, 1 block used, half of the blocks used, all blocks save 1 used, and full. If MU s have a nickname associated with them, verify that it is displayed properly with nicknames that are: empty, 1 char, MAX   1 char, MAX chars, and MAX + 1 chars.  Invalid chars (if possible) will also be used. Mixed Memory Areas, some full, some empty, both MU s and the Hard Drive.   Depending on the screen layout, this may not be necessary NAV: Verify the Navigation on all Memory Area screens and dialogs is consistent and concise. NAV: Verify that all dialogs have a  cancel HP: Verify the UI is updated when an MU is Hot-Plugged, or Un-Plugged while in the UI. HP: Verify the UI is updated when a controller is Hot-Plugged, or Un-Plugged, while in the UI. Verify that any wrapping that can occur is displayed properly.  (i.e., the number of Saved Games a title has will cause wrapping, etc) Verify that the Saved Games are sorted in a meaningful order (i.e., most recent save is at the top, etc) Verify appropriate dialogs are displayed when trying to save a game to a Memory Area with no space available. Verify appropriate dialogs are displayed when trying to copy a game to a Memory Area with no space available. BOOT: Verify a title can boot the Xbox sending the user to the Memory Management Area, and specifying how much space they need to be free, sending values such as: 0, 1, MAX   1, MAX. (CD still in drive) BOOT: Verify a title can boot the Xbox sending the user to the Memory Management Area, and specifying how much space they need to be free. (User removes CD mid-boot)  BOOT: Verify a title can boot the Xbox sending the user to the Memory Management Area, and specifying how much space they need to be free. (User removes CD after boot) Functionality These tests are to ensure that the operations the Xdash performs while in the Memory Management Area are successful, and are working as intended.   Types of tests that will NOT be performed are: Copying files from ALL Memory Locations to every other Memory Location and verifying that the copy was successful. (By inspecting the File System or File integrity) Testing the File System API s related to Memory Location copies to verify that they successfully copy the files with accuracy. Testing the File System API s to verify security in regards to which titles are, and are not allowed to use them. Types of tests that will be performed are: Copy files from an MU to the Hard Drive, and verify the save was successful, using files of size: 0, 1, MAX_SIZE   1, MAX_SIZE., MAX_SIZE + 1. (Requires file level verification) Copy files from the Hard Drive to an MU, and verify the save was successful, using files of size: 0, 1, MAX_SIZE   1, MAX_SIZE, MAX_SIZE + 1. (Requires file level verification) Copy files from each Memory Area to every other Memory Area, using files of size: 0, 1, MAX_SIZE   1, MAX_SIZE, MAX_SIZE + 1, then navigating to the destination area and verify the proper information is displayed. Deleting individual saved games from each Memory Area, and verifying that the UI has been updated. Deleting individual saved games from each Memory Area, and verifying that if the same file exists on other MA s, they are not deleted. Deleting all files from a Memory Area, and verifying that the UI properly reflects the empty Memory Area. HP: Verify the Xdash can handle it when you remove an MU while a game is being Saved, Copied, or Deleted to it. HP: Verify the Xdash can handle it when you Remove a controller while a game is being Saved, Copied, or Deleted, to one of it HP: Verify the Xdash can handle it when you Remove an MU while working with the Memory Area. HP: Verify the Xdash can handle it when you Remove a controller while working with a Memory Area that is plugged in to the controller. Verify that if the user is Coping or Deleting a file from any of the Memory Locations, that when the Power is switched off via the Power button, the Xbox finishes the operation. Verify that if you are Coping or Deleting a file from any of the Memory Locations, that when the Power is removed (Xbox unplugged), the files are either not there, or if they are there, verify they can be safely deleted. Code reviews For changed code, after a check-in, and on all code at least 1 time before we ship.  If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough Debugger must be hooked up to the text machine during testing.  If the test engineer does not know how to debug, s/he will need to notify our SDE/Ts or our development owner to debug. Security Security testing specifically on the shell will be minimal.  Overall security testing will be covered in the Security test plan. Performance testing Performance testing will be done on the following: Copy times between Memory Areas. (MU s to Hard Drive, MU s to MU s, and Hard Drive to MU Memory Management menu navigation Catastrophic failure testing Verify that when catastrophic failure happens (power cord pulled, box dropped on the floor, lightening strike, as long as the hardware is still operable, upon reboot, the Default Title is still functional.  If data is lost or the hard disk becomes corrupted, verify that the Default Title can be recovered from the recovery disc. Interfaces with other components Titles must be able to boot the Xbox in a mode that ignores what is in the tray, and places the user in to the Memory Management area.  They must also be able to specify how much space they need in order to function.  We will test this by creating a title that will boot in to the Memory Management area specifying various amounts of space needed. Localization impact All test cases will be executed on every language we support to verify everything is localized correctly and there is no clipping.  When text can be entered, always use extended characters and Japanese characters.  Usage testing will cover English alphabets. Test complete criteria All of the above scenarios must be covered for the Default Title to be declared  test complete Release criteria All tests must pass at 100%.  The only exceptions will be bugs that the War Team declares as postponed, won t fix, or by design. PAGE   PAGE   Microsoft Confidential d?j_p Q#9s  *C0w$R Xbox Default Title Test Plan Jim Helm Normal.dot Jim Helm Microsoft Word 9.0 Microsoft Xbox Default Title Test Plan Title _PID_HLINKS Microsoft Word Document MSWordDoc Word.Document.8Xbox Default Title Test Plan Author: Lit Wong (lithangw) Last changed: 10/03/2000 Modified By: James Helm (jimhelm)  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc496685122"  Owners  PAGEREF _Toc496685122 \h   HYPERLINK \l "_Toc496685123"  Resources  PAGEREF _Toc496685123 \h   HYPERLINK \l "_Toc496685124"  Test scenarios  PAGEREF _Toc496685124 \h   HYPERLINK \l "_Toc496685125"  Spec reviews  PAGEREF _Toc496685125 \h   HYPERLINK \l "_Toc496685126"  Tools needed  PAGEREF _Toc496685126 \h   HYPERLINK \l "_Toc496685127"  Hardware needed  PAGEREF _Toc496685127 \h   HYPERLINK \l "_Toc496685128"  Test methods  PAGEREF _Toc496685128 \h   HYPERLINK \l "_Toc496685129"  Test code  PAGEREF _Toc496685129 \h   HYPERLINK \l "_Toc496685130"  Manual tests  PAGEREF _Toc496685130 \h   HYPERLINK \l "_Toc496685131"  Boot sequence  PAGEREF _Toc496685131 \h   HYPERLINK \l "_Toc496685132"  Games  PAGEREF _Toc496685132 \h   HYPERLINK \l "_Toc496685133"  Xbox settings  PAGEREF _Toc496685133 \h   HYPERLINK \l "_Toc496685134"  Parental Control  PAGEREF _Toc496685134 \h   HYPERLINK \l "_Toc496685135"  CD audio playback  PAGEREF _Toc496685135 \h   HYPERLINK \l "_Toc496685136"  Memory Management  PAGEREF _Toc496685136 \h   HYPERLINK \l "_Toc496685137"  DVD Playback  PAGEREF _Toc496685137 \h   HYPERLINK \l "_Toc496685138"  Game Portal  PAGEREF _Toc496685138 \h   HYPERLINK \l "_Toc496685139"  Configuration tests  PAGEREF _Toc496685139 \h   HYPERLINK \l "_Toc496685140"  Code reviews  PAGEREF _Toc496685140 \h   HYPERLINK \l "_Toc496685141"  Debug walkthrough  PAGEREF _Toc496685141 \h   HYPERLINK \l "_Toc496685142"  Security  PAGEREF _Toc496685142 \h   HYPERLINK \l "_Toc496685143"  Performance testing  PAGEREF _Toc496685143 \h   HYPERLINK \l "_Toc496685144"  Catastrophic failure testing  PAGEREF _Toc496685144 \h   HYPERLINK \l "_Toc496685145"  Interfaces with other components  PAGEREF _Toc496685145 \h   HYPERLINK \l "_Toc496685146"  Localization impact  PAGEREF _Toc496685146 \h   HYPERLINK \l "_Toc496685147"  Test complete criteria  PAGEREF _Toc496685147 \h   HYPERLINK \l "_Toc496685148"  Release criteria  PAGEREF _Toc496685148 \h  Owners Test   HYPERLINK "mailto:lithangw@microsoft.com"  mailto:jimhelm@xbox.com HYPERLINK "mailto:chrispi@microsoft.com" mailto:bradch@microsoft.com HYPERLINK "mailto:marcw@microsoft.com" mailto:victorbl@microsoft.com HYPERLINK "mailto:karencs@microsoft.com" mailto:karencs@microsoft.com Usability  HYPERLINK "mailto:tombro@microsoft.com" mailto:tombro@microsoft.com International  Resources Specs  HYPERLINK "http://xbox/specs/pm/shell/"  http://xbox/specs/pm/shell/ Source Test source Test Docs Win2000 Test Docs Test scenarios This test plan will cover the following scenarios: Boot sequence Xbox settings Parental Control Game Playback CD audio Playback DVD Playback Game Portal Start, upload, downloads saved games, view, upload high scores Modem dialup setup and ISP setup will be covered in the Network UI test plan [JimY] Spec reviews You should also read the shell specs on: file://xbox/specs/pm/shell Tools needed Most, if not all, of the UI testing will be done by hand because automating the testing will be expensive and we may not have the time to do it.  The tools we will need to perform UI testing is minimal.  Hardware tools are covered below We will need a checked version of the shell to test performance, code coverage, static analysis, and leak testing. Hardware needed Controllers, up to 4 per test machine. TVs that are capable of doing 4:3Normal, 4:3Letterbox, 16:9, HDTV, in NTSC and PAL formats. Memory units of various sizes (if applicable).  8 per Xbox would be optimal, but isn t necessary. Xbox Parental Control CD (if we utilize it) All supported Xbox A/V packs. A/V receiver(s) capable of PCM, and Dolby Digital (AC-3) 5.1 speakers (for Dolby Digital output) CD burner capable of CD-R, CD-RW, Audio, Enhanced, and Mixed CD s, to create custom test CDs. DVD-R Burner DVD Stamper, if available DVD Player (Consumer-level)   Must support same A/V outputs of the Xbox for test comparison. Broadband Internet connection, and several ISP accounts. LAN Hardware   Need to simulate a home LAN of various speeds.  We need a 10baseT Hub, a 100baseT hub, a 10/100baseT hub, and Cat-5 cable. Movie DVDs with variations of these formats (to test fallback scenarios):  4:3Normal, 4:3Letterbox, 16:9 Widescreen, and 16:9 Anamorphic Widescreen. Movie DVD (Stamped) (Region 1) (Not MPAA Rated) Movie DVD (Stamped) (Region 1) (MPAA Rated NC-17) Movie DVD (Stamped) (Region 1) (MPAA Rated R) Movie DVD (Stamped) (Region 1) (MPAA Rated PG-13) Movie DVD (Stamped) (Region 1) (MPAA Rated PG) Movie DVD (Stamped) (Region 1) (MPAA Rated G) Movie DVD (Stamped) (Region 2) - (Ratings?) Movie DVD (Stamped) (Region 3) Movie DVD (Stamped) (Region 4) Movie DVD (Stamped) (Region 5) Movie DVD (Stamped) (Region 6) Movie DVD (Stamped) (Not Zoned) Data DVD (Stamped) (No WMAs) Data DVD (Stamped) (WMAs) Data DVD (DVD-R) (No WMAs) Data DVD (DVD-RAM) (No WMAs) Data DVD (DVD-R) (WMAs) Data DVD (DVD-R) (Invalid WMAs) Data DVD (DVD-RAM) (WMAs) Audio DVD (Stamped) Audio DVD (DVD-R) Audio DVD (DVD-R) (Mixed Data / Audio Tracks) Audio DVD (DVD-RAM) Audio DVD (DVD-RAM) (Mixed Data / Audio Tracks) Game DVD (Xbox) (ESRB Adult Rated) Game DVD (Xbox) (ESRB Mature Rated) Game DVD (Xbox) (ESRB Teen Rated) Game DVD (Xbox) (ESRB Everyone Rated) Game DVD (Xbox) (ESRB Early Childhood Rated) Game DVD (Xbox) (No ESRB Rating) Game DVD (Xbox) (1st disc from a multi-disc game) Game DVD (Xbox) (2nd disc from a multi-disc game) Game DVD (Xbox) (No Signature) Game DVD (Xbox) (Beta Signature) Game DVD (Xbox) (Invalid Signature) Game DVD (PS2) Game CD (PSX) Game CD (Sega 32X) Game GDROM (Sega Dreamcast) Video CD (VCD) Photo CD Data CD (Macintosh Formatted) Data CD (CD-R that is NOT Closed) (No WMAs) Data CD (CD-R) (No WMAs) Data CD (CD-RW) (No WMAs) Data CD (CD-R) (WMAs)   Do the WMAs have to live in the root directory, or can they live in sub-directories? Data CD (CD-RW) (WMAs)   Do the WMAs have to live in the root directory, or can they live in sub-directories? Data CD (CD-R) (Invalid WMAs) Audio CD (Stamped) Audio CD (CD-R) Audio CD (CD-RW) Audio CD (Stamped) (Enhanced) Audio CD (CD-R) (Enhanced) Audio CD (CD-RW) (Enhanced) Audio CD (3 Audio CD (CD-R) (Mixed Data / Audio Tracks) Audio CD (CD-RW) (Mixed Data / Audio Tracks) Test methods Test code If there is time permitting, there will be test code written that will test the underlying engine that the UI is running on.  If we can ensure that the underlying engine is solid, it will save time in the future if UI has to be changed late in the testing/release process. Manual tests Boot sequence This is to test to make sure that the boot sequence works as designed and that the sequence cannot be worked around.  We will cover the features that are related to the Default Title.  For example, we won t test things like: Plug in power cord, make sure you can eject the disc tray, while the power is off. Plug in power cord, make sure you can eject the disc tray, while the power is on. Plugged in, power off, Tray empty: Verify that when powered on, boot sequence appears, and Default Title is started (whether the tray is open or not). Plugged in power off, power on with the following media in the tray, when the tray is closed or open, with controllers plugged in various ports, or not plugged in at all: Games: Xbox retail game disc   starts game Games with different rating and with different parental control settings (online or local) Games with or without XDash data for the game portal, (bmps, WMAs, 3D model for the portal)   Boot Sequence? Xbox retail game disc from a multi-disc Xbox game (not the start disc)   display appropriate error message asking for appropriate disc Xbox game disc with a beta signature   Does not start, brings up default title. Xbox game disc without ANY signature   Does not start, brings up default title. Music: Audio CD (Stamped CD, CD-RW, CD-R, Stamped Audio DVD, DVD-R Audio DVD)   Starts Music Player CD-RW or CD-R with WMAs   Starts Music Player CD-RW or CD-R with WMAs that are INVALID   Starts Music Player (doesn t crash) Multi-session CD or Enhanced CD with audio tracks and data tracks   Starts Music Player DVD full of WMAs   Music Area Launched Audio DVD (when available)   Music Area Launched Movies DVD movies rated at G, PG, PG-13, R, NC-17 with different parental control settings   Movie Area launched with appropriate message DVD movies that are not rated   Movie Area launched with appropriate message DVD movies in any of the 6 region codes   Movie Area launched, only appropriate Region will play DVD movies that is not zoned   Movie Area launched Others Xbox Game DVD ejected game is running (single- or multi-disc games)   Default Title is launched (main menu). Eject disc while Music player is running   Returned to the Music Area in its default, non-playing state Eject disc while Movie player is running   Returned to the Movie Area in its default, non-playing state PSX games   Default Title Launched PS2 games   Default Title Launched Dreamcast games   Default Title Launched  Macintosh Formatted CD   Default Title Launched Data CD (No Music, or Xbox specific data)   Default Title Launched CD-R Data CD (No WMAs)   Default Title Launched CD-R that is not closed   Default Title Launched  DVD-RAM (No WMAs)   Default Title Launched DVD with Windows compatible add-on   Movie Area Launched VCD, CD-i, PhotoCD   Default Title Launched Games This is to test to make sure that the games area works as designed.  We will cover the features that are related to the Default Title.  For example, we won t test things like: Whether or not a game can write to the hard disk an incorrect amount of saved games. Whether or not the game can update high scores directly (without going through the Xzone) Types of things we will test are: Verify that games can be removed from the Xbox   How/Where?? The Navigation for all Games sub-areas. Verify consistency (B is always back, A is always select, etc) Verify that each selection takes you to the proper location Games Collection Menu Verify that if N, 1, or ZERO games have been played / installed on the Xbox, that the games area screens display the correct data. Verify that if the Xbox hard drive is full, the Xdash prompts the user for clean up. Verify games that have MAX, MAX   1, MIN and ZERO length titles display correctly in the appropriate games area screens. Verify that if games have MAX + 1 length titles, the Xdash doesn t explode. Need to find out the teaser information info from victor. Game Enhancements Menu Verify games that have MAX, MAX   1, MIN and ZERO length titles display correctly in the appropriate games area screens. Verify that games can specify which  enhancements  they wish their game to expose (i.e. Game Updates, but not High Scores, etc) Verify that no matter what the game exposes for updates that the navigation is correct. Specific Game Enhancement Menu Play Enhancement Verify games that have the MAX, MAX   1, MIN or ZERO saved games that the games area screens display the correct data. Verify that if the Xbox hard drive is full, playing an EXISTING game gives the user the proper  clean up  message.   what is that message? Verify that if the Xbox hard drive is full, playing a NEW game gives the user the proper  clean up  message.   what is that message? TBD: Need to get info from Victor Xbox settings Please see the spec checked in to  test\docs\Xbox Default Title   Settings Area Test Plan.doc CD audio playback Please see the spec checked in to  test\docs\Xbox Default Title   Music Area Test Plan.doc Memory Management Please see the spec checked in to  test\docs\Xbox Default Title   Memory Management Test Plan.doc DVD Playback Different DVDs will be required to verify XBox's mpeg decoder's performance.  Some consumer-level DVD players can't play some of the newer and more complicated titles (e.g., Matrix).  DVDs from different zones (and non-zoned discs) will be checked.  The DVD Player UI will also be checked. A wide range of DVD titles will be needed to cover compatibility and the DVD menu (e.g. choose a different chapter, title, time). Features to be tested: Choose among the different options Navigation between controls and choices Choose different features and chapters Play Back Test the following: Play from beginning to the end Play in Repeat mode Click on click-able object while movie is playing (e.g., the Rabbit mode in Matrix) FF/REW 2x, 4x, 8x play Stop/pause Pause/Slow motion forward and reverse Frame by frame forward and reverse Next chapter/previous chapter (and title) While: Playing Fast forwarding Rewinding 2x or higher play Stopped Paused Slow motion forward and reverse Frame by frame forward and reverse Next chapter Previous chapter Playing at first chapter Playing at the last chapter Choose chapter from DVD menu Display Closed Caption (in English, Japanese, and Latin languages) Display credits, actor/actress bios, trailers etc. Play DVDs from different zones, or DVDs that are not zoned Performance on CPU/decoder while playing complicated scenes   What dictates a complicated scene? Multiple dialogs/sound tracks selection Play different screen sizes (4:3 vs. 16:9), and verify the fallback order (if you have your default set to 4:3Letterbox, but the DVD only has 4:3Normal) Using different A/V packs Dolby Digital 5.1 output Play PC-compatible DVDs (DVDs with Windows programs with extra features)   This is not possible, correct? Game Portal  need more specific details. Need to do some spec research and fill this in. Configuration tests The following configurations will be covered: All tests will be cover in each of the 6 supported languages Different CD and DVD types Different A/V packs with different TVs (4:3, 16:9, NTSC, PAL) Different A/V packs with different Audio Output (Dolby Digital, PCM) Different sized memory cards Different sized hard disks (for future expansion compatibility testing)   Are we still doing this? Cards that are placed in different controllers (e.g. card is in controller 2, but not controller 1) Different sized cards in different slots Controllers in different slots (e.g., Controller in port 2, but not in port 1, or Controllers in ports 2, 3, and 4, but not 1) Tray opened / closed when booted Network cable plugged in / not plugged in. Network active / not active (e.g. Cable plugged in, but no DHCP server available, Hub/Port disabled, etc) Code reviews For changed code, after a check-in, and on all code at least 1 time before we ship.  If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough Debugger must be hooked up to the text machine during testing.  If the test engineer does not know how to debug, s/he will need to notify our SDE/Ts or our development owner to debug. Security Security testing specifically on the shell will be minimal.  Overall security testing will be covered in the Security test plan. t shell security covered sufficiently by the  Parental Control  section?  Is there more security than this? Performance testing Performance testing will be done on the following: Boot up time to Default Title Game Portal Game Portal navigation Start a new game from Game Portal Start a saved game from Game Portal Audio CD playback DVD playback DVD menu navigation Catastrophic failure testing Verify that when catastrophic failure happens (power cord pulled, box dropped on the floor, lightening strike, as long as the hardware is still operable, upon reboot, the Default Title is still functional.  If data is lost or the hard disk becomes corrupted, verify that the Default Title can be recovered from the recovery disc. Interfaces with other components What other components does the default title interface with? Localization impact All test cases will be executed on every language we support to verify everything is localized correctly and there is no clipping.  When text can be entered, always use extended characters and Japanese characters.  English alphabets will be covered by usage testing. Test complete criteria All of the above scenarios must be covered for the Default Title to be declared  test complete Release criteria All tests must pass at 100%.  The only exceptions will be bugs that the War Team declares as postponed, won t fix, or by design. PAGE   PAGE   Microsoft Confidential
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\Xbox Default Title - Music Area Test Plan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Xbox Default Title Test Plan Title _PID_HLINKS _AdHocReviewCycleID _EmailSubject _AuthorEmail _AuthorEmailDisplayName _PreviousAdHocReviewCycleID _ReviewingToolsShownOnce Games Test Plan jimhelm@xbox.com Jim HelmXbox Default Title Test Plan Normal.dot jimhelm Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags place &N`D! d?j_p Q#9s  *C0w$R SMTP:MARIMO@QWEST.NETbjbjk Xbox Default Title   Music Area Test Plan Author: Ken Inafuku (a-keni) Last changed:   TIME \@ "M/d/yyyy"  7/8/2001  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc511118268"  Owners  PAGEREF _Toc511118268 \h   HYPERLINK \l "_Toc511118269"  Resources  PAGEREF _Toc511118269 \h   HYPERLINK \l "_Toc511118270"  Spec reviews  PAGEREF _Toc511118270 \h   HYPERLINK \l "_Toc511118271"  Tools needed  PAGEREF _Toc511118271 \h   HYPERLINK \l "_Toc511118272"  Hardware needed  PAGEREF _Toc511118272 \h   HYPERLINK \l "_Toc511118273"  Test methods  PAGEREF _Toc511118273 \h   HYPERLINK \l "_Toc511118274"  Test code  PAGEREF _Toc511118274 \h   HYPERLINK \l "_Toc511118275"  Manual tests  PAGEREF _Toc511118275 \h   HYPERLINK \l "_Toc511118276"  General Music Collection  PAGEREF _Toc511118276 \h   HYPERLINK \l "_Toc511118277"  User Interface  PAGEREF _Toc511118277 \h   HYPERLINK \l "_Toc511118278"  Music Collection Menu  PAGEREF _Toc511118278 \h   HYPERLINK \l "_Toc511118279"  Music Player (Audio CD & Soundtrack)  PAGEREF _Toc511118279 \h   HYPERLINK \l "_Toc511118280"  Copy Song  PAGEREF _Toc511118280 \h   HYPERLINK \l "_Toc511118281"  Edit Soundtrack  PAGEREF _Toc511118281 \h   HYPERLINK \l "_Toc511118282"  Remove Soundtrack  PAGEREF _Toc511118282 \h   HYPERLINK \l "_Toc511118283"  Soundtrack Creation  PAGEREF _Toc511118283 \h   HYPERLINK \l "_Toc511118284"  Code reviews  PAGEREF _Toc511118284 \h   HYPERLINK \l "_Toc511118285"  Debug walkthrough  PAGEREF _Toc511118285 \h   HYPERLINK \l "_Toc511118286"  Security  PAGEREF _Toc511118286 \h   HYPERLINK \l "_Toc511118287"  Performance testing  PAGEREF _Toc511118287 \h   HYPERLINK \l "_Toc511118288"  Catastrophic failure testing  PAGEREF _Toc511118288 \h   HYPERLINK \l "_Toc511118289"  Interfaces with other components  PAGEREF _Toc511118289 \h   HYPERLINK \l "_Toc511118290"  Localization impact  PAGEREF _Toc511118290 \h   HYPERLINK \l "_Toc511118291"  Test complete criteria  PAGEREF _Toc511118291 \h   HYPERLINK \l "_Toc511118292"  Release criteria  PAGEREF _Toc511118292 \h  Owners Test   HYPERLINK "mailto:jimhelm@microsoft.com"  jimhelm@microsoft.com  HYPERLINK "mailto:bradch@microsoft.com"  bradch@microsoft.com  HYPERLINK "mailto:victorbl@microsoft.com"  victorbl@microsoft.com  HYPERLINK "mailto:karencs@microsoft.com"  karencs@microsoft.com Usability   HYPERLINK "mailto:tombro@microsoft.com"  tombro@microsoft.com International  Resources Specs  HYPERLINK "http://xbox/specs/pm/shell/"  http://xbox/specs/pm/shell/ Source Test source Test Docs Win2000 Test Docs Spec reviews You should also read the shell specs on: file://xbox/specs/pm/shell Tools needed Most, if not all, of the UI testing will be done by hand because automating the testing will be expensive and we may not have the time to do it.  The tools we will need to perform UI testing are minimal.  We will need to simulate some out of space scenarios, etc, which will require either some software to be developed that will quickly generate this scenario, or an easy way to fill up a Music Area without the need for software.  Hardware tools are covered below.  Here are some software tools we will need: A tool that would allow us to simulate low disk space situations for Xdisk.   A tool that will allow us to configure the Xdisk in various ways, such as creating many  Titles , or many sound track for a specific Title.  We will need to perform cleanup from this tool as well, so we can ensure the Xbox is setup appropriately. We will need a checked version of the shell to test performance, code coverage, static analysis, and leak testing. Hardware needed At least 1 Xbox. Least 1 Controllers, Max up to 4 per Xbox. An Xbox compatible hard disk that is larger than the standard 8GB we will be shipping, for future compatibility testing. TVs that are capable of doing 4:3Normal, 4:3Letterbox, 16:9, HDTV, in NTSC and PAL S-VIDEO and Composite formats. A/V Pack Regular Music CDs (Off the Shelf version) Regular size CD (Album size) Small size CD ( about 8  size) Odd shape CD (normally 8  in size) CD that has Audio and PC Data Music CDs (Created by the User) Burn on the CD-RW Media CD format CD that contain a Audio track of total of 99 track CD that contain a 1 track with very long music (Max track length) CD w/ Data on the track 1, audio track on after. CD w/ Data on the last track, audio on the track. CD w/ Data on the middle track, audio on the both before and after. CD that contain a 0 track no music track Such as blank audio CDs CD that contain a 2+ tracks CD that contain a Audio Data and well as the PC Data CD that contain a short audio track(s) 1 second CD audio track(s) 2 second CD audio track(s) Burn on the CD-RW Media, Copy from Regular Audio CD Burn on the CD-R Media, Copy from Regular Audio CD Other game CDs Playstation Game CD CD w/ Game data & Audio track CD w/ out Game data & Audio track Playstation 2 Game CD CD w/ Game data & Audio track CD w/ out Game data & Audio track Sega Dream Cast Game CD CD w/ Game data & Audio track CD w/ out Game data & Audio track Test methods Test code Due to the fact that we cannot simulate USB input programmatically, and we cannot get information back out of the Xbox, no test code will be written to automate the testing. The test cases, steps, and variations will be stored in TACTICS, which will allow us to easily assign test cases to a specific tester, review results, and update information as needed.  See   HYPERLINK "http://xdk"  http://xdk  for more information on our TACTICS database. Manual tests General Music Collection User Interface These tests are to ensure that the user interface of the Music Area of the Xdash can handle the types of issues that arise when dealing with Music Area.  These tests will be run on EVERY screen in the Music Area Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action X Button, Y Button WHITE Button, BLACK Button RIGHT TRIGGER Button, LEFT TRIGGER Button DPAD Left & Right Button RIGHT THUMB-STICK Button, LEFT THUMB-STICK Button (Push the buttion) RIGHT THUMB-STICK (Up, Down, Left and Right ) Left Thumb-Stick Moving Left & Right Verify VALID controls/buttons perform appropriate action A Button, Start Button B Button, Stop Button Dpad (Up and Down) Left Thumb (Up and Down) Verify a combination of the INVALID controls / buttons perform no action Verify that Multiple Control press combinations do not adversely affect the XDash, such as: A & B Start & Back A & Start B & Start B & Back A & Back And more in the test cases. Verify the FOCUS is always set to the proper menu item 0 Soundtrack Title with No Audio CD 0 Soundtrack Title with Audio CD  1 Soundtrack Title with No Audio CD 1 Soundtrack Title with Audio CD 8+ Soundtrack Titles with No Audio CD 8+ Soundtrack Titles with Audio CD MAX (100) Soundtrack Titles with No Audio CD MAX (100) Soundtrack Titles with Audio CD Verify that scrolling UP and DOWN the menu items performs as expected Verify that All the UI is properly displayed in the screen. (Such as word is been cut off from the edge of the screen, images is correctly displayed on the screen.) Verify that UI and text (for all supported Xbox languages) when selecting / highlighting each menu and ensure that correctness of the localization. Music Collection Menu These tests are to ensure that the  Music Collection  Area in the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not verify that the APIs the Titles will use work in terms of creating content that the Music Collection will display.   (Such as metadata files, etc Types of tests that will be performed are: Verify that user is navigated to the Music Collection screen in various status No Audio CD / No Soundtrack Title Meta data panel should be displaying appropriate message Item number should indicate a  0 Item Only the   button should function Audio CD / No Soundtrack Title Audio CD element should appear on the screen Appropriate meta data is display in the panel Start  and   button should function Other then  Start  and navigation button should not do function Audio CD / 1 Soundtrack Title Audio CD & 1 Soundtrack Title element should appear on the screen Item number should indicate a  # Items Audio CD / 2+ Soundtrack Titles Audio CD & 2+ Soundtrack Titles elements should appear on the screen Item number should indicate a  # Items Audio CD / Max (100) Soundtrack Titles Audio CD & Max (100) Soundtrack Titles elements should appear on the screen Item number should indicate a  # Items No Audio CD / 1 Soundtrack Title Soundtrack Title element should appear on the screen Item number should indicate a  # Items No Audio CD / 2+ Soundtrack Titles # of Soundtrack Titles element should appear on the screen Item number should indicate a  # Items No Audio CD / Max (100) Soundtrack Titles # of Soundtrack Titles element should appear on the screen Item number should indicate a  # Items Verify the focus is always set to the proper menu item: Initial Entry from the root (The very top option has the focus) Re-Entry after pressing   button from a music sub-area, such as music player or soundtrack (selected item has the focus) Re-Entry from the Main Menu, after highlighting a non-default choice in the Music Collection menu (The very top option has the focus) Verify that the order of soundtrack on this menu is in ALPHANUMICAL order Verify a  Music Collection  screen status while in the various states: Insert / Remove Audio CD Nav to Collection (No CD, then Insert CD) Nav to Collection (CD highlight, then remove CD) Nav to Collection (Soundtrack highlight, then remove CD) Nav to Collection (Swap to other Audio CD) Nav to Collection (Swap to CD w/ Data Mix 1st track) Nav to Collection (Swap to CD w/ Data Mix Middle track) Nav to Collection (Swap to CD w/ Data Mix Last track) Nav to Collection (Swap to Xbox Game CD) Nav to Collection (Swap to Movie DVD) Nav to Collection (Swap to PS1 CD w/ Audio track) Nav to Collection (Swap to PS1 CD w/ Data only) Nav to Collection (Swap to PS2 CD w/ Audio track) Nav to Collection (Swap to PS2 CD w/ Data only) Nav to Collection (Swap to DC CD w/ Audio track) Nav to Collection (Swap to DC CD w/ Data only) Nav to Collection (Swap to Invalid CD) Soundtrack 0 Soundtrack (Saved / Created) 1 Soundtrack (Saved / Created / Removed) 2+ Soundtrack (Saved / Created / Removed) MAX (100) Soundtrack (Saved / Created / Removed) Verify a Meta Data Panel screen up on the each selected soundtrack and audio CD Check a total playing time in minutes and seconds (Audio CD & Soundtracks) Check a total tracks in the highlighted element (Audio CD  & Soundtracks) 0 track 1 track 2+ tracks Max (500) tracks Check title for highlighted element (Audio CD & Soundtrack) Audio CD is  Audio CD Soundtrack No title (Default title  Soundtrack #  should be used) Title name should be match to the highlighted soundtrack element on the list Title name should not exceed the length of the data panel screen Verify that Soundtrack Titles with INVALID configurations still display correctly in the XDash Verify that the Music Collection Screen can handle Soundtrack Titles of various sizes: 0 Character 1 Character 2+ Characters MAX Chars (at least 31 Characters, is there a maximum) Verify that item number is correctly updated corresponded to the total number of the elements in the Music Collection screen Verify selecting  Music  from the Root menu after altering the Xbox configuration in various ways: Saved / Created 2+ soundtrack, and deleting all but 1 soundtrack. Saved / Created 2+ soundtrack, and deleting ALL soundtrack. Verify that 3D Model in the Orb is been display correctly according to the various situation No Audio CD & Soundtrack listed Orb should be empty Audio CD is selected 3D model of the Audio CD should appear on the orb   Soundtrack is selected 3D model of the Stack of Audio CD should appear on the orb Music Option (Audio CD & Soundtrack) These tests are to ensure that  Music Option area with in the Music Collection of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not verify that the APIs the Titles will use work in terms of creating content that the Music Player will display.   (Such as metadata files, etc Types of tests that will be performed are: Verify a FOCUS setting in the Music Option Navigate from Collection screen 1st time back to collection and navigate back in move the focus other then the default move the focus to bottom Navigate back from extensible menu Verify that focus is stay on the extensible menu that user is came back from. Verify the 3D Model in the Orb in different state Audio CD Verify that Orb has a 3D Model of Single Audio CD Soundtrack Verify that Orb has a 3D Model of the Stack of the CD Verify that proper text is displayed on the Meta Data Panel display up on selection Audio CD  is highlighted   is highlighted Soundtrack  is highlighted  is highlighted  is highlighted Remove  is highlighted Verify navigation in the music option menu (Audio CD & Soundtrack) Moving Down Dpad & Left-thumb stick Verify that if focus is on the bottom, focus should not wrap to the top Moving Up Dpad & Left-thumb stick Verify that if focus is on the top, focus should not wrap to the bottom Verify an various inserts / removal of the media CD in option menu Audio CD  CD in the tray / remove a CD CD in the tray / replace to different CD CD in the tray / replace w/ mixed Audio CD (Data track is on the 1st) CD in the tray / replace w/ mixed Audio CD (Data track is on the middle) CD in the tray / replace w/ mixed Audio CD (Data track is on the end track) CD in the tray / replace w/ Xbox Game CD CD in the tray / replace w/ Movie DVD CD in the tray / replace w/ PS1 CD w/ Audio track CD in the tray / replace w/ PS1 CD w/ out Audio track CD in the tray / replace w/ PS2 CD w/ Audio track CD in the tray / replace w/ PS2 CD w/ out Audio track CD in the tray / replace w/ DC CD w/ Audio track CD in the tray / replace w/ DC CD w/ out Audio track CD in the tray / replace w/ invalid Audio CD Soundtrack No CD / Insert an Audio CD No CD / Insert a mixed Audio CD (Data track is @ 1st) No CD / Insert a mixed Audio CD (Data track is @ middle) No CD / Insert a mixed Audio CD (Data track is @ last) No CD / Insert a Xbox Game CD No CD / Insert a Move DVD No CD / Insert a PS1 CD w/ Audio track No CD / Insert a PS1 CD w/ out Audio track No CD / Insert a PS2 CD w/ Audio track No CD / Insert a PS2 CD w/ out Audio track No CD / Insert a DC CD w/ Audio track No CD / Insert a DC CD w/ out Audio track Verify that Soundtrack title is properly displayed 0 character 1 character Max (32) character w/ out space in between Max (32) character w/ space in between Verify a  Delete  function in Edit menu (Soundtrack) Verify that only that selected track(s) in selected soundtrack is been deleted Verify that soundtrack title is stayed even that the entire track is deleted. Verify a   function in the Edit menu (Soundtrack) Verify the track name w/ 0 character Verify the track name w/ 1 character Verify the track name w/ Max (32) characters Verify the track name w/ Max (32) character w/ space Verify the track name w/ Max (32) character w/ special char Verify  Move UP  function in the Edit menu (Soundtrack) Move a top track to 1st  Move a middle track to 1st Move a last track to 1st Verify  Move Down function in the Edit menu (Soundtrack) Move a top track to last Move a middle track to last Move a last track to last Music Player (Audio CD & Soundtrack) These tests are to ensure that  Music Player  area with in the Music Collection of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not verify that the APIs the Titles will use work in terms of creating content that the Music Player will display.   (Such as metadata files, etc Types of tests that will be performed are: Verify that user is directly navigated to Music Player and start playing a tracks ONLY if user has a Audio CD in Xbox before turned on Verify that following information is displaying correctly in Music Player Screen: Name of the audio element as its appears in the list Audio CD titles (If its their) Soundtrack Title No unique title name (Default title  Soundtrack # 1 character title name 2+ characters title name Max (31) characters title name Mixed w/ special characters List of the track(s) according to the total number of the tracks in the both audio CD and soundtracks Audio CD 0 track 1 track 2+ tracks Max (99) tracks Soundtracks (using a default track name, verify that tracks are in NUMICAL order) 0 track 1 track  2+ tracks Max (500) tracks Soundtracks (tracks are edited by a user, verify that tracks are not in ALPHANUMICAL order, it is user defined order) 0 track 1 track 2+ tracks Max (500) tracks Playing time for each track(s) on both audio CD and soundtrack displayed in minutes and second 1 second track time 10 second track time 60 second track time (it should be a 1 minutes) 70 second track time (it should be a 1 minutes and 10 second) 10 minutes track time Current playback status and time line of the current track Orb that contains a spectrum analyzer (Check with Victor for what would be the final display of the analyzer is) Verify that scrolling UP and DOWN tracks in both Audio CD & Soundtrack. (the total number of tracks can be displayed at one time is 8) Verify that for each Soundtracks Max and Min tracks and navigations Audio CD / Soundtrack that contain 0 track Audio CD / Soundtrack that contain 1 track Audio CD / Soundtrack that contain 2+ tracks Audio CD / Soundtrack that contain 8+ tracks Audio CD that contain Max (99) tracks Soundtrack that contain Max (500) track Soundtrack that contain Max (500) + 1 track (it prompt an error message to the user) Verify that button function on the CONTROLLER(s) in the Music Player screen: (on both Audio CD & Soundtrack) White button   Play / Pause toggle Verify that Play graphic is displaying on screen. Verify that Pause graphic is displaying on the screen and flashing. Black button   Stop Verify that nothing happen if user press    when player is not playing any music track(s) Verify that player stop playing music at any point. Left trigger   Previous Track Before playing a track Moving to previous track Note: Should highlight previous track in line Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off While playing a selected track Move to begging of the currently playing track (over 1 second) Move to previous track (under 1 second) Note: Should highlight previous track in line and start playing a track from begging Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off Verify that if user reached to the top of the listed tracks, should wrap around to the bottom the list and continue going up the lists ONLY if REPEAT is turned on Right trigger   Next Track Before playing a track Moving to next track Note: Should highlight previous track in line Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off While playing a selected track Note: Should highlight next track in line and start playing a track from begging Moving to next track (over 1 second) Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off Moving to next track (under 1 second) Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off Verify that if user reached to the bottom of the listed tracks, should wrap around to the top of the list and continue going down the lists ONLY if REPEAT is turned on Left Thumb Down / DPad Up   Previous Track Before / while playing a selected track Move to previous track Note: Should highlight previous track in line and if is playing a track then should start playing a track from begging Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off Verify that if user reached to the top of the listed tracks, it should not wrap around to the bottom of the list. Left Thumb Up  / DPad Down  Next Track Before  / while playing a selected track Move to next track Note: Should highlight next track in line and if is playing a track then should start playing a track from begging Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off Verify that if user reached to the bottom the listed tracks, it should not wrap around to the top of the list. Verify a Music Player s  GUI FUNCTION on the Player s screen (on both Audio CD & Soundtrack): Skip  Before playing a track Moving to previous track Note: Should highlight previous track in line Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off While playing a selected track Move to begging of the currently playing track (over 1 second) Move to previous track (under 1 second) Note: Should highlight previous track in line should start playing a track from begging Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off Play / Pause Verify that Play graphic is displaying on screen. Verify that Pause graphic is displaying on the screen and flashing. Verify that nothing happen if user press    when player is not playing any music track(s) Verify that player stop playing music at any point. Skip + Before playing a track Moving and highlight a next track Note: Should highlight next track in line Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off While playing a selected track Note: Should highlight next track in line should start playing a track from begging Move to next track (over 1 second) Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off Move to next track (under 1 second)  Repeat on / random on Repeat on / random off Repeat off / random on Repeat off / random off Random Verify that track list get properly randomized in various state Randomize while playing a tracks Randomize while stop Randomize while pause Verify that track list get  un-randomized  when the random button is pressed again Verify that up on randomized the highlighted track should be stay highlighted Verify that skip   and skip + navigate properly in randomized track list Repeat Verify that up on selection that  Repeat  button is toggled and word  Repeat  should be displayed on the screen in various state While playing a track While stop playing a track While pause playing a track Verify that up on selection, that player wills continually playing a listed track from top to bottom until user stops Verify that player is continually playing a track even that track list is randomized Verify that if users LEAVE a player, repeat function is deactivated automatically Verify that REPEAT will not deactivate until user LEAVE the player screen or user DEACTIVATE manually Note: On the spec sheet have mentioned DVD dongle & remote.  Currently there is no dongle or the remote to run a test, this is a reminder that when its available we need to run a test  Copy Song These tests are to ensure that  Copy Song  in both Audio CD and Soundtrack in the Music Collection of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not verify that the APIs the Titles will use work in terms of creating content that the Music Player will display.   (Such as metadata files, etc Types of tests that will be performed are: Verify that graphical control in the Copy Song: Verify that all the UI is properly display to the screen For Audio CD Verify that title should state  Audio CD Verify that all the track(s) in track list is using a default track name (such as track #) Verify that track time is displayed properly in track list Verify that if user  Eject  a CD from a tray user should be navigate back to the music collection menu Verify that if the user is on the  Choose Soundtrack  screen, and they eject the Audio CD, they are navigated off of that screen Verify that if the user is on the  Choose Soundtrack  screen, and they have the Virtual Keyboard displayed, and they eject the Audio CD, they are navigated off of that screen For Soundtrack Verify that title for the soundtrack is properly displayed on the title bar in copy song interface Verify that if each track is named there are correctly displayed and sorted according to the user preference Verify that track time is displayed properly in track list Play / Pause Verify that Play graphic is displaying on screen. Verify that Pause graphic is displaying on the screen and flashing Verify that nothing happen if user press    when player is not playing any music track(s) Verify that player stop playing music at any point Select Verify that only selects the tracks that is currently in focus Verify that   appears on the left side of the selected track Verify that if track is already selected, the track is deselected and   should disappear Verify that all the tracks are selected already user can deselect individual tracks Select All Verify that all the tracks are selected and   appears on the left side of the all the tracks Verify that up on selecting an all the tracks, tracks that are already selected does not get deselected Verify that if all the track is selected already user can deselect all the track Copy Songs Verify that only the selected track(s) is been copied from the list. 0 track are selected to copy 1 track are selected to copy New soundtrack tiles Append to the existing soundtrack w/ 499 tracks Append to the existing soundtrack w/ Max (500) tracks 2+ tracks are selected to copy New soundtrack tiles Append to the existing soundtrack w/ 498 tracks Append to the existing soundtrack w/ 499 tracks Max track (499 or 500) tracks are selected to copy New soundtrack tiles Append to the existing soundtrack w/ 0 track Append to the existing soundtrack w/ 1 track Verify that destination soundtrack track list do not exceed a Max number of track. (500) tracks Verify that graphical control in the Music Player (on Soundtrack): Remove Soundtrack Verify that only the selected soundtrack is been removed from the list. 0 track in the selected soundtrack 1 track in the selected soundtrack 2+ tracks in the selected soundtrack Max track (99 or 100) tracks in the selected soundtrack  Edit Soundtrack These tests are to ensure that the  Soundtrack  area within the Music Collection of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not verify that the APIs the Titles will use work in terms of creating content that the Soundtrack will display.  (Such as metadata files, etc Types of tests that will be performed are: Verify that only the selected track is been edited from the list. Verify that title name & track name should not exceed a limit (31 characters) Title name / track name w/ 0 character (should be change to default name) Title name / track name w/ 1 character Title name / track name w/ 2+ character Title name / track name w/ Max character Title name / track name w/ Max +1 character Verify a function of each button Play / Pause Verify that Play graphic is displaying on screen. Verify that Pause graphic is displaying on the screen and flashing Verify that nothing happen if user press    when player is not playing any music track(s) Verify that player stop playing music at any point For Move Up Select a track in the middle and move up to the top Select a track in the bottom and move up to the middle  Select a track in the bottom and move up For Move Down Select a track in the top and move down to the middle Select a track in the top and move down to the bottom Select a track in the middle and move down to the bottom Remove Track (Songs) Verify that only the selected track is removed from the soundtrack Removing a 1 track Removing a multiple tracks Removing a all tracks Verify that if user delete all the tracks from the soundtrack that soundtrack name should be stay in the list until user delete it using a  Remove Soundtrack Remove Soundtrack  These tests are to ensure that the  Remove Soundtrack  area within the Music Collection of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not verify that the APIs the Titles will use work in terms of creating content that the Soundtrack will display.  (Such as metadata files, etc Types of tests that will be performed are: Verify that only the selected soundtrack is removed from the list. Soundtrack w/ 0 track Soundtrack w/ 1 track Soundtrack w/ 2+ tracks Soundtrack w/ Max (500) tracks Verify that after deletion is complete for selected soundtrack user is automatically navigated to music collection screen Soundtrack Creation This test are to ensure that if user selects  New Soundtrack  from the "Soundtrack" in Music screen is functioning as expected. Verify that user should only be able to select a  New Soundtrack  up on creating a soundtrack, if user has not created any soundtrack before on Xbox. Verify after selecting  New Soundtrack  the user can perform these actions correctly:  Presented with an area for text entry for soundtrack name. Verify that user is presented with a virtual keyboard with correct languages English Japanese German French Spanish Italian Verify a soundtrack naming property Soundtrack titles and Track name should not exceed 31 characters. 0 character 1 character 2+ characters Max characters Max + 1 characters Mixed with numbers + symbols Crate a soundtrack and track name for following language. Using information above. English Japanese German French Spanish Italian Verify that soundtrack titles are properly displayed in all the language once it has named and even if user changes the Xdash language setting to others.  Verify that if user did not name a soundtrack or track name it will take default name. (This is  Soundtrack 1 Track1 Verify that after soundtrack name been entered user is navigated to the audio track selection screen. Verify that user has ability to choose a single tack, or multiple tracks from the audio CD or all tracks Verify that up on transferring an audio CD to soundtrack progress indicator should correspond to the current progress of the data transfer.  Verify that ripped track(s) from the redbook audio CD are encoded into correct WMA audio file. Verify that failure cases During a copy process from Audio CD Open a tray Turn off the Xbox Pull the power plug Press   button During a copy process from Soundtrack Turn off the Xbox Pull the power plug Press   Button Code reviews For changed code, after a check-in, and on all code at least 1 time before we ship.  If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough Debugger must be hooked up to the text machine during testing.  If the test engineer does not know how to debug, s/he will need to notify our SDE/Ts or our development owner to debug. Security Security testing specifically on the shell will be minimal.  Overall security testing will be covered in the Security test plan. Performance testing Performance testing will be done on the following: Switch back and forth between Main Dash to the Game Collection Menu. Switch back and forth between of Game collection and rest of the menu that are related to the game area. Scrolling up and down on the list of game collection titles and saved game in Xdisk and memory unit(s). Catastrophic failure testing Verify that when catastrophic failure happens (power cord pulled, box dropped on the floor, lightening strike, as long as the hardware is still operable, upon reboot, the Default Title is still functional.  If data is lost or the hard disk becomes corrupted, verify that the Default Title can be recovered from the recovery disc. Interfaces with other components Titles must be able to boot the Xbox in a mode that ignores what is in the tray, and places the user in to the Game Area.  Localization impact All test cases will be executed on every language we support to verify everything is localized correctly and there is no clipping.  When text can be entered, always use extended characters and Japanese characters.  Usage testing will cover English alphabets. Test complete criteria All of the above scenarios must be covered for the Default Title to be declared  test complete Release criteria All tests must pass at 100%.  The only exceptions will be bugs that the War Team declares as postponed, won t fix, or by design. PAGE   PAGE   Microsoft Confidential {n{aTaTana gd82h gd^QK gd^QK tj`t`t`tV`V gd^QK gd_ve gd_ve gd_ve gd_ve vlvlbTblbJ gdsS& gdsS& gdsS& gdsS& gdsS& j`V`j gdl . gdl . gdl . gdl . gdl . gdl . gdl . gdl . gdl . tjtjtjtjZ tj`V`VL wmcmc gd0\G gd0\G gd0\G gd0\G seWPF gd2Of {m_{Q{Q{ gdojB ~tgtZtZtPZ gdG)A gdG)A gdG)A gdG)A gdG)A gdG)A gdG)A gdG)A gdG)A gdG)A gdG)A gdG)A gdG)A gdG)A gdG)A gdG)A
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\xbox default title - memory management test plan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Xbox Default Title Test Plan Title _PID_HLINKS _AdHocReviewCycleID _EmailSubject _AuthorEmail _AuthorEmailDisplayName Memory Management Test Plan jimhelm@xbox.com Jim HelmXbox Default Title Test Plan Jim Helm Normal.dot jimhelm Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags PlaceName urn:schemas-microsoft-com:office:smarttags PlaceType urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags place Minute Month d?j_p Q#9s  *C0w$Rbjbjk Xbox Default Title   Memory Management Test Plan Author: James Helm (jimhelm) Last changed: 85/255/22001  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc514116165"  Owners  PAGEREF _Toc514116165 \h   HYPERLINK \l "_Toc514116166"  Resources  PAGEREF _Toc514116166 \h   HYPERLINK \l "_Toc514116167"  Test scenarios  PAGEREF _Toc514116167 \h   HYPERLINK \l "_Toc514116168"  Spec reviews  PAGEREF _Toc514116168 \h   HYPERLINK \l "_Toc514116169"  Tools needed  PAGEREF _Toc514116169 \h   HYPERLINK \l "_Toc514116170"  Hardware needed  PAGEREF _Toc514116170 \h   HYPERLINK \l "_Toc514116171"  Test methods  PAGEREF _Toc514116171 \h   HYPERLINK \l "_Toc514116172"  Test code  PAGEREF _Toc514116172 \h   HYPERLINK \l "_Toc514116173"  Manual tests  PAGEREF _Toc514116173 \h   HYPERLINK \l "_Toc514116174"  User Interface  PAGEREF _Toc514116174 \h   HYPERLINK \l "_Toc514116175"  Collection  PAGEREF _Toc514116175 \h   HYPERLINK \l "_Toc514116176"  Contents  PAGEREF _Toc514116176 \h   HYPERLINK \l "_Toc514116177"  Copy Destination  PAGEREF _Toc514116177 \h   HYPERLINK \l "_Toc514116178"  File Options  PAGEREF _Toc514116178 \h   HYPERLINK \l "_Toc514116179"  Functionality  PAGEREF _Toc514116179 \h   HYPERLINK \l "_Toc514116180"  Copy Destination Screen  PAGEREF _Toc514116180 \h   HYPERLINK \l "_Toc514116181"  Code reviews  PAGEREF _Toc514116181 \h   HYPERLINK \l "_Toc514116182"  Debug walkthrough  PAGEREF _Toc514116182 \h   HYPERLINK \l "_Toc514116183"  Security  PAGEREF _Toc514116183 \h   HYPERLINK \l "_Toc514116184"  Performance testing  PAGEREF _Toc514116184 \h   HYPERLINK \l "_Toc514116185"  Catastrophic failure testing  PAGEREF _Toc514116185 \h   HYPERLINK \l "_Toc514116186"  Interfaces with other components  PAGEREF _Toc514116186 \h   HYPERLINK \l "_Toc514116187"  Localization impact  PAGEREF _Toc514116187 \h   HYPERLINK \l "_Toc514116188"  Test complete criteria  PAGEREF _Toc514116188 \h   HYPERLINK \l "_Toc514116189"  Release criteria  PAGEREF _Toc514116189 \h  Owners Test   HYPERLINK "mailto:lithangw@microsoft.com"  mailto:jimhelm@xbox.com HYPERLINK "mailto:chrispi@microsoft.com" mailto:bradch@microsoft.com HYPERLINK "mailto:marcw@microsoft.com" mailto:victorbl@microsoft.com HYPERLINK "mailto:karencs@microsoft.com" mailto:karencs@microsoft.com Usability  HYPERLINK "mailto:tombro@microsoft.com" mailto:tombro@microsoft.com International  Resources Specs  HYPERLINK "http://xbox/specs/pm/shell/"  http://xbox/specs/pm/shell/ Source Test source Test Docs Win2000 Test Docs Test scenarios This test plan will cover the following scenarios: User wishes to view information about his saved games from the Xdisk, or the Memory Units that s/he owns. User wishes to delete saved games that s/he is no longer interested in. User wishes to delete all saved games out of a specific Memory Area. User wishes to delete all saved games pertaining to a specific title. User goes to play a game, and the game informs the user that they do not have enough space to play.  The user is then sent to the Default Title to clear out some space. During various operations the user is performing with their Memory Areas, they decide to quit (power down). During various operations the user is performing with their Memory Areas, the power goes out.  (Unplug the box) Spec reviews You should also read the shell specs on: file://xbox/specs/pm/shell Tools needed Most, if not all, of the UI testing will be done by hand because automating the testing will be expensive and we may not have the time to do it.  The tools we will need to perform UI testing are minimal.  We will need to simulate some out of space scenarios, etc, which will require either some software to be developed that will quickly generate this scenario, or an easy way to fill up a Memory Area without the need for software.  Hardware tools are covered below.  Here are some software tools we will need: An Xbox Title that will reboot in to the Xdash, as if the user needed to perform storage clean up.  (Specifying various size requirements) A tool that will allow me to compare two files to ensure they are identical.  (Such as windiff).  I will need to be able to compare that data that will live on an MU.  If it s not possible to copy this data to the PC for comparison, a   program will have to be created that works on the Xbox. A tool that would allow us to simulate low disk space situations for both MU s and Xdisk.  This tool may have to be an  Xbox Title  in order to access MU We will need a checked version of the shell to test performance, code coverage, static analysis, and leak testing. Hardware needed At least 1 Xbox. Controllers, up to 4 per Xbox. Memory Units (standard size), at least 8 per Xbox. Memory Units (larger sizes), for future compatibility testing. An Xbox compatible hard disk that is larger than the standard 8MGB we will be shipping, for future compatibility testing. TVs that are capable of doing 4:3Normal, 4:3Letterbox, 16:9, HDTV, in NTSC and PAL formats. Test methods Test code Tools will be developed to generate  Saved Games  on the Xbox, as well as to simulate  Out of disk space  scenarios on the Xbox. Manual tests User Interface These tests are to ensure that the user interface of the Memory Management area of the Xdash can handle the types of issues that arise when dealing with Memory Management.  These tests will be run on EVERY screen in the Memory Area. Types of tests that will NOT be performed are: Testing any title specific UI that needs to be presented to the end user when a failure, or title boot scenario occurs (Out of space during a save, Memory Management Needed, etc). Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify that Multiple Control press combinations do not adversely affect the XDash, such as: A & B Start & Back A & Start B & Start B & Back A & Back (may need more cases here) Verify the FOCUS is always set to the proper menu item Verify that scrolling UP and DOWN the menu items performs as expected Verify that All the UI is properly displayed in the screen. (Such as word is been cut off from the edge of the screen, images is correctly displayed on the screen.) Verify that UI and text (for all supported Xbox languages) when selecting / highlighting each menu and ensure that correctness of the localization.  Each message the Memory Management area can display will be called out through the various UI and functionality test cases.  ALL text must be displayed. NAV: Verify the Navigation on all Memory Area screens and dialogs is consistent and concise. Collection These tests are to ensure that the  Collection  screen within the Memory area of the XDash is functioning as expected. The types of tests that will be performed are:  4 Controllers plugged in, in various combinations, with various combinations of MU s plugged in to them (i.e., empty, only 1 MU inserted, 2 MU s inserted, etc) Verify navigation with various combinations of Controllers and MU s plugged in: No MUs Plugged in (Xdisk only)  4 controllers plugged in 1 MU plugged in, each memory slot, each controller Combinations of MUs plugged in to various controllers in various ports 8 MUs plugged in Verify the Space Indicators display the proper amount of space highlighting each MU Memory Area and the XDisk that is: Empty (Not possible for XDisk) 1 block used (Not possible for XDisk)  of the blocks used  1 blocks used MAX blocks used If MU s have a nickname associated with them, verify that it is displayed properly with nicknames that are: Empty 1 char MAX chars (32) MAX + 1 chars (33) Invalid chars (if possible) will also be used. Verify that if an MU DOES NOT have a nickname associated with it, the  Default  name is used: MU 1A MU 1B MU 2A MU 2B MU 3A MU 3B MU 4A MU 4B HP: Verify if you highlight an MU and then remove the MU the UI is updated properly and the highlighter is placed on the correct object. HP: Verify if you highlight an MU and then remove the Controller the MU is plugged in to the UI is updated properly and the highlighter is placed on the correct object. HP: Verify the UI is updated when an MU is Hot-Plugged, or Un-Plugged while in the UI. HP: Verify the UI is updated when a controller is Hot-Plugged, or Un-Plugged, while in the UI. HP: Verify the UI is updated when a controller or MU, or both, are hot-plugged at the same time.  (Inserted, or removed) Verifying inserting CORRUPTED and UNFORMATTED MUs works as expected 1 UNFORMATTED MU 8 (MAX) UNFORMATTED MUs 1 BAD MU 8 (MAX) BAD MUs 4 UNFORMATED MUs / 4 BAD MUs Verify inserting MUs while the CORRUPT (unfixable) MU dialog is on the screen Insert 1 NORMAL MU Insert 1 BAD MU Insert 1 UNFORMATTED MU Insert 2+ NORMAL MUs Insert 2+ UNFORMATTED MUs Insert 2+ BAD MUs Verfy inserting MUs while the UNFORMATTED (fixable) MU dialog is on the screen Insert 1 NORMAL MU Insert 1 BAD MU Insert 1 UNFORMATTED MU Insert 2+ NORMAL MUs Insert 2+ UNFORMATTED MUs Insert 2+ BAD MUs Verify Removing and Reinserting the SAME MU works as expected: UNFORMATTED MU BAD MU Verify inserting different Media while inserting CORRUPT / UNFORMATTED MUs works as expected 2 UNFORMATTED MUs + Audio CD 2 BAD MUs + Audio CD 2 UNFORMATTED MUs + Invalid Media 2 BAD MUs + Invalid Media 2 UNFORMATTED MUs + Xbox Game DVD 2 BAD MUs + Xbox Game DVD 2 UNFORMATTED MUs + DVD Movie 2 BAD MUs + DVD Movie Contents These tests are to ensure that the  Contents  screen within the Memory area of the XDash is functioning as expected. The types of tests that will be performed are: Verify the Screen Title can handle an MU with name variations: No Nickname (Default Value for ALL MU 1 Char Nickname MAX Char (32) Nickname Character based Nicknames % character combos Invalid character combos Verify navigating to this menu with the Memory Area if various states: Empty (NO Saved Game Information) 1 Game Title with 0 Saved Games 1 Game Title with 1 Saved Game MAX Game Titles (4096) with 1 Saved Game MAX Game Titles (4096) with MAX Saved Games (500) Verify that Game Titles are displayed in ALPHABETICAL order Verify that Saved Games for a specific title are displayed in DATE/TIME order (newest to oldest) for each of the supported languages English Japanese German French Spanish Italian Verify that the Memory Area free space, for both an MU and the XDisk, is displayed properly with variations in the amount of data on a Memory Area: 0 blocks used (Not possible for XDisk) 1 block used (Not possible for XDisk)  blocks used MAX blocks used Verify that a Saved Game and the META-DATA panel are displayed properly with these Saved Game SIZE variations: Size: 1 block Size: MAX blocks Verify that if a Saved Game does not have an image, but does have the  fallback  image in the higher directory, the fallback image is used Saved Game on an MU SAMEIMAGE.XBX Missing from Saved Game Dir SAVEIMAGE.XBX Present in Saved Game Dir Saved Game on the Xdisk SAMEIMAGE.XBX Missing from Saved Game Dir SAVEIMAGE.XBX Present in Saved Game Dir Verify that a saved game and the Meta Image Orb are displayed properly with these META data variations: SAVEIMAGE.XBX - Normal (64x64) SAVEIMAGE.XBX   Missing SAVEIMAGE.XBX   Empty SAVEIMAGE.XBX   1 byte SAVEIMAGE.XBX - Small (10x10) SAVEIMAGE.XBX   Large (128x128) SAVEIMAGE.XBX   Large (256x256) SAVEIMAGE.XBX   Large (1024x1024) SAVEIMAGE.XBX   Corrupt (Bogus Information) Verify that the META-DATA panel displays correctly with various META data variations for Saved Games.  You should highlight the Saved Game with the following confiration: SAVEMETA.XBX   Normal SAVEMETA.XBX   Missing SAVEMETA.XBX - Empty SAVEMETA.XBX   SaveName 0 char (SaveName=<blank>) SAVEMETA.XBX   SaveName 1 char SAVEMETA.XBX   SaveName MAX chars (63) SAVEMETA.XBX   SaveName MAX + 1 chars (64) Game Title the game belongs to has 0 char title Game Title the game belongs to has 1 char title Game Title the game belongs to has MAX char title (63 chars) Game Title the game belongs to has MAX + 1 char title (64 chars) Date/Time is of max size (12:31:2000 12:00:00PM) DATE/TIME Formatting Tests (multiple languages) Verify navigation on the Menu with Game Titles in various configurations.  The menu should be traversed to that you go all the way to the left of the menu, all the way to right, all the way to the top, and all the way to the bottom.  Verify that proper  up/down  arrows are displayed if there is more data off the screen.  Verify these configurations: 1, 2, and 10 Game Titles with these configs: 1 Saved Game 45 Saved Games (MAX games for 1 row) 56 Saved Games (MAX + 1 games for 1 row) 810 Saved Games (MAX games for 2 rows) 119 Saved Games (MAX  + 1 games for 2 rows) 1215 Saved Games (MAX games for 3 rows) 1613 Saved Games (MAX  + 1 games for 3 rows) 2016 Saved Games (MAX games for 4 rows) 1721 Saved Games (MAX  + 1 games for 4 rows) Verify Navigation up and down the Contents screen with Saved Games that have VALID Images (MAX Games, 20 Saves each) Verify Navigation up and down the Contents screen with Saved Games that have INVALID (missing) Images (MAX Games, 20 Saves each) HP: Navigate to a Memory Unit Memory Area and remove the controller the MU is plugged in to. HP: Navigate to a Memory Unit Memory Area and remove the MU.  Copy Destination These tests are to ensure that the  Copy Destination  screen within the Memory area of the XDash is functioning as expected. The types of tests that will be performed are: Hot-swap Duke s and MU s in and out of this screen and verify that the Meta-data panel, and Destination MU list are updated as expected (Space indicators, Meta-data panel, etc) Trying to select a Memory Area (Press A) when no destination Memory Area s exist Verify navigating up and down the menu works with these configurations: No Memory Areas 1 Memory Area  1 (7) Memory Areas MAX (8) Memory Areas Verify FOCUS doesn t change when inserting Memory Areas: Above the currently selected Memory Area Below the currently selected Memory Area Verify FOCUS is maintained between screens Highlight the bottom MU, Navigate away from the screen, swap the MU, Navigate back.  Verify the FOCUS is  reset  to the TOP Memory Area Highlight a Memory Area, Navigate away from the screen, Navigate back to the screen.  Verify the FOCUS remains on the same Memory Area TOP Memory Area MIDDLE Memory Area BOTTOM Memory Area Verify highlighting an MU as the destination, and then removing it works as expected: Only Destination available Only 1 MU Destination above Only 1 MU Destination below Only 1 Xbox Hard Destination above Verify on Saved Game overwrite removing the destination MU works as expected Verify on Saved Game overwrite removing the source MU works as expected File Options These tests are to ensure that the  File Options  screen within the Memory area of the XDash is functioning as expected. User Interface These tests are to ensure that the file options screen contains the proper menu elements for each of the selected file types The types of tests that will be performed are: Verify that the correct menu options appear for each of the following selections: Xdisk Game Title BROKEN Game Title Saved Game BROKEN Saved Game NO COPY Saved Game READ ONLY Saved Game Single Soundtrack Soundtrack Collection Functionality These tests are to ensure that the operations the Xdash performs while in the Memory Management Area are successful, and are working as intended.   Types of tests that will NOT be performed are: Testing the File System API s related to Memory Location copies to verify that they successfully copy the files with accuracy. Testing the File System API s to verify security in regards to which titles are, and are not allowed to use them. Types of tests that will be performed are: Entry Points: Verify a title can boot the Xbox sending the user to the Memory Management Area, and specifying how much space they need to be free, sending values such as: 0, 1, MAX   1, MAX. (CD still in drive) Verify a title can boot the Xbox sending the user to the Memory Management Area, and specifying how much space they need to be free. (User removes CD mid-boot)  Verify a title can boot the Xbox sending the user to the Memory Management Area, and specifying how much space they need to be free. (User removes CD after boot) Copying: Copy a file that is too large to each Memory Area type: MU and XDisk Copy files from an MU to the Hard Drive, and verify the save was successful, using Games of size (Requires file level verification): 0 blocks 1 block MAX_SIZE   1 blocks MAX_SIZE blocks MAX_SIZE + 1 blocks Copy files from the Hard Drive to an MU, and verify the save was successful, using files of size (Requires file level verification): 0 blocks 1 block MAX_SIZE   1 blocks MAX_SIZE blocks MAX_SIZE + 1 blocks Copy files from each Memory Area to every other Memory Area, then navigating to the destination area and verify the proper information is displayed, using files of size: 0 blocks 1 block MAX_SIZE   1 blocks  MAX_SIZE blocks MAX_SIZE + 1 blocks Copy a Saved Game From a Game Title to another Memory Area for these variations: FIRST Saved Game for the Game Title MIDDLE Saved Game for the Game Title LAST Saved Game for the Game Title Copy a Single Saved Game to a Memory Area twice in a row (NO Navigation, and No Reboot between copies) Verify the Copied Games exist BEFORE a reboot Verify the Copied Games exist AFTER a reboot  Copy a Saved Game with a DEFAULT IMAGE from the each Memory Area type to another Xdisk -> MU MU -> Xdisk Copy a Saved Game from a Game Title that DOES NOT Exist on the Destination Memory Area MU -> MU MU -> XDisk XDisk -> MU Copy a Saved Game from a Game Title that DOES Exist on the Destination Memory Area MU -> MU MU -> XDisk XDisk -> MU Copy a Saved Game that contains 1 LARGE data file MU -> MU MU -> XDisk XDisk -> MU Copy a Saved Game that contains MANY data files MU -> MU MU -> XDisk XDisk -> MU Copy a Saved Game, and Remove a controller (different from MU source / Dest) while the game copy is in progress. Copy a Saved Game, and Remove a controller (MU Source) while the game copy is in progress Copy a Saved Game, and Remove a controller (MU Dest) while the game copy is in progress Copy a Saved Game, and Remove an MU (different from MU source / Dest) while the game copy is in progress Copy a Saved Game, and Remove an MU (MU Source) while the game copy is in progress Copy a Saved Game, and Remove an MU (MU Dest) while the game copy is in progress Copy a Saved Game, and press the power button during the operation. Copy a Saved Game, and remove the power cord during the operation. Verify inserting CORRUPTED / UNFORMATTED MUs during File Operations works as expected 2 UNFORMATTED MUs during COPY 2 BAD MUs during COPY Deleting Saved Game / Soundtrack: Deleting individual saved games from each Memory Area, and verifying that the UI has been updated. Deleting individual saved games from each Memory Area, and verifying that if the same file exists on other MA s, they are not deleted. Delete a Saved Game From a Game Title for these variations: FIRST Saved Game for the Game Title MIDDLE Saved Game for the Game Title LAST Saved Game for the Game Title Using the Memory Area ERASE option, Delete all files from a Memory Area, and verify that the UI properly reflects the empty Memory Area. Using single select / delete, Delete all files from a Memory Area, and verify that the UI properly reflects the empty Memory Area. Delete all games for a Title, one at a time.  The title should have 25 Saved Games, and the Games should be deleted from the LAST game, to the FIRST game.  Make sure that each  panel , which holds 5 games, disappears when a row has been deleted. Delete a Saved Game that contains 1 LARGE data file XDisk Delete a Saved Game that contains MANY data files XDisk Delete a Saved Game that contains READ ONLY data files Xdisk Delete a Saved Game that is marked NO COPY Xdisk  Delete a Saved Game that is BROKEN XDisk When deleting a single Saved Game, verify that the Total Number of Blocks that a Game Title takes up adjusts appropriately XDisk When deleted a single Saved Game, verify that the Total Number of Blocks free on the Memory Area is adjusted appropriately XDisk When deleting a Game Title, verify that the Total Number of Blocks free on the Memory Area is adjusted appropriately XDisk Delete a Saved Game, and Remove a controller (different from MU source / Dest) while the delete is in progress. Delete a Saved Game, and Remove a controller (MU Source) while the delete is in progress Delete a Saved Game, and Remove an MU (different from MU source / Dest) while the delete is in progress Delete a Saved Game, and Remove an MU (MU Source) while the delete is in progress Delete a Saved Game, and press the power button during the operation. Delete a Saved Game, and remove the power cord during the operation.  Delete Soundtracks for these variations: ONLY soundtrack in the list FIRST soundtrack in the list MIDDLE soundtrack in the list LAST soundtrack in the list Soundtrack with 0 Songs Soundtrack with 1 Song Soundtrack with MAX Songs Delete ALL Soundtracks for these variations: 1 Soundtrack Exists MAX Soundtracks Exist Verify inserting CORRUPTED / UNFORMATTED MUs during File Operations works as expected 2 UNFORMATTED MUs during DELETE 2 BAD MUs during DELETE Verify copying a game to an MU that appears correct (formatted), but can t be written to fails Deleting a Game Title: Remove a Game Title that has these variations: MU and XDisk 0 Saved Games 1 Saved Games MAX (500) Saved Games ONLY Game Title on Memory Area FIRST Game Title on Memory Area MIDDLE Game Title on Memory Area LAST Game Title on Memory Area BROKEN Game Title Copy Destination Screen These tests are to ensure that the  Copy Destination  screen within the Memory area of the XDash is functioning as expected. Verify the Destination Meta Panel can handle an MU with name variations: No Nickname (Default Value for ALL MU 1 Char Nickname MAX Char (32) Nickname Character based Nicknames % character combos Invalid character combos Verify that if an MU DOES NOT have a nickname associated with it, the  Default  name is used: MU 1A MU 1B MU 2A MU 2B MU 3A MU 3B MU 4A MU 4B Verify navigating to this menu with the Memory Areas installed in different states: From XDisk   No MUs Inserted From XDisk   1 MU Inserted From XDisk   8 MUs Inserted From MU   No Other MUs Inserted From MU   1 Other MU Inserted From MU   7 Other MUs Inserted HP: Inserted each MU in to each Controller Port and remove it, and verify the screen is updated HP: Insert each controller in to each Controller Port and remove it, and verify the screen is updated HP: Controller Removal Cases From XDisk, Insert ALL MUs, Remove each controller from it s port, and verify the screen is updated appropriately, and the appropriate MU is highlighted From MU, Remove the Controller that contains the SOURCE MU (Verify you are returned to the Memory Collections screen) HP: MU Removal Cases From XDisk, Insert ALL MUs, highlight the LAST MU and remove it (Verify the 7th MU is highlighted) From XDisk, Insert ALL MUs, highlight the FIRST MU and remove it (Verify the 2nd MU is highlighted) From XDisk, Insert ALL MUs, highlight the SECOND MU and remove it (Which MU should be highlighted?) From MU, Remove the SOURCE MU (Verify you are returned to the Memory Collections screen) HP: MU Insert Cases From XDisk, with No MU s inserted, Insert each MU.  (Verify the FIRST MU inserted remains highlighted) From XDisk, Insert ALL MUs, Highlight MU #3, and Remove #2.  (Verify #3 remains highlighted, and verify #2 was removed from the list.)  With #3 still highlighted, Insert #2. (Verify #3 remains highlighted, and #2 was added to the list) Verify that the Memory Area free space for the destination MUs is displayed properly with variations in the amount of data on a Memory Unit: 0 blocks used (Not possible for XDisk) 1 block used (Not possible for XDisk)  blocks used  1 blocks used MAX blocks used Code reviews For changed code, after a check-in, and on all code at least 1 time before we ship.  If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough Debugger must be hooked up to the text machine during testing.  If the test engineer does not know how to debug, s/he will need to notify our SDE/Ts or our development owner to debug. Security Security testing specifically on the shell will be minimal.  Overall security testing will be covered in the Security test plan. Performance testing Performance testing will be done on the following: Copy times between Memory Areas. (MU s to Hard Drive, MU s to MU s, and Hard Drive to MU Memory Management menu navigation Catastrophic failure testing Verify that when catastrophic failure happens (power cord pulled, box dropped on the floor, lightening strike, as long as the hardware is still operable, upon reboot, the Default Title is still functional.  If data is lost or the hard disk becomes corrupted, verify that the Default Title can be recovered from the recovery disc. Interfaces with other components Titles must be able to boot the Xbox in a mode that ignores what is in the tray, and places the user in to the Memory Management area.  They must also be able to specify how much space they need in order to function.  We will test this by creating a title that will boot in to the Memory Management area specifying various amounts of space needed. Localization impact All test cases will be executed on every language we support to verify everything is localized correctly and there is no clipping.  When text can be entered, always use extended characters and Japanese characters.  Usage testing will cover English alphabets. Test complete criteria All of the above scenarios must be covered for the Default Title to be declared  test complete Release criteria All tests must pass at 100%.  The only exceptions will be bugs that the War Team declares as postponed, won t fix, or by design. PAGE   PAGE   Microsoft Confidential ~o~^oSo gdP'^ gdP'^ gdP'^ gdP'^ gdP'^ wqwqmwqwbwq
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\Xbox Default Title - Games Area Test Plan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Xbox Default Title Test Plan Title _PID_HLINKS _AdHocReviewCycleID _EmailSubject _AuthorEmail _AuthorEmailDisplayName _ReviewingToolsShownOnce Games Area Test Plan jimhelm@xbox.com Jim HelmXbox Default Title Test Plan Normal.dot jimhelm Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags PersonName &N`D! d?j_p Q#9s  *C0w$R Xbox Default Title - Game Area Test Plan (1st).doc a-keni a-keniXbox Default Title   Game Area Test Plan Author: Ken Inafuku (a-keni) and Jim Helm (jimhelm) Last changed:   TIME \@ "M/d/yyyy"  3/1/2001  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc506430288"  Owners  PAGEREF _Toc506430288 \h   HYPERLINK \l "_Toc506430289"  Resources  PAGEREF _Toc506430289 \h   HYPERLINK \l "_Toc506430290"  Spec reviews  PAGEREF _Toc506430290 \h   HYPERLINK \l "_Toc506430291"  Tools needed  PAGEREF _Toc506430291 \h   HYPERLINK \l "_Toc506430292"  Hardware needed  PAGEREF _Toc506430292 \h   HYPERLINK \l "_Toc506430293"  Test methods  PAGEREF _Toc506430293 \h   HYPERLINK \l "_Toc506430294"  Test code  PAGEREF _Toc506430294 \h   HYPERLINK \l "_Toc506430295"  Manual tests  PAGEREF _Toc506430295 \h   HYPERLINK \l "_Toc506430296"  General Game Area  PAGEREF _Toc506430296 \h   HYPERLINK \l "_Toc506430297"  User Interface  PAGEREF _Toc506430297 \h   HYPERLINK \l "_Toc506430298"  Game Collection Menu  PAGEREF _Toc506430298 \h   HYPERLINK \l "_Toc506430299"  Game Options  PAGEREF _Toc506430299 \h   HYPERLINK \l "_Toc506430300"  New Game  PAGEREF _Toc506430300 \h   HYPERLINK \l "_Toc506430301"  Extensible Information Area  PAGEREF _Toc506430301 \h   HYPERLINK \l "_Toc506430302"  Saved Games  PAGEREF _Toc506430302 \h   HYPERLINK \l "_Toc506430303"  Code reviews  PAGEREF _Toc506430303 \h   HYPERLINK \l "_Toc506430304"  Debug walkthrough  PAGEREF _Toc506430304 \h   HYPERLINK \l "_Toc506430305"  Security  PAGEREF _Toc506430305 \h   HYPERLINK \l "_Toc506430306"  Performance testing  PAGEREF _Toc506430306 \h   HYPERLINK \l "_Toc506430307"  Catastrophic failure testing  PAGEREF _Toc506430307 \h   HYPERLINK \l "_Toc506430308"  Interfaces with other components  PAGEREF _Toc506430308 \h   HYPERLINK \l "_Toc506430309"  Localization impact  PAGEREF _Toc506430309 \h   HYPERLINK \l "_Toc506430310"  Test complete criteria  PAGEREF _Toc506430310 \h   HYPERLINK \l "_Toc506430311"  Release criteria  PAGEREF _Toc506430311 \h  Owners Test   HYPERLINK "mailto:jimhelm@microsoft.com"  jimhelm@microsoft.com  HYPERLINK "mailto:bradch@microsoft.com"  bradch@microsoft.com  HYPERLINK "mailto:victorbl@microsoft.com"  victorbl@microsoft.com  HYPERLINK "mailto:karencs@microsoft.com"  karencs@microsoft.com Usability   HYPERLINK "mailto:tombro@microsoft.com"  tombro@microsoft.com International  Resources Specs  HYPERLINK "http://xbox/specs/pm/shell/"  http://xbox/specs/pm/shell/ Source Test source Test Docs Win2000 Test Docs Spec reviews You should also read the shell specs on: file://xbox/specs/pm/shell Tools needed Most, if not all, of the UI testing will be done by hand because automating the testing will be expensive and we may not have the time to do it.  The tools we will need to perform UI testing are minimal.  We will need to simulate some out of space scenarios, etc, which will require either some software to be developed that will quickly generate this scenario, or an easy way to fill up a Game Area without the need for software.  Hardware tools are covered below.  Here are some software tools we will need: A tool that will allow me to compare two files to ensure they are identical.  (Such as windiff).  I will need to be able to compare that data that will live on an MU.  If it s not possible to copy this data to the PC for comparison, a   program will have to be created that works on the Xbox. A tool that would allow us to simulate low disk space situations for both MU s and Xdisk.  This tool may have to be an  Xbox Title  in order to access MU A tool that will allow us to configure the Xdisk and the Mus in various ways, such as creating many  Titles , or many saved games for a specific Title.  We will need to perform cleanup from this tool as well, so we can ensure the Xbox is setup appropriately. We will need a checked version of the shell to test performance, code coverage, static analysis, and leak testing. Hardware needed At least 1 Xbox. Controllers, up to 4 per Xbox. Memory Units (standard size), at least 8 per Xbox. Memory Units (larger sizes), for future compatibility testing. An Xbox compatible hard disk that is larger than the standard 8MB we will be shipping, for future compatibility testing. TVs that are capable of doing 4:3Normal, 4:3Letterbox, 16:9, HDTV, in NTSC and PAL S-VIDEO and Composite formats. 2 Game DVDs (Xbox) (1st disc from a multi-disc game), from different games Game DVD (Xbox) (2nd disc from a multi-disc game) Test methods Test code Due to the fact that we cannot simulate USB input programmatically, and we cannot get information back out of the Xbox, no test code will be written to automate the testing. The test cases, steps, and variations will be stored in TACTICS, which will allow us to easily assign test cases to a specific tester, review results, and update information as needed.  See   HYPERLINK "http://xdk"  http://xdk  for more information on our TACTICS database. Manual tests General Game Area User Interface These tests are to ensure that the user interface of the Game Area of the Xdash can handle the types of issues that arise when dealing with Game Area.  These tests will be run on EVERY screen in the Games Area Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action Verify that Multiple Control press combinations do not adversely affect the XDash, such as: A & B Start & Back A & Start B & Start B & Back A & Back (may need more cases here) Verify the FOCUS is always set to the proper menu item Verify that scrolling UP and DOWN the menu items performs as expected Verify that All the UI is properly displayed in the screen. (Such as word is been cut off from the edge of the screen, images is correctly displayed on the screen.) Verify that UI and text (for all supported Xbox languages) when selecting / highlighting each menu and ensure that correctness of the localization. Game Collection Menu These tests are to ensure that the  Game Collection  area within the Games Area of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not verify that the APIs the Titles will use work in terms of creating content that the Games Collection will display.  (Such as metadata files, etc) Types of tests that will be performed are: Verify that scrolling UP and DOWN this menu functions properly (the total number of games displayed at one time is 8): 0 Games 1 Game 8 Games 9 Games MAX (4096) Games Verify that scrolling UP and DOWN the list, and navigating away, functions properly when the user returns Verify the focus is always set to the proper menu item: Initial Entry: (default choice, top option has the focus) Re-Entry after pressing   from a games sub-area: (selected item has the focus) Re-Entry from the Main Menu, after highlighting a non-default choice in the Games Collection menu: (default choice, top option has the focus) Verify that the order of games on this menu is in ALPHABETICAL order Verify selecting  Games  from the Root menu with the Xbox in various states: 0 Games played 1 Games played 2+ Games played MAX (4096)d Games played Verify selecting  Games  from the Root menu after altering the Xbox configuration in various ways: Playing 2+ games, and deleting all but 1 game. Playing 2+ games, and deleting ALL games. Verify that Game Titles with INVALID configurations still display correctly in the XDash: Missing TITLE.BMP Verify that the Meta panel displays the correct information when a game is highlighted.  POSITIVE cases include: MAIN.XBX file contains VALID MAX information (10 TITLE/BODY pairs, for each valid language) MAIN.XBX contains 1 TITLE/BODY pair MAIN.XBX file has only 1 TITLE/BODY pair, one language (Engligh) MAIN.XBX file has only 1 TITLE/BODY pair, one language (Japanese) MAIN.XBX has a TITLE that is extremely large (1000+ characters) MAIN.XBX has a BODY that is extremely large (1000+ characters) MAIN.XBX contains only TITLES MAIN.XBX contains only BODY (More cases here) Verify that the Meta panel displays the correct information when a game is highlighted.  NEGATIVE cases include: MAIN.XBX file is missing (what info is displayed here) MAIN.XBX exists, but is empty (what info is displayed here) MAIN.XBX exists, has valid tokens, but no data (i.e. Title1=<blank>, Body1=<blank>) MAIN.XBX has an invalid [Language] tag MAIN.XBX contains 11 TITLE/BODY pairs (More cases here) Verify that the Games list can handle Game Titles of various sizes: 0 Chars 1 Char MAX Chars (at least 1000 chars, is there a maximum) Game Options These tests are to ensure that the  Game Options  area within the Games Area of the XDash is functioning as expected. Types of tests that will be performed are: Verify the focus is always set to the proper menu item: Initial Entry: (default choice, top option has the focus) Re-Entry after pressing   from a sub-area: (selected item has the focus) Re-Entry from the Games Collection, after highlighting a non-default choice in the Game Options menu: (default choice, top option has the focus) Verify that scrolling UP and DOWN this menu functions properly (the total number of extensible areas for a game is 10, the number of displayable buttons is 2): 0 Extensible Areas 1 Extensible Area 2 Extensible Areas 3 Extensible Areas 9 Extensible Areas 10 (MAX) Extensible Areas Verify that Game Titles with INVALID configurations still display correctly in the XDash: Missing TITLE.BMP Verify that the Meta panel displays the correct information when an  Extensible Area  is highlighted.  POSITIVE cases include: MENU.XBX   TITLE huge (1000 chars), all Languages MENU.XBX   BODY huge (1000 chars), all Languages MENU.XBX   TITLE 1 character, all Languages MENU.XBX   BODY has 1 character, all Languages MENU.XBX   TITLE with various characters, all Languages MENU.XBX   BODY with various characters, all Languages MENU.XBX   MAX Information, 10 TITLE/ BODY/ITEM, all Languages MENU.XBX   10 TITLE/ BODY pairs from one language (English) MENU.XBX   10 TITLE/ BODY pairs from one language (Japanese) (other variations here) Verify that the Meta panel displays the correct information when an  Extensible Area  is highlighted.  NEGATIVE cases include: MENU.XBX   File is empty MENU.XBX   TITLE is empty (Title1=<blank>) MENU.XBX   BODY is empty (Body1=<blank>) MENU.XBX   TITLE missing BODY / ITEM tokens MENU.XBX   BODY missing TITLE / ITEM tokens MENU.XBX   ITEM missing TITLE / BODY tokens MENU.XBX   TITLE and BODY are correct, and ITEM points to invalid filename MENU.XBX   Contains 11 Extensible Options MENU.XBX   Contains invalid [Language] token MENU.XBX   Contain empty [Language] area ([English] is correct, [Japanese] empty) (other variations here) New Game This test are to ensure that the if user selects  New Game  from the "Game Options" screen is functioning as expected. Select Launch and Verify the user is prompted for the correct Game Title disc Verify when the user is prompted to insert media, that NO controller buttons are active Verify after selecting  New Game  the user can perform these actions correctly:  User inserts the CORRECT disk User inserts the INCORRECT disk User inserts INVALID media (add media variations) User insert NO media Extensible Information Area These tests are to ensure that the  Extensible  area within the Games Area of the XDash is functioning as expected. Types of tests that will be performed are: Verify the Extensible option title with these variations: 0 chars 1 char MAX (huge chars) Character Variations (other variations here) Verify that an IMAGE can be displayed with these variations: 512x512, normal DDS Image, 24bit color 0 byte DDS Image File 1x1, tiny DDS Image, 24bit color 256x256, small DDS Image, 24bit color 1024x1024, large DDS Image, 24bit color 2048x2048, huge DDS Image, 24bit color 512x512, normal DDS Image, 32 bit color 512x512, normal DDS Image, 16 bit color 512x512, normal DDS Image, 8 bit color 512x512, normal DDS Image, 16 colors Corrupt (bogus) DDS Image, huge in size (1-2 MB) (other variations here) Verify that a NEWS file can be displayed with these variations: 1 TITLE and BODY pair 10 TITLE and BODY pairs 10 TITLES, no BODIES 10 BODIES, no TITLES TITLE huge (more than 1000 characters) BODY huge (more than 1000 characters) TITLE and BODY empty 0 byte XBX file 1 byte XBX file (other variations here) Verify that a TABLE file can be displayed with these variations: MAX rows, MAX chars for each column in each row 5 rows, 25 char 1st col, 10 char 2nd col 1 row, 1 char in each column 1 row, tab-char only (no characters) 1 row, no tab-char 1000+ rows, MAX chars for each column in each row Character variations (try to display each character) 0 byte file 1 byte file (other variations here) Saved Games This test are to ensure that the if user selects  Saved Games  from the "Game Options" screen is functioning as expected. Verify the order of Saved Games is listed by Date and Time  (Newest Games first, Oldest Games Last) (add variations of date / time / MU / XDisk here) Verify that upon selecting the saved game menu, XDash will check, and display all the saved games from the multiple areas on the Xbox.  (Both MUs and the Xdisk, and Well as the multiple copies of the same saved game files.)  Variations include:  No Saved Games in any Memory Area  1 Saved Game on XDisk  1 Saved Game on a single MU  1 Saved Games on EACH MU (1  MAX Saved Games on the XDisk  MAX Saved Games on a single MU  MAX Saved Games on EACH MU (1  Verify that if saved game file has a metadata and/or thumbnail (both valid and invalid), verify its contents and association of the files.  (Add variations here) Verify that upon the highlighting each saved game, displays a correct metadata or thumbnail information that are corresponded to the saved game. Insert and Remove empty MUs Insert and Remove MUs with saved games from a different game Insert and Remove MUs with saved games from the current game Remove the MU of the game that is currently highlighted  (add variations here) Verify that prompt if user is over writing an existing saved game file for each different game titles. (Add variations here) Verify the display is updated appropriately to show the correct space usage for Memory Areas after various actions are performed:  Copy, Delete, both from MUs and the XDisk. Play Game Verify that if a user selects  Launch  from a Saved Game, and inserts media from the CORRECT XBox Game Title, that the Saved Game information is properly passed to the Game Title. (Add variations for where the game lives, MU / XDisk) Verify that if a user selects  Launch  from a Saved Game, and inserts media from the INCORRECT XBox Game Title, that the Saved Game information is NOT passed to the Game Title.  (Add variations for where the game lives, MU / XDisk) Verify that if a user selects  Launch  from a Saved Game, and inserts INVALID media, that the XDash is properly booted and displays the appropriate error messages.   (Add variations for where the game lives, MU / XDisk)   Media used: (add media list here) Select  Play Game  from a saved game that lives on an MU, and remove the MU during boot. Verify that upon the copying saved game, xbox will check a current status of the memory unit in the each game pad. (Such as is the memory unit is in the game pad or not) Verify that upon the copying saved game file from xdisk, system should be verifying an existence of the same file name in the memory unit.   Verify that if there is a file exist with same name prompt a user for correct action to overwrite or cancel the action.  (Add variations of overwrite here) Verify that upon the copying a saved game file from xdisk, system will check an available space in the memory unit. Verify that upon the copying a saved game file from xdisk, system will arrow to copy same file name to the same memory unit only if saved game file is different. (Such as the name of the file is same but there are from two different game titles) Verify that after finishing copying a saved game files to the memory unit(s) that user should be return to the lists of the saved game files on the selected game titles. Use the Memory Management Spec and verify we will be trying all of the same Copy tests from it here.  We should try to keep this spec, and that spec in sync. Delete Verify that user has an option of choosing a deleting a file from.  Where that is from xdisk or each memory unit(s) from the each game controller(s). Verify that upon the deletion of the saved game file, user should be prompted for final conformation of deleting a file from the xdisk or memory unit(s). Verify that after the completing deleting a saved game files from the xdisk or memory unit(s), the lists should be updated immediately on the screen. Use the Memory Management Spec and verify we will be trying all of the same Delete tests from it here. We should try to keep this spec, and that spec in sync. (Is their will be an option to choose and select a multiple files form xdisk or memory units? And also formatting a memory unit.) Cancel  Verify that upon the canceling any function (such one like copying, deleting saved game files) should returning a user to lists of the saved game on the currently selected game title. Code reviews For changed code, after a check-in, and on all code at least 1 time before we ship.  If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough Debugger must be hooked up to the text machine during testing.  If the test engineer does not know how to debug, s/he will need to notify our SDE/Ts or our development owner to debug. Security Security testing specifically on the shell will be minimal.  Overall security testing will be covered in the Security test plan. Performance testing Performance testing will be done on the following: Switch back and forth between Main Dash to the Game Collection Menu. Switch back and forth between of Game collection and rest of the menu that are related to the game area. Scrolling up and down on the list of game collection titles and saved game in Xdisk and memory unit(s). Catastrophic failure testing Verify that when catastrophic failure happens (power cord pulled, box dropped on the floor, lightening strike, as long as the hardware is still operable, upon reboot, the Default Title is still functional.  If data is lost or the hard disk becomes corrupted, verify that the Default Title can be recovered from the recovery disc. Interfaces with other components Titles must be able to boot the Xbox in a mode that ignores what is in the tray, and places the user in to the Game Area.  Localization impact All test cases will be executed on every language we support to verify everything is localized correctly and there is no clipping.  When text can be entered, always use extended characters and Japanese characters.  Usage testing will cover English alphabets. Test complete criteria All of the above scenarios must be covered for the Default Title to be declared  test complete Release criteria All tests must pass at 100%.  The only exceptions will be bugs that the War Team declares as postponed, won t fix, or by design. PAGE   PAGE   Microsoft Confidential gdMHh gdMHh gdMHh gdMHh gd|!F gdyTF gdyTF
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\Xbox Default Title - Release Criteria.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox DEFAULT TITLE   Release Criteria TitleXbox DEFAULT TITLE   Release Criteria jimhelm Normal.dot jimhelm Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags PlaceType urn:schemas-microsoft-com:office:smarttags PlaceName urn:schemas-microsoft-com:office:smarttags placebjbjk Xbox default title   Release Criteria This document contains the criteria for which test will allow the release of the Xbox Default Title.  It is important that all teams involved in the building and shipping process of the Default Title acknowledge and understand these criteria. Release Criteria No Pri 1 Sev 1 bugs.  These are bugs that will cause either an extremely bad user experience, or are straight-line failures. A straight-line failure is a failure such that a normal user will hit it performing a standard, non-edge case scenario. (Such as copying a saved game, changing a setting, etc)  No severe visual problems, such as overflowing text, or missing or hidden items.  Any text that would normally overflow must be properly faded to convey that the text size was expected by the product, and dealt with in the appropriate way.  It is important that the product look polished as well as perform its functions.  A sloppy interface will not only cause confusion, but convey a general feel of sloppiness in the overall Xbox product.  This applies to ALL languages that the Xbox supports.   No Memory leaks.  Since the Xbox will launch the Default Title each time the user presses the eject button, it is a very likely scenario that the user will be leaving their box running it for prolonged periods of time.  It is very important that the Default Title does not 'crash' or 'freeze' the system, no matter how long the user has it running.  It is also extremely important that performing basic actions, such as Copying saved games, removing items, playing music, etc, do not leak. All War-Team approved bugs must be fixed, and regressed before release. End Game Test Schedule: 0 days Development Code Complete 7 days Test Pass #1 2 days Address bugs from Test Pass #1 (Fix and Regress) 1 day Full Team Default Title Bug-Bash, to find any ad-hoc type scenarios not found in Test Pass #1. 7 days Test Pass #2 (Final, FULL, test pass) 3 days Fix any Pri 1 Sev 1, and War-Team approved bugs before launch (Bugs that were found by Test Pass #2).  This time will be used for targeted regression passes against areas where Pri 1 or Pri 2 bugs had to be fixed. 1 day Last day of Ad-hoc testing, hopefully involving full-team.  This is a sanity pass to try and make sure there was nothing major missed by Pass #1 or #2 above. Total Time needed: 21 days (3 weeks) This is an extremely aggressive schedule considering the complexity of the Default Title and the amount of tests that we need to run against it.  Because of the Default Title engine, even a minor tweak or bug fix in one area can affect all other areas in the product.  It is EXTREMELY important that, in these last 3 weeks, we ONLY fix bugs that absolutely need fixing before launch, and that we DO NOT add any new features whatsoever   we must really be CODE COMPLETE to start this process.  If we are adding any major new item within this 3 week period, in my opinion, we would need to start this process over from the beginning. I would expect, although this number is subject to War-Team bug approval, that 95% to 97% of all of our Default Title tests would be passing before we should ship this product. vgvc_c_cWc_RWMEcR
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\XBoxMmAPI.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal.dot Toby Dziubala Microsoft Word 9.0bjbjU XBox Memory Manager API Test Plan Author: Toby Dziubala ( a-tobydz ) Last changed:   SAVEDATE \@ "M/d/yyyy" \* MERGEFORMAT  6/6/2000  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test  mailto:a-tobydz@microsoft.com  HYPERLINK "mailto:jont@microsoft.com"  mailto:jont@microsoft.com  HYPERLINK "mailto:cameronf@microsoft.com"  mailto:cameronf@microsoft.com Usability  International  Test scenarios Test cases focus on: Basic functionality Boundary cases Error conditions Few exceptions will focus on: Security Performance Spec reviews The following are original Windows NT specs regarding memory management  HYPERLINK "\\\\xbox\\specs\\test\\nt\\cache.doc"  \\xbox\specs\test\nt\cache.doc  HYPERLINK "\\\\xbox\\specs\\test\\nt\\vm.doc"  \\xbox\specs\test\nt\vm.doc  HYPERLINK "\\\\xbox\\specs\\test\\nt\\vmdesign.doc"  \\xbox\specs\test\nt\vmdesign.doc Relevant specification for Xbox is available from  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\XBox OS specification.doc"  \\xbox\specs\pm\CoreOS\XBox OS specification.doc Tools needed XBox Test Harness running memory manager BVTs IceCAP for performance testing. Hardware needed What do you need immediately? What will you need further on down the road? What lab requirements do you have? Test methodology All aforementioned APIs, regardless of type, can all be categorized into four common API  types  which can be tested in a similar manner across the board.  The testing methodology will be described using the following model: Allocators & Deallocators: These functions share the common responsibility of creating / reserving locations of memory for general program use which includes custom heaps.  Basic Functionality: Testing the basic functionality will involve simple memory allocation calls of a fixed size. Verification will include the use of functions such as  ZeroMemory  to touch the allocated region of memory and monitoring the systems response.  Some exceptions will be expected. For example; certain protection types will raise an exception when the test code  touches  that protected allocated region. Test code will be written to handle these expected exceptions. Boundary Conditions: Memory management boundary conditions will simply be accomplished by allocating small blocks of memory (i.e. less than a page in size) and verifying its creation, as well as cases that will consume all system memory.  Heap related Allocators will be tested by continuously creating heaps until it has reached the system capacity and monitoring the expected results.  This will be sufficient to test the allocation API boundary conditions. Error Conditions: Error conditions will be handled by; Creating a block of memory / freeing it / touching the freed address and handling the expected exception to occur.  Requesting a region of memory that is not usable by the program and monitoring the expected exception to occur. Localization: No localization testing will be performed on the memory manager APIs Security: Cases related to security will include mostly the manipulation of access flags and ensuring they guard the memory as expected. Performance: No performance testing is planned as yet.  TBD Access Protection Modifiers: Basic Functionality: Ensuring basic functionality will involve taking an allocated block of memory with a predetermined access protection type, modifying it using the access protection modifying APIs, and verifying it using a respective query API (such as  VirtualQuery Boundary Conditions: Boundary conditions do not apply to access protection modifiers. Error Conditions:  Error condition testing is somewhat limited with these APIs.  The functions that modify protection attributes are pretty much a pass / fail process. Error cases will include; Modifying a region of memory that cannot be modified. Passing invalid region sizes. When changing the protection attribute of a given region, give the function call the incorrect   protection type. Attempting to change the protection type on a region smaller than 1 page (4096 bytes). Localization: No localization testing will be necessary. Security: Any security issues will be exposed through the basic functionality and error cases. Performance: No performance testing will be performed on these APIs. Query Functions:  Basic Functionality:  Testing of these APIs will begin by allocating memory of all types ( heaps, virtual memory, etc ) with different protection settings ( PAGE_GUARD, PAGE_READ, etc ), filling the appropriate memory information structure, and comparing the results to the expected values. Boundary Conditions: No boundary testing is necessary for query functions. Error Conditions: Error cases are mostly focused on passing NULL or invalid query parameters ( this is mostly specific to VirtualQuery( ) ) and ensuring proper API error handling.  For other simple query functions ( such as HeapSize and LocalSize ), a more basic approach will be taken by querying invalid heap handles and checking the return values. Localization: No localization testing necessary. Security:  Security will be tested by attempting to query a region of memory that has been guarded by protection attributes, and verifying the expected results. Performance: Performance testing is not needed. Locking & Unlocking Functions:  Basic Functionality: Basic functionality coverage will be accomplished by locking / unlocking a global / local memory region and verifying that the function call returned a valid pointer the first byte of the object's memory block. Boundary Conditions: No boundary tests will be needed. Error Conditions: This will be tested by passing invalid handles or invalid parameters, then checking the error return for expected failure handling. Localization: Localization does not apply. Security: Security does not apply. Performance: These local and global locking API s provide slower memory management with fewer features, therefore, performance will not be tested. Manual tests No manual tests. Configuration tests Standard XBox configuration. Code reviews Unknown. Debug walkthrough  I386kd debugging a remote machine running the XBox OS. Security See the Memory Manager test plan for security details. Performance testing Performance testing will be accomplished using IceCAP, as detailed in the Memory Manager test plan. Catastrophic failure testing Failures are raised mostly as exceptions, which are handled through the test cases and logged to the XBox test harness. Interfaces with other components Interfaces are out of the scope of this document. See the Memory Manager test plan. Localization impact No localization testing will be necessary. Test variations Test case list taken from MMTestCases.xls Test to verify you can reserve virtual memory then free it. Test to verify you can reserve, commit, and free virtual memory. Test to verify you can touch allocated virtual memory. Test to verify you can reserve, commit, and free virtual memory using various protection flags. Test to verify you can reserve / commit the minimum page size of memory (4096 bytes). Test to verify you can reserve / commit all available memory. Test to verify accessing read-only memory raises and exception. Test to verify accessing protected memory raises and exception. Test to verify accessing EXECUTE_READ memory raises and exception. Test to verify accessing PAGE_GUARD memory raises and exception. Test to verify accessing freed memory raises an exception. Test to verify allocating memory in a protected region fails. Test to verify VirutalProtect will change memory protection. Test to verify GetProcessHeap() returns a vaild handle to the default heap. Test functionality of Global memory APIs. Test functionality of Local memory APIs. Test functionality of Heap memory APIs.        Test complete criteria All the above test cases must be completed. Other test cases will be added as the need arises. Release criteria Which of these tests need to pass to ship? All test cases. Exceptions will be decided by management. Which failures can we live with on this feature? None. Failure = death. How do we know when your tests say, "this feature is ready to ship"?
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\xdebug.doc ===
Microsoft Word Document MSWordDoc Word.Document.8John Daly Microsoft Corporation Xbox Debugging Notes Title _PID_HLINKSXbox Debugging Notes Sakphong Chanbai Normal.dot Sakphong Chanbai Microsoft Word 9.0Xbox Debugging Notes  TOC \o "1-2" \h \z   HYPERLINK \l "_Toc507334241"  CMDX.DLL: Xbox Remote Console  PAGEREF _Toc507334241 \h   HYPERLINK \l "_Toc507334242"  Display Thread s Last Error Value  PAGEREF _Toc507334242 \h   HYPERLINK \l "_Toc507334243"  Driver Verifier  PAGEREF _Toc507334243 \h   HYPERLINK \l "_Toc507334244"  Private Heap Tracking  PAGEREF _Toc507334244 \h   HYPERLINK \l "_Toc507334245"  Memory Allocation Tracking Tools  PAGEREF _Toc507334245 \h   HYPERLINK \l "_Toc507334246"  Tip from Chris Pirich  PAGEREF _Toc507334246 \h   HYPERLINK \l "_Toc507334247"  Tip from Jason Gould  PAGEREF _Toc507334247 \h   HYPERLINK \l "_Toc507334248"  Profiling with /Gh  PAGEREF _Toc507334248 \h   HYPERLINK \l "_Toc507334249"  How to Profile a Chunk of Code  PAGEREF _Toc507334249 \h   HYPERLINK \l "_Toc507334250"  Using With the Test Harness  PAGEREF _Toc507334250 \h   HYPERLINK \l "_Toc507334251"  Warnings When Using /Gh  PAGEREF _Toc507334251 \h   HYPERLINK \l "_Toc507334252"  The Report  PAGEREF _Toc507334252 \h   HYPERLINK \l "_Toc507334253"  Double Fault Trap  PAGEREF _Toc507334253 \h   HYPERLINK \l "_Toc507334254"  How to locate data in static TLS  PAGEREF _Toc507334254 \h   HYPERLINK \l "_Toc507334255"  Useful Kernel Debugger Extensions  PAGEREF _Toc507334255 \h  CMDX.DLL: Xbox Remote Console CMDX.DLL exposes a console on a remote machine.  The remote console allows you to perform simple operations, like directory ops, file ops, etc. Running the demo program: Run cmdxdemo.xbe on your Xbox machine. Run %_NTDRIVE%%_NTROOT%\private\test\cmdx\client\cmdx.exe <Xbox IP Address> on your W2K machine. Type help for usage information. D:\xbox\private\test\cmdx\client>cmdx.exe 157.55.34.229 Server version: 0.1 [C:\] help Usage: cmdx xbox-IP-address   e.g. cmdx 157.55.34.186 Commands:     If the command line starts with the ! character,     it's passed to the local machine's command shell     for execution. For example,         !cd         !dir         !copy foo bar cd [remote-dir]     Change the current directory on the xbox dir [/s] [remote-dir | remote-file]     List the directory content on the xbox     The file or directory name can have wildcard characters attrib remote-file | remote-dir     Display remote file/directory attributes copy [/y] remote-file !local-file copy [/y] !local-file remote-file copy [/y] remote-file1 remote-file2     Transfer file from the xbox to the local machine, or     Transfer file from the local machine to the xbox, or     Copy file on the xbox machine     The ! character in front of the filename indicates     that the file is on the local machine. xcopy remote-dir !local-dir xcopy !local-dir remote-dir xcopy remote-dir1 remote-dir2     Similar to copy, but work with directories move [/y] remote-file1 { remote-file2 | remote-dir }     Move file or directory on the xbox machine del [/f] remote-file     Delete a file on the xbox mkdir remote-dir     Create a new directory on the xbox rmdir [/s] remote-dir     Remove a directory on the xbox fdisk parameters...     Partition the xbox hard disk format parameters...     Format the xbox hard disk     Display this help message quit or exit     Close the connection to the xbox and exit the program reboot     Quit in addition to reboot the xbox [C:\] Including cmdx.dll in your app: Add extern BOOL WINAPI CmdxStartServer(); Line with $(BASEDIR)\private\test\cmdx\server\$O\cmdx.lib. Call CmdxStartService(); Updating remote console code: If you add commands or change the wire protocol, update cmdx\inc\protocol.txt. Modify the server code in cmdx\server.  This is a fairly trivial process since there are many examples to follow. Modify the client code in cmdx\client.  This is a fairly trivial process since there are many examples to follow. Update the help information in cmdx\client\usage.cpp. Build the client code in a W2K build environment. Check-in the updated cmdx.exe to cmdx\client. Display Thread s Last Error Value One quick and easy way to display Win32 last error value of thread is to dump XAPITHREAD structure and examine last error field kd> !thread THREAD d1141b38  tid: 4c  RUNNING Owning Process d0000b38  XapiThread d1141cd0 WaitTime (seconds)      720 Context Switch Count    1254 KernelTime                0:00:00.0180 Start Address XAPI!XapiPrimaryThreadStartup (0x0041020c) Stack Current d134e880 Base d134f000 Limit d133f000 Priority 8 BasePriority 8 PriorityDecrement 0 DecrementCount 0 ChildEBP RetAddr  Args to Child d134ed44 8104866d d144f000 00008204 d134ed74 ntoskrnl!RtlMultiByteToUnicodeN+0x29 d134ed68 0048b01a d134ed95 00008204 0040da20 ntoskrnl!RtlAnsiStringToUnicodeString+0x69 d134ed9d 01004102 01000000 0c000000 29004102 kernel32!xxx_GetDiskFreeSpaceA+0x3b 3ad134ed 00000000 00000000 00000000 00000000 +0x1004102 kd> dt XAPITHREAD d1141cd0    +0x000 LastError : 0x0    +0x004 WinSockData : (null)    +0x008 TlsSlots : [32] (null) Driver Verifier To use driver verifier, use the following command line xboxldr.com /verify=  /verifylevel=31 /ioverifylevel=2 /debug Private Heap Tracking If you are running test harness, there is a useful kernel debugger command in harnskdx.dll, !heaplist, that shows all private heaps created by test DLLs. Simply type !heaplist under kernel debugger and you will know how much memory each DLL committed. This memory includes all the memory created by HeapAlloc, malloc, calloc, C++ new. Memory allocated by LocalAlloc/GlobalAlloc will always be in default process heap, which is the first heap handle, showed in the output. VirtualAlloc is not included in the report. kd> !heaplist Heap handle: 0x00010000 (harness.exe)   Segment at 00010000 to 00110000, bytes committed: 94208 Heap handle: 0x01250000 (obracer.dll)   Segment at 01250000 to 01290000, bytes committed: 4096   Segment at 01290000 to 01390000, bytes committed: 270336 Heap handle: 0x01390000 (obstress.dll)   Segment at 01390000 to 013D0000, bytes committed: 204800   Segment at 013D0000 to 014D0000, bytes committed: 1007616   Segment at 014D0000 to 016D0000, bytes committed: 806912 Heap handle: 0x02400000 (xlog.dll)   Segment at 02400000 to 02440000, bytes committed: 61440 Total bytes committed by HeapAlloc is 2805760 Memory Allocation Tracking Tools This is a feature of test harness that can be used to track memory and resource leak. To use this feature, set appropriate bit in EnableAllocationTracking in TESTINI.INI and start your test. These are available bits, (for an update, please see the bit definition in LEAK.H under \private\test\tools\xtestlib\leak.h Feature Enable memory allocation tracking Capture stack back trace Detect invalid de-allocation Because test harness patches your Import Address Table directly to intercept various memory/resource allocation APIs, many C runtime library such as malloc, calloc, new, free, delete will not work. We are still using static version of CRT. To track CRT library, please make sure that the linker picks up CRT library from XTESTLIB.LIB instead of from LIBCMT.LIB in your SOURCES file There is also a new debug command (in HARNSKDX.DLL) to display memory allocation tracking. Please see example below. kd> !harnskdx.leakdump 10322 allocation(s) found in the list VirtualAlloc allocated by vmstress!main_function, stack back trace 84374C28, 1 occurence(s), total 8192 bytes         vmstress!main_function+0x1f6         vmstress!StartTest+0x1f         harness!TestRunnerThreadProc+0x178         XAPI!XapipThreadStartup+0x89 VirtualAlloc allocated by abuseval!main_function, stack back trace 805E6F08, 1 occurence(s), total 40963 bytes         abuseval!main_function+0x6a         abuseval!StartTest+0x1e         harness!TestRunnerThreadProc+0x178         XAPI!XapipThreadStartup+0x89 HeapAlloc allocated by devctl!record_ioctl, stack back trace 8492C948, 2 occurence(s), total 4840 bytes         devctl!record_ioctl+0x28         devctl!do_ioctl+0x195         devctl!do_device_opens+0x9f         devctl!recurse+0x501         devctl!main+0x39c         devctl!DevCtlThreadProc+0x4c         XAPI!XapipThreadStartup+0x89 Tip from Chris Pirich File xdbg.h to private\inc. Include this header inside OS and library components to use the "standard" debug macros. They are defined to do something only #if DBG (which is true if NTDEBUG=ntsd in our environment). The RIP() macro should be used for parameter validation.  In a debug build: RIP("XFunction1() invalid pParam1"); will output "XBOX RIP: XFunction1() invalid pParam1\n" to the debugger console and then break into the debugger. The debug binaries will need to link to ntoskrnl.lib for DbgPrint() and RtlAssert(). We can make enhancements as we go.  We may add debug output macros with some sort of standardized output levels in the future. Update xapi's savegame APIs to use the RIP() macro instead of always doing runtime parameter validation.  These functions no longer return ERROR_INVALID_PARAMETER.  It is now strongly recommended that you write your new test/game code against a debug build, otherwise you won't know when you aren't using the APIs properly. Tip from Jason Gould If your application crashes within the first second of its existence, it can be nearly impossible to copy a new version of the .xbe over before it crashes. Since the default title should live on the y: drive, the only way to copy over a new version of the .xbe is using xbcp, which only works if the current app is running properly. The following code will allow crashed code to go, so you can get a new .xbe copied over, without having to reboot. Type the following into the debugger: e eip e9; ed eip+1 fffffffb; g This is equivalent to the masm code: @@: jmp @B which is an infinite loop. Since xbcp works during interrupts, this will allow you to copy your app over to the xbox.  Unfortunately, this does not work if the crash is in the kernel. Profiling with /Gh The /Gh compiler flag will insert a call to _penter() as the first instruction of every function. This can be used to generate profile data such as API hit counts and timing information. How to Profile a Chunk of Code Compile the module you are interested in profiling with the /Gh flag (set  USER_C_FLAGS=/Gh  in the sources for the module or in the environment). Place a call to  void __stdcall penterDumpStats(void)  at the end of your test application. Link ghprof.lib (test\tools\GhProf) to your application. penterDumpStats() will write the profile data to t:\GhProf.log (c:\tdata\xxxxxxxx\GhProf.log) Use GhProfile.exe to generate a user-friendly report using GhProf.log and the map file from the test application. Using With the Test Harness Compile the module you are interested in profiling with the /Gh flag (set  USER_C_FLAGS=/Gh  in the sources for the module or in the environment). Relink the test harness. penterDumpStats() is called automatically when the launcher exits   so if you run your test through the telnet client, you don t have to call this API. Otherwise call it when your test exits. Warnings When Using /Gh GhProf.lib modifies the stack at where the return address should be in relation to the base pointer. This means that FPO (Frame-Pointer Omission) must NOT be enabled. This also means that stack corruption is likely in functions that don t follow standard frame usage. The following APIs will not be profiled: QueryPerformanceCounter GetCurrentThreadId DebugPrint ExAllocatePool ExFreePool Or any call from a high IRQ priority Note that some operating system APIs do not lend well to this type of instrumentation and may cause corruption or crashes. The Report The generated log file (GhProf.log) contains the following information: address: The API address hit count: how many times the API was called avg time: The time in QueryPerformanceCounter ticks (1193182 ticks in 1 sec on xbox). max time: The maximum amount of time the api took to execute min time: the minimum amount of time the api took to execute Gh time: the average time the profiler took to execute on top of the API (the overhead time) child time: the average time spent in APIs called by the current function (including profiler overhead time). Note that this only includes called APIs that are also instrumented via /Gh. Because there are no symbols on the xbox itself, you will have to correlate the address of the API to the symbol name via the MAP file generated by the linker. GhProfiler.exe simply uses the address to look up the symbol name and merges that with GhProf.log. Double Fault Trap As you might know, under Xbox, thread stack size is fixed and couldn't be expanded dynamically like NT. We don't have guard page at the end of stack to catch page fault and expand stack (although guard page mechanism is available under Xbox). Also, we don't separate kernel stack in any way, even while the kernel processes page fault, general protection fault, etc. However double fault and NMI interrupt has its own stack from task gate mechanism. This means that, if your stack is too small and you overflow it, it will generate exception and kernel's trap handler will catch it, using the same stack of current thread and because the stack pointer is already overflowed, it will generate fault again in trap handler, which is double fault and the trap handler number 8 (KiTrap08) will catch it. So if you see double fault, it will be difficult to get the right stack trace because the stack is invalid. The following technique is almost 100% accurate, except memory is totally screwed up ;-) The following stack trace is an example of double fault. This one is from Ravisent's DVD playback which is very large stack space. *** Fatal System Error: 0x0000007f                        (0x00000008,0x00000000,0x00000000,0x00000000) i386kd: A fatal system error has occurred. i386kd: Debugger entered on first try; Bugcheck callbacks have not been invoked. i386kd: A fatal system error has occurred. xboxkrnl!RtlpBreakWithStatusInstruction: 80119810 cc               int     3 i386kd: Reading initial command: 'r;kb;dd nt!KiBugCheckData l 5' eax=00000003 ebx=0000007f ecx=d0072b5c edx=00000000 esi=00000000 edi=00000008 eip=80119810 esp=8012edcc ebp=8012edf8 iopl=0         nv up di pl zr na po nc cs=0008  ss=0010  ds=0010  es=0010  fs=0020  gs=0000             efl=00000046 xboxkrnl!RtlpBreakWithStatusInstruction: 80119810 cc               int     3 ChildEBP RetAddr  Args to Child 8012edc8 8010fa36 00000003 00000008 00000000 xboxkrnl!RtlpBreakWithStatusInstruction 8012edf8 8010fb3d 00000003 8b1320e8 00000000 xboxkrnl!KiBugCheckDebugBreak+0x31 8012ee10 8012b00b 0000007f 00000008 00000000 xboxkrnl!KeBugCheckEx+0xca 8012ee10 8012afb8 0000007f 00000008 00000000 xboxkrnl!KiTrap08+0x53 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 From the stack, you will see KiTrap08 repeated over and over. First thing you want to do is too use command 'kv' to see task gate frame in the stack. They usually generated before CPU transfer control to fault handlers, and because we use task gate (see Intel doc about PIII for more info what task gate is), CPU will save task switch information on stack instead of trap frame as we usually see from command 'kv' kd> kv ChildEBP RetAddr  Args to Child 8012edc8 8010fa36 00000003 00000008 00000000 xboxkrnl!RtlpBreakWithStatusInstruction (FPO: [1,0,0]) 8012edf8 8010fb3d 00000003 8b1320e8 00000000 xboxkrnl!KiBugCheckDebugBreak+0x31(FPO: [Non-Fpo] 8012ee10 8012b00b 0000007f 00000008 00000000 xboxkrnl!KeBugCheckEx+0xca(FPO: [Non-Fpo] 8012ee10 8012afb8 0000007f 00000008 00000000 xboxkrnl!KiTrap08+0x53 (FPO: TaskGate 28:0) 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 (FPO: TaskGate 28:0) 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 (FPO: TaskGate 28:0) 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 (FPO: TaskGate 28:0) 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 (FPO: TaskGate 28:0) 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 (FPO: TaskGate 28:0) 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 (FPO: TaskGate 28:0) 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 (FPO: TaskGate 28:0) 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 (FPO: TaskGate 28:0) 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 (FPO: TaskGate 28:0) 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 (FPO: TaskGate 28:0) 00000000 8012afb8 00000000 00000000 00000000 xboxkrnl!KiTrap08 (FPO: TaskGate 28:0) In this case, the CPU current task has switched to gate number 28. You can use kernel debugger command 'tss' to get information about this task gate. The command format for tss is !tss <task gate number> [flag] if any optional flag is specify, the detail information will be displayed. Because the task gate is linked together, you also can repeatly use the command to see the previous task, which is the task that overflowed the stack. kd> !tss 28 1 Task State Segment at 0x80132150 Previous Task Link   =   18 <--- **** previous task gate Esp0 = 8012ee30  SS0 =   10 Esp1 =        0  SS1 =    0 Esp2 =        0  SS2 =    0 CR3 (PDBR)           = 0008f000 I/O Map Base Address =   68, Debug Trap (T) = False Saved General Purpose Registers eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=00000000 edi=00000000 eip=8012afb8 esp=8012ee30 ebp=00000000 iopl=0         nv up di pl nz na pe nc vip=0    vif=0 cs=0008  ss=0010                                                 efl=00000000 8012afb8 fa               cli kd> !tss 18 1 Task State Segment at 0x801320E8 Previous Task Link   =    0 Esp0 =        0  SS0 =   10 Esp1 =        0  SS1 =    0 Esp2 =        0  SS2 =    0 CR3 (PDBR)           = 0008f000 I/O Map Base Address =   68, Debug Trap (T) = False Saved General Purpose Registers eax=d002bf1c ebx=d0072604 ecx=00000000 edx=00000025 esi=00000000 edi=d0072604 eip=d0036241 esp=d0071f78 ebp=d00721b0 iopl=0         nv up di pl nz na pe nc vip=0    vif=0 cs=0008  ss=0010                                                 efl=00010002 d0036241 53               push    ebx kd> kb=d00721b0 <--- **** start tracing stack begin from stack frame = d00721b0 ChildEBP RetAddr  Args to Child 8012edc8 8010fa36 00000003 00000008 00000000 xboxkrnl!RtlpBreakWithStatusInstruction d00721b0 d0036124 d00721c8 d002bf1c d0072210 xboxkrnl!KiBugCheckDebugBreak+0x31 d00721e8 d0035bbc d0072224 7fffffff d002bf1c xbdm!_vsnprintf+0x2c d0072200 d0030ea4 d0072224 d002bf1c d002b838 xbdm!sprintf+0x17 d0072294 d00314f1 00000002 d0072604 00000002 xbdm!SendDebugStrs+0x44 d00724b0 d00319d1 00000002 d0072604 d0072888 xbdm!NotifyComponents+0xb3 d0072614 80112f57 d00728dc 00000000 d0072888 xbdm!TrapHandler+0x2ed d0072870 8012abbe d0072888 00000000 d00728dc xboxkrnl!KiDispatchException+0x58 This is the stack where the overflow occured but it doesn't mean, from above, it's a bug in xbdm. This rather means the stack size of current thread was too small, you can use command '!thread' to see the thread start routine. From below, the thread stack size of xbdvd should be increased. kd> !thread THREAD d0025d58  tid: 34  RUNNING Owning Process d0011d78  XapiThread d0132ce8 WaitTime (seconds)      13289 Context Switch Count    1 KernelTime                0:00:00.0000 Start Address xbDVD!TimedFiberMutex__Enter (0x0042f1a5) Stack Current d0132cd0 Base d0133000 Limit d0072000 Priority 8 BasePriority 8 PriorityDecrement 0 DecrementCount 0 How to locate data in static TLS Statis TLS is very efficient but it makes debugging harder. The tip described here shows you how to locate data in static TLS array. Let say we are trying to locate thread's last error value for current thread. Because thread's last error value now moved to static TLS and the way static TLS works is that the linker sorts and merges all data that have __declspec(thread) attribute into one particular section and there is a special section for IMAGE_TLS_DIRECTORY (see PE format for this special section). First thing you need to do is to dump the TLS directory, which is located at _tls_used kd> dd default!_tls_used l4 <-- *** dump IMAGE_TLS_DIRECTORY 0040079c  0040fde0 0040fe6c 0040ebc0 0040fec0 The format of TLS directory is typedef struct _IMAGE_TLS_DIRECTORY {     DWORD   StartAddressOfRawData;     DWORD   EndAddressOfRawData;     DWORD   AddressOfIndex;             // PDWORD     DWORD   AddressOfCallBacks;         // PIMAGE_TLS_CALLBACK *     DWORD   SizeOfZeroFill;     DWORD   Characteristics; } IMAGE_TLS_DIRECTORY; Then locate the per-thread TLS data which is located in thread information block offset 4 (fs:[4]) for Xbox (kernel set this up for you when you call CreateThread) kd> dd fs:4 l1 0020:00000004  d006ddf0 Now we want to find last error code which is XapiLastErrorCode variable. Because the linker sorts and merges all __declspec(thread) data, we have to locate the offset of XapiLastErrorCode in TLS array. By using command ln to list symbol starting from StartAddressOfRawData to EndAddressOfRawData you should be able to find the offset of XapiLastErrorCode. kd> dd default!_tls_used l4 0040079c  0040fde0 0040fe6c 0040ebc0 0040fec0 kd> ln 0040fde0 (0040fde0)   default!_tls_start   |  (0040fde8)   default!XapiTlsSlots kd> ln 0040fde8 (0040fde8)   default!XapiTlsSlots   |  (0040fe68)   default!XapiLastErrorCode kd> ln 0040fe68 (0040fe68)   default!XapiLastErrorCode   |  (0040fe6c)   default!_tls_end kd> ? 0040fe68-0040fde0 Evaluate expression: 136 = 00000088 <-- *** offset of XapiLastErrorCode in TLS array is 0x88 From the above, the offset of XapiLastErrorCode is 0x88, now we have to index this offset into TLS array. Before doing that we also have to offset TLS array by AddressOfIndex of image TLS directory structure above kd> dd 0040ebc0 l1 <-- *** dump AddressOfIndex of IMAGE_TLS_DIRECTORY 0040ebc0  ffffffdb kd> ? d006ddf0 + (ffffffdb*4) <-- *** calculate offset of address TLS array Evaluate expression: -804856484 = d006dd5c kd> dd d006dd5c l1 d006dd5c  d006dd60 <-- *** this is the address of TLS array for current thread Now, we got the address of TLS array, for XapiLastErrorCode you just have to offset it kd> ? 0040fe68 - 0040fde0 Evaluate expression: 136 = 00000088 kd> dd d006dd60+88 l1 <-- *** dump TLS array at offset 0x88 (XapiLastErrorCode) d006dde8  00000005 You can see that last error for current thread is 5 (ERROR_ACCESS_DENIED) Useful Kernel Debugger Extensions !bcb  <address> Dump cache manager s Buffer Control Block kd> !bcb d0068c88   Bcb: d0068c88 (024) 00000002 PinCount (004) 00001000 ByteLength (008) 0 FileOffset (018) 1000 BeyondLastByte (020) 87f9d5d0 Vacb (028) d0068cb0 Resource (060) 849011a8 SharedCacheMap (064) c06c0000 BaseAddress  Not dirty !bugdump Dumps the bugcheck callback data. The example below shows the output from !bugdump command and because there is no bugcheck callback registered (using API KeRegisterBugCheckCallback), there is no data displayed. i386kd: A fatal system error has occurred. i386kd: Debugger entered on first try; Bugcheck callbacks have not been invoked. i386kd: A fatal system error has occurred. ntoskrnl!RtlpBreakWithStatusInstruction: 8042cf7c cc               int     3 eax=00000003 ebx=0000001e ecx=d0122dcc edx=00000000 esi=00000000 edi=d0122a20 eip=8042cf7c esp=d01229dc ebp=d0122a08 iopl=3         nv up ei pl zr na po nc cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00003246 ntoskrnl!RtlpBreakWithStatusInstruction: 8042cf7c cc               int     3 ChildEBP RetAddr  Args to Child d01229d8 8041a845 00000003 d0122a20 00000000 ntoskrnl!RtlpBreakWithStatusInstruction d0122a08 8041ad5b 00000003 004058d8 00000000 ntoskrnl!KiBugCheckDebugBreak+0x31 d0122d8c 8041a6dd 0000001e 00000000 00000000 ntoskrnl!KeBugCheckEx+0x2c9 d0122da8 004071b7 0000001e 00000000 00000000 ntoskrnl!KeBugCheck+0x11 d0122ddc 80441b45 00514bbe 00014f90 00000000 XAPI!XapipThreadStartup+0xb9 00000000 00000000 00000000 00000000 00000000 ntoskrnl!KiThreadStartup+0x15 80457aa0  0000001e 00000000 00000000 00000000 80457ab0  00000000 kd> !bugdump **** Dump of Bug Check Data **** !bushnd  [optional bus handler address] Dumps a HAL "BUS HANDLER" structure [address] if specified is the handler to be dumped. If not specified, dumps the list of handlers (brief). kd> !bushnd 87FBA974  bus 0, type Internal 87FBA894  bus 0, type InterfaceTypeUndefined 87FBA7D4  bus 1, type InterfaceTypeUndefined 87FBA714  bus 0, type Isa 87F9D3D4  bus 0, type PCI 87F9D234  bus 1, type PCI 87F68EF4  bus 2, type PCI !callback  [thread [callout number]] Dumps callback frames for specified thread kd> !callback 87f9de20 0 THREAD 87f9de20  tid 2c  Teb: 00000000 Callout#    ebp        esp        eip        trapframe     0       00000000   d0066000   00000000   00000000   <-- !kb !calldata Dumps call data hash table, requires special ntoskrnl.exe. For example, if compiling ntoskrnl with COLLECT_WAIT_SINGLE_CALLDATA defined kd> x nt!*calldata 8044f500  NT!KiWaitSingleCallData 8043ddd2  NT!ExInitializeCallData kd> !calldata NT!KiWaitSingleCallData **** Dump Call Performance Data For NT!KiWaitSingleCallData **** Loading data...   Number    Caller/Caller's Caller       1366  ntoskrnl!FatWaitSync+0x1a             ntoskrnl!FatCommonRead+0x9a0       1248  ntoskrnl!MiDispatchSystemCacheFault+0x1e8             ntoskrnl!MmAccessFault+0x38        531  ntoskrnl!FatWaitSync+0x1a             ntoskrnl!FatNonCachedIo+0x340        212  ntoskrnl!MmFlushSection+0x2ff             ntoskrnl!CcUnpinRepinnedBcb+0x7a        105  ntoskrnl!MmFlushSection+0x2ff             ntoskrnl!CcMapAndCopy+0x4e2              !cbreg  %HowToUseThis?% Dumps CardBus registers !cchelp Displays available command for cache manager debugger extension Cache Manager Debugger Extensions: bcb        [addr]               Dump Buffer Control Block scm        [addr]               Dump Shared Cache Map finddata   [FileObject Offset]  Find cached data at given offset in file object defwrites                       Dump deferred write queue !cpuinfo  [processor number | all] Dumps processor information kd> !cpuinfo CP F/M/S Manufacturer  MHz Update Signature Features  0 6,8,1 GenuineIntel  731 0000000d00000000 00002fff !cxr  <address> Dumps context record at specified address, see structure EXCEPTION_POINTERS for more information on exception context. HARNESS: Unhandled exception 0xc0000005, context = 0xD0172784 ntoskrnl!DbgBreakPoint: 8042cf70 cc               int     3 kd> !cxr 0xD0172784 CtxFlags: 00010017 eax=00000001 ebx=00000003 ecx=d0172b48 edx=00000000 esi=00000000 edi=80450e20 eip=8042cf7c esp=d0172b34 ebp=d0172d70 iopl=3         nv up ei pl zr na po nc vip=0    vif=0 cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00013246 8042cf7c cb               retf kd> !kb ChildEBP RetAddr  Args to Child d0172b30 8042d038 00000001 80450e20 003f00d4 ntoskrnl!RtlpBreakWithStatusInstruction d0172d70 00419819 004182ac 00000002 d0172da4 ntoskrnl!DbgPrint+0xb8 d0172d80 0040766b 00417ea0 00000002 00000000 XNET!DllEntryPoint+0x19 d0172da4 00407181 00000002 00000000 00000000 XAPI!XapiCallDllInitRoutines+0x7d d0172ddc 80441b45 00515809 d00d2d58 00000000 XAPI!XapipThreadStartup+0x83 00000000 00000000 00000000 00000000 00000000 ntoskrnl!KiThreadStartup+0x15 !db  <physical address> Dumps physical memory kd> !db 10000 #       10000  4e 45 5f 4e 4f 54 5f 50-52 45 53 45 4e 54 00 00  NE_NOT_PRESENT.. #       10010  45 52 52 4f 52 5f 49 4c-4c 45 47 41 4c 5f 45 4c  ERROR_ILLEGAL_EL #       10020  45 4d 45 4e 54 5f 41 44-44 52 45 53 53 00 00 00  EMENT_ADDRESS... !dbgprint Dumps the DbgPrint buffer, useful when connecting to remote kernel debugger kd> !dbgprint  RefCnt=0 Xe: Section .rsrc (72) RefCnt=0 Xe: Section .reloc (73) RefCnt=0 Xe: Section .text (74) RefCnt=0 Xe: Loading from page 169 Count=1 File=000ae000 Mem=004a9000 !dblink  <address> [count] [bias] Dumps a doubly-link list via its backward links. See structure LIST_ENTRY for more information. kd> x NT!KiWaitInListHead 8044f3f0  NT!KiWaitInListHead kd> !dblink 8044f3f0 8044f3f0  87fba29c 87588cbc 00000010 00000000 87588cbc  8044f3f0 8754827c 00005aeb 0d000008 87f87e7c  87f87c7c 87f8707c 0000000d 1200000d 87f8707c  87f87e7c 87fba29c 0000000d 1200000d 87fba29c  87f8707c 8044f3f0 0000000d 1200000d 0x17 entries dumped !dcs  %HowToUseThis?% Dumps PCI COnfigSpace !dflink  <address> [count] [bias] Dumps a doubly-link list via its forward links. See structure LIST_ENTRY for more information. kd> !dflink 8044f3f0 8044f3f0  87fba29c 87588cbc 00000010 00000000 87fba29c  87f8707c 8044f3f0 0000000d 1200000d 8741c31c  8754827c 86a9007c 00005aeb 04000008 8754827c  87588cbc 8741c31c 00005aeb 02000008 87588cbc  8044f3f0 8754827c 00005aeb 0d000008 0x17 entries dumped !dd  <physical address> Dumps physical memory kd> !dd 10000 #       10000  4e5f454e 505f544f 45534552 0000544e #       10010  4f525245 4c495f52 4147454c 4c455f4c #       10020  4e454d45 44415f54 53455244 00000053 !defwrites  %Doesn t work right now% Dump cache manager s deferred write queue !devobj  <device> Dump the device object and IRP queue, <device> can be a address or device name kd> !devobj cdrom0 Device object (87f69038) is for:  CdRom0 \Driver\Idex DriverObject 87f68838 Current Irp 00000000 RefCount 20 Type 00000002 Flags 00000050 Vpb 87f684c8 DevExt 87f690c4 DevObjExt 87f69100 ExtensionFlags (0x10000000)                              Unknown flags 0x10000000 Device queue is not busy. !dh  [option]  <base address> Dumps headers from an PE image based at address Option Information displayed Dump everything Dump file header Dump section headers kd> !drivers Loaded System Driver Summary Base       Code Size       Data Size       Driver Name       Creation Time 80400000  b5c40 ( 727 kb) 36b80 (218 kb) ntoskrnl.exe  Thu Jun 22 14:47:41 2000 d006b000  15360 (  84 kb)  1c60 (  7 kb)     cdfs.sys  Thu Jun 22 14:47:51 2000 00400000   3740 (  13 kb)  1820 (  6 kb)  harness.exe  Thu Jun 22 14:48:27 2000 00405200  11bc0 (  70 kb)   e40 (  3 kb)     XAPI.dll  Thu Jun 22 15:12:01 2000 00417ea0   f600 (  61 kb)  1340 (  4 kb)     XNET.DLL  Thu Jun 22 14:48:05 2000 00428a80   1b40 (   6 kb)   a80 (  2 kb)    tftpd.dll  Thu Jun 22 14:48:07 2000 TOTAL:   1b9500 (1765 kb)  c0fc0 ( 771 kb) (    0 kb     0 kb) kd> !dh -f 00428a80 File Type: DLL FILE HEADER VALUES      14C machine (i386)        5 number of sections 39528997 time date stamp Thu Jun 22 14:48:07 2000        0 file pointer to symbol table        0 number of symbols       E0 size of optional header     210E characteristics             Executable             Line numbers stripped             Symbols stripped             32 bit word machine !drivers  [flag] Display information about all loaded system modules Information displayed Display code and data size, driver name, and date/time Bit 0 set Display code and data size, resident and standby memory, driver name Bit 1 set Everything including driver entry point Bit 2 set Everything including PE image dump kd> !drivers 2 Loaded System Driver Summary Base       Code  Data  Locked  Resident  Standby  Loader Entry  Driver Name 80400000  b5c40  36b80      0     3b4        0    87fb5fa8      ntoskrnl.exe d006b000  15360   1c60      0      54        0    87b0c848          cdfs.sys 00545820   16e0    ba0      0       c        0    879a6268      timetest.dll 00547d20   3980    7c0      0      14        0    879a60c8        XMmAPI.dll 0054c100  13de0  1b240      0      c0        0    879a7ec8        devctl.dll TOTAL:   1b9500 (1765 kb)  c0fc0 ( 771 kb) ( 2604 kb     0 kb) !drvobj  <driver> [detail-level] Dumps a driver object Detail-level Information displayed Bit 0 Dumps out device objects owned by driver Bit 1 Dump out dispatch routines for driver kd> !drvobj \Driver\Idex 3 Driver object (87f68878) is for:  \Driver\Idex Driver Extension List: (id , addr) Device Object list: 87f69038  87f69db8  87f69ef8  87f68478 87f68738 Dispatch routines: [00] IRP_MJ_CREATE               80431502    ntoskrnl!IdexDriverIrpReturnSuccess [01] IRP_MJ_CREATE_NAMED_PIPE    8043151a    ntoskrnl!IdexDriverIrpNotSupported [02] IRP_MJ_CLOSE                80431502    ntoskrnl!IdexDriverIrpReturnSuccess [03] IRP_MJ_READ                 804314b2    ntoskrnl!IdexDriverReadWrite [04] IRP_MJ_WRITE                804314b2    ntoskrnl!IdexDriverReadWrite [05] IRP_MJ_QUERY_INFORMATION    8043151a    ntoskrnl!IdexDriverIrpNotSupported !eb  <physical address> <byte>  <byte, byte ,...> Modify physical memory !ed  <physical address> <byte>  <byte, byte ,...> Modify physical memory !exca  <BasePort>.<SktNum> %HowToUseThis?% Dumps CardBus ExCA registers !exqueue  [flag] Dumps the ExWorkerQueues Information displayed 1/2/4 Same as !thread/!process Only critical work queue Only delayed work queue Only hypercritical work queue kd> !exqueue Dumping ExWorkerQueue: 8044CB40 **** Critical WorkQueue( current = 0 maximum = 1 ) THREAD 87fba220  tid: 8  Teb: 00000000 WAIT THREAD 87f87020  tid: c  Teb: 00000000 WAIT THREAD 87f87e20  tid: 10  Teb: 00000000 WAIT THREAD 87f87c20  tid: 14  Teb: 00000000 WAIT THREAD 87f87a20  tid: 18  Teb: 00000000 WAIT **** Delayed WorkQueue( current = 0 maximum = 1 ) THREAD 87f87820  tid: 1c  Teb: 00000000 WAIT THREAD 87f87620  tid: 20  Teb: 00000000 WAIT THREAD 87f87420  tid: 24  Teb: 00000000 WAIT **** HyperCritical WorkQueue( current = 0 maximum = 1 ) THREAD 87f9d020  tid: 28  Teb: 00000000 WAIT !exr  <address> Dumps exception record at specified address, see structure EXCEPTION_POINTERS for more information on exception record kd> kb ChildEBP RetAddr  Args to Child d00c2784 004020c4 d00c2da8 004021fd d00c27b4 ntoskrnl!DbgBreakPoint d00c278c 004021fd d00c27b4 80438f2b d00c27bc harness!HarnessUnhandledExceptionFilter+0x20 d00c2da8 00407187 03490000 00000000 00000000 harness!TestRunnerThreadProc+0x132 d00c2ddc 80441c25 004020cb 03490000 00000000 XAPI!XapipThreadStartup+0x89 00000000 00000000 00000000 00000000 00000000 ntoskrnl!KiThreadStartup+0x15 kd> dd d00c27b4 l2 d00c27b4  d00c2b6c d00c2884 kd> !exr d00c2b6c Exception Record @ D00C2B6C: ExceptionAddress: 00554441 (devctl!StartTest+0x38)    ExceptionCode: c0000005   ExceptionFlags: 00000000 NumberParameters: 2    Parameter[0]: 00000000    Parameter[1]: 00000008 !exrlog Dumps exception log. Exception logging must be enabled to use this command (FLG_ENABLE_EXCEPTION_LOGGING bit in NtGlobalFlag) kd> !exrlog  0: ---------------------------------- ExceptionAddress: 8045e5c7 (ntoskrnl!NtSetInformationFile+0x381)    ExceptionCode: c000000d   ExceptionFlags: 00000001 NumberParameters: 0 Filter:  8045e96d (ntoskrnl!NtSetInformationFile+0x727) Handler: 8045e97e (ntoskrnl!NtSetInformationFile+0x738) Finally: ffffffff Disposition: -1 (Executed Handler) CtxFlags: 00010007 eax=87604188 ebx=87b3bac8 ecx=00000000 edx=00000015 esi=0345f01d edi=8760419d eip=8045e5c7 esp=d00d539c ebp=d00d5434 iopl=3         nv up ei ng nz na pe nc vip=0    vif=0 cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00003282 8045e5c7 834dfcff         or      dword ptr [ebp-0x4],0xff !filetime  <64-bit FILETIME> Dumps a 64-bit FILETIME as a human-readable time kd> !filetime 01c0000000000000  8/ 6/2000 15:42:36.637 (Pacific Daylight Time) !finddata  <file object> <offset> Dumps the cache contents for a given file object at the given offset kd> !finddata 8760ef68 0   FindData for FileObject 8760ef68   Section Object Pointers: 8760eca8   Shared Cache Map: 87604ac8         File Offset: 0 in VACB number 0   Vacb: 87f604d8   Your data is at: c0480000 kd> !finddata 8760ef68 40000   FindData for FileObject 8760ef68   Section Object Pointers: 8760eca8   Shared Cache Map: 87604ac8         File Offset: 40000 in VACB number 1   Data at offset 40000 not mapped !frag  [flags] Dumps kernel mode pool fragmentation Flags Information displayed Lists all fragment information Lists allocation information Lists both kd> !frag 3   NonPaged Pool Fragmentation index:  0 number of fragments:    53  bytes:   1696  ListHead[1]: 80077520 size:   40 previous size:   20  Io Number of fragments:      62 consuming    4992 bytes  NonPagedPool Usage:   106496 bytes !gentable  %HowToUseThis?% !gflag Dumps current settings for NtGlobalFlag kd> !gflag NtGlobalFlag at 8044dca8 Current NtGlobalFlag contents: 0x00c40000     ksl - Enable loading of kernel debugger symbols     ece - Enable Close Exception     eel - Enable Exception Logging !handle  [addr  [flags] [TypeName]] Dumps handle for a process Flags Information displayed Bit 0 Dumps handles Bit 1 Dumps the object Bit 2 Dumps free handles kd> !handle -1 3 File Searching for handles of type File PROCESS 87fbdc40     DirBase: 00030000  ObjectTable: 87fb5ee8  TableSize:  21.     Image: System Process Handle Table at 87fba000 with 21 Entries in use 0054: Object: 87b3b2c8  GrantedAccess: ffffffff Object: 87b3b2c8  Type: (87f6bb48) File     ObjectHeader: 87b3b2b0         HandleCount: 1  PointerCount: 2         Directory Object: 00000000  Name: \ {CdRom0} !help Displays commands list (not always up to date) !ib  <port> Read a byte from an I/O port !id  <port> Read a double-word from an I/O port !iw  <port> Read a double-word from an I/O port !irp  <address> [dump level] Dumps the specified IRP (Interrupt Request Packet), see structure IRP for more information Dump Level Information displayed Basic stack info Full field dump Include tracking information (checked only) ChildEBP RetAddr  Args to Child d00d2b00 804314ea 87f69038 86604168 d00d2b58 ntoskrnl!IdexCdRomDeviceControl d00d2b10 804acdff 87f69038 86604168 86604168 ntoskrnl!IdexDriverDeviceControl+0x10 d00d2b58 80461c3d d010854b 00000000 86604168 ntoskrnl!IovSpecialIrpCallDriver+0xda kd> !irp 86604168 Irp is active with 2 stacks 2 is current (= 0x866041fc)  No Mdl System buffer = d0103000 Thread 87606240:  Irp stack trace.      cmd  flg cl Device   File     Completion-Context  [  0, 0]   0  0 00000000 00000000 00000000-00000000                         Args: 00000000 00000000 00000000 00000000 >[  e, 0]   0  0 87f69038 87915428 00000000-00000000                \Driver\Idex                         Args: 00006167 0000554b 00024038 00000000 !irpfind  %Doesn tWorkRightNow% !iw  <port> Read a double-word from an I/O port Dumps stack trace on previous frame command (!trap, !cxr), see !trap and !cxr for more information HARNESS: Unhandled exception 0xc0000005, context = 0xD0172784 ntoskrnl!DbgBreakPoint: 8042cf70 cc               int     3 kd> !cxr 0xD0172784 CtxFlags: 00010017 eax=00000001 ebx=00000003 ecx=d0172b48 edx=00000000 esi=00000000 edi=80450e20 eip=8042cf7c esp=d0172b34 ebp=d0172d70 iopl=3         nv up ei pl zr na po nc vip=0    vif=0 cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00013246 8042cf7c cb               retf kd> !kb ChildEBP RetAddr  Args to Child d0172b30 8042d038 00000001 80450e20 003f00d4 ntoskrnl!RtlpBreakWithStatusInstruction d0172d70 00419819 004182ac 00000002 d0172da4 ntoskrnl!DbgPrint+0xb8 d0172d80 0040766b 00417ea0 00000002 00000000 XNET!DllEntryPoint+0x19 d0172da4 00407181 00000002 00000000 00000000 XAPI!XapiCallDllInitRoutines+0x7d d0172ddc 80441b45 00515809 d00d2d58 00000000 XAPI!XapipThreadStartup+0x83 00000000 00000000 00000000 00000000 00000000 ntoskrnl!KiThreadStartup+0x15 !kuser Dumps the shared user mode page (KUSER_SHARED_DATA) kd> !kuser KUSER_SHARED_DATA at ffdf0000 TickCount:    a03afb7 * 00077bbe TimeZone Id: 0 ImageNumber Range: [14c .. 14c] Crypto Exponent: 0 SystemRoot: 'C:\WINNT' Under Xbox !kv and !kb is similar, please see !kb for more information kd> !trap D00D02F8 eax=00000001 ebx=00000000 ecx=87658c20 edx=00000014 esi=00000000 edi=00000014 eip=0040b27a esp=d00d036c ebp=d00d03a8 iopl=3         nv up ei pl zr na po nc vip=0    vif=0 cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00013246 ErrCode = 00000002 0040b27a ff4204           inc     dword ptr [edx+0x4] kd> !kv ChildEBP RetAddr  Args to Child d00d0368 0040fbb0 00000014 d00d1754 00000001 XAPI!RtlEnterCriticalSection+0xa d00d03a8 004566f5 00000000 d00d0660 00455e1c XAPI!FindClose+0x56 d00d03b4 00455e1c 00000001 0040fb5a d00d046c badman!CallAPI+0x26 d00d0660 004564ab d00d0adc 00000001 00000001 badman!GenParm+0x2c8 d00d0944 00455819 d00d0adc 00000000 00000001 badman!GenParm+0x957 d00d1090 0045474d d00d1754 d00d1800 d00d2b90 badman!ProcessAPI+0x39c d00d17d4 0045304a d00d1800 d00d2678 d00d2b90 badman!Parse+0x112a d00d2d94 00452cd0 00000004 00000002 034a0d28 badman!badman_main+0x28d d00d2da8 00407187 d00c2d5c 00000000 00000000 badman!BadmanThreadProc+0x13 d00d2ddc 80441c25 00452cbd d00c2d5c 00000000 XAPI!XapipThreadStartup+0x89 00000000 00000000 00000000 00000000 00000000 ntoskrnl!KiThreadStartup+0x15 !locks  [-v | -p]  [address] Dumps kernel mode resource locks. Uses  v for verbose mode, -p for performance data kd> !locks **** DUMP OF ALL RESOURCE OBJECTS **** KD: Scanning for held locks..... 158 total locks Dumps processors machine check architecture registers and interprets any logged errors. This command is not application for Xbox kd> !mca 1 MCA: Disabled, Banks 5, Control Reg: Not Supported, Machine Check: None. Bank  Error  Control Register     Status Register   0.  None   0x00000000cd040000   0x1000000000000000   1.  None   0x0000000000000000   0x0000000000000000   2.  None   0x0034460000344600   0x0000000000000000   3.  None   0x0000000000000000   0x0000000000000000   4.  None   0x0000000000000000   0x2200000000000011 CP F/M/S Manufacturer  MHz Update Signature Features  0 6,8,1 GenuineIntel  730 0000000d00000000 00002fff Dumps FNSAVE area format of NPX state, not very useful unless you are debugging floating point related code !qlocks Dumps kernel mode queued spinlock status kd> !qlocks Key: O = Owner, 1-n = Wait order, blank = not owned/waiting, C = Corrupt                        Processor Number     Lock Name      0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 KE - Dispatcher KE - Context Swap MM - PFN MM - System Space CC - Vacb CC - Master !lookaside  [address] Dumps lookaside lists kd> x NT!FatIrpContextLookasideList 80450ba0  NT!FatIrpContextLookasideList kd> !lookaside 80450ba0 Lookaside "" @ 80450ba0 "FatI"     Type     =     0010 NonPagedPool RaiseIfAllocationFailure     Current Depth  =        2   Max Depth  =        4     Size           =       68   Max Alloc  =      272     AllocateMisses =        2   FreeMisses =        0     TotalAllocates =    12597   TotalFrees =    12597     Hit Rate       =       99%  Hit Rate   =      100% !memusage Dumps memory usage information kd> !memusage  32605  Total number of pages (127 MB)  29745  Available number of pages (118980 KB)      0 pages  MmUnknownUsage (0 KB)      0 pages  MmInaccessibleUsage (0 KB)     14 pages  MmPageDirectoryUsage (56 KB)      2 pages  MmSystemPageDirectoryUsage (8 KB)     62 pages  MmNonPagedPoolUsage (248 KB)     17 pages  MmPagedPoolUsage (68 KB)   1163 pages  MmVirtualMemoryUsage (4652 KB)      6 pages  MmSystemMemoryUsage (24 KB)     22 pages  MmImageUsage (88 KB)    108 pages  MmStackUsage (432 KB)   1208 pages  MmCacheUsage (4832 KB) !ob  <port> Writes a byte to an I/O port !obja  <address> Dumps an object's attributes, see structure POBJECT_ATTRIBUTES for more information kd> kb 3 ChildEBP RetAddr  Args to Child d00cff7c 0040cb3d d00d0008 80100080 d00cffbc ntoskrnl!NtCreateFile d00d0000 0048153b 0047a6fc 80000000 00000001 XAPI!CreateFileW+0x16f d00d002c 00480ef2 0000005c d00d01d8 034a0d28 setcln!FIOLpstrCleanup+0x258 kd> !obja d00cffbc Obja +d00cffbc at d00cffbc:         Full Name is \??\z:\abcdefg.abc         OBJ_CASE_INSENSITIVE !object  <type names | address> Dumps an object manager object kd> !object \objecttypes\file Object: 87f68b48  Type: (87fb5da8) Type     ObjectHeader: 87f68b30     HandleCount: 0  PointerCount: 1     Directory Object: 87fba518  Name: File Writes a double-word to an I/O port Writes a word to an I/O port Dumps a processor PAT kd> !pat PAT_Index PCD PWT     Memory Type 0         0   0       WB 0         0   1       USWC 0         1   0       WEAK_UC 0         1   1       STRONG_UC 1         0   0       WB 1         0   1       USWC 1         1   0       WEAK_UC 1         1   1       STRONG_UC !patch Enable/disable various IRP debugging, enter !patch to see available options kd> !patch Category: WDM Driver Correctness --------------------------------   !Patch Irps - Assert IRP usage is correct   !Patch IrpTrack - Monitor IRPs for mistakes Category: Plug-n-Play Options -----------------------------   !Patch PnpQueue - Shows Pnp remove information.   !Patch HalPnpVerbose - Turn on Hal Pnp Verbose Output. Selecting an indented assert automatically enables all higher asserts Type !Patch <assertname>? to get more information on an assert. Dumps PCI type2 configuration data kd> !pci PCI Bus 0 00:0  8086:2501.03  Cmd[0106:.mb..s]  Sts[2010:c....]  Device  Host bridge 01:0  8086:250f.03  Cmd[0107:imb..s]  Sts[0020:.6...]  PciBridge 0->1-1  PCI-PCI bridge 1e:0  8086:2418.02  Cmd[0107:imb..s]  Sts[0080:.....]  PciBridge 0->2-2  PCI-PCI bridge 1f:0  8086:2410.02  Cmd[010f:imb..s]  Sts[0280:.....]  Device  ISA bridge 1f:1  8086:2411.02  Cmd[0005:i.b...]  Sts[0280:.....]  Device  SubID:8086:2411  IDE !pcm  %Doesn tWorkRightNow% Dumps private cache map structure Prints out the current values in interesting fields of the PCR kd> !pcr PCR Processor 0 @ffdff000         NtTib.ExceptionList: d00d00bc             NtTib.StackBase: d00d2df0            NtTib.StackLimit: d00c4000          NtTib.SubSystemTib: 00000000               NtTib.Version: 00000000           NtTib.UserPointer: 00000000               NtTib.SelfTib: 00000000                     SelfPcr: ffdff000                        Prcb: ffdff120                        Irql: 00000000                         IRR: 00000000                         IDR: ffffbcfa               InterruptMode: 00000000                         IDT: 80036400                         GDT: 80036000                         TSS: 80003000               CurrentThread: 87658c20                  NextThread: 00000000                  IdleThread: 80445a70                   DpcQueue: !pfn  <index> Dumps PFN database kd> !pfn 70 00070 Free                 blink=00110    flink=00050 Dumps PIC (Programmable Interrupt Controller) information kd> !pic ----- IRQ Number ----- 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F Physically in service:  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . Physically masked:      .  Y  .  Y  Y  Y  Y  Y  .  .  Y  Y  Y  Y  .  Y Physically requested:   Y  .  Y  .  .  .  .  .  .  Y  .  .  .  .  .  . !pool  %Doesn tWorkRightNow% Dumps pool information !poolfind  %Doesn tWorkRightNow% Searchs pools for a specified pool tag !poolused  [flags] Dumps pool usage by pool tag. Flags can be 2 or 4 to dump by paged or non-paged pool usage kd> !poolused 2    Sorting by NonPaged Pool Consumed   Pool Used:             NonPaged            Paged  Tag    Allocs     Used    Allocs     Used  Pool        3    85184         0        0  CcBz       15    69632         0        0  Hal        15     9728         0        0 !process  [flags] [image name] Dumps process at specified address or dumps only the process with specified image name if given Flags Detail Level Don't stop after cid/image information Dump thread wait states Dump only thread states, combine with 2 to get stack !processfields Show offsets to all fields in a process kd> !processfields  EPROCESS structure offsets:     Pcb:                               0x0     LockEvent:                         0x38     LockCount:                         0x48     LockOwner:                         0x4c     ObjectTable:                       0x50     VadRoot:                           0x54     VadHint:                           0x58     LastThreadExitStatus:              0x60     DefaultHardErrorProcessing         0x64     VadFreeHint:                       0x5c Dumps page table entry, see Intel processor manual for more information about page table kd> !pte 8791b448 va 8791B000:  PDE 07800 ----LDA---WV !ptov  <PDE address> Dumps all physical to virtual translations for a given process !ready Searches for threads that are in ready state !reghash Dumps registry hash. This command is not applicable for Xbox !regkcb Dumps the name when given a KCB address. This command is not applicable for Xbox since there is no registry under Xbox !regpool This command is not applicable for Xbox !scm  <address> %HowToUseThisCommand?% Dumps cache manager share cache map !search  %Doesn tWork% Search the physical pages in range [START_PFN..END_PFN] !stacks  [detail-level] Dump summary of current kernel stacks Detail Level Information displayed Display stack summary Display stacks, no parameters Display stacks, full parameters kd> !stacks Thread  Thread   ThreadState  Blocker 000008  87fba240  BLOCKED      ntoskrnl!ExpWorkerThread+0x72 00000c  87f87020  BLOCKED      ntoskrnl!ExpWorkerThread+0x72 000044  875a8d80  BLOCKED      ntoskrnl!KiSuspendThread+0x29 000048  875a8b80  BLOCKED      ntoskrnl!KiSuspendThread+0x29 00004c  875a8980  BLOCKED      ntoskrnl!KeDelayExecutionThread+0x1a0 !thread !threadfields Show offsets to all fields in a thread kd> !threadfields  ETHREAD structure offsets:     Tcb:                           0x0     CreateTime:                    0x168     ExitTime:                      0x170     ExitStatus:                    0x178     ReaperListEntry:               0x17c     ActiveTimerListHead:           0x184     IrpList:                       0x198     TopLevelIrp:                   0x1a0     ReadClusterSize:               0x1a8     ForwardClusterOnly:            0x1ac     DisablePageFaultClustering:    0x1ad     DeadThread:                    0x1ae     HasTerminated:                 0x1b0     StartAddress:                  0x1b4     HardErrorsAreDisabled:         0x1af !time !timer !trap !vad  [address [flag]] Dumps specified VAD or all VADs for process. If no argument is specified, all VADs will be displayed. If flag is non-zero, only one VAD will be displayed, otherwise all VADs below address will be displayed. kd> !vad 875d48a8 VAD     level      start      end 875d48a8 ( 0)       34e0     34e0 875d4fe8 ( 1)       34f0     3500 875d4568 ( 2)       3510     360f 875d40c8 ( 3)       3610     361f Total VADs:     4  average level:    2  maximum depth: 3 kd> !vad 875d48a8 1 VAD @ 875d48a8   Start VPN:          34e0  End VPN:     34e0 !verifier  [detail-level [module name]] Displays information about drivers verifier Detail-level Information displayed Summary only Bit 0 Display paged and non-paged pool usage Bit 1 Display pool allocation tracking  kd> !verifier 3 xapi.dll Verify Level 1b ... enabled options are:         special pool         special irql         all pool allocations checked on unload         Io subsystem checking enabled Summary of All Verifier Statistics RaiseIrqls                             0x0 AcquireSpinLocks                       0x0 Synch Executions                       0x0 Trims                                  0x0 Pool Allocations Attempted             0xae Pool Allocations Succeeded             0xae Pool Allocations Succeeded SpecialPool 0x0 Pool Allocations With NO TAG           0x9e Pool Allocations Failed                0x0 Pool Allocations Failed Deliberately   0x0 Current paged pool allocations         0x15 for 16f8 bytes Peak paged pool allocations            0x15 for 16f8 bytes Current nonpaged pool allocations      0xd for 498 bytes Peak nonpaged pool allocations         0xd for 498 bytes Driver Verification List XAPI.dll (879fe008) NonPagedPool=0, PagedPool=16f8: loaded Paged Pool Usage Peak      : 0x00000015 allocations 0x000016f8 bytes Paged Pool Usage Current   : 0x00000015 allocations 0x000016f8 bytes NonPaged Pool Usage Peak   : 0x00000000 allocations 0x00000000 bytes NonPaged Pool Usage Current: 0x00000000 allocations 0x00000000 bytes PoolAddress  SizeInBytes    Tag       CallersAddress 87AF4248     0x00000118     Wrap      00407139 8007A8C8     0x00000118     Wrap      00407139 87563DC8     0x00000118     Wrap      00407139 875852A8     0x00000118     Wrap      00407139 87563CA8     0x00000118     Wrap      00407139 !version Displays version information of kernel debugger extension. kd> !version Checked Extension dll for Build 3031 debugging Checked kernel for Build 3031 !vtop !zombies  <flag>  <address>  %Doesn t work right now% Find all zombie threads. For Xbox flag must have second bit set (e.g. 2). Address is start searching address
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\MCPP TEST Procedure.pdf ===
%PDF-1.2 44 0 obj /Linearized 1  /O 46  /H [ 702 270 ]  /L 79932  /E 5777  /N 8  /T 78934  endobj                                                             xref 44 15  0000000016 00000 n 0000000647 00000 n 0000000972 00000 n 0000001126 00000 n 0000001285 00000 n 0000001470 00000 n 0000002127 00000 n 0000002318 00000 n 0000002525 00000 n 0000003076 00000 n 0000003256 00000 n 0000003454 00000 n 0000005548 00000 n 0000000702 00000 n 0000000951 00000 n trailer /Size 59 /Info 43 0 R  /Root 45 0 R  /Prev 78924  /ID[<12b54d40737ca2efff1ccc32f53b2032><12b54d40737ca2efff1ccc32f53b2032>] startxref %%EOF       45 0 obj /Type /Catalog  /Pages 42 0 R  endobj 57 0 obj << /S 173 /Filter /FlateDecode /Length 58 0 R >>  stream b```f`` endstream endobj 58 0 obj endobj 46 0 obj /Type /Page  /Parent 42 0 R  /Resources 47 0 R  /Contents 55 0 R  /MediaBox [ 0 0 612 792 ]  /CropBox [ 0 0 612 792 ]  /Rotate 0  endobj 47 0 obj /ProcSet [ /PDF /Text ]  /Font << /TT2 49 0 R /TT4 51 0 R /TT6 52 0 R >>  /ExtGState << /GS1 56 0 R >>  /ColorSpace << /Cs5 53 0 R >>  endobj 48 0 obj /Type /FontDescriptor  /Ascent 923  /CapHeight 0  /Descent -282  /Flags 34  /FontBBox [ -136 -311 1154 1036 ]  /FontName /BookAntiqua  /ItalicAngle 0  /StemV 0  endobj 49 0 obj /Type /Font  /Subtype /TrueType  /FirstChar 32  /LastChar 186  /Widths [ 250 0 0 0 0 833 0 0 333 333 0 564 250 333 250 278 500 500 500 500  500 500 500 500 500 500 278 278 564 564 0 444 0 722 667 667 722  611 556 722 722 333 0 722 611 889 722 722 556 0 667 556 611 722  722 944 0 722 0 0 0 0 0 500 0 444 500 444 500 444 333 500 500 278  278 500 278 778 500 500 500 500 333 389 278 500 500 722 500 500  444 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 444 444 0 500  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 549 0 0 0 576  0 0 0 0 310 ]  /Encoding /WinAnsiEncoding  /BaseFont /TimesNewRomanPSMT  /FontDescriptor 50 0 R  endobj 50 0 obj /Type /FontDescriptor  /Ascent 891  /CapHeight 0  /Descent -216  /Flags 34  /FontBBox [ -568 -307 2028 1007 ]  /FontName /TimesNewRomanPSMT  /ItalicAngle 0  /StemV 0  endobj 51 0 obj /Type /Font  /Subtype /TrueType  /FirstChar 49  /LastChar 56  /Widths [ 500 500 500 500 500 500 500 500 ]  /Encoding /WinAnsiEncoding  /BaseFont /BookAntiqua  /FontDescriptor 48 0 R  endobj 52 0 obj /Type /Font  /Subtype /TrueType  /FirstChar 32  /LastChar 147  /Widths [ 250 0 0 0 0 0 0 0 333 333 0 0 0 333 250 0 500 500 500 500 500 500  500 500 500 500 333 0 0 0 0 0 0 722 667 722 722 667 611 778 778  389 500 0 667 944 722 778 611 778 722 556 667 722 722 1000 0 0 0  0 0 0 0 500 0 500 556 444 556 444 333 500 556 278 0 556 278 833  556 500 556 556 444 389 333 556 500 0 0 500 444 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 500 ]  /Encoding /WinAnsiEncoding  /BaseFont /TimesNewRomanPS-BoldMT  /FontDescriptor 54 0 R  endobj 53 0 obj /CalRGB << /WhitePoint [ 0.9505 1 1.089 ] /Gamma [ 2.22221 2.22221 2.22221 ]  /Matrix [ 0.4124 0.2126 0.0193 0.3576 0.71519 0.1192 0.1805 0.0722 0.9505 ] >>  endobj 54 0 obj /Type /FontDescriptor  /Ascent 891  /CapHeight 0  /Descent -216  /Flags 34  /FontBBox [ -558 -307 2034 1026 ]  /FontName /TimesNewRomanPS-BoldMT  /ItalicAngle 0  /StemV 133  endobj 55 0 obj << /Length 2019 /Filter /FlateDecode >>  stream  iF.' d?N|@ p7_.![ mMX{L JsR4pSv}[ 8NB&/ EWZ29 l}ba; XpZbg R-WMK RhSgi rzbg96|H(w Qsz4Fb RVdtp endstream endobj 56 0 obj /Type /ExtGState  /SA false  /SM 0.02  /TR /Identity  endobj 1 0 obj /Type /Page  /Parent 42 0 R  /Resources 2 0 R  /Contents 3 0 R  /MediaBox [ 0 0 612 792 ]  /CropBox [ 0 0 612 792 ]  /Rotate 0  endobj 2 0 obj /ProcSet [ /PDF /Text ]  /Font << /F2 35 0 R /TT2 49 0 R /TT4 51 0 R /TT6 52 0 R /TT8 36 0 R >>  /ExtGState << /GS1 56 0 R >>  /ColorSpace << /Cs5 53 0 R >>  endobj 3 0 obj << /Length 6532 /Filter /FlateDecode >>  stream ZK>5S2A LISL' )na|rm dA\Xq JVhDhj ^2L9aI E}ZGt /DaY' (,+DQb3Q =IogG xIogV 9oZ%zM{*EG f7<40 -;sHl q8XWQ sTi]z ^ZczRU 7z]VE/ )%<s* z;8B+ -%<C+ wq(%cP kJlwa endstream endobj 4 0 obj /Type /Page  /Parent 42 0 R  /Resources 5 0 R  /Contents 6 0 R  /MediaBox [ 0 0 612 792 ]  /CropBox [ 0 0 612 792 ]  /Rotate 0  endobj 5 0 obj /ProcSet [ /PDF /Text ]  /Font << /TT2 49 0 R /TT4 51 0 R /TT6 52 0 R >>  /ExtGState << /GS1 56 0 R >>  /ColorSpace << /Cs5 53 0 R >>  endobj 6 0 obj << /Length 7312 /Filter /FlateDecode >>  stream axu>98-Hs/ t3[3R )V`vm jA7c{ sk[dr17 7IC+8" U(g c o7_-< 5rA[. n2LC<1L nOA!K "q9g*z K6wnejm `%YhB a1TZ[m WVbXg% 1F[]a rH1WiD6oL Dy^@*l7IvI 7<Q+^ x3aYt w=`oQ Fy'6N v-i u endstream endobj 7 0 obj /Type /Page  /Parent 42 0 R  /Resources 8 0 R  /Contents 9 0 R  /MediaBox [ 0 0 612 792 ]  /CropBox [ 0 0 612 792 ]  /Rotate 0  endobj 8 0 obj /ProcSet [ /PDF /Text ]  /Font << /TT2 49 0 R /TT4 51 0 R /TT6 52 0 R >>  /ExtGState << /GS1 56 0 R >>  /ColorSpace << /Cs5 53 0 R >>  endobj 9 0 obj << /Length 5311 /Filter /FlateDecode >>  stream H=Uwu} !}wL_ /WSg| HKoH  /t-0U zq.]} ^k^0/ b+t=k\ A/Nu|ruz +1p*q g@h}b u5O~: ,GCi& qXVH  Q3kEu :!$Fw &Dusa( -<dsC endstream endobj 10 0 obj /Type /Page  /Parent 42 0 R  /Resources 11 0 R  /Contents 12 0 R  /MediaBox [ 0 0 612 792 ]  /CropBox [ 0 0 612 792 ]  /Rotate 0  endobj 11 0 obj /ProcSet [ /PDF /Text /ImageC ]  /Font << /TT2 49 0 R /TT4 51 0 R /TT6 52 0 R >>  /XObject << /Im1 13 0 R /Im2 14 0 R /Im3 15 0 R /Im4 16 0 R /Im5 17 0 R /Im6 18 0 R  /Im7 19 0 R /Im8 20 0 R /Im9 21 0 R /Im10 22 0 R /Im11 23 0 R /Im13 24 0 R  /Im14 25 0 R >>  /ExtGState << /GS1 56 0 R >>  /ColorSpace << /Cs5 53 0 R >>  endobj 12 0 obj << /Length 33833 /Filter /FlateDecode >>  stream gO3qeL xoL~H Z1+u{i ;03d| %dZ"~] ~SOMIX $89KB $D9K` $99KR f1K,| z{1KB ,Ao/fI2r Y2z9K Y2&9K '<yT` Tk5E. a;+N7; 4C(Q{f <\3(Q R\3({ ^\3(Q nLRwc nLRwc nLRwc nLRwc nLRwc $u7$;u7& nLRwc XsmE_~ M@$+M@&i $M@&i $M@&i OgmD> }|8~u3M K}}zs /K)ZM R9l;J $E<W#) S.g=U.g +WdCW 1N4#x fHM5Cv {kf04j {kf04j 4%2viJd" ]bCalk )q6TP! +q64U! HqFSU cJ)zLA Ly:/S fHI5C* D38$j D38$j 538$j bT3 { d"MN:"MNz"MNF"MN&"MNf"MNV"MJZC 4%24iJd$ (MNZ"MN 64iJdl 7iJd  a(Oga ZE38$j !{kfpH M3D%j =3D%j R]3(Q{fH !){{fHS2 I*oLRyc I*oLRyc I*oHf*oLRyc I*oLRyc I*oLRyc I*oLRyc L. M$ !+p{f 4-2wiZd gZ[_H_ 5PI.Z  hHy: 4C^\3 5CY\3 R\3(y !*Q{f !*Q{f !*{{f R]3(Q{fH !){{fHS2 IjnHFjnLRsc IjnLRsc IjnLRsc IjnHVjnLRsc IjnLRsc })t?% ,`L&g0& D2L`L&# !+m{f !wcZd 1-2ucZd u<}a@ \U3xI 4%2OiJd iJS"3H l)*q6o 3^6;n c,o^; !8fn? 4C({{f ^\3(Q a]\3({ !+Q?7C I*oLRyc I*oLRyc I*oLRyc I*oH6*oLRyc I*oLRyc I*oLRy+3N (p{f(y1 4-26iZd Y7iZd jZ!)YxZH9L/ 4C^]3 5C]\3 5C[]3 4C(Q{f 2\3(Q Z\3({ Q\3(Q Z\3(Q yYL3deo I*oLRyc I*oLRyC I*oLRyc I*oLRyc *oLRyc  M&3H  M&3H q\Qx?O -v+*` x?~y= S@&L)b ]E3 w sXwszE q\Qt? nLRwc nLRwc nLRwc L&7p& (o{f( M@$+M@&i $M@&i $M@&i $M@$7 _0CzN&0CZ Y}|I[s [l{$! M*)?q %ycsX 9m_9]_ ,WLd3WLf \4f+. =3$%j =3$%j M3$eo <\3(Q R\3({ ]3(Q{f I*oLRyc I*oHf*oLRyc I*oLRyc I*oLRyC I*oLRyc I*oLRyc I*oLRyc I*oHF*oLRyc I*oLRyc 4C]\3({ _?<o[ f[$*{ .Y2P}m &gyar &gyar &gyar &e3/L &gyar &gyar &gyar &e;/L K2:@vI* eX{{A  bch: PL5CI f(E5Ci P]5C- +Z4C3 CZ4C+ cZ4C7 a{kf0,j aQkf0k D3$lo !cQkf TT3`{ c{kfp,j cQkfp3 Sxuq8}< 7q|7s >_^.s endstream endobj 13 0 obj << /Type /XObject /Subtype /Image /Width 2 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 18 /Filter /FlateDecode >>  stream endstream endobj 14 0 obj << /Type /XObject /Subtype /Image /Width 2 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 18 /Filter /FlateDecode >>  stream jUhh(@ endstream endobj 15 0 obj << /Type /XObject /Subtype /Image /Width 2 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 18 /Filter /FlateDecode >>  stream b``8s endstream endobj 16 0 obj << /Type /XObject /Subtype /Image /Width 2 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 18 /Filter /FlateDecode >>  stream endstream endobj 17 0 obj << /Type /XObject /Subtype /Image /Width 2 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 18 /Filter /FlateDecode >>  stream endstream endobj 18 0 obj << /Type /XObject /Subtype /Image /Width 2 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 15 /Filter /FlateDecode >>  stream endstream endobj 19 0 obj << /Type /XObject /Subtype /Image /Width 1 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 15 /Filter /FlateDecode >>  stream endstream endobj 20 0 obj << /Type /XObject /Subtype /Image /Width 2 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 18 /Filter /FlateDecode >>  stream endstream endobj 21 0 obj << /Type /XObject /Subtype /Image /Width 2 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 18 /Filter /FlateDecode >>  stream endstream endobj 22 0 obj << /Type /XObject /Subtype /Image /Width 1 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 15 /Filter /FlateDecode >>  stream endstream endobj 23 0 obj << /Type /XObject /Subtype /Image /Width 1 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 14 /Filter /FlateDecode >>  stream endstream endobj 24 0 obj << /Type /XObject /Subtype /Image /Width 1 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 14 /Filter /FlateDecode >>  stream endstream endobj 25 0 obj << /Type /XObject /Subtype /Image /Width 1 /Height 1 /BitsPerComponent 8  /ColorSpace 53 0 R /Length 14 /Filter /FlateDecode >>  stream endstream endobj 26 0 obj /Type /Page  /Parent 42 0 R  /Resources 27 0 R  /Contents 28 0 R  /MediaBox [ 0 0 612 792 ]  /CropBox [ 0 0 612 792 ]  /Rotate 0  endobj 27 0 obj /ProcSet [ /PDF /Text ]  /Font << /TT2 49 0 R /TT4 51 0 R /TT6 52 0 R >>  /ExtGState << /GS1 56 0 R >>  /ColorSpace << /Cs5 53 0 R >>  endobj 28 0 obj << /Length 8135 /Filter /FlateDecode >>  stream 7ldLM ?p6N}w}z  `9mB +@3*ji \kw|d TcU4WX5 n1P_h ZuJh= $Fmir mdWVfv nsWC<qWLZ Ik2s# Rp[t\ G&r<# S3Y^< ss5i y m;:%& aeR,g 1Cc{$& 6&h(f m3oej dI@S# pOtCt Y-gkM-k I-gsM-+ 8k)a% {rik$Z PWS`~ G.RJU AG8hyc 7]KhO uCO&:b/ [JM+o| JFxW, mY0eXd (.opi +y1<f/ m[JNo ,3/pi V=#(/ endstream endobj 29 0 obj /Type /Page  /Parent 42 0 R  /Resources 30 0 R  /Contents 31 0 R  /MediaBox [ 0 0 612 792 ]  /CropBox [ 0 0 612 792 ]  /Rotate 0  endobj 30 0 obj /ProcSet [ /PDF /Text ]  /Font << /F2 35 0 R /TT2 49 0 R /TT4 51 0 R /TT6 52 0 R /TT8 36 0 R >>  /ExtGState << /GS1 56 0 R >>  /ColorSpace << /Cs5 53 0 R >>  endobj 31 0 obj << /Length 2541 /Filter /FlateDecode >>  stream 5=l>L>Yg cT$or oZJo% SJxsv ^OaUAY " l#  D@luL ?U4M;v! or@yAg ]U}m^C VCxXR "!VEL endstream endobj 32 0 obj /Type /Page  /Parent 42 0 R  /Resources 33 0 R  /Contents 34 0 R  /MediaBox [ 0 0 612 792 ]  /CropBox [ 0 0 612 792 ]  /Rotate 0  endobj 33 0 obj /ProcSet [ /PDF /Text ]  /Font << /F2 35 0 R /TT2 49 0 R /TT4 51 0 R /TT6 52 0 R /TT8 36 0 R >>  /ExtGState << /GS1 56 0 R >>  /ColorSpace << /Cs5 53 0 R >>  endobj 34 0 obj << /Length 2304 /Filter /FlateDecode >>  stream ZYTE)A =g[5s Yy,\: ?(-YT 5BTL6L -ZpLZ 7\A2O QmM<X +d}/! t"W&ir BSGe>B Fv[]t Brs+a endstream endobj 35 0 obj /Type /Font  /Subtype /Type1  /FirstChar 1  /LastChar 2  /Widths [ 889 1000 ]  /Encoding 40 0 R  /BaseFont /IMNPKP+TT3A8o00  /FontDescriptor 37 0 R  /ToUnicode 41 0 R  endobj 36 0 obj /Type /Font  /Subtype /TrueType  /FirstChar 32  /LastChar 148  /Widths [ 250 0 0 0 0 0 0 0 333 333 0 0 250 333 250 0 500 500 500 500 500 500  500 500 500 0 333 333 0 675 0 0 0 611 611 667 722 611 611 0 722  333 0 667 556 833 667 722 611 0 611 500 556 0 611 0 611 0 0 0 0  0 0 0 0 500 500 444 500 444 278 500 500 278 0 444 278 722 500 500  500 500 389 389 278 500 444 667 0 444 389 0 0 0 0 0 0 0 0 0 0 889  0 0 0 0 0 0 0 0 0 0 0 0 0 556 556 ]  /Encoding /WinAnsiEncoding  /BaseFont /TimesNewRomanPS-ItalicMT  /FontDescriptor 39 0 R  endobj 37 0 obj /Type /FontDescriptor  /Ascent 0  /CapHeight 0  /Descent 0  /Flags 4  /FontBBox [ 0 0 812 727 ]  /FontName /IMNPKP+TT3A8o00  /ItalicAngle 0  /StemV 0  /CharSet (/boxshadowdwn/space) /FontFile3 38 0 R  endobj 38 0 obj << /Filter /FlateDecode /Length 161 /Subtype /Type1C >>  stream bd`ad`dd lJ2,SEeXE endstream endobj 39 0 obj /Type /FontDescriptor  /Ascent 891  /CapHeight 0  /Descent -216  /Flags 98  /FontBBox [ -498 -307 1120 1023 ]  /FontName /TimesNewRomanPS-ItalicMT  /ItalicAngle -15  /StemV 0  endobj 40 0 obj /Type /Encoding  /Differences [ 1 /boxshadowdwn /space ]  endobj 41 0 obj << /Filter /FlateDecode /Length 210 >>  stream ?`v>/ endstream endobj 42 0 obj /Type /Pages  /Kids [ 46 0 R 1 0 R 4 0 R 7 0 R 10 0 R 26 0 R 29 0 R 32 0 R ]  /Count 8  endobj 43 0 obj /CreationDate (D:20010406115621) /Producer (Acrobat Distiller 4.0 for Windows) /ModDate (D:20010406115621-08'00') endobj 0 44  0000000000 65535 f 0000005626 00000 n 0000005777 00000 n 0000005958 00000 n 0000012564 00000 n 0000012715 00000 n 0000012873 00000 n 0000020259 00000 n 0000020410 00000 n 0000020568 00000 n 0000025953 00000 n 0000026107 00000 n 0000026452 00000 n 0000060361 00000 n 0000060542 00000 n 0000060723 00000 n 0000060904 00000 n 0000061085 00000 n 0000061266 00000 n 0000061444 00000 n 0000061622 00000 n 0000061803 00000 n 0000061984 00000 n 0000062162 00000 n 0000062339 00000 n 0000062516 00000 n 0000062693 00000 n 0000062847 00000 n 0000063006 00000 n 0000071216 00000 n 0000071370 00000 n 0000071552 00000 n 0000074168 00000 n 0000074322 00000 n 0000074504 00000 n 0000076883 00000 n 0000077075 00000 n 0000077631 00000 n 0000077856 00000 n 0000078108 00000 n 0000078308 00000 n 0000078390 00000 n 0000078674 00000 n 0000078786 00000 n trailer /Size 44 /ID[<12b54d40737ca2efff1ccc32f53b2032><12b54d40737ca2efff1ccc32f53b2032>] startxref %%EOF %%EOF
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\xcardtesting.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal.dot Josh Poley Microsoft Word 9.0vaXXP DfdDKfbjbjU XCard Test Plan Author: jpoley Last changed:   SAVEDATE \@ "M/d/yyyy" \* MERGEFORMAT  5/18/2000  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc482620775"  Owners  PAGEREF _Toc482620775 \h   HYPERLINK \l "_Toc482620776"  Resources  PAGEREF _Toc482620776 \h   HYPERLINK \l "_Toc482620777"  Test scenarios  PAGEREF _Toc482620777 \h   HYPERLINK \l "_Toc482620778"  Spec reviews  PAGEREF _Toc482620778 \h   HYPERLINK \l "_Toc482620779"  Tools needed  PAGEREF _Toc482620779 \h   HYPERLINK \l "_Toc482620780"  Hardware needed  PAGEREF _Toc482620780 \h   HYPERLINK \l "_Toc482620781"  Test methods  PAGEREF _Toc482620781 \h   HYPERLINK \l "_Toc482620782"  Test code  PAGEREF _Toc482620782 \h   HYPERLINK \l "_Toc482620783"  Manual tests  PAGEREF _Toc482620783 \h   HYPERLINK \l "_Toc482620784"  Configuration tests  PAGEREF _Toc482620784 \h   HYPERLINK \l "_Toc482620785"  Code reviews  PAGEREF _Toc482620785 \h   HYPERLINK \l "_Toc482620786"  Debug walkthrough  PAGEREF _Toc482620786 \h   HYPERLINK \l "_Toc482620787"  Security  PAGEREF _Toc482620787 \h   HYPERLINK \l "_Toc482620788"  Performance testing  PAGEREF _Toc482620788 \h   HYPERLINK \l "_Toc482620789"  Catastrophic failure testing  PAGEREF _Toc482620789 \h   HYPERLINK \l "_Toc482620790"  Interfaces with other components  PAGEREF _Toc482620790 \h   HYPERLINK \l "_Toc482620791"  Localization impact  PAGEREF _Toc482620791 \h   HYPERLINK \l "_Toc482620792"  Test variations  PAGEREF _Toc482620792 \h   HYPERLINK \l "_Toc482620793"  Test complete criteria  PAGEREF _Toc482620793 \h   HYPERLINK \l "_Toc482620794"  Release criteria  PAGEREF _Toc482620794 \h  Owners Test  HYPERLINK "mailto:jpoley@microsoft.com" mailto:jpoley@microsoft.com HYPERLINK "mailto:chrispi@microsoft.com" mailto:chrispi@microsoft.com HYPERLINK "mailto:waltw@microsoft.com" mailto:waltw@microsoft.com HYPERLINK "mailto:marcw@microsoft.com" mailto:marcw@microsoft.com HYPERLINK "mailto:karencs@microsoft.com" mailto:karencs@microsoft.com Usability  HYPERLINK "mailto:tombro@microsoft.com" mailto:tombro@microsoft.com International  Resources Specs  HYPERLINK "http://xbox/specs/pm/coreos/xcard.doc"  http://xbox/specs/pm/coreos/xcard.doc  HYPERLINK "http://xbox/specs/dev/mu%20protocol.doc"  http://xbox/specs/dev/mu%20protocol.doc Source Test source Test Docs Win2000 Test Docs Test scenarios There are several aspects to the MU that need to be looked at: Accessibility through storage related APIs. Extensive failure testing because this is a removable media. Spec reviews You should also read:  HYPERLINK "http://xbox/specs/pm/coreos/storage.doc"  http://xbox/specs/pm/coreos/storage.doc Is the spec sufficient to design, document, and test this feature? Tools needed Performance ll need to measure performance of these storage mediums. The test plan for each medium will cover this in more detail, but in general, the important things to know will be: Data rate Latency CPU / Memory utilization Code coverage We are talking with MSR about getting ICECap modified for us to use for Code Coverage analysis.  All code will get this type of analysis. Static analysis All code will be statically analyzed with PC-Lint, Typo.pl, and PreFix.  Leak testing All code relating to storage will be checked for this. It will be done through a combination of running the tests / measuring / repeat. Look at leaks.doc (checked into   HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs"  \\CPITGCFS01\xboxro\src\test\docs ) for notes on the how s and why s of leak checking. Corruption testing This will be done with the Driver Verifier (  HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs"  \\CPITGCFS01\xboxro\src\test\docs ) as well as extensive manual tests. Hardware needed What do you need immediately? USB Simulator What will you need further on down the road? I will eventually need the actual memory unit hardware on the Duke controllers (and memory cards) for testing. Various memory card sizes 8, 16, 32, 64,  What lab requirements do you have? None expected Test methods Test code What needs to be written? Subset of the Win32 File IO APIs Tests specific to MU APIs What can be borrowed / adapted? File IO tests What support code do we need, and who is responsible for providing it? Can your code go into a stress test? Manual tests Manual tests include: Unplug controller while accessing (read/write) the card Remove MU while accessing Using corrupted/damaged cards Replace card with a different one (unformatted, empty, full) while accessing Verification of these tests involve making sure the media is as robust as other console memory cards in similar tests and making sure the XBox remains in a stable state while these tests occur. Configuration tests The following configurations need to be addressed: Different sized memory cards (which includes different FAT formats) Cards that are placed in different controllers (e.g. card is in controller 2, but not controller 1) Different sized cards in different slots on the same controller NOTE: It is unclear at this point whether or not we will be able to test larger than 8 meg XCards in the actual hardware (media may not be available)   some of this testing may be restricted to the current PC USB devices (FlashGate). Code reviews How often? For changed code, after a check-in, and on all code at least 1 time before we ship. Which Dev / PM will attend? If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough Watch all the tested code in the debugger. Are getting the coverage you think you are? It will help you learn how things work and write better tests. Security What impact on security does this feature have? Performance testing We need to address read/write performance degradation while the USB port is saturated with isochronous and interrupt transfers because the USB specification does not guarantee bandwidth to bulk transfers. If there is no other traffic, then MU data should be able to go at the max bandwidth.  Catastrophic failure testing Look at the Manual tests for further information on failure tests. Also the hardware testers will perform additional catastrophic tests on the device. Interfaces with other components All test variations should be run while other USB devices are operating. Localization impact All of the file IO tests need to be done using any localized character sets available. Test variations Accessibility through storage related APIs. Read and write data using the provided API tests. Read and write data using higher-level game storage APIs if any. Read and write data by going through driver interfaces. Write disk until full. Attempt to read and write on a damaged disk. Run all API tests in multithreaded mode. Run all API tests in stress mode. Due to the high probability that disks will fail, detecting disk failures and responding appropriately must be thoroughly tested. Run tests with clean disk. Run tests with damaged disk (hardware). Run tests with damaged disk (corrupted data / FAT table). Hot and cold booting Insert new cards while box is on, or before power up Remove cards while box is on, or before power up Plug in a new controller with a card already inserted while box is on, or before power up Unplug a controller with a card inserted while box is on, or before power up Different sized cards  make sure everything works as expected with larger cards. Hardware errors (simulate errors at the different levels) and verify they get propagated up correctly MU device USB errors FAT errors Test complete criteria All of the above scenarios must be covered for this component to be declared  test complete Release criteria Which of these tests need to pass to ship? At first guess, all mainline cases, all failure cases, and most edge cases, the only exceptions agreed upon by a War Team or similar group. Which failures can we live with on this feature? Not many, these are core features. How do we know when your tests say, "this feature is ready to ship"? When they all pass with exceptions as noted above. PAGE   PAGE   Microsoft Confidential
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\XBox Default Title - Settings Area Test Plan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Xbox Default Title Test Plan Title _PID_HLINKS _AdHocReviewCycleID _EmailSubject _AuthorEmail _AuthorEmailDisplayName _ReviewingToolsShownOnce Settings Spec jimhelm@xbox.com Jim HelmXbox Default Title Test Plan a-tylerh Normal.dot jimhelm Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags State urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags place Minute Month Year; d?j_p Q#9s  *C0w$R /o=microsoft/ou=northamerica/cn=Recipients/cn=591870 EX:/O=MICROSOFT/OU=NORTHAMERICA/CN=RECIPIENTS/CN=591870 /o=microsoft/ou=northamerica/cn=Recipients/cn=591870 /o=microsoft/ou=northamerica/cn=Recipients/cn=580725 EX:/O=MICROSOFT/OU=NORTHAMERICA/CN=RECIPIENTS/CN=580725 /o=microsoft/ou=northamerica/cn=Recipients/cn=580725bjbjk Xbox Default Title   Settings Test Plan Author: James Helm (jimhelm) Last changed: 8/4/2001  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc513948928"  Owners  PAGEREF _Toc513948928 \h   HYPERLINK \l "_Toc513948929"  Resources  PAGEREF _Toc513948929 \h   HYPERLINK \l "_Toc513948930"  Test scenarios  PAGEREF _Toc513948930 \h   HYPERLINK \l "_Toc513948931"  Spec reviews  PAGEREF _Toc513948931 \h   HYPERLINK \l "_Toc513948932"  Tools needed  PAGEREF _Toc513948932 \h   HYPERLINK \l "_Toc513948933"  Hardware needed  PAGEREF _Toc513948933 \h   HYPERLINK \l "_Toc513948934"  Test methods  PAGEREF _Toc513948934 \h   HYPERLINK \l "_Toc513948935"  Test code  PAGEREF _Toc513948935 \h   HYPERLINK \l "_Toc513948936"  Manual tests  PAGEREF _Toc513948936 \h   HYPERLINK \l "_Toc513948937"  Scenarios  PAGEREF _Toc513948937 \h   HYPERLINK \l "_Toc513948938"  Collection  PAGEREF _Toc513948938 \h   HYPERLINK \l "_Toc513948939"  Clock: Collection  PAGEREF _Toc513948939 \h   HYPERLINK \l "_Toc513948940"  Clock: Time and Date  PAGEREF _Toc513948940 \h   HYPERLINK \l "_Toc513948941"  Clock: Time Zone  PAGEREF _Toc513948941 \h   HYPERLINK \l "_Toc513948942"  Clock: Daylight Savings  PAGEREF _Toc513948942 \h   HYPERLINK \l "_Toc513948943"  Language  PAGEREF _Toc513948943 \h   HYPERLINK \l "_Toc513948944"  Video: Collection  PAGEREF _Toc513948944 \h   HYPERLINK \l "_Toc513948945"  Video: Mode  PAGEREF _Toc513948945 \h   HYPERLINK \l "_Toc513948946"  Video: 720p  PAGEREF _Toc513948946 \h   HYPERLINK \l "_Toc513948947"  Video: 1080i  PAGEREF _Toc513948947 \h   HYPERLINK \l "_Toc513948948"  Video: PAL-60  PAGEREF _Toc513948948 \h   HYPERLINK \l "_Toc513948949"  Audio: Collection  PAGEREF _Toc513948949 \h   HYPERLINK \l "_Toc513948950"  Audio: Mode  PAGEREF _Toc513948950 \h   HYPERLINK \l "_Toc513948951"  Audio: Dolby Digital  PAGEREF _Toc513948951 \h   HYPERLINK \l "_Toc513948952"  Audio: DTS  PAGEREF _Toc513948952 \h   HYPERLINK \l "_Toc513948953"  Auto-Off Menu  PAGEREF _Toc513948953 \h   HYPERLINK \l "_Toc513948954"  System Information Menu  PAGEREF _Toc513948954 \h   HYPERLINK \l "_Toc513948955"  Parental Control  PAGEREF _Toc513948955 \h   HYPERLINK \l "_Toc513948956"  Code reviews  PAGEREF _Toc513948956 \h   HYPERLINK \l "_Toc513948957"  Debug walkthrough  PAGEREF _Toc513948957 \h   HYPERLINK \l "_Toc513948958"  Security  PAGEREF _Toc513948958 \h   HYPERLINK \l "_Toc513948959"  Performance testing  PAGEREF _Toc513948959 \h   HYPERLINK \l "_Toc513948960"  Catastrophic failure testing  PAGEREF _Toc513948960 \h   HYPERLINK \l "_Toc513948961"  Interfaces with other components  PAGEREF _Toc513948961 \h   HYPERLINK \l "_Toc513948962"  Localization impact  PAGEREF _Toc513948962 \h   HYPERLINK \l "_Toc513948963"  Test complete criteria  PAGEREF _Toc513948963 \h   HYPERLINK \l "_Toc513948964"  Release criteria  PAGEREF _Toc513948964 \h  Owners Test   HYPERLINK "mailto:jimhelm@xbox.com"  jimhelm@xbox.com  HYPERLINK "mailto:bradch@microsoft.com"  bradch@microsoft.com  HYPERLINK "mailto:victorbl@microsoft.com"  victorbl@microsoft.com  HYPERLINK "mailto:karencs@microsoft.com"  karencs@microsoft.com Usability   HYPERLINK "mailto:tombro@microsoft.com"  tombro@microsoft.com International  Resources Specs  HYPERLINK "http://xbox/specs/pm/shell/"  http://xbox/specs/pm/shell/ Source Test source Test Docs Win2000 Test Docs Test scenarios Spec reviews You should also read the shell specs on: file://xbox/specs/pm/shell Tools needed Most, if not all, of the UI testing will be done by hand because automating the testing will be expensive and we may not have the time to do it.  The tools we will need to perform UI testing are minimal.  We will need to simulate some out of space scenarios, etc, which will require either some software to be developed that will quickly generate this scenario, or an easy way to fill up a Memory Area without the need for software.  Hardware tools are covered below.  Here are some software tools we will need: An Xbox Title that will allow us to change specific settings on the XBox, to see how the XDash will react to this.  Such settings could include Date and Time, Config Sector Information, or data that is stored on the Hard Disc or a Memory Unit. We will need a checked version of the shell to test performance, code coverage, static analysis, and leak testing. Hardware needed At least 1 Xbox. Controllers, up to 4 per Xbox. TVs that are capable of doing 4:3Normal, 4:3Letterbox, 16:9, HDTV, in NTSC and PAL formats. All supported XBox A/V packs. Movie DVD s of various ratings for the different countries.  (update this list) Test methods Test code The test cases, steps, and variations will be stored in TACTICS, which will allow us to easily assign test cases to a specific tester, review results, and update information as needed.  See   HYPERLINK "http://xdk"  http://xdk  for more information on our TACTICS database. Manual tests Scenarios These tests are to ensure that test scenarios, that are not specific to any one Settings Area menu or screen, function as expected. Types of tests that will be performed are: User is prompted to set the Clock upon initial boot of the Xbox for the following variations: Empty CD Tray Audio CD in Tray Xbox Game DVD in Tray DVD Movie in Tray Invalid Media in Tray Collection These tests are to ensure that the  Collection , or Main Menu of the Settings Area functions as expected. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to Main Menu) START (Select) BACK (Back to Main Menu) DPAD UP DPAD DOWN LEFT THUMBSTICK UP LEFT THUMBSTICK DOWN Verify menu elements are updated as the cursor is navigated UP and DOWN the menu.  Elements include: Button Text Highlight 3D Image Orb Verify the focus is always set to the proper menu item: Initial Entry: (default choice, top option has the focus) Re-Entry after pressing   from a settings sub-area: (selected item has the focus) Audio Collection Auto Off Clock Collection Language Parental Control System Information Video Collection Re-Entry after pressing  select  from a settings sub-area: (selected item has the focus) Audio Collection Auto Off Clock Collection Language Parental Control System Information Video Collection Re-Entry from the Main Menu, after highlighting a non-default choice in the Settings Collection menu: (default choice, top option has the focus) Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify the DATE/TIME format is displayed properly for each Language: English PAL (DATE: dd/mm/yy) (TIME: hh:mm:ss (12 hour)) NTSC (DATE: mm/dd/yy) (TIME: hh:mm:ss (12 hour)) OTHER (DATE: mm/dd/yy) (TIME: hh:mm:ss (12 hour)) Japanese PAL (DATE: yy/mm/dd) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: yy/mm/dd) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: yy/mm/dd) (TIME: hh:mm:ss (24 hour)) German PAL (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) French PAL (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) Italian PAL (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) Spanish PAL (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) Verify that the Meta panel displays the correct information for each possible menu choice: Clock 1/1/2000 (12:00AM) 12/31/2099 (12:00PM) Language English Japanese French German Italian Spanish Audio Stereo Dolby Surround Video Normal Letterbox Wide screen Auto Off Parental Control (Add Variations here) Clock: Collection These tests are to ensure that the  Clock Collection  menu within the Settings area of the XDash is functioning as expected. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to the Settings Collection screen) START (Select) BACK (Back to the Settings Collection screen) DPAD UP DPAD DOWN LEFT THUMBSTICK UP LEFT THUMBSTICK DOWN Verify menu elements are updated as the cursor is navigated UP and DOWN the menu.  Elements include: Button Text Highlight 3D Image Orb Verify the focus is always set to the proper menu item: Initial Entry: (default choice, top option has the focus) Re-Entry after pressing   from a clock settings sub-area: (selected item has the focus) Daylight Savings Time and Date Time Zone Re-Entry after pressing  select  from a clock settings sub-area: (selected item has the focus) Daylight Savings Time and Date Time Zone Re-Entry from the Settings Collection menu, after highlighting a non-default choice in the Clock Collection menu: (default choice, top option has the focus) Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify that the Meta panel displays the correct information for each possible menu choice: Time and Date 1/1/2000 (12:00AM) 12/31/2099 (12:00PM) TimeZone (add variations here) Daylight Savings Verify the DATE/TIME format is displayed properly for each Language: English PAL (DATE: dd/mm/yy) (TIME: hh:mm:ss (12 hour)) NTSC (DATE: mm/dd/yy) (TIME: hh:mm:ss (12 hour)) OTHER (DATE: mm/dd/yy) (TIME: hh:mm:ss (12 hour)) Japanese PAL (DATE: yy/mm/dd) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: yy/mm/dd) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: yy/mm/dd) (TIME: hh:mm:ss (24 hour)) German PAL (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) French PAL (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) Italian PAL (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) Spanish PAL (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) Clock: Time and Date These tests are to ensure that the  Clock Time and Date  menu within the Settings area of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not call APIs that expose the system clock or its settings. Thos APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Accept / Back to the Clock Collection screen) B (Cancel / Back to the Clock Collection screen) START (Accept / Back to the Clock Collection screen) BACK (Cancel / Back to the Clock Collection screen) DPAD UP (Change item value) DPAD DOWN (Change item value) LEFT THUMBSTICK UP (Change item value) LEFT THUMBSTICK DOWN (Change item value) DPAD LEFT (Highlight new menu choice) DPAD RIGHT (Highlight new menu choice) LEFT THUMBSTICK LEFT (Highlight new menu choice) LEFT THUMBSTICK RIGHT (Highlight new menu choice) Verify menu elements are updated as the cursor is navigated LEFT and RIGHT across the menu.  Elements include: Button Text Highlight 3D Image Orb Verify the focus is always set to the proper menu item: Initial Entry: (default choice, left most item) Re-Entry after pressing   (default choice, left most item) Re-Entry after pressing  select  (default choice, left most item) Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify each menu item displays the proper number of days / months / years, hours, minutes, and seconds (should wrap at top and bottom).  Verify the 3D model is updated as each value is changed: MONTH: 1  1 JAN: 31 2 FEB: 29 3 MAR: 31 4 APR: 30 5 MAY: 31 6 JUN: 30 7 JUL: 31 8 AUG: 31 9 SEP: 30 10 OCT: 31 11 NOV: 30 12 DEC: 31 YEAR: 00  HOUR: English (0  French (0  German (0  Spanish (0  Italian (0  Japanese (0  MINUTE: 0 - 59 SECOND: 0 - 59 Verify the DATE/TIME format is displayed properly for each Language: English PAL (DATE: dd/mm/yy) (TIME: hh:mm:ss (12 hour)) NTSC (DATE: mm/dd/yy) (TIME: hh:mm:ss (12 hour)) OTHER (DATE: mm/dd/yy) (TIME: hh:mm:ss (12 hour)) Japanese PAL (DATE: yy/mm/dd) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: yy/mm/dd) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: yy/mm/dd) (TIME: hh:mm:ss (24 hour)) German PAL (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) French PAL (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) Italian PAL (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd.mm.yy) (TIME: hh:mm:ss (24 hour)) Spanish PAL (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) NTSC (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) OTHER (DATE: dd/mm/yy) (TIME: hh:mm:ss (24 hour)) Verify pressing SELECT accepts, and stores the Time and Date change Verify pressing BACK cancels, and rejects any Time and Date changes Verify entering these dates, and verifying they persist across a reboot: 1/1/2000 (12:00 AM) 12/31/2099 (12:00 PM) Verify entering VALID leap years works as expected: 2/29/2004 2/29/2008 Verify entering INVALID leap year dates works as expected (Should auto-select 2/28/YYYY): 2/29/2001 2/29/2099 Verify setting the MAX DATE/TIME and letting the clock roll-over (what should happen?): 12/31/2099, 11:59 PM Verify that the date/time is stored the first time the user enters them (upon initial boot) Verify that the date/time is NOT stored when the user changes the date/time from the settings area Verify that the date/time is NOT stored when the user set the date/time again after a power failure Clock: Time Zone These tests are to ensure that the  Clock Time Zone  menu within the Settings area of the XDash is functioning as expected. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Accept / Back to the Clock Collection screen) B (Cancel / Back to the Clock Collection screen) START (Accept / Back to the Clock Collection screen) BACK (Cancel / Back to the Clock Collection screen) DPAD UP (Change item value) DPAD DOWN (Change item value) LEFT THUMBSTICK UP (Change item value) LEFT THUMBSTICK DOWN (Change item value) Verify menu elements are updated as the cursor is navigated UP and DOWN the menu.  Elements include: Button Text Highlight Verify the focus is always set to the currently selected Time Zone TOP Item MIDDLE Item LAST Item Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify pressing   accepts, and stores the change Verify pressing   cancels, and rejects any changes made Verify that the Time Zone setting persists across a reboot Verify that setting EACH Time Zone adjusts the clock by the appropriate amount of time Verify setting the Time Zone to a negative Offset if the clock has been set to 1/1/2000, 12:00AM Verify setting the Time Zone to positive Offset if the clock has been set to 12/31/2099, 11:59PM Verify the boundary dates for the FIRST TimeZone in the list, and the LAST TimeZone in the list, both on their Standard Time Boundary, and their Daylight Time Boundary, when Daylight Savings Time is set to  FIRST TimeZone (GMT-09 Alaska) Standard Time (October 5th, 2AM) Daylight Time (April 1st, 2AM) LAST TimeZone (GMT+12 Auckland) Standard Time (March, 3rd, 2AM) Daylight Time (October 1st, 2AM) Verify the boundary dates for the FIRST TimeZone in the list, and the LAST TimeZone in the list, both on their Standard Time Boundary, and their Daylight Time Boundary, when Daylight Savings Time is set to  FIRST TimeZone (GMT-09 Alaska) Standard Time (October 5th, 2AM) Daylight Time (April 1st, 2AM) LAST TimeZone (GMT+12 Auckland) Standard Time (March, 3rd, 2AM) Daylight Time (October 1st, 2AM) Verify that only TimeZones that support Daylight Savings Time display the  Enable DLS option Verify the initial boot Flow selecting a TimeZone that supports Daylight Savings Time Verify the initial boot Flow selecting a TimeZone that DOES NOT support Daylight Savings Time  Clock: Daylight Savings These tests are to ensure that the  Clock Daylight Savings  menu within the Settings area of the XDash is functioning as expected. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Accept / Back to the Clock Collection screen) B (Cancel / Back to the Clock Collection screen) START (Accept / Back to the Clock Collection screen) BACK (Cancel / Back to the Clock Collection screen) DPAD LEFT (Change item value) DPAD RIGHT (Change item value) LEFT THUMBSTICK LEFT (Change item value) LEFT THUMBSTICK RIGHT (Change item value) Verify menu elements are updated as the cursor is navigated UP and DOWN the menu.  Elements include: Button Text Highlight Verify the FOCUS is set correctly according to the Time Zone Country (insert list here) Verify the FOCUS reflects the currently selected DST state Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify pressing   accepts, and stores the change Verify pressing   cancels, and rejects any changes made Verify setting each of these options persists across a reboot: Verify the 3D model of the clock represents the correct time Language These tests are to ensure that the  Language  area within the Settings area of the XDash is functioning as expected. All tests for the XDash will be run for each language.  This will help us to ensure that the text has been localized properly, and no clipping or missing text exists for any language. Languages supported by the XDash are: English Japanese German French Spanish Italian   Types of tests that will NOT be performed are: We will not call APIs that expose the  Language  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Accept / Back to the Settings Collection screen) B (Cancel / Back to the Settings Collection screen) START (Accept / Back to the Settings Collection screen) BACK (Cancel / Back to the Settings Collection screen) DPAD UP (Change item value) DPAD DOWN (Change item value) LEFT THUMBSTICK UP (Change item value) LEFT THUMBSTICK DOWN (Change item value) Verify menu elements are updated as the cursor is navigated LEFT and RIGHT across the menu.  Elements include: Button Text Highlight Verify the focus is always set to the current language: English Japanese German French Spanish Italian Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify pressing   accepts, and stores the change Verify pressing   cancels, and rejects any changes made Verify language changes are instantaneous, and do not require a reboot Verify the language setting is stored correctly and persists across a reboot for: English Japanese German French Spanish Italian Verify the proper languages are listed for each Xbox Region: (List languages here) (List languages here) OTHER (List languages here) Video: Collection These tests are to ensure that the  Video Collection  area within the Settings area of the XDash is functioning as expected. All tests for the XDash will be run for each video setting in combination with each television type that the XBox supports.  This will help us to ensure that the text has been localized properly, and no clipping or missing text exists for any video setting. Video settings supported by the XDash are: Normal (default choice) Letterbox Widescreen Enhanced A/V packs add the options for: 1020I PAL-60 Types of tests that will NOT be performed are: We will not call APIs that expose the  Video settings  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to the Settings Collection screen) START (Select) BACK (Back to the Settings Collection screen) DPAD UP DPAD DOWN LEFT THUMBSTICK UP LEFT THUMBSTICK DOWN Verify menu elements are updated as the cursor is navigated UP and DOWN the menu.  Elements include: Button Text Highlight 3D Image Orb? Verify the focus is always set to the proper menu item: Initial Entry: (default choice, top option has the focus) Re-Entry after pressing   from a video settings sub-area: (selected item has the focus) Re-Entry after pressing  select  from a video settings sub-area: (selected item has the focus) Re-Entry from the Settings Collection menu, after highlighting a non-default choice in the Video Collection menu: (default choice, top option has the focus) Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify that if the user has a NORMAL (Non-Enhanced A/V pack) installed, that this menu is skipped, and they are presented with the  Video Mode  menu Verify the correct menu items are displays on this screen depending upon which A/V pack is installed: Video Mode 1020i PAL TV Video Mode PAL-60 Verify that the Meta panel displays the correct information for each possible menu choice: Video Mode Normal Letterbox Widescreen 1020i PAL-60 Video: Mode These tests are to ensure that the  Video Mode  area within the Settings area of the XDash is functioning as expected. All tests for the XDash will be run for each video setting in combination with each television type that the XBox supports.  This will help us to ensure that the text has been localized properly, and no clipping or missing text exists for any video setting. Types of tests that will NOT be performed are: We will not call APIs that expose the  Video settings  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to the Video Collection screen) START (Select) BACK (Back to the Video Collection screen) DPAD UP DPAD DOWN LEFT THUMBSTICK UP LEFT THUMBSTICK DOWN Verify menu elements are updated as the cursor is navigated UP and DOWN the menu.  Elements include: Button Text Highlight 3D Image Orb Verify the focus is always set to the currently selected video option (normal being the default) for Normal Letterbox Widescreen Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify pressing   accepts, and stores the change Verify pressing   cancels, and rejects any changes made Verify the Video Mode setting is stored correctly and persists across a reboot for: Normal Letterbox Widescreen Video: 720p These tests are to ensure that the  Video 720p  area within the Settings area of the XDash is functioning as expected. All tests for the XDash will be run for each video setting in combination with each television type that the XBox supports.  This will help us to ensure that the text has been localized properly, and no clipping or missing text exists for any video setting. Types of tests that will NOT be performed are: We will not call APIs that expose the  Video settings  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to the Video Collection screen) START (Select) BACK (Back to the Video Collection screen) DPAD LEFT DPAD RIGHT LEFT THUMBSTICK LEFT LEFT THUMBSTICK RIGHT Verify menu elements are updated as the cursor is navigated LEFT and RIGHT across the menu.  Elements include: Button Text Highlight Verify the focus is always set to the currently selected option (NO being the default) for Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify the Video 720p setting is stored correctly and persists across a reboot for: Video: 1080i These tests are to ensure that the  Video 1080i  area within the Settings area of the XDash is functioning as expected. All tests for the XDash will be run for each video setting in combination with each television type that the XBox supports.  This will help us to ensure that the text has been localized properly, and no clipping or missing text exists for any video setting. Types of tests that will NOT be performed are: We will not call APIs that expose the  Video settings  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to the Video Collection screen) START (Select) BACK (Back to the Video Collection screen) DPAD LEFT DPAD RIGHT LEFT THUMBSTICK LEFT LEFT THUMBSTICK RIGHT Verify menu elements are updated as the cursor is navigated LEFT and RIGHT across the menu.  Elements include: Button Text Highlight Verify the focus is always set to the currently selected option (NO being the default) for Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify the Video 1080i setting is stored correctly and persists across a reboot for: Video: PAL-60 These tests are to ensure that the  Video PAL-60  area within the Settings area of the XDash is functioning as expected. All tests for the XDash will be run for each video setting in combination with each television type that the XBox supports.  This will help us to ensure that the text has been localized properly, and no clipping or missing text exists for any video setting. Types of tests that will NOT be performed are: We will not call APIs that expose the  Video settings  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to the Video Collection screen) START (Select) BACK (Back to the Video Collection screen) DPAD LEFT DPAD RIGHT LEFT THUMBSTICK LEFT LEFT THUMBSTICK RIGHT Verify menu elements are updated as the cursor is navigated LEFT and RIGHT across the menu.  Elements include: Button Text Highlight Verify the focus is always set to the currently selected option (NO being the default) for Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify the Video PAL-60 setting is stored correctly and persists across a reboot for: Audio: Collection These tests are to ensure that the  Audio Collection  area within the Settings area of the XDash is functioning as expected. Audio settings supported by the XDash are: Stereo (default choice) Dolby Surround Digital A/V packs add the options for: Dolby Digital Types of tests that will NOT be performed are: We will not call APIs that expose the  Audio settings  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to the Settings Collection screen) START (Select) BACK (Back to the Settings Collection screen) DPAD UP DPAD DOWN LEFT THUMBSTICK UP LEFT THUMBSTICK DOWN Verify menu elements are updated as the cursor is navigated UP and DOWN the menu.  Elements include: Button Text Highlight 3D Image Orb Verify the focus is always set to the proper menu item: Initial Entry: (default choice, top option has the focus) Re-Entry after pressing   from an audio settings sub-area: (selected item has the focus) Re-Entry after pressing  select  from an audio settings sub-area: (selected item has the focus) Re-Entry from the Settings Collection menu, after highlighting a non-default choice in the Audio Collection menu: (default choice, top option has the focus) Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify that if the user has a NORMAL (Non-Digital A/V pack) installed, that this menu is skipped, and they are presented with the  Audio Mode  menu Verify that the Meta panel displays the correct information for each possible menu choice: Audio Mode Stereo Dolby Surround Dolby Digital Audio: Mode These tests are to ensure that the  Audio Mode  area within the Settings area of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not call APIs that expose the  Audio settings  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to the Video Collection screen) START (Select) BACK (Back to the Video Collection screen) DPAD UP DPAD DOWN LEFT THUMBSTICK UP LEFT THUMBSTICK DOWN Verify menu elements are updated as the cursor is navigated UP and DOWN the menu.  Elements include: Button Text Highlight 3D Image Orb Verify the focus is always set to the currently selected audio option (stereo being the default) for Stereo Dolby Surround Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify pressing   accepts, and stores the change Verify pressing   cancels, and rejects any changes made Verify the Audio Mode setting is stored correctly and persists across a reboot for: Stereo Dolby Surround Audio: Dolby Digital These tests are to ensure that the  Audio Dolby Digital  area within the Settings area of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not call APIs that expose the  Audio settings  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to the Video Collection screen) START (Select) BACK (Back to the Video Collection screen) DPAD LEFT DPAD RIGHT LEFT THUMBSTICK LEFT LEFT THUMBSTICK RIGHT Verify menu elements are updated as the cursor is navigated LEFT and RIGHT across the menu.  Elements include: Button Text Highlight Verify the focus is always set to the currently selected option (NO being the default) for Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify the Audio Dolby Digital setting is stored correctly and persists across a reboot for: Audio: DTS These tests are to ensure that the  Audio DTS  area within the Settings area of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not call APIs that expose the  Audio settings  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to the Video Collection screen) START (Select) BACK (Back to the Video Collection screen) DPAD LEFT DPAD RIGHT LEFT THUMBSTICK LEFT LEFT THUMBSTICK RIGHT Verify menu elements are updated as the cursor is navigated LEFT and RIGHT across the menu.  Elements include: Button Text Highlight Verify the focus is always set to the currently selected option (NO being the default) for Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify the Audio DTS setting is stored correctly and persists across a reboot for: Auto-Off Menu These tests are to ensure that the  Auto-Off  area within the Settings area of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not call APIs that expose the  Audio settings  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action A (Select) B (Back to the Video Collection screen) START (Select) BACK (Back to the Video Collection screen) DPAD LEFT DPAD RIGHT LEFT THUMBSTICK LEFT LEFT THUMBSTICK RIGHT Verify menu elements are updated as the cursor is navigated LEFT and RIGHT across the menu.  Elements include: Button Text Highlight Verify the focus is always set to the currently selected option (NO being the default) for Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify the Audio DTS setting is stored correctly and persists across a reboot for: Verify, with Auto-Off set to YES, that the system shuts off after the appropriate amount of time (what is it?) in these situations: Sitting on Main Menu After Audio CD Playback is finished During Audio CD  Pause After DVD Movie playback is finished During DVD Movie  Pause (others as needed) System Information Menu These tests are to ensure that the  System Information  area within the Settings area of the XDash is functioning as expected. Types of tests that will NOT be performed are: We will not call APIs that expose the  Audio settings  that the user has chosen.  Those APIs will be tested elsewhere. Types of tests that will be performed are: Verify navigation works as expected: Verify INVALID controls/buttons perform no action Verify VALID controls/buttons perform appropriate action B (Back to the Video Collection screen) BACK (Back to the Video Collection screen) Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify In-Dash recovery works as expected User presses   on Recovery Dialog User presses   on Recovery Dialog Verify In-Dash recovery fails on incorrect key-sequence Verify In-Dash recovery prompts user on correct key-sequence Verify that Inserting / Removing USB items during recovery has no effect: DVD Dongle Memory Unit Controller Verify that the Key-Combination is related to the SERIAL NUMBER of the Xbox Verify that during In-Dash Recovery inserting / removing different media doesn t have any effect: Audio CD DVD Movie Xbox Game DVD Invalid Media Disc Empty Tray Verfy pressing  POWER  in the middle of In-Dash recovery allows the user to run it again upon next boot up Verify unplugging the power cord while in the middle of In-Dash recovery allows the user to run it again upon next boot up Verify that input during In-Dash recovery has no effect from: Game Controller Remote Control Verify that all Soundtracks are removed after In-Dash Recovery is performed Verify the EEPROM settings are reset when the user runs In-Dash Recovery Verify that the DVD Region is NOT Reset when the user runs In-Dash Recovery Parental Control These tests are to ensure that the Parental Control feature of the Xbox works as expected Types of tests that will be performed are: Verify navigation works as expected for the  Parental Control Collections Parental Control Movies , and  Parental Control Games  screens: Verify INVALID controls / buttons perform no action Verify VALID controls / buttons perform appropriate action B & BACK (Back to the Settings Collection screen) A & START (Select the highlighted option) Verify the proper menu items appear on the Parental Control Collection menu for the various REGIONS Verify menu navigation for GAME REGION 1 (North America) Both MOVIES and GAMES rating options should appear Verify menu navigation for GAME REGION 2 (Japen) Only MOVIES rating option should appear Verify menu navigation for GAME REGION 3 (Rest of World) No PARENTAL CONTROL option should appear in the settings menu Verify multiple button presses do not adversely effect the menu: A & B A & Back A & Start Start & B Start & Back B & Back (expand this list as needed) Verify for each REGION (1 through 6) For each Movie Rating Setting (1 through 8) Verify Trying each movie type for that Region Verify that the Global Parental Control key sequence allows the user to bypass the currently set Parental Control password, and re-configure the parental control settings X, B, L-TRIGGER, X Code reviews For changed code, after a check-in, and on all code at least 1 time before we ship.  If one is scheduled, the developer, the tester, the test lead, and the PM will attend. Debug walkthrough Debugger must be hooked up to the text machine during testing.  If the test engineer does not know how to debug, s/he will need to notify our SDE/Ts or our development owner to debug. Security Security testing specifically on the shell will be minimal.  Overall security testing will be covered in the Security test plan. Performance testing Performance testing will be done on the following: Shell responsiveness.  (If a user selects a new  language , it should respond immediately with a change) Settings Area menu navigation Catastrophic failure testing Verify that when catastrophic failure happens (power cord pulled, box dropped on the floor, lightening strike, as long as the hardware is still operable, upon reboot, the Default Title is still functional.  If data is lost or the hard disk becomes corrupted, verify that the Default Title can be recovered from the recovery disc. Interfaces with other components Many of the settings that are stored on the XDisk need to be available to game titles.  This information will be made available through a standard set of XBox APIs that are defined elsewhere. Localization impact All test cases will be executed on every language we support to verify everything is localized correctly and there is no clipping.  When text can be entered, always use extended characters and Japanese characters.  Usage testing will cover English alphabets. Test complete criteria All of the above scenarios must be covered for the Default Title to be declared  test complete Release criteria All tests must pass at 100%.  The only exceptions will be bugs that the War Team declares as postponed, won t fix, or by design. PAGE   PAGE   Microsoft Confidential rnrncrWrQ gdx0H gdx0H gdx0H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\xdisktesting.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. Feature Title _PID_HLINKSFeature johndaly Normal.dot johndaly Microsoft Word 9.0XDisk Test Plan Author: johndaly Last changed:   SAVEDATE \@ "M/d/yyyy" \* MERGEFORMAT  04/24/2000  HYPERLINK  \l "_Owners"  Owners  HYPERLINK  \l "_Test_scenarios"  Test scenarios  HYPERLINK  \l "_Spec_reviews"  Spec reviews  HYPERLINK  \l "_Tools_needed"  Tools needed  HYPERLINK  \l "_Hardware_needed"  Hardware needed  HYPERLINK  \l "_Test_methods"  Test methods  HYPERLINK  \l "_Test_variations"  Test variations  HYPERLINK  \l "_Test_complete_criteria"  Test complete criteria  HYPERLINK  \l "_Release_criteria"  Release criteria Owners Test  HYPERLINK "mailto:johndaly@microsoft.com" mailto:johndaly@microsoft.com HYPERLINK "mailto:chrispi@xbox.com;waltw@xbox.com" mailto:chrispi@xbox.com;waltw@xbox.com HYPERLINK "mailto:marcw@xbox.com" mailto:marcw@xbox.com  HYPERLINK "mailto:karencs@xbox.com"  mailto:karencs@xbox.com Usability   HYPERLINK "mailto:tombro@xbox.com"  mailto:tombro@xbox.com International  Test scenarios There are several aspects to the XDisk that need to be looked at: Accessibility through storage related APIs. Accessibility through direct calls to the driver to make sure the driver interface is correct. Behavior of specific namespaces / regions as games are installed, saved, etc Integrity of system data areas must be protected and any intrusion detected. Due to the high probability that disks will fail, detecting disk failures and responding appropriately must be thoroughly tested. Spec reviews Where is the spec:  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\xdisk.doc"  \\xbox\specs\pm\CoreOS\xdisk.doc You should also read:  HYPERLINK "\\\\xbox\\specs\\pm\\CoreOS\\namespace.doc"  \\xbox\specs\pm\CoreOS\namespace.doc  HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs\\storageoverviewtesting.doc"  \\CPITGCFS01\xboxro\src\test\docs\storageoverviewtesting.doc Is the spec sufficient to design, document, and test this feature? As of 4/24 it looks OK, although a bit general, and probably subject to change. Tools needed Perf  ll need to measure performance of these storage mediums. The test plan for each medium will cover this in more detail, but in general, the important things to know will be: Data rate Latency CPU / Memory utilization Code coverage We are talking with MSR about getting ICECap modified for us to use for Code Coverage analysis.  All code will get this type of analysis. Static analysis All code will be statically analyzed with PC-Lint, Typo.pl, and PreFix.  Leak testing All code relating to storage will be checked for this. It will be done through a combination of running the tests / measuring / repeat. Look at leaks.doc (checked into   HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs"  \\CPITGCFS01\xboxro\src\test\docs ) for notes on the how s and why s of leak checking. Corruption testing This will be done with the Driver Verifier (  HYPERLINK "\\\\CPITGCFS01\\xboxro\\src\\test\\docs"  \\CPITGCFS01\xboxro\src\test\docs Plans from NT to look at:  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\ntdrvtst\\storage\\procedures\\IDE\\ideadp.doc.doc"  \\johndalyx\nt\base\testsrc\ntdrvtst\storage\procedures\IDE\ideadp.doc.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\ntdrvtst\\storage\\procedures\\IDE\\idecd.doc"  \\johndalyx\nt\base\testsrc\ntdrvtst\storage\procedures\IDE\idecd.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\ntdrvtst\\storage\\procedures\\IDE\\idehd.doc"  \\johndalyx\nt\base\testsrc\ntdrvtst\storage\procedures\IDE\idehd.doc Hardware needed What do you need immediately? We have SDK boxes we can use, later we ll have other types of X-Box dev boxes. We ll also need a variety of other IDE drives that are compatible with our controller so we can see what happens when we increase the drive size. What will you need further on down the road? Larger drives. What lab requirements do you have? None besides what we ll have by default. Test methods Test code What needs to be written? API tests for all the storage API  Josh Poley is responsible for those. <TODO   provide a link for plans for those tests> Test code that behaves like a typical game and used the storage APIs would also be a good thing to have. What can be borrowed / adapted?  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\storage\\sdstress\\"  \\johndalyx\nt\base\testsrc\storage\sdstress\  - sdstress.exe  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\basetool\\storage\\idelog\\"  \\johndalyx\nt\base\testsrc\basetool\storage\idelog\  - idelog.exe What support code do we need, and who is responsible for providing it? Probably none. Can your code go into a stress test? What other input / output is needed? How do you generate test data? Test data for testing these should be generated in a repeatable way so reproducing problems is easy to do. Also pay attention to things like alternating pit patterns on the disk images so 1 bit errors can be detected. Manual tests Assuming that we are testing using functionality in the XBox Dashboard, we should try to do many of the same variations manually that we are doing with software, such as filling the disk, accessing inappropriate stores, etc. We also need to make sure that the UI responds correctly to certain disk conditions, such as disk full, disk mangled, etc. As soon as we have the XBox Dashboard we can elaborate on this and add it to the XBox Dashboard test plan. Configuration tests There are several things that can be considered configuration issues, which must be taken into account in test cases: Different sizes of hard drive need to be used as we plan on having the size increase over the lifespan of the product. The disk being in different states of capacity utilization at power-on time. Code reviews How often? For changed code, after a check-in, and on all code at least 1 time before we ship. Which Dev / PM will attend? If one is scheduled, the developer, the tester, the test lead, and the PM. I do not consider these mandatory for parts of the system where we are using largely unchanged NT code, they are much more important for new code (in my opinion).  What else? The exception to this is the Namespace code, please review that code heavily, as it is new and will have some bugs. The tester for this area, however, should review the code on their own and make sure they understand it. Debug walkthrough  This would be a very good thing for the XDisk code Watch all the tested code in the debugger. Are getting the coverage you think you are? It will help you learn how things work and write better tests. Security The basic security risks surrounding the XDisk are: Can it be removed and read by a PC? We need to check this, we ll be changing the format a bit to make this difficult. Can processes (games) read and write unauthorized parts of the disk? We need to check this. Performance testing Tests designed to mimic real-world scenarios may be more useful for this than API tests. There are several perf issues that are interesting, here is a list: Raw throughput to the disk going directly through the driver. CPU and memory utilization should also be measured. Throughput to the disk going through the storage API s. CPU and memory utilization should be measured, they can be compared with going direct and we can see what the overhead is. Load time for the default title and for games would be good to measure. Exploring the long and short term effects of disk fragmentation would be a good idea. Catastrophic failure testing If the disk is broken, the XBox is broken. We need to check all the failure modes we can and make sure the OS responds correctly. We need to get a list of drive controller failure modes for the controller we are using and try all of them, plus test whatever software we ll be using to detect failures, and we ll need to extensively test any recovery tools, should these be created.. Interfaces with other components Besides interaction with titles and system software, the XDisk will be managed by the XBox Dashboard. This will need extensive testing, XBox Dashboard testing will be covered in another test plan. Localization impact All of the file IO tests need to be done using any localized character sets available. Test variations Accessibility through storage related APIs. Read and write data using the provided API tests. Read and write data using higher-level game storage APIs if any. Read and write making sure that namespaces work correctly, make sure to check boundary conditions such as funky paths, etc. Read and write data by going through driver interfaces. Write disk until full. Attempt to read and write on a damaged disk (should not boot Read and write until the various regions (Cache, Title Data, User Data) are full and make sure the right thing happens (there may be some interaction with the shell With a full disk, read and write until the various regions (Cache, Title Data, User Data) are full and make sure the right thing happens (there may be some interaction with the shell Run all API tests in multithreaded mode. Run all API tests in stress mode. Read and write until the various regions (Cache, Title Data, User Data) are full, delete some things from 1 region, and see if other regions can now expand (there may be some interaction with the shell Behavior of specific namespaces / regions as games are installed, saved, etc Boot with 1 N games installed. Install N games and make sure Cache / Title Data namespaces behave as they are consumed. Make sure that namespace functionality actually works. Boot with filled disk and make sure cache clears and minimum guaranteed space is available. There must be 350MB free before a title is launched. Must use cases where the code can be reclaimed from cache space, and where the user in the shell must reclaim space. This will require filling different regions and booting in these states with a title. Integrity of System Data / The XBox Dashboard Code areas must be protected and any intrusion detected. Change things in the System / Dashboard area and see if it is detected. Corrupt things in the System / Dashboard area and see if it is detected. Attempt writes to the System / Dashboard area and sees they are detected. Due to the high probability that disks will fail, detecting disk failures and responding appropriately must be thoroughly tested. Boot with clean disk (everything installed as if from factory). Boot with damaged disk (everything installed as if from factory except some files missing). Boot with damaged disk (everything installed as if from factory except some files corrupted). Boot with damaged disk (everything installed as if from factory except some files not signed). Corrupt each area (Cache, Title Data, User Data, System Data / The XBox Dashboard Code) individually and make sure the right thing happens. Boot with no disk connected. Boot with each type of HD controller error possible and make sure the software does the correct thing, this is a short list and should be testable.  Do we get a useful diagnostic message? Recoverability   there is no spec for this yet, when there is one make sure to try all of the above on a recovered disk. Different sized disks   make sure everything works as expected with larger disks   future XBoxes will have larger disks. Test complete criteria All of the above scenarios must be covered for this component to be declared  test complete Release criteria Which of these tests need to pass to ship? At first guess, all mainline cases, all failure cases, and most edge cases, the only exceptions agreed upon by a War Team or similar group. Which failures can we live with on this feature? Not many, these are core features. How do we know when your tests say, "this feature is ready to ship"? When they all pass with exceptions as noted above.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\xdvtest.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft DirectPlay for Xbox Test Plan Title _PID_HLINKSDirectPlay for Xbox Test Plan Tristan Jackson (tristanj) DirectPlay DPlay X-box Xbox FOGHORN.DOT Tristan Jackson Microsoft Word 9.00!p#`' !W8&U: elB2x  f[2x @\\RED-PRN-16\CORP0131 Ne00: winspool Xerox Document Centre 255 PS \\RED-PRN-16\CORP0131 Letter \\RED-PRN-16\CORP0131 Letter?Dg\: u*qz: v^'NAI+ (>u2n B-a[. MS'vt?i )Cf+>i0a gXv'ObjbjU DirectVoice for Xbox Test Plan Xbox OS Test Team xdvtest.doc Written by: Tristan Jackson (  HYPERLINK "mailto:tristanj@microsoft.com"  mailto:tristanj@microsoft.com Revision 0.1 SAVEDATE \@ "MMMM d, yyyy" October 31, 2000 Confidential Information in this document is subject to change without notice. Companies, names, and data used in examples herein are fictitious unless otherwise noted. No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, for any purpose, without the express written permission of Microsoft Corporation. Published by  Microsoft Corporation  One Microsoft Way  Redmond, WA 98052-6399 Telephone (425) 882-8080 2000 Microsoft Corporation. All rights reserved. Printed in the USA. Microsoft, MS-DOS, and MS are registered trademarks of Microsoft Corporation. Contents  TOC \o "1-4"  Contents  PAGEREF _Toc497634725 \h  Document History  PAGEREF _Toc497634726 \h  Overview  PAGEREF _Toc497634727 \h  Open Issues  PAGEREF _Toc497634728 \h  Differences Between Xbox and Desktop Implementations  PAGEREF _Toc497634729 \h  Supported API  PAGEREF _Toc497634730 \h  Voice Client API s (IDirectPlayVoiceClient)  PAGEREF _Toc497634731 \h  Voice Server API s (IDirectPlayVoiceServer)  PAGEREF _Toc497634732 \h  Existing DirectPlay Test Resources  PAGEREF _Toc497634733 \h  Test Plans  PAGEREF _Toc497634734 \h  Test Tools  PAGEREF _Toc497634735 \h  Network State Test Tools  PAGEREF _Toc497634736 \h  Stress Test Tools  PAGEREF _Toc497634737 \h  Release Criteria  PAGEREF _Toc497634738 \h  Alpha 2 (Early December)  PAGEREF _Toc497634739 \h  Test Methodology  PAGEREF _Toc497634740 \h  Overview  PAGEREF _Toc497634741 \h  BVT/API Testing  PAGEREF _Toc497634742 \h  IDirectPlayVoiceClient  PAGEREF _Toc497634743 \h  IdirectPlayVoiceServer  PAGEREF _Toc497634744 \h  Stress Testing  PAGEREF _Toc497634745 \h  Network State Testing  PAGEREF _Toc497634746 \h  Other notes  PAGEREF _Toc497634747 \h  Document History Revision Action Author 10/31/2000 Initial draft Tristan Jackson (tristanj) Overview Open Issues Will Xbox support server and client API s?  For what releases? What level of parameter checking will be present?  Will all error conditions cause an ASSERT? Differences Between Xbox and Desktop Implementations Supported API The DirectVoice API s are made up of 3 interfaces   IDirectPlayVoiceClient, IDirectPlayVoiceServer and IDirectPlayVoiceTest.  Configuration of the XHawk device (voice input device for Xbox) will be taken care of by means outside of DirectVoice, so only the IDirectPlayVoiceClient and IDirectPlayVoiceServer interfaces will be present on Xbox. Voice Client API s (IDirectPlayVoiceClient) Voice Server API s (IDirectPlayVoiceServer) Existing DirectPlay Test Resources Test Plans Voice Test Plan   useful to Xbox testing, many tests carry-over  HYPERLINK "\\\\directx1\\public\\VSS\\Dplay\\Docs\\Test Dev Plans/DPlay8Voice Test Plan.doc"  \\directx1\public\VSS\Dplay\Docs\Test Dev Plans/DPlay8Voice Test Plan.doc Test Tools Network State Test Tools Stress Test Tools DPVLoopy   DirectVoice loopback session test app  HYPERLINK "\\\\tell\\nt\\multimedia\\testsrc\\dplay\\dpvloopy"  \\tell\nt\multimedia\testsrc\dplay\dpvloopy Release Criteria Alpha 2 (Early December) Test Methodology Overview The initial goal of DirectPlay for Xbox testing will be to leverage tests from the DirectPlay team by porting them to the Xbox environment as quickly as possible.  Because the DirectPlay team s TestNet harness has dependencies on many things that are not present on Xbox (i.e. DLLs, callback model, local file system, registry, etc.) this will not be directly ported to Xbox at this time.  Instead, Netsync for Xbox will be used as a synchronizing agent for DirectPlay tests.  Many of these tests will be ported from TestNet test modules.   Several DirectPlay stress tests will also be ported.  Once porting is done and these tests can be run, any holes will be filled by creating Xbox-specific tests. BVT/API Testing Goal: Cover every DirectVoice APIs that will be supported by Xbox and call it with A case for each category of success (e.g. asynchronous, secure, etc.) A case for each error code indicating failure (debug only, retail will not have parameter checking) IDirectPlayVoiceClient IdirectPlayVoiceServer Stress Testing Goal:  To create multithreaded applications that maximize network throughput by sending and receiving voice data from multiple targets and sources.  Also, to call as many DirectPlay API s in as many states and with as many parameters as possible over time. Network State Testing Goal:  To create special test cases for issues that are dependent on network state (e.g. voice host migration due to timeout).  Many of these test cases may be ported from the DirectPlay team s TestNet modules. Other notes DirectPlay8 for Xbox Test Plan DirectPlay8 for Xbox Test Plan       styleref RevisionNumber Revision 0.1 styleref date October 31, 2000 Microsoft Confidential Microsoft Confidential styleref RevisionNumber Revision 0.1 styleref date October 31, 2000
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\xdptest.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft DirectPlay for Xbox Test Plan Title _PID_HLINKSDirectPlay for Xbox Test Plan Tristan Jackson (tristanj) DirectPlay DPlay X-box Xbox FOGHORN.DOT Tristan Jackson Microsoft Word 9.00!p#`' '!,4@ !W8&U: 8nz(! =@-z% elB2x  f[2x Y/f:;p @\\red-prn-24\CORP0066 Ne01: winspool Xerox Document Centre CS 50 PS \\red-prn-24\CORP0066 Letter \\red-prn-24\CORP0066 Letter HF.JK?Dg\: u*qz: v^'NAI+ (>u2n B-a[. MS'vt?i )Cf+>i0a gXv'ObjbjU DirectPlay8 for Xbox Test Plan Xbox OS Test Team xdptest.doc Written by: Tristan Jackson (  HYPERLINK "mailto:tristanj@microsoft.com"  mailto:tristanj@microsoft.com Revision 0.3 SAVEDATE \@ "MMMM d, yyyy" October 26, 2000 Confidential Information in this document is subject to change without notice. Companies, names, and data used in examples herein are fictitious unless otherwise noted. No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, for any purpose, without the express written permission of Microsoft Corporation. Published by  Microsoft Corporation  One Microsoft Way  Redmond, WA 98052-6399 Telephone (425) 882-8080 2000 Microsoft Corporation. All rights reserved. Printed in the USA. Microsoft, MS-DOS, and MS are registered trademarks of Microsoft Corporation. Contents  TOC \o "1-4"  Contents  PAGEREF _Toc498393705 \h  Document History  PAGEREF _Toc498393706 \h  Overview  PAGEREF _Toc498393707 \h  Open Issues  PAGEREF _Toc498393708 \h  Differences Between Xbox and Desktop Implementations  PAGEREF _Toc498393709 \h  Supported API  PAGEREF _Toc498393710 \h  Peer API s (IDirectPlay8Peer)  PAGEREF _Toc498393711 \h  Client API s (IDirectPlay8Client)  PAGEREF _Toc498393712 \h  Server API s (IDirectPlay8Server)  PAGEREF _Toc498393713 \h  Address API  not service provider specific (IDirectPlay8Address)  PAGEREF _Toc498393714 \h  Address API  IP specific (IDirectPlay8AddressIP)  PAGEREF _Toc498393715 \h  Unsupported API  PAGEREF _Toc498393716 \h  Peer API s (IDirectPlay8Peer)  PAGEREF _Toc498393717 \h  Client API s (IDirectPlay8Client)  PAGEREF _Toc498393718 \h  Server API s (IDirectPlay8Server)  PAGEREF _Toc498393719 \h  Lobby Client API s (IDirectPlay8LobbyClient)  PAGEREF _Toc498393720 \h  Lobbied Application API s (IDirectPlay8LobbiedApplication)  PAGEREF _Toc498393721 \h  Existing DirectPlay Test Resources  PAGEREF _Toc498393722 \h  Test Plans  PAGEREF _Toc498393723 \h  Test Tools  PAGEREF _Toc498393724 \h  Network State Test Tools  PAGEREF _Toc498393725 \h  Stress Test Tools  PAGEREF _Toc498393726 \h  Release Criteria  PAGEREF _Toc498393727 \h  Alpha 2 (Early December)  PAGEREF _Toc498393728 \h  Test Methodology  PAGEREF _Toc498393729 \h  Overview  PAGEREF _Toc498393730 \h  BVT/API Testing  PAGEREF _Toc498393731 \h  IDirectPlay8PeerTests  PAGEREF _Toc498393732 \h  DirectPlay8Create  PAGEREF _Toc498393733 \h  Initialize  PAGEREF _Toc498393734 \h  EnumServiceProviders  PAGEREF _Toc498393735 \h  CancelAsyncOperation  PAGEREF _Toc498393736 \h  Connect  PAGEREF _Toc498393737 \h  SendTo  PAGEREF _Toc498393738 \h  GetSendQueueInfo  PAGEREF _Toc498393739 \h   PAGEREF _Toc498393740 \h  GetApplicationDesc  PAGEREF _Toc498393741 \h  SetApplicationDesc  PAGEREF _Toc498393742 \h  CreateGroup  PAGEREF _Toc498393743 \h  DestroyGroup  PAGEREF _Toc498393744 \h  AddPlayerToGroup  PAGEREF _Toc498393745 \h  RemovePlayerFromGroup  PAGEREF _Toc498393746 \h  SetGroupInfo  PAGEREF _Toc498393747 \h  GetGroupInfo  PAGEREF _Toc498393748 \h  EnumPlayersAndGroups  PAGEREF _Toc498393749 \h  EnumGroupMembers  PAGEREF _Toc498393750 \h  SetPeerInfo  PAGEREF _Toc498393751 \h  GetPeerInfo  PAGEREF _Toc498393752 \h  Close  PAGEREF _Toc498393753 \h  EnumHosts  PAGEREF _Toc498393754 \h  DestroyPeer  PAGEREF _Toc498393755 \h  ReturnBuffer  PAGEREF _Toc498393756 \h  GetPlayerContext  PAGEREF _Toc498393757 \h  GetGroupContext  PAGEREF _Toc498393758 \h  GetCaps  PAGEREF _Toc498393759 \h  SetCaps  PAGEREF _Toc498393760 \h  SetSPCaps  PAGEREF _Toc498393761 \h  GetSPCaps  PAGEREF _Toc498393762 \h  GetConnectionInfo  PAGEREF _Toc498393763 \h  TerminateSession  PAGEREF _Toc498393764 \h  IDirectPlay8Address  PAGEREF _Toc498393765 \h  BuildFromURLW  PAGEREF _Toc498393766 \h  BuildFromURLA  PAGEREF _Toc498393767 \h  Duplicate  PAGEREF _Toc498393768 \h  SetEqual  PAGEREF _Toc498393769 \h  IsEqual  PAGEREF _Toc498393770 \h  Clear  PAGEREF _Toc498393771 \h  GetURLW  PAGEREF _Toc498393772 \h  GetURLA  PAGEREF _Toc498393773 \h  GetSP  PAGEREF _Toc498393774 \h  GetUserData  PAGEREF _Toc498393775 \h  SetSP  PAGEREF _Toc498393776 \h  SetUserData  PAGEREF _Toc498393777 \h  GetNumComponents  PAGEREF _Toc498393778 \h  GetComponentByName  PAGEREF _Toc498393779 \h  GetComponentByIndex  PAGEREF _Toc498393780 \h  Add Component  PAGEREF _Toc498393781 \h  GetDevice  PAGEREF _Toc498393782 \h  SetDevice  PAGEREF _Toc498393783 \h  Stress Testing  PAGEREF _Toc498393784 \h  Network State Testing  PAGEREF _Toc498393785 \h  Host Migration  PAGEREF _Toc498393786 \h  Original host player leaving/dropping  PAGEREF _Toc498393787 \h  Chain-of-command disruption  PAGEREF _Toc498393788 \h  Simultaneous operation  PAGEREF _Toc498393789 \h  Connection/disconnection  PAGEREF _Toc498393790 \h  Simultaneous player connection/disconnection operations  PAGEREF _Toc498393791 \h  Hybrid procedural/parameter validation  PAGEREF _Toc498393792 \h  Sends  PAGEREF _Toc498393793 \h  Verification  PAGEREF _Toc498393794 \h  Hybrid procedural/parameter validation  PAGEREF _Toc498393795 \h  Groups  PAGEREF _Toc498393796 \h  Operations while players leaving/joining  PAGEREF _Toc498393797 \h  Hybrid procedural/parameter validation cases  PAGEREF _Toc498393798 \h  Enumerations  PAGEREF _Toc498393799 \h  Hybrid procedural/parameter validation cases  PAGEREF _Toc498393800 \h  Other notes  PAGEREF _Toc498393801 \h  Document History Revision Action Author 6/20/2000 Initial draft Tristan Jackson (tristanj) 8/1/2000 Updated with planned DirectPlay8 cases and tools to port Tristan Jackson (tristanj) 10/27/2000 Updated with release criteria for Alpha 2 release in December and added details on peer interface tests Tristan Jackson (tristanj) 11/9/2000 Filled in details of all API level test cases.  Updated to reflect which tests are ready and which tests are still being developed and ported Tristan Jackson (tristanj) Overview Open Issues Will Xbox support server and client API s?  For what releases? What level of parameter checking will be present?  Will all error conditions cause an ASSERT? Differences Between Xbox and Desktop Implementations Supported API Currently, the DirectPlay8 interfaces are only documented in Beta versions of the DirectX 8 SDK.  From looking at the information there, I ve come up with the following basic list of API s.  The DirectVoice API s are made up of 3 interfaces   IdirectPlayVoiceClient, IdirectPlayVoiceServer and IDirectPlayVoiceTest.  These interfaces have been left out of this test plan pending an Xbox spec. Peer API s (IDirectPlay8Peer) AddPlayerToGroup CancelAsyncOperation Close Connect CreateGroup DestroyPeer DestroyGroup EnumPlayersAndGroups EnumGroupMembers EnumHosts EnumServiceProviders GetApplicationDesc GetCaps GetConnectionInfo GetGroupContext GetGroupInfo GetLocalHostAddresses GetPeerAddress GetPeerInfo GetPlayerContext GetSendQueueInfo GetSPCaps Initialize RemovePlayerFromGroup ReturnBuffer SendTo SetApplicationDesc SetCaps SetGroupInfo SetPeerInfo SetSPCaps TerminateSession Client API s (IDirectPlay8Client) CancelAsyncOperation Close Connect EnumHosts EnumServiceProviders GetApplicationDesc GetCaps GetConnectionInfo GetSendQueueInfo GetServerAddress GetServerInfo GetSPCaps Initialize ReturnBuffer SetCaps SetClientInfo SetSPCaps Server API s (IDirectPlay8Server) AddPlayerToGroup CancelAsyncOperation Close CreateGroup DestroyGroup EnumPlayersAndGroups EnumGroupMembers EnumServiceProviders GetApplicationDesc GetCaps GetClientAddress GetClientInfo GetConnectionInfo GetGroupContext GetLocalHostAddresses GetPlayerContext GetSendQueueInfo GetSPCaps Initialize RemovePlayerFromGroup ReturnBuffer SendTo SetApplicationDesc SetCaps SetGroupInfo SetServerInfo SetSPCaps Address API  not service provider specific (IDirectPlay8Address) BuildFromURLW BuildFromURLA Duplicate SetEqual IsEqual Clear GetURLW GetURLA GetSP GetUserData SetSP SetUserData GetNumComponents GetComponentByName GetComponentByIndex AddComponent GetDevice SetDevice BuildFromDPADDRESS Address API  IP specific (IDirectPlay8AddressIP) Duplicate SetEqual IsEqual GetURLW GetURLA GetUserData SetUserData BuildFromSockAddr Build Address BuildLocalAddress GetSockAddress GetLocalAddress GetAddress Unsupported API Because Xbox DirectPlay doesn t support lobbying, all of those API s are unsupported.  Other API s that existed for legacy application compatibility are also unsupported. Peer API s (IDirectPlay8Peer) RegisterLobby Client API s (IDirectPlay8Client) RegisterLobby Server API s (IDirectPlay8Server) RegisterLobby Lobby Client API s (IDirectPlay8LobbyClient) All API Lobbied Application API s (IDirectPlay8LobbiedApplication) All API Existing DirectPlay Test Resources Test Plans Core Test Plan   useful to Xbox testing, many tests carry-over  HYPERLINK "\\\\directx1\\public\\VSS\\Dplay\\Docs\\Test Dev Plans\\Dplay8 Core Test Plan.doc"  \\directx1\public\VSS\Dplay\Docs\Test Dev Plans\Dplay8 Core Test Plan.doc Voice Test Plan   useful to Xbox testing, many tests carry-over  HYPERLINK "\\\\directx1\\public\\VSS\\Dplay\\Docs\\Test Dev Plans/DPlay8Voice Test Plan.doc"  \\directx1\public\VSS\Dplay\Docs\Test Dev Plans/DPlay8Voice Test Plan.doc Lobby Test Plan   limited use to Xbox testing, possible Xmatch suggestions  HYPERLINK "\\\\directx1\\public\\VSS\\DPlay\\Docs\\Test Dev Plans\\DPlay8LobbyTestPlan.doc"  \\directx1\public\VSS\DPlay\Docs\Test Dev Plans\DPlay8LobbyTestPlan.doc Test Tools Network State Test Tools TestNet   automated test harness for distributed DPlay tests.  This harness allows for complex network events, such as hosts leaving and being disconnected from a session, to be scripted.  Much of the early effort for testing DirectPlay for Xbox has come via porting the TestNet harness and running the existing tests on the Xbox client.  Now that it has been decided that the Xbox version of DPlay will uses a polling model and Xbox will not support DLLs, it will be difficult to port the TestNet harness in its entirety.  Instead, the only modules that make up the DPlay8 TestNet tests will be ported (as much as is directly applicable to Xbox) and Netsync will be used as the synchronizing agent for tests, which require coordination between multiple machines.  If, at a later date, there is enough time available to look at porting the entire TestNet harness to Xbox, then it will be considered. To install the DirectPlay team s TestNet tools, run this batch file.  HYPERLINK "\\\\davis\\dplay\\testnet\\install.bat"  \\davis\dplay\testnet\install.bat Stress Test Tools DNSalvo   DirectPlay8 sends stress test  HYPERLINK "\\\\tell\\nt\\multimedia\\testsrc\\dplay\\dnsalvo"  \\tell\nt\multimedia\testsrc\dplay\dnsalvo DPVLoopy   DirectVoice loopback session test app  HYPERLINK "\\\\tell\\nt\\multimedia\\testsrc\\dplay\\dpvloopy"  \\tell\nt\multimedia\testsrc\dplay\dpvloopy Toast   Massively multiplayer test game  HYPERLINK "\\\\tell\\nt\\multimedia\\testsrc\\dplay\\toast"  \\tell\nt\multimedia\testsrc\dplay\toast Release Criteria Alpha 2 (Early December) The goal for Alpha 2 is to make DirectPlay available to developers such that they can begin experimenting with it and incorporating it into their titles in progress.  The quality bar is set below that of a beta product but should still be basically usable by developers.  Memory leaks and stress scenarios aren t as important as the basic ability to be able to set up communication sessions and exchange data.  Peer interfaces will be targeted above client and server cases.  For this release, the DirectX 8 SDK will be taken as the spec reference.  In later releases, when DirectPlay for Xbox changes from a callback model to a polling model, this dependence on the DirectX 8 SDK will be relaxed somewhat. DirectVoice will be tested to the extent that it integrates with DirectPlay.  DanRose will test all audio specific portions of DirectVoice. All IDirectPlay8Peer, IDirectPlay8Address and IDirectPlay8AddressIP functions must pass BVT and API level tests.  For Alpha 2, the majority of the API level testing will be done on a local machine without communicating via the network.  These tests are listed under the BVT/API Testing section. Must pass all network state tests such as group management, send/receive, connection/disconnection and enumeration.  Some host migration and complex disconnection/connection-drop cases may be written, but these aren t a priority for this release.  Tests fitting in this category are listed under the Network State Testing section. Must pass thirty minutes of basic send/receive/group-management stress on the IDirectPlay8Peer interfaces in a session with 4 players.  This stress test will either be a ported version of DNSalvo, or a simple Xbox app that does something similar.  More information on these tests will be added to the Stress Testing section. Unless mentioned otherwise in the Xbox DirectPlay spec, all DirectPlay functions in the DirectX 8 SDK must at least have basic functionality.  Bugs will be RAIDed against anything that doesn t match these two sources.  These bugs must be resolved either by updating the Xbox DirectPlay spec, or fixing the function that has the problem. Must be able to setup and run a DirectVoice session over DirectPlay for 5 minutes.  More details on this Test Methodology Overview The initial goal of DirectPlay for Xbox testing will be to leverage tests from the DirectPlay team by porting them to the Xbox environment as quickly as possible.  Because the DirectPlay team s TestNet harness has dependencies on many things that are not present on Xbox (i.e. DLLs, callback model, local file system, registry, etc.) this will not be directly ported to Xbox at this time.  Instead, Netsync for Xbox will be used as a synchronizing agent for DirectPlay tests.  Many of these tests will be ported from TestNet test modules.   Several DirectPlay stress tests will also be ported.  Once porting is done and these tests can be run, any holes will be filled with Xbox-specific tests. BVT/API Testing Goal: Cover every DirectPlay8 API that will be supported by Xbox and call it with A case for each category of success (e.g. asynchronous, secure, etc.) A case for each error code indicating failure (debug only, retail will not have parameter checking) Note: Items highlighted in red are not yet implemented IDirectPlay8PeerTests DirectPlay8Create DirectPlay8PeerCreate with both pointers NULL DirectPlay8PeerCreate with voice pointer NULL DirectPlay8PeerCreate with peer pointer NULL DirectPlay8PeerCreate with both pointers valid Initialize Initialize with NULL context, handler and 0 flags using C++ macro Initialize with NULL context, handle and 0 flags Initialize with NULL context and invalid flags Initialize with 0 flags using C++ macro Initialize with 0 flags Initialize with 0 flags when already initialized Close initialized interface Re-initialize interface with 0 flags Close re-initialized interface Release initialized interface EnumServiceProviders Enumerate service providers with uninitialized interface, all NULLs and 0 flags using C++ macro Enumerate service providers with uninitialized interface, all NULLs and 0 flags Enumerate service providers with uninitialized interface, NULL GUIDs, NULL buffer, NULL size and 0 flags Enumerate service providers with uninitialized interface, NULL GUIDs, NULL buffer and invalid flags Initialize used interface with NULL context and 0 flags Enumerate service providers with NULL GUIDs, NULL buffer, non-zero size and 0 flags Enumerate service provider with NULL GUIDs, NULL buffer and 0 flags Enumerate service provider with NULL GUIDs, NULL buffer, non-zero count and 0 flags Enumerate service providers with NULL GUIDs and 0 flags Enumerate invalid service provider GUID devices Enumerate TCP/IP devices with invalid app GUID Enumerate TCP/IP devices with NULL GUIDs, NULL buffer and 0 flags Enumerate TCP/IP devices with NULL GUIDs and 0 flags Close used interface Release used interface CancelAsyncOperation Cancel async operation with uninitialized interface, NULL and 0 flags using C++ macro Cancel async operation with uninitialized interface, NULL and 0 flags Start async connect attempt to local address which will eventually fail Cancel async operation with invalid handle and 0 flags Cancel async operation with NULL handle and invalid flags Cancel async operation with valid connect handle and the CONNECT flag Cancel async operation with valid connect handle and ALL_OPERATIONS flag Cancel async operation with valid connect handle Wait for cancelled connection to complete Start second async connection to local address which will eventually fail Cancel async operations with ENUM flag Cancel async operations with CONNECT flag Wait for canceled connection to complete Close used interface Release used interface Connect Connect with uninitialized interface, all NULLs and 0 flags using C++ macro Connect with uninitialized interface, all NULLs and 0 flags Connect with uninitialized interface and NULL application description Connect with uninitialized interface and application description of size 0 Connect with uninitialized interface and application description too large Connect with uninitialized interface and invalid flags Connect with uninitialized interface and NULL host address Connect with uninitialized interface, empty host address and NULL device address Connect with uninitialized interface and non-NULL security descriptor Connect with uninitialized interface and non-NULL security credentials Connect with uninitialized interface, asynchronously with NULL async operation handle Connect with uninitialized interface, synchronously with valid async operation handle Connect with uninitialized interface and invalid flags Connect with uninitialized interface Connect with SP-only host address and empty device address Connect asynchronously to self which will eventually fail Connect asynchronously to self while another connection is still pending Wait for asynchronous connection to fail Connect synchronously to self which will eventually fail Host a session locally Connect when already hosting Close hosting peer that tried to connect Reinitialize peer that tried connecting while hosting Create new host Connect asynchronously to local host Wait for asynchronous connect completion Connect when already connected Close asynchronously connected peer Reinitialize peer that tried connecting when connected Connect synchronously to local host Close synchronously connected peer Close host Release host Release synchronously connected peer SendTo Send on uninitialized interface to 0 with all NULLs and 0s using C++ macro Send on uninitialized interface to 0 with all NULLs and 0s Send on uninitialized interface to AllPlayersGroup with NULL buffer descriptor Send on uninitialized interface to AllPlayersGroup with 0 buffer descriptor count Send on uninitialized interface to AllPlayersGroup asynchronously with NULL async handle Send on uninitialized interface to AllPlayersGroup synchronously with async handle Send on uninitialized interface to AllPlayersGroup with invalid flags Send on uninitialized interface to AllPlayersGroup with NOCOPY and NOCOMPLETE Send on uninitialized interface to AllPlayersGroup with COMPLETEONPROCESS Send on uninitialized interface to AllPlayersGroup with PRIORITY_LOW and PRIORITY_HIGH Send on uninitialized interface to AllPlayersGroup with NOCOPY Send to AllPlayersGroup without a connection Host a local session to send on Send to invalid player ID Send 1 byte asynchronously to AllPlayersGroup Wait for asynchronous send to complete Wait for receive to be indicated Send 128 bytes to self Wait for asynchronously send to complete Wait for receive to be indicated Send 1MB NOCOPY to AllPlayersGroup Wait for asynchronous send to complete Wait for receive to be indicated Send 1MB to self synchronously Wait for receive to be indicated Send 1MB to AllPlayersGroup Wait for asynchronous send to complete Wait for receive to be indicated Close peer object that ran send tests Release peer object that ran send tests GetSendQueueInfo Get send queue info on uninitialized interface with all NULLs and 0s using C++ macro Get send queue info on uninitialized interface with all NULLs and 0s Get send queue info on uninitialized interface with invalid flags Get send queue info on uninitialized interface Get send queue info without a connection Host a local session to get send queue info on Get send queue info for player 0 Get send queue info for invalid player ID Get send queue info for local player Close peer that ran send queue info tests Reinitialize peer that ran send queue info tests Create another host to connect to Connect peer to local host Get send queue info of host on client Get send queue of host on client with NULL dwNumMsgs Get send queue of host on client with NULL dwNumBytes Close peer object that ran send queue info tests Close host object that ran send queue info tests Release host object that ran send queue info tests Release peer object that ran send queue info tests Host on uninitialized interface with all NULLs and 0 flags Host on uninitialized interface with NULL application description Host on uninitialized interface when application description has size 0 Host on uninitialized interface when application description is too large Host on uninitialized interface with invalid flags Host on uninitialized interface with REQUIREPASSWORD but no password provided Host on uninitialized interface with password string without REQUIREPASSWORD Host on uninitialized interface with application description using GUID_NULL Host on uninitialized interface with NULL device address Host on uninitialized interface with 0 device address count Host on uninitialized interface with empty address Host on uninitialized interface Host with address using unknown SP GUID Host with CLIENT_SERVER flag Host with 2 devices where the second has no SP specified Host with 2 devices using same SP Close host that ran hosting tests Release host that ran hosting tests GetApplicationDesc Get application description on uninitialized interface with NULLs and 0 flags using C++ macro Get application description on uninitialized interface with NULLs and 0 flags Get application description on uninitialized interface with NULL buffer and invalid flags Get application description on uninitialized interface with NULL buffer Get application description with NULL buffer without a connection Host session to get application description on Get application description with NULL buffer Get application description with application descriptor size of 0 Get application description with application descriptor size that is too large  Get application description Get application description with extra buffer space Close peer object that ran application description tests Release peer object that ran application description test SetApplicationDesc Set application description on uninitialized interface with NULL and 0 flags using C++ macro Set application description on uninitialized interface with NULL and 0 flags Set application description on uninitialized interface with invalid flags Set application description on uninitialized interface Set application description without a connection Host session to run set application description tests on Set application description Wait for application description update to be indicated on host Close peer object that ran set application description tests Reinitialized peer object that ran set application description tests Create peer host object to run set application description tests Connect peer to local host Set application description on peer non-host Set application description on peer host Wait for application description update to be indicated on host Wait for application description update to be indicated on non-host Close peer object that ran set application description tests Close host object that ran set application description tests Release host object that ran set application description tests Release peer object that ran set application description tests CreateGroup Create group on uninitialized interface with all NULLs and 0 flags using C++ macro Create group on uninitialized interface with all NULLs and 0 flags Create group on uninitialized interface with NULL group info Create group on uninitialized interface with NULL async handle Create group on uninitialized interface with invalid flags Create group on uninitialized interface synchronously with async handle Create group on uninitialized interface Create group without a connection Host a session to create groups on Create group Wait for create group operation to asynchronously complete Create second group synchronously Close host that ran create group tests Reinitialize peer Create new host object Connect peer to local host Create group on host Wait for create group operation to asynchronously complete on host Wait for group creation to be indicated on peer Create group on peer Wait for create group operation to asynchronously complete on peer Wait for group creation to be indicated on host Close peer object that ran create group tests Close host object that ran create group tests Release host object that ran create group tests Release peer object that ran create group tests DestroyGroup Destroy group on uninitialized interface with AllPlayersGroup using C++ macro. Destroy group on uninitialized interface with AllPlayersGroup Destroy group on uninitialized interface with NULL async handle Destroy group on uninitialized interface with invalid flags Destroy group on uninitialized interface synchronously with async operation handle Destroy group on uninitialized interface Destroy group without a connection Host session to delete groups on Destroy invalid group Destroy internal ID for AllPlayersGroup Create group synchronously Destroy created group asynchronously Wait for destroy group operation to asynchronously complete Create second group synchronously Destroy created group synchronously Close peer object that ran delete group tests Reinitialize peer Create new host object Connect peer to local host Create group on peer Wait for group creation to be indicated on host Destroy group on peer Wait for destroy group operation to asynchronously complete on peer Wait for group destruction to be indicated on host Close peer object that ran destroy group tests Close host object that ran destroy group tests Release host object that ran destroy group tests Release peer object that ran destroy group tests AddPlayerToGroup Add player to group on uninitialized interface with AllPlayersGroup and all NULLs and 0 s using C++ macro Add player to group on uninitialized interface with AllPlayersGroup and all NULLs and 0 Add player to group on uninitialized interface with invalid flags Add player to group on uninitialized interface Add player to group without a connection Host session to add players to groups on Add self player to invalid group Add self player to AllPlayersGroup internal ID Create group synchronously to add players to Add invalid player to valid group Add self player to valid group asynchronously Wait for add player operation to asynchronously complete Add self player to group again Remove self player from group Add self player to group synchronously Close peer that ran add player to group tests Reinitialize peer Create new host object Connect peer to local host Create group on peer synchronously Wait for group creation to be indicated on host Add self player to peer Wait for add player operation to asynchronously complete on peer Wait for add player to be indicated on host Add host player to peer synchronously Wait for add player to be indicated on host Close peer object that ran add player to group tests Close host object that ran add player to group tests Release host object that ran add player to group tests Release peer object that ran add player to group tests RemovePlayerFromGroup Remove player from group on uninitialized interface with AllPlayersGroup and all NULLs and 0 s using C++ macro Remove player from group on uninitialized interface with AllPlayersGroup and all NULLs and 0 Remove player from group on uninitialized interface with invalid flags Remove player from group on uninitialized interface Remove player from group without a connection Host session to remove players from groups on Remove self player from invalid group Remove self player from all players group internal ID Create group synchronously Remove invalid player from valid group Remove player not in group Add self player to group synchronously Remove self player from group asynchronously Wait from remove player operation to asynchronously complete Add self player to group synchronously Remove self player from group asynchronously Close peer that ran remove player tests Reinitialize peer Create new host object Connect peer to local host Create group on peer synchronously Wait for group creation to be indicated on host Add self player to group synchronously on peer Wait for add player to be indicated on host Remove self player from group on client Wait for remove player operation to asynchronously complete Wait for remove player to be indicated on host Add host player to group synchronously on peer Wait for add player to be indicated on host Remove host player from group synchronously on peer Wait for remove player to be indicated on host Close peer object that ran remove player from group tests Close host object that ran remove player from group tests Release host object that ran remove player from group tests Release peer object that ran remove player from group tests SetGroupInfo Set group info on uninitialized interface with AllPlayersGroup and all NULLs and 0 s using C++ macro Set group info on uninitialized interface with AllPlayersGroup and all NULLs and 0 Set group info on uninitialized interface with NULL info pointer Set group info on uninitialized interface with invalid flags Set group info on uninitialized interface Set group info without a connection Host session to set group info on Set group info with invalid group Set group info with AllPlayersGroup internal ID Create group synchronously Set group info asynchronously Wait for set group info operation to complete asynchronously Set group info synchronously Close peer that ran set group info tests Reinitialize peer Create new host object Connect peer to local host Create group on peer synchronously Wait for group creation to be indicated on host Set group info on peer asynchronously Wait for set group info operation to complete asynchronously Wait for new group info to be indicated on host Close peer object that ran set group info tests Close host object that ran set group info tests Release host object that ran set group info tests Release peer object that ran set group info tests GetGroupInfo Get group info on uninitialized interface with AllPlayersGroup and all NULLs and 0 s using C++ macro Get group info on uninitialized interface with AllPlayersGroup Get group info on uninitialized interface with NULL size Get group info on uninitialized interface with NULL buffer and non-zero size Get group info on uninitialized interface with invalid flags Get group info on uninitialized interface Get group info without a connection Host session to get group info on Get group info with invalid group Get group info with AllPlayersGroup internal ID Create group synchronously Get group info with NULL buffer Get group info with info size of 0 Get group info with group info size too large Get group info Close peer that ran get group info tests Reinitialize peer Create new host object Connect peer to local host Create group on host synchronously Wait for group creation to be indicated on peer Get group info on peer with NULL buffer Get group info on peer Close peer object that ran get group info tests Close host object that ran get group info tests Release host object that ran get group info tests Release peer object that ran get group info tests EnumPlayersAndGroups Enumerate players and groups on uninitialized interface with all NULLs and 0 s using C++ macro Enumerate players and groups on uninitialized interface with all NULLs and 0 Enumerate players and groups on uninitialized interface with non-0 count Enumerate players and groups on uninitialized interface with 0 flags Enumerate players and groups on uninitialized interface with invalid flags Enumerate players on uninitialized interface Enumerate players and groups without a connection Host session to enumerate players and groups on Enumerate players with NULL buffer Enumerate players Enumerate players and groups with NULL buffer Enumerate players and groups with no groups yet created Enumerate groups with NULL buffer Enumerate groups with no groups yet created Create group synchronously Enumerate groups Enumerate players and groups Close peer that ran enumerate players and groups tests Reinitialize peer Create new host object Connect peer to local host Create group on host synchronously Wait for group creation to be indicated on peer Enumerate players and groups on peer Close peer object that ran enumerate players and groups tests Close host object that ran enumerate players and groups tests Release host object that ran enumerate players and groups tests Release peer object that ran enumerate players and groups tests EnumGroupMembers Enumerate group members on uninitialized interface with AllPlayersGroup and all NULLs and 0 s using C++ macro Enumerate group members on uninitialized interface with AllPlayersGroup and all NULLs and 0 Enumerate group members on uninitialized interface with NULL size Enumerate group members on uninitialized interface with NULL buffer and non-zero size Enumerate group members on uninitialized interface with invalid flags Enumerate group members on uninitialized interface Enumerate group members without a connection Host session to enumerate group members on Enumerate group members with invalid group Enumerate group members of AllPlayersGroup internal ID Create group synchronously Enumerate group members of empty group with NULL buffer Enumerate group members of empty group Add self player to group synchronously Enumerate group members with NULL buffer Enumerate group members Close peer that ran enumerate group members tests Reinitialize peer Create new host object Connect peer to local host Create group on host synchronously Wait for group creation to be indicated on peer Add self player to group synchronously on host Wait for add player to be indicated on peer Enumerate group members with NULL buffer on peer Enumerate group members on peer Close peer object that ran enumerate group members tests Close host object that ran enumerate group members tests Release host object that ran enumerate group members tests Release peer object that ran enumerate group members tests SetPeerInfo Set peer info on uninitialized interface with all NULLs and 0 flags using C++ macro Set peer info on uninitialized interface with all NULLs and 0 flags Set peer info on uninitialized interface with NULL player info structure Set peer info on uninitialized interface with NULL async operation handle Set peer info on uninitialized interface with invalid flags Set peer info on uninitialized interface synchronously with async operation handle Set peer info on uninitialized interface Set peer info without a connection Host session to set peer info on Set peer info asynchronously Wait for set peer info operation to asynchronously complete Close peer object that ran set peer info tests Reinitialize peer Create new host object Connect peer to local host Set peer info on peer Wait for set peer info operation to asynchronously complete on peer Wait for peer information change to be indicated on host Close peer object that ran set peer info tests Close host object that ran set peer info tests Release host object that ran set peer info tests Release peer object that ran set peer info tests GetPeerInfo Get peer info on uninitialized interface with all NULLs and 0 s using C++ macro Get peer info on uninitialized interface with all NULLs and 0 Get peer info on uninitialized interface with NULL buffer and non-zero size Get peer info on uninitialized interface with invalid flags Get peer info on uninitialized interface Get peer info without a connection Host session to get peer info on Get peer info for invalid player Get peer info with NULL buffer Get peer info with peer info size of 0 Get peer info with peer info size too large Get peer info Close peer object that ran get peer info tests Reinitialize peer Create new host object Connect peer to local host Get peer info of host s player on peer with NULL buffer Get peer info of host s player on peer Close peer object that ran get peer info tests Close host object that ran get peer info tests Release host object that ran get peer info tests Release peer object that ran get peer info tests Close Close on uninitialized interface using C++ macro Close on uninitialized interface Close on uninitialized interface with invalid flags Close without a connection Host session to close Close after hosting with no connected clients Enumerate hosts asynchronously Close while enumeration still active Release peer object that ran close tests EnumHosts Enumerate hosts on uninitialized interface with all NULLs and 0 s using C++ macro Enumerate hosts on uninitialized interface with all NULLs and 0 Enumerate hosts on uninitialized interface with NULL application descriptor Enumerate hosts on uninitialized interface with NULL host and device addresses Enumerate hosts on uninitialized interface with host address that doesn t have an SP set Enumerate hosts on uninitialized interface with NULL device address Enumerate hosts on uninitialized interface with NULL data but non-zero size Enumerate hosts on uninitialized interface with NULL async operation handle Enumerate hosts on uninitialized interface synchronously with async operation handle Enumerate hosts on uninitialized interface with invalid flags Enumerate hosts on uninitialized interface Enumerate hosts asynchronously Wait for host enumeration operation to asynchronously complete Enumerate hosts synchronously Host session to enumerate hosts on Enumerate hosts after hosting Close peer object that ran enumerate hosts tests Reinitialize peer Create new host object Enumerate hosts on peer with host address specified Enumerate hosts on peer with host address specified again Wait for first enumerate hosts operation to complete asynchronously Wait for second enumerate hosts operation to complete asynchronously Enumerate host on peer with NULL host address Wait for enumerate host with NULL host address operation to complete asynchronously Close peer object that ran enumerate hosts tests Close host object that ran enumerate hosts tests Release host object that ran enumerate hosts tests Release peer object that ran enumerate hosts tests DestroyPeer Destroy peer on uninitialized interface with peer 0 using C++ macro Destroy peer on uninitialized interface with peer 0 Destroy peer on uninitialized interface Destroy peer on uninitialized interface with NULL buffer but non-zero size Destroy peer on uninitialized interface with invalid flags Destroy peer without a connection Host session to destroy peer on Destroy peer with invalid player ID Destroy peer with self player Close peer object that ran destroy peer tests Reinitialize peer Create new host object Connect peer to local host Wait for player creation to be indicated on host Destroy host player on peer Destroy self player on peer Destroy peer player on host Wait for player destruction to be indicated on peer Wait for player destruction to be indicated on host Close peer object that ran destroy player tests Close host object that ran destroy player tests Release host object that ran destroy player tests Release peer object that ran destroy player tests ReturnBuffer Return buffer on uninitialized interface with NULL buffer using C++ macro Return buffer on uninitialized interface with NULL buffer Return buffer on uninitialized interface with invalid flags Return buffer on uninitialized interface Return buffer without a connection Host session to call return buffer on Send message to self Wait for receive to be indicated Return received buffer Close peer object that ran return buffer tests Release peer object that ran return buffer tests GetPlayerContext Get player context on uninitialized interface with player 0 using C++ macro Get player context on uninitialized interface with player 0 Get player context on uninitialized interface with NULL pointer Get player context on uninitialized interface with invalid flags Get player context on uninitialized interface Get player context without a connection Host session to get player context on Get player context with invalid player ID Get player context with valid player ID Close peer object that ran get player context tests Reinitialize peer Create new host object Connect peer to local host Wait for player creation to be indicated on host Get player context of self on host Get player context of peer on host Get player context of host on peer Get player context of self on peer Close peer object that ran get player context tests Wait for player destruction to be indicated on client Wait for player destruction to be indicated on host Close host object that ran get player context tests Release host object that ran get player context tests Release peer object that ran get player context tests GetGroupContext Get group context on uninitialized interface with group 0 using C++ macro Get group context on uninitialized interface with group 0 Get group context on uninitialized interface with NULL pointer Get group context on uninitialized interface with invalid flags Get group context on uninitialized interface Get group context without a connection Host session to get group context on Get group context with local player ID Get group context with AllPlayersGroup internal ID Create group synchronously Get group context with valid group Close peer that ran get group context tests Reinitialize peer Create new host object Connect peer to local host Create group on host synchronously Wait for group creation to be indicated on client Get group context on host Get group context on client Close peer object that ran get group context tests Close host object that ran get group context tests Release host object that ran get group context tests Release peer object that ran get group context tests GetCaps Get caps on uninitialized interface with NULL pointer using C++ macro Get caps on uninitialized interface with NULL pointer Get caps on uninitialized interface with size 0 Get caps on uninitialized interface with size too large Get caps on uninitialized interface with invalid flags Get caps on uninitialized interface Get caps on without a connection Host session to get caps on Get caps while hosting session Close peer object that ran get caps tests Release peer object that ran get caps tests SetCaps Set caps on uninitialized interface with NULL pointer and 0 flags using C++ macro Set caps on uninitialized interface with NULL pointer and 0 flags Set caps on uninitialized interface with size 0 Set caps on uninitialized interface with size too large Set caps on uninitialized interface with invalid flags Set caps on uninitialized interface Set caps with valid parameters Host session after setting caps Set caps after hosting session Close peer object that ran get caps tests Release peer object that ran get caps tests SetSPCaps Set SP caps on uninitialized interface with NULL pointers and 0 flags using C++ macro Set SP caps on uninitialized interface with NULL pointers and 0 flags Set SP caps on uninitialized interface with NULL caps pointer Set SP caps on uninitialized interface with SP caps of size 0 Set SP caps on uninitialized interface with SP caps of size too large Set SP caps on uninitialized interface with invalid flags Set SP caps on uninitialized interface Set SP caps with valid parameters Set SP caps for invalid SP GUID Host session after setting SP caps Set SP caps after hosting Close peer object that ran get caps tests Release peer object that ran get caps tests GetSPCaps Get SP caps on uninitialized interface with NULL pointers using C++ macro Get SP caps on uninitialized interface with NULL pointers Get SP caps on uninitialized interface with NULL GUID Get SP caps on uninitialized interface with NULL caps Get SP caps on uninitialized interface with caps of size 0 Get SP caps on uninitialized interface with caps of size too large Get SP caps on uninitialized interface with invalid flags Get SP caps on uninitialized interface Get SP caps with invalid SP GUID Get SP caps with valid parameters Host session after getting SP caps Get SP caps after hosting Close peer object that ran get caps tests Release peer object that ran get caps tests GetConnectionInfo Get connection info on uninitialized interface with NULL pointer using C++ macro Get connection info on uninitialized interface with NULL pointer Get connection info on uninitialized interface with size 0 Get connection info on uninitialized interface with size too large Get connection info on uninitialized interface with invalid flags Get connection info on uninitialized interface Get connection info without a connection Host session to get connection info on Get connection info for player 0 Get connection info for invalid player ID Get connection info for local player Close peer object that ran get connection info tests Reinitialize peer Create new host object Connect peer to local host Get connection info of host on peer Close peer object that ran get connection info tests Close host object that ran get connection info tests Release host object that ran get connection info tests Release peer object that ran get connection info tests TerminateSession Terminate session on uninitialized interface using C++ macro Terminate session on uninitialized interface Terminate session on uninitialized interface with NULL buffer but non-zero size Terminate session on uninitialized interface with invalid flags Terminate session without a connection Host session to run terminate tests on Terminate hosted session Wait for player destruction to be indicated Close peer that ran terminate tests Reinitialize peer Create new host object Connect peer to local host Waiting for player creation to be indicated on host Terminate session on peer Terminate session on host Wait for player destruction to be indicated on host Wait for player destruction to be indicated on client Close peer object that ran terminate info tests Close host object that ran terminate info tests Release host object that ran terminate info tests Release peer object that ran terminate info tests IDirectPlay8Address BuildFromURLW Build from UNICODE URL using NULL pointer Build from UNICODE URL using empty string Build from UNICODE URL using header Build from UNICODE URL using provider key name Build from UNICODE URL using header and provider key name Build from UNICODE URL using header and provider with no value Build from UNICODE URL using header and provider with invalid value Build from UNICODE URL using header and provider with unknown GUID Build from UNICODE URL using header and provider with TCP/IP GUID Build from UNICODE URL using header and provider with unknown GUID (double equal sign) Build from UNICODE URL using provider with unknown GUID and header Build from UNICODE URL using header and provider with unknown GUID and semicolon Build from UNICODE URL using header, provider with unknown GUID, no   and no-encode user data Build from UNICODE URL using header, provider with unknown GUID and no-encode user data Build from UNICODE URL using header, provider with unknown GUID and extraneous junk Build from UNICODE URL using header, extraneous junk and provider with unknown GUID Build from UNICODE URL using header, provider with unknown GUID, no separator, and a miscellaneous key and value Build from UNICODE URL using header, provider with unknown GUID and a miscellaneous key and value Build from UNICODE URL using header, provider with unknown GUID and a provider with the TCP/IP GUID Build from UNICODE URL using header, a miscellaneous key and value and a provider with unknown GUID Build from UNICODE URL using header, a miscellaneous key and a must encode value Build from UNICODE URL using header, provider with unknown GUID and a miscellaneous key and value unlocked Release DirectPlay8Address object that ran BuildFromURLW tests BuildFromURLA Build from ANSI URL using NULL pointer Build from ANSI URL using empty string Build from ANSI URL using header Build from ANSI URL using provider key name Build from ANSI URL using header and provider key name Build from ANSI URL using header and provider with no value Build from ANSI URL using header and provider with invalid value Build from ANSI URL using header and provider with unknown GUID Build from ANSI URL using header and provider with TCP/IP GUID Build from ANSI URL using header and provider with unknown GUID (double equal sign) Build from ANSI URL using provider with unknown GUID and header Build from ANSI URL using header and provider with unknown GUID and semicolon Build from ANSI URL using header, provider with unknown GUID, no   and no-encode user data Build from ANSI URL using header, provider with unknown GUID and no-encode user data Build from ANSI URL using header, provider with unknown GUID and extraneous junk Build from ANSI URL using header, extraneous junk and provider with unknown GUID Build from ANSI URL using header, provider with unknown GUID, no separator and a miscellaneous key and value Build from ANSI URL using header, provider with unknown GUID and a miscellaneous key and value Build from ANSI URL using header, provider with unknown GUID and a provider with TCP/IP GUID Build from ANSI URL using header, a miscellaneous key and value and a provider with unknown GUID Build from ANSI URL using header, miscellaneous key and a must encode value Build from ANSI URL using header, provider with unknown GUID and a miscellaneous key and value unlocked Duplicate Duplicate with a NULL pointer Duplicate without object being set Build from UNICODE URL using header and provider with unknown GUID Duplicate with object being set Get duplicate object UNICODE URL size Get duplicate object UNICODE URL Rebuild address object from UNICODE URL using header and miscellaneous key 1 Get duplicate object UNICODE URL SetEqual Set equal with NULL pointer Set equal to object without being set Set equal from an empty object to an empty object Build from UNICODE URL to pass into set equal Set equal with address built from UNICODE URL Get set-equal object UNICODE URL size Get set-equal object UNICODE URL Rebuild address object from UNICODE URL using header and miscellaneous key 1 Set equal on address that contains data from previous set equal Get set-equal object UNICODE URL size Get set-equal object UNICODE URL IsEqual Is equal with NULL pointer Is equal to object without being created Is equal from empty object to empty object Build first object from UNICODE URL to pass into is equal Is equal from built object to empty object Build second object from UNICODE URL to pass into is equal Is equal from built object to built object (identically built) Rebuild second object from new UNICODE URL to pass into is equal Is equal from built object to built object (not identically built) Clear Clear without object being set Build from UNICODE URL using header and provider with unknown GUID Clear built object GetURLW Get UNICODE URL with NULL pointers Get non-set object UNICODE URL size Get non-set object UNICODE URL Build from UNICODE URL using header and provider with unknown GUID Get set object UNICODE URL size Get set object UNICODE URL Clear object Add component miscellaneous key and value with string type Get modified object UNICODE URL size Get modified object UNICODE URL GetURLA Get ANSI URL with NULL pointers Get non-set object ANSI URL size Get non-set object ANSI URL Build from ANSI URL using header and provider with unknown GUID Get set object ANSI URL size Get set object ANSI URL Clear object Add component miscellaneous key and value with string type Get modified object ANSI URL size Get modified object ANSI URL GetSP Get non-set object SP with NULL pointer Get non-set object SP Build from UNICODE URL using header and provider with unknown GUID Get set object SP GetUserData Get user data with NULL pointers Get non-set object user data with NULL buffer Build from UNICODE URL using header and provider with unknown GUID Get set object user data with NULL buffer Build from UNICODE URL using header and provider with unknown GUID and no-encode user data Get set object user data with NULL buffer Get set object user data SetSP Set SP with NULL pointer Set SP with unknown GUID Build from UNICODE URL using header and provider with unknown GUID Set SP on built object with TCP/IP SP SetUserData Set user data with NULL pointer and size 0 Set user data with NULL pointer and non-zero size Set user data with no-encode data and zero size Set user data with no-encode data Set user data back to nothing GetNumComponents Get num components with NULL pointer Get num components for non-set object Build from UNICODE URL using header and provider with unknown GUID Get num components on built object Build from UNICODE URL using header and provider with unknown GUID and miscellaneous key and value  Get num components on second built object Build from UNICODE URL using header and 2 miscellaneous keys and values Get num components on third built object Build from UNICODE URL using header and provider with unknown GUID and 2 miscellaneous keys and values Get num components on fourth built object Build from UNICODE URL using header and provider with unknown GUID and the same miscellaneous key and value repeated twice Get num components and fifth built object GetComponentByName Get component by name with NULL pointers Get component by name with NULL size pointer Get component by name with NULL type pointer Get component by name with non-set object Build from UNICODE URL using header, provider with unknown GUID and miscellaneous key and value Get component by name with non-existent UNICODE name Get component size with provider name Get component with provider name Get component size with miscellaneous key name Get component with miscellaneous key name GetComponentByIndex Get component by index 0 with NULL pointers Get component by index 0 with NULL name length Get component by index 0 with NULL buffer size Get component by index 0 with NULL data type Get component by index 0 with non-set object Get component by index 1 with non-set object Get component by invalid index with non-set object Build from UNICODE URL using header, provider with unknown GUID and a miscellaneous key and value Get component by index 2 Get component by invalid index Get component size by index 0 Get component by index 0 Get component size by index 1 Get component by index 1 Add Component Add component with NULL pointers, 0 size and 0 type Add component with no data and 0 type Add component with 0 type Add component with miscellaneous key of string type Add component with provider of GUID type Add component with provider of binary type Get UNICODE URL size of built object Get UNICODE URL of built object Add component with key of string type that must be encoded Get UNICODE URL size of modified object Get UNICODE URL of modified object GetDevice Get device on non-set object with NULL pointer Get device on non-set object Build from UNICODE URL using header and device with unknown GUID Get device on set object SetDevice Set device with NULL pointer Set device with unknown GUID Clear object that was set with unknown GUID Build from UNICODE URL using header and device with unknown GUID Set device on set object with TCP/IP GUID Stress Testing Goal:  Create multithreaded applications that maximize network throughput and call as many DirectPlay API s in as many states and with as many parameters as possible over time. Note: Items highlighted in red are not yet implemented Network State Testing Goal:  Create special test cases for issues that are dependent on network state (e.g. host migration due to timeout).  These test cases come from the DirectPlay Core Test Plan and will be dependent on the TestNet test harness being ported to Xbox. Note: Items highlighted in red are not yet implemented Host Migration Original host player leaving/dropping Simple 3 player normal migration case Round robin 3 player normal migration case (50 iterations) Simple 3 player drop migration case Round robin 3 player drop migration case (50 iterations) Chain-of-command disruption Simple 4 player next-in-line leave case Simple 4 player next-in-line drop case Medium-sized next-in-line leave case Medium-sized next-in-line drop case Simultaneous operation Medium-sized n-player normal migration Outstanding sends while host migrating case Group operations while host migrating case Non-next-in-line player leave/drop while host migrating Non-next-in-line player leave/drop while next-in-line migrating Player/group info changes while host migrating Player join attempt while host migrating Connection/disconnection Simultaneous player connection/disconnection operations Many simultaneous connects and disconnects Server leave/drop connection Join while player leaving Join while player dropping In-or-out round-robin join while leaving In-or-out round-robin join while dropping Medium-sized in-or-out round-robin join while leaving Medium-sized in-or-out round-robin join while dropping case Hybrid procedural/parameter validation Multiple sessions Host reject connection Connect to wrong session Specify connection data Max-players Password-protected session Sends Verification Simple send Leave with sends pending Drop with sends pending Multiple players leave with sends pending Multiple players drop with sends pending Long term sends (vary parameters over time) Long terms sends (vary link quality) Sends with timeouts Validate send queue and connection info Queue many messages t return receive buffers Hybrid procedural/parameter validation Cancel sends from another thread Groups Operations while players leaving/joining Enumerate players while player being added/removed Enumerate players while player leaving Enumerate players while group being destroyed Hybrid procedural/parameter validation cases Simple group Sends to large groups Cancel group sends Cancel group sends from another thread Enumerations Hybrid procedural/parameter validation cases Have multiple peers enumerate for sessions on known host.  Verify that host receives enumeration queries and non-hosts receive enumeration responses. (EnumsExec_SimpleAll)  Several permutations possible With application reserved data  With user data With host rejecting enumeration requests With enumeration broadcast With enumeration unicast Have multiple clients enumerate for sessions on known server.  Verify that server receives enumeration queries and clients receive enumeration responses. (EnumsExec_SimpleAll)  Several permutations possible... With application reserved data  With user data With host rejecting enumeration requests With enumeration broadcast With enumeration unicast Try enumerating peer host with client interface.  (EnumsExec_Validate) Try enumerating server with non-host peer interface.  (EnumsExec_Validate) Try enumerating server that has set a max player limit with client.  (EnumsExec_Validate) Try enumerating host that has set a max player limit with peer.  (EnumsExec_Validate) Try enumerating server that is password protected with client.  (EnumsExec_Validate) Try enumerating host that is password protected with peer.  (EnumsExec_Validate) Try enumerating client with client.  (EnumsExec_Validate) Try enumerating non-host peer with non-host peer.  (EnumsExec_Validate) Cancel enumerations Host refuse to respond Join with enumeration active Simultaneous enumerations Password-required Max players Medium-sized session Other notes DirectPlay8 for Xbox Test Plan DirectPlay8 for Xbox Test Plan       styleref RevisionNumber Revision 0.3 styleref date October 26, 2000 Microsoft Confidential Microsoft Confidential styleref RevisionNumber Revision 0.3 styleref date October 26, 2000
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\xkrnltp.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. X-Box Kernel Test Plan Title _PID_HLINKSX-Box Kernel Test Plan johndaly Normal.dot Josh Poley Microsoft Word 9.0RD&QbEbjbjU Overall X-Box Kernel Test Plan Please see individual test plans for each feature (derived from : XBox Kernel and  XBox API (XAPI) Specification Version .03) Areas of responsibility for the X-Box Kernel Test Team Hardware Initialization (and BIOS, if we have BIOS) area owner: Sakphong Chanbai schedule: when testable: now, but limited to our test hardware scheduled code complete date: don't know, could you help me on this? scheduled test complete date: depends on code complete date and hardware needs spec review: related specs is available from file:   HYPERLINK "\\\\xbox\\specs\\XBox Boot Sequence - Tray.vsd"  \\xbox\specs\XBox Boot Sequence - Tray.vsd - needs test plan working on it (based on current spec) - preliminary guess at testing requirements - code review - Static source coded analysis (lint/typo/prefix) - debug walkthrough - need to test software response to all possible hardware failures / conditions - this may require some kind of software, but many of the errors would preclude software getting loaded - use fault injection to simulate hardware failures - we should try to test every possible condition - this will be a finite and achievable number - should require very little test development - perf test: measure and minimize boot time - probably could use a good STE for this NT testing resources: plans: N/A tests: N/A USB Driver area owner: Josh Poley dev owner: Mitchell Dernis (mitchd) schedule: when testable: <now, but limited to our test hardware> scheduled code complete date: scheduled test complete date: - needs spec review %_NTDRIVE%%_NTROOT%\private\ntos\dd\usbnew\docs\usbarch.doc - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - test code: - input simulator (software) to pump input just above the hardware - hooks for all hookable parts of the driver - integrity tests using the input driver / hooks to make sure things behave as expected - stress tests based on the integrity tests - simulated bad clients to make sure that poor software does not gum up the driver too badly - at the highest level, a test input client that provides visual feedback of all data coming in from controller, basically a USB smart client, maybe we can steal a piece of software like this - manual tests incidentally test the rest of it, such as hot plugging, etc NT testing resources: plans:  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\ntdrvtst\\storage\\procedures\\usb\\Universal Serial Bus Test Procedure for Windows NT.doc"  \\johndalyx\nt\base\testsrc\ntdrvtst\storage\procedures\usb\Universal Serial Bus Test Procedure for Windows NT.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\ntdrvtst\\storage\\procedures\\usb\\USB Host Controller Certification Procedures.doc \\johndalyx\nt\base\testsrc\ntdrvtst\storage\procedures\usb\USB Host Controller Certification Procedures.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\ntdrvtst\\storage\\procedures\\usb\\USB Regression Procedure.doc"  \\johndalyx\nt\base\testsrc\ntdrvtst\storage\procedures\usb\USB Regression Procedure.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\ntdrvtst\\storage\\procedures\\usb\\USB test procedures for NT.doc"  \\johndalyx\nt\base\testsrc\ntdrvtst\storage\procedures\usb\USB test procedures for NT.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\ntdrvtst\\storage\\procedures\\usb\\USB UPS Regression Procedure.doc"  \\johndalyx\nt\base\testsrc\ntdrvtst\storage\procedures\usb\USB UPS Regression Procedure.doc tests: XCard Support (Memory Unit) area owner: Josh Poley dev owner: Walter Wittel (waltw) schedule: when testable: <now, but limited to our test hardware> scheduled code complete date: scheduled test complete date: - needs spec review "%_NTDRIVE%%_NTROOT%\private\ntos\dd\usbnew\docs\mu protocol.doc"  HYPERLINK "\\\\xbox\\specs\\xbox_storage.doc"  \\xbox\specs\xbox_storage.doc - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - API / Stress tests that use this as storage - test code: - hand-coded API tests used for both regression and stress testing - automated API tests (such as BadMan) to randomly beat up API's - Static source code analysis (lint/typo/prefix) - leak detection / memory corruption testing NT testing resources: plans: tests: Hardware Abstraction Layer  area owner: John Daly schedule: when testable: <now, but limited to our test hardware> scheduled code complete date: scheduled test complete date: - needs spec review (needs a spec!) - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - incidental to the rest of testing, little or no direct testing required NT testing resources: plans: tests: Harddisk Driver area owner: John Daly schedule: when testable: <now, but limited to our test hardware> scheduled code complete date: scheduled test complete date: - needs spec review (needs a spec!)  HYPERLINK "\\\\xbox\\specs\\xbox_storage.doc"  \\xbox\specs\xbox_storage.doc  (partially relevant) - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - test code: - input simulator (software) to pump input just above the hardware - hooks for all hookable parts of the driver - integrity tests using the input driver / hooks to make sure things behave as expected - stress tests based on the integrity tests - simulated bad clients to make sure that poor software does not gum up the driver too badly - at the highest level, API tests that use the HD  - lots of other code will hit the disk incidentally - need to test controller errors / media errors  - make sure we test every controller error, it is a finite number and they should all be covered NT testing resources: plans:  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\ntdrvtst\\storage\\procedures\\IDE\\ideadp.doc.doc"  \\johndalyx\nt\base\testsrc\ntdrvtst\storage\procedures\IDE\ideadp.doc.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\ntdrvtst\\storage\\procedures\\IDE\\idecd.doc"  \\johndalyx\nt\base\testsrc\ntdrvtst\storage\procedures\IDE\idecd.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\ntdrvtst\\storage\\procedures\\IDE\\idehd.doc"  \\johndalyx\nt\base\testsrc\ntdrvtst\storage\procedures\IDE\idehd.doc tests/tools to port for testing:  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\storage\\sdstress\\"  \\johndalyx\nt\base\testsrc\storage\sdstress\  - sdstress.exe  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\basetool\\storage\\idelog\\"  \\johndalyx\nt\base\testsrc\basetool\storage\idelog\  - idelog.exe DVD Driver area owner: John Daly <danrose?> schedule: when testable: <now, but limited to our test hardware> scheduled code complete date: scheduled test complete date: - needs spec review (needs a spec!) - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - test code: - input simulator (software) to pump input just above the hardware - hooks for all hookable parts of the driver - integrity tests using the input driver / hooks to make sure things behave as expected - stress tests based on the integrity tests - simulated bad clients to make sure that poor software does not gum up the driver too badly - at the highest level, API tests that use the HD  - lots of other code will hit the disk incidentally - manual test for things like region code, damaged disks, etc - need to test controller errors / media errors  - make sure we test every controller error, it is a finite number and they should all be covered NT testing resources: plans: tests: Copy Protection Support area owner: John Daly schedule: when testable: <now, but limited to our test hardware> scheduled code complete date: scheduled test complete date: - needs spec review (needs a spec!) - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - we should try to test every possible condition - this will be a finite and achievable number - should require very little test development - probably could use a good STE for this Media Detection area owner: <???> schedule: when testable: <now, but limited to our test hardware> scheduled code complete date: scheduled test complete date: - needs spec review (needs a spec!) - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - we should try to test every possible condition - this will be a finite and achievable number - should require very little test development - probably could use a good STE for this NT testing resources: plans: tests: Certificate/Signature Validation area owner: <???> schedule: when testable: scheduled code complete date: scheduled test complete date: - needs spec review (needs a spec!) - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - security review by security experts in the Systems group - test code: - API / functionality tests for this item, should be pretty simple NT testing resources: plans: tests: Boot Graphic/Sound area owner: <???> schedule: when testable: scheduled code complete date: scheduled test complete date: - needs spec review (needs a spec!) - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - should require very little test development - probably could use a good STE for this Basic App Services - App Loader, Memory Management, Threading area owner: Sakphong Chanbai schedule: when testable: App Loader: XE format has just started, we could test PE loader now but it will go away finally Memory Management: limited testing can be preformed now, full testing will be started after memory manager checked into ntos Threading: can be tested now scheduled code complete date: App Loader: unknown MM: according to TracySh new mmx will be checked in next week (4/24/00) but don't know for the code complete date Threading: almost done, depends on new MM scheduled test complete date:  depends on code complete date - needs a list of these services \\CPITGCFS01\xboxro\src\ntos\xapi\dll\xapi.src and \\CPITGCFS01\xboxro\src\ntos\init\ntoskrnl.src details will be available in test plan - needs spec review for each (needs a spec!)  There is no specs right now! Probably there will be no spec at all because there is no new features added, we are removing features. - need a test plan for each  will be available after I can get the spec, either from NT or Xbox - preliminary guess at testing requirements - code review - debug walkthrough - test code: - hand-coded API tests used for both regression and stress testing - automated API tests (such as BadMan) to randomly beat up API's - Static source coded analysis (lint/typo/prefix) - leak detection / memory corruption testing - perf testing - code coverage - verifier in MM NT testing resources: plans: cache manager:   HYPERLINK "\\\\index1\\src\\newnt\\base\\testsrc\\cachemanager\\cache.doc"  \\index1\src\newnt\base\testsrc\cachemanager\cache.doc corruption and leaks:   HYPERLINK "\\\\index1\\src\\newnt\\base\\testsrc\\kernel\\documents\\corruption_and_leaks.doc"  \\index1\src\newnt\base\testsrc\kernel\documents\corruption_and_leaks.doc objects manager:   HYPERLINK "\\\\index1\\src\\newnt\\base\\testsrc\\kernel\\documents\\Plans\\ob.doc"  \\index1\src\newnt\base\testsrc\kernel\documents\Plans\ob.doc tests: cache manager:   HYPERLINK "\\\\index1\\src\\newnt\\base\\testsrc\\cachemanager"  \\index1\src\newnt\base\testsrc\cachemanager various ntos tests:   HYPERLINK "\\\\index1\\src\\newnt\\base\\testsrc\\kernel"  \\index1\src\newnt\base\testsrc\kernel NT test contacts: johnfu, dmihai, suryau, silviuc Win32 Subset, (Exposing both Kernel and XAPI services) area owner: Sakphong Chanbai, Josh Poley, John Daly, Toby Dziubala schedule: when testable: now scheduled code complete date: don't know, could you help me on this? scheduled test complete date: depends on code complete date - needs a list of these API's  see list following this section of the test plan - needs spec review for each (needs a spec!) \\xbox\specs\xapi.doc (partially relevant) there is no other spec right now! - need a test plan for each functional category  working on it - preliminary guess at testing requirements - code review - debug walkthrough - test code: - hand-coded API tests used for both regression and stress testing - automated API tests (such as BadMan) to randomly beat up API's - Static source code analysis (lint/typo/prefix) - leak detection / memory corruption testing - perf testing - code coverage - verifier NT testing resources: plans:  corruption and leaks:   HYPERLINK "\\\\index1\\src\\newnt\\base\\testsrc\\kernel\\documents\\corruption_and_leaks.doc"  \\index1\src\newnt\base\testsrc\kernel\documents\corruption_and_leaks.doc tests:   HYPERLINK "\\\\index1\\src\\newnt\\base\\testsrc\\kernel"  \\index1\src\newnt\base\testsrc\kernel NT Test contact: dmihai Virtual XCard Support (HD/WEB) area owner: Josh Poley dev owner:  schedule: when testable: scheduled code complete date: scheduled test complete date: - needs spec review \\xbox\specs\xbox_storage.doc (partially relevant) - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - API / Stress tests that use this as storage - test code: - hand-coded API tests used for both regression and stress testing - automated API tests (such as BadMan) to randomly beat up API's - Static source code analysis (lint/typo/prefix) - leak detection / memory corruption testing FAT32 File System area owner: Josh Poley dev owner:  schedule: when testable: scheduled code complete date: scheduled test complete date: - needs spec review  (needs a spec!) \\xbox\specs\harddisk_layout.htm (partially relevant) - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - test code: - input simulator (software) to pump input just above the file system layer - hooks for all hookable parts of the driver - integrity tests using the input driver / hooks to make sure things behave as expected - stress tests based on the integrity tests - simulated bad clients to make sure that poor software does not gum up the driver too badly - at the highest level, API tests that use the FAT32 File System indirectly - lots of other code will hit the FAT32 File System incidentally - need to test controller errors / media errors  - make sure we test every controller error, it is a finite number and they should all be covered NT testing resources: plans:  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\filesystem\\Plans\\Devhandle_filehandle_testplan.doc"  \\johndalyx\nt\base\testsrc\filesystem\Plans\Devhandle_filehandle_testplan.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\filesystem\\Functionality\\TunnelTest\\src\\notes.doc"  \\johndalyx\nt\base\testsrc\filesystem\Functionality\TunnelTest\src\notes.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\filesystem\\Plans\\pinpoint_fat_corruption_testplan.doc"  \\johndalyx\nt\base\testsrc\filesystem\Plans\pinpoint_fat_corruption_testplan.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\filesystem\\Functionality\\Streams\\Rename\\srename.doc"  \\johndalyx\nt\base\testsrc\filesystem\Functionality\Streams\Rename\srename.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\filesystem\\Plans\\scalability_testplan.doc"  \\johndalyx\nt\base\testsrc\filesystem\Plans\scalability_testplan.doc tests: UDFS File System (Universal Data File System) is the format for DVD (Digital Versatile Disk) area owner: Josh Poley dev owner:  schedule: when testable: scheduled code complete date: scheduled test complete date: - needs spec review - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - test code: - input simulator (software) to pump input just above the file system layer - hooks for all hookable parts of the driver - integrity tests using the input driver / hooks to make sure things behave as expected - stress tests based on the integrity tests - simulated bad clients to make sure that poor software does not gum up the driver too badly - at the highest level, API tests that use the UDFS File System indirectly - lots of other code will hit the UDFS File System incidentally - need to test controller errors / media errors  - make sure we test every controller error, it is a finite number and they should all be covered NT testing resources: plans:  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\filesystem\\Functionality\\ReadOnly\\CdfsTest\\plans\\CDFSTestplan.doc"  \\johndalyx\nt\base\testsrc\filesystem\Functionality\ReadOnly\CdfsTest\plans\CDFSTestplan.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\filesystem\\Functionality\\ReadOnly\\CdManualTest\\CdManualTest.doc"  \\johndalyx\nt\base\testsrc\filesystem\Functionality\ReadOnly\CdManualTest\CdManualTest.doc tests: CDFS File System (Compact Disk File System) is the format for CD's  area owner: Josh Poley dev owner:  schedule: when testable: scheduled code complete date: scheduled test complete date: - needs spec review - needs test plan - preliminary guess at testing requirements - code review - debug walkthrough - test code: - input simulator (software) to pump input just above the file system layer - hooks for all hookable parts of the driver - integrity tests using the input driver / hooks to make sure things behave as expected - stress tests based on the integrity tests - simulated bad clients to make sure that poor software does not gum up the driver too badly - at the highest level, API tests that use the UDFS File System indirectly - lots of other code will hit the UDFS File System incidentally - need to test controller errors / media errors  - make sure we test every controller error, it is a finite number and they should all be covered NT testing resources: plans:  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\filesystem\\Functionality\\ReadOnly\\CdfsTest\\plans\\CDFSTestplan.doc"  \\johndalyx\nt\base\testsrc\filesystem\Functionality\ReadOnly\CdfsTest\plans\CDFSTestplan.doc  HYPERLINK "\\\\johndalyx\\nt\\base\\testsrc\\filesystem\\Functionality\\ReadOnly\\CdManualTest\\CdManualTest.doc"  \\johndalyx\nt\base\testsrc\filesystem\Functionality\ReadOnly\CdManualTest\CdManualTest.doc tests: Driver Model (I don't really have a handle on what this is) Peripheral Drivers (I don't really have a handle on what there will be) code review: purpose:  a.) To find bugs in the source code. The type of bugs can be bugs that are the result of poor coding / typos, or they can be code that does the wrong thing, ie does not follow the specification. b.) look for code we can cut out c.) get more familiar with the code we are testing d.) find any easter eggs or backdoors technique:  a.) read the code and compare to the spec b.) lint / compile with warnings, read the results and look for bugs. c.) typo.pl, read the output and see if there is anything broken d.) prefix - this will be part of our build process debug walkthrough: purpose:  a.) to make sure the test code is covering important parts of the code  b.) look for code we can cut out c.) get more familiar with the code we are testing d.) find any easter eggs or backdoors technique: build everything with source debug info, step through with a debugger. --------------------------------------------------- first guess at a schedule: near term<now-3 months> USB Driver <Josh> Harddisk Driver <John> Basic App Services -  App Loader<Sakphong> Memory Management<Sakphong> Threading <Sakphong> Win32 Subset, (Exposing both Kernel and XAPI services) <Sakphong, Toby, Josh, John> FAT32 File System <Josh> mid-term<3 months-6 months>(we should have more people) XCard Support (Memory Unit) <Josh> Hardware Abstraction Layer <John> DVD Driver <danrose> Media Detection <???> Certificate/Signature Validation <???> Boot Graphic/Sound <danrose> UDFS File System (Universal Data File System) is the format for DVD (Digital Versatile Disk) <Josh> CDFS File System (Compact Disk File System) is the format for CD <Josh> long term<6 months-9 months> Hardware Initialization <Sakphong> Virtual XCard Support (HD/WEB) <Josh> Copy Protection Support <John> --------------------------------------- API list based on xapi.src / checkin mail Area: file IO Owner: jpoley CopyFileExW CopyFileW CreateDirectoryW CreateFileW DeleteFileW FindClose FindFirstFileExW FindFirstFileW FindNextFileW FlushFileBuffers GetDiskFreeSpaceExW GetDriveTypeW GetFileAttributesExW GetFileAttributesW GetFileInformationByHandle GetFileSize GetFileSizeEx GetFileTime GetLogicalDriveStringsW GetLogicalDrives GetVolumeInformationW MoveFileExW MoveFileW MoveFileWithProgressW ReadFile ReadFileEx ReadFileScatter RemoveDirectoryW ReplaceFileW SetEndOfFile SetFileAttributesW SetFilePointer SetFilePointerEx SetFileTime WriteFile WriteFileEx WriteFileGather Area: Driver / IO control Owner: johndaly CancelIo CreateIoCompletionPort DeviceIoControl GetQueuedCompletionStatus PostQueuedCompletionStatus QueueUserAPC GetOverlappedResult Area: Memory Management Owner: a-tobydz GetProcessHeap GlobalAlloc GlobalFree = LocalFree GlobalHandle = LocalHandle GlobalLock = LocalLock GlobalReAlloc GlobalSize = LocalSize GlobalUnlock = LocalUnlock HeapAlloc = RtlAllocateHeap HeapCreate HeapDestroy HeapFree = RtlFreeHeap HeapReAlloc = RtlReAllocateHeap HeapSize = RtlSizeHeap LocalAlloc LocalFree LocalHandle LocalLock LocalReAlloc LocalSize LocalUnlock VirtualAlloc VirtualAllocEx VirtualFree VirtualFreeEx VirtualProtect VirtualProtectEx VirtualQuery VirtualQueryEx Area: System Owner: schanbai CancelWaitableTimer CloseHandle CreateEventW CreateMutexW CreateSemaphoreW CreateThread CreateWaitableTimerW DeleteCriticalSection = RtlDeleteCriticalSection DuplicateHandle EnterCriticalSection = RtlEnterCriticalSection ExitThread FreeLibrary GetCurrentThread GetCurrentThreadId GetExitCodeThread GetLastError GetProcAddress GetThreadPriority GetThreadPriorityBoost InitializeCriticalSection InterlockedCompareExchange = _InterlockedCompareExchange InterlockedDecrement = _InterlockedDecrement InterlockedExchange = _InterlockedExchange InterlockedExchangeAdd = _InterlockedExchangeAdd InterlockedIncrement = _InterlockedIncrement IsBadCodePtr IsBadReadPtr IsBadStringPtrW IsBadWritePtr GetHandleInformation LeaveCriticalSection = RtlLeaveCriticalSection LoadLibraryW OpenEventW OpenMutexW OpenSemaphoreW OpenWaitableTimerW PulseEvent ReleaseMutex ReleaseSemaphore ResetEvent ResumeThread SetEvent SetHandleInformation SetLastError SetThreadPriority SetThreadPriorityBoost SetWaitableTimer SignalObjectAndWait SuspendThread SwitchToThread TerminateThread TryEnterCriticalSection = RtlTryEnterCriticalSection WaitForMultipleObjects WaitForMultipleObjectsEx WaitForSingleObject WaitForSingleObjectEx Area: misc Owner: johndaly CompareFileTime DebugBreak = NTOSKRNL.DbgBreakPoint DebugPrint = NTOSKRNL.DbgPrint FileTimeToLocalFileTime FileTimeToSystemTime GetLocalTime GetSystemTime GetSystemTimeAsFileTime GetTickCount = NTOSKRNL.NtGetTickCount GetTimeZoneInformation GetVersionExW       ;Never, ever do GetVersion!! LocalFileTimeToFileTime MulDiv OutputDebugStringA OutputDebugStringW RaiseException RtlUnwind = NTOSKRNL.RtlUnwind Sleep SleepEx SystemTimeToFileTime VerifyVersionInfoW lstrcatW lstrcmpW lstrcmpiW lstrcpyW lstrcpynW lstrlenW Potential areas - This team may or may not own them yet Display Driver (mine maybe???) DirectInput (derivative) (mine maybe - can we get a DX team???) MPEG/Audio Streaming Support (not DirectShow) (mine - maybe - Dan Rosenstien???)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\xmatchtest.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft DirectPlay for Xbox Test Plan Title _PID_HLINKSDirectPlay for Xbox Test Plan Tristan Jackson (tristanj) DirectPlay DPlay X-box Xbox FOGHORN.DOT Tristan Jackson Microsoft Word 10.00!p#`' urn:schemas-microsoft-com:office:smarttags Street urn:schemas-microsoft-com:office:smarttags PostalCode urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags country-region urn:schemas-microsoft-com:office:smarttags State urn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags PersonName urn:schemas-microsoft-com:office:smarttags address urn:schemas-microsoft-com:office:smarttags Month '!,4@ uY`5rnRA !W8&U: 8nz(! =@-z% elB2x A{yE8 QEV@$  f[2x W|c`h Y/f:;p @\\red-prn-24\CORP0067 Ne01: winspool Xerox Document Centre CS 50 PS UFT{UF?Dg\: u*qz: v^'NAI+ (>u2n B-a[. MS'vt?i )Cf+>i0a gXv'OXbox Online Matchmaking Services Test Plan Xbox Online Test Team xmatchtest.doc Written by: Tristan Jackson (  HYPERLINK "mailto:tristanj@microsoft.com"  mailto:tristanj@microsoft.com Revision 0.1 SAVEDATE \@ "MMMM d, yyyy" May 29, 2001 Confidential Information in this document is subject to change without notice. Companies, names, and data used in examples herein are fictitious unless otherwise noted. No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, for any purpose, without the express written permission of Microsoft Corporation. Published by  Microsoft Corporation  One Microsoft Way  Redmond, WA 98052-6399 Telephone (425) 882-8080 2001 Microsoft Corporation. All rights reserved. Printed in the USA. Microsoft, MS-DOS, and MS are registered trademarks of Microsoft Corporation. Contents  TOC \o "1-4"  Contents  PAGEREF _Toc514471061 \h  Document History  PAGEREF _Toc514471062 \h  Overview  PAGEREF _Toc514471063 \h  Open Issues  PAGEREF _Toc514471064 \h  Milestones  PAGEREF _Toc514471065 \h   PAGEREF _Toc514471066 \h   PAGEREF _Toc514471067 \h   PAGEREF _Toc514471068 \h  Release Criteria  PAGEREF _Toc514471069 \h  Client-side Components  PAGEREF _Toc514471070 \h  M0 notes  PAGEREF _Toc514471071 \h  Server-side Components  PAGEREF _Toc514471072 \h  M0 notes  PAGEREF _Toc514471073 \h  Client-side Tests  PAGEREF _Toc514471074 \h  API Testing  PAGEREF _Toc514471075 \h  XMatchOpenSession  PAGEREF _Toc514471076 \h  Failure cases  PAGEREF _Toc514471077 \h  Success cases  PAGEREF _Toc514471078 \h  XMatchSetSessionInt  PAGEREF _Toc514471079 \h  Failure cases  PAGEREF _Toc514471080 \h  Success cases  PAGEREF _Toc514471081 \h  XMatchSetSessionString  PAGEREF _Toc514471082 \h  Failure cases  PAGEREF _Toc514471083 \h  Success cases  PAGEREF _Toc514471084 \h  XMatchSetSessionBlob  PAGEREF _Toc514471085 \h  Failure cases  PAGEREF _Toc514471086 \h  Success cases  PAGEREF _Toc514471087 \h  XMatchSendSessionDescription  PAGEREF _Toc514471088 \h  Failure cases  PAGEREF _Toc514471089 \h  Success cases  PAGEREF _Toc514471090 \h  XMatchCreateSearch  PAGEREF _Toc514471091 \h  Failure cases  PAGEREF _Toc514471092 \h  Success cases  PAGEREF _Toc514471093 \h  XMatchSearchAppendInt  PAGEREF _Toc514471094 \h  Failure cases  PAGEREF _Toc514471095 \h  Success cases  PAGEREF _Toc514471096 \h  XMatchSearchAppendString  PAGEREF _Toc514471097 \h  Failure cases  PAGEREF _Toc514471098 \h  Success cases  PAGEREF _Toc514471099 \h  XMatchSearchAppendBlob  PAGEREF _Toc514471100 \h  Failure cases  PAGEREF _Toc514471101 \h  Success cases  PAGEREF _Toc514471102 \h  XMatchSendSearch  PAGEREF _Toc514471103 \h  Failure cases  PAGEREF _Toc514471104 \h  Success cases  PAGEREF _Toc514471105 \h  XMatchGetSession  PAGEREF _Toc514471106 \h  Failure cases  PAGEREF _Toc514471107 \h  Success cases  PAGEREF _Toc514471108 \h  XMatchGetFirstSearchResult  PAGEREF _Toc514471109 \h  Failure cases  PAGEREF _Toc514471110 \h  Success cases  PAGEREF _Toc514471111 \h  XMatchGetNextSearchResult  PAGEREF _Toc514471112 \h  Failure cases  PAGEREF _Toc514471113 \h  Success cases  PAGEREF _Toc514471114 \h  Stress Testing  PAGEREF _Toc514471115 \h  System-wide Tests  PAGEREF _Toc514471116 \h  Functional Testing  PAGEREF _Toc514471117 \h  Creating sessions  PAGEREF _Toc514471118 \h  Failure cases  PAGEREF _Toc514471119 \h  Success cases  PAGEREF _Toc514471120 \h  Deleting sessions  PAGEREF _Toc514471121 \h  Failure cases  PAGEREF _Toc514471122 \h  Success cases  PAGEREF _Toc514471123 \h  Modifying sessions  PAGEREF _Toc514471124 \h  Failure cases  PAGEREF _Toc514471125 \h  Success cases  PAGEREF _Toc514471126 \h  Searching for sessions  PAGEREF _Toc514471127 \h  Failure cases  PAGEREF _Toc514471128 \h  Success cases  PAGEREF _Toc514471129 \h  Stress Testing  PAGEREF _Toc514471130 \h  Web Application Stress Scripts  PAGEREF _Toc514471131 \h  Session Creation Scripts  PAGEREF _Toc514471132 \h  Session Search Scripts  PAGEREF _Toc514471133 \h  Custom Stress Applications  PAGEREF _Toc514471134 \h  Session Modification Tests  PAGEREF _Toc514471135 \h  Session Search Tests  PAGEREF _Toc514471136 \h  Database Access Tests  PAGEREF _Toc514471137 \h  Other notes  PAGEREF _Toc514471138 \h  Owners Server Development Darren Anderson (darrenan) Client API Development Mark Gere (mgere) Program Management Paul Newson (pnewson) Tristan Jackson (tristanj) Document History Revision Action Author 4/16/2001 Initial draft Tristan Jackson (tristanj) 4/18/2001 Incorporated comments from Darren and added several new test cases.  Added a new section for database-level testing, but haven t added any specific information on that. Tristan Jackson (tristanj) 5/7/2001 Added client test cases Tristan Jackson (tristanj) 5/21/2001 Updated with test plan review feedback Tristan Jackson (tristanj) 5/29/2001 Updated with latest test coverage for client APIs Tristan Jackson (tristanj) Overview This document details the test plan for both the client and server side of the Xbox Online matchmaking service. The client side of the matchmaking service consists of the following components: A number of matchmaking-specific APIs.  These APIs are defined in the Xbox matchmaking spec (Xbox Matchmaking.doc) and used to perform basic functions such as advertising a session to the matchmaking system and starting a search for available sessions.  These APIs will create asynchronous task handles that can be pumped by a title s main thread to provide cycles to complete a request.  These task handles will rely on asynchronous XRL subtasks to complete the uploading and downloading of information from the online services.  The XRL APIs are defined in  A notification queue interface.  Xbox clients will receive asynchronous matchmaking results via this interface.  It is not an objective of this test plan to directly test this subsystem. Several Xbox online security APIs and a security-enabled network stack.  These APIs will be used to establish authenticated communications with the matchmaking server.  Additionally, when a new session is going be advertised, the Xbox client will use these APIs to generate a session key and encrypt it for transmission to the matchmaking server. The server side of the matchmaking service consists of the following components: An ISAPI extension DLL sitting on the Xbox Online front-end servers.  This extension receives HTTP requests (tunneled through ESPUDP and using HTTP 1.0 for POSTs and HTTP 1.1 for GETs, if there are any) from Xbox clients requesting matchmaking services and then routes those requests to the matchmaking database. A matchmaking database that stores information on sessions that are currently being advertised via the Xbox Online service.  The database will have records inserted into it and have queries run on it from the ISAPI extension DLLs.  The database will return results of queries to the Xbox client via the notification queue. The notification queue is used to notify Xbox clients when data is waiting for them.  Several other services rely on the notification queue system including buddies and invitations.  In the case of matchmaking, search results reach the Xbox client via the notification queue.  It is not an objective of this test plan to test the delivery of matchmaking information from the notification queue to Xbox clients.  However, many end-to-end tests will indirectly rely on the notification queue. Open Issues Integration work with Xbox Online security tunneling, the notification queue and the online presence system. How will sessions be updated to reflect the players currently in the session? When will a set of template stored procedures be developed? A special stored procedure for retrieving a particular session ID needs to be developed.  This will be needed by the XMatchGetSession API. How does the matchmaking server tell the client when it needs to host a session instead of searching for one?  Possibly through a 400 status code returned from the matchmaking service, but this hasn t been defined yet. How will game session keys be integrated into the matchmaking process?  Possibly the server will generate the key and return it (encrypted) to each game client, but this hasn t been defined yet. How frequently will an Xbox client be allowed to make search requests? How long do the client search APIs wait for results before timing out? Milestones This section includes a basic outline of what features will come online in each milestone. Basic functionality All search results are returned synchronously First client API s are implemented No authentication required, no provisions for key exchange First integration work with other online services Enforce the use of only title ID s that are present in the xmatch_titles table when creating sessions Begin using notification queue to return asynchronous results Client API will start allowing user-specific attributes to be set Authentication integration begins Key exchange integrated into matchmaking system Blacklisting integration (if anything is necessary) Release Criteria Client-side Components All client and protocol tests must pass 100 percent of functional test cases.  Client stress must be able to run without crashes and memory or resource leaks for 24 hours. Before the final release, all Client API tests must run on an Xbox in every supported connectivity environment (e.g. no NAT, string source-filtering NAT, etc.) M0 notes Components won t be using notification queue for asynchronous results delivery.   Server-side Components Server database and front end server must be able to handle 10-times the maximum expected first year stress for 72 hours.  System-wide stress must execute for 72 hours. M0 notes Components won t be using notification queue for asynchronous results delivery.   Client-side Tests API Testing The goal of these tests is to cover every XMatch API that will be supported by Xbox and call it with A case for each category of success (e.g. creating a new session, updating an old session, etc.) A case for each error code indicating failure (debug only, retail will not have parameter checking) These test cases will be implemented inside a client module (XMATCHTEST.LIB) for the Xbox test harness. XMatchOpenSession HRESULT WINAPI XMatchOpenSession(     IN  DWORD dwSessionID,     IN  DWORD dwNumAttributes,     IN  DWORD dwAttributesLen,     IN  HANDLE hWorkEvent,     OUT DWORD *pdwSessionID,     OUT XONLINETASK_HANDLE* phSession); Failure cases Call with an invalid session ID and no attributes Call with non-zero number of attributes but zero attributes length Call with non-zero attributes length but zero number of attributes Call with NULL as phSession parameter Call when there isn t enough memory to create a game session Call XOnlineTaskContinue immediately after creating a session creation request Cancel a session task that has already completed and then close it Success cases Call with a session ID of zero and no attributes Call with NULL session ID parameter Call with a valid session ID and no attributes Call with a session ID of zero and 3 attributes.  Add attributes of each type and send the request. Call with a valid session ID and 3 attributes.  Add attributes of each type and send the request. Call with a valid session ID and 3 attributes.  Re-add existing attributes of each type and send the request. Call with NULL work event Open and close a XMatch request without calling the work pump XMatchSetSessionInt HRESULT WINAPI XMatchSetSessionInt(     IN  XONLINETASK_HANDLE hSession,     IN  DWORD dwAttributeID,     IN  LARGE_INTEGER qwUserPUID,     IN  INT nAttributeValue); Failure cases Call with NULL task handle Call with attribute index beyond the number available Call with non-integer attribute ID Call when there isn t enough space in the attributes buffer for an additional integer Call with a NULL user ID for a user integer Call with a non-NULL user ID for a session integer Call with a session handle that has already been sent Success cases Call to add a global session integer Call to add a title-specific session integer Call to add a global user integer Call to add a title-specific user integer Call to add an integer when there is exactly enough space available Call to add the same attribute twice, verify that only one is sent Call to add the public available when 0 attributes were expected Call to add the private available when 0 attributes were expected Call to add the public available when additional attributes were expected Call to add the private available when additional attributes were expected Call to update an existing public available value Call to update an existing private available value XMatchSetSessionString HRESULT WINAPI XMatchSetSessionString(     IN  XONLINETASK_HANDLE hSession,     IN  DWORD dwAttributeID,     IN  LARGE_INTEGER qwUserPUID,     IN  LPCSTR szAttributeValue); Failure cases Call with NULL task handle Call with attribute index beyond the number available Call with non-string attribute ID Call when there isn t enough space in the attributes buffer for an additional string Call with a NULL user ID for a user string Call with a non-NULL user ID for a session string Call with a session handle that has already been sent Success cases Call to add a global session string Call to add a title-specific session string Call to add a global user string Call to add a title-specific user string Call to add an empty string Call to add a string when there is exactly enough space available Call to add the same attribute twice, verify that only one is sent Add two strings each with 50 characters (including NULL terminator) where 112 bytes was the maximum attribute length (i.e. there will be just enough room for the strings, the attribute ID s and the length prefixes).  Then decrease the size of one string to the minimum (1-byte for the NULL terminator) and increase the size of the other string to the maximum (99-bytes including the NULL terminator) XMatchSetSessionBlob HRESULT WINAPI XMatchSetSessionBlob(     IN  XONLINETASK_HANDLE hSession,     IN  DWORD dwAttributeID,     IN  LARGE_INTEGER qwUserPUID,     IN  DWORD dwAttributeLength,     IN  PVOID pvAttributeValue); Failure cases Call with NULL task handle Call with attribute index beyond the number available Call with non-blob attribute ID Call when there isn t enough space in the attributes buffer for an additional blob Call with a NULL user ID for a user blob Call with a non-NULL user ID for a session blob Call with a session handle that has already been sent Success cases Call to add a global session blob Call to add a title-specific session blob Call to add a global user blob Call to add a title-specific user blob Call to add an empty blob Call to add a blob when there is exactly enough space available Call to add the same attribute twice, verify that only one is sent Add two blobs each with 50 bytes of data where 116 bytes was the maximum attribute length (i.e. there will be just enough room for the blobs, the attribute ID s and the length prefixes).  Then decrease the size of one blob to the minimum (0-bytes) and increase the size of the other string to the maximum (100-bytes) XMatchSendSessionDescription HRESULT WINAPI XMatchSendSessionDescription(     IN  XONLINETASK_HANDLE hSession); Failure cases Call with NULL task handle Call with a session handle where less attributes have been added than expected Success cases Call with valid task handle Call with valid task handle and call XOnlineTaskContinue repeatedly until the task completes Call with valid task handle and start a loop where each iteration waits for task s event to be signaled before calling XOnlineTaskContinue.  Continue the loop until the task completes. Call on a handle that has already been successfully sent XMatchCreateSearch HRESULT WINAPI XMatchCreateSearch( IN DWORD dwProcedureIndex, IN DWORD dwNumParameters, IN DWORD dwParametersLen, IN DWORD dwResultsLen, IN HANDLE hWorkEvent, OUT PXONLINETASK_HANDLE phSearch); Failure cases Create a search with an invalid stored procedure index and no parameters Create a search with an invalid stored procedure index and 3 parameters, one of each type Call with non-zero number of parameters but zero parameters length Call with non-zero parameters length but zero number of parameters Call with NULL as phSearch parameter Call when there isn t enough memory to create a game search Call with a results length that is less than the size of one search result Create a search with a stored procedure that doesn t have execute permissions Call XOnlineTaskContinue immediately after creating a search request Cancel a search task that has already completed and then close it Success cases Create a search with the minimum stored procedure index (0) and no parameters Create a search with the maximum stored procedure index (MAXDWORD) and no parameters Call with a valid stored procedure index and 3 parameters, one of each type. Call with an invalid stored procedure index and 3 parameters, one of each type. Call with a NULL work event Open and dose a search request without calling the work pump Create a search where multiple search results will be returned Call with a results length such that the returned results will have to be truncated Call such that no results will be returned XMatchSearchAppendInt HRESULT WINAPI XMatchSearchAppendInt( IN XONLINETASK_HANDLE hSearch, IN INT nParameterValue); Failure cases Call with NULL task handle Call when there isn t enough space in the parameters buffer for an additional integer Call when the allowed number of parameters have already been added Call with a search handle that has already been sent Success cases Call to add an integer when there is exactly enough space available XMatchSearchAppendString HRESULT WINAPI XMatchSearchAppendString( IN XONLINETASK_HANDLE hSearch, IN LPCSTR szParameterValue); Failure cases Call with NULL task handle Call when there isn t enough space in the parameters buffer for an additional string Call when the allowed number of parameters have already been added Call with a search handle that has already been sent Success cases Call to add an empty string Call to add a string when there is exactly enough space available XMatchSearchAppendBlob HRESULT WINAPI XMatchSearchAppendBlob ( IN XONLINETASK_HANDLE hSearch, IN DWORD dwParameterLen, IN LPVOID pvParameterValue); Failure cases Call with NULL task handle Call when there isn t enough space in the parameters buffer for an additional blob Call when the allowed number of parameters have already been added Call with a search handle that has already been sent Success cases Call to add an empty blob Call to add a blob when there is exactly enough space available XMatchSendSearch HRESULT WINAPI XMatchSendSearch( IN XONLINETASK_HANDLE hSearch); Failure cases Call with NULL task handle Call with a search handle where less parameters have been added than expected Success cases Call with valid task handle Call with valid task handle and call XOnlineTaskContinue repeatedly until the task completes Call with valid task handle and start a loop where each iteration waits for task s event to be signaled before calling XOnlineTaskContinue.  Continue the loop until the task completes. Call on a handle that has already been successfully sent Call where results will include an integer attribute Call where results will include a string attribute Call where results will include a blob attribute Call where results will include 3 attributes, one of each type XMatchGetSession Failure cases Call with NULL task handle Call when there isn t enough memory to create a game search Success cases Call with valid task handle Call with valid task handle and call XOnlineTaskContinue repeatedly until the task completes Call with valid task handle and start a loop where each iteration waits for task s event to be signaled before calling XOnlineTaskContinue.  Continue the loop until the task completes. Call with a NULL work event Open and dose a search request without calling the work pump XMatchGetFirstSearchResult HRESULT XMatchGetFirstSearchResult( IN XONLINETASK_HANDLE hSearch, OUT PXMATCH_SEARCHRESULT* ppResult); Failure cases Call with a NULL search handle Call with NULL DWORD pointer pointer Call where the search results returned will be larger than the amount of space in the results buffer Call where the search task hasn t been sent yet Call where the search task has been sent, but hasn t completed yet Success cases Call with a valid handle to a search request that has been sent and has completed with one search result that fit into the results buffer Call with a valid handle to a search request that has been sent and has completed with multiple search results where only one can fit into the results buffer at a time Call with a valid handle to a search request that has been sent and has completed with multiple search results where multiple results can fit in the result buffer XMatchGetNextSearchResult HRESULT XMatchGetNextSearchResult( IN XONLINETASK_HANDLE hSearch, OUT PXMATCH_SEARCHRESULT* ppResult); Failure cases Call with a NULL search handle Call with NULL DWORD pointer pointer Call where the search results returned will be larger than the amount of space in the results buffer Call where XMatchGetFirstSearchResult hasn t been called yet Call where the search task hasn t been sent yet Call where the search task has been sent, but hasn t completed yet Success cases Call with a valid handle to a search request where there are no more results to be obtained Call with a valid handle to a search request where only one search result can fit into the results buffer Call with a valid handle to a search request where multiple results can fit in the result buffer Call where more results must be downloaded to satisfy this request.  Then call XOnlineTaskContinue to download those additional results Stress Testing These tests will consist of multithreaded applications that create multiple asynchronous matchmaking requests.  Various models (e.g. waiting on async event and timed polling at various intervals) for calling the asynchronous work-pump will be used simultaneously by different threads. These test cases will be implemented inside a client module (XMATCHSTRESS.LIB) for the Xbox test harness. System-wide Tests These tests will focus on simulating Xbox client requests via the ISAPI front-end servers servers. Verification Testing These tests are meant to verify basic properties of the systems and protocols used by the matchmaking service. Protocol Verify that session creation, modification and search requests are all sent and responded to using HTTP 1.0. Verify that notification queue retrievals are returned using the appropriate protocol Functional Testing These tests will send requests formatted in the Xmatch protocol to the matchmaking server to simulate client behavior.  They will focus on testing the behavior of the matchmaking protocol itself.  A subset of these tests might be used later by the Xbox Online operations team to verify that the matchmaking service is up and running. These tests cases will be implemented inside a PC executable (MMTEST.EXE). Creating sessions Failure cases Message length longer than number of available bytes Message length shorter than minimum size of request Unknown protocol ID Public available and private available are both set to 0 Report more attributes than available Set an attribute offset to point inside the header Set an attribute offset to point beyond the available bytes Set an attribute offset to point somewhere inside attribute offset list Unknown title ID Contains a title-specific user integer attribute for a user that doesn t exist in the session Contains a title-specific user 20-character attribute for a user that doesn t exist in the session Contains a title-specific user 100-byte blob attribute for a user that doesn t exist in the session Contains a title-specific user integer attribute for a user that doesn t exist in the session Contains a title-specific user 20-character attribute for a user that doesn t exist in the session Contains a title-specific user 100-byte blob attribute for a user that doesn t exist in the session Success cases Contains no attributes Contains a global session integer attribute Contains a global session 20-character string attribute Contains a global session 100-byte binary attribute Contains a global user integer attribute Contains a global user 20-character string attribute Contains a global user 100-byte blob attribute Contains a title-specific session integer attribute Contains a title-specific session 20-character string attribute Contains a title-specific session 100-byte blob attribute Contains a title-specific user integer attribute Contains a title-specific user 20-character string attribute Contains a title-specific user 100-byte blob attribute Contains 1000 attributes of various types Contains a maximum length (65535-byte) string attribute Contains a maximum length (4294967295-byte) blob attribute Maximum title ID Contains a zero-length string attribute Contains a zero-length blob attribute Deleting sessions Failure cases Delete an invalid session Delete session and then send a modification request for it Success cases Delete a session with only one player and no attributes Delete a session with only one player and a title-specific session integer attribute Delete a session with only one player and a title-specific session 20-character string attribute Delete a session with only one player and a title-specific session 100-byte blob attribute Delete a session with only one player and a title-specific user integer attribute Delete a session with only one player and a title-specific user 20-character string attribute Delete a session with only one player and a title-specific user 100-byte blob attribute Delete a session with only one player and a global session integer attribute Delete a session with only one player and a global session 20-character string attribute Delete a session with only one player and a global session 100-byte blob attribute Delete a session with only one player and a global user integer attribute Delete a session with only one player and a global user 20-character string attribute Delete a session with only one player and a global user 100-byte blob attribute Delete a session with two players each with title-specific user integer attribute Delete a session with two players each with title-specific user 20-character string attribute Delete a session with two players each with title-specific user 100-byte blob attribute Delete a session with two players each with global user integer attribute Delete a session with two players each with global user 20-character string attribute Delete a session with two players each with global user 100-byte blob attribute Modifying sessions Failure cases Session ID doesn t exist Session ID exists, but title ID is changed Modify the session from a different Xbox client Contains a title-specific user integer attribute for a user that doesn t exist in the session Contains a title-specific user 20-character attribute for a user that doesn t exist in the session Contains a title-specific user 100-byte blob attribute for a user that doesn t exist in the session Contains a title-specific user integer attribute for a user that doesn t exist in the session Contains a title-specific user 20-character attribute for a user that doesn t exist in the session Contains a title-specific user 100-byte blob attribute for a user that doesn t exist in the session Success cases Modify all existing attributes Modify only some of the existing attributes Modify none of the existing attributes Add new attributes Decrease public available to 0, where private available is 0 Decrease private available to 0, where public available is 0 Change the host address Contains a global session integer attribute Contains a global session 20-character string attribute Contains a global session 100-byte binary attribute Contains a global user integer attribute Contains a global user 20-character string attribute Contains a global user 100-byte blob attribute Contains a title-specific session integer attribute Contains a title-specific session 20-character string attribute Contains a title-specific session 100-byte blob attribute Contains a title-specific user integer attribute Contains a title-specific user 20-character string attribute Contains a title-specific user 100-byte blob attribute Searching for sessions Failure cases Use a stored procedure index that doesn t exist Use a title id that doesn t exist Use a title id and stored procedure index that both don t exist Use a stored procedure with too few parameters Use a stored procedure with too many parameters Pass a string parameter to a stored procedure that takes integers Pass a blob parameter to a stored procedure that takes integer Pass an integer parameter to a stored procedure that takes strings Pass a blob parameter to a stored procedure that takes strings Pass an integer parameter to a stored procedure that takes blobs Pass a string parameter to a stored procedure that takes blobs Success cases Use the maximum stored procedure index Use the minimum stored procedure index Search with an integer parameter Search with a string parameter Search with a blob parameter Search such that 1000 s of results are returned Search such that 0 results are returned Search such that results contain a session without attributes Search such that results contain a session with an integer attribute Search such that results contain a session with a string attribute Search such that results contain a session with a blob attribute Search such that results contain a session with a user integer attribute Search such that results contain a session with a user string attribute Search such that results contain a session with a user blob attribute Stress Testing There are several internal tools available for generic stressing of web pages.  One of these tools is   HYPERLINK "http://ToolBox/details/details.aspx?ToolID=639"  Web Application Stress .  Many of the server-side stress tests will consist of scripts for use with this tool. Web Application Stress Scripts The following Web Application Stress scripts will be created for stress testing: A session creation script which will loop repeatedly and create thousands of sessions A session search script which will loop repeatedly and send thousands of search requests Session Creation Scripts The session creation scripts will be used to measure the effect on performance of sending up various types of attributes with a request to create a session.  Performance statistics will be taken by calculating the number of creation requests in a one minute period that can be completed in each of the following scenarios: Attribute variation: Each creation request contains no attributes Each creation request contains one integer attribute Each creation request contains one string attribute Each creation request contains one blob attribute Session Search Scripts The session search scripts will be used to measure the effect on performance of 1) the type of attributes sent to the stored procedure, 2) the type of processing in the associated stored procedure and 3) the number of results returned by the stored procedure.  Performance statistics will be taken by calculating both the number of search requests in a one minute period that can be completed and the resource usage characteristics on the matchmaking server in each of the following scenarios: Parameter variation: (one WHERE criteria and no results returned) Each search request contains no parameters Each search request contains one integer parameter Each search request contains one string parameter Each search request contains one blob parameter Processing variation: (no parameters and no results returned) Stored procedure does a SELECT with no WHERE criteria Stored procedure does a SELECT with one integer WHERE criteria Stored procedure does a SELECT with one 20-character string WHERE criteria Stored procedure does a SELECT with one 100-byte blob WHERE criteria Results variation: (no parameters and one WHERE criteria) No results are returned 5 results are returned 10 results are returned Custom Stress Applications Some additional stress applications will need to be developed to measure special performance cases.  Also, once integration work is completed with the notification queue, search performance will be difficult to measure with generic web stress tools.  The following custom stress applications will need to be developed: A session modification test that creates a session and then loops repeatedly while sending modifications to it (MMMODSTRESS.EXE) A session search test that loops repeatedly and sends thousands of search requests while another thread listens for a notification queue tickle and then retrieves results. (MMSEARCHSTRESS.EXE) Session Modification Tests The session modification tests will be used to measure the effect on performance of modifying existing attributes, adding new attributes and modifying public/private available.  Performance statistics will be taken by calculating the number of creation requests in a one minute period that can be completed in each of the following scenarios: Attribute modification: Each modification request modifies one integer attribute Each modification request modifies one 20-character string attribute Each modification request modifies one 100-byte blob attribute Attribute addition: Each modification request adds one integer attribute Each modification request adds one 20-character string attribute Each modification request adds one 100-byte blob attribute Public/private modification: Each modification request changes the public available Each modification request changes the private available Session Search Tests The same tests will be used as listed in Session Search Scripts above, but due to the complexity of dealing with the notification queue, these tests will probably have to be re-written at some point as a custom application rather than as a generic web stress script. Database Access Tests These tests will focus on accessing the database access layer (XStorage) directly.  This will probably be more useful for stressing the database itself. This test will be implemented inside a PC executable (XSTORAGETEST.EXE) that will execute on the ISAPI front-end server or some other machine on the private side of the Xbox Online network.  The test will make direct calls to the matchmaking database to add entries to and remove entries from the database.  The test will be multithreaded with each thread simultaneously making requests to the database to simulate multiple requests coming in from physically different ISAPI front-end servers. Other notes  When integration work is completed with the notification queue, calculating search performance statistics will be more complicated.  A custom application will probably have to be developed for that case. Xbox Online Matchmaking Services Test Plan Xbox Online Matchmaking Services Test Plan       styleref RevisionNumber Revision 0.1 styleref date May 29, 2001 Microsoft Confidential Microsoft Confidential styleref RevisionNumber Revision 0.1 styleref date May 29, 2001 tplhlhlhlt gdw;M gdw;M gdw;M gdb+( gdb+( gdL"1 gdb+( gd[a' gd[a' gd[a' gdb+( gdqXs vrvrvrnrnrfrnrnrn gdZYy gdZYy gdZYy
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\xrl-response.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft XONLINE   XRL-Response Backus-Naur Form Title _PID_HLINKSXONLINE   XRL-Response Backus-Naur Form Sean Wohlgemuth Normal.dot Sean Wohlgemuth Microsoft Word 9.0i2K&iXONLINE   XRL-Response Backus-Naur Form Revision History Author Comment 10/26/00  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth Initial Draft 11/06/00  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth Revised Date Format Owners  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth Development  HYPERLINK "mailto:boydm@microsoft.com"  Boyd Multerer Program Management  HYPERLINK "mailto:pnewson@microsoft.com"  Paul Newson Document Resources HTTP/1.1 RFC 2068  HYPERLINK "http://www.cis.ohio-state.edu/htbin/rfc/rfc2068.html"  http://www.cis.ohio-state.edu/htbin/rfc/rfc2068.html Overview Outlined below is the Backus-Naur Form (BNF) for XRL-Response.  An XRL-Response is subset of the Response rule found in the Hypertext Transfer Protocol (HTTP), which can be referenced in the   HYPERLINK "http://www.cis.ohio-state.edu/htbin/rfc/rfc2068.html"  HTTP/1.1 RFC 2068 .  The naming conventions have remained the same as with the RFC except where the rule definition differs from the original form.  In these cases, the name has been prefixed with xrl.  These differences are limited to the following rules: XRL-Response (vs. the original form of Response), xrl-entity-header (vs. the original form of entity-header), and xrl-message-body (vs. the original form of message-body). Backus-Naur From XRL-Response XRL-Response = Status-Line *( xrl-entity-header ) CRLF [ xrl-message-body ] HTTP/1.1 Standard: Response = Status-Line *( general-header | response-header | entity-header ) CRLF [ message-body ] Status-Line Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF HTTP-Version = "HTTP" "/" 1*DIGIT "." 1*DIGIT Status-Code = "100"   ; Continue  | "101"   ; Switching Protocols  | "200"   ; OK  | "201"   ; Created  | "202"   ; Accepted  | "203"   ; Non-Authoritative Information  | "204"   ; No Content  | "205"   ; Reset Content  | "206"   ; Partial Content  | "300"   ; Multiple Choices  | "301"   ; Moved Permanently  | "302"   ; Moved Temporarily  | "303"   ; See Other  | "304"   ; Not Modified  | "305"   ; Use Proxy  | "400"   ; Bad Request  | "401"   ; Unauthorized  | "402"   ; Payment Required  | "403"   ; Forbidden  | "404"   ; Not Found  | "405"   ; Method Not Allowed  | "406"   ; Not Acceptable  | "407"   ; Proxy Authentication Required  | "408"   ; Request Time-out  | "409"   ; Conflict  | "410"   ; Gone  | "411"   ; Length Required  | "412"   ; Precondition Failed  | "413"   ; Request Entity Too Large  | "414"   ; Request-URI Too Large  | "415"   ; Unsupported Media Type  | "500"   ; Internal Server Error  | "501"   ; Not Implemented  | "502"   ; Bad Gateway  | "503"   ; Service Unavailable  | "504"   ; Gateway Time-out   | "505"   ; HTTP Version not supported  | extension-code extension-code = 3DIGIT Reason-Phrase  = *<TEXT, excluding CR, LF> xrl-header xrl-entity-header  = <Any triplet of the elements (*extension-headers Content-Length *extension-headers), (*extension-headers Last-Modified *extension-headers), and (*extension-headers Date *extension-headers)> HTTP/1.1 Standard: entity-header = Allow | Content-Base | Content-Encoding | Content-Language | Content-Length | Content-Location | Content-MD5 | Content-Range | Content-Type | ETag | Expires | Last-Modified | extension-header Date = "Date" ":" HTTP-date Last-Modified  = "Last-Modified" ":" HTTP-date Content-Length = "Content-Length" ":" 1*DIGIT extension-header = message-header HTTP-date HTTP-date = rfc1123-date rfc1123-date = wkday "," SP date1 SP time SP "GMT" date1 = 2DIGIT SP month SP 4DIGIT ; day month year (e.g., 02 Jun 1982) time = 2DIGIT ":" 2DIGIT ":" 2DIGIT ; 00:00:00 - 23:59:59 wkday = "Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun" month = "Jan" | "Feb" | "Mar" | "Apr" | "May" | "Jun" | "Jul" | "Aug" | "Sep" | "Oct" | "Nov" | "Dec" message-header message-header = field-name ":" [ field-value ] CRLF field-name = token            field-value = *( field-content | LWS ) field-content = <the OCTETs making up the field-value and consisting of either *TEXT or combinations of token, tspecials, and quoted-string> message-body xrl-message-body = entity-body HTTP/1.1 Standard: message-body = entity-body | <entity-body encoded as per Transfer-Encoding> entity-body = *OCTET Basic Rules SP = <US-ASCII SP, space (32)> HT = <US-ASCII HT, horizontal-tab (9)> DIGIT = <any US-ASCII digit "0".."9"> CHAR = <any US-ASCII character (octets 0 - 127)> OCTET = <any 8-bit sequence of data> CTL = <any US-ASCII control character (octets 0 - 31) and DEL (127)> CR = <US-ASCII CR, carriage return (13)> LF = <US-ASCII LF, linefeed (10)> tspecials = "(" | ")" | "<" | ">" | "@" | "," | ";" | ":" | "\" | <"> | "/" | "[" | "]" | "?" | "=" | "{" | "}" | SP | HT CRLF = CR LF LWS = [CRLF] 1*( SP | HT ) TEXT = <any OCTET except CTLs,but including LWS> CTL = <any US-ASCII control character (octets 0 - 31) and DEL (127)> token = 1*<any CHAR except CTLs or tspecials> quoted-string  = ( <"> *(qdtext) <"> ) qdtext = <any TEXT except <">>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\filesystem\docs\CdManualTest.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft CD Manual Title _PID_HLINKSCD Manual nathann Normal.dot Josh Poley Microsoft Word 9.0bjbjU CD Manual Introduction This test handles some CD related things that are hard to automate.  This test is key to finding bugs related to CDs. Resources cdmakers  email alias of CD makers at MS.   CdImage   internal image mastering tool.  Available at   HYPERLINK "\\\\bustard\\contrib\\aliases\\cdmakers"  \\bustard\contrib\aliases\cdmakers MS Library has CD specs on file Web Pages  HYPERLINK "http://discmaker/cdmakers"  http://discmaker/cdmakers  - internal cdmakers web page  HYPERLINK "http://resource.simplenet.com"  http://resource.simplenet.com  HYPERLINK "http://www.fadden.com/cdrfaq"  http://www.fadden.com/cdrfaq  HYPERLINK "http://www.nml.org"  http://www.nml.org  HYPERLINK "http://www.cdrcentral.com/community/policies.html"  http://www.cdrcentral.com/community/policies.html  HYPERLINK "http://www.osta.org"  http://www.osta.org - owners of the UDF file system  HYPERLINK "http://fs"  http://fs - internal Windows File System webpage Basic CD Test The icon for shortcuts to a CD should reflect the CD in the drive. Create shortcuts to the CD-ROM drive and place then in folders, on the desktop, etc   They will be used through this section of the test. Scenario Expected Results Insert an Audio CD while holding the shift key down. All the shortcuts to the drive update to show that an audio CD is in the drive. Right click on one of the shortcuts. Play should be the default context menu item. Select play from the context menu The CD starts playing at track 1. Close the CD player.  Double click a shortcut. The CD starts playing at track1. Close the CD Player.  Explore the CD There is a file representing each track. (i.e. track01.CDA)  Each file should be 44 bytes. Double click on a track icon. That track starts playing. Create some shortcuts of the track icons.  Play with them. The shortcuts should behave just like the track files. Drag a track icon to the CD Player. That track should begin to play Select multiple tracks.  Select play from the context menu. Each track should play in turn. Eject the CD. The drive shortcuts should eturn to the normal CD-ROM icon Insert a build CD in the drive. The drive shortcuts should change to the windows icon. Autorun Test When a CD is placed in the drive, then it should autorun.  Holding down the shift key while inserting the CD disables autorun for that event.  Additional documentation on Autorun can be found in the DirectX documentation. Scenario Expected Result Insert an audio CD. The CD starts playing Insert a build CD The CD autoruns Insert a CD w/o autorun The CD does not autorun Insert an audio CD/build CD while holding down shift The CD does not autorun CD Mastering Test There are many different CD mastering programs out there.  We need to verify that we can handle media made with the different media mastering software.  It is hard to describe this section of the test.  Trying a wide variety of different options is key to finding bugs that may exist.  With packet written CDs doing renames, moves, deletes, etc is encouraged.   Software to use (PW   denotes packet writing software): CDImage (MS Internal) Easy CD Creator (Adaptec) Direct CD (Adaptec) (PW) Scenario Expected Result Create some CDs with different software. Windows can read them correctly. Create packet written CDs with a CD-R Windows can read them correctly. Create packet written CDs on a CD-RW (with RW media) Windows can read them correctly. DVD Test DVDs use the UDF file system.  Because of the tie between UDF and DVD, there are special DVD functions in the UDF file system that need testing. Scenario Expected Result Put a DVD in the drive You can read the drive and it mounts as UDF. Put a movie DVD in the drive The drive mounts as UDF and the movie begins playing Plug N Play Test CD-ROM devices can be removed and added dynamicly (providing the hardware supports it).  The file system must handle these events.  These tests are for laptop docking stations with a CD-ROM in the dock. Scenario Expected Result Dock the laptop.  Place a CDFS disk in the drive.  After it mounts, then undock. The undock happens without problems. Repeat the above, but with explorer open to the CD. The undock happens without problems. Redock. The undock happens without problems. Undock with a  CD in the drive.  Switch CDs.  Redock. The undock/dock happens without problems. Repeat all of the above with a UDF disk in the drive. As above
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\docs\xrl_testplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft XONLINE   XRL TEST PLAN Title _PID_HLINKSXONLINE   XRL TEST PLAN Sean Wohlgemuth Normal.dot Sean Wohlgemuth Microsoft Word 9.0z:'9X [FjnZXONLINE   XRL TEST PLAN Revision History Author Comment 10/24/00  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth Initial Draft 10/24/00  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth Feedback revisions 10/26/00  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth Added document references 11/02/00  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth Schedule changes Owners  HYPERLINK "mailto:seanwo@microsoft.com"  Sean Wohlgemuth Development  HYPERLINK "mailto:boydm@microsoft.com"  Boyd Multerer Program Management  HYPERLINK "mailto:pnewson@microsoft.com"  Paul Newson Document Resources XRL Specification  HYPERLINK "http://xbox/Specs/pm/online/XRL%20API%20spec.doc"  http://xbox/Specs/pm/online/XRL%20API%20spec.doc XRL Source Code private\online\client\xrl XRL Test Source Code private\test\online XRL Test Documentation private\test\docs XRL-Response Backus-Naur Form private\test\docs HTTP/1.0 RFC 1945  HYPERLINK "http://www.cis.ohio-state.edu/htbin/rfc/rfc1945.html"  http://www.cis.ohio-state.edu/htbin/rfc/rfc1945.html HTTP/1.1 RFC 2068  HYPERLINK "http://www.cis.ohio-state.edu/htbin/rfc/rfc2068.html"  http://www.cis.ohio-state.edu/htbin/rfc/rfc2068.html Schedule December Alpha Release Code Complete 11/06/2000 Test Complete 11/15/2000 Sample Complete 11/08/2000 Alpha Release 12/08/2000 Specification and Feature Sets This area discusses the feature sets that are required for each milestone and the level of documentation that exists for those feature sets. December Alpha Release Specification Currently, no XRL specification has been checked in.  The XRL specification passed through a spec review. Features This release will focus on the development of the XRL Blocking APIs. This release is required to ship the following XRL Blocking APIs: XRL_DownloadFile XRL_Upload XRL_DownloadToMemory Test Tools Test Harness   Most API level testing will be developed as modules for the general xbox operating system test harness (developed by the operating system s test team). Test Harness XRL Modules   The modules that will be developed to run within the test harness. XRL Server Simulator   In order to simulate corrupt or invalid data being received from the XRL servers, a lightweight server simulator will be developed to test this area.  This tool will not be designed for stress purposes and may only allow one XRL client to be connected at a time. XRL Content File Generator   A small utility will be developed to automate the process of generating n byte length files for upload or download. Hardware Resources  Xbox Development Kit XRL Server (IIS server running operational center s version of the operating system and applications). Local Area Network Direct Internet Network Human Resources 1 SDET resource   Test plan development, Test outline development, Test case development, execution of test cases. 1 Lab Manager resource   Server setup and configuration. Test Methods Code Review Each piece of code checked in by development will be dev-buddy code reviewed according to the standards put in place by the online development team.  This section describes the level of code review that is done beyond this basic verification. The XRL API interfaces will be initially code reviewed by the SDET resource assigned to testing this area.  The code will always be independently code reviewed by the SDET resource, however, the SDET resource may also end up attending a wider code review session that includes members from the development team. Each XRL code check in (whether it be new code or bug fixes) should be code reviewed by the SDET resource as well to help maintain code stability and to give insight into which areas are affected by per said check in. Manual At this point the XRL API usage is not part of the default title; so manual testing cannot be performed with regards to shipping code.  Samples will exercise the basic XRL APIs and should be successfully run. Functional Functional tests will consist of the typical scenarios including: Valid parameters Invalid parameters (Debug Only) Boundary cases Stress The XRL API will be stressed through serial, parallel, single-threaded, multi-threaded and random stress testing.  Memory tracking will be used to detect memory leaks during stress testing. Security Since XRL content servers are generally defined as standard IIS servers, no IIS security testing will be completed with the exception of validating and testing the IIS server s configuration settings. Performance A set of basic API calls will be timed and recorded for evaluation.  Performance criteria will depend on a subjective analysis of the results by Program Management, Development, and Test.  Test s primary goal is to record these timing so that the team can make a well-informed decision about performance criteria and incorporate those requirements into the release criteria. Failure Failure testing will be accomplished through both physical and software side testing.  General network failures and in progress transfer failures will be tested through such actions as disconnection of the network or shutting down the web server hosting the XRL content.  The XRL Server Simulator Tool will be used to corrupt and invalidate data coming across the wire to the XRL client. Integration Integration testing will focus on the integration between the XRL client and the XRL servers.  Testing will be performed over a LAN.  Testing over a WAN will be performed if time and resources permit. XRL servers will be running the latest operational center s version of Microsoft s IIS services.  Testing against other web server technologies (such as Linux/Apache) will not be supported since the services are a closed network. Localization XRL API should be able to send and receive URLs that have been URL Encoded (example GET /%72%65%61%64%2F%30%30%30%30%30%30%30%30%2E%30%30%31). Verification will be done to ensure that extended characters can be used when specifying local filenames.  Verification will also be done to handle the URL Encoded to ANSI case. Test Complete Criteria December Alpha Release For this component to reach Test Compete Criteria, all of the above scenarios must be covered through a test pass. Release Criteria For this component to reach Release Criteria the following must be true: All previous stages of development and test have been completed including code complete and test complete. Test team signs off (owner and test manager) Development team signs off (owner and dev manager) Program Management team signs off (owner and pm manager) No outstanding priority 1 or 2 level bugs exist in the Raid database Exceptions: Performance issues will not be addressed in the December Alpha. Stress issues will not be addressed in the December Alpha.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\filesystem\docs\CDFSTestplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Internal Title _PID_HLINKSArunvijay NT Base Test Plan MS.dot Josh Poley Microsoft Word 9.07nW(y<Z-EOu <Z-EOu IDATx 7<+xf jIDATx ObcDH IDATx ?0hu- IDATx Y4c:"8 KIDATx ?)_3} t{2cN t{2cn st{2cf st{2c:H st{2c st{2czH nOfL? st{1c 'K%F1G 'K%n` zOV>9 ^,ogc X)TMBe C>/|Ax 5x;N] 8VFWD f6x7~= ElL,ul ;"*cT t4OBS &Paf8Z 9*q^C eYiNiV rv]gY,o sv]gY, pv]gY, pv]gY,o =^gZk% _-S7C pv]gYct eOpv] =^gZk% ^v]gYm eOpv]gYm4 qv]gYm sv]gYm 7qv]gYmt pv]gYsd QKEVA QKEvC AKE\7 ,KE^@ ,KE>G rv]?Y sv]?Y sv]?Y sv]?Y Wpv]?Y ?qv]?Y 59[Q' ,!$Y!+ Fl;-f)  Z#SF+ k2.66 $tf],]} BV[OK t+YOn i<,<$l N--rV ,!$Y!+ 3>4.!M ivJ8I al'W_ >BoK/ t+9@n GO=k`) '_hkiCZ YL(`q! 1!_hKZ[ %8^3JY R@.0b dL+f% ,=-=r tG!SZ9 "(f%>cH)+c 3H{w: fReL3* %B1^' 3R$_h+ Z$,fK eFkc9ici+ 30G[r- !l02H 1!_hk NZL(`q2 bB>kK Z#KF+c t"C}: 5d<L` IFc^Fc zRKn #0 &k,je Vl/k$ HX(,  8+`1! v=m|6 c2k%[% 2:Z:a $-g+0 5l5[% 5l-[G r!9b\ (<s,y }n {- ` ^#] ,e)h` bX$,d 9l62x KdO[$, g:2yy ddF;{ 6> OY >{|>  3*@v}z)aI O2@v- AJ1vR j2*G{ LieB) 3J1&Yw 6/@v] ~Z!+b 8yXxH 2J0&Y $Hw#N Rh)be \7[n1 \g:iOsw= 7I"@2@ 2VNNb BVDN cV oHQ`HP X",Ee j %h3 VTc[P [SBb%b[X :(Yo"[( rN8/| 0WSBRX c/#Wq [`^i+ ]mjJ& /@ms5 qHetB8 !E=,A d9Y&<+,E5 5%$V" yNYIV 1lA6{ |%PBR o([?P~ BR!U!"1 BBb%*Pm cTA?A! &w)w*wMicrosoft Word Picture MSWordDoc Word.Picture.8Philips Title _PID_GUIDHans Mons Normal.dot Hans Mons Microsoft Word 8.0bjbjU CDFS and UDFS Test Plan Windows 2000 (Base Test) Arunvijay Kumar  FILENAME  Document1 Revision   DOCPROPERTY "RevisionNumber"  \* MERGEFORMAT   TIME \@ "MMMM d, yyyy"  April 17, 2000  Copyright Microsoft Corporation, 1999.  All Rights Reserved  TOC \o "1-4" \h \z   HYPERLINK \l "_Toc479063379"  Introduction  PAGEREF _Toc479063379 \h   HYPERLINK \l "_Toc479063380"  Component Testing  PAGEREF _Toc479063380 \h   HYPERLINK \l "_Toc479063381"  BVT Test Suite  PAGEREF _Toc479063381 \h   HYPERLINK \l "_Toc479063382"  Functionality Tests  PAGEREF _Toc479063382 \h   HYPERLINK \l "_Toc479063383"  IOTest  PAGEREF _Toc479063383 \h   HYPERLINK \l "_Toc479063384"  CompletionPort Test  PAGEREF _Toc479063384 \h   HYPERLINK \l "_Toc479063385"  Alternate Name IO Test  PAGEREF _Toc479063385 \h   HYPERLINK \l "_Toc479063386"  Attribute Test  PAGEREF _Toc479063386 \h   HYPERLINK \l "_Toc479063387"  Dismount Test  PAGEREF _Toc479063387 \h   HYPERLINK \l "_Toc479063388"  Write Test  PAGEREF _Toc479063388 \h   HYPERLINK \l "_Toc479063389"  Cancel IO Test  PAGEREF _Toc479063389 \h   HYPERLINK \l "_Toc479063390"  Mapped IO Test  PAGEREF _Toc479063390 \h   HYPERLINK \l "_Toc479063391"  EnumDir Test  PAGEREF _Toc479063391 \h   HYPERLINK \l "_Toc479063392"  File ID Test  PAGEREF _Toc479063392 \h   HYPERLINK \l "_Toc479063393"  File Info Test  PAGEREF _Toc479063393 \h   HYPERLINK \l "_Toc479063394"  FSCTL Test  PAGEREF _Toc479063394 \h   HYPERLINK \l "_Toc479063395"  Notification Test  PAGEREF _Toc479063395 \h   HYPERLINK \l "_Toc479063396"  Read Scatter Test  PAGEREF _Toc479063396 \h   HYPERLINK \l "_Toc479063397"  Lock Test  PAGEREF _Toc479063397 \h   HYPERLINK \l "_Toc479063398"  Volume IO Test  PAGEREF _Toc479063398 \h   HYPERLINK \l "_Toc479063399"  UDF Standards Compliance Tests  PAGEREF _Toc479063399 \h   HYPERLINK \l "_Toc479063400"  Time Zone Test  PAGEREF _Toc479063400 \h   HYPERLINK \l "_Toc479063401"  Description:  PAGEREF _Toc479063401 \h   HYPERLINK \l "_Toc479063402"  Location on disc:  PAGEREF _Toc479063402 \h   HYPERLINK \l "_Toc479063403"  File names:  PAGEREF _Toc479063403 \h   HYPERLINK \l "_Toc479063404"  References:  PAGEREF _Toc479063404 \h   HYPERLINK \l "_Toc479063405"  Rules:  PAGEREF _Toc479063405 \h   HYPERLINK \l "_Toc479063406"  Date Stress  PAGEREF _Toc479063406 \h   HYPERLINK \l "_Toc479063407"  Description:  PAGEREF _Toc479063407 \h   HYPERLINK \l "_Toc479063408"  Location on disc(s):  PAGEREF _Toc479063408 \h   HYPERLINK \l "_Toc479063409"  File names:  PAGEREF _Toc479063409 \h   HYPERLINK \l "_Toc479063410"  References:  PAGEREF _Toc479063410 \h   HYPERLINK \l "_Toc479063411"  Rules:  PAGEREF _Toc479063411 \h   HYPERLINK \l "_Toc479063412"  Filename encoding  PAGEREF _Toc479063412 \h   HYPERLINK \l "_Toc479063413"  Description:  PAGEREF _Toc479063413 \h   HYPERLINK \l "_Toc479063414"  Location:  PAGEREF _Toc479063414 \h   HYPERLINK \l "_Toc479063415"  File names:  PAGEREF _Toc479063415 \h   HYPERLINK \l "_Toc479063416"  References:  PAGEREF _Toc479063416 \h   HYPERLINK \l "_Toc479063417"  Rules:  PAGEREF _Toc479063417 \h   HYPERLINK \l "_Toc479063418"  Stressed Filenames  PAGEREF _Toc479063418 \h   HYPERLINK \l "_Toc479063419"  Description:  PAGEREF _Toc479063419 \h   HYPERLINK \l "_Toc479063420"  Location:  PAGEREF _Toc479063420 \h   HYPERLINK \l "_Toc479063421"  \filename\stressed  PAGEREF _Toc479063421 \h   HYPERLINK \l "_Toc479063422"  File names:  PAGEREF _Toc479063422 \h   HYPERLINK \l "_Toc479063423"  References:  PAGEREF _Toc479063423 \h   HYPERLINK \l "_Toc479063424"  Rules:  PAGEREF _Toc479063424 \h   HYPERLINK \l "_Toc479063425"  Path Length  PAGEREF _Toc479063425 \h   HYPERLINK \l "_Toc479063426"  Description:  PAGEREF _Toc479063426 \h   HYPERLINK \l "_Toc479063427"  Location:  PAGEREF _Toc479063427 \h   HYPERLINK \l "_Toc479063428"  Path name:  PAGEREF _Toc479063428 \h   HYPERLINK \l "_Toc479063429"  References:  PAGEREF _Toc479063429 \h   HYPERLINK \l "_Toc479063430"  Rules:  PAGEREF _Toc479063430 \h   HYPERLINK \l "_Toc479063431"  Large Directory  PAGEREF _Toc479063431 \h   HYPERLINK \l "_Toc479063432"  Description:  PAGEREF _Toc479063432 \h   HYPERLINK \l "_Toc479063433"  Location:  PAGEREF _Toc479063433 \h   HYPERLINK \l "_Toc479063434"  File names:  PAGEREF _Toc479063434 \h   HYPERLINK \l "_Toc479063435"  Rules:  PAGEREF _Toc479063435 \h   HYPERLINK \l "_Toc479063436"  Large File  PAGEREF _Toc479063436 \h   HYPERLINK \l "_Toc479063437"  Description :  PAGEREF _Toc479063437 \h   HYPERLINK \l "_Toc479063438"  Location on disc(s) :  PAGEREF _Toc479063438 \h   HYPERLINK \l "_Toc479063439"  Filenames :  PAGEREF _Toc479063439 \h   HYPERLINK \l "_Toc479063440"  References:  PAGEREF _Toc479063440 \h   HYPERLINK \l "_Toc479063441"  Rules:  PAGEREF _Toc479063441 \h   HYPERLINK \l "_Toc479063442"  Multiple Descriptors  PAGEREF _Toc479063442 \h   HYPERLINK \l "_Toc479063443"  Description:  PAGEREF _Toc479063443 \h   HYPERLINK \l "_Toc479063444"  Discs:  PAGEREF _Toc479063444 \h   HYPERLINK \l "_Toc479063445"  References:  PAGEREF _Toc479063445 \h   HYPERLINK \l "_Toc479063446"  Rules:  PAGEREF _Toc479063446 \h   HYPERLINK \l "_Toc479063447"  Multiple LVID descriptors  PAGEREF _Toc479063447 \h   HYPERLINK \l "_Toc479063448"  Description:  PAGEREF _Toc479063448 \h   HYPERLINK \l "_Toc479063449"  Discs:  PAGEREF _Toc479063449 \h   HYPERLINK \l "_Toc479063450"  References:  PAGEREF _Toc479063450 \h   HYPERLINK \l "_Toc479063451"  Rules:  PAGEREF _Toc479063451 \h   HYPERLINK \l "_Toc479063452"  4096 Strategy  PAGEREF _Toc479063452 \h   HYPERLINK \l "_Toc479063453"  Description:  PAGEREF _Toc479063453 \h   HYPERLINK \l "_Toc479063454"  Location:  PAGEREF _Toc479063454 \h   HYPERLINK \l "_Toc479063455"  File names:  PAGEREF _Toc479063455 \h   HYPERLINK \l "_Toc479063456"  References:  PAGEREF _Toc479063456 \h   HYPERLINK \l "_Toc479063457"  Rules:  PAGEREF _Toc479063457 \h   HYPERLINK \l "_Toc479063458"  Partition Number  PAGEREF _Toc479063458 \h   HYPERLINK \l "_Toc479063459"  Description:  PAGEREF _Toc479063459 \h   HYPERLINK \l "_Toc479063460"  Location:  PAGEREF _Toc479063460 \h   HYPERLINK \l "_Toc479063461"  Rules:  PAGEREF _Toc479063461 \h   HYPERLINK \l "_Toc479063462"  References:  PAGEREF _Toc479063462 \h   HYPERLINK \l "_Toc479063463"  Notes:  PAGEREF _Toc479063463 \h   HYPERLINK \l "_Toc479063464"  ID Compression  PAGEREF _Toc479063464 \h   HYPERLINK \l "_Toc479063465"  Description:  PAGEREF _Toc479063465 \h   HYPERLINK \l "_Toc479063466"  Location:  PAGEREF _Toc479063466 \h   HYPERLINK \l "_Toc479063467"  File names:  PAGEREF _Toc479063467 \h   HYPERLINK \l "_Toc479063468"  References:  PAGEREF _Toc479063468 \h   HYPERLINK \l "_Toc479063469"  Rules:  PAGEREF _Toc479063469 \h   HYPERLINK \l "_Toc479063470"  Logical Volume Identifier  PAGEREF _Toc479063470 \h   HYPERLINK \l "_Toc479063471"  Description:  PAGEREF _Toc479063471 \h   HYPERLINK \l "_Toc479063472"  Location on discs:  PAGEREF _Toc479063472 \h   HYPERLINK \l "_Toc479063473"  Name:  PAGEREF _Toc479063473 \h   HYPERLINK \l "_Toc479063474"  References:  PAGEREF _Toc479063474 \h   HYPERLINK \l "_Toc479063475"  Rules:  PAGEREF _Toc479063475 \h   HYPERLINK \l "_Toc479063476"  Virtual & Non-virtual Space  PAGEREF _Toc479063476 \h   HYPERLINK \l "_Toc479063477"  Description:  PAGEREF _Toc479063477 \h   HYPERLINK \l "_Toc479063478"  Location on disc:  PAGEREF _Toc479063478 \h   HYPERLINK \l "_Toc479063479"  File names:  PAGEREF _Toc479063479 \h   HYPERLINK \l "_Toc479063480"  Rules:  PAGEREF _Toc479063480 \h   HYPERLINK \l "_Toc479063481"  Sparing  PAGEREF _Toc479063481 \h   HYPERLINK \l "_Toc479063482"  Description:  PAGEREF _Toc479063482 \h   HYPERLINK \l "_Toc479063483"  Location:  PAGEREF _Toc479063483 \h   HYPERLINK \l "_Toc479063484"  Rules:  PAGEREF _Toc479063484 \h   HYPERLINK \l "_Toc479063485"  References:  PAGEREF _Toc479063485 \h   HYPERLINK \l "_Toc479063486"  Implementation Use field in FID  PAGEREF _Toc479063486 \h   HYPERLINK \l "_Toc479063487"  Description:  PAGEREF _Toc479063487 \h   HYPERLINK \l "_Toc479063488"  Disks:  PAGEREF _Toc479063488 \h   HYPERLINK \l "_Toc479063489"  Location on disks:  PAGEREF _Toc479063489 \h   HYPERLINK \l "_Toc479063490"  Filename:  PAGEREF _Toc479063490 \h   HYPERLINK \l "_Toc479063491"  Rules:  PAGEREF _Toc479063491 \h   HYPERLINK \l "_Toc479063492"  File Types  PAGEREF _Toc479063492 \h   HYPERLINK \l "_Toc479063493"  Description:  PAGEREF _Toc479063493 \h   HYPERLINK \l "_Toc479063494"  Location:  PAGEREF _Toc479063494 \h   HYPERLINK \l "_Toc479063495"  File names:  PAGEREF _Toc479063495 \h   HYPERLINK \l "_Toc479063496"  Rules:  PAGEREF _Toc479063496 \h   HYPERLINK \l "_Toc479063497"  File Permissions  PAGEREF _Toc479063497 \h   HYPERLINK \l "_Toc479063498"  Description:  PAGEREF _Toc479063498 \h   HYPERLINK \l "_Toc479063499"  Location:  PAGEREF _Toc479063499 \h   HYPERLINK \l "_Toc479063500"  File names:  PAGEREF _Toc479063500 \h   HYPERLINK \l "_Toc479063501"  Rules:  PAGEREF _Toc479063501 \h   HYPERLINK \l "_Toc479063502"  Description:  PAGEREF _Toc479063502 \h   HYPERLINK \l "_Toc479063503"  Location:  PAGEREF _Toc479063503 \h   HYPERLINK \l "_Toc479063504"  File names:  PAGEREF _Toc479063504 \h   HYPERLINK \l "_Toc479063505"  Rules:  PAGEREF _Toc479063505 \h   HYPERLINK \l "_Toc479063506"  Unrecorded Extents  PAGEREF _Toc479063506 \h   HYPERLINK \l "_Toc479063507"  Description:  PAGEREF _Toc479063507 \h   HYPERLINK \l "_Toc479063508"  Location:  PAGEREF _Toc479063508 \h   HYPERLINK \l "_Toc479063509"  File names:  PAGEREF _Toc479063509 \h   HYPERLINK \l "_Toc479063510"  Rules:  PAGEREF _Toc479063510 \h   HYPERLINK \l "_Toc479063511"  Information Length  PAGEREF _Toc479063511 \h   HYPERLINK \l "_Toc479063512"  Description:  PAGEREF _Toc479063512 \h   HYPERLINK \l "_Toc479063513"  Location on discs:  PAGEREF _Toc479063513 \h   HYPERLINK \l "_Toc479063514"  File names:  PAGEREF _Toc479063514 \h   HYPERLINK \l "_Toc479063515"  References:  PAGEREF _Toc479063515 \h   HYPERLINK \l "_Toc479063516"  Rules:  PAGEREF _Toc479063516 \h   HYPERLINK \l "_Toc479063517"  Allocation Descriptor Test  PAGEREF _Toc479063517 \h   HYPERLINK \l "_Toc479063518"  Description :  PAGEREF _Toc479063518 \h   HYPERLINK \l "_Toc479063519"  Location :  PAGEREF _Toc479063519 \h   HYPERLINK \l "_Toc479063520"  Filenames :  PAGEREF _Toc479063520 \h   HYPERLINK \l "_Toc479063521"  References:  PAGEREF _Toc479063521 \h   HYPERLINK \l "_Toc479063522"  Rules:  PAGEREF _Toc479063522 \h   HYPERLINK \l "_Toc479063523"  Zero Length Files  PAGEREF _Toc479063523 \h   HYPERLINK \l "_Toc479063524"  Description:  PAGEREF _Toc479063524 \h   HYPERLINK \l "_Toc479063525"  Location on discs:  PAGEREF _Toc479063525 \h   HYPERLINK \l "_Toc479063526"  Filenames:  PAGEREF _Toc479063526 \h   HYPERLINK \l "_Toc479063527"  References:  PAGEREF _Toc479063527 \h   HYPERLINK \l "_Toc479063528"  Rules:  PAGEREF _Toc479063528 \h   HYPERLINK \l "_Toc479063529"  Extended Attributes (Mix)  PAGEREF _Toc479063529 \h   HYPERLINK \l "_Toc479063530"  Description:  PAGEREF _Toc479063530 \h   HYPERLINK \l "_Toc479063531"  Location on discs:  PAGEREF _Toc479063531 \h   HYPERLINK \l "_Toc479063532"  File names:  PAGEREF _Toc479063532 \h   HYPERLINK \l "_Toc479063533"  Rules:  PAGEREF _Toc479063533 \h   HYPERLINK \l "_Toc479063534"  Extended Attributes (Implementation Use)  PAGEREF _Toc479063534 \h   HYPERLINK \l "_Toc479063535"  Description:  PAGEREF _Toc479063535 \h   HYPERLINK \l "_Toc479063536"  Location on discs:  PAGEREF _Toc479063536 \h   HYPERLINK \l "_Toc479063537"  File names:  PAGEREF _Toc479063537 \h   HYPERLINK \l "_Toc479063538"  Rules:  PAGEREF _Toc479063538 \h   HYPERLINK \l "_Toc479063539"  Extended Attributes (non-embedded small EA  PAGEREF _Toc479063539 \h   HYPERLINK \l "_Toc479063540"  Description:  PAGEREF _Toc479063540 \h   HYPERLINK \l "_Toc479063541"  Location on disc:  PAGEREF _Toc479063541 \h   HYPERLINK \l "_Toc479063542"  File names:  PAGEREF _Toc479063542 \h   HYPERLINK \l "_Toc479063543"  Rules:  PAGEREF _Toc479063543 \h   HYPERLINK \l "_Toc479063544"  Extended Attributes (Mac Volume Info)  PAGEREF _Toc479063544 \h   HYPERLINK \l "_Toc479063545"  Description:  PAGEREF _Toc479063545 \h   HYPERLINK \l "_Toc479063546"  Location on discs:  PAGEREF _Toc479063546 \h   HYPERLINK \l "_Toc479063547"  Rules:  PAGEREF _Toc479063547 \h   HYPERLINK \l "_Toc479063548"  Hard links  PAGEREF _Toc479063548 \h   HYPERLINK \l "_Toc479063549"  Description:  PAGEREF _Toc479063549 \h   HYPERLINK \l "_Toc479063550"  Location:  PAGEREF _Toc479063550 \h   HYPERLINK \l "_Toc479063551"  File names:  PAGEREF _Toc479063551 \h   HYPERLINK \l "_Toc479063552"  References:  PAGEREF _Toc479063552 \h   HYPERLINK \l "_Toc479063553"  Rules:  PAGEREF _Toc479063553 \h   HYPERLINK \l "_Toc479063554"  Directory boundary conditions  PAGEREF _Toc479063554 \h   HYPERLINK \l "_Toc479063555"  Description:  PAGEREF _Toc479063555 \h   HYPERLINK \l "_Toc479063556"  Location on discs:  PAGEREF _Toc479063556 \h   HYPERLINK \l "_Toc479063557"  Filenames:  PAGEREF _Toc479063557 \h   HYPERLINK \l "_Toc479063558"  References:  PAGEREF _Toc479063558 \h   HYPERLINK \l "_Toc479063559"  Rules:  PAGEREF _Toc479063559 \h   HYPERLINK \l "_Toc479063560"  Volume name  PAGEREF _Toc479063560 \h   HYPERLINK \l "_Toc479063561"  Description:  PAGEREF _Toc479063561 \h   HYPERLINK \l "_Toc479063562"  Location on discs:  PAGEREF _Toc479063562 \h   HYPERLINK \l "_Toc479063563"  Volume Names:  PAGEREF _Toc479063563 \h   HYPERLINK \l "_Toc479063564"  Rules:  PAGEREF _Toc479063564 \h   HYPERLINK \l "_Toc479063565"  Volume Recognition Sequence  PAGEREF _Toc479063565 \h   HYPERLINK \l "_Toc479063566"  Description:  PAGEREF _Toc479063566 \h   HYPERLINK \l "_Toc479063567"  Discs:  PAGEREF _Toc479063567 \h   HYPERLINK \l "_Toc479063568"  Location on Discs:  PAGEREF _Toc479063568 \h   HYPERLINK \l "_Toc479063569"  References:  PAGEREF _Toc479063569 \h   HYPERLINK \l "_Toc479063570"  Rules:  PAGEREF _Toc479063570 \h   HYPERLINK \l "_Toc479063571"  Tag serial number  PAGEREF _Toc479063571 \h   HYPERLINK \l "_Toc479063572"  Description:  PAGEREF _Toc479063572 \h   HYPERLINK \l "_Toc479063573"  Location on discs:  PAGEREF _Toc479063573 \h   HYPERLINK \l "_Toc479063574"  Filenames:  PAGEREF _Toc479063574 \h   HYPERLINK \l "_Toc479063575"  References:  PAGEREF _Toc479063575 \h   HYPERLINK \l "_Toc479063576"  Rules:  PAGEREF _Toc479063576 \h   HYPERLINK \l "_Toc479063577"  File Entry CRC  PAGEREF _Toc479063577 \h   HYPERLINK \l "_Toc479063578"  Description:  PAGEREF _Toc479063578 \h   HYPERLINK \l "_Toc479063579"  Location on discs:  PAGEREF _Toc479063579 \h   HYPERLINK \l "_Toc479063580"  Filenames:  PAGEREF _Toc479063580 \h   HYPERLINK \l "_Toc479063581"  References:  PAGEREF _Toc479063581 \h   HYPERLINK \l "_Toc479063582"  Rules:  PAGEREF _Toc479063582 \h   HYPERLINK \l "_Toc479063583"  Volume Descriptor CRC  PAGEREF _Toc479063583 \h   HYPERLINK \l "_Toc479063584"  Description:  PAGEREF _Toc479063584 \h   HYPERLINK \l "_Toc479063585"  Location on disc:  PAGEREF _Toc479063585 \h   HYPERLINK \l "_Toc479063586"  Filenames:  PAGEREF _Toc479063586 \h   HYPERLINK \l "_Toc479063587"  References:  PAGEREF _Toc479063587 \h   HYPERLINK \l "_Toc479063588"  Rules:  PAGEREF _Toc479063588 \h   HYPERLINK \l "_Toc479063589"  Volume descriptor pointer  PAGEREF _Toc479063589 \h   HYPERLINK \l "_Toc479063590"  Description:  PAGEREF _Toc479063590 \h   HYPERLINK \l "_Toc479063591"  Location on discs:  PAGEREF _Toc479063591 \h   HYPERLINK \l "_Toc479063592"  Filenames:  PAGEREF _Toc479063592 \h   HYPERLINK \l "_Toc479063593"  References:  PAGEREF _Toc479063593 \h   HYPERLINK \l "_Toc479063594"  Rules:  PAGEREF _Toc479063594 \h   HYPERLINK \l "_Toc479063595"  Implementation Use  PAGEREF _Toc479063595 \h   HYPERLINK \l "_Toc479063596"  Description:  PAGEREF _Toc479063596 \h   HYPERLINK \l "_Toc479063597"  Location on discs:  PAGEREF _Toc479063597 \h   HYPERLINK \l "_Toc479063598"  Filenames:  PAGEREF _Toc479063598 \h   HYPERLINK \l "_Toc479063599"  References:  PAGEREF _Toc479063599 \h   HYPERLINK \l "_Toc479063600"  Rules:  PAGEREF _Toc479063600 \h   HYPERLINK \l "_Toc479063601"  Symbolic Links  PAGEREF _Toc479063601 \h   HYPERLINK \l "_Toc479063602"  Description:  PAGEREF _Toc479063602 \h   HYPERLINK \l "_Toc479063603"  Location on disc(s):  PAGEREF _Toc479063603 \h   HYPERLINK \l "_Toc479063604"  Filenames:  PAGEREF _Toc479063604 \h   HYPERLINK \l "_Toc479063605"  Notes:  PAGEREF _Toc479063605 \h   HYPERLINK \l "_Toc479063606"  Rules:  PAGEREF _Toc479063606 \h   HYPERLINK \l "_Toc479063607"  UID and GID  PAGEREF _Toc479063607 \h   HYPERLINK \l "_Toc479063608"  Description:  PAGEREF _Toc479063608 \h   HYPERLINK \l "_Toc479063609"  Location on disc(s):  PAGEREF _Toc479063609 \h   HYPERLINK \l "_Toc479063610"  Filenames:  PAGEREF _Toc479063610 \h   HYPERLINK \l "_Toc479063611"  Notes:  PAGEREF _Toc479063611 \h   HYPERLINK \l "_Toc479063612"  Standard and Extended File Entries  PAGEREF _Toc479063612 \h   HYPERLINK \l "_Toc479063613"  Description:  PAGEREF _Toc479063613 \h   HYPERLINK \l "_Toc479063614"  Location on disc:  PAGEREF _Toc479063614 \h   HYPERLINK \l "_Toc479063615"  File names:  PAGEREF _Toc479063615 \h   HYPERLINK \l "_Toc479063616"  Rules:  PAGEREF _Toc479063616 \h   HYPERLINK \l "_Toc479063617"  File Content Testing  PAGEREF _Toc479063617 \h   HYPERLINK \l "_Toc479063618"  File Content  PAGEREF _Toc479063618 \h   HYPERLINK \l "_Toc479063619"  File CRC  PAGEREF _Toc479063619 \h   HYPERLINK \l "_Toc479063620"  FILECRC.TXT  PAGEREF _Toc479063620 \h   HYPERLINK \l "_Toc479063621"  Long File Names  PAGEREF _Toc479063621 \h   HYPERLINK \l "_Toc479063622"  Description:  PAGEREF _Toc479063622 \h   HYPERLINK \l "_Toc479063623"  Location on disc(s):  PAGEREF _Toc479063623 \h   HYPERLINK \l "_Toc479063624"  File names:  PAGEREF _Toc479063624 \h   HYPERLINK \l "_Toc479063625"  References:  PAGEREF _Toc479063625 \h   HYPERLINK \l "_Toc479063626"  Rules:  PAGEREF _Toc479063626 \h  Introduction Windows can read read only media which contains files recorded according to one of the following standards. File System  conforming to the  ISO9660 standard Universal Disk File System versions 1.02,1.50 and 2.00 These filesystems are usually recorded on Compact Disks and DVDs.  The cost effectiveness, convienience and high storage capacity offered by these media make them very useful for  distribution of software, multimedia content, archiving of data and for a variety of other purposes. Component Testing BVT Test Suite Functionality Tests IOTest IO test tests the underlying filesystem by attempting to do IO operations on files in the file system in the following ways Buffered IO with Sequential Access  Read operations are performed on files opened with FILE_FLAG_SEQUENTIAL_SCAN bit set. Buffered IO with Random Access Read operations are performed on files opened with FILE_FLAG_RANDOM_ACCESS bit set. Buffered IO , Normal Read operations are performed on files opened with FILE_ATTRIBUTE_NORMAL bit set. Unbuffered IO Read operations are performed on files opened with FILE_FLAG_NOBUFFERING bit set. Unbuffered  IO Overlapped Read operations are performed on files opened with FILE_FLAG_NOBUFFERING , FILE_FLAG_OVERLAPPED bits set. Unbuffered IO Overlapped Sequential Read operations are performed on files opened with FILE_FLAG_NOBUFFERING, FILE_FLAG_SEQUENTIAL_SCAN, FILE_FLAG_OVERLAPPED bits set. Unbuffered IO Overlapped Random Read operations are performed on files opened with FILE_FLAG_NOBUFFERING, FILE_FLAG_RANDOM_ACCESS, FILE_FLAG_OVERLAPPED bits set. Overlapped IO  Read operations are performed on files opened with FILE_FLAG_OVERLAPPED bit set. Overlapped IO Sequential Read operations are performed on files opened with FILE_FLAG_OVERLAPPED , FILE_FLAG_SEQUENTIAL_SCAN bits set. Overlapped IO Random Read operations are performed on files opened with FILE_FLAG_OVERLAPPED , FILE_FLAG_RANDOM_ACCESS bits set. CompletionPort Test Completion Port Test performs asynchronous IO on the files of the underlying filesystem. Unbuffered, Overlapped Read operations are performed on files opened with FILE_FLAG_NO_BUFFERING, FILE_FLAG_OVERLAPPED bits set. Unbuffered, Overlapped, Sequential Read operations are performed on files opened with FILE_FLAG_NO_BUFFERING, FILE_FLAG_OVERLAPPED, FILE_FLAG_SEQUENTIAL_SCAN bits set. Unbuffered, Overlapped, Random Read operations are performed on files opened with FILE_FLAG_NO_BUFFERING, FILE_FLAG_OVERLAPPED, FILE_FLAG_RANDOM_ACCESS bits set. Overlapped Read operations are performed on files opened with FILE_FLAG_OVERLAPPED bits set. Overlapped Sequential Read operations are performed on files opened with FILE_FLAG_OVERLAPPED, FILE_FLAG_SEQUENTIAL_SCAN bits set. Overlapped Random Read operations are performed on files opened with FILE_FLAG_NO_BUFFERING, FILE_FLAG_OVERLAPPED, FILE_FLAG_RANDOM_ACCESS bits set. Alternate Name IO Test This test verifies that files can be accessed by their alternate names.  This test is for verifying Joliet disks which store 2 different path tables   one for allowing access according to ISO9660 format file names and another for accessing files with Unicode Identifiers. 1. Buffered IO with Sequential Access  Read operations are performed on files opened with FILE_FLAG_SEQUENTIAL_SCAN bit set. Buffered IO with Random Access Read operations are performed on files opened with FILE_FLAG_RANDOM_ACCESS bit set. Buffered IO , Normal Read operations are performed on files opened with FILE_ATTRIBUTE_NORMAL bit set. Unbuffered IO Read operations are performed on files opened with FILE_FLAG_NOBUFFERING bit set. Unbuffered  IO Overlapped Read operations are performed on files opened with FILE_FLAG_NOBUFFERING , FILE_FLAG_OVERLAPPED bits set. Unbuffered IO Overlapped Sequential Read operations are performed on files opened with FILE_FLAG_NOBUFFERING, FILE_FLAG_SEQUENTIAL_SCAN, FILE_FLAG_OVERLAPPED bits set. Unbuffered IO Overlapped Random Read operations are performed on files opened with FILE_FLAG_NOBUFFERING, FILE_FLAG_RANDOM_ACCESS, FILE_FLAG_OVERLAPPED bits set. Overlapped IO  Read operations are performed on files opened with FILE_FLAG_OVERLAPPED bit set. Overlapped IO Sequential Read operations are performed on files opened with FILE_FLAG_OVERLAPPED , FILE_FLAG_SEQUENTIAL_SCAN bits set. Overlapped IO Random Read operations are performed on files opened with FILE_FLAG_OVERLAPPED , FILE_FLAG_RANDOM_ACCESS bits set. Attribute Test Attribute test verifies attribute information for files stored in the underlying filesystem. 1. File Information by handle Verifies if the GetFileInformationByHandle API returns the proper values for Creation Time, Write Time, Last Access Time and File Size values. File Security Information Verifies if File Security information is accessible using GetFileSecurity  API call. Only successful completion of the API is tested, the returned security information is not verified for correctness. File Version Information Verifies if File Version Information is accessible.  GetFileVersionInfoSize, and GetFileVersionInfo API calls are covered. File Attributes Information Verifies if GetFileAttributes API works. File Extended Attributes Information Verifies if GetFileAttributesEx returns the correct Creation Time, Access Time, Last Write Time and file size values. 6.  File Size Information Verifies if GetFileSize API returns the correct size for the file. File Time Information Verifies if GetFileTime API works properly. Disk Free Space Information Verifies if GetDiskFreeSpaceEx API works. Dismount Test Dismount Test verifies if the volume is properly dismounted under different combinations of the following cases 1. Lock Types  The volume could be  unlocked, locked and then unlocked or locked and not unlocked. 2. Volume Opened with different attributes The volume could be opened with  each of the following flags. FILE_FLAG_NORMAL, FILE_FLAG_OVERLAPPED, FILE_FLAG_NO_BUFFERING. Volume Access Types The volume could be opened for GENERIC_READ, GENERIC_WRITE or GENERIC_READ and GENERIC_WRITE access. Write Test 1. RemoveDirectory Verifies that RemoveDirectory fails with ERROR_ACCESS_DENIED  CreateDirectory Verifies that CreateDirectory fails with ERROR_ACCESS_DENIED CreateDirectoryEx Verifies that CreateDirectoryEx fails with ERROR_INVALID_NAME if the target directory and template directory names are the same and with ERROR_ACCESS_DENIED otherwise. Delete File DeleteFile should fail with ERROR_ACCESS_DENIED Move File MoveFile should fail with ERROR_ACCESS_DENIED Set File Attributes SetFileAttributes should fail with ERROR_ACCESS_DENIED Set End of File SetEndOfFile should fail with ERROR_ACCESS_DENIED Write File WriteFile should fail with  ERROR_ACCESS_DENIED Flush File Buffers FlushFileBuffers should fail with ERROR_ACCESS_DENIED Set File Time SetFileTime should fail with ERROR_ACCESS_DENIED Cancel IO Test Cancel IO Test verifies if Overlapped IO started on files of the underlying filesystem can be cancelled. 1. Unbuffered, Overlapped Files opened with FILE_FLAG_NO_BUFFERING, FILE_FLAG_OVERLAPPED. Unbuffered, Overlapped, Sequential Files opened with FILE_FLAG_NO_BUFFERING, FILE_FLAG_OVERLAPPED, FILE_FLAG_SEQUENTIAL_SCAN. Unbuffered, Overlapped, Random Files opened with FILE_FLAG_NO_BUFFERING, FILE_FLAG_OVERLAPPED, FILE_FLAG_RANDOM_ACCESS. Overlapped Files opened with FILE_FLAG_OVERLAPPED. Overlapped, Sequential Files opened with FILE_FLAG_OVERLAPPED, FILE_FLAG_SEQUENTIAL_SCAN Overlapped, Random Files opened with FILE_FLAG_OVERLAPPED, FILE_FLAG_RANDOM_ACCESS Mapped IO Test Mapped IO Test verifies if Memory Mapped IO can be performed with different combinations of the following cases. IO Types Normal, Unbuffered, Asynchronous, Asynchornous and Unbuffered. Page Protections Read Only, Copy on Write. Mapping Types Mapping with name,  Mapping without name. Mapping Access Types Read, Write, All Access, Copy on Write. EnumDir Test EnumDir Test verifies if the contents of the directories of the filesystem are enumerated properly. Full Path Names Verifies if the Full path names of the contents are correct. Short Path Names Verifies short path names. Full Path Names - Only Directories  Restricts enumeration to list only directories. Short Path Names - Only Directories Restricts enumeration to list only directories Multiple Full Path Names Multiple Short Path Names Multiple Full Path Names - Only Directories Multiple Short Path Names - Only Directories Variations 5-8 are multithreaded File ID Test GetFile ID Uses NtQueryInformationFile and retrieves InternalInformation.IndexNumber as the file ID. Open by File ID Verifies if NtCreateFile Correctly opens files given their file Ids. Open Invalid File ID Verifies if open fails if given a bad ID. File Info Test Tests the NtQueryInformationFile function with different parameters. Basic Info Calls NtQueryInformationFile   with FileBasicInformation Standard Info Calls NtQueryInformationFile   with FileStandardInformation Internal Info Calls NtQueryInformationFile   with FileInternalInformation Extended Attribute Information Calls NtQueryInformationFile   with FileEaInformation Access Information Calls NtQueryInformationFile   with FileAccessInformation Position Information Calls NtQueryInformationFile   with FilePositionInformation Mode Information Calls NtQueryInformationFile   with FileModeInformation. Alignment Information Calls NtQueryInformationFile   with FileAlignmentInformation. Alternate Name Information Calls NtQueryInformationFile   with FileAlternateNameInformation Asynchronous Position Information Calls NtQueryInformationFile   with FilePositionInformation. Asynchronous Set Position Information Calls NtSetInformationFile   with FilePositionNameInformation. FSCTL Test This test tests different FSCTLs relevant to the filesystem. Is Volume Dirty? Verifies FSCTL_IS_VOLUME_DIRTY Is Volume Mounted? Verifies FSCTL_IS_VOLUME_MOUNTED Is Pathname Valid? Verifies FSCTL_IS_PATHNAME_VALID Invalid FSCTL Verifies if FSCTL_SET_OBJECT_ID fails. Notification Test Find Change Notification Verifies FindFirstChangeNotification, FindNextChange Notification and FindCloseChangeNotification. Read Scatter Test This test verifies the NtReadFileScatter API in different conditions 1. Unbuffered, Overlapped Files opened with FILE_FLAG_NO_BUFFERING, FILE_FLAG_OVERLAPPED. Unbuffered, Overlapped, Sequential Files opened with FILE_FLAG_NO_BUFFERING, FILE_FLAG_OVERLAPPED, FILE_FLAG_SEQUENTIAL_SCAN. Unbuffered, Overlapped, Random Files opened with FILE_FLAG_NO_BUFFERING, FILE_FLAG_OVERLAPPED, FILE_FLAG_RANDOM_ACCESS. Overlapped Files opened with FILE_FLAG_OVERLAPPED. Overlapped, Sequential Files opened with FILE_FLAG_OVERLAPPED, FILE_FLAG_SEQUENTIAL_SCAN Overlapped, Random Files opened with FILE_FLAG_OVERLAPPED, FILE_FLAG_RANDOM_ACCESS Lock Test Verifies the Locking functionality of the filesystem. 1. Lock single byte Locks a single byte in a file. Lock single byte exclusive Locks a single byte with LOCKFILE_EXCLUSIVE_LOCK. Lock single byte shared Locks a single byte with shared access. Lock multiple bytes exclusive Locks a random set of bytes exclusively Lock multiple bytes shared Locks a random set of bytes shared. Volume IO Test Performs IO on the volume handle. Buffered IO with Sequential Access  Read operations are performed on the volume opened with FILE_FLAG_SEQUENTIAL_SCAN bit set. Buffered IO with Random Access Read operations are performed on the volume opened with FILE_FLAG_RANDOM_ACCESS bit set. Buffered IO , Normal Read operations are performed on the volume opened with FILE_ATTRIBUTE_NORMAL bit set. Unbuffered IO Read operations are performed on the volume opened with FILE_FLAG_NOBUFFERING bit set. Unbuffered  IO Overlapped Read operations are performed on the volume opened with FILE_FLAG_NOBUFFERING , FILE_FLAG_OVERLAPPED bits set. Unbuffered IO Overlapped Sequential Read operations are performed on the volume opened with FILE_FLAG_NOBUFFERING, FILE_FLAG_SEQUENTIAL_SCAN, FILE_FLAG_OVERLAPPED bits set. Unbuffered IO Overlapped Random Read operations are performed on the volume opened with FILE_FLAG_NOBUFFERING, FILE_FLAG_RANDOM_ACCESS, FILE_FLAG_OVERLAPPED bits set. Overlapped IO  Read operations are performed on the volume opened with FILE_FLAG_OVERLAPPED bit set. Overlapped IO Sequential Read operations are performed on the volume opened with FILE_FLAG_OVERLAPPED , FILE_FLAG_SEQUENTIAL_SCAN bits set. Overlapped IO Random Read operations are performed on the volume opened with FILE_FLAG_OVERLAPPED , FILE_FLAG_RANDOM_ACCESS bits set. UDF Standards Compliance Tests Sample disks with UDF filesystem will be created which contain files created to test the standards compliance of the UDFS driver.   Time Zone Test Description: For each defined time zone, a file shall be recorded with a timestamp referring to that time zone. All files will be recorded with the same absolute time for all time stamps. Location on disc: \TIME\TIME_ZONES File names: GMT_-2400.TXT GMT_-2330.TXT GMT_-2300.TXT GMT_-2200.TXT GMT_-2100.TXT GMT_-2000.TXT GMT_-1900.TXT GMT_-1800.TXT GMT_-1700.TXT GMT_-1600.TXT GMT_-1500.TXT GMT_-1400.TXT GMT_-1300.TXT GMT_-1230.TXT GMT_-1200.TXT GMT_-1130.TXT GMT_-1100.TXT GMT_-1000.TXT GMT_-1000.TXT GMT_-0900.TXT GMT_-0800.TXT GMT_-0700.TXT GMT_-0600.TXT GMT_-0500.TXT GMT_-0400.TXT GMT_-0300.TXT GMT_-0200.TXT GMT_-0100.TXT GMT_-0030.TXT GMT_-0015.TXT GMT_-0005.TXT GMT_-2047.TXT GMT_0.TXT GMT_+0005.TXT GMT_+0015.TXT GMT_+0030.TXT GMT_+0100.TXT GMT_+0200.TXT GMT_+0300.TXT GMT_+0400.TXT GMT_+0500.TXT GMT_+0600.TXT GMT_+0700.TXT GMT_+0800.TXT GMT_+0900.TXT GMT_+1000.TXT GMT_+1100.TXT GMT_+1130.TXT GMT_+1200.TXT GMT_+1230.TXT GMT_+1300.TXT GMT_+1400.TXT GMT_+1500.TXT GMT_+1600.TXT GMT_+1700.TXT GMT_+1800.TXT GMT_+1900.TXT GMT_+2000.TXT GMT_+2100.TXT GMT_+2200.TXT GMT_+2300.TXT GMT_+2330.TXT GMT_+2400.TXT References: Applicable ECMA 167 references: 1/7.3 Applicable UDF 2.0 references: 2.1.4.1 Rules: UDF requires that timestamps be recorded in local time.  The time zone offset is specified in minutes from coordinated universal time and the value is either  2047, which means that no offset is specified, or in the range (1440 to +1440 minutes.  This allows a range from  24 hours to +24 hours. Time zones West of Coordinated Universal Time have negative offsets. When adjusted for time zone, the files in this directory all have the same date and time of creation.  On systems that support time zones, all files should show the same creation and modification dates and times. On systems that do not support time zones, the times will be offset from the GMT_0.TXT time. The creation and modification times for each file (after adjustment for time zone) is: Year: 1998  Month: 8 Day: 7  Hour: 6 Minute:5  Second: 4 Centisecond: 3  Hundreds of microseconds: 2  Microseconds: 1 Date Stress Description: 21 files shall be recorded with timestamps in each decade beginning with decade starting in the year 1900 and ending with the decade starting in the year 2100. Location on disc(s): \TIME\DATES File names: "YEAR1900.TXT" "YEAR1911.TXT" "YEAR1922.TXT" "YEAR1933.TXT" "YEAR1944.TXT" "YEAR1955.TXT" "YEAR1966.TXT" "YEAR1977.TXT" "YEAR1988.TXT" "YEAR1999.TXT" "YEAR2000.TXT" "YEAR2010.TXT" "YEAR2021.TXT" "YEAR2032.TXT"  "FEB6YEAR2040.TXT" => maximum time for HFS "YEAR2054.TXT" "YEAR2065.TXT" "YEAR2076.TXT" "YEAR2087.TXT" "YEAR2098.TXT" "YEAR2109.TXT" References: Applicable ECMA 167 references: 1/7.3 Applicable UDF 2.0 references: 2.1.4 Rules: Implementations should display all timestamps to appropriate significance (as determined by OS requirements/limitations), or display an appropriate default or rounded timestamp as per the requirements and/or limitations of the OS.  All files should be accessible. Filename encoding Description: Six files shall be recorded using both 1-byte and 2-byte encoding of the filenames. Four files shall utilize non-roman character sets (e.g. Kanji).  One directory shall be recorded using 2-byte encoding using non-roman character sets (Kanji).  Location: \filenames\encoding File names: File Name Encoding File Name in hex SINGLE_BYTE.TXT 1-Byte #53, #49, #4E, #47, #4C, #5F, #42, #59, #54, #45, #2E, #54, #58, #54 DOUBLE_BYTE.TXT 2-Byte  (Roman) #0044, #004F, #0055, #0042, #004C, #0045, #005F, #0042, #0059, #0054, #0045, #002E, #0054, #0058, #0054 2-Byte  (Kanji) #30E6, #30CB, #30D0, #30FC, #30B5, #30EB, #30C7, #30A3, #30B9, #30AF, #898F, #5B9A, #002E, #0054, #0058, #0054 2-Byte  (Roman/Kanji) #0031, #65E5, #672C, #8A9E, #002E, #0054, #0058, #0054 2-Byte (Kanji) #3048, #002E, #0054, #0058, #0054 2-Byte (Kanji) #65E5, #672C, #8A9E, #540D, #002E, #0054, #0058, #0054 Directory 2-Byte  (Kanji) #65E5, #672C, #8A9E, #30C7, #30A3, #30EC, #30EC, #30AF, #30AF References: Applicable ECMA specification references: Applicable UDF specification reference: 2.1.1/4.2.2.1 Rules: Implementation shall support Unicode character set standard.  If the characters within a file name are considered invalid or not displayable in the current environment, implementation shall translate them into   (#005F) character.  Stressed Filenames Description: A number of files and directories shall be recorded whose filenames should stress the receiving system s ability to handle unusual filenames. Location:    \filename\stressed File names: Test  MS-DOS 8.3 Mangled name Comments 1.02: #C05 1.50: 4C05 2.00: C5AC 2.01: #U4A Directory 1.02: #C05 1.50: 4C05 2.00: C5AC 2.01: #U4A To be placed in previous directory 1.02: #9E4 1.50: 49E4 2.00: 25E9 2.01: #5VT Directory 1.02: #9E4 1.50: 49E4 2.00: 25E9 2.01: #5VT To be placed in previous directory .open me, please 1.02: #14A.OPE 1.50: 014A.OPE 2.00: 05CA.OPE 2.01: #0#6.OPE Directory .open me, too, please 1.02: #260.OPE 1.50: D260.OPE 2.00: C312.OPE 2.01: #TT0.OPE To be placed in previous directory File shall be marked as deleted COMPID08 Encoded with compression id of 8 COMPID16 Encoded with compression id of 16 Open_me1.txt Open_me2.text 1.02: OPEN#D4D.TEX 1.50: OPEN6D4D.TEX 2.00: OPEN96F1.TEX 2.01: OPEN#M@J.TEX  HYPERLINK mailto:Open@me3  Open@me3 Open:me4  Open me5 1.02: OPEN#B9C 1.50: OPEN8B9C 2.00: OPEN7E7A 2.01: OPEN#JAT First character is a blank Here is a null char >< 1.02: HERE#C15 1.50: HERE5C15 2.00: HEREA1D1 2.01: HERE#OQF Between the >< is a (invisible) 0 character \/silly*Name?. 1.02: VSIL#134 1.50: VSIL3134 2.00: VSIL8AA9 2.01: VSIL#L4W Directory 1.02: _#C81 1.50: _0C81 2.00: _8528 2.01: _#KBH 1.02: _#5A4 1.50: _C5A4 2.00: _E92D 2.01: _#ZK~ 1.02: _#BB6 1.50: _7BB6 2.00: _15AB 2.01: _#3CC Single underscore character Double underscore character Fold.t X 1.02: FOLD#EF1.TX 1.50: FOLDEEF1.TX 2.00: FOLD3D0E.TX 2.01: FOLD#9C9.TX Directory Character between t and X is a blank File1.longextension 1.02: FILE#232.LON 1.50: FILE4232.LON 2.00: FILE585C.LON 2.01: FILE#DIT.LON Many.ext1.ext2.ext3 1.02: MANY#C65.EXT 1.50: MANYDC65.EXT 2.00: MANY588E.EXT 2.01: MANY#DJ~.EXT DOS< > : " / \ |.chars 1.02: DOS_#93B.CHA 1.50: DOS_D93B.CHA 2.00: DOS_A4FF.CHA 2.01: DOS_#P59.CHA Disallowed characters in DOS file names References: Applicable ECMA 167 specification references:  Applicable UDF 2.0 specification reference: Rules: Except for test 8 (deleted file) all files and directories should be accessible and should be named in accordance with the identifier translation algorithms for the operating system on which the disc is read. Path Length Description: A number of directories shall be recorded in such a way that they shall create a directory path that reaches the limit of 1023 bytes. Location: \deeptree Path name: \deeptree\OSTA001\OSTA002\OSTA003\OSTA004\OSTA005\ .\OSTA125\OSTA126\EINDE References: Applicable ECMA spec reference(s):  none (that I could find) Applicable UDF spec references(s):  2 Rules: Implementations must be able to coherently handle directory path lengths that are longer than supported by the OS.  By "coherently handle", it is meant that the implementation not crash, or take any destructive action.   It is not required that directory paths longer than maximum OS supported length be accessible. Large Directory Description: A directory is recorded with 50000 files.  The file names are the ascii numbers from 1 through 50000.  The contents of each file is the name.  For instance the file named "34" is two bytes in length and those two bytes are ascii "3" and "4". Location: \filename\50Kfiles File names: 49999 50000 Rules: All 50000 files should be accessible and correctly readable. Large File Description : Two large file's shall be recorded whose size 2GB-1(xx byte size) and 16GB in total using unallocated and unrecorded space extents xe "extents" Location on disc(s) : /large_file Filenames : /large_file/2GB-1FILE /large_file/16GBFILE Notes : The first logical block of the file shall contain "START " followed by NULL The last logical block of the file shall contain " END" preceded by NULL All blocks in between are unrecorded and unallocated space. Though the file size is 64-bit, other restrictions apply limiting the practical size of the file. So it was decided that we would test a file larger than the 32-bit limit (4GB). References: Applicable ECMA spec reference(s) : 4/14.9.10 Rules: Implementations should be able to read the 16GBFILE file if the operating system supports files larger than 4GB. On operating systems that support files larger than 4GB the file should be completely readable and the data should be verified as written in the notes section. If the operating system does not support files larger than 4GB they should either ignore the file or read it till the maximum size possible under the operating system. 2GB-1 file is created to test implementations that only support a 32-bit maximum file size. The behaviour shall be similar to the 16GB file. Note: The 2GB-1 was created to support systems that are limited to 2GB file sizes. Multiple Descriptors Description: A disc shall be recorded with multiple instances of a descriptor in the Volume Descriptor Sequence. The prevailing descriptor shall be placed before an earlier one.  Discs: Multiple descriptor instances X in order  X dis-order References: ECMA 3-8.4.3 Rules: LVD: nor prevailing will identify a partition descriptor that also identifies a dummy partition. The is partition #5 otherwise it points to #2. PD:  2 PD both referencing the same partition: The non prevailing one has an incorrect starting block (starting block + 10) (partition #2) Multiple LVID descriptors Description: A disc shall be recorded with multiple Logical Volume Integrity Descriptor instances (open and closed) . Discs: Multiple LVID instances References: ECMA  3-10.10 Rules: LVD points to a extent of 1 block contains an open LVID that points to a second extent length 4 containing 3 LVID (closed, open, closed) followed by a terminating descriptor The number of files and folders in the first three will be 1&1. Only the last will contain the real number. The free space table indicates that all blocks in the volume are free for the first three LVID s. All other values should be compliant to spec 4096 Strategy Description: Read a subdirectory on the following discs of which a single file was recorded in strategy 4096. Location: /strategy_4096 File names: 4096_test1 References:       Applicable ISO spec reference(s): Section 14.6 - 14.8  Applicable ECMA spec reference(s): None ? Applicable UDF spec reference(s): Sections 2.3.5 and 6.6 (UDF 1.5 and 2.0).     Note: See ISO specification for an explanation of terms.       Rules: 1: FE+IE -> FE+TE  2: FE+IE -> FE+IE->TE 3: FE+IE -> FE+BLANK  4: FE+IE -> FE+IE->BLANK 1st FE points to  incorrect file 2nd FE points to  correct file Implementation should show correct file Partition Number Description: Partition Descriptor (and Partition Map Entry for type 1 part): use a nonzero partition number for the type 1 partition, to see if an implementation correctly makes the distinction between partition number and partition reference number. Location: VDS:Partition Descriptor and VDS:Logical Volume Descriptor Rules: VDS:Partition Descriptor 1:Partition Number VDS:LVD:Partition Map N:Partition Number Values for X  on specified discs are: D1: X=101.  D2: X=10007.  D3: X=107.  D4: X=10037.  D5: X=113.  D6: X=127.  D7: X=131. References: 2.2.4, 2.2.8, 2.2.9 ECMA: 3:10.5, 3:10.6 Notes: On discs D2, D4 and D7, Partition Descriptor 2 and Partition Map 2 describe the virtual partition. On disc D3, Partition Descriptor 2 and Partition Map 2 describe the sparable partition. Partition Descriptor 1 and Partition Map 1, describe the physical partition. VDS = Volume Descriptor Sequence. LVD = Logical Volume Descriptor. ID Compression Description: Names in FIDs: include some deleted FIDs that use Compression IDs 8, 16, 254 and 255, and some nondeleted FIDs that use compression Ids 8 and 16.  The deleted files shall be before the nondeleted files in the directory. Location: \filenames\deleted_files File names: CmpID_8 CmpID _16 CmpID _8_Deleted CmpID _16_ Deleted #00 #00 #00 #01 #00 #00 #00 #00 #00 #00 #00 #01 References: Applicable ECMA spec reference(s):  4/8.6, 4/14.4.3 note 21, 4/14.4.5 Applicable UDF spec references(s):  2.1.1, 2.3.4.2 Rules: The application shall display all the non-deleted files  names correctly, and shall not display any of the deleted files.  The contents of all non-deleted files shall be accessible. Logical Volume Identifier Description: A Logical Volume Identifier consisting of unusual/illegal characters like null, '/', '\', ":", Back Space (in the first 11 characters) and whose length is more than 27 characters shall be recorded in the Logical Volume Descriptor. Location on discs: Logical Volume Descriptor Name:  "OSTA\/:<null><Back Space>&Logical Volume Identifier" Please note that <null>, <Back Space> are single characters. Total length ofthe Identifier is 34 characters. References: Applicable ECMA spec reference(s):  Applicable UDF spec reference(s) :  4.1 Part 3 - Volume Structure 6.7 Identifier Translation Algorithm Rules: Implementations should display the Identifier correctly, after using the Identifier Translation Algorithm (UDF 1.50 , section 6.7) applicable to the relevant OS. Virtual & Non-virtual Space Description: Virtual Partition: have both ICBs and file data of both directories and files in both virtual and non-virtual space (using short allocation descriptors to verify that the right partition is referenced). Location on disc: \ICBs_in_space File names: Comments F_vFE_rlAD FE in VP, long AD, data in RP F_vFE_vlAD FE in VP, long AD, data in VP F_vFE_sAD FE in VP, short AD, data in VP F_rFE_rlAD FE in RP, long AD, data in RP F_rFE_vlAD FE in RP, long AD, data in VP F_rFE_sAD FE in RP, short AD, data in RP D_vFE_rlAD FE in VP, long AD, data in RP D_vFE_vlAD FE in VP, long AD, data in VP D_vFE_sAD FE in VP, short AD, data in VP D_rFE_rlAD FE in RP, long AD, data in RP D_rFE_vlAD FE in RP, long AD, data in VP D_rFE_sAD FE in RP, short AD, data in RP VP = Virtual Partition, RP = Real (Non-V) Partition Rules: Each directory contains a file called  In <X> , where X is the directory name, and the file content is always an ASCII text representing the file s name, data is embedded in the FE, and the FE is always in the RP. Sparing Description: Five files "Spared 1", "Spared 2", "Spared 3", "Spared 4" and "Spared 5" with sparing in various locations.  The files "Not Spared 1" to "Not Spared 5", have content identical to that of "Spared 1" to "Spared 5". Location:  /Spared files Rules: File "Spared 1" with 3 extents.   Extent1: From packet boundary to packet boundary.  Start at begin of Packet[D], continues in Packet[E], Packet[F] and Packet[G]. Packet[D] is spared inside the partition.  Packet[F] is spared outside the partition between the VRS and sector 256.  Packet[E] and Packet[G] are not spared. Length: 262144 bytes Extent2: Start and end not at Packet boundary.  Located over 2 Packets. Extent starts at 32nd sector of packet[B], ends with the first sector of Packet[C].  Packet[B] is spared inside the partition. Length: 4096 bytes Extent3: The last sector of Packet[A] followed by sector 1 of Packet[B] (spared). Length 2084 bytes Content: Each sector starts with a header that contains "/Spared files/Spared 1, Sector: n ".  Where n=1 in the first sector of the file, and n increments by one throughout the file. In sectors 1..32, 65..96, 129 and 132 (the spared sectors), the bytes after the header contain "s".  In sectors 33..64, 97..128, 130 and 131 (not spared sectors), the bytes after the header contain 20h. File "Spared 2" with one extent. Extent: Sectors 2..31 of Packet[B] (spared). Length: 59428 bytes. Content: Each sector starts with a header that contains "/Spared files/Spared 2, Sector: n ".  The bytes after the header contain "s".  Where n=1 in the first sector of the file, and n increments by one throughout the file. File "Spared 3" with one extent. Extent: Start and End at a Packet boundary. Sector 1 in Packet[H] to sector 32 in Packet[J].  Packet[H] and Packet[J] are spared, Packet[I] is not spared. Length: 196608 bytes. Content: Each sector starts with a header that contains "/Spared files/Spared 3, Sector: n ".  Where n=1 in the first sector of the file, and n increments by one throughout the file.  In sectors 1..32 and  65..96 (the spared sectors), the bytes after the header contain "s".  In sectors 33..64 (not spared sectors), the bytes after the header contain 20h. File "Spared 4" with one extent. Extent: Start and End spared, not at a Packet boundary. Sector 32 in Packet[K] to sector 1 in Packet[M].  Packet[K] and Packet[M] are spared, Packet[L] is not spared. Length: 69632 bytes. Content: Each sector starts with a header that contains "/Spared files/Spared 4, Sector: n ".  Where n=1 in the first sector of the file, and n increments by one throughout the file.  In sectors 1 and  34 (the spared sectors), the bytes after the header contain "s".  In sectors 2..33 (not spared sectors), the bytes after the header contain 20h. File "Spared 5" with one extent. Extent: Start and End not spared, not at a Packet boundary. Sector 32 in Packet[N] to sector 1 in Packet[P].  Packet[O] is spared, Packet[N] and Packet[P] are not spared. Length: 69632 bytes. Content: Each sector starts with a header that contains "/Spared files/Spared 5, Sector: n ".  Where n=1 in the first sector of the file, and n increments by one throughout the file.  In sectors 2..33 (the spared sectors), the bytes after the header contain "s".  In sectors 1 and 34 (not spared sectors), the bytes after the header contain 20h. File "Dummy". Extent1: Sectors 1..31 of Packet[A]. Length: 63488 bytes. Extent2: Sectors 2..32 of Packet[C]. Length: 61440 bytes. Content: Each starts with a header that contains "/Spared files/Dummy, Sector: n ".  The bytes after the header contain "x".  Where n=1 in the first sector of the file, and n increments by one throughout the file. File "Not Spared 1". Extent: No sparing. Length: 268324 bytes. Content: A copy of the content of file "Spared 1". File "Not Spared 2". Extent: No sparing. Length: 59428 bytes Content: A copy of the content of file "Spared 2". File "Not Spared 3". Extent: No sparing. Length: 196608 bytes Content: A copy of the content of file "Spared 3". File "Not Spared 4". Extent: No sparing. Length: 69632 bytes Content: A copy of the content of file "Spared 4". File "Not Spared 5" Extent: No sparing. Length: 69632 bytes Content: A copy of the content of file "Spared 5". Unallocated space The following sectors are Unallocated: Sectors 1..31 in spared Packet[S] Sectors 2..32 in spared Packet[M] Sectors 1..31 in not spared Packet[N] Sectors 2..32 in not spared Packet[P] Location of Packets Used is a contiguous sequence of Packets, indexed from A to P.  Packets B, D, H, J, K, M and O are spared inside the partition.  Packet[F] is spared outside the partition between the VRS and sector 256.  Packets A, C, E, G, I, L, N and P are not spared. Content on original location Each sector on the original location of the spared Packets starts with a header that contains "BAD sector P-N ", followed by bytes set to "b".  Where P is the letter, that identifies the Packet (A..G) and n is the sequence number (starting at one) of the sector in the Packet. References: UDF 2.2.9, UDF 2.2.11 and UDF 6.10.2. Implementation Use field in FID Description: Check that a file containing an implementation use field can be read by the implementation. There may be issue about very large implementation use field pushing other field over block boundaries. Disks: Location on disks: /implementation_use_field_in_FID Filename:  /implementation_use_field_in_FID/FID_BlockSpan /implementation_use_field_in_FID/FID_FOLLOWS_BlockSpan Rules: Applicable ECMA specification reference: 4/14.4 Applicable UDF specification reference: 2.3.4,2.3.4.4-5 s total size is a single block size. RegID is equal to that of the discs implementation ID The rest is padded with #00 This FID will be followed directly by the next file s FID The conforming system shall read the FID_BlockSpan file (whose FID is spanning blocks) correctly. File Types Description: The possible ICB tag file types are used.  After the 14 predefined types the entry names are ASCII 14 through 255. Location: \filetypes \filetypes\UDF2 File names: Unknown directory bytes blockdevice characterdevice socket symboliclink \UDF2\TYPE248 Rules: ICB Tag OSTA-2 Rev 2 section 4.2.1 File types ECMA 167 4/14.6.6 Unallocated ECMA 167 4/14.11 PIE ECMA 167 4/14.13 Indirect ECMA 167 4/14.7 Directory ECMA 167 4/8.6 Extended Attributes ECMA 167 4/9.1 Terminal Entry ECMA 167 4/14.8 Symbolic Link ECMA 167 4/8.7 Stream Directory ECMA 167 4/9.2 Minimal required operating system functionality is: All names are visible in the directory. Access to filetypes unsupported by the system shall be handled in a predictable manner*. *Predictable manner to be defined by UDF File Permissions Description: Permissions on directories and filenames for MS-DOS, OS/2, Windows 95, Windows NT, Macintosh, and UNIX: use OS neutral permissions to test a cross-platform compatibility and OS specific permissions to test an OS specific compatibility. Location: /PERM_OS  (OS specific files and directories) /PERM_NON (Non-OS specific files and directories) File names: PERM_NON Directory FileCharacteristics bits in the File Identifier Descriptor (3.3.1.1) shall be set to the followings: Value 0 or 1 Directories: for read only - Read & Execute are set. for read, write, and execute - Read, Write, Delete, & Execute are set. rwecd for read, write, execute, change attributes, and delete - All are set. note: Permission bits are the same for Owner, Group, and Other. Files:  All files listed bellow are in all three directories. r.txt for read only - Read is set. rwe.txt for read, write, and execute - Read, Write, Delete, & Execute are set. rwecd.txt for read, write, execute, change attributes, and delete - All are set. note: Permission bits are the same for Owner, Group, and Other. PERM_OS Directory A directory will be created for each specific OS:  for UNIX,  DOS_WIN for MS-DOS, OS/2, Windows 95, and Windows NT MacOS for Macintosh. The FileCharacteristics (3.3.2.1) bit in the File Identifier Descriptor (3.3.1.1) shall be set to ONE if it is supported by the specific OS.  Uid and Gid should be set to   if supported. Directories:  Repeat the four sets of the following directories for the three possible settings - Owner only, Owner & Group, and Owner, Group, & Other. for read only - Read is set. for read and execute - Read & Execute are set. for read, write, and execute - Read, Write, & Execute are set. rwecd for read, write, execute, change attributes, and delete - All are set. Files: Repeat the four sets of the following files for the three possible settings - Owner only, Owner & Group, and Owner, Group, & Other. All files listed bellow are in all three directories. r.txt for read only - Read is set. re.txt for read and execute - Read & Execute are set. rwe.txt for read, write, and execute - Read, Write, & Execute are set. rwecd.txt for read, write, execute, change attributes, and delete - All are set. Rules: PERM_NON A receiving implementation should follow the permissions specified in each file and directory. PERM_OS A receiving implementation should support all the permissions and  FileCharacteristics  (3.3.1.1) for its OS specific directories and files and should follow the guidelines specified in the UDF specification section 3.3.3.3 for other OS specific directories. Embedded Data Description: Embed file data and EAs into ICB (for both directories and data files). Location: /Embedded_data File names: EMBED.TXT Rules: The File s FID is embedded in the directory. The File s data is embedded in the ICB One must be able to correctly access the file. Unrecorded Extents Description: Use unrecorded extents xe "extents"  in the middle of a file, at the end of a file, and beyond the logical end of a file. Location: File names: Rules: The file shall consist of a single extent. The extent shall be marked as Allocated and Unrecorded. The actual data block shall have non 0 content. The information length shall also be non 0. When accessing the file the file must contain 0 bytes. Information Length Description: Have files with and without filetails. For files with filetail, have one that begins on a block boundary and one that does not begin on a block boundary. Do same for directories. logical length of the file /filelength/lg_eq_ad.txt will have the same value of it's length of AD. logical length of the file /filelength/lg_lt_ad.txt will be less than it's length of AD. Both files shall contain non-zero value. Location on discs: /filelength File names: /filelength/lglen_eq_adlen.txt /filelength/lglen_lt_adlen.txt References: Applicable ECMA spec reference(s) : 4:14.9.10, 4:12.1 Applicable UDF reference(s): ??? Rules: All implementation shall be able to read the above files from start to logical length. s that can distinguish between logical and physical length of a file shall report trhe correct physical length of both files. Allocation Descriptor Test Description :  Files shall be created in such a way that they use both short and long allocation descriptors. NOTE! ALL the Ads shall be part of the file body. Location :  Filenames : /AD/sad/first_continuation /AD/sad/last_continuation /AD/sad/middle_continuation /AD/sad/ads_with_zero_length /AD/sad/file_with_all_and_rec_desc /AD/sad/file_with_unall_and_unrec_desc /AD/sad/file_with_last_unall_and_unrec_desc /AD/sad/file_with_all_and_unrec_desc /AD/sad/file_with_last_all_and_unrec_desc /AD/sad/file_with_mult_cont_desc /AD/lad/first_continuation /AD/lad/last_continuation /AD/lad/middle_continuation /AD/lad/ads_with_zero_length /AD/lad/file_with_all_and_rec_desc /AD/lad/file_with_unall_and_unrec_desc /AD/lad/file_with_last_unall_and_unrec_desc /AD/lad/file_with_all_and_unrec_desc /AD/lad/file_with_last_all_and_unrec_desc /AD/lad/file_with_mult_cont_desc Notes : File in directory /AD/sad will use short allocation descriptors and in directory /AD/lad will use long allocation descriptors. Files in both /AD/sad and /AD/lad will have the same content. Each of the files shall contain the offset repeated after every 8-bytes. /AD/sad/first_continuation : /AD/lad/first_continuation : This file will have the first AD in the file_entry as a continuation descriptor. /AD/sad/last_continuation : /AD/lad/last_continuation : This file will have the file_entry filled with AD's and the last AD is a continuation descriptor. /AD/sad/middle_continuation : /AD/lad/middle_continuation : One of the middle AD's in the file_entry will be a continuation entry. /AD/sad/ads_with_zero_length : /AD/lad/ads_with_zero_length : The SAD file entry  will terminate the allocation descriptor with a zero length AD. The total length is longer than the termination length to stress that the terminator is processed. The  LAD file entry will have zero length. The file size should match the sum of the lengths of the AD's before the AD with zero length, but the "Length of Allocation Descriptors" should cover the AD with zero length. /AD/sad/file_with_all_and_rec_desc : /AD/lad/file_with_all_and_rec_desc : File will have AD's that are allocated and recorded. /AD/sad/file_with_unall_and_unrec_desc : /AD/lad/file_with_unall_and_unrec_desc : File will have unallocated and unrecorded AD's. /AD/sad/file_with_last_unall_and_unrec_desc : /AD/lad/file_with_last_unall_and_unrec_desc : Last AD in the file_entry is unallocated and unrecorded. /AD/sad/file_with_all_and_unrec_desc : /AD/lad/file_with_all_and_unrec_desc : All AD's will be allocated but unrecorded. The block's covered by the AD's shall have non-zero data. /AD/sad/file_with_last_all_and_unrec_desc : /AD/lad/file_with_last_all_and_unrec_desc : Last AD will be allocated but unrecorded. The block covered by this AD shall have non-zero data. /AD/sad/file_with_mult_cont_desc : /AD/lad/file_with_mult_cont_desc : File entry will have more than one continuation extents xe "extents" References: Applicable ECMA spec references : 4/12, 4/14.14.1, 4/14.14.2 Rules: Implementation must be able to read the files and compare the contents of the files with the same name in sad and lad directories. Zero Length Files       Description:  Test the possible conditions of zero length files.  Location on discs: /zero_len_files Filenames:  >>Allocation descriptor space length is 0 zero_sz1 zero_sz2 zero_sz3 >>Allocation descriptor length is >16 zero_sz4 zero_sz5 zero_sz6 References: Applicable ECMA spec reference(s): Sections 4/12.1, 4/14.5 and 4/14.14.  Applicable UDF spec reference(s): 2.1.3 (1.5, or 2.0) Note: See ISO specification for an explanation of terms.  Rules: Implementations shall be meet the following requirements: 1/4=embbedded file 2/5=spile specified by short AD 3/6=file is specified by long AD in all cases the information length is 0 each file should be read accessable      Extended Attributes (Mix) Description: Combine many of the EAs in several files, both embedded and in a external EA file, randomly including some FreeSpaceEAs. Location on discs: \EA_mix File names: Comments Many EAs, embedded Many EAs, external Mac Resource Fork, emb. might not fit on 512 sector disk Mac Resource Fork, ext. Rules: The first two files have one EA space each, with the same contents, once embedded, once in a EA file: File Times EA with Creation & Backup Date (UDF 1.5, 3.3.4.3) FreeEASpace (totalling 32 Bytes) (UDF 1.5, 3.3.4.5.1.1) DVD Copyright Information (UDF 1.5, 3.3.4.5.1.2) OS2EA + OS2EALength, contents tbd. (UDF 1.5, 3.3.4.5.3) MacFinderInfo (contents tbd.) Appl. Use EA (containing some informational text) Mac Resource Fork ...  files have two EAs, of which one, the MacFinderInfo (specifying the length of the Macintosh Resource Fork), is always embedded, and the other, a valid Macintosh Resource Fork, is located in either EA space (embedded or external). When embedded, the Resource Fork EA immediately follows the MacFinderInfo, when external, a FreeEASpace is put between the EA Header and the Resource Fork EA, filling up the first logical block, so that the Resource Fork EA starts on a block boundary. The Resource Fork EA size is rounded up to the logical block boundary. Extended Attributes (Implementation Use) Description: Put an Implementation Use Extended Attribute into both a directory and a file to make sure that readers ignore it. Location on discs: \EA_impuse File names: Comments D_HasImpUseEA Directory F_HasImpUseEA Located inside the previous directory. Rules: Both File Entries have an embedded EA space that consists only of a empty Implementation Use EA. The data of both file and directory is embedded in the FE. Extended Attributes (non-embedded small EA Description: Have some of the smaller EAs (that are normally embedded) put into the non-embedded EA space. Location on disc: \EA_small File names: Comments Small EAs #1 Set A in FE, Set B in EA File Small EAs #2 Set B in FE, Set A in EA File Rules: There s two sets of small EAs in each of the files: Set A: File Times EA with a creation date Appl. Use EA Set B: Mac Finder Info EA (data yet to be specified) Appl. Use EA (different content from the one in Set A) Extended Attributes (Mac Volume Info) Description: Add the Mac Volume Info EA to the root directory s EA space. Location on discs: ICB of Root Directory Rules: In the File Entry of the Root directory, includes the MacVolumeInfo EA (UDF 2.0: 3.3.4.5.4.1) into the FE s EA space with the following fields in the EA: Last Modification Date: ? (to be determined) Last Backup Date: ? (to be determined) Volume Finder Information: all zero bytes The modification time for each file is: Year: Month: Hour: Minute: Second: Centisecond: Hundreds of microseconds: Microseconds: The backup time for each file is: Year: Month: Hour: Minute: Second: Centisecond: Hundreds of microseconds: Microseconds: Hard links Description: Have several hard links to a file. Location: \hardlink File names: \hardlink\hardln1 \hardlink\dir1\hardln2 \hardlink\dir1\hardln3 \hardlink\dir1\hardln4 \hardlink\dir1\hardln5 \hardlink\dir2\hardln6 \hardlink\dir2\hardln7 Note: The files  hardln1 hardln2  and  hardln6  are hard linked. There content is "\hardlink\hardln1". The files  hardln3  and  hardln4  are hard linked. There content is "\hardlink\dir1\hardln3". The files  hardln5  and  hardln7  are hard linked. There content is "\hardlink\dir1\hardln5". References: ECMA 167 4/14.9.6 Rules: For all operating systems: Same file should have same content, length, timestamp and permissions. For operating systems who support hard linked files, the link counter should be correct: hardln1  should have a link count of 3 hardln3  should have a link count of 2 hardln5  should have a link count of 2 Directory boundary conditions Description:  Directories shall be created with size more than one logical block in size. And in each directory some parts of one file_id will cross logical block boundary. Location on discs: /directory_boundary   Filenames: /directory_boundary/tag_crossing (Not on DISC4, Sequential writing 2.0) /directory_boundary/iu_crossing /directory_boundary/fid_crossing /directory_boundary/tag_end_on_boundry /directory_boundary/iu_end_on_boundry crossing /directory_boundary/fid_end_on_boundry Notes : All the directories shall be more than one logical block. All logical blocks shall be recorded non continuously. tag_crossing - first word of the file_id's tag shall be in one logical block and the rest of the tag will be in the second logical block. iu_crossing - file_id shall be recorded with non-zero implementation use length. Part of implementation use will be in one logical block and the rest will be in other logical block. fid_crossing - Shall be recorded with part of the name of the file in one logical block and the rest will be in a different logical block. tag_end_on_boundary   Shall be recorded with a tag ending precisely on the last byte of boundary and at least one more FID that follows iu_end_on_boundary   Shall be recorded with a IU ending precisely on the last byte of boundary and at least one more FID that follows fid_end_on_boundary   Shall be recorded with a FID ending precisely on the last byte of boundary and at least one more FID that follows References: Applicable UDF spec reference(s) : 2.3.4, 2.3.4.4, 2.3.4.5 Applicable ECMA spec reference(s) :4:14.4 Rules: All implementations shall be able to read the above directories. Volume name Description: Volume name: use Unicode characters with unusual characters (e.g., backspace,  ) in the first 11 characters of the volume name which has more than 27 characters.  This is to test if a receiving system handles a volume name with Unicode and special characters correctly. Location on discs: D3 UDF 1.5 spared CD-RW Volume Names: All disks shall have the following volume names: Disk Number Volume Name OSTA_V1_D1 OSTA_V1_D2 /#0424h/:/[BS]\OSTA_V1_D3_TESTDISK OSTA_V1_D4 OSTA_V1_D5 OSTA_V1_D6 OSTA_V1_D7 Rules: If a receiving implementation does not support the characters used in the volume name, it should be able to translate the name into the OS supported characters and mount the volume. Note: All disks should have  *OSTA UDF Compliant  in the  DomainIdentifier  in the volume descriptor. Volume Recognition Sequence Description: An ISO 9660 descriptor is placed between the BEA01 and TEA01 descriptors in the volume recognition sequence. Discs: D4, D7 (ISO 9660 bridge discs) Location on Discs: Volume Recognition Sequence starting with the first byte of the first sector that begins after byte number 32767 of the volume recognition space. References: ECMA 167 Part 1:8.3 ISO 9660 6.7, 8.1, 8.3, 8.4 Rules: The volume recognition sequence for the bridge discs contains the ISO 9660 recognition sequence (primary and supplementary volume descriptors followed by an ISO 9660 volume descriptor set terminator).  The block following the ISO 9660 terminator will contain a BEA01 descriptor followed by an NSR02 (D7) / NSR03 (D4) descriptor, a copy of the of the ISO9660 primary volume descriptor, and the TEA01 terminating descriptor. Tag serial number Description:  Have FIDs with zero and matching the partition integrity descriptor.  Do for both files and directories. Location on discs: /tag_serial Filenames: /tag_serial/zero /tag_serial/zero/file /tag_serial/nonzero /tag_serial/nonzero/file Directory zero and the contained file shall be recorded with file entries whose descriptor tags record a tag serial number of zero. Directory nonzero and the contained file shall be recorded with file entries whose descriptor tags record a tag serial number of #4321. The prevailing partition integrity descriptor shall also be recorded with a descriptor tag recording a tag serial number of #4321. This serial number shall not be shared with any other partition integrity descriptor recorded for the volume. Both files shall be 64 bytes. All other files and directories on the disc are unspecified with respect to this test. References: ECMA167 Part 4:7.2.5 ECMA167 Part 4:14.13.1 Rules: All implementations shall be able to read the directories and files. File Entry CRC Description:  Have a descriptor with defective CRC, another one with bad checksum and then a valid descriptor. Location on discs: /crc_errors Filenames: /crc_errors/bad_crc /crc_errors/bad_cksm /crc_errors/good File bad_crc shall record a file entry whose descriptor tag records a descriptor CRC of #4321. This shall not be the valid CRC for the descriptor. All other values in the descriptor shall be valid. File bad_cksum shall record a file entry whose descriptor tag records a checksum of #21. This shall not be the valid checksum for the descriptor tag. All other values in the descriptor shall be valid. File good shall record a valid file entry. All three files shall be 64 bytes. References: ECMA167 Part 4:7.2.6 ECMA167 Part 4:7.2.5 Rules: All implementations shall fail to read  bad_crc  and  bad_cksum . All implementations shall read  Note: As mentioned in chapter 1, these test discs contain only correct and valid UDF with the exception of this case. Deliberately adding corrupt data however is the only way to ensure that a CRC failure will occur. Volume Descriptor CRC Description:  Have a descriptor with defective CRC, another one with bad checksum and then the valid descriptor.  Have the bad ones point to hyperspace. Location on disc: The volume descriptor sequences shall be recorded in the following order A Logical Volume Descriptor (3:10.6) recording a descriptor tag with a CRC field containing #4321. This shall not be the valid CRC for the descriptor, and all other fields shall be valid. The partition map for this Logical Volume Descriptor shall contain one type 1 partition map (3:10.7.2) recording a partition number of #4321. A Partition Descriptor (3:10.5) recording a descriptor tag with a checksum field containing #4321. This shall not be the valid checksum for the descriptor tag, and all other fields shall be valid. The partition number for this descriptor shall be #4321. The partition starting location shall be #80000000 and the partition length shall be #1000. Other specified and normal descriptors of the Volume Descriptor Sequence shall follow. Filenames: References: ECMA167 Part 3:7.2.6 ECMA167 Part 3:8.4 ECMA167 Part 3:7.2.3 Rules: All implementations shall mount and otherwise operate on this volume normally. Note: As mentioned in chapter 1, these test discs contain only correct and valid UDF with the exception of this case. Deliberately adding corrupt data however is the only way to ensure that a CRC failure will occur. Volume descriptor pointer Description:  Split the necessary volume descriptor into 2 pieces so that you have to travel to both. Location on discs: The volume descriptor sequence shall be recorded in the following order Sector 0: The Logical Volume Descriptor. Sector 1: A Volume Descriptor Pointer referring to the allocation starting at the physical sector corresponding to Sector 3 in this specification. Sector 2: A Terminating Descriptor (3:10.9). Note that although this sector contains a valid descriptor, it is not referred to by any structure   it should be considered unrecorded and unallocated space by any implementation, albeit not zeroes. Sector 3: This begins the remainder of the Volume Descriptor Sequence, which shall be recorded as otherwise specified. Filenames: References: ECMA167 Part 3:10.3 Rules: All implementations shall mount and otherwise operate on this volume normally. Implementation Use Description:  Implementation Use can not be smaller than 32 bytes.  Create some files with this size Implementation use field. Location on discs: Alldiscs/ Filenames: References: ECMA167 Part  4:14.4.7 Rules: Symbolic Links Description:  Symbolic link's shall be recorded referencing to a file and a directory and another Symbolic link. Location on disc(s):  /sym_link Filenames: /sym_link/dir - This is a regular directory /sym_link/dir/file - This is a regular file /sym_link/sym_link_to_dir - The symbolic link shall reference "dir" /sym_link/sym_link_to_file - The symbolic link shall reference "file" /sym_link/sym_link_to_sym_link - This is a symbolic link referencing the previous    symbolic link /sym_link/larg_sym_link_to_file - The symbolic link shall reference "file" Notes: /sym_link/sym_link_to_dir shall be a symbolic link to "dir". /sym_link/sym_link_to_file shall be a symbolic link to "file". /sym_link/sym_link_to_sym_link shall be a symbolic link to "sym_link_to_file". /sym_link/larg_sym_link_to_file shall be a symbolic link to "file" but the path name shall be longer than 512 bytes. All symbolic links shall be made with relative path names as absolute path name can change between operating systems and instances. The large symbolic links shall make several hops as following "../sym_link/" for 42 times followed by "file". Rules: Applicable ECMA spec reference(s):  ECMA 167 Part 4:14.6.6 UDF 4:4.2.1.1 All operating system which choose to support symbolic links shall reference the file referenced by the symbolic link and not the symbolic link for any   operations performed on the symbolic link or when requesting attributes of the original file. See test case xxxx for systems that do not support SymLinks UID and GID Description:  There will be several files with different UID and GID. Location on disc(s):  /u-gids Filenames: /u-gids/uid=00000000-gid=00000000 /u-gids/uid=00000FFF-gid=00000FFF /u-gids/uid=30000000-gid=30000000 /u-gids/uid=FFFFFFFF-gid=FFFFFFFF Notes: All files will have the same value for uid and gid as mentioned in the file name. If the operating system supports the concept of user/group id's and does not support the above user/group id's then it should use default user/group id. First three names are added to test operating systems with user/group id's smaller than 32-bit. The last name is added to test the user/group id supporting operating system to work properly with media from a operating system that does not support user/group id's. Standard and Extended File Entries Description: Mix Standard and Extended File Entries in one directory to make sure that UDF 2.0 compliant File Systems handle both structures.  Location on disc: \ExtdFEs File names: Comments Standard File Entry Extended File Entry Directory Standard File Entry 3of5\file_in_3of5 Standard File Entry Directory Extended File Entry 4of5\file_in_4of5 Standard File Entry Standard File Entry Rules: The main directory contains 3 files and 2 directories. Each of the two directories contains a simple file identifying its parent directory. A UDF 2.0 compliant File System shall be able to access all items without errors. File Content Testing File Content All files, unless otherwise specified, shall contain the following unique verifiable data. Each 512-byte block of a file will be structured as follows: struct FileRecord { Uint32 RecordNumber; /* Given 512 byte records, this is the record number (1-n) */ Uint8 LengthOfName; /* Length of the NameOnDisk field */ Uint8 NameOnDisk[]; /* The original file name as recorded on disc */ /* The record shall be padded with 0 to fill out the 512 bytes */ This type of file contents is intended to help a developer when they encounter a problem reading the file data. The actual file size will be dependent upon the purpose of a file and will be specified by the corresponding test associated with the file. File CRC Part of the verification test process will be to verify that an implementation can correctly read the contents of every file on the test disc. This is accomplished by the calculation of a 32-bit CRC on the file content. For each supported operating system (OS) there shall exist an OS specific subdirectory in the root directory of each test disc. The following file shall exist in each OS specific subdirectory. FILECRC.TXT This file shall contain a list of all files located on the test disc, as well as the CRC of each file. The fully qualified file names listed in this file shall be the file names as they appear to the user, after going through the OSTA name translation algorithm for the corresponding OS. The following is an example of what the FILECRC.TXT might contain for the Windows 9X operating system. /README.TXT , 0x7034A7D2 /Dates/DateFile1.txt , 0x0A39CB27 /AllocationDescriptors/Short/TestFile1 , 0x45F30D42 Note:  The filename shall include the pathname for the file. For every file on the test disc an implementation shall calculate the file s 32-bit CRC and compare it against the master CRC in the FILECRC.TXT file. If the CRC does not match, the implementation has failed to read the file successfully. Long File Names Description: Two files shall be recorded with file identifiers whose length shall be exactly 255 bytes in length with 8 bit unicode compression (254 characters). The two filenames shall differ only by the last character of each filename. Two files shall be recorded with file identifiers whose length shall be exactly 255 bytes in length with 16 bit unicode compression (127 characters). The two filenames shall differ only by the last character of each filename. Location on disc(s): \FILENAME\LONG File names: THIS_IS_A_LONG_8BIT_FILE_NAME _XXXXXX .XXXXX_1.DAT THIS_IS_A_LONG_8BIT _FILE_NAME_XXXXXX .XXXXX_2.DAT THIS_IS_A_LONG_16BIT_FILE_NAME _XXXXXX .XXXXX_1.DAT THIS_IS_A_LONG_16BIT _FILE_NAME_XXXXXX .XXXXX_2.DAT <<UNICODE_NON ROMAN_1>> (Use non standard characters (Euro) in both name and extension <<UNICODE_NONROMAN_2>> References: Applicable ECMA 167 references:   4:48.4.4 Applicable UDF 2.0 reference: 2.1.1, 6.7 Rules: The length of a file identifier is stored as a single byte.  This gives a maximum length of 255 bytes for the representation of a file identifier.  In UDF the identifier is stored as compressed unicode and the first byte is reserved for a compression id.  This leaves 254 bytes for the name itself.  If the compression id is 8, each character is stored as a single byte and the name can be 254 bytes long.  If the compression id is 16, each character is stored in two bytes and the name can be 127 characters long. All four files should be accessible and be displayed with different names in accordance with the identifier translation algorithms for the operating system on which the disc is read. Microsoft Confidential   Internal Use Only  FILENAME  CDFSTestplan.doc  AUTHOR  Arunvijay Page   PAGE   DATE  4/17/2000 Microsoft Confidential Internal Use Only Microsoft Corporation One Microsoft Way Redmond, WA  98052  EMBED Word.Picture.8   ?)_3} t{2cN t{2cn st{2cf st{2c:H st{2c st{2czH nOfL? st{1c 'K%F1G 'K%n` zOV>9 ^,ogc X)TMBe C>/|Ax 5x;N] 8VFWD f6x7~= ElL,ul ;"*cT t4OBS &Paf8Z 9*q^C eYiNiV rv]gY,o sv]gY, pv]gY, pv]gY,o =^gZk% _-S7C pv]gYct eOpv] =^gZk% ^v]gYm eOpv]gYm4 qv]gYm sv]gYm 7qv]gYmt pv]gYsd QKEVA QKEvC AKE\7 ,KE^@ ,KE>G rv]?Y sv]?Y sv]?Y sv]?Y Wpv]?Y ?qv]?Y 59[Q' ,!$Y!+ Fl;-f)  Z#SF+ k2.66 $tf],]} BV[OK t+YOn i<,<$l N--rV ,!$Y!+ 3>4.!M ivJ8I al'W_ >BoK/ t+9@n GO=k`) '_hkiCZ YL(`q! 1!_hKZ[ %8^3JY R@.0b dL+f% ,=-=r tG!SZ9 "(f%>cH)+c 3H{w: fReL3* %B1^' 3R$_h+ Z$,fK eFkc9ici+ 30G[r- !l02H 1!_hk NZL(`q2 bB>kK Z#KF+c t"C}: 5d<L` IFc^Fc zRKn #0 &k,je Vl/k$ HX(,  8+`1! v=m|6 c2k%[% 2:Z:a $-g+0 5l5[% 5l-[G r!9b\ (<s,y }n {- ` ^#] ,e)h` bX$,d 9l62x KdO[$, g:2yy ddF;{ 6> OY >{|>  3*@v}z)aI O2@v- AJ1vR j2*G{ LieB) 3J1&Yw 6/@v] ~Z!+b 8yXxH 2J0&Y $Hw#N Rh)be \7[n1 \g:iOsw= 7I"@2@ 2VNNb BVDN cV oHQ`HP X",Ee j %h3 VTc[P [SBb%b[X :(Yo"[( rN8/| 0WSBRX c/#Wq [`^i+ ]mjJ& /@ms5 qHetB8 !E=,A d9Y&<+,E5 5%$V" yNYIV 1lA6{ |%PBR o([?P~ BR!U!"1 BBb%*Pm cTA?A! &w)w*w n9wBi 1h.7` lMU>iM h-{`7 !9h-k 2/sh{6} VQ~%u u_J<.% $&~E| ?wtPG O@4?jo2 ;bL%Tw tY0^s ^|~,[ Fl~_l Kc=Si; p-Du% |NLvvV 6be'1S s;ye0 K|]J#4 oW|gTS kT/>_' U]VH| $>[}R@' t-#>o W]9O'~K R-#v? -#vOg I?v~[ T/>Ow <H13/' kth), <tSa2 a*C#a ;`9eV r}VkYO' A.*wz mty{#9v {U/>O' <=Wc8Sb g{9g\ 9_E'6o 3U/>O7 ;F6{3 }/K'gg {uY_9 Pl""K PcR"w s#chd\ Qk:#v xW.Au}C ys(93 yR|arq M5gl5 J[h~nJs *w(m%< a7siaNz/ *j`%< ouVg} OCK7F 787'y| _`?US? M^+w2 ?#-// 0Wc}(sC eZ~Ml\ 7zb^q_ .:b^f [nD5X> ]h$b^Qw ]D5X8 \Pq:+ RK]dib= C;"'B HIb^dQ DAda"?R Fvd^" SjpJ-N L|f>>7+' jpB-N !?22T 9nv,4 (4=Rb. ,gEZ)ei+CY ,c9+(e% -r~jG {^j>Ej[ { u<r? -rIj+ &UG-k V$6DK D^tQ" qzb,c Cjr(z5m (4%Zb. .gEZ)ei+C b%er( j*)ge uj~}j k1%,a :Q]'9 $J)cUli XQ"+mJlAb2 SjqJ]N%2 !b{#t u=ufy] (9>vqh\ XH1%,f) NtvF/ lfYk&3 L#'4J=F :muZM ZjYG] yTSE% %,eY(3 f0Kms 6vIj-5 bWquj zUj$# sIb1KX kXKmb] j9[]g xqbb|abB (1>m\|Ab,c [qIrD FnHnW _by\L `:9L# <ez/f ~VRE5 K{^]^ fa~h|| !09Tb> C>s)d s;wp'w 7-K,ai &J)k*K HT4UR n9j8M- iQb,c Kr}Q? *kTRa VS+.I zNb2S :/o57D e5OV_Z \TSY} <AMNP <IMOV %,b>s J.UrzTn Iu}J} f1"~i$ (J(L( yfdT$M^ kr#G% ;r~7rS =Z;,VU;8VY s'.rVg 4=N3S jpf]/zr' ,g5wn .W.yr* 7$30v_C? Ki8'6 {rx_> >7v}}v Bwzp;w qj9NM ":s1] j0Y=& CYPY[ !;a$Ydz> ?q`]JpP \748$2$ v~sqZ CVdh0 (fZP` $2$Xj/B Yj?CK /f4c(g u5y]/ iLaRp H]K(e ;kgdE >7_{}a z9A/' ]iagZ lfy.4 4}K%E 9i2,2 .f4c(g DGg_( _f'.W \,^gq; 5'9d3R ,b1K< UjQe. {',eIP 5fq5+Y ,d1KX vt%+Xfo ,f2#a: |m?C_ hJ)c, p==R- .NFdh ttV'.rv i6>8:R PFipDdtpx &'5Kv iNBYr b959=R 4s[a&+ + _?G @wO2_ T.ezQ w}7n;ulc+[ l5?Go s=7p#7q3=| RJ<[L )pn>yb Ry,KZ 29WSE% nS}VPF)S| Yv+K> Khcpu lYB1E i\gq: &\Gws{=7p qz1.8  wr|7;t1 9x$yK01yk0!y[0> `xrC0 d:S=SA {Bp$G (L(J(>D qUA[; PJY02 ]ioO: M\-+X <aEBm yU,u~ w95,c) $umpq .8;u{pfj} .uGpz ry84Y yqh]p rn$!S k@(34 n;uOhB0 3Tav* xY}^T \Amhv `N_0G #mkps 7\E{: ;%tvF H{9RMF 29WSE% z9K/gy vjp&gs yE_^il MwF75 uM]}v r8Q.m vjp&gc sbNpn n~ zL S9%zl ;7r3==s rzHn#
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\filesystem\docs\Devhandle_filehandle_testplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Test plan for Removable Media TitleTest plan for Removable Media ilia kossev Normal.dot Josh Poley Microsoft Word 9.0bjbjU Test plan for Win32 APIs, receiving file handle(s) as argument Revision history Create: Oct 15th, 1998.  ILIA KOSEV (iliak) File locations Test Plan: \plans\ntbaset\io\unexpected_dev_handles.doc Test sources (common): ??????????????????? Overview Many of Win32 APIs require a handle to a file. They don t support handles to a device, but according to bugs 6919 and 6920 instead of gracefully returning an error   they crash. The purpose of this test is to discover all APIs with file handle as   parameter and to test them with device handles, handles to COM ports, thread handles and so on. Here is the list of APIs currently tested: CreateFile (use hTemplate) CreateFileMapping FlushFileBuffers FlushViewOfFile GetFileInformationByHandle GetFileSize GetFileType GetOverlappedResult MapViewOfFile ReadFile SetEndOfFile SetFilePointer SetFileTime UnmapViewOfFile WriteFile List of the handles provided to above APIs Device handle Handle to COM port Handle to LPT port Thread handle Pipe handle Test cases Enumerate all strange handles Enumerate all APIs Try every API with every handle
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\filesystem\docs\notes.doc ===
Microsoft Word Document MSWordDoc Word.Document.8microsoft Tunnel Testing  Code Notes TitleTunnel Testing  Code Notes benjamin leis Normal.dot Josh Poley Microsoft Word 9.0@\\red-prn-15\CORP0126 USA/REDMOND/REDW-C/FLOOR1/NEAR 1258 Ne00: winspool HP LaserJet 8100 Series PS \\red-prn-15\CORP0126 USA/REDMO Letter \\red-prn-15\CORP0126 USA/REDMO LetterbjbjU Tunnel Testing  Code Notes Benjamin Leis 11/29/95 Tunneling is the  means by  which a file s state is transferred  when a program updates it. Since most programs update files by  replacing the original file with a new one the system must maintain this state in between the disappearance of the original file and the appearance of  the new one.  This disappearance can occur either  by the renaming or deletion of  the file. Likewise, reappearance occurs either from  the renaming or creation of the new file.   In the original  FAT system dirnodes were left untouched after deletion so if no other file  had taken the dirnode  in the directory when the file reappeared it would be given back its original dirnode and state (limited in this case to the filetime stamps) would be preserved.  The tunnel cache implements  this behavior on the FastFat and NTFS  file systems.  The cache stores the primary name and the alternative name that must be restored later, the  directory to which it belongs, and some opaque data Hooks into the filesystem are called upon the appearance or disappearance of names within a directory. At that time the tunnel cache is searched for hits and cleaned of timed out entries.   If the a name reappears  and a hit is found then  the cached data is restored.  File state on these systems includes the filetime stamps and also the alternate short name for long file names.  This behavior must  occur in between a specified time frame which by default is 15 seconds. Also  tunneling is a directory specific operation.   If a file disappears in one directory and reappears in another, no tunneling occurs.  Tunnel testing basically involves Creating files, making them disappear in various ways and then having them reappear and verifying the filenames and creation times are still correct. Note: See the test plan for a more detailed description of tunnelling and what scenarios are being tested Class Hierarchy CExceptThrower   CStore     CState    CfileObj   CFileState CTunneler    CExceptThrower   CSrc CRemoteSrc CLocalSrc Description CExceptThrower This class encapsulates structured exception handling. All other class are considered to be exception-throwers  and thus are descended from it.  Provisions are included for Logging an error, catching an error,  catching an error and rethrowing it, and printing an error.  In addition the constructor s arguments control whether exceptions are used at all or instead if messages are printed and a FALSE status returned.  The exceptions return back info including the class and member function that threw it, the call that caused the problem, the LastError  and any additional parameters specified. CStore  This class implements the abstract interface for a store.  A store is any presistent object that can contain data.  Stores can be created, moved, copied, written to, deleted etc.  This class is coupled to CState since every CStore is meant to contain a CState. This allows easy verification. You ask a store for its state and later on can ask the store to verify itself against an old state. CState  This class implements the abstact interface for a state.  A state holds any state information of a store that is needed for verfication. Ex: In tunnel testing the state contains the file s names, and creation time.  States can only print themselves and verify themselves against another state. Different levels of verification can be specified.  Note: only CStores  can create states. CSrc  This Class implements the abstract interface for source.  A source is a persistent object that can contain a CStore.   Ex:  a directory contains a file.   Sources are created, return  back their name, and are destroyed, CFileObj This encapsulates the interface to a direct file.   CRemoteSrc  A remote source is either a drive or UNC location. Creation in this case only means verifying the source exists and connecting to it if necessary. CLocalSrc  A local source is a directory which is created and deleted. CTunneler The tunneler class acts as a bridge between  the  vocabulary of stores and the  vocabulary of tunnel testing. Instead of moving a file,  you tell a tunneler to make the file disappear. It handles how to do this and saving any state information. Inside the tunneler are several stores, and states.  The tunneler s methods are meant to be called sequentially and a separate tunneler has to be made for each scenario.  The typical use will be a sequence like, Create a store, Clone the store, have the store Disappear, have the store Reappear, and Verify the store s state.  The tunneler also has several member mutexes to corrdinate in multithreaded situations.  Program Structure The  main module tnltest.cxx follows the following control flow.  First the ntlog  is setup. Then, the sanity tests are run. These directly manipulate CFileObj and make sure moving the files around correctly transfers the filetimes. Then the heart of the program tnltest is called with  a list of scenarios several times.  According to the flags for each scenario, tnltest creates a tunneler and invokes the particular scenario. Finally, the multithreaded tunnelling situations are run. These involve an extra  level of functions around tnltest which basically set the static members of ctunneler  (these setup mutexes etc.) so it can coordinate the threads and calls n threads running tnltest.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\filesystem\docs\pinpoint_fat_corruption_testplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Test plan for Pinpoint FAT corruption TitleTest plan for Pinpoint FAT corruption ilia kossev Normal.dot Josh Poley Microsoft Word 9.0W_h[U wnz{N 6o?gp i#F>` I\#\SpbjbjU Test plan for pinpoint FAT/FAT32 corruption Revision history Jan 4th, 1999, ILIA KOSSEV (iliak)   Created Dec 20th, 1999, ILIA KOSSEV (iliak)   Changed the location of sources and added/deleted some specific corruptions. File locations Test Plan: \nttest\base\filesystem\plans\pinpoint_fat_corruption_testplan.doc Test sources (common): \nttest\base\filesystem\Utilities\chkdsk_corrupt_fat\* Related test plan (NTFS): \nttest\base\filesystem\Utilities\chkdsk_corrupt_ntfs\chkdsk_plan.doc Related test sources (NTFS): \nttest\base\filesystem\Utilities\chkdsk_corrupt_ntfs\* Overview The current approach for testing chkdsk utility is to randomly corrupt a volume using simbad.sys driver, which randomly drops write operation during regular disk activity. But we wish not to depend of such random corruption and to have some definitive way of corrupting the tested volume in order to ensure all new additions to chkdsk don t break its old functionality. BenL created pinpoint corruption test for NTFS volumes. The goal in front of this test plan is to do the same for FAT/FAT32 volumes. Some FAT background About boot sector (for FAT32) Offset (byte) Size (bytes) Description jmpBoot jmp instruction to   code OEMName MSWIN4.1 bytes per sector Count of bytes per sector.  sectors per cluster Number of sectors per allocation unit. reserved sectors Number of reserved sectors after the extended boot record plus the size of the boot record and extended boot record.  Usually 32, but NOT always. number of FATs Reserved Entries Reserved (this field used to contain the number of root directory entries). Must be zero (this is the old bsSectors field).  media descriptor 0xF8  sectors per FAT Must be zero to indicate the BPB represents a FAT32 BPB . System will not boot if this field is zero and the count of clusters is < 65527. sectors per Track Sectors per track for interrupt 13h count of heads Number of heads for interrupt 13h count of hidden sectors Hidden sectors in partition so boot loader can do int 13h. count of sectors  Total number of sectors for all data structures and data for this drive. Big sectors per FAT DWORD count of sectors in a single file allocation table (FAT). Extended flags Bits 0-3               -- zero based number of active FAT,     only valid if mirroring is disabled Bits 4-6 -- reserved. Bit      7 -- zero means the FAT is mirrored     at runtime into all FATs. -- one means only one FAT is active,     it is the one referenced in bits 0-3. Bits 8-15  -- reserved. FS version High byte is major revision number. Low byte is minor revision number.  This document defines the version to 0:0.  If this field is non-zero, back-level Windows versions will not mount the volume. Note:  Disk Utilities should respect this field and not operate on volumes with a higher major or minor version number than that for which they were designed. First Cluster of Root Cluster number of the first cluster of the root directory, usually 2.  Note:  Disk Utilities that change the location of the root directory should make every effort to place the first cluster of the root directory in the first non-bad cluster on the drive (i.e. in cluster 2, unless it s marked bad).   FS info sector number Sector number of FS info structure. Usually 1.  Note that there will be a copy of the FSINFO structure in BackupBoot, but only the copy pointed to by this field will be kept up to date - i.e. both the primary and backup boot record will point to the same FSINFO sector. Backup Boot Record sector number. If non zero, indicates the sector number of a copy of the boot record. Usually 6. Reserved Reserved for future expansion. Drive Number Int 13h drive number (e.g. 80h). Reserved1 Reserved (used by Windows NT). Boot signature Extended boot signature (29h). Volume ID Volume serial number Volume label Volume label File System type FAT32    About directory entries For purposes of differentiating them from "long" directory entries, the familiar conventional MS-DOS directory entry is referred to as a "short" directory entry.  The structure of a FAT file system directory entry llows.  DIR_ENTRY STRUC dir_name db 11 DUP ; 8.3-style name stored in OEM character set dir_attr ; Attributes dir_OS ; Reserved for OS specific use dir_CreateMsec ; Creation millisec - # of 10 millisec intervals in 2 sec create time dir_CreateTime ; Creation time (DOS time format hrs/min/sec - 2 sec granularity) dir_CreateDate ; Creation date (DOS date format) dir_LastAccessDate ; Last accessed date dir_EAhandle ; Extended Attribute handle (zero for MS-DOS/Windows) dir_ModifyTime ; Last modified time dir_ModifyDate ; Last modified date dir_first_cluster ; First cluster in file's cluster chain dir_size ; Size of file in bytes DIR_ENTRY Note that the addition of a "last access date" and "creation date/time" field is new with Chicago.  The "OS field" is reserved. Currently NT uses a couple of bits in the first directory entry in the root as volume dirty bits.  It also uses a couple of other bits for flagging an optimized directory entry.  Usage of these bits by an OS should cause no functional difference between OSes. The EAhandle field is not used by MS-DOS or Windows, but is an artifact of additions that were made to the FAT file system to support other operating systems. All short directory entries, whether they designate volume labels, directories, or files, have an identical structure.  The attribute field within this structure differentiates volume-labels, directories, and files from one another.  Bits 4-3 within the attribute field contain bit flags that are used for differentiating directory entries from one another.  The following values for bits 4-3 indicate the type of file system object that the directory entry designates. ;            Bit 4       Bit 3 A_VOL A_DIR A_FILE Note that a combination resulting in an attribute value of 18h is missing.  This combination would specify an entry that was both a volume-label and a directory, which would be contradictory.  Suppose one were to set these bits in an existing directory entry "manually" via a disk editor, since there is no way to do this with a MS-DOS API, and subsequently use a MS-DOS disk utility on a disk so modified.  What would occur?  Depending on the disk utility, file-system-specific information, like a cluster chain, or file data is usually destroyed by the utility.  This is because such an object is not "valid" as far as some disk utilities are concerned and they will take steps to "fix" the problem. The following values for bits 5 and 2-0 indicate miscellaneous attributes that a directory entry may also possess.  The MS-DOS APIs: Get/SetAttribute allow any or all of these attributes to be changed. A_RD_ONLY ; Read-only file/directory flag. A_HID ; Hidden flag A_SYS ; System flag A_ARC ; Archive flag There is an exception to this rule: a volume-label cannot have system, hidden, and read-only attributes associated with it.  There is no MS-DOS API that allows an application to create or modify the attributes of a volume-label, such that the system, hidden, and read-only attribute bits are set.  When searching for a volume label, any short directory entry that has a volume label attribute and appears anywhere other than the root directory, is ignored by MS-DOS.  These properties are used in conjunction with long directory entries. Depending on the file system object, some of the fields in a directory entry are not relevant.  For example, a volume-label has neither a "first cluster" nor "file size" (i.e. the dir_first_cluster and dir_file_size fields are set to zero).  A directory has no "file size" (i.e. the dir_file_size field is set to zero) but does have a "first cluster". In order to meet the goals of locality-of-access and transparency, the long directory entry is defined as a short directory entry with a special attribute.  A long directory entry is a directory entry in which the attribute field has a value of: A_LONG ; Same as (A_RD_ONLY | A_HID | A_SYS | A_VOL) A mask for determining whether an entry is a long-name sub-component should also be defined: A_LONG_MASK ; Same as (A_RD_ONLY | A_HID | A_SYS | A_VOL | A_DIR | A_ARC) When such a directory entry is encountered it is given special treatment by the file system.  It is treated as part of a set of directory entries that are associated with a single short directory entry. A directory entry, which has an attribute of A_LONG, has a structure, which differs substantially from a conventional short directory entry. The structure of a long directory entry containing components of a long name follows.  LONGNAME_ENTRY STRUC ldir_ord ; The order of this entry in the sequence of long dir entries  ; associated with the short dir entry at the end of the long dir set. ldir_name1 db 10 dup ; Characters 1-5 of the long-name sub-component in this dir entry. ldir_attr ; Attributes - must be A_LONG. ldir_type ; If zero, indicates a directory entry which is a sub-component of a ; long name.  NOTE: Other values reserved for future extensions. ; Non-zero implies other dirent types. ldir_chksum ; Checksum of name in the short dir entry at the end of the long dir set. ldir_name2 db 12 dup ; Characters 6-11 of the long-name sub-component in this dir entry. ldir_first_clust ; Must be ZERO. This is an artifact of the FAT "first cluster" and must be  ; zero for compatibility with existing disk utilities.  It's meaningless in the  ; context of a long dir entry. ldir_name3 db 4  dup (?) ; Characters 12-13 of the long-name sub-component in this dir entry. LONGNAME_ENTRY Flags used in the ldir_ord field: LAST_LONG_ENTRY equ   01000000b ; Indicates the last long dir entry in a set of long dir entries.  Used to  ; determine if a set of long dir entries has been truncated by a disk utility. A set of long entries is always associated with a short entry, which they always immediately precede.  Long entries are paired with short entries for one reason: only short directory entries are visible to previous versions of MS-DOS/Windows.  Without a short entry to accompany it, a long directory entry would be completely invisible on previous versions of MS-DOS/Windows.  A long entry never legally exists all by itself.  If long entries are found without being paired with a valid short entry, they are termed orphans.  Figure 4 depicts a set of n long directory entries associated with its single short entry. Long entries always immediately precede and are physically contiguous with, the short entry they are associated with.  The file system makes a few other checks to ensure that a set of long entries is actually associated with a short entry. First, every member of a set of long entries is uniquely numbered and the last member of the set is or'd with a flag indicating that it is, in fact, the last member of the set.  The ldir_ord field is used to make this determination.  The first member of a set has an ldir_ord value of one.  The nth long member of the set has a value of (n OR LAST_LONG_ENTRY).  Note that the ldir_ord field cannot have values of 0xE5 or 0x00.  These values have always been used by the file system to indicate a "free" directory entry, or the "last" directory entry in a cluster.  Values for ldir_ord do not take on these two values over their range.  Values for ldir_ord must run from 1 to (n OR LAST_LONG_ENTRY).  If they do not, the long entries are assumed to be "damaged" and are treated as orphans by the file system. Second, an 8-bit checksum is computed on the name contained in the short directory entry at the time the short and long directory entries are created.  All 11 characters of the name in the short entry are used in the checksum calculation.  The check sum is placed in every long entry.  If any of the check sums in the set of long entries do not agree with the computed checksum of the name contained in the short entry, then the long entries are treated as orphans.  This can occur if a disk containing long and short entries is taken to a previous version of MS-DOS/Windows and only the short name of a file or directory with long entries is renamed. A long name can consist of more characters than can fit in a single long directory entry.  When this occurs the name is stored in more than one long entry.  In any event, the name fields themselves within the long entries are disjoint.  The following example is provided to illustrate how a long name is stored across several long directory entries.  Names are also NUL terminated and padded with 0xFFFF characters in order to detect corruption of long name fields by errant disk utilities.  A name that fits exactly in a long directory entries (i.e. is an integer multiple of 13) is not NUL terminated and not padded with 0xFFFFs. Suppose a file is created with the name: "The quick brown.fox".  The following example illustrates how the name is packed into long and short directory entries.  Most fields in the directory entries are also filled in as well. About FAT entries The File Allocation Table is a packed list of  12/16/32-bit entries which have a one-for-one mapping with the data clusters.   Each entry is defined as (for 32bit case): Bit Offset  Size (bits) Description cluster value 0x00000000 unallocated cluster 0x00000001 invalid value  0x00000002 - 0x0FFFFFF7 allocated cluster in chain 0x0FFFFFF7 bad cluster mark (but only if not part of a cluster chain or not a legal cluster number.  NOTE:  this means this can be a valid cluster number in a cluster chain!) 0x0FFFFFF8 - 0x0FFFFFFF end of File Reserved Reserved for future use. Plan for corrupting system data Corruption for FAT boot sector It will not be covered under this plan. Explicit corruption for FAT dir entries (short file name)   fix expected Name & extension Invalid characters: + , ; = [ ] <space> ? *   < > .(but not as first character); Two equal file names, including extension;  (producing illeagal entry in root dir or duplicate one in sub dir); (producing illeagal entry in root dir or duplicate one in sub dir); File name including lower case characters; Attributes Create 2 entries with A_VOL attribute (volume name) in root directory; Create 2 entries with A_VOL attribute (volume name) in sub directory; Change one entry in the root to invalid combination: A_VOL | A_DIR (0x18); Change one entry in any subdir to invalid combination: A_VOL | A_DIR (0x18); Reserved-OS No corruption will be applied. Reserved-Creation time ms (# of 10msec intervals in every 2 sec) Invalid - 200; Invalid - 255; Reserved-Creation time Hours Invalid - 24; Invalid - 31; Minutes Invalid - 60; Invalid - 63; Seconds   (on 2 sec intervals) Invalid - 30; Invalid - 31; Reserved-Creation date Invalid - 120; Invalid - 127; Month Invalid - 13; Invalid - 15; Invalid dates; (in combination with month/year, eg. 2/29/99) Date in the future; Reserved-Last access date Invalid - 120; Invalid - 127; Month Invalid - 13; Invalid - 15; Invalid dates (in combination of month and year, eg. 2/29/99); Date in the future;  (Last access date < Creation date); Reserved-EA handle No corruption will be applied. Last modified time Hours Invalid - 24; Invalid - 31; Minutes Invalid - 60; Invalid - 63; Seconds   (on 2 sec intervals) Invalid - 30; Invalid - 31; Last modified date Invalid - 120; Invalid - 127; Month Invalid - 13; Invalid - 15; Invalid dates; Last modified date < Create date; Last modified date < Last access date; Date in the future; First cluster (N   # of all clusters on that volume) Invalid  Invalid  File length Entry for directory != 0; Entry for file Len/cluster size != FAT chain len; FAT32: (on disk 5+GB in size) Create file with size 4GB-1byte; (chkdsk /f must fix the entry to correct size   4GB-1cluster, NOT TO 0); FAT32: (on disk 5+GB in size) Create file chain with size 4GB+1cluster; Explicit corruption for FAT dir entries (long file name only)   fix expected (Note: files with long names must have at least 30 chars in their names = 4 short dir entries) ldir_ord   maximum # is N change (inc/dec) last ldir_ord by random number; to have 2 equal values (0x1, 0x2, 0x2, 0x43) to have any missing number in chain, describing long names - (e.g. 0x1, 0x3, 0x4, 0x45); delete value showing end in the chain, describing long names (e.g. 0x1, 0x2, 0x3, 0x4); ldir_name1 No corruption applied. ldir_attr Invalid   anything != A_LONG; ldir_type Invalid   anything != 0; ldir_chksum incorrect chksum; ldir_name2 No corruption applied. ldir_firstclust Invalid   anything != 0; ldir_name3 No corruption applied. Explicit corruption for FAT allocation entries   fix expected Media descriptor byte is valid, but != current one; Media descriptor byte is invalid; FAT32 only: Upper 4 bits of FAT entries are randomly masked with  Note by DanLo: For each 32bit FAT index entry > 1, the upper 4 bits are reserved and must be ignored by FAT32 implementations. Our code has not and this has just been exposed by a volume someone showed us. I'm working to find out what may have flipped those bits around, but this points out that we need internal regression testing for this.  Invalid allocation chains (these corruptions will be applied both on file chains for existing files and for  orphaned chains  in free space) Single start chains (cross links are inside the same link) Simple orphan chain; Boundary case   10001 orphan chains (chkdsk fixes them to file0000.chk, but we have only 4 digits there to represent 9999 fixed files) Round-cycled chain (last entry points to the beginning); End looped (last entry points to itself); End linked (last entry points into any entry of other file); Multiple crossed link chains (2 or more chains are crossed) without cycles (many beginnings, one end); the end points in the common part; the end points exactly in the junction point; the end points in one of the beginnings; PAGE   PAGE
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\filesystem\docs\scalability_testplan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Disk Characteristics: Title _PID_HLINKSDisk Characteristics: anandn Normal.dot Josh Poley Microsoft Word 9.0GPJD@( ^Gy#V- <btZF :FDO9 '2zjX XlX{]) "=yS3 !L]Uc "OnE$ =53uhjFZ{ aA1,) m0~4p Beh!X b,vq# N gCS cgR7/ U={sKH mFYcW Lxl6} &vKcWMicrosoft Word Picture MSWordDoc Word.Picture.8Title _PID_GUIDJim Gray Normal.dot Jim Gray Microsoft Word 8.0hcDadEncarta Map Server 2.3 TB  Database TerraServer ServerbjbjU NT File I/O Scalability Test Plan Revision History: 9th Sep 98  AnandN Original Document  Contents  TOC \o "1-3"  NT File I/O Scalability Test Plan  PAGEREF _Toc433005720 \h  Introduction  PAGEREF _Toc433005721 \h  Large file system tests  PAGEREF _Toc433005722 \h  Basic tests on a large file  PAGEREF _Toc433005723 \h  File Size Limits  PAGEREF _Toc433005724 \h  Limit on number of files or directories  PAGEREF _Toc433005725 \h  Distribution of Files on real world servers  PAGEREF _Toc433005726 \h  TerraServer  PAGEREF _Toc433005727 \h  File I/O pattern on real world servers  PAGEREF _Toc433005728 \h  Internet Information Server (IIS)  PAGEREF _Toc433005729 \h  Proxy Server  PAGEREF _Toc433005730 \h  SQL Servers  PAGEREF _Toc433005731 \h  Exchange Servers  PAGEREF _Toc433005732 \h  Multimedia Servers  PAGEREF _Toc433005733 \h  Fragmentation  PAGEREF _Toc433005734 \h  API Tests  PAGEREF _Toc433005735 \h  CopyFile  PAGEREF _Toc433005736 \h  Copy FileA to FileB  PAGEREF _Toc433005737 \h  CopyFileEx  PAGEREF _Toc433005738 \h  CopyProgressRoutine  PAGEREF _Toc433005739 \h  DeleteFile  PAGEREF _Toc433005740 \h  FindFirstChangeNotification / FindNextchangeNotification  PAGEREF _Toc433005741 \h  FindFirstFile / FindNextFile  PAGEREF _Toc433005742 \h  GetCurrentDirectory  PAGEREF _Toc433005743 \h  GetDiskFreeSpace / GetDiskFreeSpaceEx  PAGEREF _Toc433005744 \h  GetFileAttributes / GetFileAttributesEx  PAGEREF _Toc433005745 \h  GetFileInformationByHandle  PAGEREF _Toc433005746 \h  GetFileSize  PAGEREF _Toc433005747 \h  GetFileType  PAGEREF _Toc433005748 \h  GetFullPathName / GetLongPathName / GetShortPathName  PAGEREF _Toc433005749 \h  GetTempFileName  PAGEREF _Toc433005750 \h  GetTempPath  PAGEREF _Toc433005751 \h  LockFile(Ex) / UnLockFile(Ex)  PAGEREF _Toc433005752 \h  MoveFile / MoveFileEx  PAGEREF _Toc433005753 \h  ReadDirectoryChangesW  PAGEREF _Toc433005754 \h  ReadFile(Ex) / ReadFileGather  PAGEREF _Toc433005755 \h  ReadFileVlm  PAGEREF _Toc433005756 \h  SearchPath  PAGEREF _Toc433005757 \h  WriteFile(Ex) / WriteFileGather  PAGEREF _Toc433005758 \h  WriteFileVlm  PAGEREF _Toc433005759 \h  ACL Tests  PAGEREF _Toc433005760 \h  Performance testing  PAGEREF _Toc433005761 \h  Introduction There goals of scalability testing are Exercise a filesystem at its limits. Exercise the cache manager at its limits. Simulate activity of real world server applications on the file system. Test system utilities for correctness in handling large numbers.  Accumulate Knowledge Base issues regarding known problems and incorporate into tests.  File system scalability tests These tests may be categorized into the following. Basic tests on a large file File size limits Limit on number of files or directories Distribution of files Operations on large files Fragmentation of files (both system and user files) Real world usage scenarios New APIs (like VLM apis) Basic tests on a large file Create Shrink Truncate Encrypt Compress GetRetrievalPointers Defrag Mapped I/O Scatter Gather I/O Lock, UnLock Delete NTFS specifc   hard links, large alternate data streams, a large number of alternate data streams, and both NT5 specific - Make Sparse, Create Reparse Point, Set Object ID Check operations over network Backup / Restore Virus filters Test strategy for basic largefile tests: The following chunk sizes will be used when reading and writing files are   1byte, 64kb, 4gb, 64gb. Create a very large FileA ( > 250gb ).  Grow it with WriteFile Grow it with SetFilePointer, SetEndOfFile Shrink it with SetFilePointer, SetEndOfFile ReadFile in the beginning, middle and end of the file Attempt Scatter Gather I/O in the beginning, middle and end of the file Do random mapped I/O over the entire file range Lock and UnLock chunks in beginning, middle, end of file and also entire file EncryptFile()   NTFS5 only DecryptFile()   NTFS5 only Test FSCTL_GET_RETRIEVAL_POINTERS Test FSCTL_MOVE_FILE Repeat steps 2-10 re-opening file with FILE_FLAG_SEQUENTIAL_SCAN Repeat steps 2-10 re-opening file with FILE_FLAG_RANDOM_SCAN Repeat steps 2-10 re-opening file with FILE_FLAG_TEMPORARY Repeat steps 2-10 re-opening file with FILE_FLAG_UNBUFFERED Repeat steps 2-15 on a large alternate data stream - NTFS only Copy FileA with large alternate data stream to a new file, FileB Truncate default data stream on FileA Close FileA Delete FileA Create HardLink FileC to FileB Open FileB with FILE_FLAG_DELETE_ON_CLOSE Close FileB Delete FileC and verify all files are gone Repeat steps 2-16 on a large sparse file - NTFS5 only Repeat steps 1-26 on local, compressed, remote and remote-compressed volumes File Size Limits Any decent filesystem will store file sizes as atleast 64bit values. Current disk storage capacity hasn t yet reached anywhere near this. It is indeed doubtful that disks will become as large in the near and mid future. So for all practical test purposes, we can assume that the max file size creatable is constrained by the amount of free disk space.  Sparse files can have a size greater than the volume space. If quotas are enforced, then file size should be able to grow upto the quota limit. Test Strategy: Create as large a volume as possible Create a file as big as the free space on the volume  Set quotas to max values and create a file as big as the quota will permit Limit on number of files or directories This should be limited only by the volume size. Some file systems may impose a limit, on say the number of directories in the root of the volume. Such limitations are file system specific. Test Strategy: On NTFS volumes, small files are stored in the file record and aren t allocated clusters.  This test to create files in a situation where there are no free clusters and the only space the files will fit is in the file records. Create as large a volume as possible Create N,  zero length files until volume is full Delete N / 2 files Try creating files of size > File Record Segment size. Must fail. Recreate N / 2 files of size < File Record Segment size. Must succeed.  Directory tree tests.  Create as large a volume as possible. Create a  directory tree 32 levels deep, where each directory has 2 subdirectories. We will refer to this tree structure hereafter as TreeType1. Create, write, read, close and delete a file in a leaf dir Delete directory tree Create as many directories in the root as possible Delete directory tree Create a single subdirA under the root and create as many directories as possible in it. We will refer to this tree structure hereafter as TreeType2 Delete subdirA Create a directory tree where each dir has only one subdir. Use single character  directory names to achieve maximm depth. We will refer to this tree structure hereafter as TreeType3 Create, write, read, close and delete a file in the leaf dir Delete directory tree Distribution of Files on real world servers To find how file systems are used in real world servers, a survey was conducted. Results of the survey are in   HYPERLINK \\\\plans\\ntbaset\\largefile\\casestudy.xls  \\plans\ntbaset\largefile\casestudy.xls A description of the Terraserver  is given below.  TerraServer The Microsoft  TerraServer stores aerial and satellite images of the earth in phaServer from Compaq and StorageWorks hardware.  EMBED Word.Picture.8   The TerraServer's physical database design is very simple. The database is mapped onto 4 huge disk volumes, each volume is almost 600 GB. Hardware RAID5 provided by Digital StorageWorks converts 324 disks into 28 large RAID5 disks. Windows NT software striping (RAID0) is used to convert these 28 disks into four huge logical volumes. Therefore, SQL Server, Enterprise Edition sees four huge disks.  To ease tape handling, and to provide some granularity of backup and recovery, thirty 20 GB files are defined on each disk. Thus there are a total of 120 (4x20) files used by the SQL Server. These files are grown on demand by SQL and NT as the database fills. For more information   HYPERLINK http://terraserver.microsoft.com  http://terraserver.microsoft.com File I/O pattern on real world servers Internet Information Server (IIS)  IIS being a internet server under peak conditions of load deals with a large number of files being transmitted over the network. Depending on the type of server we might be dealing with a large number of small files, a typical web server, and larger files in case of FTP servers. IIS uses the TransmitFile() API to send files over sockets. It would be interesting to write a stress test for this API to run under iostress. It should also be kept in mind that internet servers are usually dedicated machines, and probably have optimized networking and caching code. So a TransmitFile() stress in regular iostress may not truly simulate the real world. Proxy Server The following information was provided by NeelJ and JoseSua. Microsoft Proxy Server routes requests and responses between the Internet and client computers, acting as a liaison between them. In addition to routing requests, Proxy Server provides a cache of frequently requested Internet sites, blocks access to specified sites, and provides secure access between your internal network and the Internet. Proxy Server also offers extensible firewall security features From the filesystem point of view, we are interestred in the caching done. Cached data is stored as regular files directory buckets hashed according to the filenames. The filenames directly reflect the http addressess.  When a client requests a file, the Proxy checks to see if the file is in the cache. If it is and its time to live (TTL) has not expired, then the file is sent to the client using the TransmitFile() API. The cache hit rate on a production machine is about 25%. If the file isn t in the cache, then it is retrieved from the web server, stored in the cache (CreateFile and OverwriteFile) and returned to the user. Unused files are deleted as and when disk space becomes scarce.    TransmitFile() / ReadFile() Create/Overwrite     Read/Update           Async,buffered I/O Delete     TTL, timestamps Proxy 4-5 directory buckets storing about 50,000   100,000 files SQL Servers The following information about database I/O is from the Microsoft SQL Server Programmer s toolkit.   Database systems store data in a logical collection of disk files or disk partitions. The physically atomic unit of a database file is referred to as a database page. The typical size of a database page is 2 or 4kb. Changing the page size from the default has rarely demonstrated any measurable performance gains. Physical reads and writes of the data are done by the database page. Therefore, disk requests are usually 2KB.  The process of executing I/O routines is similar across most database systems. Reads of database pages are done by database process(es) or thread(s) for the application. Many read operations can usually be conducted in parallel and each is independent of each other. Writes of data pages, on the other hand, are not initiated by a user application. When an application updates or inserts new data, the change is actually put into the database cache by the application's database process. Some time later an independent database function will clean the dirty data pages from memory. These writes will usually occur as a large batch of asynchronous writes.  In contrast to the data pages, writes of transaction log pages is a very steady stream of single pages writes. These occur during update and insert operations and again is controlled by a background database process. Application Types: By examining different database applications and database functions, the fundamental I/O profile used to access the disk can be determined. What this determines is whether a particular dataset will be accessed either sequentially or randomly. The key high-level application types include transaction processing, decision support systems, and batch processing. In this section we will examine the various access patterns on the database files. The distinct file types to be examined are data and index files, transaction logs, and import/export files. Transaction Processing (OLTP) OLTP is usually characterized as many users acting on a small subset of data throughout the database. The I/O profile resulting from this load is very heavy random reads and writes across the data and index files. The transaction logs, however, are hit with a heavy stream of sequential write operations of 2K or less. Decision Support System (DSS) DSS is characteristic of multiple users executing complicated joins and aggregations on large sets of data. Even though many of the operations could use some sequential processing, contention with other users and join and indexing operation result in a fairly random access pattern to the data and index files. Usually, if the database is dedicated to DSS no updates will be done to the database during heavy query load. In this case, no I/O will occur on the transaction logs. If on-line updates are applied to the database, it must be remembered that log file response time may still be important to the overall performance of the system. Batch Processing Batch processing is the most likely application to produce significant sequential I/O on the data files. The types of activities referred to here often occur after hours and usually in isolation of other activities. Batch processing involves database dumps, database loads, detail report processing, and index creation.  Random batch        Random Small,Sequential Updates, Async,     Async, Unbuffered unbuffered Unbuffered        Reads updates SQL Server  50-100gb database files  log files Exchange Servers The following information about Exchange Platinum was provided by PerryC . The STM files are the message store. Incoming messages are written into them. The writes are write through and are usually in 4kb sizes or broken into chunks of 32-64kb for larger messages. These writes are also sequential in nature spanning 2mb blocks in the STM file. The Jet database stores pointers to these message segements (in the STM file) as scatter-gather lists. So retrieving messages involves random sector/page size scatter-gather i/o. Messages are sent out using TransmitFile() and the file handles are  The EDB file contains the JET database holding user messages. (remember the message bodies are themselves kept in the STM files). The EDB file are about 5-100gb (typically 30% of STM file size). The i/o is 4kb random read writes. The read to write ratio is about 3:2. Elevator write schemes and extensive LRU2 caching of useful pages is done. Jet also maintains several log files. These files are about 5mb in size and there new files are created and accumulate until cleaned up after backup. In a typical day 100s of such logs can accumulate. The writes to the log are 512 byte sequential writes. The logs usually don t need to be read (except for say recovery purposes). The STM, EDB and log files need to be distributed on different spindles for maximum performance. Message size distribution is  typically like       Number of messages Exchange Platinum Server block diagram:      JET WriteThru msg size (4kb) or in  32-64kb chunks for larger msgs TransmitFile     Sector/Page size unbuffered      unbuffered (mostly 4kb)     random scatter 4kb random         512 byte     gather i/o read writes 3:2  sequential writes Handle cache 100,000 handles       STM file       2mb                      EDB file    Log file           50-100gb, 10s of files     5-100gb. Typically   5mb files     30% of stm size   100s of files         Multimedia Servers The following information about the NetShow server was provided by ChaddKn. File sizes vary from very small (10K) to very large (2G).  A typical server deployed for Internet access would generally have a bunch of files in the ~1M size range. The number of files varies all over the map.  Just as with web servers, the number of files depends on how rich the sight is.  Some sites have ~10 pieces of content and some have over 10,000. Files are copied in place by the admin.  Content manipulation isn t currently a feature of NetShow.  The server doesn t create any directory structure.  The admin can put their content anywhere they want to. Files are accessed using un-buffered asynchronous reads.  The size of these reads is anywhere from 8K to 500K depending on bitrate of the ASF file.  For a typical Internet deployment, the reads will usually be 8K or 16K. The Tiger Server uses raw partitions (TroyBa) and so is not of much use from a file system perspective. File Access Patterns It has been found that the Zipf Law distribution is a good aproximation of file access pattern. According this Law, if we have N number of total files and P(I) denotes  [my equation editor on ms-word does not work! ..to be done] Fragmentation We can have fragmentation of files, directories, system files, free space. Tests: Create two maximally fragmented files by interleaving their creation.  Try to read and write to the beginning, middle and end. Delete one of the files. Copy remaining file to a new file Get retrieval pointers on it and verify Defrag volume, and verify number of file fragments reported by defragger Convert such a disk from FAT32 to NTFS. Create a fragmented directory (need to find out how?) Create fragmentation of the MFT  Create fragmentation of the $BADCLUS file Fill up volume with N number of cluster sized files Delete alternate files, creating free space fragmentation Create a new file of size (N/2) * cluster size API Tests Create a 250gb file   FileA CopyFile Copy FileA to FileB CopyFileEx Use CopyFileEx to copy FileA to FileB. Try the following variation.  Use CopyFileEx with COPY_FILE_RESTARTABLE flag, fail the copy after 100gb has been copied, restart the copy and check if copy completes. CopyProgressRoutine Monitor progress of the above largefile copy. Note: This function takes a StreamNumber argument which is a DWORD. So does this mean that the max number of streams a file can have is 2^32 ? Might be a good system limit to prod! DeleteFile Delete a large contiguous file Delete a maximally fragmented file  FindFirstChangeNotification / FindNextchangeNotification Watch for notification on the TreeType1, 2 and 3 when modifying a file in the furthest leaf. Also watch for notification in the zero length file creation tests. This tests creates a bazillion number of files and it ll be good to find out that notification will still work FindFirstFile / FindNextFile These APIs must be keeping track of which file in the directory they are returning. If they are using a DWORD somewhere as an index, then they will not work for more than 2^32 files. Test! GetCurrentDirectory Do this check in the leaves of TreeType3. GetDiskFreeSpace / GetDiskFreeSpaceEx TotalNumberOfClusters is a DWORD. So see if format (both gui and cmd line) will work on a very large volume with a very small cluster size..(ie: number of clusters > 2^32). They should fail properly. GetFileAttributes / GetFileAttributesEx This function takes a filename argument. So provide it with the name of the file in TreeType3 GetFileInformationByHandle On the file in the leaf of a TreeType3 dir On a large file and verify return fields nFileSizeHigh and nFileSizeLow On a file with a large number of hard links and verify return field nNumberOfLinks Number of hardlinks returned by this API is a DWORD. So verify if this limit is present during hard link creation GetFileSize Test on large file GetFileType Test on large file GetFullPathName / GetLongPathName / GetShortPathName Test on file in a TreeType3 dir. GetTempFileName Test on getting a temp file name in the TreeType3 dir where the full path length is hit or exceeded. Test on a directory where there are already files that having all possible values of the  uUnique parameter, which is a UINT. GetTempPath Set temp path to the deepest directory in a TreeType3 dir.. Then call GetTempPath and verify. LockFile(Ex) / UnLockFile(Ex) Covered under basic file tests MoveFile / MoveFileEx Test on Large file Broadest and Deepest directory tree as a whole and after pruning to create some disk space Create a subdirA in the root, fill it up with zero size files, delete half the files and move subdirA to subdirB. This will test moves totally confined to MFT file records. Test the above 3 cases with MOVEFILE_DELAY_UNTIL_REBOOT specified to MoveFileEx ReadDirectoryChangesW Test by setting a watch on the root of the TreeType2 and 3 dirs trees and modifying a file in the leaf node. ReadFile(Ex) / ReadFileGather Covered in basic large file tests. ReadFileVlm Is anyone testing this? SearchPath Search for a file in the extremities of dir TreeType1, 2 and 3 WriteFile(Ex) / WriteFileGather Covered in Basic large file tests. WriteFileVlm Is anyone testing this? ACL Tests Performance testing Performance testing is done to simulate large loads on the server. This is very application specific, and the NT performance group has specific people analyzing different applications. Contact people are  NeelJ Exchange   PerryC  SQL Server   MauriceF From what I have seen, general purpose file systems like NTFS bite the bullet when it comes to driving up application specific performance. The current trend of major server apps seems to be to bypass the file system in some way or other to achieve higher performance. In fact SQL goes to the extreme extent of using a raw partition on its own. There is a lot of NT performance data collected and stored on http://ntperformance PAGE   PAGE
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\filesystem\docs\srename.doc ===
Microsoft Word Document MSWordDoc Word.Document.8                                                                                                                                                                                                                                                               Title                                                                                                                                                                                                                                                               Norberto Arrieta Normal.dot Josh Poley Microsoft Word 9.0bjbjU Stream renaming test plan Revision history March 7th, 1997.  Narrieta   Original version. Overview Starting in version 5.0, NT will allow the user to change the name of any of the data streams in a file. This will be done using the existing interface provided by the function NtSetInformationFile and the information class FileRenameInformation. Declarations of the function and its input buffer follow NTSTATUS NtSetInformationFile(     IN HANDLE  FileHandle,     OUT PIO_STATUS_BLOCK  IoStatusBlock,     IN PVOID  FileInformation,     IN ULONG  Length,     IN FILE_INFORMATION_CLASS  FileInformationClass typedef struct _FILE_RENAME_INFORMATION {     BOOLEAN  ReplaceIfExists;     HANDLE  RootDirectory;     ULONG  FileNameLength;     WCHAR  FileName[1]; } FILE_RENAME_INFORMATION, *PFILE_RENAME_INFORMATION; There are a few preconditions for a renaming operation to succeed: The handle to the stream must be opened with FILE_NON_DIRECTORY_FILE. FILE_RENAME_INFORMATION.FileName must identify a stream in the same object (::$DATA, :NAME, or :NAME:$DATA). It s illegal to move (rename) a stream between objects. Renaming to an existing stream is allowed only if FILE_RENAME_INFORMATION.ReplaceIfExists is set and the stream is zero length. Renaming the default data stream is allowed, but leaves behind a zero-length default data stream Regression tests Streams used in the test should contain known data. The success of a rename operation should be verified by checking that data and attributes can be accessed using the new name and can t be accessed using the old name (if different to the new name). Failure should be verified in a similar way.  When the default data stream is renamed, verify that a zero-length default stream is left behind.  In the following descriptions, object denotes a directory or file, file a file, dir a directory and stream a stream. Basic scenarios Rename from Comment :stream :stream:$DATA file::$DATA :stream file::$DATA :stream:$DATA object:stream1 :stream2 Also try stream1 == stream2 object:stream1 :stream2:$DATA Also try stream1 == stream2 File renaming dir:stream ::$DATA Failure: the default data stream of a directory can t be renamed file:stream Failure: streams can t be moved across objects ReplaceIfExists For these scenarios the target stream must exist prior to the rename operation and must contain some data. Try ReplaceIfExists not set and verify failure, also verify that the target stream is unaffected. Then try ReplaceIfExists set  and verify failure. Finally, delete the data from the stream, retry (ReplaceIfExists set) and verify success. Rename from Comment ::$DATA file::$DATA  ::$DATA file:stream1 ::$DATA :stream file::$DATA :stream object:stream1 :stream2 RootDirectory Use a valid handle in FILE_RENAME_INFORMATION.RootDirectory and verify that the operation fails ( relative  stream renaming is not allowed). FILE_NON_DIRECTORY_FILE Try some of the scenarios above, but do not use FILE_NON_DIRECTORY_FILE when opening the source stream. Verify failure. Target name  Verify failure when the name is too long or contains illegal characters (0x00-0x1f, ", /, <, >, ?, |, *). May want to try a few variations of   :stream: :stream:$X , etc. Concurrent renaming  Verify that renaming can be done concurrently from different processes.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\testini.ini ===
;
; Global Settings - if there is no per-module setting, global setting will be used
;
[GeneralSettings]
StressTestMode=0                    ;0=APIs test, 1=stress test default is 0
                                    ;SerialTestMode and ParallelTestMode will be ignored if StressTestMode=1
SleepBetweenRun=10000               ;Sleep interval (in msec) before re-run the same module, for stress test mode only
SerialTestMode=1                    ;1=enable serial test, 0=disable, default is 1
ParallelTestMode=0                  ;1=enable parallel test, 0=disable, default is 0
                                    ;If both SerialTestMode=1 and ParallelTestMode=1
                                    ;both serial and parallel mode will be tested
LogLevel=-1                         ;default is XLL_LOGALL
LogOptions=0x0e                     ;default is enabled all options except XLO_DEBUG
Iterations=1                        ;default is 1
NumberOfThreads=1                   ;default is 1
ThreadStackSize=65536               ;default is 16K
SynchronizeMultipleRun=0            ;StartTest will be run simultaneously if set to 1 in multiple
                                    ;configuration (NumberOfThreads>1), default is 0
DebugVerbose=1                      ;default is 0, set to 1 to see debug message from the harness
BreaksBeforeLoadTestModule=1        ;default is 0, set to 1 to force breaking into debugger before LoadLibrary
EnableAllocationTracking=0
StressStartTime=03/15/2000/18:00
StressStopTime=03/15/2000/06:00

;
; Driver verifier settings
;
[DriverVerifier]
VerifyDrivers=1                      ;default is disabled
VerifyDriverLevel=0xff
IoVerifierLevel=0xff
DontVerifyDrivers=0

;
; List of the test modules to be loaded and executed
;
[TestList]
cpuid
disktest
floatpt
memsize
memtest
msr
speedtest

[cpuid]

[disktest]

[floatpt]

[memsize]

[memtest]
ReadOnly=0              ;read-only variation
WriteOnly=0             ;write-only variation
ReadWrite=1             ;read-write variation

[msr]

[speedtest]

;
; This is the server that results will be posted to (probably over a socket)
;
[ResultServer]
Server=http://xtest/test/results

;
; This is the server that log files will be copied to
;
[LogServer]
Server=\\xtest\test\logs

;
; This is the FTP server that will supply binaries and data files
; Usually the root of FTP server will point to \xboxbins
;
[BinServer]
Server=ftp://schanbai               ;only FTP is supported now, "ftp://" can be omitted and ftp://157.55.34.25 is okay too
UserName=anonymous
Password=schanbai                   ;it's a good idea to use your email alias here as a password
DownloadBeforeTest=1                ;update files before start testing
DownloadAfterTest=1                 ;update files after finish testing

;
; This section contains list of files needed to be updated from FTP server
;
; The format is: source=destination
;   source - Relative path name from root of the FTP server. Wildcard ('*') is okay.
;   destination - Full path name on the Xbox machine. It is DOS-style path if second character is colon (':'), 
;     otherwise it is treated as NT-style path name
;
[DownloadList]
ntoskrnl.exe=\SystemRoot\System32\                      ;copy kernel
*.sys=\SystemRoot\System32\Drivers\                     ;copy all drivers
dump\harness.xbe=\SystemRoot\System32\default.xbe       ;copy harness and rename to default.xbe
xboxtest\testini.ini=t:\                                ;copy testini.ini to title data
xboxtest\inc\*.*=t:\inc\                                ;copy badman include files to title data directory
xboxtest\scripts\*=t:\scripts\                          ;copy badman script files to title data directory
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\ActiveWire\AW\junk.txt ===
**********
xLog Started,05/11/2001,13:39:32
**********

0484,13:39:32,VARIATION START,PowerCycle,System Test,Power Cycle,PowerCycle,Variation Started: PowerCycle

**********
xLog Started,05/11/2001,13:46:35
**********

05a0,13:46:35,VARIATION START,PowerCycle,System Test,Power Cycle,PowerCycle,Variation Started: PowerCycle

**********
xLog Started,05/11/2001,13:47:01
**********

04ac,13:47:01,VARIATION START,PowerCycle,System Test,Power Cycle,PowerCycle,Variation Started: PowerCycle

**********
xLog Started,05/11/2001,13:48:02
**********

01f8,13:48:02,VARIATION START,PowerCycle,System Test,Power Cycle,PowerCycle,Variation Started: PowerCycle

**********
xLog Started,05/11/2001,13:48:26
**********

0138,13:48:26,VARIATION START,PowerCycle,System Test,Power Cycle,PowerCycle,Variation Started: PowerCycle

**********
xLog Started,05/11/2001,13:51:27
**********

01c8,13:51:27,VARIATION START,PowerCycle,System Test,Power Cycle,PowerCycle,Variation Started: PowerCycle

**********
xLog Started,05/11/2001,13:52:17
**********

0640,13:52:17,VARIATION START,PowerCycle,System Test,Power Cycle,PowerCycle,Variation Started: PowerCycle

**********
xLog Started,05/11/2001,19:36:16
**********

06f8,19:36:16,VARIATION START,PowerCycle,System Test,Power Cycle,PowerCycle app started,Variation Started: PowerCycle app started

**********
Results,05/11/2001,19:36:23
**********
Total Variations,1
Exceptions,0
Break,0
Failures,0
Warnings,0
Blocked,0
Passed,0
Unknown,0
**********

**********
xLog Ended,05/11/2001,19:36:23
**********
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\ActiveWire\AW\ReadMe.txt ===
========================================================================
       DYNAMIC LINK LIBRARY : AW
========================================================================


AppWizard has created this AW DLL for you.  

This file contains a summary of what you will find in each of the files that
make up your AW application.

AW.dsp
    This file (the project file) contains information at the project level and
    is used to build a single project or subproject. Other users can share the
    project (.dsp) file, but they should export the makefiles locally.

AW.cpp
    This is the main DLL source file.

AW.h
    This file contains your DLL exports.

/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named AW.pch and a precompiled types file named StdAfx.obj.


/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.


/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\ActiveWire\ReadMe.txt ===
ActiveWire USB Software Library

                            

Last Updated : Oct.20th, 1999
                            

Doc\
	This folder contains documents for ActiveWire USB board.
	The same can be viewed on our web site at http://www.activewireinc.com.

                            
Driver\
	This folder contains ActiveWire Windows driver installation files.
	After you receive your ActiveWire USB, you must install these drivers.
                                
         1. Plug the ActiveWire board into your USB port.
         2. The Windows operating system will automatically detect ActiveWire USB
	    and prompt you to install a driver.
	    Specify location of this folder then Windows will automatically install them.
         3. That's all it takes to get started! 
            Restart Windows if you are asked to do so. It's usually not necessary.
                                
	USB makes driver installation quick and easy.
	Now, let's start exploring possibility of ActiveWire USB!!

	Driver Revision history:

		1.02 (May 19th,1999)	:	Fixed problem in OCX with Visual Basic 

		1.03 (Jun.22nd,1999)	:	Added DLL interface support with Visual Basic.
						Enhanced error message reporting.

		1.04 (Oct.20th,1999)	:	Added Windows 2000 support.
						Fixed a few minor firmware/DLL bugs.

                                

AwusbIO.exe
        This is a sample application to control I/O port of ActiveWire USB board.
        It's for you to try your ActiveWire USB board.
                                
                                
Src\
	This folder contains source files of the sample applications.
	VisualC++\ sub-folder contains code written using Microsoft Visual C++ 5.0 and Microsoft Foundation Class (MFC) Library. 
	You can also use Microsoft Visual C++ 6.0.
	VisualBaisc\ sub-folder contains 2 examples written using Microsoft Visual Basic 5.0.
	One example uses DLL interface, the another uses ActiveX (OCX) interface.
	You can also use Microsoft Visual Basic 6.0.
	Feel free to use it as a reference for your own design.
                                
                                
HTML\
	This folder contains samples of HTML file with Java Script using following ActiveX control.
	Microsoft Internet Explorer 4.0 or above is required.
	Please set Security option of Internet Explorer to Low when you browse this page.

AwusbIO.ocx  
	This is ActiveX Control for the ActiveWire USB board.
        To install ActiveX Control in your system, first install ActiveWire Windows driver, 
	then type in command like following at command prompt.
                                
	 C:>	c:\windows\system\regsvr32.exe	d:\your_folder\AwusbIO.ocx
                                
	In this example, I assumed your Windows directory is C:\Windows, and you saved the .OCX 
	file in d:\your_folder\.
	You must perform this command again with new pathname if you moved/renamed the .OCX file. 
	A window should pop up saying the library is successfully registerd.
        If pop-up window indicates failure or error, try re-install the driver.

RegClear.exe
	This is a utility program written specifically for troubleshooting ActiveWire USB driver installation.
	If there were an anomally during first time driver installation (power failure, corrupted disk, etc.),
	the Windows Registry Database will maintain incorrect information, preventing proper driver installation.
        If that occurs, run this utility and restart Windows. Then simply repeat the procedure for driver installation.
        This utility was actually written so that we could easily repeat driver installation for testing purposes. 


For any further questions, please contact tech_support@activewireinc.com
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\ActiveWire\Src\VisualBasic\UsingDLL\ReadMe.txt ===
This is a sample Visual Basic project.

This example uses DLL in Visual Basic.

DLL older than ver.1.02 will have a problem running this sample.

Please update your driver to ver.1.03 or above.

Please note that the name of DLL file to use with Visual Basic is ''awusbvb.dll'' instead of awusb.dll that is for C++.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\ActiveWire\Src\VisualBasic\UsingOCX\ReadMe.txt ===
This is a sample Visual Basic project.

This example uses ActiveX component(OCX) in Visual Basic.


To install ActiveX Control, first install ActiveWire Windows driver, then follow steps below.

  1. Download the OCX file and save to your local hard drive.
  2. Open a DOS box, and type in command like following ;

 C:>  c:\windows\system\regsvr32.exe d:\your_folder\AwusbIO.ocx

 In this example, I assumed your Windows directory is C:\Windows, and you saved the .OCX file in d:\your_folder\.
  You must perform this command again with new pathname if you moved/renamed the .OCX file. 
 A window should pop up saying the library is successfully registered.
 If pop-up window indicates failure or error, try re-install the driver.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\disktest\disktest.txt ===
DiskTest documentation for the hardware team

Here is what the hardware team wants:
2.3	Hard Disk Drive

The HDD software test applet will provide a method for measuring the following critical hard drive parameters:
-	Startup Time - from power on to Drive Ready  (we don't use power management, and not possible to time this from software)
-	Startup Time - from Standby to Drive Ready  (we don't use power management, and not possible to time this from software)
-	Spindown Time - from Standby Command  (we don't use power management, and not possible to time this from software)
-	Spindown Time - from power off (we don't use power management, and not possible to time this from software)
-	Seek/Read Time (not compatible with the way the OS works)
-	Seek/Write Time (not compatible with the way the OS works)
*	Data Transfer Rate, Sustained (*can use existing filesystem tests)

-       Additionally the test tool will provide a mechanism for reading and writing data and files to any specified location on the hard disk. (nope!)

-The test applet will allow each HDD command to be sent in each of the following modes:
-	DMA MultiWord modes 0-3 (nope)
-	DMA-33 (nope)
-	PIO Modes 0-2 (nope)

+The Test applet will be able to support the SMART self-test features of the hard drive and report self test results.
        SMART test:
                SMART READ DATA
                SMART ENABLE/DISABLE ATTRIBUTE AUTOSAVE
                SMART SAVE ATTRIBUTE VALUES
                SMART EXECUTE OFF-LINE IMMEDIATE
                SMART ENABLE OPERATIONS
                SMART DISABLE OPERATIONS
                SMART RETURN STATUS

Here is what they are going to get:
*        identify attached devices - done

*        SMART test - done

*        Full-Stroke Seek Time (inner track to outer track, and outer track to inner track combines) - done (may have to tweak when we get real hardware)
*        Track-to-Track Seek Time - inner tracks, middle tracks, outer tracks - done


Here is how it works:
The test enumerates all devices, and calls each test for each device.
If the device supports the commands required to perform the tests, 
it performs the test, otherwise it returns.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\DolphinClassic\placefil.txt ===
font.xpr	xboxtest\Media\DolphinClassic\Media
Resource.xpr	xboxtest\Media\DolphinClassic\Media
Arial_16.abc	xboxtest\Media\DolphinClassic\Media\fonts
Arial_16.tga	xboxtest\Media\DolphinClassic\Media\fonts
dolphin1.x	xboxtest\Media\DolphinClassic\Media\models
dolphin1.xbg	xboxtest\Media\DolphinClassic\Media\models
dolphin2.x	xboxtest\Media\DolphinClassic\Media\models
dolphin2.xbg	xboxtest\Media\DolphinClassic\Media\models
dolphin3.x	xboxtest\Media\DolphinClassic\Media\models
dolphin3.xbg	xboxtest\Media\DolphinClassic\Media\models
seafloor.x	xboxtest\Media\DolphinClassic\Media\models
seafloor.xbg	xboxtest\Media\DolphinClassic\Media\models
dolphin.psh	xboxtest\Media\DolphinClassic\Media\shaders
dolphin.vsh	xboxtest\Media\DolphinClassic\Media\shaders
dolphin.xpu	xboxtest\Media\DolphinClassic\Media\shaders
dolphin.xvu	xboxtest\Media\DolphinClassic\Media\shaders
seafloor.vsh	xboxtest\Media\DolphinClassic\Media\shaders
seafloor.xvu	xboxtest\Media\DolphinClassic\Media\shaders
caust00.tga	xboxtest\Media\DolphinClassic\Media\textures
caust01.tga	xboxtest\Media\DolphinClassic\Media\textures	
caust02.tga	xboxtest\Media\DolphinClassic\Media\textures
caust03.tga	xboxtest\Media\DolphinClassic\Media\textures
caust04.tga	xboxtest\Media\DolphinClassic\Media\textures
caust05.tga	xboxtest\Media\DolphinClassic\Media\textures
caust06.tga	xboxtest\Media\DolphinClassic\Media\textures
caust07.tga	xboxtest\Media\DolphinClassic\Media\textures
caust08.tga	xboxtest\Media\DolphinClassic\Media\textures
caust09.tga	xboxtest\Media\DolphinClassic\Media\textures
caust10.tga	xboxtest\Media\DolphinClassic\Media\textures
caust11.tga	xboxtest\Media\DolphinClassic\Media\textures
caust12.tga	xboxtest\Media\DolphinClassic\Media\textures
caust13.tga	xboxtest\Media\DolphinClassic\Media\textures
caust14.tga	xboxtest\Media\DolphinClassic\Media\textures
caust15.tga	xboxtest\Media\DolphinClassic\Media\textures
caust16.tga	xboxtest\Media\DolphinClassic\Media\textures
caust17.tga	xboxtest\Media\DolphinClassic\Media\textures
caust18.tga	xboxtest\Media\DolphinClassic\Media\textures
caust19.tga	xboxtest\Media\DolphinClassic\Media\textures
caust20.tga	xboxtest\Media\DolphinClassic\Media\textures
caust21.tga	xboxtest\Media\DolphinClassic\Media\textures
caust22.tga	xboxtest\Media\DolphinClassic\Media\textures
caust23.tga	xboxtest\Media\DolphinClassic\Media\textures
caust24.tga	xboxtest\Media\DolphinClassic\Media\textures
caust25.tga	xboxtest\Media\DolphinClassic\Media\textures
caust26.tga	xboxtest\Media\DolphinClassic\Media\textures
caust27.tga	xboxtest\Media\DolphinClassic\Media\textures
caust28.tga	xboxtest\Media\DolphinClassic\Media\textures
caust29.tga	xboxtest\Media\DolphinClassic\Media\textures
caust30.tga	xboxtest\Media\DolphinClassic\Media\textures
caust31.tga	xboxtest\Media\DolphinClassic\Media\textures
dolphin.bmp	xboxtest\Media\DolphinClassic\Media\textures
seafloor.bmp	xboxtest\Media\DolphinClassic\Media\textures
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\intelsrc\code\prime\hlp\CPU.log ===
Microsoft (R) Help Compiler
HCRTF 4.03.0002
Copyright (c) Microsoft Corp 1990 - 1995. All rights reserved.
cpu.hpj
26	Topics
90	Jumps
41	Keywords
0	Bitmaps


Created C:\Code\cputest\hlp\CPU.hlp, 25,673 bytes
Hall+Zeck compression decreased help file by 13,025 bytes.
Compile time: 0 minutes, 0 seconds
0 notes, 0 warnings
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\memtest\memtest.ini ===
[memtest.dll]
ReadOnly=0              ;read-only variation
WriteOnly=0             ;write-only variation
ReadWrite=1             ;read-write variation
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\intelsrc\code\prime\hlp\cpu.rtf ===
{\rtf1\ansi\ansicpg1252\uc1 \deff1\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;} {\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times;} {\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica;}{\f6\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;} {\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;} {\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;} {\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f16\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Arial Narrow;} {\f17\froman\fcharset238\fprq2 Times New Roman CE;}{\f18\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f20\froman\fcharset161\fprq2 Times New Roman Greek;}{\f21\froman\fcharset162\fprq2 Times New Roman Tur;} {\f22\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f23\fswiss\fcharset238\fprq2 Arial CE;}{\f24\fswiss\fcharset204\fprq2 Arial Cyr;}{\f26\fswiss\fcharset161\fprq2 Arial Greek;}{\f27\fswiss\fcharset162\fprq2 Arial Tur;} {\f28\fswiss\fcharset186\fprq2 Arial Baltic;}{\f29\fmodern\fcharset238\fprq1 Courier New CE;}{\f30\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f32\fmodern\fcharset161\fprq1 Courier New Greek;}{\f33\fmodern\fcharset162\fprq1 Courier New Tur;} {\f34\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f107\fswiss\fcharset238\fprq2 Tahoma CE;}{\f108\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f110\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f111\fswiss\fcharset162\fprq2 Tahoma Tur;} {\f112\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f113\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f114\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f116\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f117\fswiss\fcharset162\fprq2 Arial Narrow Tur;} {\f118\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255; \red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20  \snext0 Normal;}{\s1\sb60\sl-240\slmult0\keepn\widctlpar\adjustright \b\f1 \sbasedon0 \snext0 heading 1;}{\s2\sb240\sa120\sl-240\slmult0\widctlpar\adjustright \b\f1\fs20 \sbasedon1 \snext0 heading 2;}{\s3\li120\sb60\sa60\sl-240\slmult0 \widctlpar\adjustright \b\f1\fs20 \sbasedon1 \snext0 heading 3;}{\s4\fi-245\li360\sb120\sa120\sl-240\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon2 \snext4 heading 4;}{\s5\sb240\sa120\sl-240\slmult0\widctlpar\adjustright \b\f1\fs20 \sbasedon2 \snext0  heading 5;}{\s6\sb40\sl-238\slmult0\keepn\widctlpar\pvpara\posy0\absh255\dxfrtext130\dfrmtxtx130\dfrmtxty0\adjustright \b\f1\fs21 \sbasedon1 \snext15 heading 6;}{\s9\li115\sa20\sl-240\slmult0\keepn\widctlpar\tx1440\tx2880\adjustright \f1\fs16  \sbasedon1 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\sb40\sa160\sl-220\slmult0\widctlpar\adjustright \f1\fs21 \sbasedon0 \snext0 H6p;}{\s16\fi-300\li420\ri140\sb100\sl-210\slmult0\widctlpar\tx140\tx420\adjustright \f16\fs19  \snext16 *Cbx;}{\s17\fi-300\li420\ri140\sb100\sa100\sl-210\slmult0\widctlpar\tx140\tx420\adjustright \f16\fs19 \sbasedon16 \snext0 *Cbxe;}{\s18\qc\fi-245\li360\sl-360\slmult0\keepn\widctlpar\box\brdrs\brdrw15\brsp20\brdrcf8  \pvpara\phpg\absh-390\absw1460\dxfrtext220\dfrmtxtx220\dfrmtxty0\adjustright \shading6000\cfpat2 \f16\cf8\up4 \sbasedon4 \snext4 *hb1;}{\s19\ri120\sa60\sl-360\slmult0\keepn\widctlpar\box\brdrs\brdrw15\brsp80\brdrcf8  \pvpara\phmrg\posxr\posy0\absh-390\adjustright \shading6000\cfpat2 \b\f16\cf8\up10 \sbasedon0 \snext0 *hb2;}{\*\cs20 \additive \cf11 \sbasedon10 annotation reference;}{\s21\li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\cf11 \sbasedon0 \snext21  annotation text;}{\s22\li115\sb120\sa120\widctlpar\tx120\tx480\tx840\adjustright \f1\fs20 \sbasedon0 \snext0 Art;}{\s23\sa120\keepn\widctlpar\tx120\tx480\tx840\tqr\tx1560\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty0\adjustright \f1\fs20  \sbasedon22 \snext0 ArtSd;}{\s24\li120\sa240\sl-220\slmult0\widctlpar\tx120\tx480\tx840\adjustright \b\f1\fs20 \sbasedon0 \snext0 Cap;}{\s25\li120\sl-220\slmult0\widctlpar \tx120\tx480\tx840\tqr\tx1560\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty0\adjustright \b\f1\fs20 \sbasedon24 \snext0 CapSd;}{\s26\sb120\keepn\widctlpar\adjustright \b\f1\fs28 \sbasedon1 \snext0 Ch;}{\s27\li-1800\sa280\sl-240\slmult0 \keepn\widctlpar\adjustright \caps\f1\expnd24\expndtw120 \snext26 Cn;}{\s28\li440\sa80\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon0 \snext29 Def1;}{\s29\li120\sb20\sa20\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon0 \snext28 Term1;}{ \s30\li560\sa80\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon28 \snext0 Def2;}{\s31\sb240\sa120\sl-240\slmult0\widctlpar\adjustright \b\f1\fs20 \sbasedon2 \snext32 Erm;}{\s32\li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20  \sbasedon0 \snext32 Erp;}{\s33\sb240\sa120\sl-240\slmult0\widctlpar\tx600\adjustright \b\f1\fs20 \sbasedon31 \snext32 Ermn;}{\s34\li120\sl-240\slmult0\keep\widctlpar\tx480\tx840\tx1200\tx1560\tx1920\tx2280\tx2640\tx3000\adjustright \f2\fs20 \snext34 Ex;}{ \s35\li280\sl-240\slmult0\keep\widctlpar\tx480\tx670\tx840\tx1060\tx1200\tx1450\tx1840\tx1920\tx2230\tx2280\tx2620\tx3010\tx3400\tx3790\tx4180\tx4570\tx4960\tx5350\tx5740\tx6130\tx6520\tx6910\adjustright \f2\fs20 \sbasedon34 \snext35 Exl;}{ \s36\li560\sl-240\slmult0\keep\widctlpar\tx480\tx840\tx950\tx1200\tx1340\tx1730\tx1920\tx2120\tx2280\tx2510\tx2900\tx3290\tx3680\tx4070\tx4460\tx4850\tx5240\tx5630\tx6020\tx6410\tx6800\adjustright \f2\fs20 \sbasedon35 \snext36 Exl2;}{ \s37\li-1800\sl-240\slmult0\keep\widctlpar\tx-1410\tx-1020\tx-630\tx-240\tx150\tx480\tx540\tx840\tx930\tx1200\tx1320\tx1710\tx1920\tx2100\tx2280\tx2490\tx2640\tx2880\tx3000\tx3270\tx3660\tx4050\tx4440\tx4830\tx5220\tx5610\tx6000\tx6390\tx6780\adjustright  \f2\fs20 \sbasedon34 \snext37 Exw;}{\s38\fi-1800\li1800\sl-140\slmult0\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f1\fs10 \sbasedon0 \snext38 footer;}{\s39\li120\sa60\sl-220\slmult0\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \b\f1\fs20  \sbasedon0 \snext39 header;}{\s40\li-1770\ri30\sb50\sl-80\slmult0\widctlpar\brdrt\brdrs\brdrw15\brdrcf2 \adjustright \f1\fs12 \snext0 header rule;}{\s41\sb60\sl-240\slmult0\keepn\widctlpar\adjustright \b\f1 \sbasedon1 \snext0 Hn1;}{ \s42\sb240\sa120\sl-240\slmult0\widctlpar\adjustright \b\f1\fs20 \sbasedon2 \snext0 Hn2;}{\s43\li120\sb60\sa60\sl-240\slmult0\widctlpar\adjustright \b\f1\fs20 \sbasedon3 \snext0 Hn3;}{\s44\li-1800\sa420\sl-600\slmult0\keepn\pagebb\widctlpar\adjustright  \b\f16\fs48 \snext0 Ih;}{\s45\sa80\sl-220\slmult0\keepn\widctlpar\adjustright \v\f16\cf5 \sbasedon0 \snext0 index;}{\s46\fi-320\li440\sa60\sl-220\slmult0\widctlpar\tqr\tx360\tx440\adjustright \f1\fs20 \sbasedon47 \snext46 Lb1;}{ \s47\fi-440\li440\sa60\sl-220\slmult0\widctlpar\tqr\tx360\tx440\adjustright \f1\fs20 \sbasedon0 \snext47 Ln1;}{\s48\fi-320\li760\sa60\sl-220\slmult0\widctlpar\tqr\tx680\tx760\adjustright \f1\fs20 \sbasedon49 \snext48 Lb2;}{ \s49\fi-446\li763\sa60\sl-220\slmult0\widctlpar\tqr\tx680\tx760\adjustright \f1\fs20 \sbasedon47 \snext49 Ln2;}{\s50\li446\sa60\sl-220\slmult0\widctlpar\tx440\adjustright \f1\fs20 \sbasedon46 \snext50 Lbp;}{\s51\li120\sl-80\slmult0\widctlpar\adjustright  \f1\fs12 \sbasedon0 \snext0 Le;}{\s52\li120\sl-40\slmult0\widctlpar\adjustright \f1\fs12 \sbasedon51 \snext0 Leh;}{\s53\sa80\sl-220\slmult0\widctlpar\adjustright \f1\fs21 \sbasedon0 \snext53 Lmc;}{\s54\li446\sa60\sl-220\slmult0\widctlpar\adjustright  \f1\fs20 \sbasedon55 \snext54 Lp1;}{\s55\li440\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon0 \snext55 Normal Indent;}{\s56\li760\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon54 \snext56 Lp2;}{\s57\sl-220\slmult0 \keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty0\adjustright \f1\fs19 \snext0 Mp;}{\s58\li120\sl-120\slmult0\widctlpar\brdrt\brdrs\brdrw15\brsp20 \adjustright \f1\fs12 \snext0 Ne;}{\s59\li440\sl-120\slmult0\widctlpar\brdrt \brdrs\brdrw15\brsp20 \adjustright \f1\fs12 \sbasedon58 \snext55 Nei;}{\s60\li120\sa60\sl-220\slmult0\widctlpar\tx720\tx1200\adjustright \f1\fs20 \sbasedon0 \snext58 Nh;}{\s61\li440\sa60\sl-220\slmult0\widctlpar\tx1040\tx1520\adjustright \b\f16\fs20  \sbasedon0 \snext61 Nhi;}{\s62\li120\sb40\sa80\sl-220\slmult0\keepn\widctlpar\adjustright \f1\fs20 \sbasedon0 \snext58 Np1;}{\s63\fi-280\li280\sb40\sa80\sl-220\slmult0\keepn\widctlpar\adjustright \f1\fs20 \sbasedon62 \snext59 Np1i;}{ \s64\li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon0 \snext58 Np2;}{\s65\li440\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon0 \snext59 Np2i;}{\s66\li120\sa40\nowidctlpar\adjustright \f1 \snext66 Style;}{ \s67\li440\sa40\sl-120\slmult0\widctlpar\brdrb\brdrs\brdrw15 \adjustright \f1\fs12 \sbasedon66 \snext61 Nsi;}{\s68\li-280\sl-80\slmult0\keepn\pagebb\widctlpar\pvpara\phpg\posy0\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright \f1\fs12 \snext0 Pb;}{ \s69\li120\sb40\sa60\sl-220\slmult0\widctlpar\adjustright \b\f1\fs20 \sbasedon0 \snext47 Proch;}{\s70\li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon0 \snext47 Procp;}{\s71\sb60\sl-240\slmult1\keepn\widctlpar\adjustright \b\f1  \sbasedon1 \snext9 Rh1;}{\s72\sb240\sa120\sl-240\slmult0\widctlpar\adjustright \b\f1\fs20 \sbasedon2 \snext0 Rmh;}{\s73\li-1770\ri30\sb280\sa250\sl-120\slmult0\keepn\widctlpar\brdrb\brdrs\brdrw15\brdrcf2 \adjustright \f1\fs8\cf8 \snext71 Rule;}{ \s74\li-240\sl-300\slmult0\widctlpar\adjustright \f1\fs16 \snext0 Sbre;}{\s75\li280\ri280\sl-220\slmult0\keepn\widctlpar\tx670\tx1060\tx1450\tx1840\tx2230\tx2620\tx3010\tx3400\tx3790\tx4180\tx4570\tx4960\tx5350\tx5740\tx6130\tx6520\adjustright \f2\fs16  \snext75 SbrEx;}{\s76\li280\ri280\sb220\sa40\sl-280\slmult0\keepn\widctlpar\adjustright \b\f16 \snext0 Sbrh;}{\s77\li280\ri280\sb40\sa40\sl-240\slmult0\keepn\widctlpar\adjustright \b\f16\fs21 \snext0 Sbrh2;}{\s78\fi-280\li560\ri280\sa80\sl-220\slmult0 \keepn\widctlpar\tx560\adjustright \f1\fs20 \sbasedon0 \snext78 SbrLb;}{\s79\qr\li280\ri280\sl-160\slmult0\keepn\widctlpar\adjustright \f1\fs12 \sbasedon0 \snext0 SbrLe;}{\s80\fi-280\li560\ri280\sa80\sl-220\slmult0\keepn\widctlpar\tx560\adjustright  \f1\fs20 \sbasedon78 \snext78 SbrLp;}{\s81\li280\ri280\sa160\sl-240\slmult0\keepn\widctlpar\adjustright \f1\fs21 \snext81 Sbrp;}{\s82\li-240\sl-100\slmult0\keepn\widctlpar\adjustright \f1\fs16 \snext76 Sbrs;}{\s83\li120\sa60\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 \sbasedon0 \snext83 Syn;}{\s84\li-1800\sa60\sl-220\slmult0\widctlpar\tx-1520\tx-1240\tx-960\tx-680\tx-400\tx-120\tx160\tx440\tx720\tx1000\adjustright \f1\fs20 \sbasedon0 \snext0 Synw;}{\s85\li120\sb20\sa60\widctlpar \tx240\tx280\tx560\adjustright \f1\fs19 \sbasedon0 \snext85 Tart;}{\s86\qr\li30\ri30\sb80\sa80\sl-180\slmult0\widctlpar\brdrt\brdrs\brdrw15\brsp20 \adjustright \f1\fs16 \sbasedon0 \snext0 Te;}{\s87\li120\sl-40\slmult0\widctlpar\adjustright \f1\fs12  \sbasedon88 \snext0 Teh;}{\s88\li120\sl-80\slmult0\widctlpar\adjustright \f1\fs12 \sbasedon0 \snext0 Tes;}{\s89\qr\li310\ri30\sb80\sa80\sl180\slmult0\widctlpar\brdrt\brdrs\brdrw15\brsp20 \adjustright \f1\fs16 \sbasedon0 \snext47 Tei;}{ \s90\li280\sb20\sa20\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon29 \snext30 Term2;}{\s91\qr\li-1770\ri30\sb80\sa80\sl180\slmult0\widctlpar\brdrt\brdrs\brdrw15\brsp20 \adjustright \f1\fs16 \sbasedon86 \snext0 Tew;}{\s92\li120\sl-240\slmult0 \keep\widctlpar\tx480\tx840\tx1200\tx1560\tx1920\tx2280\tx2640\tx3000\adjustright \f6\fs20 \snext92 Tex;}{\s93\li120\sb20\sa60\sl-240\slmult0\keep\widctlpar\tx480\tx840\tx1200\tx1560\tx1920\tx2280\tx2640\tx3000\adjustright \f2\fs20 \sbasedon34 \snext93  Texf;}{\s94\fi-140\li140\sb20\sa40\sl-200\slmult0\widctlpar\tx280\adjustright \f1\fs17 \sbasedon0 \snext94 Tf;}{\s95\li200\sb40\sl-220\slmult0\widctlpar\adjustright \b\f1\fs20 \sbasedon0 \snext96 Th;}{\s96\li120\sl-40\slmult0\widctlpar\brdrt \brdrs\brdrw15\brsp20 \adjustright \f1\fs8 \snext0 Tr;}{\s97\li120\sb40\sl-220\slmult0\widctlpar\adjustright \b\f1\fs20 \sbasedon95 \snext97 Thf;}{\s98\li120\sa40\sl-220\slmult0\widctlpar\tqr\tldot\tx6960\adjustright \f1\fs20  \sbasedon0 \snext99 \sautoupd toc 1;}{\s99\li280\sa40\sl-220\slmult0\widctlpar\tqr\tldot\tx6960\adjustright \f1\fs20 \sbasedon98 \snext99 \sautoupd toc 2;}{\s100\li560\sa40\sl-220\slmult0\widctlpar\tqr\tldot\tx6960\adjustright \f1\fs20  \sbasedon98 \snext100 \sautoupd toc 3;}{\s101\li240\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon0 \snext101 Tp;}{\s102\li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon101 \snext102 Tpf;}{\s103\li440\sa60\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 \sbasedon55 \snext103 Tpi;}{\s104\li320\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon0 \snext103 Tpif;}{\s105\qr\li240\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon101 \snext105 Tpr;}{ \s106\li120\sb20\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs19 \sbasedon83 \snext106 Tsyn;}{\s107\sb20\sa60\sl-220\slmult0\keepn\widctlpar\adjustright \b\f1\fs19 \snext96 Tt;}{\s108\li-1800\sb20\sa60\sl-220\slmult0\keepn\widctlpar\adjustright  \b\f1\fs19 \sbasedon107 \snext96 Ttw;}{\s109\li120\sl-120\slmult0\widctlpar\brdrt\brdrdb\brdrw15\brsp20\brdrcf2 \adjustright \f1\fs12 \sbasedon58 \snext0 We;}{\s110\li440\sl-120\slmult0\widctlpar\brdrt\brdrdb\brdrw15\brsp20\brdrcf2 \adjustright \f1\fs12  \sbasedon109 \snext55 Wei;}{\s111\li120\sa60\sl-220\slmult0\widctlpar\tx1200\adjustright \f1\fs18\cf1 \sbasedon0 \snext109 Wh;}{\s112\li440\sa60\sl-220\slmult0\widctlpar\tx1560\adjustright \f1\fs18\cf1 \sbasedon111 \snext110 Whi;}{ \s113\li120\sa40\sl-120\slmult0\widctlpar\brdrb\brdrdb\brdrw15\brdrcf2 \adjustright \f1\fs12 \sbasedon66 \snext111 Ws;}{\s114\li440\sa40\sl-120\slmult0\widctlpar\brdrb\brdrdb\brdrw15\brdrcf2 \adjustright \f1\fs12 \sbasedon113 \snext55 Wsi;}{\*\cs115  \additive \ul \sbasedon10 Popup Text;}{\*\cs116 \additive \v\cf13 \sbasedon10 Hidden Text;}{\*\cs117 \additive \super \sbasedon10 footnote reference;}{\*\cs118 \additive \uldb \sbasedon115 Jump Text;}{\*\cs119 \additive \f2 \sbasedon10 Example Code Text;} {\*\cs120 \additive \scaps\f1\fs20 \sbasedon10 Keystroke Text;}{\s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon0 \snext0 footnote text;}{\s122\li115\sb160\sa60\sl-240\slmult0\widctlpar\adjustright \f1\fs20 \sbasedon0 \snext0 See Also;} {\s123\fi-2790\li2880\sa60\sl-220\slmult0\widctlpar\tx1440\tx2160\tx2880\adjustright \f1\fs20 \sbasedon0 \snext123 note;}{\s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 \sbasedon0 \snext124 tests;}{ \s125\fi-1320\li1440\sa60\sl-220\slmult0\widctlpar\tx1440\adjustright \f1\fs20 \sbasedon0 \snext125 param;}{\s126\fi-1325\li1440\sa60\sl-220\slmult0\keep\widctlpar\adjustright \f2\fs20 \sbasedon0 \snext126 error;}{\s127\li120\sa60\sl-220\slmult0 \widctlpar\adjustright \cbpat9 \f15\fs20 \sbasedon0 \snext127 Document Map;}}{\info{\title Create Help files for Winhelp 3.10.505}{\author Mark E. Tolonen}{\operator Intel Corporation}{\creatim\yr2000\mo5\dy3\hr10\min11}{\revtim\yr2000\mo5\dy3\hr10\min11} {\version2}{\edmins0}{\nofpages27}{\nofwords2591}{\nofchars14770}{\*\company Intel Corporation}{\nofcharsws0}{\vern113}}\widowctrl\ftnbj\aenddoc\hyphhotz0\noextrasprl\prcolbl\cvmme\sprsspbf\brkfrm\hyphcaps0\fracwidth\viewkind1\viewscale100 \fet0 {\*\template C:\\Program Files\\Microsoft Office\\Templates\\WHAT6.DOT}\sectd \linex0\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3 \pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}} {\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s1\sb60\sl-240\slmult0 \keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ CPU WinMTA Test Module}}#{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super #}{ overview}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ overview}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \cs117\super A}{ CPU_main}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{CPU WinMTA Test Module \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \par Version:\tab 3.0 \par Released:\tab 05/02/2000 \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Purpose \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This module displays CPU feature information, tests the MMX, SIMD, Willamette and FPU instructions, stresses the CPU\rquote s L1 cache and FPU unit, and reports the CPU speed. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Runtime Environment \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {The WinMTA Test Executive and Windows NT 3.51 or greater are required to run this module. \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Version Notes}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ history}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ history;notes}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{Version Notes \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \par 02/07/97 V1.00 SSS Release V1.00. \par 02/25/97 V1.10 SSS Testlib recompile. \par 03/17/97 V1.11 \par 05/08/97 V2.00 MET Linked to testlib V2.00 DLL. \par 06/26/97 V2.01 JWW Added FPU Stress subtest. \par 07/21/97 V2.02 JWW CPU.HLP file. \par 01/06/98 V2.04 JWW Modified Autoconfigure \par 02/12/98 V2.05 JWW Modified cpusteppingsallowed[] parameters. \par 03/13/98 V2.06 JWW Modified Autoconfigure to remove inappropriate subtests. \par 06/11/98 V2.07 ERG Added a parameter \ldblquote cpu number\rdblquote   which can be used to force the test to run on a specific cpu in multiprocessor systems.  Autoconfig was modified to support the new parameter.  Autoconfig will create a separate group for each CPU present in the system \par 11/18/98 V2.08 TRW Fixed autosense cloning routine.  Added SIMD new instructions test. \par 04/14/00 V2.09 SLK  Added CPU speed test.  Fixed error in SIMD test.  Changed files to allow compilation with Microsoft compiler.  Added text descriptions for cache and CPU.  Changed \ldblquote MMX2\rdblquote  parameter to \ldblquote SIMD\rdblquote . \par 05/02/00 V3.0 SLK  Added Willamette Features test and Willamette parameter.  Added check for Willamette support to DisplayCPUFeatures and CheckCPUFeatures tests. \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ INSTALLATION}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ installation}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ installation}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{INSTALLATION \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \par }\pard\plain \s24\li120\sa60\sl-220\slmult0\widctlpar\adjustright \b\f1\fs20 {Required Files: \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {   Cpu.exe\tab  \par    Cpu.snp\tab  \par    Cpu.cnt\tab  \par    Cpu.hlp\tab  \par   \par }\pard\plain \s32\li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {These files are copied into the WinMTA directory.  The group of tests is made available b y choosing the CPU.SNP inside of WinMTA.  This module is autoconfigurable.  It will create a separate module group for each processor in the system. \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 { \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\b0\super \page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ List of Sub-Tests}}#{\footnote  \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ tests}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ tests;subtests}}+{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{List of Sub-Tests \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {Test 0\tab }{\uldb AUTOCONFIGURE}{\v\cf13 test0}{ \par Test 1\tab }{\uldb DISPLAY CPU FEATURES}{\v\cf13 test1}{ \par Test 2\tab }{\uldb FEATURE CHECK}{\v\cf13 test2}{ \par Test 3\tab }{\uldb FLOATING POINT UNIT}{\v\cf13 test3}{ \par Test 4\tab }{\uldb MULTIMEDIA EXTENSIONS}{\v\cf13 test4}{ \par Test 5\tab }{\uldb FPU STRESS}{\v\cf13 test5}{ \par Test 6\tab }{\uldb SIMD NEW INSTRUCTIONS}{\v\cf13 test6}{ \par Test 7\tab }{\uldb CPU SPEED}{\v\cf13 test7}{ \par Test 8\tab }{\uldb WILLAMETTE FEATURES}{\v\cf13 test8}{ \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ CPU Parameters}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ parameters}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ parameters}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{CPU Parameters \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \par }{\uldb CPU NUMBER}{\v\cf13 cpunumber}{ \par }{\uldb FAMILY}{\v\cf13 family}{ \par }{\uldb FPU}{\v\cf13 fpu}{ \par }{\uldb MMX}{\v\cf13 mmx}{ \par }{\uldb SIMD}{\v\cf13 simd}{ \par }{\uldb WILLAMETTE}{\v\cf13 willamette}{ \par }{\uldb MODEL}{\v\cf13 model}{ \par }{\uldb OFFSTEPPINGSNOTALLOWED[]}{\v\cf13 offsteppingsnotallowed}{ \par }{\uldb ITERATIONS}{\v\cf13 iterations}{ \par }{\uldb CPU SPEED}{\v\cf13 cpuspeed}{ \par }{\uldb CPU TYPE}{\v\cf13 cputype}{ \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ CPU NUMBER}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ cpunumber}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ CPU NUMBER}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU NUMBER}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{CPU NUMBER \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Description \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This parameter indicates which processor is being tested.  The processor is selected by using the Win32 command \ldblquote SetThreadAffinityMask\rdblquote  .  We expect that 0 corresponds to the primary processor, 1 to the secondary, etc. Where primary and secondary are the labels on the processor module.  However, this is determined by the hardware abstraction layer (HAL) and is not guaranteed to map as exp ected. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Example \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {CPU NUMBER = 0 \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Used by \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {All subtests.}{\uldb  \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {See Also \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU Parameters}{\v\cf13 parameters}{ \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ FAMILY}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ family}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ FAMILY}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super A}{ FAMILY}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{FAMILY \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Description \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This required parameter indicates the processor family (0110B for the Pentium Pro Processor Family). Thi s parameter provides a means to determine that the correct processor has been installed in the system. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Example \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {FAMILY=6 \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Used by \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {\uldb DISPLAY CPU FEATURES}{\v\cf13 test1}{\uldb  \par FEATURE CHECK}{\v\cf13 test2}{\uldb   \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {See Also \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU Parameters}{\v\cf13 parameters}{ \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ FPU}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ fpu}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ FPU}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super A}{ FPU}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{FPU \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Description \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { This required parameter indicates the presence of a Floating Point Unit.  This parameter can have a value of either 1 or 0.  A value of 1 indicates the presence of a Floating Point Unit.  A value of 1 is required for the subtest to run. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Example \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {FPU=1\tab ;Floating Point Unit is present. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Used by \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {\uldb DISPLAY CPU FEATURES}{\v\cf13 test1}{\uldb  \par FEATURE CHECK}{\v\cf13 test2}{\uldb  \par FLOATING POINT UNIT}{\v\cf13 test3}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {See Also \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU Parameters}{\v\cf13 parameters}{ \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ MMX}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ mmx}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ MMX}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super A}{ MMX}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{MMX \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Description \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { This required parameter indicates the presence of Multimedia Extensions.  This parameter can have a value of 1 or 0.  A value of 1 indicates MMX extensions are present.  MMX must be set to 1 for the subtest to run. \par  \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Example \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {MMX=1\tab ;MMX is present. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Used by \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {\uldb DISPLAY CPU FEATURES}{\v\cf13 test1}{\uldb  \par FEATURE CHECK}{\v\cf13 test2}{\uldb  \par MULTIMEDIA EXTENSIONS}{\v\cf13 test4}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {See Also \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU Parameters}{\v\cf13 parameters}{ \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {{\*\bkmkstart HAT_Topic}\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ SIMD}}#{\footnote  \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ simd}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ simd;mmx2}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super A}{ simd}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{SIMD \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Description \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { This required parameter indicates the presence of SIMD Multimedia Extensions.  This parameter can have a value of 1 or 0.  A value of 1 indicates SIMD extensions are present.  SIMD must be set to 1 for the SIMD subtest to run. \par  \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Example \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {SIMD=1\tab ;SIMD new instructions are present. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Used by \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {\uldb DISPLAY CPU FEATURES}{\v\cf13 test1}{\uldb {\*\bkmkstart fWHATtopic}{\*\bkmkend fWHATtopic} \par FEATURE CHECK}{\v\cf13 test2}{\uldb  \par SIMD NEW INSTRUCTIONS}{\v\cf13 test6}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {See Also \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU Parameters}{\v\cf13 parameters}{ \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {{\*\bkmkend HAT_Topic}\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Willamette}}# {\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ willamette}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ willamette}}A{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super A}{ willamette}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{WILLAMETTE \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Description \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Thi s required parameter indicates the presence of Willamette Multimedia Extensions.  This parameter can have a value of 1 or 0.  A value of 1 indicates Willamette extensions are present.  Willamette must be set to 1 for the Willamette Features subtest to run \par  \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Example \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Willamette=1\tab ; Willamette new instructions are present. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Used by \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {\uldb DISPLAY CPU FEATURES}{\v\cf13 test1}{\uldb  \par FEATURE CHECK}{\v\cf13 test2}{\uldb  \par WILLAMETTE FEATURES}{\v\cf13 test8}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {See Also \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU Parameters}{\v\cf13 parameters}{ \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ MODEL}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ model}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ MODEL}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super A}{ MODEL}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{MODEL \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Description \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This  parameter is used to determine the model of the processor. The Pentium Pro Processor has a model number of (0001B). \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Example \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {model=1\tab ; Pentium Pro Processor \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Used by \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {\uldb DISPLAY CPU FEATURES}{\v\cf13 test1}{\uldb  \par FEATURE CHECK}{\v\cf13 test2}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {See Also \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU Parameters}{\v\cf13 parameters}{ \par  \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {{\*\bkmkstart WHAT_Topic}\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{  OFFSTEPPINGSNOTALLOWED[]}}#{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ offsteppingsnotallowed}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{  OFFSTEPPINGSNOTALLOWED[]}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super A}{ OFFSTEPPINGSNOTALLOWEDbb}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{  tag}}}{{\*\bkmkstart WHAT_LastFoot}{\*\bkmkend WHAT_LastFoot}OFFSTEPPINGSNOTALLOWED[] \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {{\*\bkmkend WHAT_Topic}Description \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This optional parameter describes the processor steppings not allowed. This parameter is used to identify certain processor steppings. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Example \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {OFFSTEPPINGSNOTALLOWED[0]=0xA \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Used by \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {\uldb FEATURE CHECK}{\v\cf13 test2}{\uldb  \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {See Also \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU Parameters}{\v\cf13 parameters}{ \par  \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ INTERATIONS}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ iterations}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ ITERATIONS}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super A}{ ITERATIONS}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{ITERATIONS \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Description \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This optional parameter specifies the number of passes through the stress algorithm.  A default value of 400 is used. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Example \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {ITERATIONS=200                ; 200 iterations through the stress algorithm \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Used by \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {\uldb FPU STRESS}{\v\cf13 test5}{\uldb  \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {See Also \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU Parameters}{\v\cf13 parameters}{ \par  \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ CPU SPEED}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ cpuspeed}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ CPU SPEED}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU SPEED}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{CPU SPEED \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Description \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This parameter is output from }{\uldb AutoConfigure}{\v\cf13 test0}{.  It specifies the speed of the CPU.  The parameter is verified by a call to }{\uldb CPU SPEED}{\v\cf13 test7}{. \par  \par NOTE: This test may produce unexpected results on mobile systems due to the mobile system\rquote s power management policies. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Example \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {CPU SPEED=500 \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Used by \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {\uldb AUTO CONFIGURE}{\v\cf13 test0}{\uldb  \par CPU SPEED}{\v\cf13 test7}{\uldb  \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {See Also \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU Parameters}{\v\cf13 parameters}{ \par  \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ CPU TYPE}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ cputype}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ TYPE;CPU TYPE}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU TYPE}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{CPU TYPE \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Description \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This parameter is filled in during }{\uldb AutoConfigure}{\v\cf13 test0}{, and used internally in calls to }{\uldb Display CPU Features}{\v\cf13 test1}{ and }{\uldb CPU Features Check }{\v\cf13 test2}{.  It indicates whether the processor is an original OEM processor, an overdrive processor, or may be used in multiple processor systems. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Example \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {CPU TYPE=0 \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Used by \par }\pard\plain \s124\li120\sa60\sl-220\slmult0\widctlpar\tx1170\adjustright \f1\fs20 {\uldb DISPLAY CPU FEATURES}{\v\cf13 test1}{\uldb  \par CPU FEATURES CHECK}{\v\cf13 test2}{\uldb  \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {See Also \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU Parameters}{\v\cf13 parameters}{ \par  \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Test 0 - AutoConfigure}}#{\footnote  \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ test0}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ auto-configuration}}A{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU_0}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{Test 0 - AutoConfigure \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Overview \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This subtest creates a separate module group in the configuration tree for each processor in the system.  If there is more t han one processor, each group wil be labeled with the cpu number.  Each group will have the parameters: }{\uldb CPU NUMBER, }{\v\cf13 cpunumber}{\cf13 , }{\uldb FAMILY}{\v\cf13 family}{\cf13 , }{\uldb FPU}{\v\cf13 fpu }{\cf13 , }{\uldb MMX}{\v\cf13 mmx}{ \cf13 ,}{\uldb  SIMD}{\v\cf13 simd}{\uldb\cf1 , CPU SPEED}{\v\cf13 cpuspeed}{\uldb\cf1 , CPU TYPE}{\v\cf13 cputype}{\cf13  and  }{\uldb MODEL}{\v\cf13 model}{, set appropriately.  To invoke autoconfig select it from the WinMTA \ldblquote Test\rdblquote   memu. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Parameters \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {None. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Dependencies or Limitations \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {None. \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Test 1 - DISPLAY CPU}}#{\footnote  \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ test1}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ DISPLAY;CPU}}A{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU_1}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{Test 1 - DISPLAY CPU FEATURES \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Overview \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This test issues a CPU ID command with a value of 0x01 i n EAX.  This value causes the version and feature information to be returned in EAX and EDX, respectively.  The version information includes the CPU Type, Family, Model, and Stepping ID.  The feature information includes information about FPU, MMX , SIMD and Willamette presence. This information is then displayed on the screen.  No error codes result from running this test. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Parameters \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb FAMILY}{\v\cf13 family}{ \par }{\uldb FPU}{\v\cf13 fpu}{ \par }{\uldb MMX}{\v\cf13 mmx}{ \par }{\uldb SIMD}{\v\cf13 simd}{\uldb  \par WILLAMETTE}{\v\cf13 willamette}{\uldb  \par }{\uldb MODEL}{\v\cf13 model}{ \par }{\uldb CPU TYPE}{\v\cf13 cputype}{ \par }{\uldb OFFSTEPPINGSNOTALLOWED[]}{\v\cf13 offsteppingsnotallowed}{\uldb  \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Algorithm \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Place a 0x01 in EAX and issue the CPU ID instruction. \par Save Version and Feature information. \par Display EAX Register (Version information) \par Display EDX Register (Feature Information) \par Parse and display CPU Stepping ID (bits3:0 EAX) \par Parse and display CPU Model (bits3:0 EAX) \par Parse and display CPU Family (bits7:4 EAX) \par Parse and display CPU Type (bits11:8 EAX) \par Parse and display  FPU feature information (bit:0 EDX) \par Parse and display  MMX feature information (bit:23 EDX) \par Return PASS \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {DEBUG HINTS \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Place a different CPU in the system to compare version information. \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Test 2 - FEATURE CHECK}}#{\footnote  \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ test2}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ feature;check}}A{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU_2}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{Test 2 - FEATURE CHECK \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Overview \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This test issues a CPU ID command with a value of 0x01 in EAX.  This value ca uses the version and feature information to be returned in EAX and EDX, respectively.  The version information includes the CPU Type, Family, Model, and Stepping ID.  The feature information includes information about FPU, SIMD, Willamette  and MMX presence. This information is then compared with configuration parameters from the package file.  The test fails when a mismatch occurs between the processor configuration and the configuration parameters. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Parameters \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb FAMILY}{\v\cf13 family}{ \par }{\uldb FPU}{\v\cf13 fpu}{ \par }{\uldb MMX}{\v\cf13 mmx}{ \par }{\uldb SIMD}{\v\cf13 simd}{ \par }{\uldb WILLAMETTE}{\v\cf13 willamette}{ \par }{\uldb MODEL}{\v\cf13 model}{ \par }{\uldb CPU TYPE}{\v\cf13 cputype}{ \par }{\uldb OFFSTEPPINGSNOTALLOWED[]}{\v\cf13 offsteppingsnotallowed}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Algorithm \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Place a 0x01 in EAX and issue the CPU ID instruction. \par Save EAX (version) and EDX(feature) information. \par Parse and compare CPU Stepping ID (bits3:0 EAX) with configuration parameter. \par Parse and compare CPU Model (bits3:0 EAX) with configuration parameter. \par Parse and compare CPU Family (bits7:4 EAX) with configuration parameter. \par Parse and compare CPU Type (bits11:8 EAX) with configuration parameter. \par Parse and compare FPU feature information (bit:0 EDX) with configuration parameter. \par Parse and compare MMX feature information (bit:23 EDX) with configuration parameter. \par Parse and compare SIMD feature information (bit:25 EDX) with configuration parameter. \par IF all configuration parameters match \par }\pard \fi600\li120\sa60\sl-220\slmult0\widctlpar\adjustright {Return PASS \par }\pard \li120\sa60\sl-220\slmult0\widctlpar\adjustright {ELSE \par }\pard \fi600\li120\sa60\sl-220\slmult0\widctlpar\adjustright {Display Mismatch \par Return FAIL \par }\pard \li120\sa60\sl-220\slmult0\widctlpar\adjustright { \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {DEBUG HINTS \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Place a different CPU in the system to compare version information. \par Ensure configuration parameters are set correctly. \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Test 3 - FLOATING POINT UNIT}}#{\footnote  \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ test3}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ floating;point}}A{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU_3}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{Test 3 - FLOATING POINT UNIT \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Overview \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { This test issues a CPU ID command with a value of 0x01 in EAX.  This value causes the version and feature information to be returned in EAX and EDX, respectively.   The feature information includes FPU and MMX presenc e detection. This information is used to verify the presence of a Floating Point Unit.  Next, the FPU is tested with a known good algorithm to verify correctness in processing. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Parameters \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb FPU}{\v\cf13 fpu}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Algorithm \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Place a 0x01 in EAX and issue the CPU ID instruction. \par Save EAX (version) and EDX(feature) information. \par Parse  FPU feature information (bit:0 EDX) . \par IF no FPU exists, \par    Return FAIL \par WHILE value y is < 100 \par }\pard \li720\sa60\sl-220\slmult0\widctlpar\adjustright {WHILE value  x < 100000 \par }\pard \fi600\li720\sa60\sl-220\slmult0\widctlpar\adjustright {Perform mathematical computation \par Check results for errors \par Exit on FAIL \par }\pard \li720\sa60\sl-220\slmult0\widctlpar\adjustright {WEND \par            SLEEP 100MS \par }\pard \li120\sa60\sl-220\slmult0\widctlpar\adjustright {WEND \par Return PASS \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {DEBUG HINTS \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Place a different CPU in the system to compare information. \par Ensure configuration parameters are set correctly. \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Test 4 - MULTIMEDIA EXTENSIONS}}#{\footnote  \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ test4}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ multimedia;extensions}}A{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU_4}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{Test 4 - MULTIMEDIA EXTENSIONS \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Overview \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { This test issues a CPU ID command to verify the presence of an MMX unit.  Once the MMX unit is verified, a series of reads and writes are performed on the MMX register set.  The register values are check for correctness to verify MMX functionality. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Parameters \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb MMX}{\v\cf13 mmx}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Algorithm \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Place a 0x01 in EAX and issue the CPU ID instruction. \par Verify MMX presence (bit:23 EDX) . \par IF no MMX exists, \par    Return FAIL \par WHILE value y is < 100 \par }\pard \li720\sa60\sl-220\slmult0\widctlpar\adjustright {WHILE value  x < 100000 \par }\pard \fi600\li720\sa60\sl-220\slmult0\widctlpar\adjustright {Move EAX into MM0 \par Move MMO into EBX \par Move EBX into MM1 \par Move MM1 to Memory \par Move Memory to MM2 \par Move MM2 to MM3 \par Move MM3 to Memory \par Move Memory to MM4 \par Move MM4 to MM5 \par Move MM5 to MM6 \par Move MM6 to MM7 \par Move MM7 to Memory \par Compare Memory with Starting Value \par Exit if FAIL \par }\pard \li720\sa60\sl-220\slmult0\widctlpar\adjustright {WEND \par            SLEEP 100MS \par }\pard \li120\sa60\sl-220\slmult0\widctlpar\adjustright {WEND \par Return PASS \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {DEBUG HINTS \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Place a different CPU in the system to compare results. \par Ensure configuration parameters are set correctly. \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Test 5 - FPU STRESS}}#{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ test5}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ stress;FPU}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0 \widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU_5}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{Test 5 - FPU STRESS \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Overview \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This  test runs a mathematically intensive algorithm which stresses the FPU and internal L1 processor cache.  The results of the computation are compared with  known correct values to verify the functionality of the CPU. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Parameters \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb ITERATIONS}{\v\cf13 iterations}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Algorithm \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Allocate memory for system use \par IF memory allocation fails \par \tab Return FAIL. \par Load data into memory \par WHILE Iterations < 400 \par }\pard \li720\sa60\sl-220\slmult0\widctlpar\adjustright {Perform FFT\rquote s on memory data \par Perform L1 cache writes \par }\pard \li120\sa60\sl-220\slmult0\widctlpar\adjustright {\tab Check for computational errors1 \par \tab \tab Break on ERROR \par ENDIF \par IF Error \par }\pard \fi600\li120\sa60\sl-220\slmult0\widctlpar\adjustright {RETURN FAIL \par }\pard \li120\sa60\sl-220\slmult0\widctlpar\adjustright {ELSE \par \tab Return PASS \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {DEBUG HINTS \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Place a different CPU in the system to compare results. \par Ensure configuration parameters are set correctly. \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Test 6 \endash  SIMD MULTIMEDIA EXTENSIONS}}# {\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ test6}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ katmai;multimedia;extensions;simd}}A{\footnote  \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU_6}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{Test 6 \endash  SIMD MULTIMEDIA EXTENSIONS \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Overview \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { This test issues a CPU ID command to verify the presence of a SIMD unit.  Once the SIMD unit is verified, a series of reads and writes are performed on the XMM register set.  Then a series of 128 bit mathematic operatio ns are performed using the XMM registers and the new SIMD instructions.  The register values are checked for correctness to verify SIMD instructions function properly. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Parameters \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb SIMD}{\v\cf13 simd}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Algorithm \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Place a 0x01 in EAX and issue the CPU ID instruction. \par Verify SIMD presence (bit:25 EDX) . \par IF no SIMD exists, \par    Return FAIL \par WHILE value y is < 10 \par }\pard \li720\sa60\sl-220\slmult0\widctlpar\adjustright {WHILE value  x < 10 \par }\pard \fi600\li720\sa60\sl-220\slmult0\widctlpar\adjustright {Shift 128 bit value through all 8 SIMD registers \par Check the value against expected results \par Exit if FAIL \par Perform a series of scalar and packed operations on four floating point values \par Check the resulting value against expected results \par Exit if FAIL \par }\pard \li720\sa60\sl-220\slmult0\widctlpar\adjustright {WEND \par            SLEEP 100MS \par }\pard \li120\sa60\sl-220\slmult0\widctlpar\adjustright {WEND \par Return PASS \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {DEBUG HINTS \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Place a different CPU in the system to compare results. \par Ensure configuration parameters are set correctly. \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Test 7 \endash  CPU SPEED}}#{\footnote  \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ test7}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ CPU SPEED}}A{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU_7}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{Test 7 \endash  CPU SPEED \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Overview \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {CPU Speed is calculated first in }{\uldb AutoConfigure}{\v\cf13 test0}{, then rechecked with a call to CPU Speed.  \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Parameters \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb CPU SPEED}{\v\cf13 cpuspeed}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Algorithm \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { Set process and thread priority to highest possible settings, because this is a time-critical application.  Create a mutex around the code to prevent multiple processors accessing the time-sensitive code at the same time.  Query the Performance Frequency,  then query the performance counter.  Read the time-stamp counter, wait X milliseconds, then query the performance and time-stamp counters again.  The CPU speed is:   \par 2}{\super nd}{ time stamp counter \endash  1}{\super st}{ time stamp counter \par divided by \par (2}{\super nd}{ performance counter \endash  1}{\super st}{ performance counter) / Performance Frequency \par  \par Release mutex, reset process and thread priorities to normal, and exit function. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {DEBUG HINTS \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {This test may produce unexpected results on mobile units due to the mobile unit\rquote s power management policies. \par }\pard\plain \s1\sb60\sl-240\slmult0\keepn\widctlpar\outlinelevel0\adjustright \b\f1 {\page }{\cs117\b0\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Test 8 \endash  WILLAMETTE FEATURES}}# {\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super #}{ test8}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ WILLAMETTE FEATURES}}A{\footnote \pard\plain  \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super A}{ CPU_8}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{Test 8 \endash  WILLAMETTE FEATURES \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Overview \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {In }{\uldb AutoConfigure}{\v\cf13 test0}{, the Willamette parameter is retrieved.  If it\rquote s set to 0, this test is disabled.  The test calls Willamette instructions a nd compares the returned value with the expected value. \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Parameters \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\uldb WILLAMETTE}{\v\cf13 willamette}{ \par }\pard\plain \s2\sb240\sa120\sl-240\slmult0\widctlpar\outlinelevel1\adjustright \b\f1\fs20 {Algorithm \par }\pard\plain \li120\sa60\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {Test to make sure processor supports Willamette instructions.  If it does not, print an error message and exit (this test should have been disabled during aut o-configuration if the processor does not support Willamette instructions).    Call Willamette instructions and compare the expected value with the actual value that was returned.  Return an error message if the expected and actual values do not match for  any instruction.\page }{\cs117\b\super ${\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super $}{ Standard Error Code Messages}}#{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 { \cs117\super #}{ codes}}K{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super K}{ errors;codes;error codes;messages}}A{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super  A}{ module_085}}+{\footnote \pard\plain \s121\li120\sl-220\slmult0\widctlpar\adjustright \f1\fs20 {\cs117\super +}{ tag}}}{Standard Error Code Messages \par  \par The first three hexadecimal digits of any WinMTA error code represent a unique number assigned to the module.   The middle two digits represent the test number.  The last three digits are unique with each module and represent the message index in this list. \par  \par }\pard \li120\sa60\sl-220\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \adjustright {\b Error Code\tab Message \par }\pard\plain \s126\fi-1325\li1440\sa60\sl-220\slmult0\keep\widctlpar\adjustright \f2\fs20 {085xx000\tab Test case number not valid \par 085xx001\tab CPUID instruction not supported, unable to continue \par 085xx002\tab Unexpected exception from CPUID instruction \par 085xx003\tab Unable to save value \par 085xx004\tab Unable to retrieve error message \par 085xx005\tab Unable to read Operating System version \par 085xx006\tab Unrecognized exception to Streaming SIMD instruction \par 085xx007\tab The following parameter was not found: PARAMETER \par 085xx008\tab The CPU is not of the correct family (value retrieved=X). \par 085xx009\tab The CPU is not of the correct model (value retrieved=X). \par 085xx00A\tab Stepping is not allowed: STEPPING \par 085xx00B\tab MMX unit not present when it should be. \par 085xx00C\tab MMX unit present when it should not be. \par 085xx00D\tab SIMD unit not present when it should be. \par 085xx00E\tab SIMD unit present when it should not be. \par 085xx00F\tab FPU unit not present when it should be. \par 085xx010\tab FPU unit present when it should not be. \par 085xx011\tab MMX mov operations failed \par 085xx012\tab Pentium FDIV bug detected \par }\pard \s126\li1440\sa60\sl-220\slmult0\keep\widctlpar\adjustright {Expected 4915835/3145727*3145727-4915835 = 0 \par Received X \par }\pard \s126\fi-1325\li1440\sa60\sl-220\slmult0\keep\widctlpar\adjustright {085xx013\tab Error Freeing Memory \par 085xx014\tab Error Allocating Memory \par 085xx015\tab Operating System does not support Streaming SIMD Extensions. \par }\pard \s126\li1440\sa60\sl-220\slmult0\keep\widctlpar\adjustright {Windows NT 4.0 requires SP5 or greater. \par If you already have SP5 installed, please reinstall then retry the test. \par }\pard \s126\fi-1325\li1440\sa60\sl-220\slmult0\keep\widctlpar\adjustright {085xx016\tab Unable to copy group X. \par 085xx017\tab Streaming SIMD Register move operations failed \par 085xx018\tab SIMD FP SP operations failed \par 085xx019\tab SIMD CMP MAX AND SUB FP SP operations failed. \par 085xx01A\tab SIMD MUL, DIV, CVT FP SP operations failed \par 085xx01B\tab Unable to change class priority. \par 085xx01C\tab Unable to change thread priority \par 085xx01D\tab Unable to create mutex, error code is X. \par 085xx01E\tab Unable to access mutex, error code is X. \par 085xx01F\tab Unable to release mutex, error code is X. \par 085xx020\tab Unable to retrieve original value.  Did auto-configure run? \par 085xx021\tab Original value (X) did not match new value (X). \par 085xx022\tab Bus Speed test must run on Windows NT or 2000 operating systems. \par 085xx023\tab Last error text=X. \par 085xx024\tab Squaring: error msg details. \par 085xx025\tab Rounding: error msg details. \par 085xx026\tab FFT Failure: error msg details. \par 085xx027\tab Unexpected result: X. \par 085xx028\tab Not enough space allocated for return value \par 085xx029\tab Pointer cannot be NULL. \par 085xx02A\tab Cannot access cache description key. \par 085xx02B\tab Unable to retrieve CPU description. \par 085xx02C\tab Unable to retrieve cache description \par 085xx02D\tab Unable to retrieve saved value. \par 085xx02E\tab Insufficient space to store all information \par 085xx02F\tab The CPU (X) is not of the correct type (X). \par 085xx030\tab Unable to locate Processor Information structure. \par 085xx031\tab Unable to retrieve bus speed. \par 085xx032\tab Unable to read SMBIOS table from memory. \par 085xx033\tab Unable to retrieve last error code and text. \par 085xx034\tab Unable to map BIOS. \par 085xx035\tab Unable to find processor structure in BIOS. \par 085xx036\tab Cannot have both \lquote Steppings Allowed\rquote  and \lquote Steppings Not Allowed\rquote  lists. \par 085xx037\tab Error returned from Willamette instruction: FAILED INSTRUCTION, explanation of which return value did not match its expected value. \par 085xx038\tab Willamette support not present when it should be. \par 085xx039\tab Willamette support present when it should not be. \par }}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\reportusb\readme.txt ===
USB status information is build into the TELNET server.
From the command prompt, type either of the following commands:

STATS /DEV

USB [time]


STATS enumerates the connected devices and shows basic information about them.
USB dumps the button state of any connected XID device. The [time] option 
lets you configure how long the dump will last in seconds.

You can also type "HELP" at the prompt to get further information on the
availabel commands.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hardware\stress\readme.txt ===
The only thing that should be in this directory is a testini.ini file that starts all of the hardware tests in stress mode
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hvs\CDRip\cdrip.ini ===
;
; CD Rip configuration file
;
; Place this file in: xe:\hvs\CDRip.ini (along with the CDRip.xbe)
; Results stored on:  xc:\udata\48570007\...
;

[Core Settings]
StopAfter = 1 iteration(s)	; x "minute(s)"|"hour(s)"|"iteration(s)"  (default = 0 = infinite)
ResultsServer = http://157.56.11.181/hvs/
SaveName = CDRip

[GUI Options]
PauseOnExit = 1				; 1 = Pauses before rebooting (default = 0)

[Configuration]
CDTitle = 
CDSerial = 
StartTrack = 1
EndTrack = 0				; 0 = Last Track of the Audio CD
RipSequence = 0				; 0 = Sequential, 1 = Random
RandSeed = 0				; 0 to 65535
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hvs\CDRip\cdrip.txt ===
CD Rip (cdrip.xbe)
Written by James N. Helm
Copyright (c) 2002 Microsoft Corporation
All Rights Reserved

CD Rip is a utility that will Rip a CD to the Xbox
Hard Drive in the same way that the Xbox Dashboard
Rips a CD to the Xbox Hard Drive.  It will provide
timing and error information that can be used to
compare one type of DVD Drive to another.

If you have any questions about the CD Rip utility,
please feel free to e-mail jimhelm@microsoft.com or
jpoley@microsoft.com.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hvs\diskRead\diskRead.txt ===
Disk Read (diskRead.xbe)
Written by Josh Poley
Copyright (C) Microsoft Corporation.  All rights reserved.


Disk Read is a low level disk (hard drive and dvd)
scanning utility. The test attempts to read the sectors 
specified in the configuration, either with a call to 
NtReadFile (hard drive or dvd drive), or DeviceIoControl 
(dvd drive only).

Any errors reported by the device or the OS will be 
logged. Data can be verified by issuing two reads per 
address (use the NumberOfReads=2 setting).
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hvs\diskRead\diskRead.ini ===
;
; DISK Read configuration file
;
; Place this file in: xe:\hvs\diskRead.ini (along with the diskRead.xbe)
; Results stored on:  xc:\udata\48570002\...
;

[Core Settings]
StopAfter = 1 min       ; x "minutes"|"hours"|"iterations"  (default = 0 = infinite)
ResultsServer = http://172.26.172.13/hvs/


[GUI Options]
PauseOnExit = 0         ; 1 = Pauses before rebooting (default = 0)


[Configuration]
;Device=\Device\cdrom0
Device=\Device\Harddisk0\Partition0


;ReadSizeMin = 2       ; Num blocks to read at a time (default = 32)
;ReadSizeMax = 2       ; Num blocks to read at a time (default = 32)
;StartLBA = 324900          ; lower Logical Block Address (default = 0)
;EndLBA = 2500000       ; upper Logical Block Address (default = sizeof disk (3431264))

ReadMode = 0            ; 0=detect, 1=raw dvd, 2=cd audio, 3=ReadFile (default = 0)
NumberOfReads = 1       ; 1=1 read, 2=2 reads, (default = 2)
SequentialReads = 1     ; 0=Random Access (default = 1)

PauseOnError = 0        ; If a read error is encountered, pause execution (default = 0)

[DVD Settings] ; (ReadMode == 1)
RequestSense = 2        ; 0=No extra requests, 1=Request only after buff mismatch, 2=Always request sense
EnableRetries = 1       ; 1=Retries (and speed control enabled). (default = 0)
DefaultSpeed = 2        ; 0=slow, 1=med, 2=fast (default = 2)
DelayOn062E = 300       ; Delay on 06/2E errors (default = 300 ms)
SeekOn062E = 0          ; Seek to LBA 0 on 6/2E errors (default = 0)


[Buffer Mismatch] ; (when NumberOfReads == 2)
CompareBuffers = 1      ; 1=Dump out buffer differences (default = 0)
PauseOnMismatch = 0     ; 1=pause on buffer mismatch errors (default = 0)


[Output]
;DumpData = 1            ; Hex Dump the data (no error checking involved) (default = 0)
;SummaryInternalErrs = 1 ; Show internal errors in final summary distribution (default = 0)


[Time Delays]
;SpeedDelay0to1 = 300    ; Delay on speed change (default = 0 ms)
;SpeedDelay1to2 = 300    ; Delay on speed change (default = 0 ms)
;SpeedDelay2to1 = 300    ; Delay on speed change (default = 0 ms)
;SpeedDelay1to0 = 300    ; Delay on speed change (default = 0 ms)
;SpeedDelay0to2 = 600    ; Delay on speed change (default = 0 ms)
;SpeedDelay2to0 = 600    ; Delay on speed change (default = 0 ms)


[Exclude Blocks]
;
; Exclude security blocks for ZZ01001W-R2
;
;Exclude = 44078-48174
;Exclude = 201741-205837
;Exclude = 429020-433116
;Exclude = 728810-732906
;Exclude = 885307-889403
;Exclude = 1033489-1037585
;Exclude = 1189192-1193288
;Exclude = 1413876-1417972
;Exclude = 1835223-1839319
;Exclude = 1993388-1997484
;Exclude = 2216377-2220473
;Exclude = 2522634-2526730
;Exclude = 2671954-2676050
;Exclude = 2826707-2830803
;Exclude = 3056478-3060574
;Exclude = 3354631-3358727

;
; Exclude security blocks for ZZ01001W-R3
;
Exclude = 91524-95620
Exclude = 249324-253420
Exclude = 480122-484218
Exclude = 632996-637092
Exclude = 794424-798520
Exclude = 941640-945736
Exclude = 1100202-1104298
Exclude = 1258118-1262214
Exclude = 1783554-1787650
Exclude = 2095900-2099996
Exclude = 2248718-2252814
Exclude = 2557052-2561148
Exclude = 2716512-2720608
Exclude = 2866000-2870096
Exclude = 3103876-3107972
Exclude = 3256974-3261070

;
; Exclude security blocks for ZZ01701W---
;
;Exclude = 92051-96148
;Exclude = 249850-253947
;Exclude = 405535-409632
;Exclude = 559623-563720
;Exclude = 785128-789225
;Exclude = 942167-946264
;Exclude = 1099479-1103576
;Exclude = 1253083-1257180
;Exclude = 1786894-1790991
;Exclude = 2093743-2097840
;Exclude = 2251994-2256091
;Exclude = 2404997-2409094
;Exclude = 2559813-2563910
;Exclude = 2794114-2798211
;Exclude = 2947377-2951474
;Exclude = 3258444-3262541
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hvs\diskWrite\diskWrite.txt ===
Disk Write (diskWrite.xbe)
Written by Josh Poley
Copyright (C) Microsoft Corporation.  All rights reserved.


Disk Write is used to test IO on the hard disk. It has the
following test modes:

    1)  Low Level Scan - This test reads, writes, and then
        reads again from the sectors specified in the 
        configuration file. This test can be used to verify
        that IO is possible at every address.

    2)  Create Files - This test uses the filesystem to 
        create up to 2048 files of varying sizes (1 to 4k).
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hvs\diskWrite\diskWrite.ini ===
;
; Disk Write configuration file
;
; Place this file in: xe:\hvs\diskWrite.ini (along with the diskWrite.xbe)
; Results stored on:  xc:\udata\48570004\...
;

[Core Settings]
StopAfter = 4 iterations       ; x "minutes"|"hours"|"iterations"  (default = 0 = infinite)
;ResultsServer = http://172.26.172.13/hvs/

[Configuration]
Drive = U:
WriteSize = 32
Test = 0 ; 0 = read/write/read test
         ; 1 = create up to 2048 files of varying sizes (1 to 4k)
         ; 2 = write file


[Read Write Read Test] ; Test == 0
startLBA = 0
endLBA = 0
sequentialReads = 1
partition = 0

[Create Files Test] ; Test == 1

[Write File Test] ; Test == 2



[GUI Options]
PauseOnExit = 0         ; 1 = Pauses before rebooting (default = 0)
PauseOnMismatch = 0     ; 1=pause on buffer mismatch errors (default = 0)

[Misc]
;Seed = 0
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hvs\docs\titleIDs.txt ===
Title IDs for the Hardware Verification Suite

0x48570000  HVS Launcher
0x48570001  Sample Test
0x48570002  Disk Read (low level read test)
0x48570003  Read File (file system read test)
0x48570004  Disk Write (file creation and writing test)
0x48570005  Reboot
0x48570006  MemCheck
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hvs\docs\Hardware Verification Suite.doc ===
Microsoft Word Document MSWordDoc Word.Document.8johndaly Microsoft Corporation Hardware Verification Suite Title _PID_HLINKSHardware Verification Suite jpoley Normal.dot jpoley Microsoft Word 10.0bjbjk Hardware Verification Suite  TOC \o "1-3" \h \z \u   HYPERLINK \l "_Toc530195570"  Overview  PAGEREF _Toc530195570 \h   HYPERLINK \l "_Toc530195571"  Goals  PAGEREF _Toc530195571 \h   HYPERLINK \l "_Toc530195572"  Components  PAGEREF _Toc530195572 \h   HYPERLINK \l "_Toc530195573"  Database  PAGEREF _Toc530195573 \h   HYPERLINK \l "_Toc530195574"  Web Site  PAGEREF _Toc530195574 \h   HYPERLINK \l "_Toc530195575"  User Interface  PAGEREF _Toc530195575 \h   HYPERLINK \l "_Toc530195576"  Test Library  PAGEREF _Toc530195576 \h   HYPERLINK \l "_Toc530195577"  Database Schema  PAGEREF _Toc530195577 \h   HYPERLINK \l "_Toc530195578"  Results Table  PAGEREF _Toc530195578 \h   HYPERLINK \l "_Toc530195579"  Acceptance Table  PAGEREF _Toc530195579 \h   HYPERLINK \l "_Toc530195580"  Launcher Requirements  PAGEREF _Toc530195580 \h   HYPERLINK \l "_Toc530195581"  Screens  PAGEREF _Toc530195581 \h   HYPERLINK \l "_Toc530195582"  Test List  PAGEREF _Toc530195582 \h   HYPERLINK \l "_Toc530195583"  Edit Single Test Configuration  PAGEREF _Toc530195583 \h   HYPERLINK \l "_Toc530195584"  Build Collection  PAGEREF _Toc530195584 \h   HYPERLINK \l "_Toc530195585"  Results Screen  PAGEREF _Toc530195585 \h   HYPERLINK \l "_Toc530195586"  Launcher Initialization File  PAGEREF _Toc530195586 \h   HYPERLINK \l "_Toc530195587"  Test Requirements  PAGEREF _Toc530195587 \h   HYPERLINK \l "_Toc530195588"  Test Initialization File  PAGEREF _Toc530195588 \h   HYPERLINK \l "_Toc530195589"  Test Library  PAGEREF _Toc530195589 \h  Overview The primary purpose is to provide a suite of tests to verifying the release criteria on hardware components. These tests will be run in the software test lab (where it can communicate with a backend database to store results), and by the various hardware vendors (typically without backend support).  Goals Provide a set of tests that can be run as a suite or individually Make it very easy to run tests Supply a uniform user interface for configuring the tests The main user interface and all tests should support free versions of libraries (so they can be retail signed) Components Database Owner: jpoley The database will store release criteria for each type of test and all of the results from the test runs. Web Site Owner: jpoley From a web site, a user will be able to view the results on any hardware component or test, along with whether or not that component has passed the supplied release requirements. Administrator style access will allow appropriate users to configure the release criteria and purge old results from the database. User Interface Owner: jimhelm The main application provides the primary user interface for the tests. From this launcher a user can perform the following tasks: Configure a test to run in a specific mode (by modifying the test s settings) Run a test Configure a collection of tests to run in specific modes Run a collection of tests View results from the previous test or collection Save the test configurations to either the hard drive or an MU Test Library Owner: jpoley The test library provides a collection of functions that each test needs in order to work with the backend database and with the launcher. Database Schema Results Table Column Name Description Unique identifier for the row Timestamp datetime Date and time when the entry was created Device Type char[32] The type of the hardware component Manufacturer char[32] Who made the device Firmware Version char[32] Firmware version Hardware Version char[32] Hardware version Serial Number char[32] Serial number Test Name char[64] Test application name Variation char[256] Description of operation or test Status 0=fail, 1=pass Number of Operations bigint Box Information Complete list of components + version numbers for sw and hw Config Settings Complete configuration setting for the test Notes Reason or further information on any failures Acceptance Table Column Name Description Test Name char[64] Links to [Test Name] in the results table Percentage float Notes Information describing the Percentage Launcher Requirements The launcher will have a title ID of 48570000. When a test is run, the launcher will call XLaunchNewImage and pass this structure: struct ToTestData { DWORD titleID; // always == 48570000 unsigned short testNumber; // test # out of totalTests unsigned short totalTests; char configSettings[0]; Screens Test List This screen shows a complete list of all available tests. Selecting a test will show you a listing of saved configurations for that test. From there you can create a new one, edit an existing, or run the test with the given configuration. Hitting a different button while a Test is selected will bring up a recent summary of test results and whether or not they meet the acceptance criteria (all information pulled from the web). Edit Single Test Configuration This is where the user can define the settings for a specific test. The launcher must parse out the configuration schema supplied by the title in order to know what settings are available. The schema file for each test will have the following format: field name, help text,  number , default, min, max field name, help text,  range , default1, min1, max1, default2, min2, max2 field name, help text,  string , default, option2, option3, option4  Sample Config Schema File Device, Pick a device, string, \Device\cdrom0, \Device\Harddisk0\Partition0 ReadSizeMin, Read size in blocks, number, 32, 1, 1024 ReadSizeMax, Read size in blocks, number, 32, 1, 1024 StartLBA, Start address, number, 0, 0, 9999999 EndLBA, End address, number, 0, 0, 9999999 Build Collection Here, the user groups together multiple custom test configurations to define a sequence of tests that will be run one after the other. Results Screen After a test or collection runs the user can view the results as they are passed back from the test. It is also possible to keep the frame buffer across the reboots and show them directly to the user. Launcher Initialization File ResultsServer ; Define the web server where the results can be queried StartUp ; Specify a config or collection to automatically run Test Requirements Tests will have a title ID of 4857xxxx (starting at 0001). If no configuration information is passed into the test via the LAUNCH_DATA, then the test will run with default settings. If the test was launched via the HVS launcher then it will reboot back to that application passing the following structure: struct ToLauncherData { DWORD titleID; unsigned __int64 numPass; unsigned __int64 numFail; char notes[0]; Otherwise it must reboot back to the default title. All log files must be stored in a save game (and should be less than 8 Megs), this way detailed information can be retrieved from retail boxes. And the test must allow Left Trigger + Right Trigger + Black to manually exit early. Test Initialization File All tests must support the following items ResultsServer ; http://abc/dir/submit.asp (empty if no network) StopAfter ; x [ hours iterations ] (0=infinite) SaveName ; name of the save game log file Test Library private\test\hvs\utils struct DBDATA { char *deviceType; char *manufacturer; char *firmwareVersion; char *hardwareVersion; char *serialNumber; char *testName; char *variation; unsigned int status; unsigned __int64 numOperations; char *boxInformation; char *configSettings; char *notes; // Sets the filename and Save Game Name for the log file  void SetSaveName( char *saveName,  char *fileName // Like printf but writes data to the debugger and a save game log void LogPrint( char *format, // Delete contents of the current log file void LogFlush(void); // Sends the test entries to the web DWORD PostResults( const char *url, DBDATA *results // Retrieves the criteria from the network double GetAcceptanceCriteria( const char *url, char* testName  // Gathers various information about the system and software char *GetBoxInformation(void); // XLaunchNewImage wrapper (avoids restriction on title matching IDs) void LaunchImage(char *xbe, LAUNCH_DATA *launchInfo); PAGE   PAGE   Microsoft Confidential h`\XTPTPLPXP gd4/N gdlQ\ gdGjt gdDC7 gdl%y
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\hvs\launcher\HVS Launcher Documentation.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Hardware Verification Suite (HVS) Launcher TitleHardware Verification Suite (HVS) Launcher Normal.dot Jim Helm Microsoft Word 10.0/o=microsoft/ou=northamerica/cn=Recipients/cn=476443 EX:/O=MICROSOFT/OU=NORTHAMERICA/CN=RECIPIENTS/CN=476443 /o=microsoft/ou=northamerica/cn=Recipients/cn=476443IDATx^ :]]^^ L<#5rv> cpX`i jA[U7 l!EEy J_<XB BtOLA *jA#|4 ;SoDG$o! zu`L[ PH.RR$> qaIc[ZeA !P#0HL`0.v Z-br4 cRglRw -g[;i lha|X58 K,=O6 tooW+ Y_lVT pQ="8 /-*dw  5z10pKZ  c}q. ):bsIO |IBDUA FB,7F 0Z8rT"! B=eLH, 17\JM7A %iX$W` 1u^H+ 0`Pl$] oM|*~ Jx+54$=K J9@r1 QPjME. X)1/K .HA&x J_<;=3 v<,>RC )k0lF ; gM6 ])!Jq !i+rB O[F)R!" rkO@q +^dg: -gKD' R|8KR l)G3d 5,*D9 zX@&= >E**N bs*nw8F tROuc T@OTd ;3A/) (d2AZ6 aEZBDJZ y$zfD Pm/MDq* 4tr - o5Y#~H[ \(i,Sf X+-Y$ +qF\; "W(5e pnCc  $Qj1G0a >+ZYjC q^;s{ Y#a~pNrz <B5.b >=*Dho2 (VE*# Y)7!t 9,|&*9 3ik%P e~[,} *(i<R 2n%&K oyf,F= _<HIpNK U[YOX @P"SI hOhA k 06.Z" Jc(vz 8,qwuZ &bT:f fb~o_c vU5?E} sj6=j V:5e% (QTN" XcW:I UiqvqJ} 63Lv'b XDSUK J-"@a :^(mE 72`Y2 T^4KF. Rw0Jq cth}sz @r;_k "FzSZ d'JwT[o\ LXM#+ uA9mzYl`sY(ko <**xS |#!`8 $.v\n 9K|.1  B[VKB6 TLtoF  Ic-a {I+/HOi Jd&*X ^HQ sI ?9;Z* ~Cwhlm ?Qr$%fNd -+k`G 0Ax6Q *P@6s 6<>=S` 1AkQ\ Qfa*L $uP,VZ 0A:oc gm-X, U)/:l QY&+- sBpR,: <9Z<9 R}qtq)V K6}NS V$^bNw zP$QH 6-\aO M-0<yu bIFW;R -1`+( m"0KG< -VfHJdR t#v@U#}d' faFKF Z5Y0Z $c0Ka q9$jj4 $0*Q-j 8(A@G 6Z:&K/L> F9v%8= <JpGn ^cEdl #-Gu6 7FuIU #oU\t TDDAEO &$N"r~ o*ZL;n Yk{x?hl OG4k9 0.otC 5>Rk` Sr}{?S{ xW'5* &rB$+ GTNNf ,Uq|3A; #:4YB`~u cz1M3| 2re+y 6\h6~b %am&b P)Ya} *<>zt Go=Re9v j3(dQ \=5RHP c?Z`g{C BLbxU5#E `MGhf! `F^6B {#WeY ]:om5 Aex3*h. 1v!'"{ 48aWgO IIXA& \%)PwVYS ^h12%f S;zW\'BP I}Vgq. JE9&JY e3P)+WB Km|Vm kpN3& &v_1c |!L-h F5uuR NEMYQ cYS7& NlZ^* GN=r`m +>k~{> 3pp18 yt~q|q!g An^\) 9.%#M> FEQb@ Uq"vCJDE WTHY!B }/J]\ %,nB_ *Zt6)- Ya8-w =vg6i $koSQ RNRor Ln`EP <>>}t Wu*/{ %pjiZu <r:,/u MuOmV jw^uw/ |#<(IM MBQ\" |xkzp %T12n9sT d3C'P 2X<MN =IA2(| J'/<3 ,V'Ry  vy(4 |^a5.] xf]_t _<&eMQ pP=Rf %4zu!"" O'V%E g)HHa I {?6is bb0"d oY,PV(;> '>QX`K d/|Nv a@Igx "0,O k 5d 4> fJyE> ZeiRE= q14gYT YNyrvc eFg>N /TBTA Y;byn K]yF4 N0].{~Y xG&h$E Yp`f| Dxp2^; !tiGxX NLo<.C zYg)o >^z6`p ^`Sd:O {>j\S 8lX?i =`)Me1 b:%F3 -\ WQ P`#># pJ$K@ &.yv. A:yt* 9]5I, C%rhj:d }2z@%L 4t1]dR T:Q=# +w=KUk J/caR ,-*f| 2^*tn8 J$NA%$ %6%{+y Xb?|Cwg [)1aq M&7tx 1ZJ}g H_=V# \jNF[ $Wu9X :R*Il {kI)| Xm-!2ig8 bC+ C 1cYCg t'N~N /=lN6~PR "u2$5O cK%OH 0-/}b t$l5@u hy)!;@ k57kY0 udERF) Z,Wum.$: yZ>be n$9 3 V.zZ` /CtwzkC {<`+> OqWM* tv:YLX eXK1. E8S^p y8|j9 vW6pH$ !zW6iG jd_W$ bZ[z<" QyF=J9o <d`a+3 T7kIap Th1JWc 8_:GQ> Q6/.V: kjlR( $B`djY "xlag '0\^` Q}JIk ,*6OeF =M:@s j(MY^~ Z_gH!< h)`fOP= R)DB8 YROX6 zwDQS`  '%Lg ~7O`s VgO<| SRzh" FhDbhb$ yE:'@ ][Z\9 TkR}- #Fi4J !sDvA~ NdZ~j f1_Q5  tH\my Azr)` =,YV,B c%gQ( q>{0o BuVA$m[ 9Jf]I *6IX5 VEuHq6 yRf;Nj_ xM[,h :;0Ai .o8^~ vvq`I 1 QVC 5D4PBM !EPm=pL fJTI\y tdk^{ ^}U7!K 5d4{R V'q`C v"MtV e/6-k ppetN MPM+B gb<@$ p%2"4C 0I)`c9 )YHKN IQmNG; &&+k) 4sUZC +EJQP eEO}78> bKXR$ _Z9Yf# i| 7` 0=&zd d0^Gw 8CR%+* SMFv7 .bHux T&'5rP ~f,I$)* uV)`S ]L3r8 +obmE t)`sY y&!8x aX<;Zi h7m~j{m3 :g/VwM ePS E] 5ty*\ ]Q=uu si1fJ^ rn-ovw O}-S  qMW;H OM5K' //gP\ Eniux^O kvZ0P l[[YP 9MB*c% b_[d& (i?N1) 9;zigg sW4S\ _DjPc D.Lg= |l-q , \~lvd X-${- Y^f"/ uE7-H \MHMN E\C_~ b\z6{ 4i3F[ $IIF/y /2Jx3z /~'|\ GO._: <5{,. Q&>3[ ^IHO1 ElXJy 0{Eh-f< l+i|[ /MoEu l*jb^|m: v[)YO @6.Ob GeL6V bmm*5 ,SY3"q :PlF= ThBL7 e;{{O?3 da%!{ /^yiwyo 9oY[RJ`03b >M^V9o S*L~V n>{^L fk$-r d:`={ 1MHW2ou N0S\5=I= 5uiW@ .(s70 &h-c% >h1A5 K'6*6hl{`&h @pOMg 2qnD9 i mc'De j}FK- ~i%Kk KfC"O+tv `T_k@ c.Of+ 7T]:, ebH]b/) fIK!B u|TEi 2({X8 "0{R~ nJsRF{ `Nn#@ m]2), Sz%@L =#UIJ <_BXn( hSpbR3 J2C4d M&K2\ ZIkiE ti#2Ta $PXZrAL` %M4c> ^Wgo8 /Wwo+ V4IDL "?hd5 %`H90 |Wp"U ~iwec gg7+@$ 4$bzM `i_iZ*`[6 C\tXw .aO4n {'Om\^y `A 72 <-I9# XP4Srn  ^s-Z vXY^= My1b~ ,\R-F  LS  +Jbw% ekOaE! H8L87J 0 xPp )Qr8d L#f\G ZaO$^8 tFw>z <]l2F ?map$ zRR"B :;+mquk EE*<-t M<TET >okvz TtWY| SV[iU }o0(] $Dh;9 ~swW?% /+R)[G hxZrpbV} ]SRnN 1&G)\_ _N}4k V^+nV e;w>D !$]o^ VfaR3!%c d.$;| ~It(~ c[PN^6 rDDG$>' _1|*! c+'6hB! n$T^80 =e/Q^7 yououm H.+(M "zW)"L/ ZS1IK T1< `Zi wt<F' Hh+H(: 5ezt. Zr_L=8 \4^N#Y _w$_} "CY"( }uQZ9 ii&2F  cpiYv"] L]|cZ diP-S HL.U> j4kcJ d47K!i Z*\3H InDHPLn^ ;kZLNlj@ <pF,2 10Njq !s]_M .^on+3 ,xktu )D&-i dPKO# vJ`iMRO K[TG:s \_UqB&# X4]Q$23 4whId hPtaM we6q3^ i@xvm ZUfuA l~it<A Ho<S\ <|6,E Sao-m  |{l?e 1{(&y *,MtiHZ #0d-@# 8o@zE Z#XHPDK XP~\n @c$&Us Qu0i. -{mKU1 b}ROIj CIul- f:Qr: ddN)sisq \9u`vl sEG[j M_~mz{N #d5.6 CHVAWE 5MRx"  qAbKBX B20%,C VITh1H g?|dx kpd1Y9= ;Gwm\ .]<;s fj{e]Cdk( IDATH yLIuh Xub6t ~ymt` /ZL)MP -B_PP I(=)U FI|15. A[:!2u oB25q uQ_zj Q*$!M w!V08~X 'wW9S #l'?: 53C}? ^reWU[ b5!GD h'MSU (nw]? P-$7\:9 E{E7= x+zKJt bO8hLKT g{66A#=a JeJ3H CW6ol O|k[% }Vmx; fxl04k gu|t7'G l)e B!L@; 9"nDev %><U(- MEFPG h2xW\ pQD|s KFPf" 9]L*Z .ea<` -=/-% \oy*% 5y)~nQ PW)jm S{I0~ D6|:n nWHqFFU ./_W2 ~O8Q. /BE3N csb8S> $j6k' ,%W4oH CayVcf'_y ZIs^# +QMQ](9s <b@Df [69@Vb! h!u1Q 5fwrd i\y#2;X K`y*h H1_G( n^thJ |ZmuCRL i!YyFJ m0/[w debGO u,Xw_ S;7J2 !`Pma Y=V2'" cW9aT[ TG:nrg ikN('d DV&(F <nO-V "w^Xa o3Q[K 'v.ic 92GF{ Be41! D:yM{*T  1bH# )';3- :IR*G UCH7<Y h]n5:< C/y:]= $McK] 3K?bED ^Wy=bU {VV_zj zQPCn {OZOo ca..4m9 {ttp' ua`]j ;84dj GY)k!D` aSC+J .A,An o<{>8 P@kP" aJNXY `UX}7 C./9vR Cbo;Y `c~kp c1eHeqsH 7 =4tcV YzgL]o *J7%39 rk-V"" %\y.S >4#oSRP 62(W( qv}~c gXDnH ),}|[ Z;?w{J N%QF+ [#a#IYQ -c#FF T!J){@C LS+{H )bLTgH_ */MVJ BZ}5lb+F 2)MT#Lf *[3a' X",*DCb 5$[IH 6LpzR l^gTiC8Id j5b>[. ?jB=ku /=+0c 'liC) U$fSAy ugn%@C% nnB%% T$n.X WJ]C: f^Pvu| ZEsDWE% b$x+` 'GM]k29-+ GAKl` lgFJ92 ]#T V"X 9u:uJ ]<qxK F2~J= 5/.u8W $al%u2# RWluP |]!wK ]-5V:&i ,i`i+ `kW4e {KuQH =6;slv =:;ut nJjitX H#W0+JVM CQfH[ 70s[# 7(D0M 91Z%a &r=5f =,]:sr WHL%F_ Q2i[m $''N%qzLq V^Eb(V (F'@~ :/] $? mWv`Tp Fi\9q= xd!WQ 5+N_wp W_9ql =v<P5SC Yb.F, B`,_#S; &|iY\V (+ Qb Ay(2x#.0 {2?&@ +Y:ul>A %m`[) j-/c  Q'*c+d ~+&_7Z "\Nth "q@=b u]g4{ X$oy{< ){2g^ Km MF Onv8R G9;=Jn ,py4] eUt-y 7kT[+ 1:kDiV <>NX'A9 S[VNr 8\A/m aG*VVUeV boG*y Y#`sE ;ry{HpIbN U^TnZ $he*Y iQBDs =`=UKzd #7@IV p}.<F LvTMLHAb jL3F,k q A&T ]CA^- ^:Fe@ '1gJB &B'B9 hhe23 "EH2Q V'.Ic {+S(c, zD/y{[ 5D"`S{X a,A y X)M)5 ?;de*D PpB7X u%GGB& U7I#Uu 0O#D!| [,4vp# Jz<Cp M<P#B 1^EB_zN )E I~dtM yZCU&2 pB*_$ NZ/Dr g#.~C [s3](  Fv>FY .]b4:s H/GKS ,fwsL 2T,XiA ,HW&KvR 1r691A L,0>,lF 46_?jH 3Jt#o< <Gd' 0 Wy&#7* #<)EH UF5{*  Kx#w7W  =1y= iuHCS [mXql 9V#w4 B5.j< QWb-)(Ls3_ n4}iR U*!g= 3'WeJ HiS`, 'l6 0 6L(l+ 3O'vC?X 3Z<]u^ n,^6/= &28Mv ZpD2p '?lj>R V|Z}! lkGxv W(q<c i@2*M ZUYQT_ /GeMDm #Q!qV oi8."7 TD}:32Y -)+bN Et+A&w jfTOw I`WGh =EEvH \0$<n 18`l\_ !]dV' NW`G* YPtqy 1fI+#A >Pdgt q@VfE _>#M9 Y>Ctg %%}z) F3X;)p -28.5~ IB*[* J-.T) f$"`HA)X" r8{V`up ;K-=X rxrfa :A%;|@ Em\%~" Dk"-T aCgDk @:<>@ uD<[J KKyKu )hYf@ u^rit D(VL0(( *S[o\ |@9r2 yL|.m z0q0x ndiq< |QlX+ FjT7u B>Z-x9Q 0W:dCm ,[cbS 0.:kN+O c;'g( 0 M 9 S6+as g5z'Q ^9DkS >_XM+ 0/SDlI 67h]c H1E:MWY\ `HIeZ WUFC%C~\P (}c::z kJ$q> mdk/8 tphrE^ [t0{j k^k{T qE/O5 ;z^EU~ ,w"e9V bodo4M.;B [cd]Y u=?k,U VK25.o (bRDi n.I?iKG z^DC<K ],K7`a lA:{X ?g7p^ 0Cuy< '/2;dh 3?%)" b%sHW XGD4_w 9]3X5jJc 4ihjb B-qZw %E^y~ dVY^p u$a(712 UMlv= wI^h` U=_#S Y4js&[ l)JC) Me[9A lVA7c XS)]6BXm c_n}gn ff}@p /@&qe ^Wf ? 0i V.#B yVH&V K G$6 9p:lM >goo:= =wGe2 8`05" xLRaC kuia^`@ u~Z\U \7`Se `/5z+ Y*!rE pMDx;h bTB!" SH6hsD s9a.w [qx^m B^s0a 9cnqb3 6YVn.q Q0YMZ _YU8c1`S 7y>dV+T _&=-i]Z 0N@,Mn z$[-k /_r_2 |;]=~U. nzBMV 2YD} = _S(j) <RR2= PO6o- B_;x@! \:2}A/ G >ie T%V$GdE |:Z|K ]$hc_z :F`iX /q_Ay `ny\j^ |5U0v f}QU]@ t{TV/6 8$\Nk ZYi># %xG?m* S@t4_ _fV\7 yQ[2> s1^Uk NKKr)<t[B L0b&(e BI_ZU "{R|l(U&0 >w&uR_j |WaJN _n.ej' 3Z}e^ ~T]I}E kG~.w R`Djz @MoT6T 7$-)k '6}+b `2vZ! GTH\WE fJkdz- GXc\4 xsp<Vw >Z,W]}z pB#s&) -,y9O1 Zsz|b tS\3{ ~cJ[{Dzd HOyow q?6Uj 2"93& ~&bXvI4 1G>zti |C1~1 <vLh& Oi 'a O {VA 3"PMht tO;sb )%Yttv {D%>at  Hg|q :D0-bM KhDDJ 0x=/XP j3XbCgLHf c_/6, W6Me  a9)?i n(H>T Leca\ 3sFGr %CycO?+ ,YW)> ZTe?a #?:4G vv%szO XUg<p p+McC /BW`vH #?(Yr vAF~: wfcY? 7q0j] svcy4 iI=e\. .'a=!P Tj0Md 8Ij4t WsP)B +_CVy u{zYc b#im|  /0_r |I7D| VXLmq uNq2o .WH:n fEYB} @Uni~ ?BQv@ Q5AIC u(MLdS ^i{~Q*I %IAs+JN#d B-xTJ h~'/3 7uj 8 %!Q{O 2qS\B: @eU,9# 5S=Zf) &7\WS e)r)t ]rl3~Qb;A :gQK?[ \d(rD <OyZ;6 {P`"U 0(g6A hpIIj 9_:[- HX x6a ft#-p v EFDQC1R '|euj ,!YF9 +G'I8 j-T~T9**M_x Au4I, p"u(= 8R)|U6 f884' 4%I2E EB-tH z(`s(| +01.q _5oN( *EM]Y ,g:_p >K*6C j%[fg$ 3#I\F f{+W@ $j+a< =AC)K ,k?GU pv#+I8L0 -JH^8 h[NXW &O-uAi IerA2 1AVCi` >U#g/ $?#lC %fR6%I8q ?)}XU ZWN0f. PUgJS K~%{Q B)*sI  XBL%y qjg$/ E5$I/ (g>E& %1q~p tR~h,| -]D]G J K]0 q\"j@ |/FHy 6K-(&qMEM. \dHh~x AUe9s:i ^;!4N xBH:L 98x);j q"1m0[ Sg!sJ 9c=5] ;A?'E p59e/M <N8j6 ,I(d+ gI3@L HbK+I tJJ8W1%u Uk0'M GHqs; /u\Ht $tb^2 s+in7M TQa~j $3#hi. 7(X"J &2)Jd J1%v@/ [ap!/{ duyI( lL2}Y/ ciSvf  mZ`=z miI-G VU3FA ,l:5kw *ElxX |p'4v g]fK\ 86,/2 $65&#c s;Jq- S)gw; 2[wm( $?GC+ 09-;@vv\ T7ugB Alw4X A2w>T 3hc$w0 t&(W  9A2>W Z/*yU edtEG !K+I\ )7)dJ G%r*Wu G/l\x %i5{9 t%a#x <=S^4Bq z7'|N O=zjz FtiT?0D b@piX ZSWn$U th `7 QSYOX lm maM 7Hc|"` p(s`X NXhe8 $]hCE / ?_9 /NI U ?3}`z 4_/0nN !'55G 0P>yd Yk,Tg 7PBBHA &E)Aro >3\|Yu f^"7O~ t?2j^3 R0*fo 2t}jS <P[Z: Ht(zZ' zmsV@: ~cW4^J -*%e| rV[nC "M21j sV&&t6R tAK2^'H Dx1=A :xhqa ]6;s`Zu ]5'vT m)/ew tuqU&B V$R5n m0P0K +^r`iy *bn@2}K "0/~3V: =Xm]^m] %g+~s| eH`T0 em?(F Hy/_u! If2+H As\3n \'97* S"$We#p1 tP{w$ k2wLF 0Ca%jal: +l8KqE ,N}D= GrAS8mf [ceBBo cz&#9 DhAfc5: fI-dZKp M1-)i jQ39U $)-2Vf 7jv"! ug6Z? r(3Q-[ +>}@TS a0s^2 HsN!G 13]kc :!r4j ,2;5; 1:Y.Q QO{>l O~Q_y lxp%^o p=[qb n^DsP y{")W GHbiN A=w=N hM4F[ D$X=V C-2:Q '''1;F4R w9*<q xi$75) 3]!sY 9j(1nsU OWz'p L/=zU 0%ggq[ J%Z-76) 41sxb Um,V. :g_0l? .WW P z5c!9K HAO-M ;b_L2x 4/`~F 2;Z{! AD|b@!H F/wGk \'i]7 %<."3K{ SWOI6(' 8b2N,# ZK~hr$ 8R.Xw$Y 5A-9^{ *SU1wZ&Qc lw!#oZ f8O,L 9WI<8 O6$M" o=`UIFg>{ #&#|i tH@Yl; 9QsSs ~u/tq SYlA' GFMaW6 5Nb8w !X_P@V!r >o8u}e 25QP28 KHs<KG .7J%3. fZ2{W f,PP[ Lc2KT Zxl[!;i$ F,E5;k 5j&0= <>J#S ^jB-; 7\l?Y ?E,m3m le7Uy #g^yV (_l`\ L2wGG Ffm|B etT>I!>H e-n.b$ TH2Ia <G@&A| AkbZ.{ hgeX; V|c+u 2*ZV` ;#l?c h5duD| rRfRa Y**Jw !5rAK f%k%3 c"i1'w 98jQH= -TK:6 ILUgW1 .lmCPo Nwd]z@ !^()3 #?Tjw!L kKh'2 3@-oA? TL[%ek) `8ylA Slt:yx fa@x <z asI'f o6("Z !rD]a d{*7R]m g?O:.g2 <tg23 @/Q)r ^=yn^ {@&Q\ bQ6qv j*'PA IR.`cK 315|_CI" 41\G} eotV, OL/~| 8_K7F =jw?,: e)=+Ou`hYE: vgy[WJ{ b$GGA 7y_m9k: ~&3L& *<!Z& EVBCQU j:(/  {(2GY 1!-N],w 0>J-e2 z<^1R= p8,q$y~ 'o'\( cxm|72F &|@?# -H)?u% }DDf" d]p[o, 0V*3? sp=_w( =EFz) ;QAN  |Sas{ VYV(1 !&:Uh3! R0Fv%q6 (O]$q kS*uc GmZ4<,o X}-tA i)MnFhr Nw?8[ f?}d{ {"j_@ Oi&*i iMOL$Bp of<U  4_T&99> Rf-4+1 ge|=w t=w'k srv}v qu~~u XXxxyF Zfig" C)<1<S K*',l LZzh+ )|qNX $pd|N WGBRPQ$ ak}g< DIDAT 2jvtW MST/] wu.3V QxU7* w-,62  d*6h 2Lp"3 IDATx^ "$!IU wuvuy 0dB\< L'Ctph 2l]Wb dx~vq UdA#|4 6H?Ok ==j#vI _Y&m0 I_3Z_ pi<b\ g1Z&^ 7gCpd /QpH3 c<?]5rQ B@.TF 6oQw, aDaMb C7&@1 @Pf?)Zp: ):bsIO j6<SC1; H:Z$o 5S['4\ PRZP;y5 ik!@=2& 0+X~_ 7-%Ln %fx6] Gfsmbp d$a)c &X#XW kJW{I FZ73z 5bVtQ $@3`5b )[fqC }L#KF ED>o&( =s0kt .S%,y i"3)5 x2y3A= o`m0m( |4jj= +^dg: &~V-w }^B@` 2J(O= u\62EG ,Y,+? op3!/[D e*(vR +kV.@ _J 0eS L[l{c Se3:J { L=3 (MtT, L>LMJ JTN$. $E7Ri "MBrs tZ$:`*R^ !30]6 A$P`,]<s7 FKs90s\ XjOm4t imQ$7 FXVY/ M1Vp- &9)%% H4?qN 1uh4_o HW`[e Y+BiZ. fjV#yv6 )M)R: hB)SH; -&ea# ](i&* T-qKC 3@d1W?Kk w}lzs kL{j!3 7EPA# ms;g2 cRY`y 8;;!XC |-k5V [K"Eb 6Nf*a I9-}T -EDLF fGy:"  +bsh LR<OB lq.A0  _@RU^ d;Xw& Z?zyF UB4}t T%I?>;HNShF O6dyO1 {h]B"i N-DzYK9 "F;<wb` LXM#+ UXeOf 9)X.J '~UAXN k@b{v PX"f'Q 4 @y9 *"1vC l|KHm$= G6"Saok3H 6cQ[i$ ZKV""lCH XKXiQ r%D`Q  &"u\` 'gGK2 JFlo/P m";<(4 ],,J0' z89"P `C>Yc .{lvtq 9?>_<X m8<%- yo'qv =m:%I 9pr[(J lx|zF` +<]MW ?TRs} Qj#u{:; |H=9)H a"'DQ dH)/H ij*&^# 4Q9c| ,a&]xj E9~vK (VTVJ Nr!8@ hxmPZVweU) :tWE06W -Qp39 r{\UXk Fv$eJ Sfs/( "dDP  >eaDad D\\EW BLK2O( "=CF#Y IF{?{ hct.mC ,CRZ"g SiGGV' D$XSp +v8Op_ Q_LAa ;o!>k yIpdy >x2$%S; Z,&0BU AFaZn "=ULn x#4.KQC 5>Rk` /1;1O @:7en 8@Li'E K`3^|OF 3*Gb7 oo}~~": P$kY=ms+ 2,;Sn dmpIX :eveF B7J95 ~gw_Q iw)6@% %kZpQ g.o-N m]o~@ vJOtS IL^UfDD bgl;" TjKJW UYV^j NeRp3 l4Kw&O pRjNVU t/AC' Ht$D) *@:E9 p}%Qj -E6*  ot5FOC<2 R=`[; 6>S[Cy/JvP ;;;7Qm| +OI,B }H/jG (%_{J ;;8<` e>5~S' 1QHN3 ]iK$,%s) V"$(n I1HWk x3#IR> z]$#M /;4H8 >-_lIy Xn*Sv'1=E k_o\r cblhm [sw12 k%{3N 'w{$@ rPR6v ;BC-F 'aD\TK jaS_E'#1Y c[r(k) D/:bH ($R(*M RS:TO *vu)R R(1I8 ;1B%c1 ~V5}m fg@i4 _?Y>: 4uAN$j w|'s? gU%,PC  vyQh C*&u{ <a5.] cLm8. NYJ ?~ T+{>> Krfcy $Omd% 6*EX= uD'G! W'qNx H#9[W dLqTd8 syza 2l1 +cHjI ].NtTu ;(Xj"hb s2TOq< <Zb|6 |Z<Iq ,_/nQ C\_*b CqxHf %XxacI! -So<K5nU Gko>X 6D&LFC %;J~h !Bn3, z:;H  /0Y%tY nX2f!rt wk{toc N0].{~Y gmemR* e;S'S mccU*P Ak6&v 6sYA"@t r9}70 ^`Sd:O YDGp- k]AXm7) IeQ[>Y. g{jF0 +@ZCM s@N4( "WEh, R${D8l >(69Q ir- L A)$]@ TTQH^. |P]=H o<.Kr Dd%RK g'Tnq] Zn{%=2 xX_rm F7=%I6 u8yx| }!EYZ &honV }jbUw '5M)% dE7~" f`Wgo qy^vT* bmduz _7g7^ xIUDo> j0EDQ ]Z%<} eO6,k 5^^_]^[ %!7.O4 Fw<Wmu ";&08_&5 rdYku 7wOwVW %e[p} m8_A^ Kx/x|/ rkpb? y,;E& s|+aNOW `a-Xe /tjiK&nH z]>9@ 7|F'iY ~k886 h"%r)2 d/7@] p/"^~ kiK>]a IDATv MC3v4&/ oY>X# {6=N<VY RyGHl ;7*gJ K@b?W +nq\v n>I+f )19YK{ t8J&\)w gFjVL O,CKj At, 6 "V- x |5nL\ \8Z($ ^c7+l }8Sq[ k_^FT) b9$_N *LDKt -tftcg %F{T< ghcAm wB!pA 7yU{\ ktf(\ byZVd)'; WL@{.R #{7.ml^ 2~vi. I4F#+u K`Q`4 `3ml& #c9"x Ld f% mJmt"?T j 'Z[:[7 :)LftVY 7c`SP] 7|J\>z` Vfbe: nfXN*P5 }w9(f &v"w5O 702An }@oAH =~%.$ iNg$rL VM043 2XvZD KE.exrPbP+ XlR&k I`#h3 ZbAeV >T0+d >03UU /&+,l*u :Z^:n @zo8O :9.E] W|"9N :NG7N .<7L_w 0!bqF (Sg|  AFT1> f$^"r @ha=2@ c::IG ZG)xR @)FUh WrT7SR< )0BMq V+t<@Z h-NfX 9a]8r 0(4Sl EP%3* Z(x`* 5Uiy+(!; Sg4<K #5W%J iqa?,c 45$|H aZ[3V "(-Cb 1\`&^ d!Ai.h_VW c?^dC DO//gO ( W6c skZbi |GuY)S *lBl= H@c{( hLA1@ ^(Y<I l!(FF @jMBW qo}=& .[2]ZM Zq'hr ;Q+\3 KMLW:l d0u'& "rRF#l \>^>l O68A1 /ob,FC T%Lug nf"nO 3W(AF| p>$Je \TCfYi ^:Hf9 T#xEa ^T7%Y} niy?C) >l[KY Unj $3# vtv}pf (!U;V " &!n SWKOl =fdS4U ?:7;w 86`b` "d:f\ ?Qx:~Tb; s}k|c o=/KLH wzpG? g< W^ X2ZLRx %%;96r #L>IQ*YhT }=1QcKB ,f{WC 0QLL`k yqye/$ fp<!\ +|Ma5 zb89> 6wSEa Jw`qae "xV%&K K{cul aVxfu D} !` W/_9t7g OyB,7i xc(&kT JhX[g Vh)nE |V5-A3} 4d[uG &xegw 75@41& ,1sp# `O?+Kq[ z/}'J Jb3!p E&,=M p(Jsb eXGlv ^(jLPk= B]4KS (;C,R +FRRA( #rpE| n7Xi" a*J.D  /bdr 8+cZOB @D%EY j)mJ6< VQu`* 9Z^C  !I2is = bwW 'oh_]M ;Q.DY" D42eWT{< SpcKc %58c: RFi!j JY4TC m`~aJQ p1MNY qv4 d GYKuRE Yr7qE ;SwBl rQuQ{ Qlw/K 2q+7: L^jUp x>`9" dA/_9! N:JPm yT9o(1 K>Wb9ot Wn[qz %Q7r* VVp#c2 <2Xzx zep~x uM}T  c_tAf FS$J] Dqvk- Tng<I%, ^z$c7f dR(#R" T,=Uo B@t4' ]g,rh O_B2: V"+7k k,r9,_) ybxQ] ;J-.4oM[ Dl&@=X" "'DK7 V!2ioAxp RF=!8 kK{^2^ Rc\WFw y~pOk J!]lJ -u3)k +[$i~ g8ivg !h,^Z DT"TP 26[FYA]D DC1E^c fJ&^Y @SC\"Lj b>xe< bK[ 2 "CY"( S.12iJ W=)WA Aqfly >jNRw Mj)Ucs r68;YS Q3w-6e BVtD0I 0):F\BJ S50L2Tg d.Ja~ WLd0B FI/8I ,'pnz )S*q/ ]:H $ .\H>o ^zDJk =^N+, rGm8t @n0^8 x/0%T TCFgA svXrD ^8_Xs pt4=g MTp'K suH4q @cVN2 Xh/MO|m Sm<z1 o/cCM Kc<T{ eJIw;wC iBX5c HIj&X |+<`:t RXd,EA 1k)pF bD}Sh4 D)(*W S.wA^ 3<J:Vz G$lw0 yi3*4 Sx8@] aZ7V0\ IDATv DG+(= vf_2oU [$eQ1 y(a2; =1Yzh8 =1^zh 7~rAyTn! p'KD2 ?7X~Ac K' }/ P<Q$4 ~t)nY }pg|s |C-Nn UDY$Rr jN7@` %5%<u "iy4B [7>pb B)^#G8 o6V;xW6(+ }knY=f [jPF? `%bI7Mr 0*d\} "2/7+ QE\uO T($jJ 99moL tw"-Hv ji}i@( <sbD8 1jD$< j+r<bw =U/J= !M[i%: JS/ft g&&(M ^&f[U g<hS-&F :V*_. c"g7~ 0C+8< XCg@[D bhGI] dwbT@Y j%dkb e`z'th# *)(}(g V`XsDu c)~*1` sjI[2Z &GC|0 E|KnW= xWH6S (Pn5O "~qo/ LJAZ5 o$FE`: `Lisil 9ma .6 vXX2vD (T!Q+ pk8CN ~~%,r 5.T!C VwylW [<WgS Qyhq( -iHg{ (*TSF5 D`$CY-Z OA#m2 zm-lg9 b)l\D =etM0 #\0aA1^@ 4 &)' 9[PM;dm 1IL?D; 5+?^%=T Fp^/Z OticQy d_jMrF u&(1# +G9d`" | ~Ic) c?).? TBx*s a{FBLhK d@.:U 7;8e~ [\S(S #j"1.? wzk/>\} ot4G(? wl/>4 G7 Ey [?wfx}Q 6O*$V< "5EMQ `4KEi_ hYag0 3Y(:n pU3g^ hatur D9pb; Doctk 0">LTp PcyG + 2%6^l G4b6l ]F 0G0 Ch%XPQp* HjQ/T >.Z^AnN h<V,2>* L_5nw$ lYGLb o<{>8 7?x&^ |TpS_ ~:&Cy& kn{)Gs 7/DjzI_ i>NCI {uiwL 15kpy W^j,#U G,71c QC4Tq;k hD2]- ~&6g5aP {ozGP 31x6l t',~]h, &{p(I/ Ob?)p !)}SH ]"J~V EUAO)YCX EKZy% !%z)!jY !1zPx4w wTu`MO 'k3,< -(xG2 gG;XR r*{IX % VF9 sHzKO _c.Z/ *Z+<% E%~YLD \Q ^!-)_ (oH D 2"'\qq ,&.+c qK;'L 4P+CLsdrm< [B*RD ^{v":d X$|8)3 EH<6fw 6@rIW HS L] |]%%) H](#kWj 9+,=1 f(l2I -S07f &*$ofB> b@1F\ c+<yO QXQR! w%ap4 id.cA Y%eP3 vzrFK "<Haz3 z8xHCW8: k%f=|6 @c+f?  sJ3$ va*/\ yj'^7f4 nHE$- WZVk| ^npS(fU h{&>, vwj4W \fNAN Qg ]a< E;1Al^m qE1h!*4 !'Fq; UIP1+ /n.>2 T8"G-e =TCcc"? s:|rq 6c{sb `$yUK#\ +&Nk R "FPC< cj/l^< Y]b~D \l/=v [8d)1F U:KJ@ 0Q[_k I%g![ (%$f( z^PP] `b:>G S}49j dfyNWFU ;R[P^ TH 2o, ;P{mx Tw';+ tz+_7@t :[#$W X`IO* >~?_q<9 lM/syS /=>Z| P<39@ k#|GY" G+F}} <WuP:S ;@N8> ETCiZ[ /mzT> YI,CX4 !NtDk Ff,IPp Ty=gUf"M' hIf|q JE%6. Fy7)) L`Nf! p)0e4H' e5m0$ Pmhbo l2M^ "hho qhsyX xS)AHzt :5r$o Z]0dN )3=|1 +kgwe?j iK4+1 ~Y`9n .'9gyY Y,d@D* zO0;2 ^A#u} NrvD+3 %>^J>v ~@)?Ml Ym:/I `gJ''\ ]1/5j -It<Z T;xwh_ ujf%T $Q@V] sAy.th x]EHv ";uUpj )JJmX@*Cs F8//R/Z ]i!^H &V,3V Q*DYX O|X'@= SHc=! GY~e% 40?0n#V go^~j xQ91xxaa`! ?yQO/ ON_8z w_~SN dFLvi #15/@9 U?.Q= mN4]^ F10@^> b?}|^G^< !N&Y9 C1L&)f7 -qC=4 b*Q"|]o H_cvt4 c"M ss D8\FR0 H`s0r (;pd-$ u-`qA ?r~t~ p>9>{ #jNhj 4e{\]3 >89={ .J745 w$Zez kWw#| bAC19 s+/k: rX~+hh tj}tz' fi|xj_ q Q0N SO>|PH >:zRI ^NNn>z UtL~+ jsAG: D'DVU &G<3B-` #{X#M z#]2e zgED8i ?{KoS *Tk>qrI NQ'T8 ?9Uq[4-+pv W v;@ c:1+p am61<L S;++R pYd6jv  YL4J [O*^v]- ojE5F J-QV` TEi1# gSz9m; B A'K 2'w|ct Jx<|CG 31J4* sjk`J #dNGr] L>6Q1? J!W3) ,AD'^ @zybWc  BP/5TZ f;Pk8 GTBufw 5bxA}U /=s~3tI 2/94Zz -7>9R gKb9#q k23Z' Y^\T#Z q<^=Q qF{c7x H(/|x :*9). eos7@) Os-r3 n 1'O % sa$aR# D!VKB 2dUM+ EQD;f OqzT:iNX "fJ,5 VF:}I Vg<`[ ^-B9J {#dB1C *0t,s 0w*!4 >e;A} itk=Cg "+cLh* I?Y'"a 9C:mm 2i%\' T\oeh !V-i2 ^bxwf HV%&K F9N=34 X>4Y? WcBgH Hh6hP imir,1 )8*O^kzD h,]Hb\r XhU<d ,5ou6o FViDt xW0j~ ~yp8f4(96$Q!T ?ivZ% !Ea\L' Y5(wG C{GM!{M >XPGI Cilt* f[6P% =u'I/s, 1Ln4u `3"Yv L!k2N `L%(L M!1*1 Dk0zH3L_ v|gb: 4$!{0 ##XC^SJC= QO oH \@BJb rM0g_0 'j9\a v&m428 ;hCK{ )avDL )'.lgA :pQ;f 7 6eL F<G1V >`{W23t h~_I)[b Y*m6l  )|Bb[ d&:8< =JB"P B-P\. yIf7,^_ mX/D| zaM(" =FmMh F^)Uw !AoD( 4D,6%q f]%IA A5R,2 C+!EG 6&]?^C VoFO-t cv7SB 6dx;1 xAp%;r khaJnB pS3%Gm -%,>4 hwPf*M 0Bf,E > IjCM+ l#E a Xt5GQ OLrh!# +`njA (sHC8 GV[27 GVu>yssh g:YTpW yT}8=_ 5$CL'C 42A~0=f ySD>1 Gpx54}/ #biFF RG?[z /B9vnB !]k,j &1=_dJ KOhzU  !a,L yD<q: g`C"\ j>E%IV >@:Nc ?iA ]2 8FV*Q? "\jOQDK# {Gf<k 7:%4i {mOL<F W?H2X bk+Qc6f n`8A# y1& hW8 $b@XEl R+"wD p_H//XgI%$As "JA7o <Xx\T #qmb- ,F$1c 0-7-1 KzVHA M[Y#; QB%/B l}LEa \n5|{ ZW04! Fh=xT eb!XqU? l+<PAe `EP)4 <|]9i /T8EVO !Sne3EN XQ6590 <D$+A "|)Aa /i3I'f$ VQ[0$ !W0a$% ZPDE+ X6QKp P%v9E -IT>i CF~hh -c&$9 u%gbv !0#gP DliI% m:lTm7 V<E7\ &W:G$ XV$1j C|a-: 5h(]FRj(. bQ_Ji 70UH; &+$aA :i$7l YM6nNI (a425 K8M|2 YzAFb ,RImY E0gH+4B `0,wcD fIBka Oc<fC4 c-Y6~ O]5b" G9eQjPki&%; a\dX9g <3X.e |Q( " ^s2#V }|}wv X%[T& jW.c&OY Xl-RnX 0YS4Tq GC:>u] wq527 Pf=Z( B8 gS czh:$ j8H[[ TvhLT Du:S8 b4@]VM|5 423TK e1gV- ;,KS" o[:s4J 'SB_r 3YyR4 $pME} 7IrLlP ZV/%2 K%<e` <B/>( f -E. g!+})c $Db0@ 0*Yi7+i !\n7_ ~Dbg3BH) ;> ZQ aEDb"YY lf+n.8 B0cmw AjGoYS b)4.7`{ tP.RQ8 PE3\N b}|`^' G}PQX 6j[R( ]CfQo oVNH2 IDAT- c4H$Q f+y.D '[kc' S_E1K 5f$Ar| JggI) }*&+L l& ySJS %W;xS .ofhY $TQ!; ee!HPI=oBB -35pOP .{_fk, Thf/X\ 2_|cq.w UeX{< p%{B  2`C-H txqc4 Z0pY- WpK`$ =}]RDM dQ!ZB [#NjB I$]X+ /c8;y [RfdS NvPR;I 1%yba* E=q5a =|/S& d(snk Y)P.% VQt:P ul{mC UY=7> >,%tv UTcQC IqnrST |p>&c ,5csx1 &=.FSb n,x!Lp Z_-P8 a{1A(7 1LmKB !K>37 'NDK: $BHmb cdTIf ;G99}S 11pC6S nY4f+ [0@T>0W a"$GTsW r4.91 !)NZ'w9I X-2Yahu pLFuOF I8aX@0  )S3I ,X)AI =[\J!Y 4.I|P* y`B-g$s E>*,aS `zHA&B i^m!  1oUp, 5`fF([ uYMq\E <\'zZ H/I=Z6 SN2_5ju /cfs@ $QMoN qpj\U 0dnlZ CsXcd Tq+N^4f( ]r#Pl-x N1y69 TD.6= NMT5yE MVKni gSCO!5 qzM~c csbUH U~}]xa fA)=j( Bb9\u c _M8 <KWBE `o<b2 GI<e8 -.*0d 7rS|'h I+`$OJ- 7Q _{ `0:5H /;+z) EY-<) 6oW]- jS\AU%BxQ ^c4|p [^t:|, TFYSM -m-!k:DK q"4qa 8V\x\  j<a( <<xi} *TmCN n<^vt 9>{gy> `qhY6l b .mU K]b^o5V d.wx-Kvf u51:` %Sy"f  cC-r; &!(7E (*a4Y &=_L`c !qLLdhV mKL;.V Lf,QN g87/:Q Lj,HFD- <V}W2 Pl2MYK XYp8* t3aUUr Oc*K: YTlt] q2*Bg 9'I1- +9|XS @,Y4! %)A=# ZF6.< \02#u~ z[#]: AujB+PE Dv4`g3L f\wpz ",s+=h tUqfC 882#5 NCmJU  y'EJ{~a 9U,nJl6 KBJTH N?7PF i|}Sm6r nZ`Zu ix<}b |IbpN >q/^B -WsY- jBvH 9 l*ZM_ <_j>K E0O_Y  >HE(xf jJP]+)`B T~Ten #T)3@3" !+Y=s eTqky c3qL(F g]h`G @Uw_l k^0p+ H:+7a3 8R#.iv 7.\?H2_:y 9PHKJ 6*_28 znR{~w C|UNu\!r S8b*W 8K2|` bE\:F 28(s} |7q:K] N4MCWY\ta l5LWWW |8|'" 8_FU} HAo;jX &S,i{Y]j n6;D] b_#0V Xx>4B O]+X_G ^&Hn3 ova\t#;Q y>4kqs `p/_  lF,ZV` uy:=^q ~5S6WyP6 gCR-[ _mRj' BBL%B \KG5h\l&v -TK:v .lmCP w~aiR]8I QO|,{ 103Q= {Wle} !^()3 CYYb- g7ZH| JS{WC GkLA_ {ihs- O0ck| 3@lr6 yPb3^ O<uzG9^ >%M,F Q(UrH Y`K)IX:E 055'1) 6:[Xi. syr b [|{Fze G]4c# 1"Ss%y W]Yz"@+ DqWk%" Yy E>? x]`6b V|`y7 ^=yn^ ;MoaI an!@Dx #25%Jj W#^oQ86 ;{oP[ Pcdib }cqV/ RGCT0 ZMEv<' (F-`.6 h35V$9 en9NYG^ |^#vN KZA0W ypRET Vcu"*a|) /LAO8 R'.*& z}u~s )vm.> ~J1"7 \)%Ck 4{hs:m (Usus j:(/ m d:H+^ c`xPe n*Aoc_ 'a=<> x0zFa+k J'X@v Zp^*wF }mCbE d]p[o, }aI,l $PIvUL ..NyF _\@uk SWt;]k Kvt=\ /CLtb ni}fy oIf|` X~tsyv B:E\f fh8(p ;q?~y |J3QIcE AkX7DZ A\8kT PyeAe 2un1c t=w'k _U4yA (}:G@H 3p'%S G4cvz }+?!/g u~b31 7uBcq gUoEY*{ H3R<b B*b0,gR IDAT@T tq#2o^?A xAd,~Vm Ht2[.\ ZXld$c  GmsX= 344V7 IDATx^ _v<]g @|nx+ y44}O &J^V3 Ky5Q/ M+\36 W'i<V }e;Yp VP`nr ;3x'`9_ Vpy|F pyD4Y Q<72e 5q}1P {z6{9 !KAri IHQU" na;Lzj 1i2Xl RX$ra sm<Hc Tis-/e d$a)c S4Bi{ }.U{L LYZM9 V{W3E "zjuq6 Cc\eFs XiH[M jDv<Y|PC$ 1Jhkww@ LGFui iG#w\ tk-QxW 4$mEN 8Pp9D 8R><S l)gX)6 0'(RI *AGnZ c.,4/ HUn9[":y kqk%$Rz l)G3d i@1r: >E**N h=SKi Pcf$a?f 'jZ}# D7v;g: *i!y$ tI9Nq \)!E| eS[{D 0<myj 757rC yYvIH )iyAf (MtT, L>LMJ JTN$. $E7Ri $+j#hT* Svf<l 5X5t? [mGgv&f 6%$U.U A$P`,]<s7 S'Rg- {Wv6j8 XrED12 kkdua <?DOt yVtD.{} UA=Yh-\ z$Dhw2 uuD%" 3N|p8 rILVa} +<&tS vMAwJ% ,|&*9 Ogbk%P [K#Ad2 ZkYu< HY(H1 'S!3({ wfR%Uk h#|jX %s :p0 rI:!F? qXpw: tA-t190 oLCTN Egl31 P;P=: 7EPA# ms;g2 l+NM9 v}qta6 z|xvz  Z>YJ 3)79/! (OGD<D BF?I~F O{E2,[ @N<Q] VFn&s {9yIJ `oB3Bp /N"0o Zrgl: mD.#G: V"mTw V6>\- LXM#+ UXeOf 9)X.J '~UAXN )_IA=A[j ,tdA^ 3E<1Z G6"Saok3H 6cQ[i$ n;.UD ZKV""lCH XKXiQ r%D`Q  &"u\` -wEj+ ?$#bI ZFlo/P m";<(4 7=6A5_ {q$o9X= k4n@Qc Nq=HR c4ZY  Tc^l{ ]_J]V XF`kR^A hj|IwI a"'DQ 4*"#q Z3WbX# d1uqn9 ^mLwZW h[|iL g5zp? R +<EriQfd8 }bcwV} e_*f$w" o][3PK ebe3A A~A[b FT>^go *`Ni5 Dx:8H wku29 cLUt( G+<1AT.# x)tu0 )/^X# `w~w_Fv Y7f$* N8XP0*  O-r= vtduR)l &)bdEFJ+l Oqy^) b:p%TD |rH&~ Yk{x?0 1d7v/ >A>5w 4"}K[ :?>9y ,.Q'V q(n&e <vi~M!O B&^|p u8Jw9 3WX[u BA:qm9 Vz_!]9 2re+y 6\h6~b R2a}:9 0NU9I Adzyu Bg4M$ !%>&n=[ v\0[Bu ]:om5 =vTK^ ,)J$zD ;QfsJX DgT;DV N%sW, OvFSF c2j\F xpR%=} 8A.ru {"ObB 7oD440 @PBMg^ `ye(-( c$$PBk' Ot_:P ^h12%f HXusZ x.\5Ba'V rLHYX JK=9VT J*bQw Uug1qV 8Dj|V Z]:CL& #h:ed(v )fFc6S )ROAF ]^^8M a):=9 bv[uQt 9fH]~ Sj2$} lU6"  Yiro? NlZ^* Lq6b& {*kHt\ rrzWa< i]$#M $zBuB \Yx'g Uq"vCJDE 'T/vyyb m2y6Ch6 Fs;[> 0HnqQ G.j:23J= b>~kp` 8'_{[ $koSQ gn)J% :9wEa CR(;4' jaS_E'#1Y p/z07^>^ { PY+Vi P!bO9 9NB 7 T&Tu$ D/:bH ($R(*M ;1B%c1 ~V5}m FIghH )iq0y A^2}m JM1US _Ck{L S102&_  q'j:: D)kDA NYJ ?~ *2&_<Z= pz&G, s*T5( %ij_%P ,qAqi 990(f e(D'] 9-k*U h_ m7 OYCQ" "0,OH $2x7l <Q|Se^F Nyrvc Q0$zI ~_&ko ]yFj0 rvm,U t>h9q U![9N zi$7P Mmo'5b F1s1` H^sQqs zYg)o #7'U#$ FOZq!rU +cVRJ #EE6gq x7Jb0 i5+Rm mc$?| O23]| G?6\? gxp5ye %!'0B bL67; h.&\Bn O?"k0+K OYHUZ qO9,H t1EP8W /45WY }2Hgl/ U$g_e=V ";WgN hZn67 ApUg[ ___{zc ]]E=k WW_Z[ wyx~ipqyx (;sTS_ G4Z}r pfe8<> -$-{+; WFKQT c"Lg*' -!X$^ _\DA  ?g2&^ 5:R~P xsTL]i F<3c/ uoxlopdoxt xx66v 8]Qt^ `C.m} p$3]^ p05'W ziu{u x8+nQ. 2_oRAT#RQn Y$n-b$' {Iq,% N)j,: U9'kX \/O=: n"X2)# !CE<1B Fut#' PVG>  U<u;$ E^97:E B}Ra2 k4Xw<x: Gi1&,s Nita^ "4>?Z8 bMqo; i<5CC ]1`aT 8:3''  a?9^I= J_RGT$ *bTF? |PcYaU- sgdv+ B|gUQc IEq]m Ij1lI X&!jd h:Z<  &$=~>T R=bD' l|YIS} vpgGS VR4S/  mWW^ n_le@+ ^95r&w RxU$h "o@m* JzY;Yg 7'n&uL6V jaKBG OFt;Q ^b.RSUE 5hPo- i;M./ 9V)VI QmZfM V$zq> M(mxqnGSNva fTh_I 2{)q@  hQ=: L'o[F B3(Q(2<M5 Q!hLG' #\$j76< S)`)U @n@#UA @Io?G3^ <5/h' L{~G8 4j'%z >dAC3 G@f"LH b..#c SEFv7 oZJ*N T%;^* i>2sU# O+>)Q V_B=[a[g (mF3V fR8'Y)'z <]8YK_ .h_V7 6TJ?U^3^ hOQ4@Evo 0(K/Q~ 8!b8H ozG9R jTi^o |D#NH l!,FA -IjK& 9(d%v g/fsE Q|[<l <u+4J XXotX Yx|iozqD &24RT YMtV& UP-Uq K=j/J" D`y{) h:v4u{. n`mHE/ QshqV EH|xU BKjm' (pB*$MJ Vt+(@u VjMP{ v(k|} ..,nln 0HQ%4 dPgly jhq8q =`lEi &U_K;}:  9ki0 kBe]C Yl6LMd D6x|Q pL">" rteqaacc O766YD |tiqq ...l`{ ?*|yr \0 pn8 ow]O\[>j lT{Z0 1oxCu FGGL0Rg o;!my /lcSI~ ,E2#i fgwW) OkFg- !Jg'nVq 7h/:_ \1F}T mxNdc4 T/ZkMc vto7K u$[P3 gpj~r 1#q,' 1b`yw |07:} __{\L %{<7A> 4a.n+ -*HV3X l,>b5 rvA50T ~/X_y u$zj+G* bM^P;AE =KYQes Kn.$| l]nK<h Ej@b< B;F?B 7F!L;w% $Yr|0 v/c'z t+t6( C6Z0f0 ?;:$)^ mp7QY @mS8lR+t !i5{b`: <](`< Ts)ov Uk{VR ">~pR qE4*  nx$2BmW ltlofio0 gvftl =&DBe yUU`t +[*lj Aj6 |' Hp=~ZAu X@mh# .m(L8 Q4kM? Saxf~ MuG0) ARcq(S1 3897z }jott Ah`g, )=bl; 9~awzq8| =7^|p ;leg<{jw )t/BVx_ +C]D( <f;#S jjCqo #K,rw {Wgfw7? JRAVY BQy`(jnp YfQi'j Uu0&eO .F|I{>h lrlI8 uZV''xq xRtX; HBxT7 >9xf~ UTeqm 0A:QU 3.BQWg xwsoO y4=|p ]F-/- Rjp)` JA+q5 dGsr^J HnI!r= 0lJJR 53<6} xve<{lgtd Ri~^/ AuJb=~ ~G(VP xr|k4{a HNbG5 mwp|p v0G/{ 46,./ Iyofq ?xqtv K;".b %N|+EK@ bf%gmK. XZCxt8x <F/|F_ m'zphT &{\:j )gL3* _]T/c ~b!1o (G s` vr3<H VwuWuU  @jVn5 bbdEh zEsyT gMAQh $gcz` MnT@3R 1!\|X _^#>kH %OHX"p a.U4\* Q0}[. \$BkH z2=:_ 1bb2k5T 4c.:5iI j3&l:3 ucpO d -'-kH }f~`I Kr*:4z EzFvc wLd0" uBSROO =w#HMPc -A:\l5' Z79%-" Mb~~0> #qB(T ^TKWI L<~p# wdr.}, Wca/ 45] B.#6J5S yIm9b k*BeC xd==` l#.\@ ,IR4Z 2"$It7 Fi$"s )LPd7]k 4j'9%\ }8:M6 aGkgg vCU!,^V fQx,pX |wMli vf_1oW \\l>? 5<;=xm Y<w%[ jh6l$ s'KD2 gOo>3] [l<=} o<X{~ <f\`% e&H$FI *<^Y{ nI8Fl S#dueG C[y7~ '+)GQ> $WQQ+ QE\uO [|1=, uTSsm;/J i`O?i =lXqxk 209DLeJAoG dBYm[U 2X<EL !M[i-:- JS/Vt \hxd>31A 8'&5i tu\:) cVE#=a 8+2Qu ITq^y 4fOQ4* ~n~8D bge~;7 6Ol>v P.h+e Z;XXmF K=4kZ VQfdZy fJhi! 'xy_b B2eSE QGjMb Q[cv| 4Ix8Y .RxYqW `Lisil DV{j. K/6WJ !:tZJ4 :XN*# wUM-G XX2vH r)$(4 q2@lh #jip.= #vQQqXr ~b!)M[ ^m4VM *`:wGeT( HxM*O gnQMQ](9s 3$Ts& bX~@3 {O('a ?,`n^ IUX2K7 "fwrd {s`)` ;wCK@E {mt&q oJUge Cl:,D EsIU& |YC~.< i8`Bq $:xy[/ nq.KQ[ B%}xo9 2MhB  6V2'" 0Z"bFOA5 rn`I\ v1$-*P FJ{q  <nO-V +hh|v ,Y7m!F =eI{P: 8+JFV }(r"tgx :-4t- f8Q^a /Azh#z _sD,) D-MQ;MF 7ap)'{m8YV >|WPin8 -RL`Y vyt!c 8|iI5B qTB?.b <oS(c z~:;6 ;d4{6 %1$5P )OS`~ 0DUKqVs A^a p6b t6F-H5 ,)Fgp3, ,sG_k X)dE"U 03j@C /_Z1l dwI#G\ DX!My@ 7?p}ty "L*cX l:!-;P[ g'g&b ?846( H4:U(0]; N"vm0 TqL.- {'jNrs ,,vw\ .I"ypy )%Eat z`$ o M(eoiZ JI77H P@Zy3 L 2%(<">< CW8u5^ j&>8R4  % V6Nd'& L]-KK Q6&-k+$ MB9=!e JfTS* d26MZ eGXrK4 1Jc|* P[+~W$ Ar>XF hMhJy ^2S%KH my}dUkh YUL(1 w%ap4 y:2&Un^a &bj\\pRY NdsgT 8S\'o "<Hao A\GwV Dj!SPK8 Cg#{SJ VR'3B koSeDu "0*`b wzVQX ["m1h 4`\8" @J&3> `b|[J}M` #<E*1) @)%T* nQ@Cn U;1!63 $W#*- y~B=D ;s8<; wy>yq dhpfe OFSJr %|vO- if[5U ?{i4A |ZUy> VHfxve 3aIIB3y h*Pz3 .M'N+2 c}]DQ tfn$0 hU)1E !;F9*\) XM|X] |Szh7 NrgJNV 3qQxO tjS9efy) Ss>6Bw iL}R4 xut<<w< zqNYs 77CE5 ^i0h\ X}7Fm hy0\<^L 8=Is} zI1 Zj Fcr8L qsJ@B w%U}Gq p~L(G 6'Ct) 3UZY# )MNCGVc /i#rr_t/Vwt 7c'jj CM# t Q ##[ \Al+J !-B6< b+Y*1 i;W~'} i;CIB ZR[md Rr;^% puj_K rq}*EY 7u]]v* |v1m#W7L QIGap kt|U)R ?r ow 1CmIk m9BLR @ ;mc j?'de* ?qwvs h;hl$iN 1HReum' sUU._ wT+sr oxtsq o}^'aJP HcLu* JJPBN ~Ywnk P3ZTr IWPU9 2:w}N ZJ);wm'` np~tq c'Qu& N1l%p Dhb;[ Uy&]fE >'Sr, Z6oCAC{& G{\/L ~xY?u {jPpz Mr&/] &G<3B- dgn[u eY}Dh j'q!G 2*0gq |4lE( IDAT* I@F9c .l(R+ Z;Wl) Q6D%0li kAHY7 hD!Cm* ?H8eA=*` 6W[t7 vX^&# DfF_h qbYpF ~FPLI Zj5>C 25acY,?]PTuI a<:fT Et&jSr W5jk|  i!VVbFd, OZV+: ^K-9l R+K`, tHXKbl 4@6ZN2 Ou-Ji Y[kd/ #'%<* E^4\c 9^jzvCT -'`s3 U)35A# m^!~P 'zyU[ Nu'fc uB)Mly P^y(S@ o-XMw;# sa$aR# ~N1U3> EQD;f OqzT:iN  L;7y W'y[5 *0t,s lOt8M @C2I^ >6$;WG [qXc\ 1a*Vz 6P;Zs ,JxPp~ jUS{{ RV`,od BG*T` QWn5T Hs8Wd ()0[Q ^0t,. :G|E( ]`dX1 ""B*? FJnZW1 m_$J- MYam* aII;4 qoh6h wppu  U8%BO <-zj<1J4 n._,%!q i>7GN4L |8{3q (S'~Fr e@qZ6 `GTja xW0j~ G.i)U ]H8`_ Szt|uo ,Y8jz lpb'$\ ^{G/sg *V>#ck j|*e4 ?pbKw #)}"t= 2d!(DF\ BRch5 lX>=9 ^i*tY fH}"V k`Fzl o6\=L 5\F;/ ,MC=M> ,ROU~p `X_PR-6 *MOte rluhh8 p?^JQ 8?,.*i) 42|1? .H@$U, mZG|Y +G;(? @*I3P L"o.<i ((kxmt c+C+4L iK3&V+l jY;U<f <s'b" v5Y}R }!-sEqG &)B2A 7#H[+ 178y3 =WoSr H59@! G_:8X\F vNl>h 1eh:?v" L$j`pC [DF`Hq ^shZ^ 7.dXO {{kSGY >`{W23t fZ0\i C~H+S ;w.41 k1JG# H\ gQ ?jHHcA _C(b) h6#PtV# Cg}0j |Z{E7 ?XcLh= []?hI dcM 5 ~JS=". t;9)L- {gaC= HIA#FM_ 8z0Df Ha&0v .cMRA Y$Hc' Jce-\ T-?[T ,<d.| &FPE?r A5R,2 )+5&kXy V8"W0 Z/=3b  pS3%OT LIA{l MG'jn [JX|h :L+&BK zA"'E zsfnPqO CYde~#g s K^mcog .!=?J[ Zh'x8\ 44"B_ 5$CL'C T$~2o a6IvUb >pL1h7 jFXcX9 i5tBC >Jc;" !rS3[ m?n0Bi ~Om+y =XhYo k;nb* #E?B\ 0KAQh 3,TTj KqLLX NE\8chhB (~kz> 7\]^k W,TyL\' ro8Bg e\ /$_#= HviqR >\hBp  !Z8HUbt fKp6#1tT -D:0' hj5(H ]k"T^ H.'06 ].A , X0c!d, !7@un/ AGEGj Y`ekh ;!f{xp[ E9\kSi0Gh OT;qj Gr:VA;{ h}IjK %$fhD _>/{K k-52U %2E8B f5l]L B# d<b>9 p@orTvSE8 #22<K2 Yza-: 6${C7 \~Q^P F9=]]T1Q DA! A cU)m} zk$m[J# @BSIb^5 Qtia0 Z0dcY 606zC '{a;  hK<&% b})Gp 0`h5%^ sCBnH KPd8G ;C%`uKi }E;mU F.:qM U~ms$x (EJhY w4VzZ z\T^( Mno2$ JkNgA#hK B8 gSN dgM.EsB(N =baaB zJ!H8Rj6 LAW]"GW: <k7)L 4elZK GTGwN Yj=?3 BP#y- WFZqR U!xaa 1zn#.}WB ;cnE&b; 1Q]nRf 66RHj0 R_F/B 73fd`k nU]w: [>"se xa4/. <^C/( A-$Sw ))z]k :eCzh =q7~r _=Ni! (iF[0 `J5-! s?BA]  T)IF 8H+$0N "SDEg QO Hv!mX TfSo1 Jf-zc3 6$mjB `.ih$" d`1,N X$_h_aL c4H$Q l3=%s 5O<:Z cx2HRS seE,oax!i2W E9y)Sg?^ @Gds2 _X,2b ~;%`.D )vao]w ~v^fg0 hP6V+ Ub]DV HTD[= ;5 Fp( 0{<hW :\Q9) lSWM4 nZTE% *;Pa! Tf`*a&T4# I@+3OL .0DbS !"jP0@## EWX~U &9t3y; *H/s@  u<Gx- tM1tIa :b-)R&@ ;17u` 41M2E dIDAT 5+ -E gY="@ #BTN/ !.HEG RBgwn L}Hl2 C0B2o =`"&C'8 k&FpF dE&>b AU6Dk jA)hT CFI-Z yb(Xu Z&"y@ 9cL*Zt 0<7:'p |-Oh[ $iJx*` 7'6b{X <H:%/ L7gCp !%e`: x^nQs~ !Th=y f6p&O [iI*: f"2fkj !)Oi'J f!v>@ b7E'N3x ]r#Pl-x {c#P4 KmDHxm %Z,&2 $s'OE 3zTI{ k9!-C Bl@o. :$n'k sqxko lSTXZSeeW o;Ak6 .y3g-0[ 5BATg Erpq(> ]9.Gj XHBuY N[%\0 nF&k5 zUWg6 ;ti&Q. V~H2i $"H(5 fq^Hx v@xqr f+`E-C oE=J`f R^36' A\,Zk<;$j rex<xd @MZy{[aG} ]L]V? WgSiw f2.uc KQVrL o|&N, g1P'; LA#W8 J+.'c uL^Fp }G01( /D"|H&h %+>TC i'c(EJ I=f"i@w od[Df I`3"G_P L&5r- $7Jn/ dT^2<*L obB_9 E|I+Om Y\}HC if,8N h8$Yh :nEe.0 "&a)h >Hd"_ @oh9B wn-y^$ )[s_[i evqRY ~nC&- i*`h2 5,Q%G +XS~A f#.kR waK2Lm 8m8i(;? Qz.?  Ej23o fI4@7 NCmJU QH#5]TE>[ Nk{7O J5l36 `BKF=kc>[ '"LeRQ6 =fKxA E"*=s- Q(jrQ 3Hd`a d21=2 T(V(! |I:rN )y WI .f~M] M8IQ5  >HE(xf (MN~2 wxzGbaCgi ?w=-P Z]cpv ZsSto* .!K;Z qCxc( 1C,,{ 0[8<:| HMF2% Epk(\ Ah,mx 6H2NAY .v%cbw zM4bc1 0a?UKA ]u{yKl lh-][ `MAKt7t4R~B h`'iG Ee=L!GS0jY  =.y^m ;Tl|'x Ao:b/}. L8`lC PQ]:lW :_bFS 3*UBr P&ra0 FnG>{<< jc8xK[ e@!B:`' $Aq`J F/RZw2 IvC+^ (L.p<h -"T?M tRO88 nVoKj lm6~$ VQPv4R& :a#$\ %PM^i; %i`(O '~b^6 7Eh&#[[ D2&/ z tqcV! 4 ft// ZgGw6 `T-uAS *h,c> HljE> Yb=j@v tHxryz&!.b h'9*,|c< BRu8? )3K`gL Q5(Z!H1 %,PFt ;d<]~ #LxR5 )`b`y )p'OO |S4=;?{ :~5"c ~V^@I R:M(=8= <=>KLY bQ6qt arD"[* x+Cto *Ou`hY Bw#uu .<!Zv 3=7`O1 P!_]X n`V2^ cC> Q Z;(*Rn FkeIDY n*@oc_ T]A0f9 K?!wY w(^m2 (F$+4 p1.pH3^X XXZdz c8U^~ tKr,h L^3$~r A{FTz`b )5U6"o A'j}Fy ;1V`5[ BJUo} ^@Pr/ ~tqzt Ro'4y9 TFdBN& f?}D{ u$|QI& .&&Yu ZuLEg; 4_T$91> MCyxb {if/dF:q qv||v _<RSl y-$No J]$*M 0V9R  T1s{T So\)ZN)m `-9ub FE92; EK&&mi tkL/l fKId, Q}NAD 344V7 LIDAThC YZZ26 {{;<< ~noo/^tyy nnntK# %/FemSq IDATx^ (`=#dB cY`W  l!EEy T/Yfj y44}O &J^V3 Ky5Q/ M+\36 W'i<V vj=P&$ i~`v"~B ;|yvz aDaMb C7&@1 @Pf?)Zp: duN{S ,-\rT"! 2@_A^F XglYZ '1*z%$Zx {Ay|# )VnRQ a%?= ) rE,K7 !M{SjH0` n&NYg=* 8;?_r .S%,y i"3)5 x2y3A= o`m0m( |4jj= +^dg: &~V-w }^B@` 2J(O= u\62EG ,Y,+? op3!/[D e*(vR 9h4]R (mx)! Hd)^a 4BDJZ `fAnGN "MBrs tZ$:`*R^ !30]6 EA;L7 3*aewu P'[K$I S<{4[ )uJ.[ +t2UL MrRJJ -[l-w w/IDQ <?DOt yVtD.{} UA=Yh-\ rILVa} Ae[7`D [DSC}y ]PV.m8 Sw'\6 e~[,} hB)SH; -&ea# ](i&* C-t190 wv!32{ R5?E} vBiqH f}:=_/N vu~tn6 s\oBd 63Lv'0 *laog YSw':c4 )Rke@ =65%sX8 VFn&s {9yIJ =9:{| ?"^If Sy$QIUy BNu 3 d'JwT Y/9Vq <RHTd a#g;dZ .uswr{ 8=yrh }n[kg dyq*{W QPr@~$Ha ?$#bI. pmH:#hw T?Y&t .@K^Z {60ZB #f!<B gH+:aW Z%6@03+k+ d?TLy m:vqoA[ !L:9Z |a7u1` 9a"'DQ sBpR,: 4*"#q Z3WbX# d1uqn9 ^mLwZW h[|iL g5zp? R hxmPZVweU) ]G8h: (9_nK 0:%X~ PqVhEl 7}2%7i svFd2 Iw%`[ `vco~ Y7f$* M8XP0*  O-r= vtduR)l y0ZK%" n-RZXZP qG,nI55DujT subXq &$N"r~ ;]U9Cu,K)G yIpdy<sWy AFaZn E<ej*?Q IYmFc Aj>R; L'jd]2 QNz?  M#E9u vRt<B g._~v T*KQW Qk'@qD _=Zh< K_o~n} BA:qm9 0UG^y _5e.? XQ[lt JuL5S} ON?|r Pfc`! .R*tF koN?y{ 7jJxn Vn"(1 ,)J$zD 7QfsJX *Fvc< 8A.ru  %Vhr R wVYS=b R~oiT NE=!_ J*bQw Uug1qV 8Dj|V ,e5Ow bGidG{ hx^1{ .CViC ^TX+& ;lISW a):=9 r`B/> R+ARv qfU"+Z; NlZ^* H&8;: EkGTs# XxqUp] ~}tqy|y *kHt\ NUUKo^ ?Y<zr~z Zq.!? 515:.P 2hW]@ m>:[1 Fs;[> 0HnqQ G.j:23J= $koSQ /).2I 'w{$@ we#o~ %NRor 0~v(2> <}|vy ;BC-F gop|: c[r(k) =CE=c !Fk^XN >K0\_7P ^\MFw~ DTT"r 6lLdlf( 5WSNH =\,OPy cUdL> m)jb#_Gh ~'L]F ;K\P\Z xxk1y O'V%E {?6is 8Bg;;HE d/|Nv 0gk]EQ t+,P3 bD])RO Zjao#6 O(@VX$ :va94{ )o#yAZ Yp`f| :mTYl mm]bj AjYX"vn :KyK.) <kQHq <;9#T >#dGo j)Mee" #7'U#$ d6<H)_ :.S/uEx ekQjhw8 OIo.U( vrEu7R I@]1- %->]O1S(: =l-{# `:9<; KqVE6 <s}j_h $38ajx ia{R] GV=,%s Y<:]<" _+hQvP /g`tt ptD`l 1`?@q E i7:g p6iqfo CVh.?( co<9S Braplo Cb2%M tokun); =tLK4 ;{hvzu tCw,0 |wnyvqmaf l]>se :b^0. |otu{ UVd*. #IACc s%bsx o+K// IDAT_ [B5f+ `oy<a x1aLb VgZTc x#l}# 3 6&{Q 9RjSx 7ob[7 O\DndhY M:KUj8 RT3#kX ,q)// }L1tk}; 6$8/X  4aMv T-c/vx 3R@l\G `9=JQ Vopns #i)VB 1(#Fr -DMWG bn}(I /2a}3'?z v6w.<~ ,@8<`)P7m VtDk$qn >m(J' @SOz% +#P=1^ PZ|g.J( nRx^| 9w7|'z V*Y%\ I!.H@  m%9%) Vfba: R/F`" q#9k\W/1 f}W6;^| :/wTi F|Qpi B&SEL kpBLU  $Yi;H 807Vd JiWR@ )ef03 $m=BO8 $}1F:? c!Q2+i t&WK?diPdG/ p7hi0 STfA3 |}r^- f~U7A 9\Qiw_ O<q+Y !A_wR M<1i@ Q7^=D W !qR |&]ia .`n6<E3 K;o}pE nf*`)ZZ #ru_z Z8ZLR Ag 8T@DK @)1<vw %\"Xv (@2r\ @l@!UA BjQ7L ,,x2;$ -V91Y! t4FMTR( -VCL8 !(bUW Dz^_h O_]E%% C={Mf M%:dy :'Su2 \P^Vw 4h 8D -HO;J -TmzUS HIHt_! f+]J I} I^(hU$ B;u:[ _E"UF [EPH% {k:biv &4MdLg IdHQe id!*s= RlIlkV411g I`[JI& )f*wQ mo-}&p/[= l!,FEg _v/o^ ^)iT< #Xef\ FHdxJ*! "qRG#l L"r>d:J O AeX B=JC& uj.MLhg ?*~72+ K-NxY& E8G!; :hCvd DvzH5 bRcb5K QVB[} hb*+h %Q*Ek ff*MX excmm -2.JDX q3n=qc \U77Rb ]s!+<'> J"\yIX uQjal $cT+j d<&3R Gt[([t t8'U0B* F@ZI&+Au! o@58~ gAm{* jHi`y D5pcx fbPZK inbB2 2&M&W6 [[Wmc T-J&)j *s*,T B^#)l2 8~lNV ]EMUF^ PB?LLPbFw W0q~& ?1eZjj nv ySELU X`Txh5 e(V9] 4uhr/ xbe8) =jb^|m: b/-/Zr oDiig[ tJf]PR \#c4d] "B*3E 7jAfB0B $jw|vW &7I.N B6;xF OzuRv a*m8^1 eKjRz3S N=xb4 [\fRO *<Y./ J'AR0 NqeBHC B1HXjrC "+V)^ /UWaV bH!Y? MDe5) Pa0{bb xhOYZ $#!L,B %- VAZ ]?#h\ R)JML^I 7UXLb LL/u[ C`E_DD k1&1X x#,XG }k8sL A+|`m RA&Hb g14(* a)bRG(` r'hV Kc juoXb +Z!*/DP"l "E/|I< hPd'h (7u}! $DIN.c |dHbEn M=dy/ NxO~*. Ck)a>N2 D=4Vw& x|&7Q Ocd%;F .3K!1#  -I^U0 8d:'T !x*Z  dSts= ]FEY_ qIS56u x+v>U+t* ,#<o" HG"k\ fOzn6: 7;!*5 T"VyR ow6?3 .a#S0 f<OR( o.|Uo 37nn>6 9f1vZ i-~#4e} mvp[/FB 7,,?sf !\7xc W%'$M, Ipks}( ZOy_c >162e !e~Gz !Obrn \AXlf SC\v-9 [2/jnp u>\ 8 .nc}| Po*b/ cGCx\c ee} z Ab'W[EqDq dt+=L ^y}XXh ]ko:y! [|$Y{ '%(ep 4(Q^K ,QP&2+ 9XT3("[ K*?<r -<\o= $^xVq y{L]W &61KAW 7_{}c *j!FaOj VZlK]> DvSxhg f(b". LGn'7Nx KDd3+Y@ \bTM[\ P[26K mYoct lh[GpC !"i)Q {3|rz >q.RN P9-'S<DD JemRM 6$pjP 4Xdtx| #eq%S 4oU Z m0$w5a]fv ;Cc3A N)!$1  /W$[N ^#8K{ %`4dJ 11$B0(-4 FgL%"gM en,sX T4Pr6U Jg*14 %Y#^~6Rf9 sr:3Z PLR*p [#3bE f?vg, [&%rM revm_ E.c0* P(%wR @6a5g! BsJh- 9!t2] ,$hEI rh9^$!8 }c\o0 x?l)eY2 peqI_Q< :QgFZ>2 cR{uP %dd12 (]vK0R KA.Md =<hvH" $}3!H ,xBX.h Pd)A:n  /3Q{ .&Ewdb ]!yrl (byWk@ JIv;vC O`o.a $SRJ& Zb;(' (`&{b *1,Y9 }DZ]~ 6ND@. e%$<7 N(Z{. XkR[k, a3\oI $AHM, .>NEZ rQ:zr +].(df Qoj=y +uf5%$ Ow?sgr0 ?L~~g K&~PY Zjfe\ |ipyz :/Mo~ )rggv 7>m^T {#| ? OyM*NH eq&S+ xO.\%E $Y0I9 my6Ar 8j^{?c H9=h!4 V B6; W76Ot \OE!LxD :/>nn z]^eWR i?sx` STjxb +&`:qS hdhyti I1}U?Y ?}kvg<=l  G/#.:u Uz'pK $+O\E vz'r6 8`py  2y28dm 6Y-n-u BQ%Wd/E 5E]bY M_Kf,- c>41b I'Vb@ijR +!WDc G=VF0 C7d~y QRkFX na;9CVI aED%M q^pk.r !q^Vi K'{Xi0#C ^J>IDS [`Gb" f`zVK m03M~ bszJL \q^5#NP!pA qb<eE1 ^%11[Q  *q>w UW%x& V3"ODY SgJsGe |L`I, jDu,'K  Kl!X T%.!l~ p*x~ R ujP/Jv+T-p9 PmYlk XS8k-!8 LV59b ^9,rGV 19h%g iarl3 }291K u<45LN "$O"&` w>knP r%rbnRf &H+o^ (}BhFE .,#_U{ U0W0wt F^i+_ p*NOG KaI=s K*^z% ~{w|m6 =&y:*m U&$PD]xVSml1 cM.Me KE="? hSIq<+ fL(@k: EJ*u2)O"  Y/H@ Zl!-% Q\i6/N ?mNn" ?|grmz %4+l( z0W.e {HSn%R `L1O$ -S+07,)1 D&ni@ gHGEA L)_Qx ObE]J .M,46 9;koK DOp00 oJesI  qK3N S-+(. 7KEIX %-"qy sp9Zh- Y]~)C {X<h/ Dk"P+N1oI 4?Rns 8BK/&0x <5&Ya &?3}xm= sY%Ic (xd Q. '&4.U Qyy??EyE- 3Tczl- U2RmO"#RjRbF aA`,a. U@T$GP g=bp86 !s=/N d2I-!c yZPSt 5&tm3/ +FdZ{ (Ugq{b 21MX#H $+hon 2,]k. D3?3` V)4u!P& fw*\" i*W1J23j Dn(WU PAHVR\ C< JJT >i@{m QDgTe~ KNA"f, miM[Pf(B f6Ye|em \;4ge T]d,$ AB3i" u@B~I >%n=b HLtoP l=mL2 ihn)g !ywcq^ <'$MGf0 =Lu.tS R7c^$ {8hHS H;D5On& V<A8yUqL\L$ :61CqB Dl`8g7 Nm,V_ h.-[W tG?}6 fsa{!< gk_]k h2aPAK 2A/~; _|N0I 5nX;L Rbhm[ Ryr * 1Mzm|8 |{2](S! htnrY h GG_ ^5HBn 1c7TD xk2fv^ yVrq9kF &hht0 8f9Uy F%qzLI V^Ec(W </kD?u o<zf(%} %mYs8 ektv~ pRH'N p93\4 u&@1n dB6"iN q}riot <p.:O Y/EIxjB\ 2K+ eVQ fG|SIl] iN+w> *,F%8 6X9]` @jEr~ QV3,# Q}zLz /v>st ^q>Y5 t1}}t U}9cT  >y]G me3Lmr ^MLSKe +12sG ,k `X <?Wz= A0;jt lvaV! cPD6K  Oi$N& S6T?5 osd;> =raMw J6-!e( !dCS( Vh&P3 L@i|3 mqIqs _p]*F D<&|/Z.h G)'5kKlF! pa\\s .T9S3 }(aJ? bEh2q j!RC} V.UXDw kzXm410K $~fUg {9[D; BSUfA :[[<` m8{,@ E#)i9H :PK{pP H(UfL v4pco Ojd<. x]6+7 -/h6fY {~:8?[[_ 1{tJ* lta:F qUNC0 wlgKaic ][nLo %3^NU g*JN# 2SC'F D0Z#V C'Rd& s>MKt 5uPX5 7zf:{i| %cD9z ~Yhg7 K8wSi[ Jv+4p 7clZs {_q{rqp HR'Bs J)PFNIS ?+@px .~fBR v|S-) iqbC^?Xq /Qo^t k2uj-_'8 uU!Gg `xq:~ t>yMNh*s +GSH$ }P1#DOt tb?T( t\sV8 XCjpb i8IwJ <d1Aw t*hp ^ uM<0B Z.6fw>z 5(Zud7T {jw0< # >9: BPfZ\ 9)S>R$ +v5r4m^ Z7Jm# NV)6s V]k9- #,EfB @[1j<XY/ c'qAd }hG~[ \%#YRhn1 c!{l6 T^_-T $!L)c yk]GV TRUYh wI#]+ =}mT> cD}4k 4aL6[ YnL^/I ](mGN !gWlR AM.3*T <J>5O k0B7X ^F%l^ms fX[~Q _H.h, I?8-P !]O4l >R{w>{/ :2G&: YE1M) ';n1; aF&:< 06iT4X _kF}, ~d>lP *w-T$ oyrz{l3 o N`z:n\\ 5!iD= d78?H rv62k. lF+xct _qw.S O{R=8 ec2M%/5.G '[_{w (\,L+o ?|f6{y| gRi>y4L "ch+o ==97a lD0qL LPRSN s[.eG3 Eh`2q pA)~Pm 'L/B< 'pRmE e}@Fc; *P6FU H_YDU J!sw~U+& j?}1`P [*\_, S,n+^ 2B$wSp%< "c\_r MVGb)n $G?|0}y xZV"p h*8Kw n[Ym@[ ?w.ns rz2Z>^; Os_%cK `wCy#s8C 7lEJJ E7u6yx CSHc) H;.5c 4OG`SX q/-wL:FR +HAK[ :qS)h ;fiw\ 85$NI= 8)LFp j)aVUJ pg}SB OB^@i 7fMLg [^Zb} Qb+,(k /Qo{qU $(vu"= b}C]o Wtf=b~ (9lhTz- ;h{M4 ?84p: {71T, :c]&2 !}Q<_R .n2[M :[M[[ rh4v6 +V`+kj ph]_R E.jKo  b[{q e'}6O@ \#L.i EDm?m ={(x[ ~2\L8G DX+"(!#@ =R5f# TxgRX pyw4z 8#1Y< *D;#U xwmw:y 52'eRcrq (t0 nn B1ah! 7j;3m 8vW=*R ,%Tuu 216=> [f/}+ +Pc1zj7 ]:&Aiy} G_bP. -KN1f> }E])f 3>zuq hp'.` L3'zq' a)dbW  _<9z} \fq4z /9<5l &:r?O owNp0 ZS}dCq>) dk]I0 PWK P \9xPT b'r5|) g7>tC+ [Krdo `aQLD 6hjv!u =wavp c8!Rc F+) U Z0&,x-F <#-y89 x)49m 612iG \'_2[ 280>, 6{Ov2 7e][Y0 f6OvI\ W#Z5gc FVN8u f;8]: RC.+@y)J xN5bP J}h$2k *V3=*$ o.QHF/ y)%1g ElCRu G:h]]k *I5:E\u e%n,p* [V%*CGOZ V|OF[+q 8$6n&7 .'RZ\ XYrXA feOJ`\Q _}/la -N0z8 oikF# S}!N#A UqVr2`I ,?RVV h#5(83 `*W)Q xqEC8 ]Fuxk NA Hj 8\>e}  .3Mm ds<}n 9*D+ycK,` T6D,jJv +;_{7l [c2$na ><D_++ imF(Ne0 9*GcH; ,J|2{3 9g&{Cir_1 #$=9^ Wx7$NW \rAVs p^Me? EtgeZ bBKiz fppst hyExJ}*O +[[;q #y4>7 Z`uhT? ='5UXd Uf@[f[v D%OdZ k(^~yT -:J:& [G7>| 4FPCR iJ%9M]y hI;c>[ D=iDU.4 q-;E2 A3q)J Sa)#2 CXA+8S 0/h1pr yW]:I eb){m 9f9=_ vXk&" Z8EGJ% (#_Nz h>KQ/ i4JkQd $_'=@S +&wyAU p7<sb9j @Q/\Df 289[` &VS-0v< +FNqZ gv1%, 'LR2O# 8p#WcQmj 5^Zbr 90`&$ .F.v'g LIFvd 6CSYe xp`P=.U dt1V4 z!Wbvp Z7~VwTW stB\* &CXN) MJ=)<N x'mMX lta6? <VB8\ IY/5L 6hz!b 09W]<P ]t(QNs8 aI [z* IdGQWh BWUQ_ 7Z[L. -ziaLc ^[{|t }X$UI H\W@MI6 ]KOG % srtsq ;9^@tu *xd9- TuG_] &<hD(U1 YT_y0= fw>|g b<q53 GaI 2 Tm=*~ _\OW' 8&02C @#=w9 ;a}/= 3x[ Q }ukuu# 29ghS [0:#Q-h MV;Ke h|.N6 $O+s~! '66>u6 F#Pw}k ZR%K5W p2;<~ 1^ T[ b-1K| D FL\ XL/q#o CN"<& 7en]] lDQI*G zW)96u;ZS <\9c` 055He ~fW<g _Uu5b| c@n#\ 8Q2~\y `-/5F5+ ]^$@sz E'>fZVG J)-\pT mbzn+, JrD!aQ k)MBAI tX2Pn$ FnA1u :NrQ:A ELWqC jD4[h= &q/_Q rbF(J P?'k% KlhuHV +7mu)5P doV'[ DH'S5 )U.nr 0D`GE j:CS7 VXPvQ2 75X#D (a(j% @K~h^ $ob`]f Xi)'Z 64:L{A 4WSC~ AM%f* :4':qSG \''@0u s1yTCY \)-ms &=p;1.] bz-P2 mjw$_:5 @=*4.U)$ x$^)? *\JTw MM\IN U^zuzc` 2p3mF *CU+8d 1'EL) D+yj/ dU@l(n gcg#j /5d20 #TYmWU`a @Ra<' <bx-) '(m6OS V1U2  $L)0:7 ^x-OH x~F81fz q4'M1 (`bf< b{~T] }8|jF Ne@-_ ,(Qa?U \<u$[ cCLZt {-=S7 -2=/) <zA0h b-#!M,-/3 C3Ok]# Rl8b5E Kxtmy `f(:Q \Fk6S ?a|X- $6GiU ^1">ie /y!d/ W3cDG# gitKJ CaCDM XB\G; 9^hLE )vzk> djk[< .^_;: s,u70< G.s~z< R&=$o Fi<H{ _I42=a (0]Y{~ x}ezuq {iJ,ih X|6X}p5 KC"W! 4=yj0 g2S?X} 3aj]D@ >2Dkzul  ~otm( N5gpiv  }w } eOUBf ~4|p:~ TycrJ ]*|cu w-_XZ~ wM=IL N-);Q '6F[POF Z_UW|*_Q8siS K_9Yz '4\N> cxC.R Bn=}k :f@@) AB/}g GnLo0r;/. 5w(o8/o& [0cK2 >yxruj2 _QZtk NbO"q: QutAW ~t{}k[; JI@!-M* 1e0fI_ f.{lm S*Zkq UbGI4YN m]y{5F Wa=]7 txy a F[jD| />\QZ lJmHLj (Hf{G{ mm:]h~PhOu i=RDd 1V&l}b 'MV?n az{y}y &6}\~t ~zxf] O,--9 rtSo8 SjC$tKNh wTXk" F}>Wfx d{k1Td, 0$V'Xg9 3=sg| _#%`357 > 7Lc9 4a3YZ J'Hnmg}r8 GC&w& MJ>4L F[A:r IM"b8 ekPxn M%u'uz ;MfIXqd ]Xp2; Ymi>U MVOE? YlC8op 9_i:?j &W&Z{ y_F]i1 $u-5w 5*j"L de<Es n4}fA Yh]HP ($h$h 9]YPN D>Fxt ,#ZqI8 TjX-O kwfc< +7~jy [qWKlWY gvNyYJh OR20]5 z#\)d g8>>F DWo1< J{O#G fex$> lll4>hH |.J\ _, <9~jq :8zvv So'Z7D] ?!/CItU( 2?~q> $}. t7u: Rw\TV7 NQ||s LO4U[< <;x/N ';_0C UIgv\So NIg5K` [|pat/ ~IC!L ZU; t uV4x+ )qJ4P  Tj)| W}v8=| !!1`g6 ^"j9` &{=`( RV';q_ u\H&V <MS%0# Nh}&jW tecis 0!1{yq 7>a6XY \Fy8` _ip;\Z mWv%E4 ?w0yu E!2|q3/ Jt*Vz^ #g[1Y GbS{F anBEo =u,$} Dt'9o *8@GG/b Odo2X :fk:c zQ"QBD <NJ g 2:*<2 aKJj{ o;KS9 hu}{@ :i:)! OEvwt m3JCPF  hQIDAT g/'c5 j>Efu ijv|^ 1LNiZu ha_zt Tw!/) RZt_3" L&5|Qp 8a-fg rfo&$ ufOu^ f;q=< &{$&- +2'/q QS\+00 ]<%-b zKpP` CR)eXY9 G7U5%Zj 6q4|B 3&!Tt" l/mJ%T`p $ffoX U/7)= \=QwJ jS%*P k,Cb'u $knQ$ jES:W }_%45 q5_9vm ;vV,IP E:NSc)E D1+sR &;o]T rDpS\ ]#![]? {q+t{ hf_N0[o .oR"f_ Sv /xs o'oS} K83Q&  d"4|! N/5F- qDb0B [Q"J6 g=O<. W)O2< k85'19 ZPk<U /L;8S iKi#j LoRVZ ?c1(; \)T}v :k:c+ .-/m] EE)mIzM R]Zg| {oPCk) 7a#$S ;3EKv\b i=fkyS =[+[+ |Ju?H lu`.t T1(TD BQBu=[ &/V!dk O_51t #rs.t JstOG TTrpQM IdjpP ,yw]B dug$xu tk[&[ F|Vc, )m*#] vPFvO 0o@+d 6by[,+0 :ClNt 1v##_ a9X\r}U !wy@b jV^Xx Q*b2c [*RbE 7yq!o{^ jB2?C FF\|P ^5(}g HC,&Bq DTc:E ),mgm 0Z5[L G|S(. ftA/c jiJVi Wi`&o( A\xh=< [0C'[^_\ d!g)<& 9|a}e ^aR%5u zP;U}E %U!wg R;u;R OE{;; }f/6\+{ +34gx .M1=!"a )f-4+QuD` zRYT] X%h>Y g%|=w^ e*Zxt g<pq0 b_>{5- b9:nl*@ {X{ib/ >%qQ5 M)<1\ #BLgz S.>v{ !KpKE cr4JS 8V`-,b AiY2l3| <V/@U U9f|1 b}3N[ jSAZ7 dn%aVMd S'6GU */fu> lk'pvF j]k>l[E YFTB1 |D7@e LIDAThC YZZ26 {{;<< ~noo/^tyy nnntK# %/FemSq IDATx^ q!IUv 'ndu} WCaqu @m\./G ;BCJS VMzcj ${}QW@ -IK]z v?[3R E(B~B YJcE0 @R`wk \:4bZ ##=s~ \tKc6 d8^hOX 1cQ!A.T DL9z# *!I1n, *qji<b L[\MV "-+Hd */BIn *Nw<^ |IBDUA FB,7F 0Z8rT"! ?eTkm& &l+]u &<y%K 4$qq] 41!+& 3qVu7 1TC(N xrq&o7 w!<:h -7VW[ 1Jhkww@ ])!Jq @N6,g)j0 U;D;]3 I]wvK Lm)gX GlI<X rkO@q +^dg: -gKD' R|8KR l)G3d 5,*D9 zX@&= >E**N bs*nw8F tROuc T@OTd c@]|5 O&w-& 2`=}s P+xEb 0<myj "-!"%-/ \S+mRR (n!jk /*?:{ "=i0d. Svf<l -R bi< *aewu LX}y/ FKs90s\ !1K~e %MQfl 446k$ ~m,-t +A=Yh L(+[( #U"R] UTm%}}q Ltt(% `G$LC tV:4G {|N ; #"5|R xV4a_ +IN6^ nzA-qKC ]nGTx& fb~o_c vU5?E} sj6=j D9_Ag x!v(Yx n~{GX [G]X ! lyz^: +Fjnc 3)79/! 4@Fk= {=BC) S$ke@ /BR*/ 4!)D!  .Mei, eWpG%1 &p~qn QCK!LW =>9?> e:?Z) Hmd+b DQ;,Ov !)@"^ )_IA=A[4*? z)r2!,k ef=8J0 rbwt&h yVz$y (@lo| -+k`G 0Ax6Q .@K^,Flw!gv +j a_ t)"Cf% Nx:MW p!{/U 7=Q.2 ^^&-}\ PL:9Z *Lq:X Qj#u{:; QY&+- sBpR,: k~&>94 OB53'1 9pd}5 <o.:u RC<9: Fr Es .CW6]Zi 9MA6u PZ5ALI pvkOoj 7] i[ r7U*` =a;4I T>^go ;Qeiq kX-x6v jhxY) 8_9+K eBWX- O.UAZ Jv%v! nq~|jy I6|`] reQ/d 3.qHf }%9(0 `A`TF HiaiA%i )+2RZas subXq VoHc5 TDDAEO &$N"r~ X#dkT^ !ww}* <_-NNO xbj*?Q _D6Sl 6#Nz? 7W=K` T&Gq[ p_)p%` W/>s%k+g|*PV G.^zp ZLT-k "YAw^ $vrTT pr[N) y$4p() gAhM; 2re+y 6\h6~b SwD7qhampIX _rl/< P)Ya} {,c`>) "dD0mH Adzyu =>?;> sUQ;>> ''o=<y Qz3d+ sFoe%:J?g}z bgl;" PdC8E@ 8+W7p uoBfsJX EY1:)5' k(aMbdHA I-s`y a5P4[ 'k_u= !O0!Dxa/ tlxplp  }KXAp am\>l[ ay:_{ g~^e( ^X{&q 2My:S i)7Qd 8 5>+m{ H4]edT hx^1{ w~Ld2 m*~>Z Oy(SG dZTV\{ ]^^8M F5uuR NEMYQ 7?#/8] PvP3A n+<=Y xCHc$% RE5G% )3rQ~a NlZ^* GN=r`m uzvq.w ?9=?== {tqvryq jEq(w (#tqt L*ojGc @2hW] 'T/vy<1 5u`+{ 7.9v* $koSQ SqnH0 $>:W; hD,e) Pa?mHO jw^uw/ |#<(IM e[r(k) }6~dMOS` ~e9yvrp8 %T12n9sT d3C'P U_z4= 2X<MN wZ$jh ;;9>z  vy(4 kYeCF &nh@QT |Aa5.] _<!eMQ _uP=Rf cU0&_>Z> ?~xyr 8NwF\ . tbURd uGg-H or@*$F A)w _ MWQ5E.  w/pI HK0{s 2J0xacI! /J\K{ ~!jM>~ <&(d84B wk{toc `>V8wB )* qP?9 XA"@t k<Y-J #;:bx :KyK.) j4U>| vqtq~tf H^/7P<L YJSYL$" #7'U#$ eel!u2s NM>}_ `(lrl H>n:u; z&$nR'Kb@ ghB7a dRF\N bq!.g -fa[z? NmCb* RHl'Pm LO_;H. Br('iCV <*%Aa J$NA%$ iHQ1}z D3)2e iR/Ra) TL=QA tg*AaA <M6>cO %DRoIf ]%cNtp t)G2e Wo\\g T]UhP _p\H- \Bx6# m?ZR(oT[O gkg_YR(Q J{W=n Eq~qO %&<4A. rvibv %M2Sl2`Y  C$Fd kJI@O ~rY2Z IA|&s 1@<'k }j3)h :Q5Hv&@ M:h.V Tv*s1} 2OC:* :rWm_ D6U$v m/S+Mjw U7cB^ 77GAw eo"2A 'P>pj ~%UX4 r6L6h 6RJildc j02 yN O]9vz q1T,%q: 7)^&y4 QMiwhs <PDRdv+ n@x:L? `%NdR+d% ,p)WIsl (jm#6GL 48)VC 6*Yia 5}lzbn ?$2C~ 9>3}l !"LT; wN7Vp 37ReR H9quKtF W')tU zlfyv .cp kAS Y1VT(} YI{G9 X b{:rc &HhyO ]K9RX$ &%j'[{ !qDrA cJd.k M%y1hQnHC Nf#6- z)t$/u, JRNiKh* ghg'lD BhxDn S&-4W +bNe$ +NDOj j7Q*} Q2k>46 $5A5" qB1U{R k:bAaV Hd~lqP |6_g> ,g*%c qS"g$IR 8+S7c @;9*Bd s9R8E ;A-HJ%0 xIXRD#~ H`,u0 G&>ZS] 5\ BF /C94' >d{RU d$Fij d3lV" jmL[MNd <xvBW` ="ep! ChPtH" 0\;Xi Z6?0q ,`yLy t`Y,< 55NXIQ d.P`e PnAC* 99whei o1<}4 OEI15 bbn/F }ra?) fA"32E@ YN,VP` u\MVb 81xH> gqA$of #R,-$5 bR$8Z ap"I~y{ -ttcx FySr` zF[3i 65xx;h5T c^DPRwA IlkR" s1U'o7 Ks/(} JuAyY !OHh] v/!^`L ;ASM[ P?tF9 $]1@"l_.][ dx&yS1 8d VO<7L V2e3f <M'p: hkKJE ^i !; _)qT{ Wy3{H EDb2! [ baT' ,MTOu] u4)K@ j~6?{ xILK?' dARTH RQbUq' )=,W4b0 (eXWKd W5kd  05P/2_ ~r8?5 X!J<L0 yV?$$ #_6QJs FP"=F FG$wo xTa]2y H")Wr QeuaP ]6E`{ zt::d GSQfZA OTSeC >[Y l X*Zp; oV>p~ Ga,D] kkyA^ K?5xFk `5Da8 Y_46W u<]IU) t("k4> ,LM.Mw@ "V)=T 3V=5E ry?;$2 y74`Z nF>&G  PVsh[ t0uxv5 ug"*^ /^m`1W U7hZ;  Spj< e(xqc! <evuri Mbe}a3 QQ]Jw6 ][<A{e-Q eE+7I fRicvI 4jy}] ),1>K VM4=?3 <Gb2N hyqpu UC(>x- {Rbhb TaBvqtc GaFKeJ Cm;l8L ECrnc CPT#!3 D&E,) {L[srfk y(:ha z$f:~ 5l\??X rS-#G \9Oh# 3{GGh h*EGvG *<)8bP hqcdB .2SjF0/# $uhn=5  V\7o/ (uM?y U'QPl;~G\( 2dc5< *e365`n ,vZ pQC, ^mCNP ["`xa}3 4>M\t 4YKmV 89mo9 HR& ` ECa^f s+bmIEPa- 3u\-w ?&^1v\J  m5K;3 xbSIPV jBMY9 5:6sh ;FKO& V4aiX 9]-mq y9`PgNM| T]<%Q zmV7p` J[S7< !K_yxW} GvZ'& 2xC,l &rQ/kb ngRea esBN` FoSwp 4NMO~ yL"^n DB,qc Y<hLW E3amb v?6l/ >$`?6l XaX++ Q$JP\ ?J$)j 'I~!7 E[j3Q gH%-y x?$7; !H^n5Q '6* 8g j`E<U (,"JY _:}a[GI~ {/bqE 3q:kw mwqb1 b#w~@H VmqXQ [<KX  [GjSJ J}TXl1 6rOb,p gspO{ F}_kp A_/rF HE"7P 1)bNadVI jcx6xz }8b9@  :m3}  a"Cxtz /2##0 IL.R. G/"^o 0'>Fi" vkx{i_{s y!#WO" .r3jj( GN1#t g7r_< E'X$- #Iz[ZC +kaH" %R5pP 48cZe tE(&+ (@=XFv di@.3> fOPyU |<}jH ?#=lCj IDATFY" 4eCSV IoU2@ DnEY! 66D?Ro qP ![ 7iZjZm 0Q$#l L4Yu( TdEtH Q*AQH :)J@J }`x_g h"qS#L(' >L[Ku &^jY@ ^ar 7G AX01r0y #<2<o 95z+  <->5! s dHR P*sRq )|$q@[ {jc?x ep[6q 3H]FK Z}L%Q 2gIo% t_9Ch me!$,7 2`$4/ ~exok ZX'fm ap6=e<>9V "BUid ^ gH, ~|exOw $DX5:86q ZTJKj <%Y[u$f|b ,nFB0 Nm2ji P?AXGk ]c8%R SFKjX XFZKm @".~{ b'(X)Y,~ =bomj bGylgIiJ J$3&V 5VP<*m. ~fn\lL }U!gP%=A _{m44 2 >@x sSP"t }F@Wn7i {P@f& Lc B+7 4rI{x  Nv&o Ym^<I }RPj: &35rr V$EVV 1WE"_ ZG{g?8 mcLw] 0/a>o G^aD# A6+tR KDSk! X^\e  F-(Yt >C\+4 dhrgz hp kC>Pej [^G n !KrO3> +u:^Ic TjF4m \VbxFli`B &F213 Am]mQ~ |HNb* !.h-x -D-J# r0DAr +.Q % T/(Qj@ YS5/" i|J+BLJ R{IbT pG<;R A,61W-E 6PR"G DU%&/B T*K?&>fU `n/ttC&O VGpT% %#BUo4 y<!9; X-2+v  $OfnG t'8eh'E F!e#, eW2SO roS8d |f`=0M 9uBrC gON\:Q !$(F6] lBJ<L lu`7F O%`&, n23duV *3!Zt/ MM\:{ @WS!S 8y"T" "7ITV,& %2X4j~ !ppQF}A4<  2\B<) 7\u=n ^E=o| 33Mp_ =E<)A L`(C"(O QYLZY Q{pql d wZ0 L=Lv~ &2MVig 2bb']" 3Q`V\ aoTz)n @,0x"  Xi^9x ?wK*C Q[*"W .(`EJ&MZ b,"c| [%7ex 671S= xR;4D }GfJ8 P@MHO YDP!5 Y_?r: OxUN#=! Xt:zV SBCguh <-#pGH CwIi3q$ db32  BpF3i s pX+ |9%u:m a_4jX <Rs`{ YTN=QI !~Mv' 0d"OP! +wN}p &coLy >} N4HSI dBYzr /fbd> bG`,6" s9PTH5f 02OWZ *,3D) 3bG3H V.ize\%Yi$  j3HI jbxaD): i7>t!k zU&9M .!MK8 ;eXXm 95no4 Nsb&d =&>8Q >EsS{1 "-,bf) {1lY)"^ vk1Ba 0@*(sI W>pf@W CBO#E cOf{s/x .hnR! B>+Qo &'map kW'cU s?X-OW icJAnZ#e#l tN~+6 |X,3a @a5M+/7 Le05x iUkS8 }Ul)Q kwTj\ $m,eu .5jTkgf cAU(j ^*l}b c:GNe ;W=13q o;@'5 a@^cL t3d:( prf4u~a 0*O@[ Tnxs} 1e8[0wx9` kzG#r Z`Z-|c j>(o~t F1>cOGu ak9;8 vkhKu QLqv0 Cis9qb?|h 3D\;uj ,-=ui X73Oy BW e! ?9jOl~d 6MT+SU (T]DA ;CN6g$ h><&Q+ =hSq' .*M=a?; ;v&n: c+vr{ Q yd _ "rXb/  b_Jy QFTK> 8xxU  iZYHS TP5hJg Yj-T) `n3"I@i aD|6Q ZPCR. :lejt jK5>/6 0M2l[ oVc96l PJHG^ @7/Se u%!-']^ Wz;z\i L^M0Y "Has* `Q]`c  bu4U C3fCf$ )!#oO s101? _3}9p )Y?95qaf 1+&a6 8BILMG6 *+5Ev -I,kb- HQ19jH&v <,N<p*+q8S Vl=o) 0M5Vi IDAT( rU'n? Ij5AZ ^G/3Z yW/8u 9M$Yf AQn!Q tcCW2 {w#FF b:v[< Vc*0^& <RlWvF dL#:N& lL74E rOgUi; WOvZ/ &EK~( 2]wCJ  ?lX}x 5fa6)< 0&1nt<f WLT{{F<9 $L^{m4  jgK  a1cwvp RB5A8D! 2DAbhX i OZ7F kU" JZ 8o@#m7q _+oqp4 V11.8P+ A2j$&GRM \v>2{ {DmOK Ox1Ky cRVQ& LPxC6 AI!%u +7wO~mm D|HZ/X 4O.9p 1&ax& o1x)#. Bzf:K zadxA 3>){qR  >q\AKL E'K%14 aM<r4 b]?=;q]s 3O92u >t8@f >b<s?{ /Om|l X=m^2 ;1rd? uT7N9 3WxOF) 5p #:z ql!<G8q OsQa2G !t@O^ <Iw01]Z(lV 9*Vq$ a zs0 b(VAw .Ss4k [x(Hf !jy$}) qDdxx -&a3n jy8)wCL fjQ!N Ad!XY %M0^8/ 8Y?9M :PK1g R!w!} ''NMV fOR%! I@2k4 }_m4IZ k_ilA d,IL[_ 69dK  lV]1! ikSH[Ja <;&.Xe (>.Qn VKAR. RAk3~: J@QTlS l48BD x&f(a 3[s5+ B9'qDnJ g*t$udW !l~&B sh;_} )wTlA w}\>' @|FJp eDx^M1 @Eo~P j!y2sW $M"D: &kHqP 0gP-UO ]4~AZ AYViT zB{tia wnO=c N7{w5 %dUZ_m sM6Jr pLNly m&1rC 9>H+n k~X;S ]].,<ev ]R`_3|3` ](q.i PQa\7 Ool~r *n/-U& *|,wv |;f}p` >vV6*< wmtw  &z[wn RNIVz KQEiR) q@JG\ D(uqz Ztp<m f"9(yf^ [N24`f8 Tw~jv 8:35' ,z.a] K_1u@H I8hy, -g~h3 `ii\I TmQYy ]^x$HL #S8!B DtU*O< !=u3N- <fp'kP 8:&ZNe 4~9~= xjxP< 6'/Vq <M195 D#W`rajx =GZ.< ?l#MU >7_2P {wMZ{ r d{)\ W72].[ iwzJ3 &ay $ 4:>}k O<Pxay"6 @wR.ATE 8L-Lz j[uv3sQ dpnp* GZsmp, Lui/M/ K/H2k =X>:o"4 p\Ogo )Nk-rX"RCgF aj%r+ TC0BJV ER&KK ]6seK .ZSgM0 #s"IAi CjRN1 g0.|{ KXhDadQIB{&2G &\e\C X?%TB },F$7"K ^grn5^ *$+`]k mIXq1Ty9+ q>@a"V lE~{o FuBCQ 7\DH\ Cq(/4 _!zz4 ^+lXQ k"/ik >?=:mO^ D`>r2 IW4o. ;esMl-" 4[<c< hT#/c] F(tqSg hO,<km A*%a)!)' tdM!2# 7P`0:j 78z!t,P Q'!IJ A*B.3 <l,ZX `H_Ke wd+<h y5lSd! 7e_D+ yxO2{ OvOgVfu 8p+[?1 vY-]+ 49uko go_bLQ)c o#JPM}q "%gxUc]f )-$dh 5.|TO iV5($  ;9Y@H )nR>R B7axt?  WNi)2 Fr5Yr LKm5wY} J#p\@^ W$Xi2 @81Q< =:d%WL>Y +M}u7 Y>@3(j ~bixc 6{b%X "0<LU 3mLGH YmT%H GX!&>{O 61{(E H29VjP ZA626 HDu59U 6jMN.} eLU6g s.`uS *&x6Z Ov0qj,s _)r)l yvuV; kmrvJS ;j6jl? wSUxD r&`-' \!:xT `L@zy M3tdE xN=V#j> |V1sU: (IJZV c(`aOb Y.*Iij ?g:uf i"D=N P*uqV FEi2d <XJ&1T^ akIXj^z A56hh Jx2";$.( Uuc3I4 7Tpb! ?VR(k o>0kq \,(;4Wh (b_pE ?.hYLR A5X5( ,0KyB9)<G P^/Hv &I*2, j5;Wz 0peku t1b\iI [Q:MNg  \I[h]G noL/%K !_wo` L/<_D 0&v~| ]Pa!P H<vku *N!TOu  dywA& _l!=[# ?JznLww @UthEoJ e{n~=)$ auu!X =e8'G zK_9Z no.?pn T"|}? ZDVQC 2o"QP!9 t@z~! _/^AhAUY "5`BX vbET%<z .fgU` @%H5\ Uk\iFH R,CrP+ f}1wP!v !Ng\e _w@4> /(2~4 gP9%a S~J;U f)^FHo+ !5.\: ,M^nL^d7 6-?7n$ nT8tC O]a03>T "441Q &p+Y@ px2DF 3Xu,M cq0aK <`VUw7 'AbK3 "CLhG I$?A$ ;]X5d pNmbf} e=zJNK 7PsL& HMr7e  laXs6 jK.qc Fqu!RU l<mFB :7I[S' J-Nxc =(tKk }Kys2? 2(YAi "zyZz 6l6eXu( sk'S* g"-UPUQ 8/".Q vdD.F= 6Y``n)$ W:kAL @12B+ ^E,9|RY9| ay,3$iV '`XL. -r/hAV _5iX1QM ?!5-M ~<P_Y <6I3Y uAvLj6 t/l2fC{ So=8x 'Y#H>- `EWn" l|'V] ;>}bx HeAH0h rsj*4 aR]AU6' ;!MTW 7xvE* Gw^8\_ 8wHqi KPfNG 1?V)C ,8%^\3g :=uqb LtXIczt 'swM-} "g=HFv 3<xE;E oqn7E 7>@8y. Zt24} %JqVZ % S"e8 "T_h+ B!JCS pH6WO(/ z6^RP 9c2,}_l UT(/`W %7Z(zm\ V*<$7E 3`%Zs i+L6` Ol>66 9hgs0 SQ:BL :76L3 RVRHM ;e(Y\ y7dYf c^NJ+l% >a}EwZ Z^aX< P`c[/-3+9@ RSY&\ LUZ<f C{f;O \QT]t }qzS9t T=bk- &;+?t %pX`lX E[A!@8(r{ 5AAo\ o=2hN _z@V% ty)y9(C AYbuu TvBNENU 4'gxawl T!h29 gMPy7 fu\@; N=7^De T =43 jB^#) #+I[I aV>iX IR+Pq # T}f I)Ly`= 3Khsx QHCJ# 0{#\_ %R1H$l sQN|J& Bg1aS 8<Jjv coT!h j0;WP \1@]SULT +s5J0 l*>L< 2VRdI UM^M  a})Gb _*6F . b-Gb;0 ^*0N] Z2mrB0 iM/Wk! LY!M3| L"?>8 fj0y) .5{<': `X-hl I<gaVo 4;WIY tR~h, T?<M3 AEM.R GU%jm} 7=|?= HP/_uER 3vX=1 k1hm O kkXh? <L9)b4p{-^ %a\s" SCuaf 3UDmV t"$7` ZF9o8 J4f9: DB>+~ $z?|hFG;g \ehX\ 2Re&& )r^ZY V~*/8 R`hD.O $m/]V J#vT75& :t$;* YLC]g Om2HQ &mZb=G s`KlG !c,QW ?^gdI`.]) "H]j+ >E/ T X-tHh NoX68 h<':0 c&[7t%* PW1$AHr %B`zr V(Y:F ]Me`&J<J4"= _8wrya 'fCZ5l glSPF~*fD 867%8T LP_n| B-$OK ~qb9mOq )Za={2 <N(j(6 l) 2o "d8v# gq@:(I \L%nm Ts:#0 VvZk%; ~}};S E+lY< BJ'u' oV(JN |V9{ 1 _Qg-,w P35@Jl/ img:? IU6bm tPs.GBG |n6Z_ ~)Cz? 3~rM_  }M.M0*~ R5zmVN j~1b> igIZ h k'-bX FTP];Y a74~6 l'C}K -`XI\ on#q#L \`'fe(J esU{O "mK0q $*VyK $(<rVF @|%,,W=n6 ["t L vW!DZh 0pswk} {ngoggwksks} MeI!s qp{z4 3gwyh +D.y9' O:j5# Xf*ZP %IBAH n?8}iz @_:=[;}uq z~nPm> eIDAT 4-y.%Fn$ H\dE( 9xDG* T% $D BZ{Yn &\!cK#] A.bSZ ob&s|ko Q*<h< ?uViX^ Rpo'D |])I3 V5!b:Z\ Rl/Ho [O_?5 V,wV_ |yPy'5 JzEH^ Lm~jm lz{m~{r L-(aDG ?~rrb M_5P1 wl[2, _\Avt p#dXk{Aqo- YPDc'd 5OLini x8up| _:xV}m}z =[A&S KvYb`U Wngo1"hZ 4a>aT V^cD? DN%iV' %MJ?8 .Q\%3 )[#?Y `_!K+ "+V&!z :I3/' ~1YK4s 2iZVB; 6W$Fy5 |j>OFN +P%B6 PMY,8=HG y Ay' ?)k)2v'c 06!1AQ l@\A  =15pzh E?Jczoj Z#eo&-A {6*.E .IYCy t70LT3 D42 > 4S !&D| S)uAhs y'k93 f#!Cf; &Zs:`P >y_?S v,ZqX =fEu, gU[/zew (JA~4R D#g[rJ <fFkn 4TQj0 IPE&b ~BWEo bk|o! t&sjU! !]4*K t7bP7 6:ZXh. rFk_4 X.}F< W]Qz$@- u|UvEqVK% 0rCqH \yoY9 $@*QX+ T[+m;z F$/KI% SI%[3 a))RR% }Z~<r Y){e$N> A.<va $ieXJ &w\$< >yptj)h _/jSq 5WGZ=Q{X J1xSa`{ eNccNh pzqN=h dk;}< h.UQ; k0LfS 1^SP-x ~SFOOuc |K07+' jGC(6,` f`AUo x0zFa  K?"wY TKazt -s-\` y/Rob AT7'g 7qvu3 <#Z7Q ,=Y]fM Q*/2uS OBc@| M9Ln! )e&d! w<+~41 r._]< zAlRl1 }k-^K JnZzv \(4l4 VK%)3 e70sW PTbLD06 ng"~mj J*s2_ 8IWM-2 GG0%^- bMb{lt ]z1VM uH>Q' =1y+O ;x>FK*eB h93l_ =gcCA |?'Wk WuS5oUk kecti iu[-H Yj 7g d_{mZ nIu\$ -8|5am= zj9bv =q86` oHEMe% AE.&n}] IDATx^ 5rmwt{ [4f=' QwC?%0 X_h94Au PG~5=- v";Lqg$@( BtOLA C}#BN D&6yA Y/h%7 AG4r{~x B_~!a (jB[|< !Cv/5/ feo[tQ 9x@H( hvvz6 tV=>g oX6yz @\Q{D ?&c00qO ~"Zp: 5z10pKZ  c}q. ):bsIO bqeI} Ht\'> bM#x7<d fhk8f V-.7g x09'? {*~fRf 9Z+fjqU9 *X"4Nz XF7US" +$7Cp -7VW; 1Jhkww@ 0/>zN"Pt dC&8.^ 4$mEN DfRjv5[ eF6Ym ;i2L: }^B@` `q=h& 0:P@5 `k7u4 p#:_e: (mx)! ;'sUKV ESBYlpj#o tZ$:`*R^ +qF\; $2@qb Xm{wrC6 $Qj1G0a qU"z9 D2D'_ pED12 I))a_t! :4)JCv FRqFJ3 >9]/7* 446k$ T@/R< /4:b7 L(+[( TAV}P| u\Xk) d[7`D ;;>bJ C-Si%6/8i{/ o|vN6, OJ\?' hDMhnxv^ PsJdg ++}{o CVtJ| +IN6^ A7]RK rr?c} /~BE0  rMf@ 1)Y-d ClFXoe= 6ws&C "kbkXKr Z6 [6q ?~_l6-bK LZD1o D9_Ag LuPD!j ZXq0+ jYY\u9 :"|BJm y[BDLF F?$?#C Te'1~ ,T)7rH uZ7S^ w=2pA FTM@f F\`%\ D6&7fx NV'KBd) EX>>^>:^ /VhZ( ,K&|% NyCAE 7gg|yv e:?Z) 2OE-O8 tk1YX ;^Oy. !)@"^ )_IA=A[4*? .@a6B rbwt&h )MPa_d ``lOWL x?9^~p 7=6A5_) (fy 2/ ~W*e<P O=#k- 3N)U; {60ZB `){/U "=VLV ^^&-}\ PL:9Z *Lq:X >Yhol d>DON -B5lv QY&+- *92\O8 [&8%Sv >9^<9 R}q|q)V 1&rO9nb Dihdn uNPA? M-0<yu bIFW;R -1`+( m"0KG -07K?@ ^aRN&: +3$%2 [*u\^ OUrp# MOzsL, $c0Ka q9$jj4 j;_iG8II '`S0/ <JpGn 4$MYD n-RZXZPI subXq VoHc5 o)ZL;n gn^P^l} ^Qv/_, @zGR;wj @:7en ))Q&D GTNNf ,Uq|3A; J1%ji ,|E8+G B9y5h A?(T@ /o/NQ \o=T= M%9(/ Mwf\w z*5t|4 tvU2w I-s`y %5QOQ8~> 2/ZcH }KXAp am\>l[ ,+umH 7T.H< T1Q*W Y}2Z  H4]edT hx^1{ w~Ld2 W.CViC [7KAQ y99n! aTI!'k cO8Ll0 n+<=Y (#sgO Sj2$} qfU"+Z; ;iKJXJ e{J&X +>k~g>= 3pp18 y|~qrq!g An^\) FEQb@ :>[?9[ ONVON 'T/vy<1 *N\yM9H riz-l 3u`+{ cblhm *9E^u R(;4Wn .=MHm KFi2u}( P!bO9 S~+Eb%Qz dw"Mh 3cDO&[; RHP(*MH 9"r'FP2V WFS/hd *^--g0 LI{7& =IA2(| J'/>; _MFw~ 6&2mfQ j@)dL9HD &?^`,7MT zTpVU agZJA~ *}9Xz AaXkf `8;;~ mTiG1 NC8{| 8eh/( %ij_%P cILv.O q!\). ;b@Bh h_ m7 >R7xP oY,PV(;> Fi{UNV brSv0 U==>9 V $#eY ~!jM>~ <&(d84B nG}hD0` U![9N xO&h$E Yp`f| Dxp2^; l2SHe ]gjK/ .'pKX 1<a9N j4U>| bQ[>Y. H+)9>_[ ;L3]  gc=lM s'Gm;6q 7gul$ C"t0, 1ET/Y >TlrB Q[IgR )JP[x mQEtcD *6# z <D[t$" OUIi2 xX_rm 60tq` /RfNvi Ne%OWR ~jpq,.> S5MUJ Wb0b~_ o9w/W y}5ymz u>~a| }>~~| x-+ZH ,<EB) ,bDlk GCaW2Z hIHhD JDW[{o >gSGVpU X*:8g zkvo~ _h[TiS R`M#=8| 3;A@c <?v%$O*' ,o^1d jK9"$ t%!ki yc5XAJ M`U&K B%G7[ PbT][ za #- s$Mv' jUtMoi kY+ZE #JrPf (s3U}&V X0i-07 j2P/o rK/.y 3%gR@ 'gqzou NgC{z bP}X8c `Oad{ /"-X3 *t)W| 'fl!V T!6_\ %0bwd+ t]=$I y^ibG _8,sJ gXUqg k:OH)  zL@% ]7d%h+ "HI5B uqmWR\t YGA/Y kKmCP ce$e~ jws@@- C'iHs w7":Mg: ivt(>j0 ,*7oef fhD7a ]A@qc ,R 7  wdk@! KGu12 s8\$W Ml8j~ l;LMn m}/xp )=zaS %]Djd Dq{ql{ OhW&sjqF <p|O] iR}C67 s@j*\ <OL^RE HDP3QW x:qAC usLF0 FxVt2 tt1ov O"=By (_yY9 d/dczH >g7g] Fx&8i 9;&A| _.\M,O Z/&'@ /i+6_>t 9&f0f Ch@'@ zPhXg f\>tM *q7$f #bo*9 YSlsy g^2^] $.AtuV -@5Y{C NEtsQ; -#-GF E6{qtq 0sYW~ '?A\* r3b9(Z aR_9WR c"FSs CF#6'q YZR#p J^R$! !5+{pmtN %E+`S &Icq| VBbyG$( [ka6g ]( -U \V[5" ?;=AF Qx"_c &^TfZ.D I`f8qu) 5fFf6 *fVakj =7P:8 kaDk, Oe"IK [!i\d 8L+)^ ^$r-- Z=Q>6 }_.?U emx}]) (d:F{<  Gr0#  D gh S<*0$ F s[mc ^FlA{ $ENrw pf14|>~+ L:/"T` `LMDW'ip TWy+X bC"2V, Ht~e2 #gctIr[t IlYzMD ?~|v| F+o06x 9w1f, Ul}Yk }!-p_+ [im8O< "c#/( yVT7c ^3ap~ YX:F{ 1=yM4 `9be^Lb K>u.f RR*IX- ABRo" _MFpR |7~z6 moV Wu +aLWZ jTr@U KJY6sH 7WMqag rb&54 */dGl 4<tsw \'|VgA U <.v `CoE# )aDdI| )s8gFU tV_E|zZn +3zjk0I 8"F1v E/M6U ]ze)S {i"$J< XWaD#-O 3@*&9 R%v3T !Kn|g Qjx;O eS?Tp JpR#I3PASK NEUQxX Y\U\-B Ks>_(T^ K.uC! 0K0'T 0OMecHw ^+In3 s10a~ ~/mZr*sS 1;s%:h  kr1mv G*$UR} =z*:I hVgYz QXr,3 ;5293 Rqi#r 0Z\fh] 8H/A~D T%Of/ ecna;8?_1O bLo(. Jb!QZ QX1OBd IY)_6 X9*C6a N{{<T )KHt~ 5GHc( $ fZv4m< >GlZ- MKl4b PYT!e 0(*?x 1[m[G'6 (tfgh 2W6v| Z]Wue \'\2K o$MDgh% -J&g\ _eg3b ^~ds; MK *_ [UuOY +bIEw \;bV0@D oxNFs ,]\Z+r ZTQ"  -OVL= A'0Y) ERCc$\Yq @&"*rm` Pp~q- ,@OH1W4( '=(f8 PIe}s6 4a$E^[ XayN]:E m.$ x X;2\| }-}.L3 :160? Ai?*k %DjEl& fh)b0D $3"%h \C35G -5)p,p ]hzb( $v/eI JWATt "Vm9] `A3\7 Xfnl: |l\=z }MaTp !a)9x \mlWk h;Dm" {);h4^ JEHn<T bCF&t OfOhe| ev8E- 9:4ctb[}  l/nxf otVQ- U9?qc Ktc!Qs zu7CF -X4zJlv mEjvM o\:Z] &d^?= Uc<oA ,$=rP o;xuK t5KWOo xuuqv 3;7>z{ <g%5b :|$\e ,CBrU~ #'X94 LB7XI -O*H~ ?zQsq [o?>zu gN7_:9 ^K3Q_Z ],vVo ww?qp 8$Hp- ?}rg/ {?rO! *|acUW"o JcWw.J7 jv6.| ]35ka Fa7y: p~lyk Cm=OV S?W1=? 7n.~* iM'hf x,1qG 3&k?d ^M'b_ DQ{#, [[eZlE 4V!*h S;XQO PA$SWhXQ1 Jb!h8 SN-L?z R$(G` pua}2 Cy&rs r's3c V5,FQ} Wt.4~Z# v6c2` i'z+S ;g=mc l6xGA 28#gfP p,|B}' )5ZtY4 B~t[,H itc]N K5z*kM a@F!f<s:a 1835` G08fJVP @d:`y +0K9T ,$WQE |$%Cle7` W|Q@Wz zL {,4 1 %V&4 `o1d7 j-?wC IWXJE; @<}EBR z7Yj,7 2k6aod ^GVDt5? g]v`s]jD tUae1~PJ aKQQ[ $EKdS1\ BP-U% M]RC2 @2`4E 7U>QN$ B@]cB/ $F!gPL< GH_`e zARSt Vy2A" ;3 /hh  *dTW %<+K2 >f(zY zZ;W8 /;em= R&!'# 9Q{qxy K6aP! Yqg*#d" |eu#? (6Wn" 9:2%h _Z*<P S@N H U3Mg2 `d=e!IL2 mQ'eq 5] WI 2Upq#~ P+**" 'Da`> )v|x< {M'$J#L L+!E: U^NCb+ &JHeo6 G'^LL &}QRw cR1l! *#Q)4'1 abQ)z ~IxFq( @g%CY `LV|d tJaZb /+Q*; R^7q<;c P\Xgj4q `gk66 J45xW HgB%( 3~*tS t&y+1 dLk-t S}gy+ cQ]=r MNq6l edZ s XR,+f ?i{2< `^jZN |]~\\ ZFcsSF je~IV* mlOcvT eDtgNtP5 Lscqt q=cbI Z0go$ :l^=l Q`z}f 6cMZH #6r[Z, AKa`/ RicED 5r_j) 2m)55 f\ ") Ye5tV+x 3M$.2 \X'%T 4qZ`e52ek 0<"1Z ,YYz, ~Es'| z]G`?2$ -nU(, `Gd7S N&T+Hf 7HVaVb t(sWi y,yB& )q0zU J[8@d Mec^$u oYHfh d&y 5 x.-U2 19CZm sS@\FA3 >$#T! CdY>` :V[}B )j*?F LZrvj -A{Bi B7cu[ ;^rf^ _C>JW= =-p+/ 5#AHs [<Edm $L-U( KP%u7) tkHre [t!;_ y1d^S5 @{+mC 6shF\ .11lp6d Gl]$@d)T 1PYIX 8\HY@lX f:QQsL GASZV $GDM, =y$+|+ Fn3rh tt#NC 3UM@\ &zFgk 4ZE9sO5 2&hl~ tSUZF 1wUd4 (hn,9> XhDbqR 8pJ2HmQ B"`_3 O%%rW 5yvT` P <1]TJ RNT"\S YIA:] IYRm! ZW:VQ gn.fW 1rPl- L^'vD (D/>[ H9">U +.@CC )HaR7 jFFeZ /+@Vb< Oh\,@ HKwS)^+ S4t0h B *P$# BuWv/{ /.?c{ l/>u{ qhgy*1 4-c)+ BQk!jK )_,a] Pv 0S /z[nk .\[n,~ ~fdL  t^Z+} 5j'Zc "87>zp< \na[+;& {:Avbj  a}Ouf a1vfy0 wO5gnn K'?gu &4*|Knf >*38t *J;jA _J([&  A:90 [\.oyD> +XSi$ Jc,wa /+(D4Z tV.CdY^y 8Rcc}X/`u it,u% 1.)-4 <azI# 'Q8Ly u}EZA DAco, !HIR|@ %13$n ;sw4{K |;t(  $5(N?V EQ:+M-5J# ,Yc8m W6>cc )CNvr "!Og' @Lfg~ |Up,B: SwHvdn/ ?5Oq! n/H<4/ 4=zYzg$ cG3mj UXe}B EfN@v! >PX9. P2:S/!P p dCF 6/>tx i^VmA b%50f 9Ar)\p 0To>Ua 3[l=c>C09t "Z$#Q* 63wjn Nkvufn} %Yi$G uHG<~B 2o0.o fq49,E MuXab ]6uwX @~|]Tvk g4J=2% [&5Rn |frb. -XwQ' qgJYV 0z{Rd |dShD fdLlE> :I?)9 bJ9 2 TVvWN$'F <A\f%b 0[|fbEF} %;0!ob[] jC=Nc R5O7X 'l%/^@ kV*eO GA;LcN fJ=El. +nq}R mt=6~ b*Zl( .KCzPK y4zM; 19FN= /*0`z o-'lE ^351e# 8 RZU 1_Wdl^ xX}(Z ($G9Z7 $yAoS #m/zQ y-$sI F>M7, c}RC. d1{Bi c]\IW[ lzh ; 4 Sp@ 3KM?( B2@Ep EhK`G^ %HnLh VQ#iD fr[/=T $UUVPK X(]$j H3$7[H[ 1:;9;;:S S~/~Q^ //t*0n 3'G5* a-Ofy ^w8x`< ]lIrd ,}MFk lcj@T Kk/x` /,>wx A[K/9= O~{Q8V~R b4RR% id ed dhYl'&4 ,N@B12u <V,{ziHU bwfpjI +o`idQ 5xr\" Q_Wb/ G.-?w =kaBwf's v@UM- \4B[$ +_hiB p]o@x IDATQ _Tp0# ^`P/. hri2JX XPH`] uK61} L=\9c Qn4Vs *KO]BN RS{5RF Pe_1D; <[~!} u`@$k &:W=B n%VTYS 6JW2Z PrY+3 %rIy~ xz+8X AOu$0 .!/Ce 7_teq vR7Id DiiEt_ m}oQx u#:wz [UMUI I"dEp XaR_S *!)TaV , ;^DI\ 5BY`q$ JG]cE 'rpCW (c3Y2 CE%%h et3MQU@ 7~[J0 6hOn+ 6<iNm #T73[ gb:xAA_ SAR3Q mM12+5 )_xT%Gx T:rPR ,9HtK /tr]' `</%&\ -KG"w 3,o6;ET g%&Uu _M}Vha Q<jrA ]aouv bfVR-} tTy3ZN A\y%{ *.XHl3 s>?sz~ N_`G5 0BF3/ LEB,V( <TDFZ"M *4i'' P1^7p( a5J[n zh15( $@'vp J);1  )(A?o lP)tU "yD"< r}rYS EJ6~C l8"k( A^q2, z(%@FcBMC Z/ZR2 V|u_" BzhV+ AG3+k]XI sA44~ :vZ`} |@~5A DW+$' EUy_Y' \vi8U JUZ`-m TXt>M3 s"Fv2 L+,$5F aY$Pl =mwsq dNK|5 ue7N!6 &],Cm 1l&'C -"n!I ?=v~:2 UBn}R dzp^uA |aq'|B (*i]" tJ~W7d3 oorzO< NX"#T[ /ts$Y }yr w' }x{ie K/>]x %c$h" GM&rm d`vnm Woakey VF%uG Mr~Zi :=BpbT w>2>} NO?z>||vt cd"}p OXtFQ 2EYei !C01aMs -u&j1 !;dcK nC`+<< p2wyn EEb I 2vb"' HK-!J kIKjH Sk06Y c`0(,= Gyn0o w"xzyZ 8!^n_G 1x5)Q ^KfH` .,=%; yr{>C )>"c[ 0Ql?c $ H<;s e|D#~@ FeM$$ IMy.d qFkYHr( i@RMe^ R_L*M6MT :a>[w nS}$! Thtkn r##O2 EJROjr ^cZo]C6' siFxw r9JVB KtQfs6 S<n\l qmq~}Q d0a(b #3$S$] )OVps G{E*; /~`x8lD SSH!\~t<Y TgFZ0 __F@|xn E:aA?~ A+,Nv >$.6z7Z }/jTO3+ ^.Q{{ gWW^s vzX5Gx fFZ3Aj iS5Z.mlf R+z=| F0#1+S Z3fe.2U5 $ZP3% %G_v] !YBw, &<fvS J(~#; F]^}N 4(g## L"_Q"_ "|h., .^!AAV He& + ubRjv ]+-.PEx NsWqyWY 5fxU% _Gi)y2y =*o>b Ijl81 #.Nj/$ US)!V$f* XfxT]w >UvO9 J.r%gf ~JE2m 0y$aPY Xf]8P _^&&!J "5AK- n]LS8^ _w; 7sDK 9^cko WT5ZX <tvAc V8}2z 7s,BW!M  ^ZL%@E4 6W29]gA!gq`U /*>|c rrrgy nug/# "P~O4 n2%** V.Cp4 7>tc} \ON[j &)jBMp D<)i$ k#;j: ~c\kG :Ayo2 Xcx}{[y{a ]$o0cLU ^176? UkHW# $^.1' A|`,b_ OzxUJZX;" Xdhc1; $0zpa} FL[*B *m6U^G :4lPd "SaRc XB)Sge3 ,6 am? /@U%T Eb@`4 BT<dw{W sdo,V Cq/`4 h{o'~ xm;\"1 4Ok@^ lJdNC? 3XE]u ]p7|~ X"@,( W7s#E ~U%G- RO:~  !a<"6i D2j4O +1dkj "d2bC d9yC8p ,;)A$ J,IVa ]:cgU ?wi}& AOzQS \Q6#R HLJi41 5lq:} 030ee P}kHHq  /\e. qd#XB n)96r 4(PT! yh^jC &ul|b $+t & 2!w08 "\jaK y6BDb {&Nhh _wL7$ d?W7.2 `TGri' {CxZp <kabb abn=5-nX E`-8!`f q+joVA FPGG] rh:#6{` b>OGK pb1sz 20d&e >`nKA xU7)e 6TL Eq,@k =eBv8" PF/BK :BTWY| KQ7*Tw {j|h6 zZZ&U c^E'a XJe"# d3sBT `/hDP 3S>qh hJ<G6 z^gAk8i /<<lC @!wJc  +KBR7BK v("w8x[  .B`k j?8(U -Z2%o et] + +#$)( [WW<] k~Q_x2 e]7+YV'C, D%{61 ,-\&S |c[i3a@2( ?p=L0E Yi%>s |n{&& ?<GBj Uo*YN ;:u%2  EQ?" 8^o`, "`B?dsF rXzK;y -K=f: "n$`R} am|HP |2TLuT|H .>RbPM =q7~j Br)-\p C%6%9 "@vr^ :Uf7" ~)H0t H E,(~ FDt^3 &LQ"] )I&,b =e$RID  eKip 7m'`j` f/+=M `B>4Sr]C oZN[`6 sb *Ao-T pkT5n LnU`d D}v92 {!aVV?; G8maRK 0\#nwP W~'Rv "MEaet( hG,\% %7 a" `#IaLt ~rYViZV cUUYK ;%$\n* fxC}ZX l`rP_ UF-P$ zU"'S&"h ]o9^M \~S'K sW2'a +;Bv$ rW-VR  K[#RXc uYQrB*X 8)\-t My.i&TRG x:WwZt<o ;4 Lwv "P-(V+ ;\G/n',C DzEqr i%cc| ^lgNd HIfh=O A0BL6^ 9Z)>]XV %%5wH 6[8m> Q>PW*xnA NhZ%6[yTpm "xl<a g3wQAU O!JXO ^30<t 9"/;H& $6hjyB ~}RL+c pUVHK 6ZDW> z/I#SP& .!nhdL b:|jF E)zX^'u Ne@-_ FPb1zV :kMpK Jv`S@ $Kz0x !=90CYP &I[L9 y@]l ` I/-QxHz MA2`Z k GG&X ebiy9 UWRj]eT Nw2L9 Nj&q> Oo2(Q RTY2} CoUcb &2<u1{ =!"=SQ B-LQ=Z lM-&* Wnfz? ^Ct6G# ?CU6G J[qp! JN,G(r ;ys}rC "tRV(J i!S|h 8*wL;5 e~ceP O42=a Q~k;V U,6U0 B(%T^ V0,.5A% Qutz|k zq/8p M/D=Z /oUT} itQT) taxRV C[%g`:3 _zfqv #99\o oy|gJ Y#N`[ (rh)V# zG%TY j:PM, 8O"d)V W>R_t GCj^_ ijgnO +xY@at,w Dkq'vuO` K`&am ;+|A_P00 ".0m' Nm&$1 io*o  L]cOK. [?q+d TmYaS #[80+ s:ca9| VIltQC; b:N\} .)zg` nlTT= o-Bj> d#%|C 5cQ9nFp P!Moa jpztF "H_p? G(p?; w#0_x }rkky |,T<~ :>GBE YWUz3J 76WtI XPpyz O9C5nq 8qfGs judOt QIqvr t4zTFKB&%a nTnez di2KY 1x$/n {@q3Rf HQ1TM 8H!F]!lJiDH <LzTl l<5_9[P r-OHAO P3\Wk) Sv3yI D i53kl `M!wmR 6<aD+lo RKCXW p>_l_ JS=5T o#}WI ]OL^? Q]6p] 6Bp/l yHXq@4V p]}O# m)h/% ;1Lq] Ub+Ev 3-]|e #q5-X hfN/1 (5iZ( fv#(6q B`{u# K0{ST &%3NK Mz=*6 ,V)b]x4Q m:w-1 L2xX,a &DO.. 29<8$GM ,<3god} -M@!y T0R;[/w (zW-gr -s,"u :8#** 5[v+KF IXfMg} KT7`K 63]|u K5R0Lx u]0W# :DZqXnA %#xM) 7lW`EMjW *?Mjd #V^rB S?K 4# 7v"TC ^z\:g 8C%N!! w@)a&Fr ,dC?f {p'`\}} GhkV;GL .aR9? KA/;.Y* !f~|j GTUF` 0zg0=3 (%(la )'X]_ !^xtsq B{p=* u=jVh k=jb~X JlvP3 LG;d^0\, daGw` A+5d/n:0OA -<1)l ts,J(!- ,y[|O JSVHQ quI)% Q4dF4d.  )fI8 LG&kZ Wv'>b jVu!n /)Vfo #okxR 7wEyS $/G+K YKr*+ J!,}U, fa@x <\ hazEp Os=c,%aR TI(#w$ 8i`bEU $j9LU 1d"Ss% |1B\aS#a xbwwO= lEhR6{ :yvJ!/ 5|]CI" y|qXJ jd]oj e_(|t$ >n..Y ({m$$ t]idM %I2E!-X .N/bQ Z$9wWx .}_-{F* KTwwm 8sIDAT K8pzs| Q7}"C AG&RB4 z>%Q4_t~ :\~L!C ao9'2  JZ:Yj  -e<iU!r :Q<j) ]kMuP (&EMi` 5HFu) Qyj6L J*rr@ Tteo1^ 4>}~vq 1778gp FlHB( 9Fqrtj h=pBV iE/:&S- 0V*3? ZD~<G m|Z`T (P%U:& {uy?uV ={vVY  K64_` yV,&B ,C1J6 '>jD% p7oyI 1lR*. puzxv sf>JIl 5K[8M *](xEK *&&YtZ<<u 3//?| _E6r8 R/~V- UsR"o Ep>Zb f_^{7- wyPAn 37<Jz Li$Rb> D!Xi? %djhx 4aLuC KU<4dzB aB|ME[/ Fe9": (${8J -{&KO _s*9_ ZXld$c XS&&mj L?cn/ D4Hr' IDATx^ %8de4 "p?MyGhHi* ./5rZ[ jA[U7 l!EEy ^ch_B} C}#BN 7/?[W ==j#vI t'0?^ m&4J[ A0g-@=S.aKi9! 0.,ilK ^|h,qZ 6T[{z2 <YvKc6 zs~&? tooW+ Y_lVT pQ="8 /-*dw  5z10pKZ X\YR_ fhk8f 0`Pl$] ]^.w&; oM|*~ 1TC(N ^Oq[D +$7Cp Ogc5(?>A l*;uq =qcIj fQ-2i$@3` ]./.V :e4Mt rkO@q +^dg: -gKD' R|8KR l)G3d 5,*D9 zX@&= >E**N bs*nw8F tROuc T@OTd 9})xq c@]|5 O&w-& 2`=}s P+xEb 0<myj "-!"%-/ (MtT, Pm/MDq* 4tr - o5Y#~H[ \(i,Sf X+-Y$ *aewu *zuqN $Qj1G0a >+ZYjC A&4+# 1[b$<w `:IZ4d 5~T3y 6AyjJ beCDP6q FE3W: %<}zT TF*/# PC*9g uuq|~q TAV}P| u\Xk) d[7`D ;;>bJ C-Si%6/8i{/ o|vN6, &47<; 2n%&K o|n,F= _<HIpNK U[YOX @P"SI hOhA k 06.Z" Jc(vz ]nGTx& Egl31 *@(8X )Gp$? v'>B8@D lY<I, U/;~3 LuPD!j UFUZ\\ C zkH 63Lv'b Nf*aS G){k` ZDN<Q. cQ6k!p b.5Y@ \/MtG 4!)D!  |Z.W' $b1uzw V#J*8}| /VhZ( ,K&|% #O&;:~92 e:?Z) bm,H}+T \SSHW:  ,Qf' U*~>s z)r2!,ku .@a6B rbwt&h )MPa_d jaQBsR Ny0`6 fx}dC>= -@J4R <n-Sg #f!<B M}D{A h%LM_ p=\*? !J)Ld UK.54 XrdSTjL0 ,mylQ BN:i8. Xk^9O $~:ZU 6ep"x ' JC#s (y2Jt -I5TQS -Qp39 $yY%j DPDF" *`Ni5 d`7 t H[~qr $Mbz[ G+<1A$ Y7f$U6 qDASa nxiXQ Y[@r1 n-RZXZPI VoHc5 X#dkT^ y$8ey< w4TJ&;Pc 5](gD _cQPI?5 "=ULn  4i)<Iq |m<eAV;K. +%m-/ ))Q&D &rB$+ Ib'GE5, MJT2b J1%ji _9_}v _#Vl  cz1M3| 2re+y 6\h6~b <(!B3 jcH4S j>*tC {,c`>) 8;^<=>{ ~uQhb bgl;" DM*Zpy~ K'z}| PdC8E@ J^:CW Y/)$P5 xpR%=} r48gx fb0$@ %5QOQ8~> 2/ZcH _>RXusZ S;zW\'BP R]65R~o3 sY$@' 7T.H< J$=>;{ +T.RQ <IELJ* %U7px mL% Jz) hxf]> Km|Vm M12va]t. ]^^8M F5uuR [>"#{ lU6"H2 q+r`W Ep0L}I- t_flB x,=Og% &mWeC .xkFHR> t*{'k U;UU- lu|v~t THY!B {!]zq m$,}H }/J]\ %,nB_ *Zt6)- Ya8-w Jv9() &-H>` ;BC-F ="M`{ 0Z*X7 .=KHm KFi2u NG3jq 33r )" ?uWqk u5. L ^--g0 j@)dL9HD &?^`,7MT zTpVU _SF)Q *`)RN@r Q3:=SG,h#@ s)Nxj#+ G@RzH/ ;(Xj"hb s,k*U or@*$F A)w _ j:_\J Gjr,I $2x7l J&LFC CJ/Ip !!B4` tK1`E'f )7:5V;D kZuPv m:va9i N0].{~Y xG&h$E Yp`f| Dxp2^; !tiGxX NLo<.C ]vQAi ?b)Me1 ]-sfK?Nx dzd?wr qy2Jg5 :%1W9W "esOH ,w%,1" bwxHF c)mkf w-'*F tD{si3`y C>-D0 HSFJ) ^4G-h p.vxK ?:{t& p1~qr Hal9K lQ/Ra) $@{e# %DRoIf !j[YM"Zl4 =!LwaT-I lq)?I 8^?}p~~ j41M2 !;^tl nI!\y eqo^_| ?9~km +%*Gg fk+Yp} \Vntt D$<T  zI\)&$aW :).1ZY 2{l^wo \})`! 8HVtMo TyI:{ K*xq[ ~w9mcv0H\ $5c(^ 8ID/4b 7p<sY K/IjG EP{:B I+`(D Ln^v/ P<&]l| qJ3+Yyg qO6R9 A6.jLy/ Dk-Ay 9'IyMKe q9F]ooP uj3[Y //[~S _%8\S eyl*Z jjv2kN <=>8} 6fHs'<X Gezsz /Lp5u% 29 ]_a 7j+CMu L_ynWY` >(@jK E6>goE V<1$,G %-{+$ 22(~gh` c=dmB Rwn)iga J0&g@ HzN-} dD8g"O?. Z:xFw X#iAR cTq(3R~ $Cfs6 SOzMA# GG)0G #i z>4 W^VNA`X~X 'i~<Y fw_2Kc> nKfVZ GTE6eL5?c ^kXiy AB'|+ }P#KY; =Q,~7 sCVt~ 2K'$! ~t\+i ]t[~Z* #:u6k FkPH' q|&&\ @SK7k n-ko# Fg#68G br9 >L Mb/Q\ 1&b45W yZ!bp oCZ]9 YZR#p (&$*P LMab'- G|WTf &Icq| .X,fY #p&u@ M;Weh wRtU4 -.rFO )8x%8 7,>#4q l^:5p> Ax -+ m|(7`&UE ~S)2JH RkAsM% vT&)` ?OE>u #tC-B: ]-dYo 0=oany k6GkM P)]jy=Bvaf/ =7P:8 OPN8: P7 ,7 h}F_. Dzzy%Y Su'aI _$.q! M^1i8 yPIXq h0K:fK q`GSJ y<8r" #sjPi .=u}[ -4^J, ejoWz4a d@m=)L 1qGQK i~jg> `=1r6F Mqsij ^D0mc& OGQjVu'nbV dPn%r0 l1)"M& TpQZ\ LO_f< !o7Au |V~5\ vzW@L -UE}c 4(SaG ($[>1g "[;OJ| qo5BN RJw&Z H[p=qm rAC7[ &];+V  a0iZ +qLKT# ;k&wa .">X# n($[z!* B fY"dNG hRu'nj jH\/H 3PN;Oh yY44m2? eMZ]}T 9xVEy #B:k; Ph[zs" \]^%kc Uc+P% 0UMtw0y j%N~8! 5CaMe GNZm3 ]J.-aS Mm7*$ EF=^- N*bQ  +r,I[ h]kC9 {*kM9 $*~PH >g."?{*- (9HKU cq"P1 N4!syx B4n4e <nP+qE5 "rUQeK7< Q@\DW nDv#Q +j\jv Yj& j ;K+F' qc.*Z iXyH4 #s91z {0SrkuC <js0[ T`L"( qelEUFe THY)c _6"e> Wtp^c 'acZ' $0~,_ I6eNf k~KRa^! MK *_ DN&Pk @L(gQ #<X:,v uH|NW&k* PxSuMv 4teAK 7<*d4!hZ `;$`e [HdI2 A=uX0 ?ZB&R '=(f8 PIe}s6 sER&uM 6%UEK KyWIRG kM}Q`81 R1K'k !2WH- GD,W3 =c4+6o H?%^D 2GMrC RfLSI h7Qx2 %lbT$ DXL>S( Lh@F5 eJ>G3 G$]rO #<U*#  ySR(3T %/]*s Kv+<R LH5j2 Xg(V@ QHyW] q%?7}C R~55kM O2oJ) PM]Q~~M `$l}p @Gt$<5 u@'R' tk{}$' )"#mSO 5BY]~ &g\[o HEyCm* PkuuX ZHJ8- TXR=$ ^#'v^T dk`$rHCs 6^8=}m C#g2/ eE9jB \6P;m q9{m<cS wO^?} Q VId vYA=o >0Ro=Q %i|esgwkm l Y6> =5z5! U9:qZ+% ~rprzxzr J8'kA e,+Wh "TQ$T*71 2=Q;rA ml\_{ rnYIy 6)IHc9 [5)56$ bmw}cwq uvwumgu qy3oe1 cy1n` d1{,3< W{7Nu s[7o^~ RtwMIe Xo_<y Pc9fv >b(*7 ]2dIe .;ldr 4sNldTX .2P*T ?FzGw hyHzq Y:]_- H2M@uE QV]_# THL[m C<!pZ) 5"cC{ ~s+T=k ;3c_&Si o%Rf3 :rn ( =`3@mC [9S&' M+,qB }J<XP yo',` g}PJ] s'&!St edMT)r .KzP8b,eN Ys;>o+R IDAT- f10QB !b?~- LzfX; 88YrA 3XC;C M00$< 1h`?Z YhiMNsZ :`g<a4 '\Xch h?$5p =:8zf zTD]^ 60,M0U M8%d"P +R{v| keaX? H&sf@ {xE+q !5gQY xFb:u >EdD; SLa/R oL8zj upMIX '*0O) F$R>T >^rqM a|v$R* }TLH( 9`+QN M7{,'( RxRWlee,+ ^)k^Ug9 (- 6C +)Y=F JPj'B  fP\A) -F#McF b~&X} ]&Eqe+ xsDf": 6Gc[U R3W{\ #R\d\ a]HJ:  wDt( &-v!l ;xdH3 ,HjBV 3D#;6 <H 4= u+Am5 79elp4 k+PlYd )0XH+ #"V)Z 8e70R M4QTUS a.;/J \ez8  gj185 _<>>v c@4%s 1KWv_C h)aL{GI u1$Sf mvXz< N$VEpY ;;j{m ?(N2b fH6t< Xf>"Z+ Z&!z4 4f/~uf 8zZ_) 1YE@C%MtAB0 w*O=J M_PON |fgmC0 !~J|,P7 Q>)YKqaQ R?y// 8f;Rf KP~^D wVbgD Nh*|S wHu+M0 p4V924 1O-y+R 6ufA@ 6"$%= F{00n(H &NmCt3 1SaYB &~Nm1 1f$7z[ ZtkmBl @(,C2  E_!D+^  -Jo! 1Gz-I aX.{E gw4Ltp X$g5/ qlu>0 dzxr. T!" ) m'?p. 8iJ+H o_BFz2 -,-4YQ TdwOkET +`4T; 1[EZs fnx?&, Wc[lnG> mk.*g- F#ut~ Gu:er ZHt]{A; D;uSQ nlO"c .kvGfF* kc ^W 30h;O BjF7gio MUWry WC%ij TmP,5 6dj3l -&a>t_ wr,C?J dty%u /b}SWsL rDe%[ 2EM-H b`+%v -%(i:]o 25N4a ;,f:A 1\qnH C"?Q4y enRq#g utxM2 [RCVF #w,B{ D/|B\ '='+XL0 'np\e '/qa>2 S]?~h f(M}D` r's@_ gVhib b(dDh ;PcCO &0&Gr 2d#(s Be$nU qI{6}v !Ax?Xm FtzKj ucLaT  o/kv RlEg/ J,KcI Ll9%} B]ntgM WA5nq zZ2SE L^(J6 %JZ8u Z_uIo &23My;[) vV@W| DhgAKz?:} !h{v*.}6 \I25' ^;<zF av"eI Jut)i |xr<q Zl"_a5 U#T"$ p1NVD zjtyj ~SY;e nZ*`c `eYgM _9zrx] 3DcG/ x{O}]'r H<vL_ 1ye2R, >; Kx yuqLC }EqX8 uJlwf0! Td=m% $Q"%A e6%E=du o(1rj6  GDFKi AqXb# n:P:A( !938A T>N|e {ARnU N%io5 jtD<& f(gSs? lFyU`p tshmg [>dKjf /jl\! mEI}V &aAE^ `2"v(? }Kd6_ 9D0EaC~B 6/EU6 iq1Bs- OJJEfj/H -#sVme Ox-]Ap *:nrDR my[A. }J_so .Ix>/ _7mF$ |nBH# {lxiQU `cFwH #gpi"q -1A\x7  0<u%x =?>us *H]~- 'teTq KfVn"= _gel_ FblHl M6Aly 8|N/H wjd@E phh^9 R<sfU S%f+u cZgF/ >=WlF3}\4 QVQ5J E>b6WB m.cwj 2!=v5Cr5+ $h'0Z| 4(B#w oB/4T r#l+J $#3Oc ~: *U =;yxz @9&V v M_=%Q fLcT4vq I@gay .wt'Dn r[dC" E!5I_ 5]dLl {qqv^+ 1@m!)+ _>#M= B+6?_c lEQPZc8 Jx'y) 8|(KiO y1.Bf zrqrV9k _?J.t c<b$Z5[ (YWN) L4u8GA XYL`0 Jb]3h.: &tgu?e U@;jR {ZK6Y cEA)= /^8?' {{GR1e wpkO' 6'f^' QlDQ{ [?jjWuz F85{HD Wvu]i g;w>p Ssb~i 'Mmc1 v}O?w Na]L+ Eia>k JbtdX S"+%\oU gK_*p hK5_9n Gy,09 *iwY& 3?E34 F$\hp iTCJG> rBI*! tK/^R J0&hP N6]l< Q)Hrok "!/7A :`x)p Q{}O/v <t+A2t ;csooF 1[Z]n \l!zE|8 ZU=6H,*Z]z+( ybUm} U#/WJ Z^U?4 i[["0fl &d=%oK ~rfg,  c~z/ Vmi4(RZg 5MAzb :5lQw D|-!Re MO%3T0M l[Pi> l<nk0 4Z59-ikK rXu{ap Uq7Dme B0:ql -.Pq6 s`e!8 u4p:lA J@C3'[ *0*Fmt. ifNsR OM;,+q $dYU[_ qD1vU .:dpT /P"jq <q:qh Hsv\|' ]P5Y8 DT~$_ ]7yd* V"!!'.VS A^%\9 Ci{d]^ e&"Id eNz(a ceg}b f:($o UO{r7? W!9UW h{ZqK r[l}.P+ ^>1PG *%S;5 RvH[" R~]J=^ 63zV5 6TMX"X2 @}AaK W5'II6`v VQUME  ""fT ?vR(y q:qf/ \&1at BW+h{ Y=k`a k`G,7 O]a+t }`pnb kv~2P FkiA- &k3<u igt$Jd VSEI` -7U3: xFE_U' S'ozx s,9X5b e_cjf? _*FtSq l1]y^ D@qu\ a53?|aK RYxUqi /K&EC g+L[9 XkP$^` x"8^? TDK;B ^/bj0 4gi]O6 <<P}$< 7T`Na#o <MdPY `;]F& \x/B8 `&N?D 64p?  >muGR9 /W9FtT He`j#{tt= `,x8,!\ NfHld PCLs-# 7u&]_K P%FOX^ <vgby (Bn)1 a!E9T; ,Qxu? lt84V ekczI \Q-<A/|G7 **gE2*h lm u' JgZNeR V5Sh: v+N!/ y.K~? @(bnn ;{P:Q sRc}ra QgC30 cab:L 7N@,n  S`r=on eO6p_ MD[,` m&Zcf XSaia\# LJ5MC'@ 3UAk?B K<7T6 sQ'E8D EP1k<Y D/W`6{ .ZX6z9 u~:eK QQ/nu Yck'G RTF+] Ij@k-- <jC+90 w2UM| > "}M h!&V; eSE.6 Sh>H= [O}-(F Sekv6 S7`-`2 o2(C] #tH5r #.`ej+[P :{iwo dz+vD `f#$) aDqgZ~W #HUej$ ]\M&; z2:(| /,h%6 W~cQx Gxx*, &m%Fa C)<3i wnRXx m:`IC @(?dF @cL/F n+jxE; 176t@ &_Op?f .XXw` ;6> 6P PJC<LL _&tCE x@!l:W> I"R/`* O%9X- ^c,hZ.E N&bi9? aS>uM Z>Q%i IVl G 9X6V>l4 EuA.t +2N:4L E:2}6 ct9lXKa FHB@R ZhL >$G] VvLZz:J COYe^ NA.U! J~VIN Di_EW ui ZmR #mn=$ rC4aZ Ix\nR nah{) 7m/nM /~#.g xavI-Y aXI>T RJ6WT 32p|V 1sXKq Oua/AH 5y&y) ajAIP A_|]> 7bT+@V {?&eBaD ,mvc_2Bw Sg*f/4 Z'p0} S90Gn cY`j+ -*I:  /q/'C a$W:` jf.EKP 2b})Gp ,_0)W mhfm! [(w/.w #*5(' JZTV7 EeRJ#Xb kR;p|[B k5V1Q OVg&H G[J';f\T^( -6QOq 0\_>- /9E)$ /G*(mgf 6)-~Q uphIi (0Mv. "$x`<%(8) z~fdEf 5:UWv =5+%V ?q[bmm P]nRf )j|E:< RM?G\< AH#3C L?n:C II'kk W1-!]T XBN]kLC IjdHs +YyR4 xS a- 0P<{F RxOua_. rTM$MI83p\y-u Xr"CQ <B/>h p`1fT gRV=& K'WWIv ur(<:R PRZDy G00if =(E)k _A{2`j_]3 $fDsf ](,6a TfSo1 ,xEw- !ElpI g.M4Q d`1,N +k4vAwkR WP3YN po}hm ?~GA( 0:uKPc "}M9* S+,kj& L[e4v JggI) FFC`K \b: . }F([U JZQ>' #!K\i8 {GzYR 6IMzSF Jo`O; EIDAT 0bf5Q Ue^nM nSJHJ \)U>O J,q-6Y` 1<CMleJ gxX"! 2K&(j ^.v@y `EiT^4T&5 "-cnz 7;,|y7 p0;!d ~q;GS iSY<OZ R>L( - hFV-\ bdM:: $b`4P jX3;& $8SLI fjj=!= P^{bT [>ia+ sa c*:N 0P7Iu| +V;=; ACM)R *s,)0 L\(R[b; Zb@zvQ 30"tb $d_cj YW\1t_& ++1\S z |-Oh[ I|}uT %Wza; 1*N,f \JT&`wm%ndDNX Y'^%ak[c# Z:(HCj 5XI*u^ +lg)0 tAmXj P3kHH `;Pvf2 G8*"[ 6|,`]z! _I|P* E)-I,( $Vnr' {I"9T +>[#. WJ16X #\~l5 hlGi<u )'6oF ~e+NM> %~6^b _"!2C pp*8-D P.f}6 k'?}x #q:Ol6W UvI$I HV.ZL$F0Ou =zRG! JUX}:} hXO.:^P .@B&h|/ -Uli= JjR:2 /]yp|t v6R~' ;W$WQ (wA3j Ke:s; BHihq Yh|t? EP4uM n}wvy RXJF-Z 5!e]h 9t\;?$ j$e_O m8,Zx j J7nu X\6-w gY>vV k*T|6Y( $y\m. pES]Z ((Br]# Y0}){ Z]C{I z1Yf[ /tAu1e yw]7/< r0Ngn J6ac1EQUMU IB60o 6=_,`c# lFOJ^ qml@! d/6gQ# !eKj",d EOjd%T anO(E/ 8r+<< ~_86sK YT{g" "`Z8]r ]d[Nw ivPi, OQWr0 XA\R& VzRkW` ajzCJ uB16C rvs:PO <{27C 4;gN& QH#5] -OaHv H4+W|_T %b|!6S 1K!N7V +W8Nl~ vB7&0> '"bRM (RL3r4 >XlZ-r !ths{/ TqxHHa &8Jn5,-l *S.-g lf'H  Hw0W> Kl8/3 2b|J1 I9[ZB ]2YDK %1_gG6 >K#Ht )o/*e 212~c4 e@f:.# gr$vA `"zAF IXfU*{ "F\eT ^1=S1 go6+Ij !me>b ;{{?J {_x?v> qSN.b #_aVQ :IFsP }c)9^ $w!;^ S +JL !!#y/ ewmA( )wl}i {XK8Eb. "A8=> wlA E _jyUC( HLf:x JazrX J#;{H S 6[) z`oF< I!oW& ^aF@z BPb ($ |OTBc> (3ans nc;CL %*Ye% >39`t nfD,(JN LPpbOv? 6n]DD tJaboe Z3</G F5 +7OI( O\WvX /7<s[ Dw5($Dui xd6fK A"a$`C fRsG( Nj6Go xT2/e 4{LBq% ?kENTedq ^fLO&iA YEPTP .hlc>C tHxr{z Rb]3j NrTX[e< g?O:.g2 k)h'9< ]]_r*@ vG=j_ K0<0m Vc0B` C<qzz kT"wt {5kK} vUbMV e_(|u% VR =a $N[3_ U*vzv hw>_N kOKZsl zw*6a= x~qzu [js&: 46&Aw Ha8DO \)$Ck oIwDJ /7{_& Vxztpp)5 I<cGJ<m 4Rt!UgQ) Cei]8Vx_ t/Vof+p T6bai =EFz) muJW3 w7 )VF io5Wr Ygibu i)+!Y e}X6C: ^@Pr/ X}-tA rN)7! PW'rh |K0dx VrVU@< cB{dLm Fc-'A ^3dCm ( I$hv !~416 zBlVl5 {R[3< |J3QAc Q/~V- Ifl?Z 6}8?\ MPT&m S%Wwipy NW\N; a'[g_Y7U -|r!k <9{zr~u ;.NO/ G4cvz -wd=u + f9(?-X [M5Cd` [U<4Dz Yf 7g ]^wd\5 xAd,~Vm l0\@7 NFu\, FF2rn}1 &y\U: XEMe& [_W/{ IDATx^ Nf{~O ;?;?;[ ,\^F@ @D-N01 0J 614 ^|h,qZ 079Ij4 \tB`G -ptoe (jB[|< !Cv/5/ 6TNv& -z!or !f,*$ f)17F L[\MV */BIn {z6{9 )<a"e@C lxFC1; X\YR_ emo<= &l+]u avu%} o<BhiK 0v}d6 +&>'B 3qVu7 xzv*| HTi^2{ xy*o7 i"3)5 cg'n^ GFMQH >/! 0 b@1r: ,fYX,+? 1k$a?f |YJ09 DEf!v c*(vR gO5NJ $10_& L>LMJ ndkz5 .[4A#, o>^fG} 9bu&` 7(Lev( Mg7Z_ cbA<EA S<{4[ "Wp2UL ~m,-t +A=Yh awTX5 g8km8 $$"{; /,!rP [?A\` Lj_',i ]PV.m8 5@[u~ q+1Yb XV];# e*cm` F4z2; z4Q)S -&ea# YX}!^Uf O;xw" AI3Q\ t-99z -dF!VVo 4v)sV rCdMl hdo*x YV1>D lY<I, ZXq0+ K Z<^ [K"Eb D\q_= fGy:" o=c?+fP #Q6k!p b.5Y@ \/MtG 1Jdcrc V"mTw ?>^>9 tdu3a5 <RHTd dUhVA: vo:;T sRz\g \^gg1 />5~  }yAZG 4|o1zw Z-bI{ .gc'M baQBsR Ny0`6 ?jSf3 \)2t|@H <<=}x* nLG@) ?Y<>^?^J <n-Sg #f!<B XF`kR^A \%@EGG 63[?Y fgzL.c BN:i8. Xk^9O .CW6]Zi 9MA6u GdA|Z DPDF" *`Ni5 9[*2Y Gt *8 B9Va, Z:"Q/ H[~q| Yu[D} C4Mre *% i` "4*N{C $MbzS G+<1A$ =y<&`C o8~i'y/ Y7f$U6 qDASa nxiXQ Y[@r1 8b("a )+2RZas ;!dW'W fZwwU5T PbMKN* gF;:F kxAlM {hQf; Zk?Qw$, ~M!OR ayBNe }BY"m 0.otC X-}c~M `OV=k. T&Gq[ p_)p%` (+tLh ZLT-k "YAw^ 2,;Sn 4@:V`: 4<wU  K,TxAYda ?8V%g *kghx *]:59 p@]ac tr=RN %am&b ZL%]T x1-'* pu@j[q ]e7#kZp! 0]F,( =kAB) QemD-v #r]n% HA`r3 3y2eG c2j\F btRjNV \[J$k l:6<868 &*qSJ9Vqw*9co "$.k# j?)8~ Ot_u@ u0~uo  *s!^>> I*bRRQ wH;UC =`oc* r={S5@ I#:`J 5^&.j NDs^; p)(9/ /~3[)u *C+vz$ SQSVTk% @ekYW yioLvg .?eF. :9QNC +>k~{> 3pp18 yt~q|q!g An^\) r3s)VC Ah$%^ buyNH SgRyS; }E`hx /;4H8 Xn*Sv'1=E }/J]\ %,nB_ *Zt6)- Ya8-w =vg6i $koSQ Jv9() (l[&e T%yjS  GYG9k S~+Eb%Qz "%who NG3jq 33r )" :^--g0 c Z9G 1zqgp u,%.s' `Q ]W*`)RN@r =8;^( m)jb#_Ghp L ADm jP\d. 1 !4D dPOq< h_ m7 >R7xP |E9Bg;; wC'=i^ Y1R6p >rVG, H&k#@<N1 Z]m`; yB|Se^F V $#eY ~!jM>~ <&(d84B nG}dD0` U![9N CiS1t tw*(Q9 GFbyRcnG ]vQAi dLn8_ KyR5; lx@)_ Sf7 - \Pv$F UcV j+ az0V!O [j_Cb 9]5I, {UNM,[t Gl/Qx /)Y<7W FOTQQ 'Iy:R m@|Qw `-X@LI !Nsie ]R"?r a_W8K PyY*T VlOk@ <9}p* jo%ox hdv,~ Ls\)f w6~ar ts~c' lIdn{ hzZV5 A_1g- {pQHZ?{#r R*Ri> N_/sA bSPif 3UJ"d /OW__ t:u8w UqW>V gEQ^S? TCIK_I\ )@Rqp 4k#i9 EVN// O:#@Z_* Z<S/f V $|u td1L* [|d:C e:yg?9 gDG7N v]?9@ Y.Jik,+ ;fGZt:jM k<E06 v]}-[ nZ&UEd b54;xd` e|v=$ HlT*j= ]#n+^ IDAT{a E0"jr n-@<c GkGmB DxdeP? sm"p6 QO6sT GgOTFC qO."+/ K.Q^9 N_Mk1! }'L&2>gG RYlhk L |<hh eos`6 &{&tQ /GJ*&:1 ulWBf %0>.P Bd+PCP :%:#g ]8 @8 BYD : '7I0K @=*C\ER B%G\u e\Mk, 'C|"b1 mWO@` xx}is yy+tv 3Jzs; `1~A  !WX<G Nl4)`[z K#T"6TP; 2u?+` .b6.$ )luv@E vl*s) 40;s; !uDzA< \Hi#r B](?/ Y").:4i#d |f-qrBK d,F7` cNMfFC8 H]U(2 ;'nav )4p'l },b,m MxBnK/ /sC1[J \6|e[qx|K +W~Qa 2(JC( j1C(8 9f/M} 31hgA <Y6ZD *}L|5 *,</xg 8:w<f6=-P1 csSI) tImJB <6Dbs.Y Bq$t$ b.TSU 63&wIHT p+o!7 /&+,, h9*Bl3%? 23q%,( E)7wl NXy(ET M<=*Le5 {`B$K+) ^IW0K 16rHz? #XiE, b<-=-z; t?5HY d3l^D 0(YM\ GDN/MU &Ab)} QQ ,R; Egrq: YV#fy 5?0>' yDb_$O 3&u$V &@$>\ /QTQU $qaUb L>eJ! x~&3H5G g?-ZE2) -R|[Hj ';0x= iBsE!t cB$W9L `."H5 =CI,IVA c+oCb \P^V7 5WtdD% DzfX. [Baw> z&&XZ hAzj5{ 'Ip@J+ bf.NcN {_^+{ Eq?ML: S-(IOm NEs2{ oM[,M ci<,h (^~dL .%^Vk1 j(i70 b_xnT <^"ei ft0V$? s1>q\ d0dbt Ju]=S .)@IC -fX|' H<\D( #a"k2 P[oXp 3l\3j PI@L` O47N/% ,XuKM( 5&}5a 7#J~HZ sExF$U- -nCt+5 iMc5$ hFe)Oh B.~LI 42%%2 JI-S/ (A;EM$ }#^J}` @ZtF5 .C&7U voXJ/ "l_3% sr&5MQ"'S\ tzG\@ .=OTU RoJe2 #S,u;v &mV.B @*+>E d-==L>M bz+Zp wp`Rh8 .m[ )Qt <s>T6 f#HM& iN72c rxzMq%X ihR{$A hff6k 8Yq>@ i:HT's s R"4 z!`DO%2b3 n%!Z(.B} d/%4: fOYzj mJuX7(k rG2LI :-`,- 1(J&!  Fd=$kS Ost+!J2, K,9C% Jf6BJ q\M4/ (YK)& a}q0= =|aWg I}eBK,\? EF]Is rlqg*M %4ta4 ?nT&H< 67EU01, +/?Xy w!m4F{ Y1b[o ^1h?6 B{p4X{# +?xPou AY5$S AOlOF6xO Ov~oetw UD>#2 q}cTC\. 6O=r* W>(Jc- $N&gqfn &FZBr SIk1% :AD>S *u\qXk =1xr| 8>m>~ 2r (i8 U*}8ko ?zjukM %J(:lt /@2Bm1 &/wT" V6-Uu^ @uLAzLY #"B0x \ml .7 gvVQg GXCB6 Z?[An Kjnpu Kc0_D fX[6! (QsJfU U;H\: _Er+ s R3e}J hTZj} 6a9o," BDO}x o47:s =iXR9 Ze[6w XdyC[ F9M_\g FAc>6 adV = 1k%\0 0M"mH !$Y2) lDM\e7 $mhhi 7ok7( {^ca*B8 uKc+N  @XqJ nNa,N E%%>h 1G6`Z Wl\LO R{tb' 6PLKFe cWo=! !,\Kb* r|l1K _K,>2 wrI5%a h !#/Z rH#r^ 9<tE3 i6+rI_ (~i3 c 6f#8] Wn"/~A wgC<B ytr{>z vVa)H+ ~di-h su$t! t|x0M1 &`Sk/: EGg{fw 6WKS% IDAT1 9Pbv0 7%0Bf e%1\M p{$[e *hJ'Qv WGMNA 'F_qW 3wAKr 9/^hlD4 =4FsA Zt!:v/ fI*4^( /vGV)P, =lxBc #F^cEY YA\|U `+brVK9 hfJ6KA E[!uoQ \H*&^ #']~F 6WKo3 B~WTh _p:Xi G}pB# alHBs Fz'n+ 8`$8o d@d8cI E`(]g W|,kVU F"Zk/0k^hU.\ ^YeGh} Jw.-. bGGrat o|dgk {NrRp vvKokx OGc,l kj>@~k -M%G# 2eu?[ 2kR8Zrf d2.#r  a&&Q\ [aJ|pAX% VQ"05W 5l4G3Y LFc]D P^,$B 'vAk} <QC]K q4xsr &N#=T '#>9$[ Rv\6a u`/o. 5d~dx 6bxt!M $YyeJ t<%&M{ j(Up* =>.HK FHy7: W?B@8 Mgx,) S]DC)V }cW$3 <W%sU s_F"0 5O$Q[ /fmx(K KaMM% k$IAB [2wm8 fzVsM013PZ`E %qXrex $]K/S Z|{+. >+,lF HL"qI X|eo[E kZD-9W iohLiM Q[bc( dAp~/ hK\0,Cf 1[>dh% 5yqT8* e]BMK 6g/%n I;"Qv  1SBu>p r\(Lr = C_KdI EWIc]v/& 8Wv{s 4UDSQ >X34M '% km/ 2k,w] C-+oDs "Rsz] =.[") ]S{!; 4{i<* U'%}*Dq 6cZ"jF -q ;@ ta;9; U_-}=+ 5UE:k d4t8R MK6Vw (9!NB6? 8`dx}8kb IS\Vg- @LtC[ j"Dm% IYhOK F(!x<G sUX*5P" {As#3Z R#z/m 7)T\C D/*4vQ 72mnx xPZ>p 4V-(- ftlL( +'lj$ *$b-r bpwlO 2@+<)bB C ioU fZZ;l lis|V 4F){>)V u%4jENl .11|pvd `fnG-D pu,yJ K pv2 *fa*p +/ZLJ EJJ6Tp@ |O}`! A(*j] &zFg[ ^}T}D C8_.$ g%r:5N U>o <I >|S&K \|,4U";uF +;A7r #uHn&N <kZ/Q gCAV% 4'--e6 f;Z0*:J t/0G' Ow@=`e 8jM?68 8`X;m 67}t" 8N0kr %g5[$  4A8\{"m 0(4:q p=-%2} 5xV)o0W v,V|J  Ysir zsz:bW 7nu.3 f`rMq @umDOWy gsxk/ r\Z1i ^D0Yz nu)3r 7fhUre nbodf xTEt> G7'[' x;mxA zAhC| %;UMbU>U oQ8+] \an,<s a3pkP \;{8LX J2e*fsi <M&[w -SybB I$}}^ lAl[N# 4{\MK u3d9- jD]&9 d\<]y Q Od83HM =DlHU 5gr;a d8xhg wS^hD E?8[{ /{-,* l.,~~ G+4KS \Qj|Um\g cL/4s Aq@-D ^t~mm &g)Fv z(Os2Q$M] 3GpV\U <U_1Y Lno?s Op`DM 8t)>* 5XaN7g. GtR+u RHw>VGw 7wkU_- a.g8; RTI\i 2g:OC !Yu\O) 7FX:\v^  hmS<8 "UgZPFR TgM3(fL 'U"WG^ [w8pX Tn\Ad/ a>yuu2  ,>0o gs% {| [$ADR Zr\QlI ~aQel I%'KPZ $1aH6 cO]Y-? ak4Uq4l#5E IA/k[y 15F]( eayT] N%W\/ ]AC NB $h$C% bk&C0 wJ%Y~ f]1U7 m7um= yDc"3 ^\}i} (l<pn dzI<a ydoss )~^=% 3JkcN=WS +O][y Q9.*h `I="tV( ./i!tiK W\=sp ASVe# 'mC="m |tB9+ BZ^[_ e}1[FT O!5a+! ;gN/} )KVIi sWfZo2t qx3e$ >0fdrH :X7+' _5rBy |^94r 7I!ef MjZd} JG) / fuwzj 5 >c)f, Y"$q#- /Ja|' H?u0ce KO]_} mag`U r~^%s BOu)D .Q&af Ji+/w4 Ls-ov W7oi&[K 'S2YX Sef*au j`>Q]~ s,B&3K-Z GKVS5U &6/Z\-P= Y=$8t 6b-,= :ezLc ?Xj~Z wYXdb IAEN=Q u6$oJ n(Kfr Ix,?+ "`).}" &yMZt 0E0o5V YS[P-* vdz;) 'lwfz '`\ - Tm!j;j ]-s*h wdDe< INXkXY :\3f: \a29E eUdi}G >DuPv #1$~s PSY6v gM2gf F&DU1- "f%b6 Ny97e (/3T(Jo *fx3?Z (.y:z -8"i8umx\k #-~J+0 ]n[5 `b AJ3w= AZ:r1 s=x-n2 Q@ dGC XMzD2 *h}!8 ap;D(( -F:N@ C%4[@ 3J5*l 5YY^./& %'~w\ lRWY$ itpIT= FUD!E C/LzA) kWLve p^Ak3i 5\hqJ YQwx0 &.vz> 9T'KJ ,Xm)I nguza 1KhSS f:LoH zQ|2] c*q?@ W-"?` $5HV#9!D ""0Xw )$U6zm tf)QnJ 9[,cf n$Pu1cfXVc! ZH\wt I5lC.f >rXsw V`^,XW: bEe_;I :OK?C0 M[5;6 K6X39K iwF+a u:0qf 7bR|& {wa#' 4CftF /ah\`Vr 8h:S= @,aR? `tfcD igA&# imQT-J o!c$p nFmm` sq@|9 eZ.`*$_ aaDSc W'y[5 D"lo7' l2L)n{N&( But3pV {h:C;I VTS=Bn "+!kt 2iQY+e*K )QbVe kV0'B JH>z/ o8CH4 9F=34 +5WHiV yhA:z ARBCZ #zsc:IZd 1*r`d ^(b{? ]w=[g mU(4{ 8#c>P )H+5Q 3\aJP '|l'vF8 7sT"d :,D2x -4.k@ R/H i bhGd, ~z_ab RJ}6j0 S]}`1 M#!{5 u-;G^ f8i+8{6] pbqqC{3>F 6+. y =@dfp D#yBj WaAR0, .g{@l {Z[Me ;7~mywJAw t2ONAKgR B]k;& L$4,k. `nN.4T v,!c< YYTeC 7|*=. {e$<5 ~z|VB jnoLY tH`5iV j"K.]e y(>D= 7Y=d: uzY+A rrgwk' [g,WLy jm,"z5C }v,>< MSG6s rKO<rb #33#F Eco"W Ig$/2y 7^]}x+t P"O'| X).-= PuRjhX ,H&_s F9~1?G 9f5[3& NqT38 $hFS" jn8+fy-`2y NiV~\ I\wdb V];n" ]2a02<7 )uSLm F.g?"Pz mmKX! `>A]> 2\D7Q =/c!"8 %JNx[u O7f}r ZmSq4 #hHG) DpH,5 'F"$Q ^R!jR, R\)SY s !B$ a&7 S sDJd& _O/khC R(_;;Y h8rfO{Qt e$oCx K`jI59 q'^ip #`Hz8L U3%9E Lt=#' Wmzao JU(M; Jqp&L 5#P[2Y ?a~I2M x\i#lM Bu%l)h 3CNG{$* Lh#@nMs}Y 4OJAV EX2+2 Xe/]7d~ OK@6( RLwYP  7]hJ ]\2Wd W3,74 (ab=a@ :]n.{fp) xuv<e DwM)S 5LmLrbA rP B>yYx v30|, [oCb8+ hNCF_|:M= Aca\L1 YnA#5 /ie9N 43r)r@ zu?]L |AD7Y 5Lk * !6#{Wh" xzBQ- 42Ry_ 4jkQH#F fk}ld Eh>?, %-D@L- l#af@" T4BO& <$!aA IS7&*y t5n%, 2RE0#0 +gU?> &h7=n4a WZT\& ]0cleu {Wkn0 -ra`o _B\Xc C_bi2- &QYTI W|c>#  IrD8 ) r9qI $N)mQo %5jF:YR F%G{{ 26$bMe 71`k, )FlY  3,$7Ea .X&8g dV-Q, Y/?.\l ,Mj<6 j#[in 1[-$}Q" f\YawN ."d<" OMjjk j8YN7, CCD<x K6XI! 0<iV I fR3kQ c19*<% W@tV/ oW7 ZLl |^Vcr >42ro iXt^R >;y)R x7!hr V`k!h u?*_EV Yslp| -5uAG IDATF 0lRCw >BHt! 4qdUR b"(H\ +@1`3@ B9;N+ j/1`_] :k+1Mg_ ,I}:[ VAh|m [2p Q ^qD2' )I@fV 1#]e&d C`@|r'!Q -NH]<` 5\~7$ 6M]uW ;!)!Z [~D1L p"CQ5T $4.fJ[S [?iZ!j  K"1C cK(J` ,bJEQ 5lik* )Ph'+. SD:kE 9rm$*i g1f10q TUGpd 7WXSWq ,CQKGf. <2J.= R80nt VAOkR p`j2|j@v Tf/+=f bX%=U -O.`5 kd1n` "J!^CL vG&Hi eYmiU] D(+BXj L7ISt Ub]DV /`QZ` YYf[m07 TXg@% Tfaja -.cv  57*4/ ,0R~. SDMhr EWZ~U SC5nN -$4t~7^ K+X6DQ jV9gu r]e(- N8[uWGs: mfN;i odvaO ;~%&$ =|/Sf Fo$', -EnZv0 KV0a* xx!ZC9 =%P;n x55,? 9:;F> /o...u h7,g" #4NoB YS@,n NiGvl's |JM;c |-Oh[ M..oJ o"E+Y NYWR! \6\[yDsQ* ts6$g zikKX *,&mm e#[4J EFIm9 %91hNn :MVTg 9fL]5 xdkDn9 z!NtH fFFgg K_N dd /5D2Q 0W#;Y 5 Fp6 uv0di 1;F3~ m6@7m< )+$%% c0$ih U^&ZL `N@Jf AA^\% X--<z TtG.e q(JlC 2ybA!pH [~%bM VnogZ #:UagG Qn?RR Z*7Lb ,=Ll^ /)5Wv m<w}zG1i|.n] ;BM/u BV 8=^Yz NnRMs[ 0k;]! SU3BUE H$*YG[O+; %]Irj. B{.k| PO|nC \z2[8lm .,ahB x/h{d @yG'Y n4W_m ]OWCl shv*> chr)Z K`jx, ogZ>VV eY.d) TsHN|U~ i^{2l 9F$2y Zl?6rm {gw>w aR[/z w_8L_t*y hDEmC t@uv7 |-M*J 8k#NM ?}?gv "VNP=yr  %K]b 5hYd$ >?8ep i38JA lbb![ .sM5V [;`u2 OXk#, Q!f5r ikDu1hW CD-}Gd yWH5v~dS `KHQI3: eT=%0 (:sQc YU_e[ iFiMj %`-iU ;KN=h 1KQmu FM1Lk mB;WDm) _|/:$ ;UUWwM 0=@30p BbP.L0 =\+// K0{STi '-uI{WOx rkSMJf WT7k6 7%}zg QmW+' !c+&] (V)b] Spc;f ~MBgI (c,ztk n&l*/ drxpH ~u#o"f7 t=>Z>&81% Fd\i] uAKT.<4 VK/Q&Vnf thn,? y;Gl\\ *Cb?\A zW-gr 4o2~>D% w6Dnu kd>Tk HEag^ xk jy IXfMg} '{\}m DdLeT^[ $r;AD VDiRH ?]Wf6 )lpxm* nHfm: `S#l CX 6b<E] J_p@8 yc'B5t }\u]# *JS"%P/ dxxAD .$?(2y +ma*s?` c.,hHE (%(la*q fqX5n lO2WG FYK6mE:s wP)\T#3 Vy!J1 ].4BeOTF 5(fMG UG/~9 y>4kqs ^{G{xzu eovP3 CN`i? (hnaw MW*{"N 5S[0'0 c19,G 4Ql>5 (d/y]S GT2U8wI?m!2- i4dF4 0fM5/~ ]"j.L& (v0[c tC;;) @(}S6# T#3y1 :RH![ 7U*{l tPSj2 ie8G& o?kINeeB B_KZ& (`S8vm !i'wo afMUg 9zON3 ?XjEx XvMr/C0 Q(%jK 1te!$ d/3!e :<:`(@ uFq b 7Sv@d ~u{~{ wsO(J pB#/;=z E9"cCIxk W}jf% f#ms  d;Z}3sJ f{{}| fx|k! %3V6w 6|8]wwy~ O=:8= M vvw e)=+Ou` tiR'UD |A)}7 vPt"( ^BG~: ~&"dw/.8 44a2}- cfVGQ]tg \2^hL AE4&Mj A/\uc cv*1n I5[Tu pkqPg8 CnC^' ByW.Vk 6I2mI" :X\JM [o0rE 4l~4{ 1b{[l+0 FE6E` Z1Cz{N\t fg([p^* #l4r8s pG]8? ZB$@8_ (>IDATa scHhO x1kCl  z1gU :=1/? [' )fF9 ;QAN  _:WwLA =EQR& io'k4h =cvzu %H5G^2I K40-S%l 7%3|` 7[rmO g;fug B:E\f x*PjBv& b=3j1 #U@lV,5U UK7jJ/ ZuNEg; Ikw*_Zu w#&}*H [*2yN =`k~O (}:G@H @"G:# L50yJaZ 37<Jz "AJEF _crtdJ Y[PPc4 Tkn-E _^{x1 DH1l3 V523? VxT7* O?Z~,q 0,e\="< <f37/ P\]1hh 9C f.:n} IDATx^  H$F@f Nf{~O ]j94Au nV#ZYnqGj  Z&m;m ~ZE-h |g~~q~~ @D-N01 0J 614 A0g-@=S.aKi9! 0.,ilK ^|h,qZ `g]./ Bz>;_ tV=>g qcA$?K ht%ve ~"Zp: X~kOJ3 -iqvk h(fgZAV &nas} bqeI} Ht<K| FB,7F 0Z8rT"! B=eLH, o<BhiK d?7v}`6 +&>'Bs bs-/0 !a[&^ XF7US" xtz"o7 Ex'S[ -7VW[ 1Jhkww@ 0/>zA"Pt i"3)5 cg'n^ GFMQH }^B@` `q=h& 0:P@5 .%/w{ gO5NJ $10_& L>LMJ 8~:o_ :I5!_ yM(=z^ H `,]<s7 gE+KmH6 ea%(lZ[ OE4@' :9;=< 0?8'9=N' juL5h UAV}P| Y)7!t i98ug tV:4G {|N ; #"5|R 0@#jBs ++}{1 ;3TIj _<HIpNK d}5`( kk(iLb M/&kC nzJ-qKC -dF!VVo oE#a7 E8U4I q!U\+9 XcW:I Ij0\P% F(.OV P8}a80 K Z>Y >9-i@e v4; <l ?-4pl rZ|$F (vU&) P:gG` 1Jdcrc :Z*mE ,K&|% u 1Gc "$Vqe 2OE-O8 tk1YX ;^Oy. sMM!] tR=;}@ jK!Q@/ S7thaO |#!`8 ,R 9kIamv9 '5D-4 Dwgd+ w`]   z#XxL #Pr@~$H KZyAzJ Xd&lS G'r= )l 8B=2w} 'GgON%O {60ZB E5Ae'< 7=Q.2 ZY[i\ JTG\!V ~R(TL *Lq:8;V, 63;;X cOIpV~ {,8NA $D^,Fj HS2)6g $7D>8 eP8p@i (9_nK %jb4(q n&gsJ )aTa)Lj] 6`tJ0~ ^VV'{ -07K?@ ^aRN&: ?uN5K f+ pB d`7 t .VWgO Jv%v! `ct.mC 3.qHf pn{\B qu'2\8\v  O-r= HiaiA%i qG,nI55D:5*f a%l5w!A4a ;]U9Cu,K * pz& .I?[T {7/)/vv ^Qv/_, @zGR;wj 3hTRF9 U6Z3? L'jd]2 $%LI:. L_{-4.KQCW 9UGa? Sr}{?S{ dy;=> :{;nl A$kY=ms+ q4B8= -oD}#d "~Gth f!^n]8 ,|E8+G ]{qpX 9a.$h ;_s[T ZL%]T iwTl@ 2d2#sfm \o>R= PdC8E@ _w'd6 1v!'"{ a5P4[ orc*zD GmXoI I:.*ij-w<X" ^h12%f ]8n[)t *s!^> ;shAf +T.RQ <IELJ* %U7px |gy<X]<w R=`[; \#*X9   vnk% o7/4e eaTSW' g4<wg d):9> 8`b}pF [(!}IR *6ymlz =8=9:?= \F"N\w Ep0L}I- t_flB x,=Og% duxrvp @{v9E 4$NWL "04<ZV >-_lIy 7.9v* Ovw&wv; &-H>` ;BC-F ="M`{ 0Z*X7 tT*$" [Z1'\ nEhr= Hl 3yi TrPag =n)6o {gG<X MmKeW c Z9G u,%.s' }z)"" Q3:=SG,h#@ s)Nxj#+ G@RzH/ ;(Xj"hb s,k*U E8n'- T+4iH b($z9 R R1`/ vvso2]8 '>QX`K d/}Nv a@Igx V $#eY ~!jM>~ #2#16 %Fu+[ lXT+jk v@ ;V 6hfcb \'ntC#x @ $W<3 ]gjC/ 6'pKX 1<a9N ^`Sd:O {>j\S 8lX?i H+)9>_[ +cVRJd xO9ev }|*9@ ,w%,1" ?Dje6P |uq`gRx S5MUJ p.vxS :8yx" Fs1pIr aE7~J.9~ //v?* xo=y0 H_=V# \jNF[ ?]L%( vu{Sb n|#dv wcT/x H&8r} Oz_Xk $\EDr RDF66 99XupU axA7^u S6JqB &]*cDV jgs08 '&u6zX ,T2,_ I$[6S "V^^. ITq-_ DJM#Y VRg(p 7/m"O 2c,:  _:qp%v I41#d ZGkGmB *FU?\ /dG8I Q!VKm [VatS RJ}Sj +=F{@U RQNo!M Q'2|4 S3Iu*9 d40vw %y/m1 ="a4GN F.jUg RfV@& 6BXmQ E+APZ k{]]a Lc</r OW?'G -LKY<S Idy`e, zL=!d FW_k& uJYa/ Sn$cN gfQMi DPU+rv VQT[!COS =9BAu% cona%9 )m~FU 2TdF@2 :EG)W iVTDuAi IPckZI`a XJq'xr ej5k,Q [i>GXH w9R8E T8~Ye n zinbb1 u0s6N V2njn AFT1> 9B@(> =beXB CiPtH2LsR gGYRB, A2n45 l*Y"f oG`UZ BAIk?g 3jjSbD ,yXS2 5{=8,` cH.Tf alt:- ';0x= v(@EG 4`%%C =}uc9 JsAyY y?&Rl BKA"- /0&f, (.va34hZ5 9z"WpI0 z&&XY YSja! S{kKOI DO//WO X QIc C=]BZ ww#'? t)yYg p_xnT E@ICn6 -E.@Xv %RExf -3^,` f9Gz+~ voMoP_ XOEP1 ggVKW" hKn21 <Z{tE PN+%B {@s#M y&XN/h5X  JyHZ .N|)n! *6AM[HEi ;F~Jr DW8]P SV7c@s -nCt+5 CL_U}C WRlQ(< -XG$Q5 B.~DI*c,s=_? (JPCSZ JI-W/ HA"-$? sTH7)I-f ,}R\z +7?P}bW hP\Ec %w32!' rx07F X\Cx) oL*'4p kqn'' >y+2a <RR*{^  sBu- 1*w*J o\xCk zK/xC 4Wals E:7XL "v64g 9e,"5< $i+=$ `U?q/. LH\kT HE2K&' h#WpV >k+:SA hrgax =6d0Y  ogrs21 HLb)rW |%=38 Ngpq| qN+CU aer+|q q"X1m]} QOHWw Rdjhi *A),a}AC \nXcX Nu7>c iBa|h c\1|- 6g?l3wa `4EGW[ /".Ca 'mj9* dmqj>$c KipnN =I=*L+C L\cZH D1b89 IPo8K eRCpv "RgQ- }Pf4Z "m1mP8 M"i,1L .vH:* +4_c6R #YEr/ 6Vhiu $=qo(~ )Jd]H K@#.$2< R[82..r bf6aC A=~j| sWa5J 7ILT5 A=5&@ /f gU CZ'Ojj F%p4p >yG[54 1Zz0a x|F7a LZ$l1;` <!.7uDq R+DMl n(#Jt9 ^pcKc sDDzV< 1[(3P JoD). W"]t^ :LQ7Q 6ds|aznc|nc 9aZ0QDg w~}|~c 'H]$.X*Zj )Z#Nl XQ!E& 8~:Wb L"cp8 ]:.[6 c?{bz $|9s>!; 5W ;O lHKbp _j?ti 0W0\o }\k D "13q8 QvU|`" Hv$Nc zv{jH 5[DV* t]{18 ):0;6 [Yzhy A}p`#CS- SwXVA /RW"} v[K}y qAHJ/)} Fl;$  ~{/_/I tBWPP /tgR` w#A 9 nB5S5 :?_F8 #{:7^ o<uyf 5[#3T iR-W7O n%q)_ umsm+ Q{j#U 'h[gN >rn k (jm2( ;UN(N vP}1A q^CNG hP__E &vzeus8 e*iTgP <qu?WG UChM; 4 2:xzeT\ Uj#Kwn &BX/7 4l/&o gr6{r, IHyk7 B,A3l ("(:k OOcst t;,m_ ZFv P< 5-&'6 xc 7n a1sqx *-]d7 0^ck' q_x1N ^+Fjxq C5:f6 }F:hI ^N={2 "(T#B J2H $ IDATJ$ m}6 iJ# ZI3jh kSlM\ E~8xME$ c,`H} 2Ukd~` Z}&S1 UN~|| ZYA4W A]LVu rzh.  2}ICM I78zg ~0/9@ D;6B2 DW|K8Y -%BeG "xUUf; p_'le \?(*0c -G5>7 U"NbPlp Jn(x4 .7B8  ?PWGz >z]Hr V`gn+$qp 3\S&i i_/y7 h7E$)s$+x #g,h! *n,tG tx|@, Z,7=d itlHm (7"cO D^ c1`3 ::uss /a C{ ?Xk~mc .TPTQ ?c,61t Dd8z=_ y*V(0 M dX2 F#8p) NC^ed eCW/6 7H<-{^ M\39e$ -d;rL HIU>D HE@,. Dve|e ToE6q 7Om*N) Bl5S= 'h<(/ 3Wq|G '9V]> J~cFl z[8{S .>xEI FHz.7a J%*$0d zVG\\E9 d2H)di em-f5 =|?2g) k<Yc. mV M% 6"0yz P#Gdu g}P8^# !<8d, A$'}Y ^8h3T DF`r- -438W `X1Ly8 FUFCm3 t4N]zE$J y,H6d& H&b3#R7qkd t!l ss1v -P5!"o)v o"<S`^ GI<G_ 0).44-h#q GW;@o k0"n* NH2XW< jB-8] |}8$C^ 3nYKD \5#Vg{ ^R>w4@] lZSlh HTf[Q >aJhOC -$o+f  Q1xs3IB BEQtk f4/Lk 9:e)b o$cI_cn}X DyA3\ >[Z+2\1bTr=+ -C;;-cIa \)@RS \-DCZP |1z^4 "237#:U ,njl1 J{'Z< ef4Evi _H"N+ 2"pW\d xH!m4 Lzh5IHe&,8 M!%0N Ga0:W 6Zf&/ .GAMl .u<)E iUE9i n}IB) a;elp[  A)0t ILEPd 1Ay)E *02\` HB)cO2* ^}<tu +woz% Rmd+; K6h#> !e=(LG K:DH'r 2UgGT "%x,y Nph0j aH<I_ zp?K6F /VGw5 `$^aLR Juslb 1}/BG_GG 7[0Lr rx0O2X= o>Ylp @}K;k :?^A& :EJTD~ e$f>S @bq'X4 H)Ije (W)b} $U-]-e sC82K(i <h*<1{3 eD-;w-x QZAEb O_x'N% xTw$v cV&[z ) $RhqK =$\ch lvv6; p:oj6J')EA w6 ;W H9*C  H8,o5 `o#a60|P U./]| LR<T7n* dDd+]" X3x3b OjJcA Oz"9L a&=cL MNDHFl "~Vz0 ?gVvCD N{oz^\ jD6qr O<6c@ DL1/d qRNUS 3B >GF ]$ur: /KJub i1Oma BZ$-*Iw $+(@- Fjl0# jd_gu l=%Vj beF!1 ]Gy;nE NuC&{ nYJ`i C 9K" nmKkL }#mcC ISS%J1M Mfc@+ W;/(; Ya6NQ-\PDI Gw-8PK i\DiO =4!;t 8T(-< 32]+{ L@S&(5/62 H8K6Jt 0i0M% o"uu1Qv 8d*'M $=_j{L c/]B-\%[ .hnR! UG&,Y |. gEF# 0wjH M;)|$ @<k>$ CMy,7 K2F;7 CKU0W 7#9aT C4p!D ~vx/B+ 9)`vt fm/!K6 2M[~z )F}_5 O^m"v S2bBdA X}[in g3rYD 6dHQX *w"O> 0L7/xS DEmP, 7>zZ~:np rcj8X :8#</*>{B m<x:9>Pu ]('HL~y av@*g Z*%}+ vjl)? ;R[P^ iJvD?} HHimn )h/%w!9 7mbYp ?m0vU 5g^06r F$[m4& Rktxp /zF#|:f[ J(R4R,J )i5x"q Q!GS$' 4x(<~`? jZ,pf ,Q&t<X! D!h^( %`\x' 4{y:2 :C<h"1A H%i3'I f\-'}  3[M" wCqZa i1}&E =l]xa a(<:56 Q #F< ,(%Bm BA!W,] s\hg(5 "&<?Z /34zK8m g{<-fU KcMJ  `n['aT i;W~'}\)Z^G *\D1a 91,]T ]S8.,M -Fa(kKI IA(~W L3SP0 K)eD: O{EIR 3WCee]IQ QI8jB I#d&C ~W33$ n<jH& r-?psL a7HfxAN z#H_] /UbI_ )zx00 U:,FY( K4q`v xkds` d%!"N 'f;'f X*RLh ( ,YDr|  q~%WY #w?6q` 5xAwX *QhN> %m(Eo= $(YU1! 'X%rh5 =[X#t o1;te v7 VY? ;_|~q OG,M` ~\w\Tz |?EG=xT .nCSn<r gV0Le|GN_`  \E&<Dp4w 09i|AN e/tu,l Jsg2U ;?yhym /u/~a Vk(Gzk 'JeNy *LoP7 9iw+fjc* ymq,).k J9Yam J7Av3 B>\xV; #c~'~.> ^cRQI}4 .DF(BM {Xu59i V1%Ob y^%0+$ GZ_0FnL ]6O=k Tah)g X6V8q-, >2FS} h$%MB >a|9A @MjrZ ^TSM^Btk <efl/Ni b|-N@ sNHuZ eV^|AzM N{!uy ^sc0v "`uyT`o fss8~ nl7ai 'NNcZ txl?f 36mjht hnI([ M\[ c< nPoEs* 4dLI# J VE> ;)YUH +r&'x GY>^2N $+5b\ EQoS5 O@[4' & R:m` Or*DSt Wz5fv EurhS t&iB# y`;9; w&+q47= S4*E# Oge6'r;It usRj,Q pqBFJN nLQEG V<(uv bJ}l[ ]Inl, yXlS$ \R.<` 29PUkF np/-# v9+1f -g@Lm jhCq? _5}Y' L<r!3c 6-f"l os|(` Gh {i &^ynF T~I{!u< GRJR^ IedEW 6l--Fr&f YT+8a `N)!Ve >0hdm]S7E ##i=( &a)iB ??;|t Z!.&q )|N-H BCye] 2=XNe[ K#ORwE u9dvNR 8sf#O c8J=F_f v2vEbP %o%Js p#HAy j$Q<@aw eP$Oc s$aaB R5e<7<? jZ<U{ 'X@&^pY qJGC)q C<S1f ]!YoU {(DOM pXCfM :1zl!H N:)DU <G>($) e8y/# '2%{3a' Zk"?yE wAR0PM 3DIj7 X<Bx% (bj]E Uok8J `rs|| p%}uOD"8$*| FHt3, j[Ym@ ;?&x@ DIQJ3e mbP:# EI(nQZ )(K-@@ {BIXj 1|1\. $1P*I  KP$FD< IuA+Z! RHru; [^Zby ':*2sY QZ7w?& 1pQcA `8Z`e\ 8"c:` QKo*1 (Pb\{ ;n&,tOp [FB9L YQ[(]Kn +`dN$)(M AE)4lu C)t^1 VA vvl kJw4< D1f!Q WGUe8 "7"K#H NUk|$ Lsd]) i!\#0f o1H90J C<y3d/ qL_4h! ]\\Xm l;5PJ -U=DJ, .RD]rC hJXIX |$"3* JH@>+ tPcJ\# AnI7w $e>s#hF c]XM0s ;=8|* ?482?$ [W>Vm SIuYO6 kc$B< !A)@! l*zY? .:z[t SFXrt =XZ8Dp JQ'+V8[ fq%Df! -m5PHn(=rU ayNB8W y# Y9 *iFGk:d mw~kg> vJq?n ^:tlu aD/]] ,-cG`L +WZq! zXKi26 >Al^r e?Ld' -XS##a PA^1J IGj P ;9O<v #Eo{Gm &Ysrh 3ok|(X wN<tn *!3{7 [auYZ Rj!5' E6;V*E 5v7Exz }jwo| {{cqcw U%Y7z HDs*$M +{ll3Y Z0&,x-Zp:9 v>Cus 7"QPY sE<I\ X%1iG Q+80>, a,bV( h)zg>U u Kcs jjtRR >CU*6 y'/M` G2PPqx] /Q'b1 #'+}3i* x/~jIWD<a 9`eT} Su5zT fdJ63{& Yh0R  L>I-TO Rs*.G hb]aH be,\& J}P(1F [F<-n&$ ,U&\T IiK&T% e9G6~ p$!q- 87d,b SBkCg] oTIhD ]<#`T Odg<:R q;Np< &9EL; nIHkLc @Ptq/&h ',uNF QZH7KB 2ejp 4 k:L~g [qDi\ 6~}io lk.fp q(@}bw 9"0$i \b)Q7n' fgE!* EA@j8T {eQip3a I{d_I mHJj9= "WAoNWA Grj1Vum K+Kw~ ?r:l0 _y_:B^ OD@<P sw'VA LoS.' ].*bLWx buqiu) c[k*~ ][X:9 z^[X^ m8*Pf d5<Cq lkL2gD B[{R. W* q0B ui)V_G/ 3/Cviy#i G!=Hka2 RiFBW 3eob](W c@&'Ce UFF:g qhoq; yW]:I (m)nJ! 6e25N&q qC3YM X";mp IOrdT R)_l'N J1ti" u5(5F,U Xgu.y5 TBuJ2 1j=*NP (:mC# izEJk