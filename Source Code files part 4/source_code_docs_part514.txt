ng.PageMediaSizeName.ISOA2">
      <summary>A2</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA3">
      <summary>A3</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA3Rotated">
      <summary>A3 Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA3Extra">
      <summary>A3 Extra</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA4">
      <summary>A4</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA4Rotated">
      <summary>A4 Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA4Extra">
      <summary>A4 Extra</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA5">
      <summary>A5</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA5Rotated">
      <summary>A5 Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA5Extra">
      <summary>A5 Extra</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA6">
      <summary>A6</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA6Rotated">
      <summary>A6 Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA7">
      <summary>A7</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA8">
      <summary>A8</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOA9">
      <summary>A9</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB0">
      <summary>B0</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB1">
      <summary>B1</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB10">
      <summary>B10</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB2">
      <summary>B2</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB3">
      <summary>B3</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB4">
      <summary>B4</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB4Envelope">
      <summary>B4 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB5Envelope">
      <summary>B5 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB5Extra">
      <summary>B5 Extra</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB7">
      <summary>B7</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB8">
      <summary>B8</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOB9">
      <summary>B9</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC0">
      <summary>C0</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC1">
      <summary>C1</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC10">
      <summary>C10</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC2">
      <summary>C2</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC3">
      <summary>C3</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC3Envelope">
      <summary>C3 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC4">
      <summary>C4</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC4Envelope">
      <summary>C4 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC5">
      <summary>C5</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC5Envelope">
      <summary>C5 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC6">
      <summary>C6</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC6Envelope">
      <summary>C6 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC6C5Envelope">
      <summary>C6C5 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC7">
      <summary>C7</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC8">
      <summary>C8</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOC9">
      <summary>C9</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISODLEnvelope">
      <summary>DL Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISODLEnvelopeRotated">
      <summary>DL Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.ISOSRA3">
      <summary>SRA 3</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanQuadrupleHagakiPostcard">
      <summary>Quadruple Hagaki Postcard</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB0">
      <summary>Japanese Industrial Standard B0</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB1">
      <summary>Japanese Industrial Standard B1</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB10">
      <summary>Japanese Industrial Standard B10</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB2">
      <summary>Japanese Industrial Standard B2</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB3">
      <summary>Japanese Industrial Standard B3</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB4">
      <summary>Japanese Industrial Standard B4</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB4Rotated">
      <summary>Japanese Industrial Standard B4 Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB5">
      <summary>Japanese Industrial Standard B5</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB5Rotated">
      <summary>Japanese Industrial Standard B5 Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB6">
      <summary>Japanese Industrial Standard B6</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB6Rotated">
      <summary>Japanese Industrial Standard B6 Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB7">
      <summary>Japanese Industrial Standard B7</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB8">
      <summary>Japanese Industrial Standard B8</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JISB9">
      <summary>Japanese Industrial Standard B9</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanChou3Envelope">
      <summary>Chou 3 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanChou3EnvelopeRotated">
      <summary>Chou 3 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanChou4Envelope">
      <summary>Chou 4 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanChou4EnvelopeRotated">
      <summary>Chou 4 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanHagakiPostcard">
      <summary>Hagaki Postcard</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanHagakiPostcardRotated">
      <summary>Hagaki Postcard Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanKaku2Envelope">
      <summary>Kaku 2 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanKaku2EnvelopeRotated">
      <summary>Kaku 2 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanKaku3Envelope">
      <summary>Kaku 3 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanKaku3EnvelopeRotated">
      <summary>Kaku 3 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanYou4Envelope">
      <summary>You 4 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmerica10x11">
      <summary>10 x 11</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmerica10x14">
      <summary>10 x 14</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmerica11x17">
      <summary>11 x 17</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmerica9x11">
      <summary>9 x 11</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaArchitectureASheet">
      <summary>Architecture A Sheet</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaArchitectureBSheet">
      <summary>Architecture B Sheet</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaArchitectureCSheet">
      <summary>Architecture C Sheet</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaArchitectureDSheet">
      <summary>Architecture D Sheet</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaArchitectureESheet">
      <summary>Architecture E Sheet</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaCSheet">
      <summary>C Sheet</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaDSheet">
      <summary>D Sheet</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaESheet">
      <summary>E Sheet</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaExecutive">
      <summary>Executive</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaGermanLegalFanfold">
      <summary>German Legal Fanfold</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaGermanStandardFanfold">
      <summary>German Standard Fanfold</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaLegal">
      <summary>Legal</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaLegalExtra">
      <summary>Legal Extra</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaLetter">
      <summary>Letter </summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaLetterRotated">
      <summary>Letter Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaLetterExtra">
      <summary>Letter Extra</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaLetterPlus">
      <summary>Letter Plus</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaMonarchEnvelope">
      <summary>Monarch Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaNote">
      <summary>Note</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaNumber10Envelope">
      <summary>#10 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaNumber10EnvelopeRotated">
      <summary>#10 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaNumber9Envelope">
      <summary>#9 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaNumber11Envelope">
      <summary>#11 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaNumber12Envelope">
      <summary>#12 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaNumber14Envelope">
      <summary>#14 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaPersonalEnvelope">
      <summary>Personal Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaQuarto">
      <summary>Quarto</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaStatement">
      <summary>Statement</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaSuperA">
      <summary>Super A</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaSuperB">
      <summary>Super B</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaTabloid">
      <summary>Tabloid</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmericaTabloidExtra">
      <summary>Tabloid Extra</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.OtherMetricA4Plus">
      <summary>A4 Plus</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.OtherMetricA3Plus">
      <summary>A3 Plus</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.OtherMetricFolio">
      <summary>Folio</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.OtherMetricInviteEnvelope">
      <summary>Invite Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.OtherMetricItalianEnvelope">
      <summary>Italian Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC1Envelope">
      <summary>People's Republic of China #1 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC1EnvelopeRotated">
      <summary>People's Republic of China #1 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC10Envelope">
      <summary>People's Republic of China #10 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC10EnvelopeRotated">
      <summary>People's Republic of China #10 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC16K">
      <summary>People's Republic of China 16K</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC16KRotated">
      <summary>People's Republic of China 16K Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC2Envelope">
      <summary>People's Republic of China #2 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC2EnvelopeRotated">
      <summary>People's Republic of China #2 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC32K">
      <summary>People's Republic of China 32K</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC32KRotated">
      <summary>People's Republic of China 32K Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC32KBig">
      <summary>People's Republic of China 32K Big</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC3Envelope">
      <summary>People's Republic of China #3 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC3EnvelopeRotated">
      <summary>People's Republic of China #3 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC4Envelope">
      <summary>People's Republic of China #4 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC4EnvelopeRotated">
      <summary>People's Republic of China #4 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC5Envelope">
      <summary>People's Republic of China #5 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC5EnvelopeRotated">
      <summary>People's Republic of China #5 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC6Envelope">
      <summary>People's Republic of China #6 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC6EnvelopeRotated">
      <summary>People's Republic of China #6 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC7Envelope">
      <summary>People's Republic of China #7 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC7EnvelopeRotated">
      <summary>People's Republic of China #7 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC8Envelope">
      <summary>People's Republic of China #8 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC8EnvelopeRotated">
      <summary>People's Republic of China #8 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC9Envelope">
      <summary>People's Republic of China #9 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.PRC9EnvelopeRotated">
      <summary>People's Republic of China #9 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Roll04Inch">
      <summary>4-inch wide roll</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Roll06Inch">
      <summary>6-inch wide roll</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Roll08Inch">
      <summary>8-inch wide roll</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Roll12Inch">
      <summary>12-inch wide roll</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Roll15Inch">
      <summary>15-inch wide roll</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Roll18Inch">
      <summary>18-inch wide roll</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Roll22Inch">
      <summary>22-inch wide roll</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Roll24Inch">
      <summary>24-inch wide roll</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Roll30Inch">
      <summary>30-inch wide roll</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Roll36Inch">
      <summary>36-inch wide roll</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Roll54Inch">
      <summary>54-inch wide roll</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanDoubleHagakiPostcard">
      <summary>Double Hagaki Postcard</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanDoubleHagakiPostcardRotated">
      <summary>Double Hagaki Postcard Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanLPhoto">
      <summary>L Photo</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.Japan2LPhoto">
      <summary>2L Photo</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanYou1Envelope">
      <summary>You 1 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanYou2Envelope">
      <summary>You 2 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanYou3Envelope">
      <summary>You 3 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanYou4EnvelopeRotated">
      <summary>You 4 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanYou6Envelope">
      <summary>You 6 Envelope</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.JapanYou6EnvelopeRotated">
      <summary>You 6 Envelope Rotated</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmerica4x6">
      <summary>4 x 6</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmerica4x8">
      <summary>4 x 8</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmerica5x7">
      <summary>5 x 7</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmerica8x10">
      <summary>8 x 10</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmerica10x12">
      <summary>10 x 12</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.NorthAmerica14x17">
      <summary>14 x 17</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.BusinessCard">
      <summary>Business card</summary>
    </member>
    <member name="F:System.Printing.PageMediaSizeName.CreditCard">
      <summary>Credit card</summary>
    </member>
    <member name="T:System.Printing.PageMediaType">
      <summary>Specifies types of printing paper or other media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.Unknown">
      <summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.AutoSelect">
      <summary>The print device selects the media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.Archival">
      <summary>Archive-quality media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.BackPrintFilm">
      <summary>Specialty back-printing film.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.Bond">
      <summary>Standard bond media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.CardStock">
      <summary>Standard card stock.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.Continuous">
      <summary>Continuous-feed media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.EnvelopePlain">
      <summary>Standard envelope.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.EnvelopeWindow">
      <summary>Window envelope.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.Fabric">
      <summary>Fabric media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.HighResolution">
      <summary>Specialty high-resolution media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.Label">
      <summary>Label media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.MultiLayerForm">
      <summary>Attached multipart forms.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.MultiPartForm">
      <summary>Individual multipart forms.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.Photographic">
      <summary>Standard photographic media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.PhotographicFilm">
      <summary>Film photographic media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.PhotographicGlossy">
      <summary>Glossy photographic media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.PhotographicHighGloss">
      <summary>High-gloss photographic media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.PhotographicMatte">
      <summary>Matte photographic media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.PhotographicSatin">
      <summary>Satin photographic media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.PhotographicSemiGloss">
      <summary>Semi-gloss photographic media.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.Plain">
      <summary>Plain paper.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.Screen">
      <summary>Output to a display in continuous form.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.ScreenPaged">
      <summary>Output to a display in paged form.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.Stationery">
      <summary>Specialty stationary.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.TabStockFull">
      <summary>Tab stock, not precut (single tabs).</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.TabStockPreCut">
      <summary>Tab stock, precut (multiple tabs).</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.Transparency">
      <summary>Transparent sheet.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.TShirtTransfer">
      <summary>Media that is used to transfer an image to a T-shirt.</summary>
    </member>
    <member name="F:System.Printing.PageMediaType.None">
      <summary>Unknown or unlisted media.</summary>
    </member>
    <member name="T:System.Printing.PageOrder">
      <summary>Specifies whether a print device prints multi-page documents from front-to-back or back-to-front.</summary>
    </member>
    <member name="F:System.Printing.PageOrder.Unknown">
      <summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    </member>
    <member name="F:System.Printing.PageOrder.Standard">
      <summary>Output prints in front-to-back order.</summary>
    </member>
    <member name="F:System.Printing.PageOrder.Reverse">
      <summary>Output prints in back-to-front order.</summary>
    </member>
    <member name="T:System.Printing.PageOrientation">
      <summary>Specifies how pages of content are oriented on print media.</summary>
    </member>
    <member name="F:System.Printing.PageOrientation.Unknown">
      <summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    </member>
    <member name="F:System.Printing.PageOrientation.Landscape">
      <summary>Content of the imageable area is rotated on the page 90 degrees counterclockwise from standard (portrait) orientation.</summary>
    </member>
    <member name="F:System.Printing.PageOrientation.Portrait">
      <summary>Standard orientation. </summary>
    </member>
    <member name="F:System.Printing.PageOrientation.ReverseLandscape">
      <summary>Content of the imageable area is rotated on the page 90 degrees clockwise from standard (portrait) orientation.</summary>
    </member>
    <member name="F:System.Printing.PageOrientation.ReversePortrait">
      <summary>Content of the imageable area is upside down relative to standard (portrait) orientation.</summary>
    </member>
    <member name="T:System.Printing.PageQualitativeResolution">
      <summary>Specifies the page resolution as a qualitative, non-numerical, value. </summary>
    </member>
    <member name="F:System.Printing.PageQualitativeResolution.Unknown">
      <summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    </member>
    <member name="F:System.Printing.PageQualitativeResolution.Default">
      <summary>The default qualitative resolution for the printer.</summary>
    </member>
    <member name="F:System.Printing.PageQualitativeResolution.Draft">
      <summary>Draft-level quality, which is 300 dpi for most printers. </summary>
    </member>
    <member name="F:System.Printing.PageQualitativeResolution.High">
      <summary>High quality, which is 1200 dpi or greater for most printers.</summary>
    </member>
    <member name="F:System.Printing.PageQualitativeResolution.Normal">
      <summary>Normal quality, which is 600 dpi for most printers.</summary>
    </member>
    <member name="F:System.Printing.PageQualitativeResolution.Other">
      <summary>Other quality. </summary>
    </member>
    <member name="T:System.Printing.PageResolution">
      <summary>Defines the page resolution of printed output as either a qualitative value or as dots per inch, or both.</summary>
    </member>
    <member name="M:System.Printing.PageResolution.#ctor(System.Int32,System.Int32)">
      <summary>Initiates a new instance of the <see cref="T:System.Printing.PageResolution" /> class that has the specified vertical and horizontal dots per inch. </summary>
      <param name="resolutionX">The horizontal resolution in dots per inch. </param>
      <param name="resolutionY">The vertical resolution in dots per inch.</param>
    </member>
    <member name="M:System.Printing.PageResolution.#ctor(System.Int32,System.Int32,System.Printing.PageQualitativeResolution)">
      <summary>Initiates a new instance of the <see cref="T:System.Printing.PageResolution" /> class that has the specified <see cref="T:System.Printing.PageQualitativeResolution" /> and the specified vertical and horizontal dots per inch.</summary>
      <param name="resolutionX">The horizontal resolution in dots per inch. </param>
      <param name="resolutionY">The vertical resolution in dots per inch.</param>
      <param name="qualitative">A value representing the resolution.</param>
    </member>
    <member name="M:System.Printing.PageResolution.#ctor(System.Printing.PageQualitativeResolution)">
      <summary>Initiates a new instance of the <see cref="T:System.Printing.PageResolution" /> class that has the specified <see cref="T:System.Printing.PageQualitativeResolution" />. </summary>
      <param name="qualitative">A value representing the resolution.</param>
    </member>
    <member name="P:System.Printing.PageResolution.QualitativeResolution">
      <summary>Gets the qualitative expression, if any, of the page resolution.</summary>
      <returns>A <see cref="T:System.Printing.PageQualitativeResolution" /> value that represents the level of page resolution.</returns>
    </member>
    <member name="M:System.Printing.PageResolution.ToString">
      <summary>Returns the page resolution as a <see cref="T:System.String" />. </summary>
      <returns>A <see cref="T:System.String" /> that contains the property values of the <see cref="T:System.Printing.PageResolution" /> object.</returns>
    </member>
    <member name="P:System.Printing.PageResolution.X">
      <summary>Gets the dots-per-inch measure of the horizontal page resolution.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents a horizontal page resolution.</returns>
    </member>
    <member name="P:System.Printing.PageResolution.Y">
      <summary>Gets the dots-per-inch measure of the vertical page resolution.</summary>
      <returns>A nullable <see cref="T:System.Int32" /> value that represents a vertical page resolution.</returns>
    </member>
    <member name="T:System.Printing.PageScalingFactorRange">
      <summary>Specifies a range of percentages by which a printer can enlarge or reduce the print image on a page. </summary>
    </member>
    <member name="P:System.Printing.PageScalingFactorRange.MaximumScale">
      <summary>Gets the maximum percentage of the range.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents a percentage.</returns>
    </member>
    <member name="P:System.Printing.PageScalingFactorRange.MinimumScale">
      <summary>Gets the minimum percentage of the range.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents a percentage.</returns>
    </member>
    <member name="M:System.Printing.PageScalingFactorRange.ToString">
      <summary>Returns the <see cref="T:System.String" /> representation of the range.</summary>
      <returns>A <see cref="T:System.String" /> representation of the scaling range.</returns>
    </member>
    <member name="T:System.Printing.PagesPerSheetDirection">
      <summary>Specifies the arrangement of pages when more than one page of content appears on a single side of print media.</summary>
    </member>
    <member name="F:System.Printing.PagesPerSheetDirection.Unknown">
      <summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    </member>
    <member name="F:System.Printing.PagesPerSheetDirection.RightBottom">
      <summary>Pages appear in rows, from left to right and top to bottom relative to page orientation.</summary>
    </member>
    <member name="F:System.Printing.PagesPerSheetDirection.BottomRight">
      <summary>Pages appear in columns, from top to bottom and left to right relative to page orientation.</summary>
    </member>
    <member name="F:System.Printing.PagesPerSheetDirection.LeftBottom">
      <summary>Pages appear in rows, from right to left and top to bottom relative to page orientation.</summary>
    </member>
    <member name="F:System.Printing.PagesPerSheetDirection.BottomLeft">
      <summary>Pages appear in columns, from top to bottom and right to left relative to page orientation.</summary>
    </member>
    <member name="F:System.Printing.PagesPerSheetDirection.RightTop">
      <summary>Pages appear in rows, from left to right and bottom to top relative to page orientation.</summary>
    </member>
    <member name="F:System.Printing.PagesPerSheetDirection.TopRight">
      <summary>Pages appear in columns, from bottom to top and left to right relative to page orientation.</summary>
    </member>
    <member name="F:System.Printing.PagesPerSheetDirection.LeftTop">
      <summary>Pages appear in rows, from right to left and bottom to top relative to page orientation.</summary>
    </member>
    <member name="F:System.Printing.PagesPerSheetDirection.TopLeft">
      <summary>Pages appear in columns, from bottom to top and right to left relative to page orientation.</summary>
    </member>
    <member name="T:System.Printing.PhotoPrintingIntent">
      <summary>Specifies the quality of output when a photograph is printed. The printer driver translates the <see cref="T:System.Printing.PhotoPrintingIntent" /> into quantitative values for resolution and other quality factors.</summary>
    </member>
    <member name="F:System.Printing.PhotoPrintingIntent.Unknown">
      <summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    </member>
    <member name="F:System.Printing.PhotoPrintingIntent.None">
      <summary>No photo-printing intent. The user sets specific quantitative properties.</summary>
    </member>
    <member name="F:System.Printing.PhotoPrintingIntent.PhotoBest">
      <summary>Best quality photo printing.</summary>
    </member>
    <member name="F:System.Printing.PhotoPrintingIntent.PhotoDraft">
      <summary>Draft quality photo printing.</summary>
    </member>
    <member name="F:System.Printing.PhotoPrintingIntent.PhotoStandard">
      <summary>Standard quality photo printing.</summary>
    </member>
    <member name="T:System.Printing.PrintCapabilities">
      <summary>Defines the capabilities of a printer.</summary>
    </member>
    <member name="M:System.Printing.PrintCapabilities.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintCapabilities" /> class by using an XML stream (that contains a PrintCapabilities document) that specifies printer capabilities and complies with the XML Print Schema.</summary>
      <param name="xmlStream">An XML <see cref="T:System.IO.Stream" /> that describes printer capabilities and conforms to the Print Schema.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlStream" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="xmlStream" /> is not valid XML.</exception>
    </member>
    <member name="P:System.Printing.PrintCapabilities.CollationCapability">
      <summary>Gets a collection of values that identify the collation capabilities of a printer.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.Collation" /> values. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.DeviceFontSubstitutionCapability">
      <summary>Gets a collection of values that identify whether and how a printer can substitute device-based fonts for computer-based fonts.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.DeviceFontSubstitution" /> values. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.DuplexingCapability">
      <summary>Gets a collection of values that identify whether and how a printer can perform two-sided printing.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.Duplexing" /> values. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.InputBinCapability">
      <summary>Gets a collection of values that indicate what input bin (paper tray) is used.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.InputBin" /> values. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.MaxCopyCount">
      <summary>Gets a value indicating the maximum number of copies that the device can print in a single print job.</summary>
      <returns>A nullable <see cref="T:System.Int32" /> value that specifies the maximum number of copies that a printer can print. Returns null if the device driver does not report a maximum.</returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.OrientedPageMediaHeight">
      <summary>Gets a value indicating the height of the imageable area on a page, where height means the vertical dimension relative to the page's orientation. </summary>
      <returns>A nullable <see cref="T:System.Double" /> value indicating the height, in pixels, which are 1/96 inch increments, of the area on a page that the printer is capable of printing.</returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.OrientedPageMediaWidth">
      <summary>Gets a value indicating the width of the imageable area on a page, where width means the horizontal dimension relative to the page's orientation. </summary>
      <returns>A nullable <see cref="T:System.Double" /> value indicating the width, in pixels, which are 1/96 inch increments, of the area on a page that the printer is capable of printing.</returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.OutputColorCapability">
      <summary>Gets a collection of values that specify the ways in which a printer can print content with color and shades of gray.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.OutputColor" /> values. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.OutputQualityCapability">
      <summary>Gets a collection of values that indicate the types of output quality the printer supports. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.OutputQuality" /> values. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.PageBorderlessCapability">
      <summary>Gets a collection of values that indicate whether the printer can print up to the edge of the media.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.PageBorderless" /> values.</returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.PageImageableArea">
      <summary>Gets an object that represents the area of a page that the printer can use.</summary>
      <returns>A <see cref="T:System.Printing.PageImageableArea" /> object that specifies the distance, in pixels (units of 1/96 inch), of the upper-left corner of the imageable area. The vertical distance is measured from the top edge of the paper and the horizontal distance is measured from the left edge. The return value also specifies the width and height of the imageable area. If the printer driver does not report an imageable area, then this property is null. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.PageMediaSizeCapability">
      <summary>Gets a collection of <see cref="T:System.Printing.PageMediaSize" /> objects that identify the paper and media sizes that a printer supports.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.PageMediaSize" /> objects.</returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.PageMediaTypeCapability">
      <summary>Gets a collection of values that identify what types of paper and other media a printer supports. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.PageMediaType" /> values specifying the print media, such as card stock, label, plain, or photographic. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.PageOrderCapability">
      <summary>Gets a collection of values that indicate whether a printer is capable of printing multiple-page documents from front-to-back, back-to-front, or both ways.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.PageOrder" /> values. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.PageOrientationCapability">
      <summary>Gets a collection of values that identify what types of page orientation a printer supports.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.PageOrientation" /> values. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.PageResolutionCapability">
      <summary>Gets a collection of <see cref="T:System.Printing.PageResolution" /> objects that identify what levels of page resolution the printer supports.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.PageResolution" /> objects. Each value represents a page resolution as a qualitative value, a dots-per-inch value, or both.</returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.PageScalingFactorRange">
      <summary>Gets the maximum and minimum percentages by which a printer can enlarge or reduce the print image on a page.</summary>
      <returns>A <see cref="T:System.Printing.PageScalingFactorRange" /> object with <see cref="P:System.Printing.PageScalingFactorRange.MaximumScale" /> and <see cref="P:System.Printing.PageScalingFactorRange.MinimumScale" /> properties holding <see cref="T:System.Int32" /> values that represent percentages. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.PagesPerSheetCapability">
      <summary>Gets a collection of integers, each identifying the number of pages that a user can choose to print on a single side of a sheet of paper. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Int32" /> values representing the options that a printer supports for printing more than one page per side. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.PagesPerSheetDirectionCapability">
      <summary>Gets a collection of values that identify what patterns a printer supports for presenting multiple pages on a single side of a sheet of paper.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.PagesPerSheetDirection" /> values. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.PhotoPrintingIntentCapability">
      <summary>Gets a collection of values that identify the quality options the printer supports for printing photographs. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.PhotoPrintingIntent" /> values. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.StaplingCapability">
      <summary>Gets a collection of values that identify the types of automatic stapling that a printer supports.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.Stapling" /> values. </returns>
    </member>
    <member name="P:System.Printing.PrintCapabilities.TrueTypeFontModeCapability">
      <summary>Gets a collection of values that identify the methods that a printer supports for handling TrueType fonts.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Printing.TrueTypeFontMode" /> values. </returns>
    </member>
    <member name="T:System.Printing.PrintCommitAttributesException">
      <summary>The exception that is thrown when an error condition prevents some attributes from being committed by a <see cref="T:System.Printing.PrintSystemObject" /> to the actual computer, printer, or device that the object represents.</summary>
    </member>
    <member name="M:System.Printing.PrintCommitAttributesException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintCommitAttributesException" /> class.</summary>
    </member>
    <member name="M:System.Printing.PrintCommitAttributesException.#ctor(System.Int32,System.Collections.ObjectModel.Collection{System.String},System.Collections.ObjectModel.Collection{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintCommitAttributesException" /> class by using the specified error code, and the success and failure collections.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> that is interpreted as an HRESULT.</param>
      <param name="attributesSuccessList">A collection of strings that name the attributes that your program successfully committed.</param>
      <param name="attributesFailList">A collection of strings that name the attributes that your program was unable to commit.</param>
    </member>
    <member name="M:System.Printing.PrintCommitAttributesException.#ctor(System.Int32,System.String,System.Collections.ObjectModel.Collection{System.String},System.Collections.ObjectModel.Collection{System.String},System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintCommitAttributesException" /> class by using the specified error code, message, and object name, and the success and failure collections.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> that is interpreted as an HRESULT.</param>
      <param name="message">A description of the error condition.</param>
      <param name="attributesSuccessList">A collection of strings that name the attributes that your program successfully committed.</param>
      <param name="attributesFailList">A collection of strings that name the attributes that your program was unable to commit.</param>
      <param name="objectName">The object that generated the exception.</param>
    </member>
    <member name="M:System.Printing.PrintCommitAttributesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintCommitAttributesException" /> class by using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. </summary>
      <param name="info">Stores all the data that is used to serialize the object.</param>
      <param name="context">Describes the context of the serialized stream, including the source and the destination.</param>
    </member>
    <member name="M:System.Printing.PrintCommitAttributesException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintCommitAttributesException" /> class and provides it with the specified message.</summary>
      <param name="message">A description of the error condition.</param>
    </member>
    <member name="M:System.Printing.PrintCommitAttributesException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintCommitAttributesException" /> class by using the specified message and the inner <see cref="T:System.Exception" />.</summary>
      <param name="message">A description of the error condition.</param>
      <param name="innerException">The underlying condition that triggered the <see cref="T:System.Printing.PrintCommitAttributesException" />.</param>
    </member>
    <member name="P:System.Printing.PrintCommitAttributesException.CommittedAttributesCollection">
      <summary>Gets a <see cref="T:System.Collections.ObjectModel.Collection`1" /> of the names of the attributes that were successfully committed.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of strings that identify the <see cref="T:System.Printing.PrintSystemObject" /> attributes that were successfully committed.</returns>
    </member>
    <member name="P:System.Printing.PrintCommitAttributesException.FailedAttributesCollection">
      <summary>Gets a <see cref="T:System.Collections.ObjectModel.Collection`1" /> of the names of the attributes that were not committed.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of strings that identify the <see cref="T:System.Printing.PrintSystemObject" /> attributes that your program was unable to commit.</returns>
    </member>
    <member name="M:System.Printing.PrintCommitAttributesException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets information about the serialization of the object and the context of the serialized stream.</summary>
      <param name="info">Stores all the data that is used to serialize the object.</param>
      <param name="context">Describes the context of the serialized stream, including the source and the destination.</param>
    </member>
    <member name="P:System.Printing.PrintCommitAttributesException.PrintObjectName">
      <summary>Gets the name of the object that threw the exception.</summary>
      <returns>A <see cref="T:System.String" /> reference to the <see cref="P:System.Printing.PrintSystemObject.Name" /> property of the <see cref="T:System.Printing.PrintSystemObject" /> that threw the exception.</returns>
    </member>
    <member name="T:System.Printing.PrintingCanceledException">
      <summary>The exception that occurs when code attempts to access a canceled print job.</summary>
    </member>
    <member name="M:System.Printing.PrintingCanceledException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" /> class. </summary>
    </member>
    <member name="M:System.Printing.PrintingCanceledException.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" /> class that provides a specific error code and error condition.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
    </member>
    <member name="M:System.Printing.PrintingCanceledException.#ctor(System.Int32,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" /> class that provides a specific error code and error condition, including the underlying cause of the exception.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="innerException">The underlying error condition that caused the <see cref="T:System.Printing.PrintingCanceledException" />.</param>
    </member>
    <member name="M:System.Printing.PrintingCanceledException.#ctor(System.Int32,System.String,System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" /> class that provides a specific error code, error condition, print queue name, job name, and job ID.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="printQueueName">The name of the print queue hosting the print job that caused the exception.</param>
      <param name="jobName">The name of the print job that caused the exception. </param>
      <param name="jobId">The ID number of the print job that caused the exception. </param>
    </member>
    <member name="M:System.Printing.PrintingCanceledException.#ctor(System.Int32,System.String,System.String,System.String,System.Int32,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" /> class with a specific error code, error condition, print queue name, job name, job ID, and underlying cause of the exception.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="printQueueName">The name of the print queue hosting the print job that caused the exception.</param>
      <param name="jobName">The name of the print job that caused the exception. </param>
      <param name="jobId">The ID number of the print job that caused the exception. </param>
      <param name="innerException">The underlying cause of the exception.</param>
    </member>
    <member name="M:System.Printing.PrintingCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" /> class that provides specific <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. This constructor is protected.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, including source and destination, of the serialized stream.</param>
    </member>
    <member name="M:System.Printing.PrintingCanceledException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" /> class that provides a specific error condition.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
    </member>
    <member name="M:System.Printing.PrintingCanceledException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" /> class that provides a specific error condition, including the underlying cause of the exception.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="innerException">The underlying error condition that caused the <see cref="T:System.Printing.PrintingCanceledException" />.</param>
    </member>
    <member name="T:System.Printing.PrintingNotSupportedException">
      <summary>The exception that is thrown when a printing operation is not supported.</summary>
    </member>
    <member name="M:System.Printing.PrintingNotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingNotSupportedException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Printing.PrintingNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingNotSupportedException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Printing.PrintingNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingNotSupportedException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Printing.PrintingNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Printing.PrintingNotSupportedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingNotSupportedException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="T:System.Printing.PrintJobException">
      <summary>The exception that occurs when the print job does not run correctly.</summary>
    </member>
    <member name="M:System.Printing.PrintJobException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" /> class.</summary>
    </member>
    <member name="M:System.Printing.PrintJobException.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" /> class that provides a specific error code and error condition.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
    </member>
    <member name="M:System.Printing.PrintJobException.#ctor(System.Int32,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" /> class that provides a specific error code and error condition, including the underlying cause of the exception.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="innerException">The underlying error that caused the <see cref="T:System.Printing.PrintJobException" />.</param>
    </member>
    <member name="M:System.Printing.PrintJobException.#ctor(System.Int32,System.String,System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" /> class that provides a specific error code, error condition, print queue name, job name, and job ID.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="printQueueName">The name of the print queue hosting the print job that caused the exception.</param>
      <param name="jobName">The name of the print job that caused the exception. </param>
      <param name="jobId">The ID number of the print job that caused the exception. </param>
    </member>
    <member name="M:System.Printing.PrintJobException.#ctor(System.Int32,System.String,System.String,System.String,System.Int32,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" /> class that provides a specific message, error code, error condition, print queue name, job name, and job ID.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="printQueueName">The name of the print queue hosting the print job that caused the exception.</param>
      <param name="jobName">The name of the print job that caused the exception. </param>
      <param name="jobId">The ID number of the print job that caused the exception. </param>
      <param name="innerException">The underlying cause of the exception.</param>
    </member>
    <member name="M:System.Printing.PrintJobException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" /> class that provides specific <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. This constructor is protected.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, including source and destination, of the serialized stream.</param>
    </member>
    <member name="M:System.Printing.PrintJobException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" /> class that provides a specific error condition.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
    </member>
    <member name="M:System.Printing.PrintJobException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" /> class that provides a specific error condition, including the cause of the exception.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="innerException">The underlying error that caused the <see cref="T:System.Printing.PrintJobException" />.</param>
    </member>
    <member name="M:System.Printing.PrintJobException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets the data that is used to serialize the object and gets the context of the serialized stream.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, including source and destination, of the serialized stream.</param>
    </member>
    <member name="P:System.Printing.PrintJobException.JobId">
      <summary>Gets the ID number of the print job that caused the exception.</summary>
      <returns>An <see cref="T:System.Int32" /> that identifies the print job.</returns>
    </member>
    <member name="P:System.Printing.PrintJobException.JobName">
      <summary>Gets the name of the print job that caused the exception.</summary>
      <returns>A <see cref="T:System.String" /> that names the print job.</returns>
    </member>
    <member name="P:System.Printing.PrintJobException.PrintQueueName">
      <summary>Gets the name of the <see cref="T:System.Printing.PrintQueue" /> that was hosting the print job when the exception was thrown.</summary>
      <returns>A <see cref="T:System.String" /> that specifies the name of the <see cref="T:System.Printing.PrintQueue" />.</returns>
    </member>
    <member name="T:System.Printing.PrintQueueException">
      <summary>The exception that is thrown when an error condition prevents the accessing or creation of a <see cref="T:System.Printing.PrintQueue" />.</summary>
    </member>
    <member name="M:System.Printing.PrintQueueException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" /> class.</summary>
    </member>
    <member name="M:System.Printing.PrintQueueException.#ctor(System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" /> class that provides a specific error code, error condition, and printer name.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="printerName">The name of the printer that was being accessed when the error occurred.</param>
    </member>
    <member name="M:System.Printing.PrintQueueException.#ctor(System.Int32,System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" /> class that provides a specific printer name, error code, and error condition, including the underlying cause of the exception.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="printerName">The name of the printer that was being accessed when the error occurred.</param>
      <param name="innerException">The underlying error condition that caused the <see cref="T:System.Printing.PrintQueueException" />.</param>
    </member>
    <member name="M:System.Printing.PrintQueueException.#ctor(System.Int32,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" /> class that provides a specific error code, error condition, printer name, and printer message.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="printerName">The name of the printer that was being accessed when the error occurred.</param>
      <param name="printerMessage">The exception message that was sent by the printer driver or unmanaged print system component that triggered the exception.</param>
    </member>
    <member name="M:System.Printing.PrintQueueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" /> class that provides specific <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. This constructor is protected.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, including source and destination, of the serialized stream.</param>
    </member>
    <member name="M:System.Printing.PrintQueueException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" /> class that provides a specific error condition.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
    </member>
    <member name="M:System.Printing.PrintQueueException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" /> class that provides a specific error condition, including the underlying cause of the exception.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="innerException">The underlying error condition that caused the <see cref="T:System.Printing.PrintQueueException" />.</param>
    </member>
    <member name="M:System.Printing.PrintQueueException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets the data that is used to serialize the object and gets the context of the serialized stream.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, including source and destination, of the serialized stream.</param>
    </member>
    <member name="P:System.Printing.PrintQueueException.PrinterName">
      <summary>Gets the name of the printer that was being accessed when the exception was thrown.</summary>
      <returns>A <see cref="T:System.String" /> that names the printer.</returns>
    </member>
    <member name="T:System.Printing.PrintServerException">
      <summary>The exception that occurs when an error condition prevents the accessing or creation of a <see cref="T:System.Printing.PrintServer" />.</summary>
    </member>
    <member name="M:System.Printing.PrintServerException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServerException" /> class.</summary>
    </member>
    <member name="M:System.Printing.PrintServerException.#ctor(System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServerException" /> class that provides a specific error code, error condition, and print server name.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="serverName">The name of the print server that was being accessed when the error condition occurred.</param>
    </member>
    <member name="M:System.Printing.PrintServerException.#ctor(System.Int32,System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServerException" /> class that provides a specific print server name, error code, and error condition, including the underlying cause of the exception.</summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="serverName">The name of the print server that was being accessed when the error condition occurred.</param>
      <param name="innerException">The underlying condition that caused the <see cref="T:System.Printing.PrintServerException" />.</param>
    </member>
    <member name="M:System.Printing.PrintServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServerException" /> class that provides specific <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. This constructor is protected.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, including source and destination, of the serialized stream.</param>
    </member>
    <member name="M:System.Printing.PrintServerException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServerException" /> class that provides a specific error condition.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
    </member>
    <member name="M:System.Printing.PrintServerException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServerException" /> class that provides a specific error condition, including the underlying cause of the exception. </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="innerException">The underlying error condition that caused the <see cref="T:System.Printing.PrintServerException" />.</param>
    </member>
    <member name="M:System.Printing.PrintServerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets the data that is used to serialize the object and gets the context of the serialized stream.</summary>
      <param name="info">The data that is used to serialize the object.</param>
      <param name="context">The context, including source and destination, of the serialized stream.</param>
    </member>
    <member name="P:System.Printing.PrintServerException.ServerName">
      <summary>Gets the name of the print server that was being accessed when the exception was thrown.</summary>
      <returns>A <see cref="T:System.String" /> that names the print server.</returns>
    </member>
    <member name="T:System.Printing.PrintSystemException">
      <summary>The exception that occurs when an error condition prevents accessing or creating a <see cref="T:System.Printing.PrintSystemObject" />. </summary>
    </member>
    <member name="M:System.Printing.PrintSystemException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" /> class. </summary>
    </member>
    <member name="M:System.Printing.PrintSystemException.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" /> class that provides a specific error code and error message. </summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A string that describes the error condition.</param>
    </member>
    <member name="M:System.Printing.PrintSystemException.#ctor(System.Int32,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" /> class that provides a specific error code and error message, including the underlying cause of the exception. </summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A string that describes the error condition.</param>
      <param name="innerException">The underlying error condition that caused the exception.</param>
    </member>
    <member name="M:System.Printing.PrintSystemException.#ctor(System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" /> class that provides a specific error code, error message, and printer message. </summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> interpreted as an HRESULT.</param>
      <param name="message">A string that describes the error condition.</param>
      <param name="printerMessage">The exception message sent by the printer driver or unmanaged print system component that caused the exception.</param>
    </member>
    <member name="M:System.Printing.PrintSystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" /> class that provides specific serialization information and streaming context.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, including source and destination, of the serialized stream.</param>
    </member>
    <member name="M:System.Printing.PrintSystemException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" /> class that provides a specific error message. </summary>
      <param name="message">A string that describes the error condition.</param>
    </member>
    <member name="M:System.Printing.PrintSystemException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" /> class that provides a specific error message, including the underlying cause of the exception. </summary>
      <param name="message">A string that describes the error condition.</param>
      <param name="innerException">The underlying error condition that caused the exception.</param>
    </member>
    <member name="M:System.Printing.PrintSystemException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets the data that is used to serialize the object and gets the context of the serialized stream. </summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, including source and destination, of the serialized stream.</param>
    </member>
    <member name="T:System.Printing.PrintTicket">
      <summary>Defines the settings of a print job.</summary>
    </member>
    <member name="M:System.Printing.PrintTicket.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintTicket" /> class.</summary>
    </member>
    <member name="M:System.Printing.PrintTicket.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintTicket" /> class by using an XML stream (that contains a PrintTicket document) that complies with the XML Print Schema.</summary>
      <param name="xmlStream">An XML stream that describes a print job and conforms to the Print Schema.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlStream" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="xmlStream" /> is not valid XML.</exception>
    </member>
    <member name="M:System.Printing.PrintTicket.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Printing.PrintTicket" />, making deep copies of this object's values. </summary>
      <returns>A modifiable clone of the current object. </returns>
    </member>
    <member name="P:System.Printing.PrintTicket.Collation">
      <summary>Gets or sets a value indicating whether the printer collates its output.</summary>
      <returns>A <see cref="T:System.Printing.Collation" /> value indicating whether the printer collates its output.  </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.Collation" /> enumeration.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.CopyCount">
      <summary>Gets or sets the number of copies for the print job.</summary>
      <returns>A nullable <see cref="T:System.Int32" /> value that specifies how many copies to print. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value less than 1.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.DeviceFontSubstitution">
      <summary>Gets or sets a value indicating whether the printer substitutes device-based fonts for computer-based fonts on the print job.</summary>
      <returns>A <see cref="T:System.Printing.DeviceFontSubstitution" /> value indicating whether the device substitutes device-based fonts for computer-based fonts for the current print job. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.DeviceFontSubstitution" /> enumeration.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.Duplexing">
      <summary>Gets or sets a value indicating what kind of two-sided printing, if any, the printer uses for the print job.</summary>
      <returns>A <see cref="T:System.Printing.Duplexing" /> value indicating what sort of two-sided printing, if any, the printer uses for the print job. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.Duplexing" /> enumeration.</exception>
    </member>
    <member name="M:System.Printing.PrintTicket.GetXmlStream">
      <summary>Returns a <see cref="T:System.IO.MemoryStream" /> object that represents the property values of a <see cref="T:System.Printing.PrintTicket" /> as an XML stream that conforms to the Print Schema.</summary>
      <returns>A <see cref="T:System.IO.MemoryStream" /> object that describes the print ticket with XML that conforms to the Print Schema.</returns>
    </member>
    <member name="P:System.Printing.PrintTicket.InputBin">
      <summary>Gets or sets a value indicating what input bin (paper tray) to use.</summary>
      <returns>An <see cref="T:System.Printing.InputBin" /> value indicating what input tray is used and whether it is chosen manually or automatically. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.InputBin" /> enumeration.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.OutputColor">
      <summary>Gets or sets a value indicating how the printer handles content that has color or shades of gray.</summary>
      <returns>An <see cref="T:System.Printing.OutputColor" /> value indicating how the printer handles content that has color or shades of gray. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.OutputColor" /> enumeration.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.OutputQuality">
      <summary>Gets or sets a value indicating the quality of output for the print job.</summary>
      <returns>An <see cref="T:System.Printing.OutputQuality" /> value that specifies the needed level of quality. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.OutputQuality" /> enumeration.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.PageBorderless">
      <summary>Gets or sets a value indicating whether the device prints content to the edge of the media or leaves an unprinted margin around the edge.</summary>
      <returns>A <see cref="T:System.Printing.PageBorderless" /> value that specifies whether the printer uses borderless printing.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PageBorderless" /> enumeration.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.PageMediaSize">
      <summary>Gets or sets the page size for the paper (or other media) that a printer uses for a print job.</summary>
      <returns>A <see cref="T:System.Printing.PageMediaSize" /> object that represents the page size by using a name, dimensions, or both.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property with a <see cref="T:System.Printing.PageMediaSize" /> object that has at least one null property. - or -Calling code has attempted to set the property with a <see cref="T:System.Printing.PageMediaSize" /> object whose <see cref="P:System.Printing.PageMediaSize.PageMediaSizeName" /> property is set to a value that is not in the <see cref="T:System.Printing.PageMediaSizeName" /> enumeration.- or -Calling code has attempted to set the property with a <see cref="T:System.Printing.PageMediaSize" /> object whose <see cref="P:System.Printing.PageMediaSize.Width" /> or <see cref="P:System.Printing.PageMediaSize.Height" /> property is set to a value less than 1.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.PageMediaType">
      <summary>Gets or sets a value indicating what sort of paper or media the printer uses for the print job.</summary>
      <returns>A <see cref="T:System.Printing.PageMediaType" /> value specifying the print media, such as card stock, label, plain, or photographic. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PageMediaType" /> enumeration.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.PageOrder">
      <summary>Gets or sets a value indicating whether the printer prints multiple pages back-to-front or front-to-back.</summary>
      <returns>A <see cref="T:System.Printing.PageOrder" /> value specifying last-page-first printing or first-page-first printing. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PageOrder" /> enumeration.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.PageOrientation">
      <summary>Gets or sets a value indicating how the page content is oriented for printing. </summary>
      <returns>A <see cref="T:System.Printing.PageOrientation" /> value specifying how page content is oriented, for example, <see cref="F:System.Printing.PageOrientation.Landscape" /> or <see cref="F:System.Printing.PageOrientation.ReversePortrait" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PageOrientation" /> enumeration.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.PageResolution">
      <summary>Gets or sets the level of page resolution that the printer uses for a print job.</summary>
      <returns>A <see cref="T:System.Printing.PageResolution" /> value that represents the resolution as a qualitative value, a dots-per-inch value, or both. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property with a <see cref="T:System.Printing.PageResolution" /> object that has at least one null property. - or -Calling code has attempted to set the property with a <see cref="T:System.Printing.PageMediaSize" /> object whose <see cref="P:System.Printing.PageResolution.QualitativeResolution" /> property is set to a value that is not in the <see cref="T:System.Printing.PageQualitativeResolution" /> enumeration.- or -Calling code has attempted to set the property with a <see cref="T:System.Printing.PageResolution" /> object whose <see cref="P:System.Printing.PageResolution.X" /> or <see cref="P:System.Printing.PageResolution.Y" /> property is set to a value less than 1.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.PageScalingFactor">
      <summary>Gets or sets the percentage by which the printer enlarges or reduces the print image on a page.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents a percentage. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is less than 1.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.PagesPerSheet">
      <summary>Gets or sets the number of pages that print on each printed side of a sheet of paper.</summary>
      <returns>A nullable <see cref="T:System.Int32" /> value that represents the number of pages that print on each printed side of a sheet of paper.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is less than 1.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.PagesPerSheetDirection">
      <summary>Gets or sets a value indicating how a printer arranges multiple pages that print on each side of a sheet of paper. </summary>
      <returns>A <see cref="T:System.Printing.PagesPerSheetDirection" /> value indicating how a printer presents multiple pages per sheet. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PagesPerSheetDirection" /> enumeration.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.PhotoPrintingIntent">
      <summary>Gets or sets a value indicating in qualitative terms the level of quality the printer uses to print a photograph. </summary>
      <returns>A <see cref="T:System.Printing.PhotoPrintingIntent" /> value indicating the level of photo quality.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PhotoPrintingIntent" /> enumeration.</exception>
    </member>
    <member name="E:System.Printing.PrintTicket.PropertyChanged">
      <summary>Occurs when any property of the <see cref="T:System.Printing.PrintTicket" /> changes. </summary>
    </member>
    <member name="M:System.Printing.PrintTicket.SaveTo(System.IO.Stream)">
      <summary>Saves the <see cref="T:System.Printing.PrintTicket" /> settings to a <see cref="T:System.IO.Stream" /> object by using an XML format that conforms to the Print Schema.</summary>
      <param name="outStream">The <see cref="T:System.IO.Stream" /> that holds the saved <see cref="T:System.Printing.PrintTicket" />. </param>
    </member>
    <member name="P:System.Printing.PrintTicket.Stapling">
      <summary>Gets or sets a value indicating whether, and where, a printer staples multiple pages. </summary>
      <returns>A <see cref="T:System.Printing.Stapling" /> value specifying how a printer staples the output. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.Stapling" /> enumeration.</exception>
    </member>
    <member name="P:System.Printing.PrintTicket.TrueTypeFontMode">
      <summary>Gets or sets a value indicating how the printer handles text that uses TrueType fonts.</summary>
      <returns>A <see cref="T:System.Printing.TrueTypeFontMode" /> value specifying how a printer handles TrueType fonts. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.TrueTypeFontMode" /> enumeration.</exception>
    </member>
    <member name="T:System.Printing.PrintTicketScope">
      <summary>Specifies whether a <see cref="T:System.Printing.PrintTicket" /> applies to an entire print job, one document within the print job, or just a page within the print job. </summary>
    </member>
    <member name="F:System.Printing.PrintTicketScope.PageScope">
      <summary>A single page.</summary>
    </member>
    <member name="F:System.Printing.PrintTicketScope.DocumentScope">
      <summary>A single document.</summary>
    </member>
    <member name="F:System.Printing.PrintTicketScope.JobScope">
      <summary>An entire print job.</summary>
    </member>
    <member name="T:System.Printing.Stapling">
      <summary>Specifies whether, and where, a printer staples a multi-page document.</summary>
    </member>
    <member name="F:System.Printing.Stapling.Unknown">
      <summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    </member>
    <member name="F:System.Printing.Stapling.SaddleStitch">
      <summary>Multiple staples along the fold line. Also called saddle-stitch stapling.</summary>
    </member>
    <member name="F:System.Printing.Stapling.StapleBottomLeft">
      <summary>A single staple in the lower-left corner.</summary>
    </member>
    <member name="F:System.Printing.Stapling.StapleBottomRight">
      <summary>A single staple in the lower-right corner.</summary>
    </member>
    <member name="F:System.Printing.Stapling.StapleDualLeft">
      <summary>Two staples along the left edge.</summary>
    </member>
    <member name="F:System.Printing.Stapling.StapleDualRight">
      <summary>Two staples along the right edge.</summary>
    </member>
    <member name="F:System.Printing.Stapling.StapleDualTop">
      <summary>Two staples along the upper edge.</summary>
    </member>
    <member name="F:System.Printing.Stapling.StapleDualBottom">
      <summary>Two staples along the lower edge.</summary>
    </member>
    <member name="F:System.Printing.Stapling.StapleTopLeft">
      <summary>A single staple in the upper-left corner.</summary>
    </member>
    <member name="F:System.Printing.Stapling.StapleTopRight">
      <summary>A single staple in the upper-right corner.</summary>
    </member>
    <member name="F:System.Printing.Stapling.None">
      <summary>The document is not stapled.</summary>
    </member>
    <member name="T:System.Printing.TrueTypeFontMode">
      <summary>Specifies how a printer handles text that is formatted with a TrueType font. </summary>
    </member>
    <member name="F:System.Printing.TrueTypeFontMode.Unknown">
      <summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    </member>
    <member name="F:System.Printing.TrueTypeFontMode.Automatic">
      <summary>The printer driver decides the best method for handling TrueType fonts.</summary>
    </member>
    <member name="F:System.Printing.TrueTypeFontMode.DownloadAsOutlineFont">
      <summary>The printer driver downloads the TrueType font as an outline font.</summary>
    </member>
    <member name="F:System.Printing.TrueTypeFontMode.DownloadAsRasterFont">
      <summary>The printer driver creates a raster font for each size of the TrueType font that it needs and downloads them all.</summary>
    </member>
    <member name="F:System.Printing.TrueTypeFontMode.DownloadAsNativeTrueTypeFont">
      <summary>The printer driver downloads the TrueType font.</summary>
    </member>
    <member name="F:System.Printing.TrueTypeFontMode.RenderAsBitmap">
      <summary>The printer driver downloads each area of text as a graphic.</summary>
    </member>
    <member name="T:System.Printing.ValidationResult">
      <summary>Represents a merged <see cref="T:System.Printing.PrintTicket" /> that is guaranteed to be viable, with a report of any settings that were changed to make it viable. </summary>
    </member>
    <member name="P:System.Printing.ValidationResult.ConflictStatus">
      <summary>Gets a value indicating whether a conflict occurred between the functionality supported by the printer and the functionality requested in the initial merger of two source <see cref="T:System.Printing.PrintTicket" />s.</summary>
      <returns>One of the <see cref="T:System.Printing.ConflictStatus" /> values that indicates either that no conflict occurred or that at least one conflict occurred but was resolved. The default is <see cref="F:System.Printing.ConflictStatus.NoConflict" />. </returns>
    </member>
    <member name="M:System.Printing.ValidationResult.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Printing.ValidationResult" /> is equal to the current <see cref="T:System.Printing.ValidationResult" />.</summary>
      <returns>true if the <see cref="T:System.Printing.ValidationResult" /> objects are equal; otherwise, false. false is also returned if the object passed is not a <see cref="T:System.Printing.ValidationResult" />.</returns>
      <param name="o">The <see cref="T:System.Printing.ValidationResult" /> to compare.</param>
    </member>
    <member name="M:System.Printing.ValidationResult.GetHashCode">
      <summary>Gets the hash code associated with the <see cref="T:System.Printing.ValidationResult" /> and its <see cref="T:System.Printing.PrintTicket" /> and print stream.</summary>
      <returns>A hash code for the current <see cref="T:System.Printing.ValidationResult" />.</returns>
    </member>
    <member name="M:System.Printing.ValidationResult.op_Equality(System.Printing.ValidationResult,System.Printing.ValidationResult)">
      <summary>Determines if the specified <see cref="T:System.Printing.ValidationResult" /> objects are equal.</summary>
      <returns>true if the <see cref="T:System.Printing.ValidationResult" /> objects are equal; otherwise, false.</returns>
      <param name="a">The first <see cref="T:System.Printing.ValidationResult" /> to compare.</param>
      <param name="b">The second <see cref="T:System.Printing.ValidationResult" /> to compare.</param>
    </member>
    <member name="M:System.Printing.ValidationResult.op_Inequality(System.Printing.ValidationResult,System.Printing.ValidationResult)">
      <summary>Determines if the specified <see cref="T:System.Printing.ValidationResult" /> objects are not equal.</summary>
      <returns>true if the <see cref="T:System.Printing.ValidationResult" /> objects are not equal; otherwise, false.</returns>
      <param name="a">The first <see cref="T:System.Printing.ValidationResult" /> to compare.</param>
      <param name="b">The second <see cref="T:System.Printing.ValidationResult" /> to compare.</param>
    </member>
    <member name="P:System.Printing.ValidationResult.ValidatedPrintTicket">
      <summary>Gets a <see cref="T:System.Printing.PrintTicket" /> object that results from the merging of two <see cref="T:System.Printing.PrintTicket" /> objects, which might have been adjusted to ensure its viability.</summary>
      <returns>A valid and viable <see cref="T:System.Printing.PrintTicket" />. The default is null. </returns>
    </member>
    <member name="T:System.Printing.Interop.BaseDevModeType">
      <summary>Specifies the type of default DEVMODE structure to use as the base DEVMODE for conversions of managed <see cref="T:System.Printing.PrintTicket" /> objects to unmanaged DEVMODE structures. </summary>
    </member>
    <member name="F:System.Printing.Interop.BaseDevModeType.UserDefault">
      <summary>The user's default DEVMODE structure. </summary>
    </member>
    <member name="F:System.Printing.Interop.BaseDevModeType.PrinterDefault">
      <summary>The printer's default DEVMODE structure. </summary>
    </member>
    <member name="T:System.Printing.Interop.PrintTicketConverter">
      <summary>Converts managed <see cref="T:System.Printing.PrintTicket" /> objects to unmanaged Graphics Device Interface (GDI) DEVMODE structures, and vice versa. </summary>
    </member>
    <member name="M:System.Printing.Interop.PrintTicketConverter.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.Interop.PrintTicketConverter" /> class for the specified printer. </summary>
      <param name="deviceName">The name of the printer that is bound to the new <see cref="T:System.Printing.Interop.PrintTicketConverter" /> instance.</param>
      <param name="clientPrintSchemaVersion">The Print Schema version to use in the <see cref="T:System.Printing.PrintTicket" /> and DEVMODE conversion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="deviceName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="clientPrintSchemaVersion" /> is 0 or less.</exception>
      <exception cref="T:System.Printing.PrintQueueException">The converter was unable to bind to <paramref name="deviceName" />.</exception>
    </member>
    <member name="M:System.Printing.Interop.PrintTicketConverter.ConvertDevModeToPrintTicket(System.Byte[])">
      <summary>Converts the specified DEVMODE structure to a managed code <see cref="T:System.Printing.PrintTicket" />. </summary>
      <returns>The new managed <see cref="T:System.Printing.PrintTicket" />.</returns>
      <param name="devMode">A <see cref="T:System.Byte" /> array that contains the DEVMODE structure.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Printing.Interop.PrintTicketConverter" /> is already disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="devMode" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The content of <paramref name="devMode" /> is not well-formed.</exception>
      <exception cref="T:System.Printing.PrintQueueException">The conversion failed.</exception>
    </member>
    <member name="M:System.Printing.Interop.PrintTicketConverter.ConvertDevModeToPrintTicket(System.Byte[],System.Printing.PrintTicketScope)">
      <summary>Converts the specified DEVMODE structure to a managed code <see cref="T:System.Printing.PrintTicket" /> that has the specified scope.</summary>
      <returns>The new <see cref="T:System.Printing.PrintTicket" />.</returns>
      <param name="devMode">A <see cref="T:System.Byte" /> buffer containing the DEVMODE structure to convert.</param>
      <param name="scope">A <see cref="T:System.Printing.PrintTicketScope" /> value that specifies whether the new <see cref="T:System.Printing.PrintTicket" /> applies to a page, a document, or an entire print job.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Printing.Interop.PrintTicketConverter" /> is already disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="devMode" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The content of <paramref name="devMode" /> is not well-formed.</exception>
      <exception cref="T:System.Printing.PrintQueueException">The conversion failed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="scope" /> is not a valid <see cref="T:System.Printing.PrintTicketScope" /> value.</exception>
    </member>
    <member name="M:System.Printing.Interop.PrintTicketConverter.ConvertPrintTicketToDevMode(System.Printing.PrintTicket,System.Printing.Interop.BaseDevModeType)">
      <summary>Converts the specified managed <see cref="T:System.Printing.PrintTicket" /> to an unmanaged DEVMODE structure that is based on the DEVMODE structure identified by the <see cref="T:System.Printing.Interop.BaseDevModeType" />.</summary>
      <returns>A <see cref="T:System.Byte" /> array that contains the new DEVMODE structure.</returns>
      <param name="printTicket">The <see cref="T:System.Printing.PrintTicket" /> to convert.</param>
      <param name="baseType">A value that identifies whether to use the user default or printer default DEVMODE as the base DEVMODE.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Printing.Interop.PrintTicketConverter" /> is already disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="printTicket" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The content of <paramref name="printTicket" /> is not well-formed.</exception>
      <exception cref="T:System.Printing.PrintQueueException">The conversion failed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseType" /> is not a valid <see cref="T:System.Printing.Interop.BaseDevModeType" /> value.</exception>
    </member>
    <member name="M:System.Printing.Interop.PrintTicketConverter.ConvertPrintTicketToDevMode(System.Printing.PrintTicket,System.Printing.Interop.BaseDevModeType,System.Printing.PrintTicketScope)">
      <summary>Converts the specified managed code <see cref="T:System.Printing.PrintTicket" /> with the specified scope, into an unmanaged DEVMODE structure that is based on the DEVMODE structure identified by the <see cref="T:System.Printing.Interop.BaseDevModeType" />.</summary>
      <returns>A <see cref="T:System.Byte" /> buffer that represents the new DEVMODE structure.</returns>
      <param name="printTicket">The <see cref="T:System.Printing.PrintTicket" /> to convert.</param>
      <param name="baseType">A value that identifies whether to use the user default or printer default DEVMODE as the base DEVMODE.</param>
      <param name="scope">A <see cref="T:System.Printing.PrintTicketScope" /> value that specifies whether the conversion of the <see cref="T:System.Printing.PrintTicket" /> should be done at the scope of a page, a document, or an entire print job.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Printing.Interop.PrintTicketConverter" /> is already disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="printTicket" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The content of <paramref name="printTicket" /> is not well-formed.</exception>
      <exception cref="T:System.Printing.PrintQueueException">The conversion failed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseType" /> is not a valid <see cref="T:System.Printing.Interop.BaseDevModeType" /> value.-or-The <paramref name="scope" /> is not a valid <see cref="T:System.Printing.PrintTicketScope" /> value.</exception>
    </member>
    <member name="M:System.Printing.Interop.PrintTicketConverter.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Printing.Interop.PrintTicketConverter" />. </summary>
    </member>
    <member name="P:System.Printing.Interop.PrintTicketConverter.MaxPrintSchemaVersion">
      <summary>Gets the maximum Print Schema version that <see cref="T:System.Printing.Interop.PrintTicketConverter" /> can support. </summary>
      <returns>The maximum Print Schema version that <see cref="T:System.Printing.Interop.PrintTicketConverter" /> can support.</returns>
    </member>
    <member name="M:System.Printing.Interop.PrintTicketConverter.System#IDisposable#Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Printing.Interop.PrintTicketConverter" /> class.</summary>
    </member>
    <member name="T:System.Windows.Xps.XpsException">
      <summary>Serves as the base class for exceptions that are thrown by the XML Paper Specification (XPS) packaging and serialization APIs. </summary>
    </member>
    <member name="M:System.Windows.Xps.XpsException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsException" /> class. </summary>
    </member>
    <member name="M:System.Windows.Xps.XpsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsException" /> class that provides specific <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. This constructor is protected.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, which includes source and destination, of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsException" /> class that provides a specific error condition.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsException" /> class that provides a specific error condition and includes the cause of the exception. </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="innerException">The underlying error that caused the <see cref="T:System.Windows.Xps.XpsException" />.</param>
    </member>
    <member name="T:System.Windows.Xps.XpsPackagingException">
      <summary>The exception that is thrown when reading, writing to, registering, or accessing in some other way an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />. </summary>
    </member>
    <member name="M:System.Windows.Xps.XpsPackagingException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsPackagingException" /> class. </summary>
    </member>
    <member name="M:System.Windows.Xps.XpsPackagingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsPackagingException" /> class that provides specific <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. This constructor is protected.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, which includes source and destination, of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsPackagingException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsPackagingException" /> class that provides a specific error condition. </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsPackagingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsPackagingException" /> class that provides a specific error condition and includes the cause of the exception. </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="innerException">The underlying error that caused the <see cref="T:System.Windows.Xps.XpsPackagingException" />.</param>
    </member>
    <member name="T:System.Windows.Xps.XpsSerializationException">
      <summary>The exception that is thrown for XML Paper Specification (XPS) document serialization errors. </summary>
    </member>
    <member name="M:System.Windows.Xps.XpsSerializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsSerializationException" /> class. </summary>
    </member>
    <member name="M:System.Windows.Xps.XpsSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsSerializationException" /> class that provides specific <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. This constructor is protected.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, which includes the source and destination, of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsSerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsSerializationException" /> class that provides a specific error condition. </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsSerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsSerializationException" /> class that provides a specific error condition and includes the cause of the exception. </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="innerException">The underlying error that caused the exception.</param>
    </member>
    <member name="T:System.Windows.Xps.Packaging.IDocumentStructureProvider">
      <summary>Defines a method for adding the DocumentStructure part of XML Paper Specification (XPS) to an XPS package.</summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IDocumentStructureProvider.AddDocumentStructure">
      <summary>Adds theDocumentStructure part of XML Paper Specification (XPS) to an XPS package.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsStructure" /> that represents the DocumentStructure part of an XPS package.</returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.IStoryFragmentProvider">
      <summary>Defines a method for adding the <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" /> part of the markup to an XPS package.</summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IStoryFragmentProvider.AddStoryFragment">
      <summary>Adds a <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" /> element to an XPS package.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsStructure" /> that represents a <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" /> element in an XPS package.</returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.IXpsFixedDocumentReader">
      <summary>Defines methods for reading the parts of a <see cref="T:System.Windows.Documents.FixedDocument" /> and also for limited types of writing to the document.</summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedDocumentReader.AddSignatureDefinition(System.Windows.Xps.Packaging.XpsSignatureDefinition)">
      <summary>Adds the specified <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" /> to the <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <param name="signatureDefinition">The definition that is added.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedDocumentReader.CommitSignatureDefinition">
      <summary>Flushes the package <see cref="T:System.IO.Stream" /> and also commits an <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" /> to the package.</summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentReader.DocumentNumber">
      <summary>Gets the zero-based position of the document in the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that represents the document location in the sequence.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentReader.DocumentStructure">
      <summary>Gets the DocumentStructure part, if one exists, of the <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsStructure" /> that represents the DocumentStructure element, if one exists, and its child elements. </returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentReader.FixedPages">
      <summary>Gets a collection of <see cref="T:System.Windows.Documents.FixedPage" /> readers, one reader for each page in the <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <returns>A collection of fixed page readers, one reader for each page in the <see cref="T:System.Windows.Documents.FixedDocument" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedDocumentReader.GetFixedPage(System.Uri)">
      <summary>Gets a reader for the <see cref="T:System.Windows.Documents.FixedPage" /> with the specified uniform resource identifier (URI). </summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.IXpsFixedPageReader" /> for the page. </returns>
      <param name="pageSource">The URI of the page.</param>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentReader.PrintTicket">
      <summary>Gets the <see cref="T:System.Printing.PrintTicket" />, if one exists, that is associated with the <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintTicket" /> that contains the default printing options for the document; or null if no print ticket exists for the document. </returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedDocumentReader.RemoveSignatureDefinition(System.Windows.Xps.Packaging.XpsSignatureDefinition)">
      <summary>Removes the specified <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" /> from the <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <param name="signatureDefinition">The definition that is removed.</param>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentReader.SignatureDefinitions">
      <summary>Gets a collection of all the signature definitions that are associated with the <see cref="T:System.Windows.Documents.FixedDocument" />. </summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of signature definitions, typically one for every person who signed or will sign the document.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentReader.Thumbnail">
      <summary>Gets the thumbnail image, if a thumbnail exists, that is associated with the <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" /> that represents the image. </returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentReader.Uri">
      <summary>Gets the uniform resource identifier (URI) of the <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <returns>A <see cref="T:System.Uri" /> that represents the URI for the document. </returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader">
      <summary>Defines methods for reading the parts of a <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader.FixedDocuments">
      <summary>Gets a collection of <see cref="T:System.Windows.Documents.FixedDocument" /> readers for each document in a <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
      <returns>A collection of <see cref="T:System.Windows.Documents.FixedDocument" /> readers, one for each document in a <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader.GetFixedDocument(System.Uri)">
      <summary>Gets a reader for the <see cref="T:System.Windows.Documents.FixedDocument" /> with the specified uniform resource identifier (URI). </summary>
      <param name="documentSource">The URI of the fixed document.</param>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader.PrintTicket">
      <summary>Gets the <see cref="T:System.Printing.PrintTicket" />, if one exists, that is associated with the <see cref="T:System.Windows.Documents.FixedDocument" />. </summary>
      <returns>A <see cref="T:System.Printing.PrintTicket" /> that contains the default printing options for the sequence; or null, if no print ticket exists for the document. </returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader.Thumbnail">
      <summary>Gets the thumbnail image, if one exists, that is associated with the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" /> that represents the image. </returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader.Uri">
      <summary>Gets the uniform resource identifier (URI) of the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
      <returns>A <see cref="T:System.Uri" /> that represents the URI for the sequence.</returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceWriter">
      <summary>Defines methods and properties for writing a <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceWriter.AddFixedDocument">
      <summary>Adds a new <see cref="T:System.Windows.Documents.FixedDocument" /> to the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
      <returns>A writer for outputting the new <see cref="T:System.Windows.Documents.FixedDocument" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceWriter.AddThumbnail(System.Windows.Xps.Packaging.XpsImageType)">
      <summary>Adds an <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" /> image for the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
      <returns>The new <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" /> for the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</returns>
      <param name="imageType">The image type to write. See Remarks for examples.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceWriter.Commit">
      <summary>Flushes and closes the <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> writer.</summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceWriter.PrintTicket">
      <summary>Sets a <see cref="T:System.Printing.PrintTicket" /> for the <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> that is being written.</summary>
      <returns>A <see cref="T:System.Printing.PrintTicket" /> that represents a default printing configuration for the sequence.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceWriter.Uri">
      <summary>Gets the URI of the <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> that is being written.</summary>
      <returns>The URI of the <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> that is being written.</returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.IXpsFixedDocumentWriter">
      <summary>Defines methods and properties for writing a <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedDocumentWriter.AddFixedPage">
      <summary>Adds a new <see cref="T:System.Windows.Documents.FixedPage" /> to the <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <returns>A writer for outputting the new <see cref="T:System.Windows.Documents.FixedPage" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedDocumentWriter.AddThumbnail(System.Windows.Xps.Packaging.XpsImageType)">
      <summary>Adds an <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" /> image for the <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <returns>The new <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" /> for the <see cref="T:System.Windows.Documents.FixedDocument" />.</returns>
      <param name="imageType">The image type of the thumbnail to add.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedDocumentWriter.Commit">
      <summary>Flushes and closes the <see cref="T:System.Windows.Documents.FixedDocument" /> writer.</summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentWriter.DocumentNumber">
      <summary>Gets the zero-based position of the <see cref="T:System.Windows.Documents.FixedDocument" /> in the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
      <returns>The zero-based position of the <see cref="T:System.Windows.Documents.FixedDocument" /> in the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentWriter.PrintTicket">
      <summary>Sets default print options for the <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedDocumentWriter.Uri">
      <summary>Gets the URI of the <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <returns>The URI of the <see cref="T:System.Windows.Documents.FixedDocument" />.</returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.IXpsFixedPageReader">
      <summary>Defines methods for reading the parts of a <see cref="T:System.Windows.Documents.FixedPage" />.</summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageReader.ColorContexts">
      <summary>Gets a collection of all the color contexts on the page. </summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that includes every <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" /> that is on the page.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageReader.Fonts">
      <summary>Gets a collection of all the fonts that are used on the page.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that includes every <see cref="T:System.Windows.Xps.Packaging.XpsFont" /> that is on the page.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageReader.GetColorContext(System.Uri)">
      <summary>Gets the color context for the resource that has the specified uniform resource identifier (URI).</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" /> for the resource.</returns>
      <param name="uri">The URI of the resource.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageReader.GetFont(System.Uri)">
      <summary>Gets the font that has the specified uniform resource identifier (URI).</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsFont" />.</returns>
      <param name="uri">The URI of the font.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageReader.GetImage(System.Uri)">
      <summary>Gets the image that has the specified uniform resource identifier (URI).</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsImage" />.</returns>
      <param name="uri">The URI of the image.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageReader.GetResource(System.Uri)">
      <summary>Gets the resource that has the specified uniform resource identifier (URI).</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsResource" />.</returns>
      <param name="resourceUri">The URI of the resource.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageReader.GetResourceDictionary(System.Uri)">
      <summary>Gets the resource dictionary that has the specified uniform resource identifier (URI).</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />.</returns>
      <param name="uri">The URI of the resource dictionary.</param>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageReader.Images">
      <summary>Gets a collection of all the images on the page.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that includes every <see cref="T:System.Windows.Xps.Packaging.XpsImage" /> that is on the page.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageReader.PageNumber">
      <summary>Gets the page number.</summary>
      <returns>An <see cref="T:System.Int32" /> that represents the page number.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageReader.PrintTicket">
      <summary>Gets the <see cref="T:System.Printing.PrintTicket" />, if a ticket exists, that is associated with the <see cref="T:System.Windows.Documents.FixedPage" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintTicket" /> that contains the default printing options for the page; or null if no <see cref="T:System.Printing.PrintTicket" /> exists for the page.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageReader.ResourceDictionaries">
      <summary>Gets a collection of all the resource dictionaries for the page.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" /> objects.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageReader.StoryFragment">
      <summary>Gets the <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" /> part of the markup of an XPS package.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsStructure" /> that represents a <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" /> element in an XPS package.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageReader.Thumbnail">
      <summary>Gets the thumbnail image, if a thumbnail exists, that is associated with the <see cref="T:System.Windows.Documents.FixedPage" />.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" /> that represents the image.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageReader.Uri">
      <summary>Gets the uniform resource identifier (URI) of the <see cref="T:System.Windows.Documents.FixedPage" />.</summary>
      <returns>A <see cref="T:System.Uri" /> that represents the URI for the page.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageReader.XmlReader">
      <summary>Gets an <see cref="T:System.Xml.XmlReader" /> for the page.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> for the page.</returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.IXpsFixedPageWriter">
      <summary>Defines methods for writing <see cref="T:System.Windows.Documents.FixedPage" /> parts to an XPS document.</summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.AddColorContext">
      <summary>Adds a new <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" /> to the current page.</summary>
      <returns>The new color context resource that was added.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IDisposable.Dispose" /> has been called.</exception>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.AddFont">
      <summary>Adds a new <see cref="T:System.Windows.Xps.Packaging.XpsFont" /> to the current page.</summary>
      <returns>The new font resource that was added.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IDisposable.Dispose" /> has been called.</exception>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.AddFont(System.Boolean)">
      <summary>Adds a new obfuscated <see cref="T:System.Windows.Xps.Packaging.XpsFont" /> to the current page.</summary>
      <returns>The new font resource that was added.</returns>
      <param name="obfuscate">true to obfuscate the font; otherwise, false.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IDisposable.Dispose" /> has been called.</exception>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.AddFont(System.Boolean,System.Boolean)">
      <summary>Adds a new obfuscated or restricted <see cref="T:System.Windows.Xps.Packaging.XpsFont" /> to the current page.</summary>
      <returns>The new font resource that was added.</returns>
      <param name="obfuscate">true to obfuscate the font; otherwise, false.</param>
      <param name="addRestrictedRelationship">true to prevent modification of any text that uses the font; otherwise, false.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IDisposable.Dispose" /> has been called.</exception>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.AddImage(System.String)">
      <summary>Adds a new <see cref="T:System.Windows.Xps.Packaging.XpsImage" /> with a specified MIME type to the current page.</summary>
      <returns>The new image resource that was added to the page</returns>
      <param name="mimeType">The MIME type of the image to add.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IDisposable.Dispose" /> has been called.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mimeType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mimeType" /> is an empty string.</exception>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.AddImage(System.Windows.Xps.Packaging.XpsImageType)">
      <summary>Adds a new <see cref="T:System.Windows.Xps.Packaging.XpsImage" /> with a specified <see cref="T:System.Windows.Xps.Packaging.XpsImageType" /> to the current page.</summary>
      <returns>The new image resource that was added to the page</returns>
      <param name="imageType">The type of image to add to the page.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IDisposable.Dispose" /> has been called.</exception>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.AddResource(System.Type,System.Uri)">
      <summary>Adds a new <see cref="T:System.Windows.Xps.Packaging.XpsResource" /> to the current page.</summary>
      <returns>The new XML Paper Specification (XPS) resource that was added.</returns>
      <param name="resourceType">The type of resource to add.</param>
      <param name="resourceUri">The absolute path of the resource to add, or null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceType" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IDisposable.Dispose" /> has been called.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="resourceType" /> is an empty string.</exception>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.AddResourceDictionary">
      <summary>Adds a <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" /> to the page.</summary>
      <returns>The <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" /> that was added to the page.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IDisposable.Dispose" /> has been called.</exception>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.AddThumbnail(System.Windows.Xps.Packaging.XpsImageType)">
      <summary>Adds a thumbnail image of a specified <see cref="T:System.Windows.Xps.Packaging.XpsImageType" /> to the current page.</summary>
      <returns>The new thumbnail image resource that was added.</returns>
      <param name="imageType">The image type of the thumbnail image to add to the page.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.AddThumbnail(System.Windows.Xps.Packaging.XpsImageType)" /> has already been called to add an image thumbnail for this page.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IDisposable.Dispose" /> has been called.</exception>
    </member>
    <member name="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.Commit">
      <summary>Flushes and closes the fixed-page writer.</summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageWriter.LinkTargetStream">
      <summary>Gets a list of strings that identify the <see cref="T:System.Windows.Documents.LinkTarget" /> hyperlink points that are contained in the current page.</summary>
      <returns>A list of strings that identify the <see cref="T:System.Windows.Documents.LinkTarget" /> hyperlink points that are contained in the page.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageWriter.PageNumber">
      <summary>Gets the zero-based page number of this page.</summary>
      <returns>The zero-based page number of this page.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageWriter.PrintTicket">
      <summary>Sets the default printing options for the page.</summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageWriter.Uri">
      <summary>Gets the URI of the fixed page.</summary>
      <returns>The URI of the fixed page.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.IXpsFixedPageWriter.XmlWriter">
      <summary>Gets an <see cref="T:System.Xml.XmlWriter" /> for writing XML markup to the page. </summary>
      <returns>The <see cref="T:System.Xml.XmlWriter" /> for writing XML markup to the page.</returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.PackageInterleavingOrder">
      <summary>Provides values that specify the order in which the major parts of a package are streamed.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackageInterleavingOrder.None">
      <summary>The streaming order is specified by the packaging system.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackageInterleavingOrder.ResourceFirst">
      <summary>The streaming order is: resource, page, document, and document sequence. </summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackageInterleavingOrder.ResourceLast">
      <summary>The streaming order is: document sequence, document, page, and resource.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackageInterleavingOrder.ImagesLast">
      <summary>The streaming order is: resource (other than images), page, document, document sequence, and images.</summary>
    </member>
    <member name="T:System.Windows.Xps.Packaging.PackagingAction">
      <summary>Identifies the types of events that occur during the serialization of a package.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackagingAction.None">
      <summary>No action has been taken.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackagingAction.AddingDocumentSequence">
      <summary>A document sequence is being added.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackagingAction.DocumentSequenceCompleted">
      <summary>A document sequence has been added, but not necessarily committed.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackagingAction.AddingFixedDocument">
      <summary>A document is being added.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackagingAction.FixedDocumentCompleted">
      <summary>A document has been added, but not necessarily committed.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackagingAction.AddingFixedPage">
      <summary>A page is being added.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackagingAction.FixedPageCompleted">
      <summary>A page has been added, but not necessarily committed.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackagingAction.ResourceAdded">
      <summary>A resource has been added, but not necessarily committed.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackagingAction.FontAdded">
      <summary>A font has been added, but not necessarily committed.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackagingAction.ImageAdded">
      <summary>An image has been added, but not necessarily committed.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.PackagingAction.XpsDocumentCommitted">
      <summary>The document is committed.</summary>
    </member>
    <member name="T:System.Windows.Xps.Packaging.PackagingProgressEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Xps.Serialization.XpsPackagingPolicy.PackagingProgressEvent" /> event. </summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.PackagingProgressEventArgs.#ctor(System.Windows.Xps.Packaging.PackagingAction,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.PackagingProgressEventArgs" /> class. </summary>
      <param name="action">The action that the packaging process is currently performing.</param>
      <param name="numberCompleted">The number of simultaneous times that the specified <paramref name="action" /> occurred. </param>
    </member>
    <member name="P:System.Windows.Xps.Packaging.PackagingProgressEventArgs.Action">
      <summary>Gets a value that indicates what action is currently occurring in the packaging process. </summary>
      <returns>A <see cref="T:System.Windows.Xps.Packaging.PackagingAction" /> that represents the part of the packaging process that is currently occurring.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.PackagingProgressEventArgs.NumberCompleted">
      <summary>Gets the number of simultaneous times that the action that is identified in <see cref="P:System.Windows.Xps.Packaging.PackagingProgressEventArgs.Action" /> has occurred. </summary>
      <returns>An <see cref="T:System.Int32" /> that represents the number of simultaneous times that the action that is identified in <see cref="P:System.Windows.Xps.Packaging.PackagingProgressEventArgs.Action" /> has occurred. </returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.PackagingProgressEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Xps.Serialization.XpsPackagingPolicy.PackagingProgressEvent" />.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Xps.Packaging.SpotLocation">
      <summary>Represents the location to display a digital signature on an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.SpotLocation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.SpotLocation" /> class. </summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.SpotLocation.PageUri">
      <summary>Gets or sets the URI of the page on which to display the digital signature.</summary>
      <returns>The URI of the page on which to display the signature.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.SpotLocation.StartX">
      <summary>Gets or sets the X page coordinate for the digital signature.</summary>
      <returns>The X page coordinate for the digital signature.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.SpotLocation.StartY">
      <summary>Gets or sets the Y page coordinate for the digital signature.</summary>
      <returns>The Y page coordinate for the digital signature.</returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsColorContext">
      <summary>Represents the color context for a bitmap image. </summary>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsDigitalSignature">
      <summary>Represents a digital signature for an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />. </summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDigitalSignature.#ctor(System.IO.Packaging.PackageDigitalSignature,System.Windows.Xps.Packaging.XpsDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDigitalSignature" /> class.</summary>
      <param name="packageSignature">The associated digital signature for the package.</param>
      <param name="package">The associated package.</param>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDigitalSignature.DocumentPropertiesRestricted">
      <summary>Gets a value that indicates whether changing the properties of the document invalidates the digital signature. </summary>
      <returns>true if changing the properties of the document invalidates the signature; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDigitalSignature.Id">
      <summary>Gets the GUID of the signature.</summary>
      <returns>The globally unique identifier (GUID) of the signature.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDigitalSignature.IsCertificateAvailable">
      <summary>Gets a value that indicates whether the signer's X.509 certificate is contained in the document <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>true if the X.509 certificate of the signer is embedded in the document <see cref="T:System.IO.Packaging.Package" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDigitalSignature.SignatureOriginRestricted">
      <summary>Gets a value that indicates whether the digital signature is invalidated if someone else signs the package.</summary>
      <returns>true if the signature is invalidated if an additional digital signature is applied; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDigitalSignature.SignatureType">
      <summary>Gets a URL string that identifies the signature type.</summary>
      <returns>A URL string that identifies the signature type. The default signature type is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDigitalSignature.SignatureValue">
      <summary>Gets the encrypted hash value of the signature.</summary>
      <returns>A <see cref="T:System.Byte" /> array that contains the encrypted hash value of the signature.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDigitalSignature.SignedDocumentSequence">
      <summary>Gets the document sequence reader for the signed document sequence.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader" />; or null if not all valid XPS parts have been signed in the document.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDigitalSignature.SignerCertificate">
      <summary>Gets the X.509 certificate of the signer.</summary>
      <returns>The X.509 certificate of the signer; or null when there is no certificate embedded in the document package.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDigitalSignature.SigningTime">
      <summary>Gets the date and time when the signature was created.</summary>
      <returns>The date and time when the pages, document, or document sequence was signed.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDigitalSignature.Verify">
      <summary>Verifies the document digital signature against the X.509 certificate embedded in the XPS <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>One of the <see cref="T:System.IO.Packaging.VerifyResult" /> enumeration values that specify the result of the verification attempt.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Verifies the document digital signature against a specified X.509 certificate.</summary>
      <returns>One of the <see cref="T:System.IO.Packaging.VerifyResult" /> enumeration values that specify the result of the verification attempt.</returns>
      <param name="certificate">The certificate of authenticity for the signer.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDigitalSignature.VerifyCertificate">
      <summary>Verifies the X.509 certificate embedded in the package.</summary>
      <returns>A bitwise combination of the enumeration values that specify the result of the verification attempt.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDigitalSignature.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Verifies the specified X.509 certificate.</summary>
      <returns>A bitwise combination of the enumeration values that specify the result of the verification attempt.</returns>
      <param name="certificate">A certificate of authenticity.</param>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions">
      <summary>Specifies the parts of the XPS <see cref="T:System.IO.Packaging.Package" /> that are excluded from the range of a digital signature.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions.None">
      <summary>No parts are excluded.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions.CoreMetadata">
      <summary>The Core Properties part is excluded.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions.Annotations">
      <summary>The Annotations part is excluded.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions.SignatureOrigin">
      <summary>The Signature Origin part is excluded.</summary>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsDocument">
      <summary>Provides a <see cref="T:System.IO.Packaging.Package" /> that holds the content of an XPS document.</summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.#ctor(System.IO.Packaging.Package)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> class with access to a specified XML Paper Specification (XPS) <see cref="T:System.IO.Packaging.Package" /> and default interleaving, resource, and compression options. </summary>
      <param name="package">The target XPS package for the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.#ctor(System.IO.Packaging.Package,System.IO.Packaging.CompressionOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> class that is contained in a specified <see cref="T:System.IO.Packaging.Package" /> with specified default interleaving, resource, and compression options. </summary>
      <param name="package">The target package for the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</param>
      <param name="compressionOption">The package compression option.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.#ctor(System.IO.Packaging.Package,System.IO.Packaging.CompressionOption,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> class that is contained in a specified <see cref="T:System.IO.Packaging.Package" /> with the specified default interleaving, resource, and compression options. </summary>
      <param name="package">The target package for the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</param>
      <param name="compressionOption">The package compression option.</param>
      <param name="path">The uniform resource identifier (URI) for the document as a string.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.#ctor(System.String,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> class that is contained in a specified <see cref="T:System.IO.Packaging.Package" /> file with default interleaving, resource, and compression options. </summary>
      <param name="path">The path and file name of the target <see cref="T:System.IO.Packaging.Package" /> for the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</param>
      <param name="packageAccess">The file I/O mode in which to open the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.#ctor(System.String,System.IO.FileAccess,System.IO.Packaging.CompressionOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> class that is contained in a specified <see cref="T:System.IO.Packaging.Package" /> file with default interleaving, resource, and compression options. </summary>
      <param name="path">The path and file name of the target <see cref="T:System.IO.Packaging.Package" /> for the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</param>
      <param name="packageAccess">The file I/O mode in which to open the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</param>
      <param name="compressionOption">The package compression option.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.AddFixedDocumentSequence">
      <summary>Adds a root <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> to the package and returns a writer.</summary>
      <returns>The XML Paper Specification (XPS) fixed-document sequence writer for this <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.AddThumbnail(System.Windows.Xps.Packaging.XpsImageType)">
      <summary>Adds a thumbnail image to the package. </summary>
      <returns>The newly added <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" />. </returns>
      <param name="imageType">The format of the image.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.Close">
      <summary>Closes the XPS document <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDocument.CoreDocumentProperties">
      <summary>Gets the core <see cref="T:System.IO.Packaging.PackageProperties" /> of the XPS document.</summary>
      <returns>The core properties of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.CreateXpsDocumentWriter(System.Windows.Xps.Packaging.XpsDocument)">
      <summary>Creates an <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> for writing an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</summary>
      <returns>The <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> to use for writing the XML Paper Specification (XPS) document.</returns>
      <param name="xpsDocument">The XPS document to write. </param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> and optionally, releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDocument.FixedDocumentSequenceReader">
      <summary>Gets an <see cref="T:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader" /> for reading the document.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader" /> for reading the document.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.GetFixedDocumentSequence">
      <summary>Returns the fixed-document sequence at the root of the package.</summary>
      <returns>The <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> of the package. </returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDocument.IsReader">
      <summary>Gets a value that indicates whether the package is readable.</summary>
      <returns>true if the package is readable; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDocument.IsSignable">
      <summary>Gets a value that indicates whether the package can be digitally signed.</summary>
      <returns>true if the package can be signed; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDocument.IsWriter">
      <summary>Gets a value that indicates whether the package is writable. </summary>
      <returns>true if the package is writable; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.RemoveSignature(System.Windows.Xps.Packaging.XpsDigitalSignature)">
      <summary>Deletes a signature from the package.</summary>
      <param name="signature">The signature that is deleted.</param>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDocument.Signatures">
      <summary>Gets a collection of XML Paper Specification (XPS) signatures that are associated with the package. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Windows.Xps.Packaging.XpsDigitalSignature" /> objects that represent the signatures that are associated with the package.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.SignDigitally(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions)">
      <summary>Signs a collection of package parts with a specified X.509 certificate.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsDigitalSignature" /> that contains information about the signature.</returns>
      <param name="certificate">The X.509 certificate to use in signing each part; or null to prompt the user to select an installed certificate.</param>
      <param name="embedCertificate">true to store the certificate in the package; otherwise, false.</param>
      <param name="restrictions">Flags that indicate what dependent parts must be excluded from the signing.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.SignDigitally(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions,System.Guid)">
      <summary>Signs a collection of package parts by using a specified X.509 certificate.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsDigitalSignature" /> that contains information about the signature.</returns>
      <param name="certificate">The X.509 certificate to use in signing each part; or null to prompt the user to select an installed certificate.</param>
      <param name="embedCertificate">true to store the certificate in the package; otherwise, false.</param>
      <param name="restrictions">Flags that indicate what dependent parts are excluded from the signing.</param>
      <param name="id">The ID to assign to the signature.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.SignDigitally(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions,System.Guid,System.Boolean)">
      <summary>Signs a collection of package parts with a specified X.509 certificate.</summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsDigitalSignature" /> that contains information about the signature.</returns>
      <param name="certificate">The X.509 certificate to use in signing each part; or null to prompt the user to select an installed certificate.</param>
      <param name="embedCertificate">true to store the certificate in the package; otherwise, false.</param>
      <param name="restrictions">Flags that indicate what dependent parts to exclude from the signing.</param>
      <param name="id">The ID to assign to the signature.</param>
      <param name="testIsSignable">true to verify that <see cref="P:System.Windows.Xps.Packaging.XpsDocument.IsSignable" /> is true before signing; otherwise, false.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsDocument.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. Use the type-safe <see cref="M:System.Windows.Xps.Packaging.XpsDocument.Dispose(System.Boolean)" /> method instead. </summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsDocument.Thumbnail">
      <summary>Gets or sets the XML Paper Specification (XPS) thumbnail image that is associated with the document. </summary>
      <returns>An <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" /> that represents the thumbnail image that is associated with the document. </returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsFont">
      <summary>Represents a font in an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsFont.IsObfuscated">
      <summary>Gets a value that indicates whether the font is obfuscated.</summary>
      <returns>true if the font is obfuscated; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsFont.IsRestricted">
      <summary>Gets or sets a value that indicates whether text that uses this font can be modified.</summary>
      <returns>true if text that uses this font can be changed or edited; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsFont.ObfuscateFontData(System.Byte[],System.Guid)">
      <summary>Obfuscates the font typeface data.</summary>
      <param name="fontData">The typeface data to obfuscate.</param>
      <param name="guid">The globally unique identifier (GUID) to use to obfuscate the <paramref name="fontdata" />.</param>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsImage">
      <summary>Represents an image in an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</summary>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsImageType">
      <summary>Specifies graphical formats for images that can be included in an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.XpsImageType.PngImageType">
      <summary>PNG</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.XpsImageType.JpegImageType">
      <summary>JPEG</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.XpsImageType.TiffImageType">
      <summary>TIFF</summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.XpsImageType.WdpImageType">
      <summary>WDP</summary>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsPartBase">
      <summary>Defines the abstract class that is the parent for all part classes that can be contained in an XPS package. </summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsPartBase.Uri">
      <summary>Gets or sets the uniform resource identifier (URI) of the part.</summary>
      <returns>The <see cref="T:System.Uri" /> for the part.</returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsResource">
      <summary>Defines the base class for resources that can be added to an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />. </summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsResource.Commit">
      <summary>Commits all changes and flushes the resource to the document package.</summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsResource.GetStream">
      <summary>When overridden in a derived class, returns the I/O stream for reading or writing the resource.  </summary>
      <returns>The <see cref="T:System.IO.Stream" /> for reading or writing the resource.</returns>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsResource.RelativeUri(System.Uri)">
      <summary>Returns the URI of the resource that is relative to a specified absolute URI.</summary>
      <returns>The <see cref="T:System.Uri" /> of the resource that is relative to the specified absolute <paramref name="inUri" />.</returns>
      <param name="inUri">A starting absolute URI.</param>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsResource.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsResourceDictionary">
      <summary>Represents a dictionary of <see cref="T:System.Windows.Xps.Packaging.XpsResource" /> elements that are usable across pages of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />. </summary>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsResourceSharing">
      <summary>Specifies whether resources can be shared between pages and documents in an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />. </summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.XpsResourceSharing.ShareResources">
      <summary>The resources can be shared. </summary>
    </member>
    <member name="F:System.Windows.Xps.Packaging.XpsResourceSharing.NoResourceSharing">
      <summary>The resources can not be shared. </summary>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsSignatureDefinition">
      <summary>Represents an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> digital signature.</summary>
    </member>
    <member name="M:System.Windows.Xps.Packaging.XpsSignatureDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" /> class. </summary>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsSignatureDefinition.Culture">
      <summary>Gets or sets the <see cref="T:System.Globalization.CultureInfo" /> of the signature.</summary>
      <returns>The cultural information of the signature.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsSignatureDefinition.HasBeenModified">
      <summary>Gets or sets a value that indicates whether unwritten property changes exist for the <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" /> class and must be written to the package's stream. </summary>
      <returns>true if uncommitted changes exist; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsSignatureDefinition.Intent">
      <summary>Gets or sets the string value of the signature intention agreement that the signer is signing against. </summary>
      <returns>A <see cref="T:System.String" /> that represents the intention agreement; for example, "I have read and agree." The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsSignatureDefinition.RequestedSigner">
      <summary>Gets or sets the identity of the person who is requested to sign (or has signed) the package. </summary>
      <returns>A <see cref="T:System.String" /> that represents the signer, for example, "Mary Jones, Marketing Dept." The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsSignatureDefinition.SignBy">
      <summary>Gets or sets the date and time by which the requested signer must sign the parts of the specified document. </summary>
      <returns>A (<see cref="T:System.Nullable" />) <see cref="T:System.DateTime" /> that represents the deadline by which the signer must sign the package. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsSignatureDefinition.SigningLocale">
      <summary>Gets or sets the legal jurisdiction where the package is signed. </summary>
      <returns>A <see cref="T:System.String" /> that represents the jurisdiction, for example, "State of Utah, United States." The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsSignatureDefinition.SpotId">
      <summary>Gets or sets a unique identifier for this <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" />. </summary>
      <returns>A (<see cref="T:System.Nullable" />) <see cref="T:System.Guid" /> that represents the ID of the signature definition. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Xps.Packaging.XpsSignatureDefinition.SpotLocation">
      <summary>Gets or sets the location that specifies where to display the visible digital signature in an XML Paper Specification (XPS) document.</summary>
      <returns>A <see cref="T:System.Windows.Xps.Packaging.SpotLocation" /> that represents the location in the package where a visible request for a signature appears. The default value is null.</returns>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsStructure">
      <summary>Represents the <see cref="N:System.Windows.Documents.DocumentStructures" /> or <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" /> element of an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</summary>
    </member>
    <member name="T:System.Windows.Xps.Packaging.XpsThumbnail">
      <summary>Represents a thumbnail image of a document sequence, single document, or single page.</summary>
    </member>
    <member name="T:System.Windows.Xps.Serialization.BasePackagingPolicy">
      <summary>Defines the base class for XPS package serialization policies. This class is abstract.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.BasePackagingPolicy" /> class.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.AcquireResourceStreamForXpsColorContext(System.String)">
      <summary>When overridden in a derived class, acquires a resource stream for an <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" /> object. </summary>
      <returns>The <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" />.</returns>
      <param name="resourceId">The ID of the object.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.AcquireResourceStreamForXpsFont">
      <summary>When overridden in a derived class, acquires a resource stream for an <see cref="T:System.Windows.Xps.Packaging.XpsFont" /> object. </summary>
      <returns>An <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the <see cref="T:System.Windows.Xps.Packaging.XpsFont" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.AcquireResourceStreamForXpsFont(System.String)">
      <summary>When overridden in a derived class, acquires an <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for an <see cref="T:System.Windows.Xps.Packaging.XpsFont" /> with a specified resource ID.</summary>
      <returns>The XML Paper Specification (XPS) resource stream for the <see cref="T:System.Windows.Xps.Packaging.XpsFont" /> with the specified <paramref name="resourceID" />.</returns>
      <param name="resourceId">The resource ID of the <see cref="T:System.Windows.Xps.Packaging.XpsFont" /> resource stream to acquire.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.AcquireResourceStreamForXpsImage(System.String)">
      <summary>When overridden in a derived class, acquires a resource stream for an <see cref="T:System.Windows.Xps.Packaging.XpsImage" /> object. </summary>
      <returns>The <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the <see cref="T:System.Windows.Xps.Packaging.XpsImage" />.</returns>
      <param name="resourceId">The ID of the object.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.AcquireResourceStreamForXpsResourceDictionary(System.String)">
      <summary>When overridden in a derived class, acquires a resource stream for an <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" /> object. </summary>
      <returns>The <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />.</returns>
      <param name="resourceId">The ID of the object.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.AcquireStreamForLinkTargets">
      <summary>When overridden in a derived class, gets a list of strings, each expressing a <see cref="T:System.Windows.Documents.LinkTarget" /> element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.String" /> objects that represent the linkable targets for a page. </returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.AcquireXmlWriterForFixedDocument">
      <summary>When overridden in a derived class, returns an <see cref="T:System.Xml.XmlWriter" /> for a <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlWriter" /> for the <see cref="T:System.Windows.Documents.FixedDocument" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.AcquireXmlWriterForFixedDocumentSequence">
      <summary>When overridden in a derived class, returns an <see cref="T:System.Xml.XmlWriter" /> for a <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlWriter" /> for a <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.AcquireXmlWriterForFixedPage">
      <summary>When overridden in a derived class, returns an <see cref="T:System.Xml.XmlWriter" /> for a <see cref="T:System.Windows.Documents.FixedPage" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlWriter" /> for a <see cref="T:System.Windows.Documents.FixedPage" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.AcquireXmlWriterForPage">
      <summary>When overridden in a derived class, returns an <see cref="T:System.Xml.XmlWriter" /> for the current page. </summary>
      <returns>The <see cref="T:System.Xml.XmlWriter" /> for the current page.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.AcquireXmlWriterForResourceDictionary">
      <summary>When overridden in a derived class, returns an <see cref="T:System.Xml.XmlWriter" /> for an <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlWriter" /> for an <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />.</returns>
    </member>
    <member name="P:System.Windows.Xps.Serialization.BasePackagingPolicy.CurrentFixedDocumentUri">
      <summary>When overridden in a derived class, gets the uniform resource identifier (URI) of the fixed document that is processing.</summary>
      <returns>The <see cref="T:System.Uri" /> of the current document.</returns>
    </member>
    <member name="P:System.Windows.Xps.Serialization.BasePackagingPolicy.CurrentFixedPageUri">
      <summary>When overridden in a derived class, gets the uniform resource identifier (URI) of the fixed page that is processing.</summary>
      <returns>The <see cref="T:System.Uri" /> of the current page.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.PersistPrintTicket(System.Printing.PrintTicket)">
      <summary>When overridden in a derived class, writes a print ticket to a package or to a part of the package.</summary>
      <param name="printTicket">An object that provides information about how a print job prints. </param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.PreCommitCurrentPage">
      <summary>When overridden in a derived class, performs any required maintenance tasks before the page is committed, for example, flushes streams.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.RelateResourceToCurrentPage(System.Uri,System.String)">
      <summary>When overridden in a derived class, adds a relationship from the current page to some internal or external resource.</summary>
      <param name="targetUri">The uniform resource identifier (URI) of the resource.</param>
      <param name="relationshipName">A name for the relationship.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.RelateRestrictedFontToCurrentDocument(System.Uri)">
      <summary>When overridden in a derived class, adds a relationship from the current page to a font.</summary>
      <param name="targetUri">The uniform resource identifier (URI) of the font.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.ReleaseResourceStreamForXpsColorContext">
      <summary>When overridden in a derived class, releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the current <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" /> object. </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.ReleaseResourceStreamForXpsFont">
      <summary>When overridden in a derived class, releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the current <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" /> object. </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.ReleaseResourceStreamForXpsFont(System.String)">
      <summary>When overridden in a derived class, releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the current <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" /> object. </summary>
      <param name="resourceId">The ID of the resource that is released.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.ReleaseResourceStreamForXpsImage">
      <summary>When overridden in a derived class, releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the current <see cref="T:System.Windows.Xps.Packaging.XpsImage" /> object. </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.ReleaseResourceStreamForXpsResourceDictionary">
      <summary>When overridden in a derived class, releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the current <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" /> object. </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.ReleaseXmlWriterForFixedDocument">
      <summary>When overridden in a derived class, releases the <see cref="T:System.Xml.XmlWriter" /> for the current <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.ReleaseXmlWriterForFixedDocumentSequence">
      <summary>When overridden in a derived class, releases the <see cref="T:System.Xml.XmlWriter" /> for the current <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.ReleaseXmlWriterForFixedPage">
      <summary>When overridden in a derived class, releases the <see cref="T:System.Xml.XmlWriter" /> for the current <see cref="T:System.Windows.Documents.FixedPage" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.BasePackagingPolicy.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
    </member>
    <member name="T:System.Windows.Xps.Serialization.ColorTypeConverter">
      <summary>Provides type converters for converting <see cref="T:System.Windows.Media.Color" /> objects to and from objects of other types.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ColorTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.ColorTypeConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ColorTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this converter can convert an instance of a specified type to a <see cref="T:System.Windows.Media.Color" />.</summary>
      <returns>true if objects of the specified type can be converted; otherwise, false. </returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="sourceType">The type of object that is a candidate for conversion.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ColorTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Windows.Xps.Serialization.ColorTypeConverter" /> can convert a <see cref="T:System.Windows.Media.Color" /> to an instance of a specified type.</summary>
      <returns>true if conversion is possible; otherwise, false. </returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="destinationType">The type of object that you want to convert a color to.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ColorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a specified object to a <see cref="T:System.Windows.Media.Color" />.</summary>
      <returns>The new <see cref="T:System.Windows.Media.Color" /> object. </returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="culture">The language and culture that are used during the conversion.</param>
      <param name="value">The object that is converted.</param>
      <exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="value" /> is not a type that can be converted.</exception>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ColorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.Windows.Media.Color" /> to an object of the specified type.</summary>
      <returns>The new <see cref="T:System.Object" /> of the designated type.</returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="culture">The language and culture that are used during the conversion. </param>
      <param name="value">The object you want to convert.</param>
      <param name="destinationType">The type that <paramref name="value" /> is converted to.</param>
      <exception cref="T:System.NotSupportedException">The <paramref name="destinationType" /> is not a type that <paramref name="value" /> can be converted to.-or-The <paramref name="culture" /> is a neutral culture.</exception>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ColorTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Gets a collection of property descriptions for the specified type.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the property descriptions that are exposed for the component; or null if no property descriptions are returned.</returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="value">An object of the type for which you need property descriptions.</param>
      <param name="attributes">An array of attributes that filter the returned collection to exclude irrelevant properties.</param>
      <exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ColorTypeConverter.SerializeColorContext(System.IServiceProvider,System.Windows.Media.ColorContext)">
      <summary>
            Serializes a <see cref="T:System.Windows.Media.ColorContext" /> to the XML Paper Specification (XPS) package and returns its uniform resource identifier (URI) as a string.</summary>
      <returns>A <see cref="T:System.String" /> that represents the URI of the color context.</returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="colorContext">The object to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="colorContext" /> is null. </exception>
    </member>
    <member name="T:System.Windows.Xps.Serialization.FontSubsetterCommitPolicies">
      <summary>Specifies the granularity at which font glyph subsets are saved in an XPS document.</summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.FontSubsetterCommitPolicies.None">
      <summary>No subsetting.  Store all glyphs for all fonts used in the document.</summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.FontSubsetterCommitPolicies.CommitPerPage">
      <summary>Store all glyphs that are used in the text by each page.</summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.FontSubsetterCommitPolicies.CommitPerDocument">
      <summary>Store all glyphs that are used in the text by each document.</summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.FontSubsetterCommitPolicies.CommitEntireSequence">
      <summary>Store all glyphs that are used in the text by each document sequence.</summary>
    </member>
    <member name="T:System.Windows.Xps.Serialization.FontTypeConverter">
      <summary>Provides type converters for converting <see cref="T:System.Windows.Media.GlyphRun" /> objects to and from objects of other types.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.FontTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.FontTypeConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.FontTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this converter can convert an instance of a specified type to a <see cref="T:System.Windows.Media.GlyphRun" />.</summary>
      <returns>true if objects of the specified type can be converted; otherwise, false. </returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="sourceType">The type of object to convert.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.FontTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Windows.Xps.Serialization.FontTypeConverter" /> can convert a <see cref="T:System.Windows.Media.GlyphRun" /> to an instance of a specified type. </summary>
      <returns>true if conversion is possible; otherwise, false.  </returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="destinationType">The type of object that you want to convert a glyph run to.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.FontTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a specified object to a <see cref="T:System.Windows.Media.GlyphRun" />.</summary>
      <returns>The new <see cref="T:System.Windows.Media.GlyphRun" /> object. </returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="culture">The language and culture that are used during the conversion.</param>
      <param name="value">The object that is converted.</param>
      <exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="value" /> is not a type that can be converted.</exception>
    </member>
    <member name="M:System.Windows.Xps.Serialization.FontTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.Windows.Media.GlyphRun" /> to an object of the specified type.</summary>
      <returns>The new <see cref="T:System.Object" /> of the designated type. As implemented in this class, this must be a <see cref="T:System.Uri" />. It expresses the uniform resource identifier (URI) of the font subset that is used by the <paramref name="value" /> parameter.</returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="culture">The language and culture that are used during the conversion. </param>
      <param name="value">The object you want to convert.</param>
      <param name="destinationType">The type that you want <paramref name="value" /> converted to.</param>
      <exception cref="T:System.NotSupportedException">The <paramref name="destinationType" /> is not a type that <paramref name="value" /> can be converted to.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.Windows.Xps.XpsSerializationException">An error occurs when serializing the glyph run.</exception>
    </member>
    <member name="M:System.Windows.Xps.Serialization.FontTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Gets a collection of property descriptions for the specified type.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the property descriptions that are exposed for the component; or null if no property descriptions are returned.</returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="value">An object that you need property descriptions for.</param>
      <param name="attributes">An array of attributes that filter the returned collection in order to exclude irrelevant properties.</param>
      <exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception>
    </member>
    <member name="T:System.Windows.Xps.Serialization.ImageSourceTypeConverter">
      <summary>Provides type converters for converting <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> objects to and from objects of other types.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ImageSourceTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.ImageSourceTypeConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ImageSourceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this converter can convert an instance of a specified type to a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
      <returns>true if objects of the specified type can be converted; otherwise, false. </returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="sourceType">The type of object to convert.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ImageSourceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Windows.Xps.Serialization.ImageSourceTypeConverter" /> can convert a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> to an instance of a specified type. </summary>
      <returns>true if the conversion is possible; otherwise, false.  </returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="destinationType">The type of object that you want to convert to a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ImageSourceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a specified object to a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />. </summary>
      <returns>The new <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object. </returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="culture">The language and culture that are used during the conversion.</param>
      <param name="value">The object that is converted.</param>
      <exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="value" /> is not a type that can be converted.</exception>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ImageSourceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> to an object of the specified type.</summary>
      <returns>The new <see cref="T:System.Object" /> of the designated type. As implemented in this class, the object must be a <see cref="T:System.Uri" />. The object expresses the uniform resource identifier (URI) of the serialized image. </returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="culture">The language and culture that are used during the conversion. </param>
      <param name="value">The object that you want to convert.</param>
      <param name="destinationType">The type that you want <paramref name="value" /> converted to.</param>
      <exception cref="T:System.NotSupportedException">The <paramref name="destinationType" /> is not a type that <paramref name="value" /> can be converted to.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.Windows.Xps.XpsSerializationException">An error occurs when serializing the image.</exception>
    </member>
    <member name="M:System.Windows.Xps.Serialization.ImageSourceTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Gets a collection of property descriptions for the specified type.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the property descriptions that are exposed for the component; or null if no property descriptions are returned.</returns>
      <param name="context">An object that provides contextual information.</param>
      <param name="value">An object that you need property descriptions for.</param>
      <param name="attributes">An array of attributes that are used to filter the returned collection in order to exclude irrelevant properties.</param>
      <exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception>
    </member>
    <member name="T:System.Windows.Xps.Serialization.PackageSerializationManager">
      <summary>Provides a base class to manage the serializers and type converters that insert Windows Presentation Foundation (WPF) root objects into an XML Paper Specification (XPS) package. </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.PackageSerializationManager.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.PackageSerializationManager" /> class. </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.PackageSerializationManager.SaveAsXaml(System.Object)">
      <summary>When overridden in a derived class, saves the specified serialized object to an XML Paper Specification (XPS) package.</summary>
      <param name="serializedObject">The object to save.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.PackageSerializationManager.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
    </member>
    <member name="T:System.Windows.Xps.Serialization.PrintTicketLevel">
      <summary>Specifies whether a <see cref="T:System.Printing.PrintTicket" /> applies to an entire sequence of documents, to just one document, or to just one page. </summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.PrintTicketLevel.None">
      <summary>An unknown or unspecified level.</summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.PrintTicketLevel.FixedDocumentSequencePrintTicket">
      <summary>A sequence of documents.</summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.PrintTicketLevel.FixedDocumentPrintTicket">
      <summary>A document.</summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.PrintTicketLevel.FixedPagePrintTicket">
      <summary>A page.</summary>
    </member>
    <member name="T:System.Windows.Xps.Serialization.SerializationState">
      <summary>Do not use. </summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.SerializationState.Normal">
      <summary>Do not use.</summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.SerializationState.Stop">
      <summary>Do not use.</summary>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsPackagingPolicy">
      <summary>Defines the writer, resource, print ticket, and package relationship settings that are associated with a specified <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.    </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.#ctor(System.Windows.Xps.Packaging.XpsDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsPackagingPolicy" /> class for a specified <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</summary>
      <param name="xpsPackage">The <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> that is associated with this <see cref="T:System.Windows.Xps.Serialization.XpsPackagingPolicy" />.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.#ctor(System.Windows.Xps.Packaging.XpsDocument,System.Windows.Xps.Packaging.PackageInterleavingOrder)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsPackagingPolicy" /> class with a specified <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> and specified interleave order.</summary>
      <param name="xpsPackage">The XML Paper Specification (XPS) document that the packaging policy applies to.</param>
      <param name="interleavingType">The order in which to interleave document elements.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireResourceStreamForXpsColorContext(System.String)">
      <summary>Acquires the resource stream for a specified <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" />.</summary>
      <returns>The resource stream for the <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" /> that has the specified <paramref name="resourceId" />.</returns>
      <param name="resourceId">The resource identifier of the color context.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireResourceStreamForXpsFont">
      <summary>Acquires the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the current <see cref="T:System.Windows.Xps.Packaging.XpsFont" />.</summary>
      <returns>The resource stream for the current <see cref="T:System.Windows.Xps.Packaging.XpsFont" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireResourceStreamForXpsFont(System.String)">
      <summary>Acquires the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for a specified <see cref="T:System.Windows.Xps.Packaging.XpsFont" />.</summary>
      <returns>The resource stream for the XML Paper Specification (XPS) font that has the specified <paramref name="resourceId" />.</returns>
      <param name="resourceId">The identifier of the XML Paper Specification (XPS) font.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireResourceStreamForXpsImage(System.String)">
      <summary>Acquires the resource stream for a specified <see cref="T:System.Windows.Xps.Packaging.XpsImage" />.</summary>
      <returns>The resource stream for the <see cref="T:System.Windows.Xps.Packaging.XpsImage" /> that has the specified <paramref name="resourceId" />.</returns>
      <param name="resourceId">The resource identifier of the XML Paper Specification (XPS) image.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireResourceStreamForXpsResourceDictionary(System.String)">
      <summary>Acquires the resource stream for a specified <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />.</summary>
      <returns>The XML Paper Specification (XPS) resource stream for the <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" /> that has the specified <paramref name="resourceId" />.</returns>
      <param name="resourceId">The identifier of the resource dictionary.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireStreamForLinkTargets">
      <summary>Returns a list of <see cref="P:System.Windows.Documents.PageContent.LinkTargets" /> for the current page content.</summary>
      <returns>The list of <see cref="P:System.Windows.Documents.PageContent.LinkTargets" /> for the current page content.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireXmlWriterForFixedDocument">
      <summary>Acquires the <see cref="T:System.Xml.XmlWriter" /> for the current <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
      <returns>The XML writer for the current <see cref="T:System.Windows.Documents.FixedDocument" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireXmlWriterForFixedDocumentSequence">
      <summary>Acquires the <see cref="T:System.Xml.XmlWriter" /> for the current <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
      <returns>The XML writer for the current <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireXmlWriterForFixedPage">
      <summary>Acquires the <see cref="T:System.Xml.XmlWriter" /> for the current <see cref="T:System.Windows.Documents.FixedPage" />.</summary>
      <returns>The XML writer for the current <see cref="T:System.Windows.Documents.FixedPage" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireXmlWriterForPage">
      <summary>Acquires the <see cref="T:System.Xml.XmlWriter" /> for the current page.</summary>
      <returns>The XML writer for the current <see cref="T:System.Windows.Documents.FixedPage" />.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireXmlWriterForResourceDictionary">
      <summary>Acquires the <see cref="T:System.Xml.XmlWriter" /> for the current <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />.</summary>
      <returns>The XML writer for the current <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />.</returns>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsPackagingPolicy.CurrentFixedDocumentUri">
      <summary>Gets the uniform resource identifier (URI) of the current fixed document.</summary>
      <returns>The URI of the current fixed document.</returns>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsPackagingPolicy.CurrentFixedPageUri">
      <summary>Gets the uniform resource identifier (URI) of the current fixed page.</summary>
      <returns>The URI of the current fixed page.</returns>
    </member>
    <member name="E:System.Windows.Xps.Serialization.XpsPackagingPolicy.PackagingProgressEvent">
      <summary>Occurs when a <see cref="T:System.Windows.Documents.FixedPage" />, <see cref="T:System.Windows.Documents.FixedDocument" />, or <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> is added to the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.PersistPrintTicket(System.Printing.PrintTicket)">
      <summary>Stores a specified <see cref="T:System.Printing.PrintTicket" /> as part of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</summary>
      <param name="printTicket">The print ticket to store as part of the XML Paper Specification (XPS) document.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.PreCommitCurrentPage">
      <summary>Prepares to commit the current page to the output store.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.RelateResourceToCurrentPage(System.Uri,System.String)">
      <summary>Adds a <see cref="T:System.IO.Packaging.PackageRelationship" /> with a specified name that associates a specified resource with the current page.</summary>
      <param name="targetUri">The uniform resource identifier (URI) of the resource to associate with the current page.</param>
      <param name="relationshipName">The identifying name of the <see cref="T:System.IO.Packaging.PackageRelationship" /> that associates the current page with the specified resource.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.RelateRestrictedFontToCurrentDocument(System.Uri)">
      <summary>Adds a <see cref="T:System.IO.Packaging.PackageRelationship" /> that associates a restricted font with the current document.</summary>
      <param name="targetUri">The uniform resource identifier (URI) of the restricted font to associate with the current document.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.ReleaseResourceStreamForXpsColorContext">
      <summary>Releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the current <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.ReleaseResourceStreamForXpsFont">
      <summary>Releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the current <see cref="T:System.Windows.Xps.Packaging.XpsFont" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.ReleaseResourceStreamForXpsFont(System.String)">
      <summary>Releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for a specified <see cref="T:System.Windows.Xps.Packaging.XpsFont" />.</summary>
      <param name="resourceId">The identifier of the XML Paper Specification (XPS) font that you want to release.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.ReleaseResourceStreamForXpsImage">
      <summary>Releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the current <see cref="T:System.Windows.Xps.Packaging.XpsImage" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.ReleaseResourceStreamForXpsResourceDictionary">
      <summary>Releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> for the current <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.ReleaseXmlWriterForFixedDocument">
      <summary>Releases the <see cref="T:System.Xml.XmlWriter" /> for the current <see cref="T:System.Windows.Documents.FixedDocument" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.ReleaseXmlWriterForFixedDocumentSequence">
      <summary>Releases the <see cref="T:System.Xml.XmlWriter" /> for the current <see cref="T:System.Windows.Documents.FixedDocumentSequence" />.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsPackagingPolicy.ReleaseXmlWriterForFixedPage">
      <summary>Releases the <see cref="T:System.Xml.XmlWriter" /> for the current <see cref="T:System.Windows.Documents.FixedPage" />.</summary>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsResourceStream">
      <summary>Represents the stream and uniform resource identifier (URI)  of an XML Paper Specification (XPS) resource. </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsResourceStream.#ctor(System.IO.Stream,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" /> class by using the specified stream and uniform resource identifier (URI).</summary>
      <param name="stream">The stream that contains the resource.</param>
      <param name="uri">The URI of the resource.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsResourceStream.Initialize">
      <summary>Initializes the <see cref="T:System.IO.Stream" /> in the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" />.</summary>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsResourceStream.Stream">
      <summary>Gets the <see cref="T:System.IO.Stream" /> of the resource.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> that contains the XML Paper Specification (XPS) resource. </returns>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsResourceStream.Uri">
      <summary>Gets the <see cref="T:System.Uri" /> of the resource.</summary>
      <returns>A <see cref="T:System.Uri" /> that contains the XML Paper Specification (XPS) resource. </returns>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsSerializationCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Xps.Serialization.XpsSerializationManagerAsync.XpsSerializationCompleted" /> event of an <see cref="T:System.Windows.Xps.Serialization.XpsSerializationManagerAsync" />. </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationCompletedEventArgs.#ctor(System.Boolean,System.Object,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsSerializationCompletedEventArgs" /> class. </summary>
      <param name="canceled">true to indicate that the serialization was canceled before completion; otherwise, false.</param>
      <param name="state">A user-supplied object that provides additional data to the event handler. </param>
      <param name="exception">An exception, if any, that interrupted the serialization operation.</param>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsSerializationCompletedEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Xps.Serialization.XpsSerializationManagerAsync.XpsSerializationCompleted" /> event of an <see cref="T:System.Windows.Xps.Serialization.XpsSerializationManagerAsync" />. </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsSerializationManager">
      <summary>Manages synchronous XML Paper Specification (XPS) serializers and type converters. </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationManager.#ctor(System.Windows.Xps.Serialization.BasePackagingPolicy,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsSerializationManager" /> class. </summary>
      <param name="packagingPolicy">An object that provides methods for acquiring serialization readers and writers for different parts of an XML Paper Specification (XPS) document.</param>
      <param name="batchMode">true to specify batch mode; otherwise, false. </param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationManager.Commit">
      <summary>Commits all changes and writes all buffered data.</summary>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsSerializationManager.IsBatchMode">
      <summary>Gets a value that indicates whether the serialization manager is in batch mode.</summary>
      <returns>true if the manager is in batch mode; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationManager.SaveAsXaml(System.Object)">
      <summary>Saves a specified XAML serialized object to the document package.</summary>
      <param name="serializedObject">The XAML serialized object to save.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationManager.SetFontSubsettingCountPolicy(System.Int32)">
      <summary>Sets the number of pages or documents to process for font-subsetting.</summary>
      <param name="countPolicy">The number of pages or documents to process at a time for font subsetting.</param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationManager.SetFontSubsettingPolicy(System.Windows.Xps.Serialization.FontSubsetterCommitPolicies)">
      <summary>Sets the granularity at which font-subsetting is performed.</summary>
      <param name="policy">One of the enumeration values that specifies the font-subsetting policy.</param>
    </member>
    <member name="E:System.Windows.Xps.Serialization.XpsSerializationManager.XpsSerializationPrintTicketRequired">
      <summary>Occurs when an XPS serializer requests a <see cref="T:System.Printing.PrintTicket" />.</summary>
    </member>
    <member name="E:System.Windows.Xps.Serialization.XpsSerializationManager.XpsSerializationProgressChanged">
      <summary>Occurs when a page or document finishes serialization.</summary>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsSerializationManagerAsync">
      <summary>Manages asynchronous XML Paper Specification (XPS) serializers and type converters.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationManagerAsync.#ctor(System.Windows.Xps.Serialization.BasePackagingPolicy,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsSerializationManagerAsync" /> class. </summary>
      <param name="packagingPolicy">An object that provides methods for acquiring serialization readers and writers for different parts of an XML Paper Specification (XPS) document.</param>
      <param name="batchMode">true to specify batch mode; otherwise, false. </param>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationManagerAsync.CancelAsync">
      <summary>Cancels an asynchronous serialization operation.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationManagerAsync.Commit">
      <summary>Commits all changes and writes all buffered data as output.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationManagerAsync.SaveAsXaml(System.Object)">
      <summary>Saves a specified serialized object to an XML Paper Specification (XPS) package.</summary>
      <param name="serializedObject">The object that is saved.</param>
    </member>
    <member name="E:System.Windows.Xps.Serialization.XpsSerializationManagerAsync.XpsSerializationCompleted">
      <summary>Occurs when a serialization operation finishes.</summary>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Xps.Serialization.XpsSerializationManager.XpsSerializationPrintTicketRequired" /> event.  </summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventArgs.#ctor(System.Windows.Xps.Serialization.PrintTicketLevel,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventArgs" /> class. </summary>
      <param name="printTicketLevel">An object that specifies the scope of the <see cref="T:System.Printing.PrintTicket" />.</param>
      <param name="sequence">Either the total number of pages or the number of documents in the print job. Which applies depends on the scope of the <see cref="T:System.Printing.PrintTicket" />.</param>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventArgs.PrintTicket">
      <summary>Gets or sets the <see cref="T:System.Printing.PrintTicket" /> that is used in the writing operation.</summary>
      <returns>A <see cref="T:System.Printing.PrintTicket" /> that defines how the printer handles a print job.</returns>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventArgs.PrintTicketLevel">
      <summary>Gets a value that indicates the scope of the <see cref="T:System.Printing.PrintTicket" />.</summary>
      <returns>A <see cref="T:System.Windows.Xps.Serialization.PrintTicketLevel" /> value that indicates the scope of the <see cref="T:System.Printing.PrintTicket" />. </returns>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventArgs.Sequence">
      <summary>Gets either the total number of pages or the number of documents in the print job. </summary>
      <returns>An <see cref="T:System.Int32" /> that represents the total number of pages or the number of documents.</returns>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Xps.Serialization.XpsSerializationManager.XpsSerializationPrintTicketRequired" /> event of an <see cref="T:System.Windows.Xps.Serialization.XpsSerializationManager" />. </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Xps.Serialization.XpsSerializationManager.XpsSerializationProgressChanged" /> event.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventArgs.#ctor(System.Windows.Xps.Serialization.XpsWritingProgressChangeLevel,System.Int32,System.Int32,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventArgs" /> class.</summary>
      <param name="writingLevel">A value that specifies whether the change in progress is an additional page completed or an additional document completed.</param>
      <param name="pageNumber">A value that specifies the total number of pages or the number of documents that are serialized at the time of the event.</param>
      <param name="progressPercentage">A value that specifies the percentage of the total serialization job that is complete.</param>
      <param name="userToken">A user-supplied object that provides additional information for the event handler.</param>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventArgs.PageNumber">
      <summary>Gets the number of pages or documents that have been serialized. </summary>
      <returns>The total pages or documents have been serialized at the point when the event occurred.</returns>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventArgs.WritingLevel">
      <summary>Gets a value that indicates the scope of the progress indicator.</summary>
      <returns>The scope of the progress indicator.</returns>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Xps.Serialization.XpsSerializationManager.XpsSerializationProgressChanged" /> event of an <see cref="T:System.Windows.Xps.Serialization.XpsSerializationManager" />. </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsSerializerFactory">
      <summary>Creates and provides information about XML Paper Specification (XPS) serializers.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializerFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsSerializerFactory" /> class.</summary>
    </member>
    <member name="M:System.Windows.Xps.Serialization.XpsSerializerFactory.CreateSerializerWriter(System.IO.Stream)">
      <summary>Creates a <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" /> that outputs XPS content to a specified <see cref="T:System.IO.Stream" />.</summary>
      <returns>An output writer that serializes XPS content to the specified <paramref name="stream" />.</returns>
      <param name="stream">The output stream that the returned serializer is to write to.</param>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsSerializerFactory.DefaultFileExtension">
      <summary>Gets the standard file name extension for XPS documents.</summary>
      <returns>The standard file name extension (including the leading period) for XPS documents.</returns>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsSerializerFactory.DisplayName">
      <summary>Gets the public name for the serializers that the factory produces.</summary>
      <returns>The public name for serializers that the factory produces.</returns>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsSerializerFactory.ManufacturerName">
      <summary>Gets the manufacturer's name for serializers that the factory produces.</summary>
      <returns>The manufacturer's name.</returns>
    </member>
    <member name="P:System.Windows.Xps.Serialization.XpsSerializerFactory.ManufacturerWebsite">
      <summary>Gets the manufacturer's Web address for serializers that the factory produces.</summary>
      <returns>The manufacturer's Web site.</returns>
    </member>
    <member name="T:System.Windows.Xps.Serialization.XpsWritingProgressChangeLevel">
      <summary>Specifies the scope of a writing progress indicator for XML Paper Specification (XPS) content. </summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.XpsWritingProgressChangeLevel.None">
      <summary>There is no interpretation for the progress value.</summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.XpsWritingProgressChangeLevel.FixedDocumentSequenceWritingProgress">
      <summary>An entire sequence of one or more documents.</summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.XpsWritingProgressChangeLevel.FixedDocumentWritingProgress">
      <summary>A single document.</summary>
    </member>
    <member name="F:System.Windows.Xps.Serialization.XpsWritingProgressChangeLevel.FixedPageWritingProgress">
      <summary>A single page.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Activities.DurableInstancing.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Activities.DurableInstancing</name>
  </assembly>
  <members>
    <member name="T:System.Activities.DurableInstancing.InstanceCompletionAction">
      <summary>Contains options that specify whether the persistence provider should keep or delete the state information for an instance in the persistence store after the instance completes. </summary>
    </member>
    <member name="F:System.Activities.DurableInstancing.InstanceCompletionAction.DeleteNothing">
      <summary>Specifies that data and metadata for a workflow instance must be kept in the persistence database even after the workflow instance completes.</summary>
    </member>
    <member name="F:System.Activities.DurableInstancing.InstanceCompletionAction.DeleteAll">
      <summary>Specifies that data and metadata for a workflow instance must be deleted from the persistence store after the workflow instance completes.</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.InstanceEncodingOption">
      <summary>Contains options that specify whether the persistence provider should encode the instance state information using the GZip algorithm before saving the state information into the persistence store. </summary>
    </member>
    <member name="F:System.Activities.DurableInstancing.InstanceEncodingOption.None">
      <summary>Specifies that instance data is not compressed.</summary>
    </member>
    <member name="F:System.Activities.DurableInstancing.InstanceEncodingOption.GZip">
      <summary>Specifies that instance data is compressed using the GZip algorithm.</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.InstanceLockedExceptionAction">
      <summary>Contains options that specify what action the SQL persistence provider should take when it receives an exception when trying to lock an instance. </summary>
    </member>
    <member name="F:System.Activities.DurableInstancing.InstanceLockedExceptionAction.NoRetry">
      <summary>Specifies that the persistence provider does not reattempt to lock an instance if the instance is already locked by another host. </summary>
    </member>
    <member name="F:System.Activities.DurableInstancing.InstanceLockedExceptionAction.BasicRetry">
      <summary>Specifies that the persistence provider reattempts to lock the instance with a linear retry interval. The persistence provider passes the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> to the caller at the end of the sequence (after retrying predefined number of times).</summary>
    </member>
    <member name="F:System.Activities.DurableInstancing.InstanceLockedExceptionAction.AggressiveRetry">
      <summary>Specifies that the persistence provider reattempts to lock an instance with an exponentially increasing delay between successive attempts. The persistence provider passes the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> to the caller at the end of the sequence (after retrying predefined number of times).</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.SqlWorkflowInstanceStore">
      <summary>Derives from the abstract <see cref="T:System.Runtime.Persistence.InstanceStore" /> class of the persistence functionality and provides implementation to allow saving instance state information to and loading instance state information from an SQL Server 2005 or SQL Server 2008 database.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DurableInstancing.SqlWorkflowInstanceStore" /> class.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DurableInstancing.SqlWorkflowInstanceStore" /> class by using the <paramref name="connectionString" /> parameter.</summary>
      <param name="connectionString">The connection string to a persistence database.</param>
    </member>
    <member name="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.ConnectionString">
      <summary>Gets or sets a connection string with parameters that are used to connect to an underlying persistence database.</summary>
      <returns>The connection string.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.EnqueueRunCommands">
      <summary>Gets or set a value that indicates whether Run commands are enqueued. This property is used internally by the SQL Workflow Instance Store and it should not be used in your applications.</summary>
      <returns>true if the Run commands are enqueued; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.HostLockRenewalPeriod">
      <summary>Specifies the time period within which the host renews its lock on a workflow service instance. </summary>
      <returns>The time period.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceCompletionAction">
      <summary>Specifies the action to be taken after a workflow instance completes. Possible values are “DeleteNothing” and “DeleteAll”. The default value is “DeleteAll”. If the property is set to “DeleteNothing”, the persistence provider keeps all the instance data and metadata in the persistence database after the workflow instance completes. If the property is set to “DeleteAll”, the persistence provider deletes all the instance data and metadata after the workflow instance completes.</summary>
      <returns>The action to be taken after a workflow completes.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceEncodingOption">
      <summary>Specifies a value that indicates whether the instance data must be compressed. </summary>
      <returns>The possible values are “None” and “GZip”. The default is “None”.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceLockedExceptionAction">
      <summary>Specifies the action to be taken when the persistence provider catches an <see cref="T:System.Runtime.Persistence.InstanceLockedException" />.</summary>
      <returns>The action to be taken when the persistence provider catches an <see cref="T:System.Runtime.Persistence.InstanceLockedException" /></returns>
    </member>
    <member name="M:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.Promote(System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XName},System.Collections.Generic.IEnumerable{System.Xml.Linq.XName})">
      <summary>Associates the specified properties with a workflow instance so that you can query for instances based on specific values for these properties. These properties that can be used in external queries can be of simple types (for example: Int64, String, and so on) or of a serialized binary type (byte[]). Binary properties are typically used to store tracking data.</summary>
      <param name="name">The name of the promotion itself.</param>
      <param name="promoteAsVariant">The properties that must be promoted as variants.</param>
      <param name="promoteAsBinary">The properties that must be promoted as a binary stream.</param>
    </member>
    <member name="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.RunnableInstancesDetectionPeriod">
      <summary>Specifies the time period after which the SQL Workflow Instance Store runs a detection task to detect any runnable or activatable workflow instances in the persistence database after the previous detection cycle.</summary>
      <returns>Returns <see cref="T:System.TimeSpan" />.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Activities.Presentation.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Activities.Design</name>
  </assembly>
  <members>
    <member name="T:System.Activities.Design.ActivityDesigner">
      <summary>Provides a base class for all activity designer components.</summary>
    </member>
    <member name="M:System.Activities.Design.ActivityDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ActivityDesigner" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.ActivityDesigner.GetAutomationHelpText">
      <summary>Returns a string of automation property/value pairs related to the <see cref="T:System.Activities.Design.ActivityDesigner" />.</summary>
      <returns>Returns a <see cref="T:System.String" /> containing the automation property/value pairs related to the <see cref="T:System.Activities.Design.ActivityDesigner" />..</returns>
    </member>
    <member name="M:System.Activities.Design.ActivityDesigner.GetAutomationIdMemberName">
      <summary>Returns the string “DisplayName” in this overridden method implementation. </summary>
      <returns>Returns a <see cref="T:System.String" /> containing “DisplayName.”.</returns>
    </member>
    <member name="P:System.Activities.Design.ActivityDesigner.Icon">
      <summary>Gets or sets the icon associated with this <see cref="T:System.Activities.Design.ActivityDesigner" />. </summary>
      <returns>Returns a <see cref="T:System.Windows.Media.DrawingBrush" /> representing the icon associated with this <see cref="T:System.Activities.Design.ActivityDesigner" />..</returns>
    </member>
    <member name="F:System.Activities.Design.ActivityDesigner.IconProperty">
      <summary>Identifies the <see cref="F:System.Activities.Design.ActivityDesigner.IconProperty" /> dependency property. </summary>
    </member>
    <member name="M:System.Activities.Design.ActivityDesigner.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Raises the DragEnter event, calls the base class implementation of the OnDragEnter method, and handles <see cref="T:System.Activities.Design.Model.ModelItem" /> objects that are dragged onto the <see cref="T:System.Activities.Design.ActivityDesigner" /> surface.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Activities.Design.ActivityDesignerOptionsAttribute">
      <summary>Specifies drill-down and node viewing design options for UI elements, such as flowcharts, that are used to compose activities.</summary>
    </member>
    <member name="M:System.Activities.Design.ActivityDesignerOptionsAttribute.#ctor">
      <summary>Creates an instance of an <see cref="M:System.Activities.Design.ActivityDesignerOptionsAttribute.#ctor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.ActivityDesignerOptionsAttribute.AllowDrillIn">
      <summary>Gets or sets a value that indicates whether drilling into UI elements that represent activities is allowed.</summary>
      <returns>true if drilling into the UI elements is allowed; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Activities.Design.ActivityDesignerOptionsAttribute.AlwaysCollapseChildren">
      <summary>Gets or sets a value that indicates whether the child nodes are always collapsed.</summary>
      <returns>true if the child nodes are always collapses; otherwise, false. The default value is false.</returns>
    </member>
    <member name="T:System.Activities.Design.BreakpointTypes">
      <summary>An enumeration that represents types of breakpoints.</summary>
    </member>
    <member name="F:System.Activities.Design.BreakpointTypes.None">
      <summary>No breakpoint is set.</summary>
    </member>
    <member name="F:System.Activities.Design.BreakpointTypes.Enabled">
      <summary>The breakpoint is enabled. </summary>
    </member>
    <member name="F:System.Activities.Design.BreakpointTypes.Bounded">
      <summary>Represents a bounded breakpoint, which implements the where and when of breaking at a desired point in a program. </summary>
    </member>
    <member name="F:System.Activities.Design.BreakpointTypes.Conditional">
      <summary>Represents a conditional breakpoint, which is an expression that is evaluated to determine whether the breakpoint will occur. </summary>
    </member>
    <member name="T:System.Activities.Design.CachedResourceDictionaryExtension"></member>
    <member name="M:System.Activities.Design.CachedResourceDictionaryExtension.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.CachedResourceDictionaryExtension" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.CachedResourceDictionaryExtension.ProvideValue(System.IServiceProvider)">
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="serviceProvider"></param>
    </member>
    <member name="P:System.Activities.Design.CachedResourceDictionaryExtension.Source">
      <returns>Returns <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="T:System.Activities.Design.ClipboardData">
      <summary>Represents the data passed around with the clipboard.</summary>
    </member>
    <member name="M:System.Activities.Design.ClipboardData.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.ClipboardData" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.ClipboardData.Data">
      <summary>Gets or sets the data passed around on the clipboard.</summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> of type <see cref="T:System.Object" /> that contains the data passed around on the clipboard.</returns>
    </member>
    <member name="P:System.Activities.Design.ClipboardData.Metadata">
      <summary>Gets or sets the metadata passed around on the clipboard.</summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> of type <see cref="T:System.Object" /> that contains the metadata passed around on the clipboard.</returns>
    </member>
    <member name="P:System.Activities.Design.ClipboardData.Version">
      <summary>Gets or sets the version information passed around on the clipboard.</summary>
      <returns>The version information passed around on the clipboard.</returns>
    </member>
    <member name="T:System.Activities.Design.CommandInfo">
      <summary>Describes a command on the designer, such as copy or paste.</summary>
    </member>
    <member name="P:System.Activities.Design.CommandInfo.Command">
      <summary>A unique identifier that represents some behavior or action.</summary>
      <returns>Returns <see cref="T:System.Windows.Input.ICommand" />.</returns>
    </member>
    <member name="P:System.Activities.Design.CommandInfo.IsBindingEnabledInDesigner">
      <summary>Determines whether binding is enabled in the designer for the specified command.</summary>
      <returns>true if binding is enabled in the designer for the specified command; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.Design.CommandValues">
      <summary>A commanding interface that is used for integration of workflow designer actions (e.g., context menu) with custom provided implementation - i.e. property browser service, debugging service, etc.</summary>
    </member>
    <member name="F:System.Activities.Design.CommandValues.DeleteBreakpoint">
      <summary>The command to delete a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Design.CommandValues.DisableBreakpoint">
      <summary>The command to disable a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Design.CommandValues.EnableBreakpoint">
      <summary>The command to enable a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Design.CommandValues.InsertBreakpoint">
      <summary>The command to insert a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Design.CommandValues.ShowProperties">
      <summary>Opens the Visual Studio Proeprty Grid to show the properties.</summary>
    </member>
    <member name="T:System.Activities.Design.CutCopyPasteHelper">
      <summary>Provides functions to cut, copy, and paste items.</summary>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.AddChildContainer(System.Activities.Design.WorkflowViewElement,System.Activities.Design.ISourceContainer)">
      <summary>Adds the specified <see cref="T:System.Activities.Design.ISourceContainer" /> to the view element.</summary>
      <param name="viewElement">The view element where the new container is added to.</param>
      <param name="sourceContainer">The container to be added.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.CanCopy(System.Activities.Design.EditingContext)">
      <summary>Verifies whether items can be copied from the specified editing context.</summary>
      <returns>true if the number of the selected objects is more than 0 and <paramref name="context" /> is not null; otherwise, false.</returns>
      <param name="context">The editing context to be verified.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.CanCut(System.Activities.Design.EditingContext)">
      <summary>Verifies whether items can be cut from the specified editing context.</summary>
      <returns>true if the number of the selected objects is more than 0 and <paramref name="context" /> is not null; otherwise, false.</returns>
      <param name="context">The editing context to be verified.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.CanPaste(System.Activities.Design.EditingContext)">
      <summary>Returns a Boolean that indicates whether the specified objects can be pasted. </summary>
      <returns>true if the number of the specified objects is more than 0 and not null; otherwise, false.</returns>
      <param name="context">The editing context for the paste operation.</param>
    </member>
    <member name="P:System.Activities.Design.CutCopyPasteHelper.ChildContainers">
      <summary>Gets all the child containers.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="F:System.Activities.Design.CutCopyPasteHelper.ChildContainersProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.CutCopyPasteHelper.ChildContainers" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoCopy(System.Activities.Design.EditingContext)">
      <summary>Copies the currently selected items from the specified editing context to the clipboard.</summary>
      <param name="context">The editing context from which items are copied.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoCopy(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem},System.Activities.Design.EditingContext)">
      <summary>Copies the specified items from the specified editing context to the clipboard.</summary>
      <param name="modelItemsToCopy">Items to be copied.</param>
      <param name="context">The editing context from which items are copied.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoCut(System.Activities.Design.EditingContext)">
      <summary>Deletes the currently selected items from an editing context.</summary>
      <param name="context">The editing context from which items are removed.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoCut(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem},System.Activities.Design.EditingContext)">
      <summary>Deletes the specified items from the specified editing context.</summary>
      <param name="modelItemsToCut">Items to be cut.</param>
      <param name="context">The editing context from which items are removed.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoPaste(System.Activities.Design.EditingContext)">
      <summary>Pastes items in the clipboard in a default location in the specified editing context. </summary>
      <param name="context">The editing context to which items are pasted.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoPaste(System.Activities.Design.EditingContext,System.Windows.Point,System.Activities.Design.WorkflowViewElement)">
      <summary>Pastes items in the clipboard in the specified location in the specified editing context. </summary>
      <param name="context">The editing context to which items are pasted.</param>
      <param name="pastePoint">The location of the paste operation.</param>
      <param name="pastePointReference">A reference to the paste point.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoPaste(System.Activities.Design.Model.ModelItem,System.Windows.Point,System.Activities.Design.WorkflowViewElement)">
      <summary>Pastes specified items in the specified location.</summary>
      <param name="modelItem">Items to be pasted.</param>
      <param name="pastePoint">The location of the paste operation.</param>
      <param name="pastePointReference">A reference to the paste point.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.GetChildContainers(System.Activities.Design.WorkflowViewElement)">
      <summary>Retrieves all the child containers of the specified view element.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
      <param name="workflowViewElement">The parent view element.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.GetParentViewElement(System.Windows.DependencyObject)">
      <summary>Retrieves the first <see cref="T:System.Activities.Design.WorkflowViewElement" /> instance in the parent chain.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.WorkflowViewElement" />.</returns>
      <param name="obj">The object whose parent is to be returned.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.GetSelectableParentModelItems(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves all the <see cref="T:System.Activities.Design.Model.ModelItem" /> instances in the parent chain.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
      <param name="modelItem">The item whose parent is to be returned.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.RegisterWithParentViewElement(System.Activities.Design.ISourceContainer)">
      <summary>Retrieves the first <see cref="T:System.Activities.Design.WorkflowViewElement" /> instance in the parent chain of the specified container, and adds it as a child container to the view element.</summary>
      <param name="container">The child container to be added.</param>
    </member>
    <member name="F:System.Activities.Design.CutCopyPasteHelper.WorkflowCallbackClipboardFormat">
      <summary>Gets a workflow callback clipboard format, which is unique across all processes.</summary>
    </member>
    <member name="F:System.Activities.Design.CutCopyPasteHelper.WorkflowClipboardFormat">
      <summary>Gets a workflow clipboard format, which is “WorkflowXamlFormat”.</summary>
    </member>
    <member name="T:System.Activities.Design.DefaultCommandExtensionCallback">
      <summary>Provides default key input gestures for most of the Workflow commands. </summary>
    </member>
    <member name="M:System.Activities.Design.DefaultCommandExtensionCallback.#ctor">
      <summary>Initiates a new instance of the <see cref="T:System.Activities.Design.DefaultCommandExtensionCallback" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.DefaultCommandExtensionCallback.ContainsGesture(System.Windows.Input.RoutedCommand,System.Windows.Input.KeyGesture)">
      <summary>Verifies whether a command contains the specified gesture.</summary>
      <returns>Returns <see cref="T:System.Boolean" />. true if <paramref name="cmd" /> contains <paramref name="gesture" />; otherwise, false.</returns>
      <param name="cmd">The command to be checked.</param>
      <param name="gesture">The gesture to be checked.</param>
    </member>
    <member name="M:System.Activities.Design.DefaultCommandExtensionCallback.OnWorkflowCommandLoaded(System.Activities.Design.CommandInfo)">
      <summary>Adds relevant gestures based on the specified workflow command to be loaded.</summary>
      <param name="commandInfo">The workflow command to be loaded.</param>
    </member>
    <member name="T:System.Activities.Design.DefaultTypeArgumentAttribute">
      <summary>Stores a default type for the generic parameters’ use in the Workflow Designer. </summary>
    </member>
    <member name="M:System.Activities.Design.DefaultTypeArgumentAttribute.#ctor(System.Type)">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.DefaultTypeArgumentAttribute" /> class with a specified default type.</summary>
      <param name="type">The default <see cref="T:System.Type" /> for generic parameters used.</param>
    </member>
    <member name="P:System.Activities.Design.DefaultTypeArgumentAttribute.Type">
      <summary>Gets the type stored by the <see cref="T:System.Activities.Design.DefaultTypeArgumentAttribute" />.</summary>
      <returns>The <see cref="T:System.Type" /> stored as a default for generic parameters.</returns>
    </member>
    <member name="T:System.Activities.Design.DeleteHelper">
      <summary>Represents a class that can be used to delete an <see cref="System.Activities.Design.EditingContext" /> object. </summary>
    </member>
    <member name="M:System.Activities.Design.DeleteHelper.CanDelete(System.Activities.Design.EditingContext)">
      <summary>Checks whether the deletion operation can be performed by verifying whether the specified <see cref="System.Activities.Design.EditingContext" /> object is null or empty. </summary>
      <returns>true if the deletion can be performed; otherwise, false.</returns>
      <param name="context">The <see cref="System.Activities.Design.EditingContext" /> object to be deleted.</param>
    </member>
    <member name="M:System.Activities.Design.DeleteHelper.Delete(System.Activities.Design.EditingContext)">
      <summary>Deletes the specified <see cref="System.Activities.Design.EditingContext" /> object.</summary>
      <param name="context">The <see cref="System.Activities.Design.EditingContext" /> object to be deleted.</param>
    </member>
    <member name="T:System.Activities.Design.DragDropHelper">
      <summary>Represents a helper class to assist dragging and dropping inside the workflow designer.</summary>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.AllowDrop(System.Windows.IDataObject,System.Activities.Design.EditingContext,System.Type[])">
      <summary>Gets or sets a value indicating whether the designer can accept data that the user drags onto it.</summary>
      <returns>true if drag-and-drop operations are allowed in the designer; otherwise, false.</returns>
      <param name="draggedDataObject">The data object that is being dragged.</param>
      <param name="context">The <see cref="T:System.Activities.Design.EditingContext" /> for the DragDropHelper.</param>
      <param name="allowedItemTypes">Contains the types that are allowed to be dragged.</param>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.CompletedEffectsFormat">
      <summary>Specifies the desired effects of the completion of a drag-and-drop operation.</summary>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.DoDragMove(System.Activities.Design.WorkflowViewElement,System.Windows.Point)">
      <summary>Allows a UI element to be dragged by a mouse with its left button down over an exposed area of the UI element’s client area.
</summary>
      <returns>A value from the <see cref="T:System.Windows.DragDropEffects" /> enumeration that represents the final effect that was performed during the drag-and-drop operation.</returns>
      <param name="draggedViewElement">The UI element on which the operation happens.</param>
      <param name="referencePoint">The location of the drag point.</param>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.DragAnchorPointFormat">
      <summary>Specifies the format for a drag operation anchor point.</summary>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.DragSourceProperty">
      <summary>Specifies the drag source.</summary>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetDragDropAnchorPoint(System.Windows.DragEventArgs)">
      <summary>Retrieves the anchor point for a drag-and-drop operation.</summary>
      <returns>Returns <see cref="T:System.Windows.Point" />.</returns>
      <param name="e">Contains the drag event data.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetDragDropCompletedEffects(System.Windows.DataObject)">
      <summary>Retrieves the desired effects of the completion of a drag-and-drop operation.</summary>
      <returns>Returns <see cref="T:System.Windows.DragDropEffects" />.</returns>
      <param name="data">Contains the drag operation data.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetDraggedModelItem(System.Windows.DragEventArgs)">
      <summary>Retrieves the object that is being dragged in a drag-and-drop operation.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.Model.ModelItem" />.</returns>
      <param name="e">Contains the drag event data.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetDroppedObject(System.Windows.DependencyObject,System.Windows.DragEventArgs,System.Activities.Design.EditingContext)">
      <summary>Retrieves the object that is being dropped in a drag-and-drop operation.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="dropTarget">The location for the drag.</param>
      <param name="e">Contains the drag event data.</param>
      <param name="context">The editing context.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetSourceContainer(System.Activities.Design.WorkflowViewElement)">
      <summary>Retrieves the source container for the specified workflow view element.</summary>
      <returns>A <see cref="T:System.Windows.UIElement" /> that is the source container for the specified workflow view element.</returns>
      <param name="workflowViewElement">The element from which the source container is retrieved.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetSourceContainer(System.Windows.DragEventArgs)">
      <summary>Retrieves the source container for the UI element being dragged.</summary>
      <returns>An <see cref="T:System.Activities.Presentation.ISourceContainer" /> for the UI element being dragged.</returns>
      <param name="e">Contains the drag event data.</param>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.ModelItemDataFormat">
      <summary>Specifies the format for model item data.</summary>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.SetDragDropCompletedEffects(System.Windows.DragEventArgs,System.Windows.DragDropEffects)">
      <summary>Sets the final effect that is to be performed during the drag-and-drop operation.
</summary>
      <param name="e">Contains the drag event data.</param>
      <param name="completedEffects">The desired effects of a drag-and-drop operation.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.SetSourceContainer(System.Activities.Design.WorkflowViewElement,System.Windows.UIElement)">
      <summary>Sets the source container for the UI element being dragged.</summary>
      <param name="workflowViewElement">The source container.</param>
      <param name="dragSource">The UI element being dragged.</param>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.SourceContainerFormat">
      <summary>Specifies the format for a source container.</summary>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.WorkflowItemTypeNameFormat">
      <summary>Specifies the format for the type name of a workflow item.</summary>
    </member>
    <member name="T:System.Activities.Design.EditorOptionsAttribute">
      <summary>Provides access to the values and properties of editor options.</summary>
    </member>
    <member name="M:System.Activities.Design.EditorOptionsAttribute.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.EditorOptionsAttribute" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.EditorOptionsAttribute.GetOptionValue``1(System.Collections.IEnumerable,System.String,``0)">
      <summary>Gets the default value of an editor option from a collection of options.</summary>
      <returns>The type of editor option.</returns>
      <param name="attributes">The <see cref="T:System.Collections.IEnumerable" /> collection of attributes associated with the editor options.</param>
      <param name="optionName">The name of the option whose value is retrieved.</param>
      <param name="defaultValue">The default value for the option.</param>
      <typeparam name="T">The type of editor option whose value is retrieved.</typeparam>
    </member>
    <member name="P:System.Activities.Design.EditorOptionsAttribute.Name">
      <summary>Gets or sets the name of the editor options.</summary>
      <returns>The name of the editor options.</returns>
    </member>
    <member name="M:System.Activities.Design.EditorOptionsAttribute.TryGetOptionValue(System.Collections.IEnumerable,System.String,System.Object@)">
      <summary>Determines whether the value of the editor option can be retrieved.</summary>
      <returns>true if the value of the option can be retrieved; otherwise, false.</returns>
      <param name="attributes">The <see cref="T:System.Collections.IEnumerable" /> collection of attributes associated with the editor options.</param>
      <param name="optionName">The name of the option whose value is retrieved.</param>
      <param name="optionValue">The value of the editor option if found; otherwise, null.</param>
    </member>
    <member name="P:System.Activities.Design.EditorOptionsAttribute.TypeId">
      <summary>Gets an object used to uniquely identify the editor options attribute.</summary>
      <returns>The <see cref="T:System.Object" /> that uniquely identifies the editor options attribute.</returns>
    </member>
    <member name="P:System.Activities.Design.EditorOptionsAttribute.Value">
      <summary>Gets or sets the value of the editor options.</summary>
      <returns>The <see cref="T:System.Object" /> that identifies the editor options.</returns>
    </member>
    <member name="T:System.Activities.Design.ErrorItem">
      <summary>Represents an error in the Workflow Designer and provides access to the error information.</summary>
    </member>
    <member name="M:System.Activities.Design.ErrorItem.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.ErrorItem" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.ErrorItem.Details">
      <summary>Gets or sets the information details about an error.</summary>
      <returns>Information about the error.</returns>
    </member>
    <member name="P:System.Activities.Design.ErrorItem.ItemType">
      <summary>Gets the type of error item.</summary>
      <returns>The<see cref="T:System.Type" /> of error.</returns>
    </member>
    <member name="P:System.Activities.Design.ErrorItem.Message">
      <summary>Gets or sets the error message.</summary>
      <returns>The message associated with the error.</returns>
    </member>
    <member name="T:System.Activities.Design.ErrorReporting">
      <summary>Represents a class that can be used to generate error messages. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Activities.Design.ErrorReporting.ShowErrorMessage(System.String)">
      <summary>Generates the specified error message.</summary>
      <param name="message">The error message to be displayed.</param>
    </member>
    <member name="T:System.Activities.Design.Feature">
      <summary>Extends the design-time features for your custom controls.</summary>
    </member>
    <member name="M:System.Activities.Design.Feature.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.Feature" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.Feature.Initialize(System.Activities.Design.EditingContext,System.Type)">
      <summary>When implemented in a derived class, associates a type of feature to an editing context.</summary>
      <param name="context">The <see cref="T:System.Activities.Design.EditingContext" /> that contains contextual state information about the designer.</param>
      <param name="modelType">The type of a feature in the editing model.</param>
    </member>
    <member name="T:System.Activities.Design.FeatureAttribute">
      <summary>Stores an object type that represents a <see cref="T:System.Activities.Design.Feature" /> type.</summary>
    </member>
    <member name="M:System.Activities.Design.FeatureAttribute.#ctor(System.Type)">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.FeatureAttribute" /> class that stores a specified type of feature.</summary>
      <param name="type">The <see cref="T:System.Type" /> that is stored and that represents the editing feature.</param>
    </member>
    <member name="P:System.Activities.Design.FeatureAttribute.Type">
      <summary>Gets the stored type that represents the editing feature.</summary>
      <returns>The <see cref="T:System.Type" /> that is stored and that represents the editing feature.</returns>
    </member>
    <member name="T:System.Activities.Design.IActivityTemplateFactory">
      <summary>Defines the factory for creating instances of the <see cref="T:System.Activities.Activity" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.IActivityTemplateFactory.Create">
      <summary>Creates an instance of the <see cref="T:System.Activities.Activity" /> class.</summary>
      <returns>Creates an <see cref="T:System.Activities.Activity" /> object.</returns>
    </member>
    <member name="T:System.Activities.Design.IActivityToolboxService"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.AddCategory(System.String)"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.AddItem(System.String,System.String)"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.EnumCategories"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.EnumItems(System.String)"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.RemoveCategory(System.String)"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.RemoveItem(System.String,System.String)"></member>
    <member name="T:System.Activities.Design.ICommandService">
      <summary>Represents a command interface that is used for integration of workflow designer actions (for example, context menu), with custom-provided implementations, such as property browser service, debugging service, and so on.</summary>
    </member>
    <member name="M:System.Activities.Design.ICommandService.CanExecuteCommand(System.Int32)">
      <summary>Verifies whether the specified command can be executed.</summary>
      <returns>true if the specified command can be executed; otherwise, false.</returns>
      <param name="commandId">The command identifier to be checked.</param>
      <exception cref="T:System.NotSupportedException">The command is not supported.</exception>
    </member>
    <member name="M:System.Activities.Design.ICommandService.ExecuteCommand(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>Executes the command with the specified command identifier and parameters.</summary>
      <param name="commandId">The command identifier to be checked.</param>
      <param name="parameters">The parameters of the command.</param>
      <exception cref="T:System.NotSupportedException">The command is not supported.</exception>
    </member>
    <member name="M:System.Activities.Design.ICommandService.IsCommandSupported(System.Int32)">
      <summary>Returns a Boolean value that indicates whether the specified command identifier is supported.</summary>
      <returns>true if the specified command ID is supported; otherwise, false.</returns>
      <param name="commandId">The command identifier to be checked.</param>
    </member>
    <member name="T:System.Activities.Design.IIntegratedHelpService">
      <summary>Defines the contract between  and the Workflow Designer for integrated help provided.</summary>
    </member>
    <member name="M:System.Activities.Design.IIntegratedHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>Adds the context attribute.</summary>
      <param name="name">The name of the context attribute to add.</param>
      <param name="value">The value of the context attribute to add.</param>
      <param name="keywordType">The <see cref="E:System.ComponentModel.Design.HelpKeywordType" /> that contains identifiers that indicate the type of a Help keyword.</param>
    </member>
    <member name="M:System.Activities.Design.IIntegratedHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>Removes the context attribute.</summary>
      <param name="name">The name of the context attribute to remove.</param>
      <param name="value">The value of the context attribute to remove.</param>
    </member>
    <member name="M:System.Activities.Design.IIntegratedHelpService.ShowHelpFromKeyword(System.String)"></member>
    <member name="M:System.Activities.Design.IIntegratedHelpService.ShowHelpFromUrl(System.String)"></member>
    <member name="T:System.Activities.Design.ISourceContainer">
      <summary>Provides functions to copy, move, delete, and paste objects. </summary>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>Returns a Boolean that indicates whether the specified objects can be pasted. </summary>
      <returns>true if the number of the specified objects is more than 0 and not null; otherwise, false.</returns>
      <param name="itemsToPaste">The item to be pasted.</param>
    </member>
    <member name="P:System.Activities.Design.ISourceContainer.DroppingTypeResolvingOptions"></member>
    <member name="P:System.Activities.Design.ISourceContainer.IsDefaultContainer">
      <summary>Gets a Boolean value that indicates whether this is the default container.</summary>
      <returns>true if this is the default container; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.OnItemMoved(System.Activities.Design.Model.ModelItem)">
      <summary>An event that allows you to move the specified <see cref="T: System.Activities.Design.Model.ModelItem" />. </summary>
      <param name="modelItem">The item moved.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.OnItemsCopied(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>An event that allows you to get the specified  <see cref="T: System.Activities.Design.Model.ModelItem)" /> instances and clones them.</summary>
      <returns>Returns <see cref="T:System.Object" />, which is a clone of <paramref name="itemsToCopy" />.</returns>
      <param name="itemsToCopy">The items cloned.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.OnItemsCut(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>An event that allows you to clone the specified  <see cref="T: System.Activities.Design.Model.ModelItem" /> instances and deletes them from the current container.</summary>
      <returns>Returns <see cref="T:System.Object" />, which is a clone of <paramref name="itemsToCut" />.</returns>
      <param name="itemsToCut">The items cut.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.OnItemsDelete(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>An event that allows you to get the specified  <see cref="T: System.Activities.Design.Model.ModelItem" /> instances and removes them.</summary>
      <param name="itemsToDelete">The items deleted.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Design.WorkflowViewElement)">
      <summary>An event that allows you to paste the specified <see cref="T: System.Activities.Design.Model.ModelItem" /> instances to the specified location.</summary>
      <param name="itemsToPaste">The items   pasted.</param>
      <param name="metadata">Metadata associated with the items   pasted.</param>
      <param name="pastePoint">The location of the paste.</param>
      <param name="pastePointReference">A reference to the paste point.</param>
    </member>
    <member name="T:System.Activities.Design.ISourceContainerEvents">
      <summary>Provides base events for the <see cref="T:System.Activities.Design.ISourceContainer" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.ISourceContainerEvents.ContainerLoaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the specified container is loaded.</summary>
      <param name="container">The container to be loaded.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainerEvents.ContainerUnloaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the specified container is unloaded.</summary>
      <param name="container">The container to be unloaded.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainerEvents.DefaultContainerLoaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the default container is loaded.</summary>
      <param name="container">The default container to be loaded.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainerEvents.DefaultContainerUnloaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the default container is unloaded.</summary>
      <param name="container">The default container to be unloaded.</param>
    </member>
    <member name="T:System.Activities.Design.IWorkflowCommandExtensionCallback">
      <summary>Provides additional functions when a  specified workflow command is loaded. </summary>
    </member>
    <member name="M:System.Activities.Design.IWorkflowCommandExtensionCallback.OnWorkflowCommandLoaded(System.Activities.Design.CommandInfo)">
      <summary>Provides additional functions based on the specified workflow command to be loaded.</summary>
      <param name="commandInfo">The workflow command to be loaded.</param>
    </member>
    <member name="T:System.Activities.Design.MutableKeyValuePair`2">
      <summary>Defines a key/value pair that can be modified. 
</summary>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Activities.Design.MutableKeyValuePair`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.MutableKeyValuePair`2" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.MutableKeyValuePair`2.#ctor(`0,`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.MutableKeyValuePair`2" /> class with the specified key and value.</summary>
      <param name="key">The type of the key. 
</param>
      <param name="value">The type of the value. 

</param>
    </member>
    <member name="P:System.Activities.Design.MutableKeyValuePair`2.Key">
      <summary>Gets or sets the key in the key/value pair.</summary>
    </member>
    <member name="P:System.Activities.Design.MutableKeyValuePair`2.Value">
      <summary>Gets or sets the value in the key/value pair.</summary>
    </member>
    <member name="T:System.Activities.Design.ReadOnlyState">
      <summary>Indicates whether an object is read-only.</summary>
    </member>
    <member name="M:System.Activities.Design.ReadOnlyState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ReadOnlyState" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.ReadOnlyState.IsReadOnly">
      <summary>Gets a value that indicates whether the object is read-only.</summary>
      <returns>true if the object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.ReadOnlyState.ItemType">
      <summary>Gets the type of the current object.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.Activities.Design.TypeResolvingOptionsAttribute">
      <summary>Specifies the options available for resolving types.</summary>
    </member>
    <member name="M:System.Activities.Design.TypeResolvingOptionsAttribute.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.TypeResolvingOptionsAttribute" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.TypeResolvingOptionsAttribute.#ctor(System.Activities.Design.View.TypeResolvingOptions)">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.TypeResolvingOptionsAttribute" /> class with specified type resolving options.</summary>
      <param name="options">The <see cref="T:System.Activities.Design.View.TypeResolvingOptions" /> that are supported.</param>
    </member>
    <member name="P:System.Activities.Design.TypeResolvingOptionsAttribute.TypeResolvingOptions">
      <summary>Gets or sets the options for resolving types.</summary>
      <returns>An instance of <see cref="T:System.Activities.Design.View.TypeResolvingOptions" /> that specifies the options available for resolving types.</returns>
    </member>
    <member name="T:System.Activities.Design.UndoEngine">
      <summary>Provides undo and redo operation implementations for designers.</summary>
    </member>
    <member name="M:System.Activities.Design.UndoEngine.#ctor(System.Activities.Design.EditingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.UndoEngine" /> class.</summary>
      <param name="context">The editing context.</param>
    </member>
    <member name="M:System.Activities.Design.UndoEngine.AddUndoUnit(System.Activities.Design.UndoUnit)">
      <summary>Adds the specified unit to the undo stack.  </summary>
      <param name="unit">The undo unit to add.  </param>
    </member>
    <member name="P:System.Activities.Design.UndoEngine.IsUndoRedoInProgress">
      <summary>Gets a <see cref="T:System.Boolean" /> value indicating whether an undo or redo operation is in process.</summary>
      <returns>true if an undo or redo operation is in process; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.UndoEngine.Redo">
      <summary>Removes the last <see cref="T:System.Activities.Design.UndoUnit" /> instance from the redo stack, and performs a redo operation on the unit. The <see cref="T:System.Activities.Design.UndoUnit" /> instance is then put into the undo stack.</summary>
    </member>
    <member name="M:System.Activities.Design.UndoEngine.Undo">
      <summary>Removes the last <see cref="T:System.Activities.Design.UndoUnit" /> instance from the undo stack, and performs an undo operation on the unit. The <see cref="T:System.Activities.Design.UndoUnit" /> instance is then put into the redo stack.</summary>
    </member>
    <member name="E:System.Activities.Design.UndoEngine.UndoUnitAdded">
      <summary>Occurs when an undo unit is added to the undo stack.</summary>
    </member>
    <member name="E:System.Activities.Design.UndoEngine.UndoUnitDiscarded">
      <summary>Occurs when an undo unit is removed from the undo stack, without first performing an undo operation.</summary>
    </member>
    <member name="T:System.Activities.Design.UndoUnit">
      <summary>Represents a single unit of undoable work. Such a unit is added to an undo stack, and methods are provided to traverse the stack and perform an undo action on each unit.
</summary>
    </member>
    <member name="M:System.Activities.Design.UndoUnit.#ctor(System.Activities.Design.EditingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.UndoUnit" /> class.</summary>
      <param name="context">The editing context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.UndoUnit.ApplyGlobalState">
      <summary>Applies the saved designer as the root designer.</summary>
    </member>
    <member name="P:System.Activities.Design.UndoUnit.Description">
      <summary>Gets or sets the description of this undo unit.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Activities.Design.UndoUnit.Redo"></member>
    <member name="M:System.Activities.Design.UndoUnit.SaveGlobalState">
      <summary>Persists the current root designer.</summary>
    </member>
    <member name="M:System.Activities.Design.UndoUnit.Undo">
      <summary>Undoes the content contained in this undo unit. </summary>
    </member>
    <member name="T:System.Activities.Design.UndoUnitEventArgs">
      <summary>Represents the argument that is passed to the <see cref="E:System.Activities.Design.UndoEngine.UndoUnitAddedevent" /> event.</summary>
    </member>
    <member name="M:System.Activities.Design.UndoUnitEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.UndoUnitEventArgs" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.UndoUnitEventArgs.UndoUnit">
      <summary>Gets or sets the <see cref="T:System.Activities.Design.UndoUnit" /> to be passed to the <see cref="E:System.Activities.Design.UndoEngine.UndoUnitAddedevent" /> event.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.UndoUnit" />.</returns>
    </member>
    <member name="T:System.Activities.Design.UpdatableGenericArgumentsFeature">
      <summary>Associates a design-time editing feature to a specific editing context.</summary>
    </member>
    <member name="M:System.Activities.Design.UpdatableGenericArgumentsFeature.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.UpdatableGenericArgumentsFeature" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.UpdatableGenericArgumentsFeature.Initialize(System.Activities.Design.EditingContext,System.Type)">
      <param name="context">The <see cref="T:System.Activities.Design.EditingContext" /> that contains contextual state information about the designer.</param>
      <param name="modelType">The type of the feature to associate with the editing context.</param>
    </member>
    <member name="T:System.Activities.Design.WindowHelperService">
      <summary>Provides functionalities to register and unregister delegates for event notifications, as well as set ownership for windows.</summary>
    </member>
    <member name="M:System.Activities.Design.WindowHelperService.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WindowHelperService" /> class with the specific handle to a parent window.</summary>
      <param name="hwnd">A handle to a parent window.</param>
    </member>
    <member name="P:System.Activities.Design.WindowHelperService.ParentWindowHwnd">
      <summary>Gets or sets the handle of the parent window.</summary>
      <returns>Returns <see cref="T:System.IntPtr" />.</returns>
    </member>
    <member name="M:System.Activities.Design.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Design.WindowMessage)">
      <summary>Registers the specified delegate for event notifications. </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="callback">The delegate to be registered for event notifications.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)">
      <summary>Assign the window to be the owner of the specified window. </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="source">The owner of <paramref name="target" />.</param>
      <param name="target">The window that is to be owned by <paramref name="source" />.</param>
    </member>
    <member name="M:System.Activities.Design.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Design.WindowMessage)">
      <summary>Unregisters the specified delegate for event notifications. </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="callback">The delegate to be removed from event notifications.</param>
    </member>
    <member name="T:System.Activities.Design.WindowMessage">
      <summary>Represents the method that will handle registering a window message.</summary>
    </member>
    <member name="T:System.Activities.Design.WorkflowCommandExtensionItem">
      <summary>Provides functions to update each workflow's designer command (that is, input gestures collection). You should provide an <see cref="T:System.Activities.Design.IWorkflowCommandExtensionCallback" /> implementation to receive notifications.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowCommandExtensionItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowCommandExtensionItem" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowCommandExtensionItem.#ctor(System.Activities.Design.IWorkflowCommandExtensionCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowCommandExtensionItem" /> class with the specified <see cref="T:System.Activities.Design.IWorkflowCommandExtensionCallback" /> implementation to receive notifications.</summary>
      <param name="callback">An <see cref="T:System.Activities.Design.IWorkflowCommandExtensionCallback" /> implementation to receive notifications.</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowCommandExtensionItem.ItemType">
      <summary>Returns the type of this extension item.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.Activities.Design.WorkflowDesigner">
      <summary>Provides a designer canvas, which renders the visual representation of a workflow model as it is being designed.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowDesigner" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesigner.Context">
      <summary>Gets or sets an <see cref="T:System.Activities.Design.EditingContext" /> object that is a collection of services shared between all elements contained in the designer and used to interact between the host and the designer. Services are published and requested through the <see cref="T:System.Activities.Design.EditingContext" />. </summary>
      <returns>An <see cref="T:System.Activities.Design.EditingContext" /> object.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesigner.ContextMenu">
      <summary>Gets the context menu for this designer.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.ContextMenu" />.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesigner.DebugManagerView">
      <summary>Provides a <see cref="T:System.Activities.Design.Debug.DebuggerService" /> that is used for run-time debugging. </summary>
      <returns>Returns an object that implements <see cref="T:System.Activities.Design.Debug.IDesignerDebugView" />.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.DeserializeString(System.String)">
      <summary>Converts a XAML string into a workflow.</summary>
      <returns>Returns a workflow as an <see cref="T:System.Object" />.</returns>
      <param name="text">The XAML string to convert.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.Flush">
      <summary>Saves the current state of the workflow to the <see cref="P:System.WorkflowModel.Design.WorkflowDesigner.Text" /> property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.IsInErrorState">
      <summary>Gets a Boolean value that indicates if the workflow designer is in error state.</summary>
      <returns>true if the workflow designer is in error state; otherwise, false..</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.Load">
      <summary>Loads a workflow from the XAML contained in the <see cref="P:System.Activities.Design.WorkflowDesigner.Text" /> property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.Load(System.Object)">
      <summary>Loads a workflow.</summary>
      <param name="instance">The root of the workflow to load.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.Load(System.String)">
      <summary>Loads a workflow from the XAML contained in the specified file.</summary>
      <param name="fileName">The file name of the XAML file.</param>
    </member>
    <member name="E:System.Activities.Design.WorkflowDesigner.PendingTextChanged"></member>
    <member name="P:System.Activities.Design.WorkflowDesigner.PropertyInspectorFontAndColorData">
      <summary>Sets the font and color data for the property inspector in a serialized, dictionary format.</summary>
      <returns>Returns a<see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesigner.PropertyInspectorView">
      <summary>Gets the property inspector, which is commonly known as the property grid. </summary>
      <returns>Returns <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.Save(System.String)">
      <summary>Saves the workflow to a XAML file.</summary>
      <param name="fileName">The file name of the XAML file.</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesigner.Text">
      <summary>Gets or sets the XAML string representation of the workflow.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="E:System.Activities.Design.WorkflowDesigner.TextChanged">
      <summary>Occurs when the <see cref="P:System.Activities.Design.WorkflowDesigner.Text" /> property value changes.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesigner.View">
      <summary>Returns a UI element that allows the user to view and edit the workflow visually. This UI element is commonly referred to as the workflow canvas.</summary>
      <returns>Returns a <see cref="T:System.Windows.UIElement" /> object.</returns>
    </member>
    <member name="T:System.Activities.Design.WorkflowDesignerColors">
      <summary>Enables colors and color gradients to be associated with aspects of the elements and shell bars used in the workflow designer user interface.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewBackgroundColor">
      <summary>Gets the color for the designer background.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> for the designer background.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewBackgroundColorKey">
      <summary>Specifies the color key to be used for the designer background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarCaptionActiveColor">
      <summary>Gets the color of the caption for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> active designer shell bar.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> of the caption for the active designer shell bar.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarCaptionActiveColorKey">
      <summary>Specifies the active color key for the caption of the designer shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarCaptionColor">
      <summary>Gets the color of the caption for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> designer shell bar.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> of the caption for the designer shell bar.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarCaptionColorKey">
      <summary>Specifies the color key for the designer shell bar caption. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarColorGradientBeginColor">
      <summary>Gets the beginning color for the color gradient of the <see cref="T:System.Activities.Design.WorkflowViewElement" /> designer shell bar.</summary>
      <returns>The beginning <see cref="T:System.Windows.Media.Color" /> for the color gradient for the designer shell bar.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarColorGradientBeginKey">
      <summary>Specifies the beginning color key for the color gradient of the designer shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarColorGradientEndColor">
      <summary>Gets the ending color for the color gradient of the <see cref="T:System.Activities.Design.WorkflowViewElement" /> designer shell bar.</summary>
      <returns>The ending <see cref="T:System.Windows.Media.Color" /> for the color gradient for the designer shell bar.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarColorGradientEndKey">
      <summary>Specifies the ending color key for the color gradient of the designer shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarControlBackgroundColor">
      <summary>Gets the background color of the <see cref="T:System.Activities.Design.WorkflowViewElement" /> designer shell bar control.</summary>
      <returns>The background <see cref="T:System.Windows.Media.Color" /> of the designer shell bar control.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarControlBackgroundColorKey">
      <summary>Specifies the background color key for the control of the designer shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientBeginColor">
      <summary>Gets the beginning color for the hover color gradient of the <see cref="T:System.Activities.Design.WorkflowViewElement" /> designer shell bar.</summary>
      <returns>The beginning hover <see cref="T:System.Windows.Media.Color" /> for the color gradient for the designer shell bar.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientBeginKey">
      <summary>Specifies the beginning hover color key for the color gradient of the designer shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientEndColor">
      <summary>Gets the ending color for the hover color gradient of the <see cref="T:System.Activities.Design.WorkflowViewElement" /> designer shell bar.</summary>
      <returns>The ending hover <see cref="T:System.Windows.Media.Color" /> for the color gradient for the designer shell bar.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientEndKey">
      <summary>Specifies the ending hover color key for the color gradient of the designer shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientBeginColor">
      <summary>Gets the beginning color of the color gradient for the selected <see cref="T:System.Activities.Design.WorkflowViewElement" /> shell bar.</summary>
      <returns>The beginning <see cref="T:System.Windows.Media.Color" /> for the color gradient for the selected designer shell bar.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientBeginKey">
      <summary>Specifies the beginning color key for the color gradient of the selected designer shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientEndColor">
      <summary>Gets the ending color of the color gradient for the selected <see cref="T:System.Activities.Design.WorkflowViewElement" /> shell bar.</summary>
      <returns>The ending <see cref="T:System.Windows.Media.Color" /> for the color gradient for the selected designer shell bar.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientEndKey">
      <summary>Specifies the ending color key for color gradient of the selected designer shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewStatusBarBackgroundColor">
      <summary>Gets the color for the designer status bar background, using the preset key.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> for the designer status bar background.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewStatusBarBackgroundColorKey">
      <summary>Specifies the color key to be used for the designer status bar background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.FontFamily">
      <summary>Gets the font family for the <see cref="T:System.Activities.Design.WorkflowViewElement" />, using the preset key.</summary>
      <returns>The <see cref="T:System.Windows.Media.FontFamily" /> for the view element.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.FontFamilyKey">
      <summary>Specifies the key to be used for the font family. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.FontSize">
      <summary>Gets the font size for the <see cref="T:System.Activities.Design.WorkflowViewElement" />, using the preset key.</summary>
      <returns>The <see cref="T:System.Double" /> that indicates the font size.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.FontSizeKey">
      <summary>Specifies the key to be used for the font size. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.FontWeight">
      <summary>Gets the font weight to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" />, using the preset key.</summary>
      <returns>The <see cref="T:System.Windows.FontWeight" /> used for the view element.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.FontWeightKey">
      <summary>Specifies the key to be used for the font weight. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementBackgroundColor">
      <summary>Gets the background color for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> using the preset key.</summary>
      <returns>The background <see cref="T:System.Windows.Media.Color" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementBackgroundColorKey">
      <summary>Specifies the color key to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementBorderColor">
      <summary>Gets the color for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> border, using the preset key.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> for the view element border.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementBorderColorKey">
      <summary>Specifies the color key to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> border. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementCaptionColor">
      <summary>Gets the color for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> caption, using the preset key.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> for the view element caption.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementCaptionColorKey">
      <summary>Specifies the color key to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> caption. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementSelectedBackgroundColor">
      <summary>Gets the color for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> selected background, using the preset key.</summary>
      <returns>The background <see cref="T:System.Windows.Media.Color" /> for the view element.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementSelectedBackgroundColorKey">
      <summary>Specifies the color key to be used for the selected background of the <see cref="T:System.Activities.Design.WorkflowViewElement" />. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementSelectedBorderColor">
      <summary>Gets the color for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> selected border, using the preset key.</summary>
      <returns>The selected border <see cref="T:System.Windows.Media.Color" /> for the view element.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementSelectedBorderColorKey">
      <summary>Specifies the color key for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> selected border. This field is constant.</summary>
    </member>
    <member name="T:System.Activities.Design.WorkflowElementDialog">
      <summary>Represents a dialog box for the workflow element.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowElementDialog" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.Context">
      <summary>Gets or sets the editing context associated with this dialog box.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.EditingContext" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowElementDialog.ContextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowElementDialog.Context" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.EnableMaximizeButton">
      <summary>Gets or sets a Boolean value that determines whether the maximize button is enabled.</summary>
      <returns>true if the maximize button is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.EnableMinimizeButton">
      <summary>Gets or sets a Boolean value that determines whether the minimize button is enabled.</summary>
      <returns>true if the minimize button is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.EnableOk(System.Boolean)">
      <summary>Enables or disables the OK button of the dialog based on the specified value.</summary>
      <param name="enabled">The OK button is enabled if this is true; otherwise, it is disabled.</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.ModelItem">
      <summary>Gets or sets the <see cref="T:System.Activities.Design.Model.ModelItem" /> associated with this dialog box.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.Model.ModelItem" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowElementDialog.ModelItemProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowElementDialog.ModelItem" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.OnInitialized(System.EventArgs)">
      <summary>Raises the Initialized event.</summary>
      <param name="e">Contains event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.OnModelItemChanged(System.Object)">
      <summary>When overridden in a derived class, occurs when the <see cref="T:System.Activities.Design.Model.ModelItem" /> is changed.</summary>
      <param name="newItem">The new <see cref="T:System.Activities.Design.Model.ModelItem" />.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.OnWorkflowElementDialogClosed(System.Nullable{System.Boolean})">
      <summary>For derived classes, this method is used for freeing up memory and other clean up operations.</summary>
      <param name="dialogResult">A Boolean value that specifies whether the dialog box returned a result after closing.</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.Owner">
      <summary>Gets or sets the owner of this dialog box.</summary>
      <returns>Returns <see cref="T:System.Windows.DependencyObject" />.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.Show">
      <summary>Displays the dialog window.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.ShowOkCancel">
      <summary>Gets a value that indicates whether the OK or Cancel button is shown.</summary>
      <returns>true if the OK or Cancel button is shown; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.Title">
      <summary>Gets or sets the title of this dialog box.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowElementDialog.TitleProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowElementDialog.Title" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.WindowResizeMode">
      <summary>Gets or sets the resize mode of the window.</summary>
      <returns>Returns a <see cref="T:System.Windows.ResizeMode" /> value..</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowElementDialog.WindowResizeModeProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowElementDialog.WindowResizeMode" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.WindowSizeToContent">
      <summary>Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</summary>
      <returns>Returns a <see cref="T:System.Windows.SizeToContent" /> value..</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowElementDialog.WindowSizeToContentProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowElementDialog.WindowSizeToContent" /> dependency property.</summary>
    </member>
    <member name="T:System.Activities.Design.WorkflowElementDialogWindow">
      <summary>Represents the dialog window of a workflow element.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialogWindow.#ctor(System.Activities.Design.WorkflowElementDialog,System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="M:System.Activities.Design.WorkflowElementDialogWindow.InitializeComponent">
      <summary>Initializes the dialog window.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialogWindow.OnInitialized(System.EventArgs)"></member>
    <member name="M:System.Activities.Design.WorkflowElementDialogWindow.OnSourceInitialized(System.EventArgs)"></member>
    <member name="M:System.Activities.Design.WorkflowElementDialogWindow.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content.</summary>
      <param name="connectionId">The connection ID.</param>
      <param name="target">The target.</param>
    </member>
    <member name="T:System.Activities.Design.WorkflowFileItem">
      <summary>Represents a file context item.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowFileItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowFileItem" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowFileItem.ItemType">
      <summary>Returns the item type for this file item.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowFileItem.LoadedFile">
      <summary>Returns the name of the file that is being loaded.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Activities.Design.WorkflowItemPresenter">
      <summary>Provides a visual editor to edit ModelItem objects, and provides an area for the user to drag and drop, and otherwise edit composed elements.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowItemPresenter" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemPresenter.AllowedItemType">
      <summary>Gets or sets the AllowedItemType.</summary>
      <returns>A Type that contains the allowed item.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemPresenter.AllowedItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemPresenter.AllowedItemType" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemPresenter.DroppingTypeResolvingOptions">
      <summary>Gets and sets the <see cref="T:System.Activities.Design.View.TypeResolvingOptions" /> for the <see cref="T:System.Activities.Design.WorkflowItemPresenter" />.</summary>
      <returns>Returns a <see cref="T:System.Activities.Design.View.TypeResolvingOptions" />..</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemPresenter.DroppingTypeResolvingOptionsProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemPresenter.DroppingTypeResolvingOptions" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemPresenter.HintText">
      <summary>Gets or sets the string that contains the hint text for the <see cref="T:System.Activities.Design.WorkflowItemPresenter" /> control.</summary>
      <returns>The hint text for the <see cref="T:System.Activities.Design.WorkflowItemPresenter" /> control.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemPresenter.HintTextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemPresenter.HintText" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemPresenter.IsDefaultContainer">
      <summary>Gets or sets a value that indicates whether this is the default container.</summary>
      <returns>true if this is the default container; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemPresenter.IsDefaultContainerProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemPresenter.IsDefaultContainer" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemPresenter.Item">
      <summary>Gets or sets the current item of the <see cref="T:System.Activities.Design.WorkflowItemPresenter" /> control.</summary>
      <returns>The ModelItem associated with the <see cref="T:System.Activities.Design.WorkflowItemPresenter" /> control.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemPresenter.ItemProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemPresenter.Items" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>Returns a Boolean that indicates whether the specified objects can be pasted. 

</summary>
      <returns>true if the number of the specified objects is more than 0 and not null; otherwise, false.</returns>
      <param name="itemsToPaste">Objects to be pasted.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#OnItemMoved(System.Activities.Design.Model.ModelItem)">
      <summary>Occurs when the specified model item is changed.</summary>
      <param name="modelItem">The model item that is changed.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#OnItemsCopied(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Occurs when the specified  <see cref="T:System.Activities.Design.Model.ModelItem" /> instances are cloned.</summary>
      <returns>A clone of <paramref name="itemsToCopy" />.</returns>
      <param name="itemsToCopy">The <see cref="T:System.Activities.Design.Model.ModelItem" /> instances to be copied.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#OnItemsCut(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Clones the specified <see cref="T:System.Activities.Design.Model.ModelItem" /> instances and deletes them from the current container. 

</summary>
      <returns>A clone of <paramref name="itemsToCut" />.</returns>
      <param name="itemsToCut">The items to be cut.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#OnItemsDelete(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Gets the specified <see cref="T:System.Activities.Design.Model.ModelItem" /> instances and removes them.</summary>
      <param name="itemsToDelete">The items to be deleted.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Design.WorkflowViewElement)">
      <summary>Occurs when the specified ModelItem instance is pasted to the specified location.</summary>
      <param name="itemsToPaste">The item to be pasted.
</param>
      <param name="metaData">Metadata associated with the item to be pasted.
</param>
      <param name="pastePoint">The location of the paste.</param>
      <param name="pastePointReference">A reference to the paste point.</param>
    </member>
    <member name="T:System.Activities.Design.WorkflowItemsPresenter">
      <summary>Represents a control that can be used to present a collection of objects on a design surface.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.AllowedItemType">
      <summary>Gets and sets the AllowedItemType.</summary>
      <returns>A Type that contains the allowed item.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.AllowedItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.AllowedItemType" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>Returns a Boolean that indicates whether the specified objects can be pasted. 
</summary>
      <returns>true if the number of the specified objects is more than 0 and not null; otherwise, false.</returns>
      <param name="itemsToPaste">Objects to be pasted.</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.DroppingTypeResolvingOptions">
      <summary>Gets and sets the <see cref="T:System.Activities.Design.View.TypeResolvingOptions" /> for the <see cref="T:System.Activities.Design.WorkflowItemPresenter" />.</summary>
      <returns>Returns a <see cref="T:System.Activities.Design.View.TypeResolvingOptions" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.DroppingTypeResolvingOptionsProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemPresenter.DroppingTypeResolvingOptions" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.FooterTemplate">
      <summary>Gets or sets the DataTemplate that defines how the footer section of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</summary>
      <returns>A DataTemplate that defines how the footer section of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.FooterTemplateProperty">
      <summary>Identifies the <see cref="P:System.WorkflowModel.Design.WorkflowItemsPresenter.FooterTemplate" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.HeaderTemplate">
      <summary>Gets or sets the DataTemplate that defines how the header section of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</summary>
      <returns>A DataTemplate that defines how the header section of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.HeaderTemplateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.HeaderTemplate" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.HintText">
      <summary>Gets or sets the string that contains the hint text for the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control.</summary>
      <returns>The hint text for the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.HintTextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.HintText" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.IndexProperty">
      <summary>Identifies the <see cref="F:System.Activities.Design.WorkflowItemsPresenter.IndexProperty" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.IsDefaultContainer">
      <summary>Returns a Boolean value that indicates if this is the default container.</summary>
      <returns>true if this is if this is the default container; otherwise, false..</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.IsDefaultContainerProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.IsDefaultContainer" />dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.Items">
      <summary>Gets or sets the collection used to generate the content of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" />.</summary>
      <returns>A ModelItemCollection used to generate the content of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" />.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.ItemsPanel">
      <summary>Gets or sets the template that defines the panel that controls the layout of items.</summary>
      <returns>An ItemsPanelTemplate that defines the panel to use for the layout of the items.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.ItemsPanelProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.ItemsPanel" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.ItemsProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.Items" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Activities.Design.WorkflowItemsPresenter" />-specific AutomationPeer implementation for the  infrastructure. Implement this method in your derived class to add class handling for this event.</summary>
      <returns>The type-specific AutomationPeer implementation.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Occurs when an object is dragged into the control's bounds.</summary>
      <param name="e">Contains event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Occurs when an object is dragged over the control's bounds.</summary>
      <param name="e">Contains event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an object is dragged into the bounds of a <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control. Implement this method in your derived class to add class handling for this event.</summary>
      <param name="e">The DragEventArgs instance that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnInitialized(System.EventArgs)">
      <summary>Invoked when a <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> object is initialized. Implement this method in your derived class to add class handling for this event.</summary>
      <param name="e">The EventArgs instance that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnItemMoved(System.Activities.Design.Model.ModelItem)">
      <summary>Informs the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> that a <see cref="T:System.Activities.Design.Model.ModelItem" /> was moved.</summary>
      <param name="modelItem">The <see cref="T:System.Activities.Design.Model.ModelItem" /> that was moved.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnItemsCopied(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Occurs when the specified  <see cref="T:System.Activities.Design.Model.ModelItem" /> instances are cloned.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="itemsToCopy">The <see cref="T:System.Activities.Design.Model.ModelItem" /> instances to be copied.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnItemsCut(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Occurs when the specified  <see cref="T:System.Activities.Design.Model.ModelItem" /> instances are cut.</summary>
      <returns>A clone of <paramref name="itemsToCut" />.</returns>
      <param name="itemsToCut">The <see cref="T:System.Activities.Design.Model.ModelItem" /> instances to be cut.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnItemsDelete(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Occurs when the specified  <see cref="T:System.Activities.Design.Model.ModelItem" /> instances are deleted.</summary>
      <param name="itemsToDelete">The <see cref="T:System.Activities.Design.Model.ModelItem" /> instances to be deleted.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Design.WorkflowViewElement)">
      <summary>Pastes the specified <see cref="T:System.Activities.Design.Model.ModelItem" /> instances to the specified location. </summary>
      <param name="itemsToPaste">The items to be pasted.</param>
      <param name="metaData">Metadata associated with the items to be pasted.

</param>
      <param name="pastePoint">The location of the paste.

</param>
      <param name="pastePointReference">A reference to the paste point.
</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.SpacerTemplate">
      <summary>Gets or sets the DataTemplate that defines how the spacer of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</summary>
      <returns>A DataTemplate that defines how the spacer of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.SpacerTemplateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.SpacerTemplate" /> dependency property.</summary>
    </member>
    <member name="T:System.Activities.Design.WorkflowViewElement">
      <summary>Base class for any workflow UI element that visually represents an underlying model item.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowViewElement" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ActiveSourceContainer">
      <summary>Gets the active source container associated with the workflow view element.</summary>
      <returns>The <see cref="T:System.Activities.Design.ISourceContainer" /> associated with this element.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.Collapsible">
      <summary>Gets or sets a value that indicates whether the element can be collapsed.</summary>
      <returns>true if the element can be collapsed; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.ContainerLoaded(System.Activities.Design.ISourceContainer)">
      <summary>Adds the container to the list of containers associated with the workflow view element.</summary>
      <param name="container">The <see cref="T:System.Activities.Design.ISourceContainer" /> that is loaded.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="container" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.ContainerUnloaded(System.Activities.Design.ISourceContainer)">
      <summary>Removes the container from the list of containers associated with the workflow view element.</summary>
      <param name="container">The <see cref="T:System.Activities.Design.ISourceContainer" /> that is unloaded.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="container" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.Context">
      <summary>Gets or sets the editing context that is shared by all elements contained in a workflow designer.</summary>
      <returns>The <see cref="T:System.Activities.Design.EditingContext" /> object for the workflow designer that contains the workflow view element.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowViewElement.ContextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowViewElement.Context" /> dependency property. This is a read-only field.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.DefaultContainerLoaded(System.Activities.Design.ISourceContainer)">
      <summary>Sets the default source container to a specified source container.</summary>
      <param name="container">The <see cref="T:System.Activities.Design.ISourceContainer" /> to which the default container is set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="container" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.DefaultContainerUnloaded(System.Activities.Design.ISourceContainer)">
      <summary>Sets the default source container to null if it is equal to a specified source container.</summary>
      <param name="container">The <see cref="T:System.Activities.Design.ISourceContainer" /> with which the default container is compared.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="container" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.DefaultSourceContainer">
      <summary>Gets the default source container associated with the workflow view element.</summary>
      <returns>The <see cref="T:System.Activities.Design.ISourceContainer" /> object associated with the element.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.Designer">
      <summary>Gets the designer associated with the workflow view element.</summary>
      <returns>The <see cref="T:System.Activities.Design.View.DesignerView" /> associated with the element.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ExpandState">
      <summary>Gets or sets a value that indicates whether the state of the element can be expanded.</summary>
      <returns>true if the state of the element can be expanded; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowViewElement.ExpandStateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowViewElement.ExpandState" /> dependency property. This is a read-only field.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.GetAutomationHelpText">
      <summary>When implemented in a derived class, retrieves the automation help text.</summary>
      <returns>The default implementation is to return an empty <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.GetAutomationIdMemberName">
      <summary>When implemented in a derived class, gets the name of a property of the model item associated with the element that is used as an automation ID. </summary>
      <returns>The name to use as an automation ID. The base class always returns null.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.IsReadOnly">
      <summary>Gets or sets a value that indicates whether the workflow view element is read only.</summary>
      <returns>true if the element is read only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.IsRootDesigner">
      <summary>Gets or sets a value that indicates whether this is the root designer for this element.</summary>
      <returns>true if this is the root designer; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ModelItem">
      <summary>Gets or sets the underlying <see cref="T:System.Activities.Design.Model.ModelItem" /> object associated with the workflow view element.</summary>
      <returns>A <see cref="T:System.Activities.Design.Model.ModelItem" /> object that is a wrapper around a model instance or an in-memory representation of the underlying workflow.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowViewElement.ModelItemProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowViewElement.ModelItem" /> dependency property. This is a read-only field.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnContextMenuLoaded(System.Windows.Controls.ContextMenu)">
      <summary>Invoked when the context menu is loaded. Implement this method in a derived class to handle this event. </summary>
      <param name="menu">The <see cref="T:System.Windows.Controls.ContextMenu" /> that is loaded.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Activities.Design.WorkflowViewElement" />-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation for the  infrastructure.</summary>
      <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Raises the <see cref="T:System.Windows.UIElement.OnDragEnter" /> event.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Raises the <see cref="T:System.Windows.UIElement.OnDragOver" /> event.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an element receives keyboard focus. Implement this method in a derived class to handle this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnInitialized(System.EventArgs)">
      <summary>Sets bindings and raises the initialized event.</summary>
      <param name="e">The <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnModelItemChanged(System.Object)">
      <summary>Invoked when the underlying model item is changed. Implement this method in a derived class to handle this event.</summary>
      <param name="newItem">An <see cref="T:System.Object" /> that represents the changed state of the model item.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when the mouse button is pressed.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance that contains the event data. This event data reports details about the mouse button that was pressed and the state handled.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when the mouse is moved.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> instance that contains the event data. </param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when the mouse button is released. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance that contains the event data. The event data reports that the mouse button was released.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled drag attached to the specified event reaches enters an element in its route that is derived from this class..</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled drag attached to the specified event reaches leaves an element in its route that is derived from this class.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled mouse release attached to the specified event reaches an element in its route that is derived from this class.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were released.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnReadOnlyChanged(System.Boolean)">
      <summary>Invoked when the read-only property is changed.</summary>
      <param name="isReadOnly">true when the read-only property is changed; otherwise, false.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnShowExpandedChanged(System.Boolean)">
      <summary>Invoked when the show expanded property is changed.</summary>
      <param name="newValue">true when the show expanded property is changed; otherwise, false.</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.PinState">
      <summary>Gets or sets a value that indicates whether the state of the workflow view element requires a pin.</summary>
      <returns>true if the state requires a pin; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowViewElement.PinStateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowViewElement.PinState" /> dependency property. This is a read-only field.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ShowExpanded">
      <summary>Gets a value that indicates whether the workflow view element can be shown in an expanded form.</summary>
      <returns>true if the element can be expanded; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowViewElement.ShowExpandedProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowViewElement.ShowExpanded" /> dependency property. This is a read-only field.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.SourceContainers">
      <summary>Gets the source containers associated with the workflow view element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> that contains the <see cref="T:System.Activities.Design.SourceContainers" /> associated with the element.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ViewService">
      <returns>Gets the <see cref="T:System.Activities.Design.Services.ViewService" /> associated with the workflow view element. </returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ViewStateService">
      <summary>Gets the <see cref="T:System.Activities.Design.View.ViewStateService" /> defined in the <see cref="T:System.Activities.Design.EditingContext" />. A shortcut to this property is by accessing <see cref="P:System.Activities.Design.EditingContext.Services" />.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ViewStateService" />.</returns>
    </member>
    <member name="T:System.Activities.Design.Debug.BreakpointInfo">
      <summary>Handles breakpoint location and type information that is used in conjunction with the debugging of an activity.</summary>
    </member>
    <member name="M:System.Activities.Design.Debug.BreakpointInfo.#ctor(System.Activities.Debugger.SourceLocation,System.Activities.Design.BreakpointTypes)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.Debug.BreakpointInfo" /> class that handles a breakpoint and <see cref="P:System.Activities.Design.Debug.BreakpointInfo.BreakpointType" /> objects, in conjunction with debugging an activity.</summary>
      <param name="sourceLocation">The location in the source code where a breakpoint is set.</param>
      <param name="breakpointType">The breakpoint type setting.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.BreakpointInfo.BreakpointType">
      <summary>Gets or sets the enumerated list of breakpoint types.</summary>
      <returns>An enumeration of breakpoint types.</returns>
    </member>
    <member name="P:System.Activities.Design.Debug.BreakpointInfo.SourceLocation">
      <summary>Gets or sets the location of a breakpoint in the XAML form for the activity object instance.</summary>
      <returns>A row and column location in a XAML file.</returns>
    </member>
    <member name="T:System.Activities.Design.Debug.DebuggerService">
      <summary>Manages the placement of breakpoints for a debugging process.</summary>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.#ctor(System.Activities.Design.EditingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.Debug.DebuggerService" /> class with the specified editing context.</summary>
      <param name="context">The activity designer contextual state.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.DebuggerService.CurrentContext">
      <summary>Sets the current scope of execution in the source file.</summary>
      <returns>A position in the source file that marks the start of execution.</returns>
    </member>
    <member name="P:System.Activities.Design.Debug.DebuggerService.CurrentLocation">
      <summary>Sets the current location of execution.</summary>
      <returns>A location in the source file.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.DeleteBreakpoint(System.Activities.Debugger.SourceLocation)">
      <summary>Deletes a breakpoint from its location in the source file.</summary>
      <param name="sourceLocation">A location in the source file.</param>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.GetBreakpointLocations">
      <summary>Returns a list of the latest breakpoint locations.</summary>
      <returns>A list of breakpoints of type <see cref="P:System.Activities.Design.Debug.BreakpointInfo.SourceLocation" /> culled from the source file.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.GetExactLocation(System.Activities.Debugger.SourceLocation)">
      <summary>Returns an exact source file location based on the start and end line numbers of the activity in its serialized Xaml form.</summary>
      <returns>An exact location in the source file.</returns>
      <param name="approximateLocation">A source file location known to be inexact.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.DebuggerService.HideSourceFileName"></member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.InsertBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Design.BreakpointTypes)">
      <summary>Inserts a new breakpoint of the specified type at the specified location.</summary>
      <param name="sourceLocation">The location in the source file that receives the new breakpoint.</param>
      <param name="breakpointType">The type of the breakpoint; for example, None, Enabled, Bounded, or Conditional.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.DebuggerService.IsDebugging">
      <summary>Sets an indicator that signals that debugging is active.</summary>
      <returns>true while debugging is active; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.ResetBreakpoints">
      <summary>Resets breakpoints and prepares for breakpoint refresh.</summary>
    </member>
    <member name="P:System.Activities.Design.Debug.DebuggerService.SelectedLocation">
      <summary>Gets the currently selected location from the designer.</summary>
      <returns>The position in the source file that is currently selected.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.UpdateBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Design.BreakpointTypes)">
      <summary>Updates the appearance of a specified breakpoint to show the specified type.</summary>
      <param name="sourceLocation">The location of the breakpoint to update.</param>
      <param name="newBreakpointType">A new breakpoint type from the <see cref="T:System.Activities.Design.BreakpointTypes" /> enumeration.</param>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.UpdateSourceLocations(System.Collections.Generic.Dictionary{System.Object,System.Activities.Debugger.SourceLocation})">
      <summary>Collects the new mapping of model item and breakpoints from SourceLocationMapping.</summary>
      <param name="newSourceLocationMapping">A list of model item and breakpoint pairs.</param>
    </member>
    <member name="T:System.Activities.Design.Debug.IDesignerDebugView">
      <summary>When implemented in a derived class, provides functionality for an activity designer debugger view.</summary>
    </member>
    <member name="P:System.Activities.Design.Debug.IDesignerDebugView.CurrentContext">
      <summary>When implemented in a derived class, sets the scope of execution within the source file.</summary>
      <returns>The starting point location for execution within the source file.</returns>
    </member>
    <member name="P:System.Activities.Design.Debug.IDesignerDebugView.CurrentLocation">
      <summary>When implemented in a derived class, sets the current location of execution in a file being processed by the debugger.</summary>
      <returns>
        <see cref="T:System.Activities.Debugger.SourceLocation" />.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.DeleteBreakpoint(System.Activities.Debugger.SourceLocation)">
      <summary>When implemented in a derived class, removes a breakpoint at the specified location in the source file.</summary>
      <param name="sourceLocation">A point within a source file, defined by an intersection of row and column positions in the file contents.</param>
    </member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.GetBreakpointLocations">
      <summary>When implemented in a derived class, returns a list of currently set  breakpoint location-and-type pairs.</summary>
      <returns>A list of location-and-type pairs.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.GetExactLocation(System.Activities.Debugger.SourceLocation)">
      <summary>When implemented in a derived class, returns an exact location in a source file based upon an approximate location.</summary>
      <returns>An exact location within the source file.</returns>
      <param name="approximateLocation">A position within a source file that is known to be inexact.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.IDesignerDebugView.HideSourceFileName"></member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.InsertBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Design.BreakpointTypes)">
      <summary>When implemented in a derived class, places a breakpoint at the specified location in a file.</summary>
      <param name="sourceLocation">A point within a source file, defined by an intersection of row and column positions in the file contents.</param>
      <param name="breakpointType">Member of an enumeration of breakpoint types which may include Bounded, Conditional, Enabled, and None.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.IDesignerDebugView.IsDebugging">
      <summary>When implemented in a derived class, sets an indicator that signals whether debugging is enabled.</summary>
      <returns>true if debugging is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.ResetBreakpoints">
      <summary>When implemented in a derived class, resets the position of the breakpoint in a file.</summary>
    </member>
    <member name="P:System.Activities.Design.Debug.IDesignerDebugView.SelectedLocation">
      <summary>When implemented in a derived class, gets the selected <see cref="P:System.Activities.Design.Debug.BreakpointInfo.SourceLocation" />.</summary>
      <returns>A point within a source file, defined by an intersection of row and column positions in the file contents.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.UpdateBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Design.BreakpointTypes)">
      <summary>When implemented in a derived class, updates the type of the breakpoint at a specified location in a file.</summary>
      <param name="sourceLocation">A point within a source file, defined by an intersection of row and column positions in the file contents.</param>
      <param name="breakpointType">A specified type of breakpoint; for example, line, method, or exception breakpoints.</param>
    </member>
    <member name="T:System.Activities.Design.Hosting.IMultiTargetingSupportService"></member>
    <member name="M:System.Activities.Design.Hosting.IMultiTargetingSupportService.GetReflectionAssembly(System.Reflection.AssemblyName)"></member>
    <member name="M:System.Activities.Design.Hosting.IMultiTargetingSupportService.GetRuntimeType(System.Type)"></member>
    <member name="M:System.Activities.Design.Hosting.IMultiTargetingSupportService.IsSupportedType(System.Type)"></member>
    <member name="T:System.Activities.Design.ModelTree.AttachedPropertiesService">
      <summary>Attaches properties to the current instance.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedPropertiesService.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.ModelTree.AttachedPropertiesService" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedPropertiesService.AddProperty(System.Activities.Design.ModelTree.AttachedProperty)">
      <summary>Adds the specified property to the properties of the current instance.</summary>
      <param name="property">The property to add. </param>
    </member>
    <member name="T:System.Activities.Design.ModelTree.AttachedProperty">
      <summary>Describes an attached property.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ModelTree.AttachedProperty" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty.GetValue(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves the value of the specified model item.</summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the value of the model item..</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty.IsBrowsable">
      <summary>Gets or sets a Boolean value indicating whether the <see cref="T:System.Activities.Design.ModelTree.AttachedProperty" /> is browsable. </summary>
      <returns>true if the <see cref="T:System.Activities.Design.ModelTree.AttachedProperty" /> is browsable; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty.IsReadOnly">
      <summary>Gets a value that determines whether the attached property is read-only.</summary>
      <returns>true if the property is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty.Name">
      <summary>Gets or sets the name of the property.</summary>
      <returns>Returns a <see cref="T:System.String" /> that contains the name of the property..</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty.NotifyPropertyChanged(System.Activities.Design.Model.ModelItem)">
      <summary>Creates a notification that indicates that the specified model item has changed. </summary>
      <param name="modelItem">The item that has changed.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty.OwnerType">
      <summary>Gets or sets the owner type.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the owner type..</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty.ResetValue(System.Activities.Design.Model.ModelItem)">
      <summary>Resets the specified model item to the default value.</summary>
      <param name="modelItem">The model item to reset.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty.SetValue(System.Activities.Design.Model.ModelItem,System.Object)">
      <summary>Sets the specified model item to the specified value.</summary>
      <param name="modelItem">The model item to set.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty.Type">
      <summary>Gets the type. </summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the type..</returns>
    </member>
    <member name="T:System.Activities.Design.ModelTree.AttachedProperty`1">
      <summary>Contains a collection of attached properties. </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ModelTree.AttachedProperty`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty`1.Getter">
      <summary>Gets or sets the getter.</summary>
      <returns>Returns a <see cref="T:System.Func`2" /> that contains the getter..</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty`1.GetValue(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves the value of the specified model item.</summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the value..</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty`1.IsReadOnly">
      <summary>Gets a value that determines if the collection is read-only.</summary>
      <returns>Returns true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty`1.ResetValue(System.Activities.Design.Model.ModelItem)">
      <summary>Resets the specified model item to the default value.</summary>
      <param name="modelItem">The model item to reset.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty`1.Setter">
      <summary>Gets or sets the setter.</summary>
      <returns>Returns a <see cref="T:System.Action`2" /> that contains the setter..</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty`1.SetValue(System.Activities.Design.Model.ModelItem,System.Object)">
      <summary>Sets the specified model item to the specified value.</summary>
      <param name="modelItem">The model item to set.</param>
      <param name="Value">The value to set.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty`1.Type">
      <summary>Gets the type of the collection.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the type of the collection..</returns>
    </member>
    <member name="T:System.Activities.Design.ModelTree.Change">
      <summary>Abstract class that, when implemented, describes a change to the model tree. </summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.Change.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.ModelTree.Change" /> class. </summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.Change.Apply">
      <summary>When implemented in a derived class, applies the change to the current instance.</summary>
    </member>
    <member name="P:System.Activities.Design.ModelTree.Change.Description">
      <summary>When implemented in a derived class, gets a description of the change.</summary>
      <returns>Returns a <see cref="T:System.String" /> that contains a description of the change. .</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.Change.GetInverse">
      <summary>When implemented in a derived class, retrieves the inverse of the change. </summary>
      <returns>Returns a <see cref="T:System.Activities.Design.ModelTree.Change" /> that contains the inverse of the current instance. .</returns>
    </member>
    <member name="T:System.Activities.Design.ModelTree.EditingScope">
      <summary>Describes the editing scope.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.EditingScope.CanComplete">
      <summary>Determines whether the current editing scope instance can complete.</summary>
      <returns>true if the editing scope can complete; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.ModelTree.EditingScope.Changes">
      <summary>Gets a list of changes.</summary>
      <returns>Returns a <see cref="T:System.Collections.Generic.List`1" /> that contains the changes.</returns>
    </member>
    <member name="P:System.Activities.Design.ModelTree.EditingScope.HasEffectiveChanges">
      <summary>Gets  a Boolean that specifies whether changes have been applied to the editing scope. </summary>
      <returns>true if changes have been applied to the editing scope; otherwise, false..</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.EditingScope.OnComplete">
      <summary>Raises the Complete event.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.EditingScope.OnRevert(System.Boolean)">
      <summary>Raises the Revert event.</summary>
      <param name="finalizing">Not used in this implementation.</param>
    </member>
    <member name="T:System.Activities.Design.ModelTree.EditingScopeEventArgs">
      <summary>Provides data for the <see cref="E:System.Activities.Design.ModelTree.ModelTreeManager.EditingScopeCompleted" /> event.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.EditingScopeEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ModelTree.EditingScopeEventArgs" /> class. </summary>
    </member>
    <member name="P:System.Activities.Design.ModelTree.EditingScopeEventArgs.EditingScope">
      <summary>Gets or sets the associated <see cref="T:System.Activities.Design.ModelTree.EditingScope" />.</summary>
      <returns>Returns an <see cref="T:System.Activities.Design.ModelTree.EditingScope" />.</returns>
    </member>
    <member name="T:System.Activities.Design.ModelTree.ModelItemExtensions">
      <summary>Implements extensions to the base model item.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.FindParentModelItem(System.Activities.Design.Model.ModelItem,System.Type)">
      <summary>Determines the parent model item, based on the specified item and parent type.</summary>
      <returns>Returns a <see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the parent type.</returns>
      <param name="item">The model item.</param>
      <param name="parentType">The parent type. This parameter cannot be null.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetEditingContext(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves the editing context of the specified model item.</summary>
      <returns>Returns a <see cref="T:System.Activities.Design.EditingContext" /> that contains the editing context.</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetModelItemFromPath(System.String,System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves a model item from the specified path and root.</summary>
      <returns>Returns a <see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the model item..</returns>
      <param name="path">The path.</param>
      <param name="root">The root.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetModelPath(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves the path of the specified model item.</summary>
      <returns>Returns a <see cref="T:System.String" /> that contains the path.</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetParentEnumerator(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves an enumerator that contains the parents of the specified model item.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the parent items.</returns>
      <param name="item">The item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetParentEnumerator(System.Activities.Design.Model.ModelItem,System.Func{System.Activities.Design.Model.ModelItem,System.Boolean})">
      <summary>Retrieves an enumerator that contains the parents of the specified model item.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the parents..</returns>
      <param name="item">The item.</param>
      <param name="continueEnumerationPredicate">Content to be provided.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetUniqueName(System.Activities.Design.Model.ModelItemCollection,System.String,System.Func{System.Activities.Design.Model.ModelItem,System.String})">
      <summary>Retrieves the unique name of the item, using the specified collection, default prefix, and name getter.</summary>
      <returns>Returns a <see cref="T:System.String" /> containing the unique name..</returns>
      <param name="collection">The collection containing the item. </param>
      <param name="nameDefaultPrefix">The default name prefix of the item.</param>
      <param name="nameGetter">The name getter.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetUniqueName(System.Activities.Design.Model.ModelItemDictionary,System.String,System.Func{System.Activities.Design.Model.ModelItem,System.String})">
      <summary>Gets the unique name of an item based on the specified dictionary, default prefix, and name getter.</summary>
      <returns>Returns a <see cref="T:System.String" /> containing the unique name of the item..</returns>
      <param name="collection">The collection containing the item.</param>
      <param name="nameDefaultPrefix">The default prefix.</param>
      <param name="nameGetter">The name getter.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.IsAssignableFrom``1(System.Activities.Design.Model.ModelItem)">
      <summary>Determines whether an instance of a given Type can be assigned from an instance of the specified <see cref="P:System.Activities.Design.Model.ModelItem.ItemType" />.</summary>
      <returns>true if the type of <paramref name="T" /> and the current type represent the same type, or if the current type is in the inheritance hierarchy of <paramref name="T" />, or if the current type is an interface that <paramref name="T" /> implements, or if <paramref name="T" /> is a generic type parameter and the current type represents one of the constraints of <paramref name="T" />. false if none of these conditions are true, or if <paramref name="T" /> is a null reference (Nothing in Visual Basic).</returns>
      <param name="item">The <see cref="T:System.Activities.Design.Model.ModelItem" /> to compare with<paramref name="T" />.</param>
      <typeparam name="T">The type to compare with the <see cref="P:System.Activities.Design.Model.ModelItem.ItemType" />.</typeparam>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.SwitchKeys(System.Activities.Design.Model.ModelItemDictionary,System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItem)">
      <summary>Replaces the specified old key with the specified new key in the specified dictionary.</summary>
      <returns>true if the attempt was successful; otherwise, false.</returns>
      <param name="dictionary">The dictionary. This parameter cannot be null.</param>
      <param name="oldKey">The key to replace. This parameter cannot be null.</param>
      <param name="newKey">The new key. This parameter cannot be null.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.SwitchKeys(System.Activities.Design.Model.ModelItemDictionary,System.Object,System.Object,System.Activities.Design.Model.ModelItem@)">
      <summary>Replaces the specified old key with the specified new key in the specified dictionary, and if applicable returns the item of the new key.</summary>
      <returns>true if the attempt was successful; otherwise, false.</returns>
      <param name="dictionary">The dictionary. This parameter cannot be null.</param>
      <param name="oldKey">The key to replace. This parameter cannot be null.</param>
      <param name="newKey">The new key. This parameter cannot be null.</param>
      <param name="newKeyItem">When this method returns, contains the new key item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.TryGetPropertyValue(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItem@,System.String[])">
      <summary>Attempts to retrieve the value of the specified item at the specified path.</summary>
      <returns>true if the attempt was successful; otherwise, false.</returns>
      <param name="item">The item.</param>
      <param name="value">When this method returns, contains the value in a model item.</param>
      <param name="path">The path to the item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.TryGetPropertyValue(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItemCollection@,System.String[])">
      <summary>Attempts to retrieve the value of the specified item at the specified path.</summary>
      <returns>true if the attempt was successful; otherwise, false.</returns>
      <param name="item">The item.</param>
      <param name="value">When this method returns, contains the value in a collection.</param>
      <param name="path">The path to the item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.TryGetPropertyValue(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItemDictionary@,System.String[])">
      <summary>Attempts to retrieve the value of the specified item at the specified path.</summary>
      <returns>true if the attempt was successful; otherwise, false.</returns>
      <param name="item">The item.</param>
      <param name="value">When this method returns, contains the value in a dictionary.</param>
      <param name="path">The path to the item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.TrySetPropertyValue(System.Activities.Design.Model.ModelItem,System.Object,System.Activities.Design.Model.ModelItem@,System.String[])">
      <summary>Attempts to set the specified property value using the specified item, wrapped value, and path.</summary>
      <returns>true if the attempt to set the specified property value was successful; otherwise, false.</returns>
      <param name="item">The item.</param>
      <param name="value">The value.</param>
      <param name="wrappedValue">The wrapped value.</param>
      <param name="path">The path.</param>
    </member>
    <member name="T:System.Activities.Design.ModelTree.ModelToObjectValueConverter">
      <summary>Converts a ModelItem to the value of the inner object. </summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelToObjectValueConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ModelTree.ModelToObjectValueConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelToObjectValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified object to its inner value.</summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the inner value.</returns>
      <param name="value">The ModelItem to convert.</param>
      <param name="targetType">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelToObjectValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Returns the specified value, unmodified.</summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the unmodified value.</returns>
      <param name="value">The object to do nothing to.</param>
      <param name="targetType">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="T:System.Activities.Design.ModelTree.ModelTreeManager">
      <summary>Manages the model tree.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelTreeManager.#ctor(System.Activities.Design.EditingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ModelTree.ModelTreeManager" /> class, using the specified context. </summary>
      <param name="context">The context. </param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelTreeManager.CreateModelItem(System.Activities.Design.Model.ModelItem,System.Object)">
      <summary>Creates a model item based on the specified parent and instance. </summary>
      <returns>Returns a <see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the new model item.</returns>
      <param name="parent">The parent item. </param>
      <param name="instance">The instance.</param>
    </member>
    <member name="E:System.Activities.Design.ModelTree.ModelTreeManager.EditingScopeCompleted">
      <summary>Occurs when the editing scope is completed. </summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelTreeManager.Load(System.Object)">
      <summary>Loads the specified root instance.</summary>
      <param name="rootInstance">The root instance to load.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.ModelTreeManager.Root">
      <summary>Gets the root.</summary>
      <returns>Returns a <see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the root.</returns>
    </member>
    <member name="T:System.Activities.Design.ModelTree.ObjectToModelValueConverter">
      <summary>Converts objects to model values.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ObjectToModelValueConverter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.ModelTree.ObjectToModelValueConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ObjectToModelValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified ModelPropertyEntry to a ModelItem that contains the original entry.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="values">The ModelPropertyEntry to convert.</param>
      <param name="targetType">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ObjectToModelValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified ModelItem to a ModelPropertyEntry. </summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the converted ModelPropertyEntry..</returns>
      <param name="value">The ModelItem to convert.</param>
      <param name="targetTypes">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="T:System.Activities.Design.Toolbox.ToolboxCategory"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.#ctor"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.#ctor(System.String)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.Add(System.Activities.Design.Toolbox.ToolboxItemWrapper)"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.CategoryName"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.Item(System.Int32)"></member>
    <member name="E:System.Activities.Design.Toolbox.ToolboxCategory.PropertyChanged"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.Remove(System.Activities.Design.Toolbox.ToolboxItemWrapper)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#ICollection#CopyTo(System.Array,System.Int32)"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#ICollection#Count"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#ICollection#IsSynchronized"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#ICollection#SyncRoot"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Add(System.Object)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Clear"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Contains(System.Object)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#IndexOf(System.Object)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Insert(System.Int32,System.Object)"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#IsFixedSize"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#IsReadOnly"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Item(System.Int32)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Remove(System.Object)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#RemoveAt(System.Int32)"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.Tools"></member>
    <member name="T:System.Activities.Design.Toolbox.ToolboxCategoryItems"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.#ctor"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.Add(System.Activities.Design.Toolbox.ToolboxCategory)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.Clear"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.Contains(System.Activities.Design.Toolbox.ToolboxCategory)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.CopyTo(System.Activities.Design.Toolbox.ToolboxCategory[],System.Int32)"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.Count"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.GetEnumerator"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.IsReadOnly"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.Item(System.Int32)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.Remove(System.Activities.Design.Toolbox.ToolboxCategory)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#CopyTo(System.Array,System.Int32)"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#Count"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#IsSynchronized"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#SyncRoot"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Add(System.Object)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Clear"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Contains(System.Object)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#IndexOf(System.Object)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Insert(System.Int32,System.Object)"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#IsFixedSize"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#IsReadOnly"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Item(System.Int32)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Remove(System.Object)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#RemoveAt(System.Int32)"></member>
    <member name="T:System.Activities.Design.Toolbox.ToolboxControl"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxControl.#ctor"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.AssociatedDesigner"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.Categories"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.CategoryItemStyle"></member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.CategoryItemStyleProperty"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.CategoryTemplate"></member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.CategoryTemplateProperty"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxControl.OnApplyTemplate"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.SelectedTool"></member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.SelectedToolProperty"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.ToolboxFile"></member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.ToolboxFileProperty"></member>
    <member name="E:System.Activities.Design.Toolbox.ToolboxControl.ToolCreated"></member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.ToolCreatedEvent"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.ToolItemStyle"></member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.ToolItemStyleProperty"></member>
    <member name="E:System.Activities.Design.Toolbox.ToolboxControl.ToolSelected"></member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.ToolSelectedEvent"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.ToolTemplate"></member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.ToolTemplateProperty"></member>
    <member name="T:System.Activities.Design.Toolbox.ToolboxItemWrapper"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.#ctor"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.#ctor(System.String,System.String,System.String,System.String)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.#ctor(System.Type)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.#ctor(System.Type,System.String)"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.#ctor(System.Type,System.String,System.String)"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.AssemblyName"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.Bitmap"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.BitmapName"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.DisplayName"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.IsValid"></member>
    <member name="E:System.Activities.Design.Toolbox.ToolboxItemWrapper.PropertyChanged"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.ToolName"></member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.ToString"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.Type"></member>
    <member name="T:System.Activities.Design.Toolbox.ToolCreatedEventArgs"></member>
    <member name="P:System.Activities.Design.Toolbox.ToolCreatedEventArgs.Components"></member>
    <member name="T:System.Activities.Design.Toolbox.ToolCreatedEventHandler"></member>
    <member name="T:System.Activities.Design.Validation.IValidationErrorService">
      <summary>Provides accessibility to a specified list of activity validation errors.</summary>
    </member>
    <member name="M:System.Activities.Design.Validation.IValidationErrorService.ShowValidationErrors(System.Collections.Generic.IList{System.Activities.Design.Validation.ValidationErrorInfo})">
      <summary>Makes the indicated list of activity validation errors accessible through a specific implementation.</summary>
      <param name="errors">A specified type of list that contains activity validation errors.</param>
    </member>
    <member name="T:System.Activities.Design.Validation.ValidationErrorInfo">
      <summary>Provides a container for all the properties attached to an instance of a validation error that occurred during the design time or run time of a workflow activity.</summary>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationErrorInfo.#ctor(System.Activities.Validation.ValidationError)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.Validation.ValidationErrorInfo" /> class with the specified validation error.</summary>
      <param name="validationError">An exception that occurs during the validation of a workflow activity.</param>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationErrorInfo.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.Validation.ValidationErrorInfo" /> class that contains information about a specific error.</summary>
      <param name="message">An alphanumeric message that provides additional information about the error.</param>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationErrorInfo.FileName">
      <summary>Gets the alphanumeric name of the file that generated the error.</summary>
      <returns>A text string name of a file.</returns>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationErrorInfo.Id">
      <summary>Gets a unique <see cref="T:System.String" /> identifier for this error.</summary>
      <returns>A text string that identifies the error.</returns>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationErrorInfo.IsWarning">
      <summary>Gets a Boolean that determines whether the constraint violation is a warning.</summary>
      <returns>true if the constraint violation is a warning; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationErrorInfo.Message">
      <summary>Gets an alphanumeric message that provides additional information about the error.</summary>
      <returns>A text string comment that provides extra information.</returns>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationErrorInfo.PropertyName">
      <summary>Gets the alphanumeric name of the property that generated the error.</summary>
      <returns>A text string name of a property.</returns>
    </member>
    <member name="T:System.Activities.Design.Validation.ValidationService">
      <summary>Provides the functionality required to validate a workflow activity designer while it is being edited and to provide the results of the validation process.</summary>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationService.#ctor(System.Activities.Design.EditingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.Validation.ValidationService" /> that uses permanent and transient state context information about an activity designer.</summary>
      <param name="context">An object that contains permanent and transient state context information about a designer instance. </param>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationService.NavigateToError(System.Activities.Design.Model.ModelItem)">
      <summary>Moves the keyboard focus to the work surface location of an error in an activity.</summary>
      <param name="modelItem">The name of the item that has generated an error.</param>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationService.NavigateToError(System.String)">
      <summary>Moves the keyboard focus to the work surface location of an error in an activity.</summary>
      <param name="id">An error identification number.</param>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationService.OnValidationCompleted">
      <summary>Triggers a new validation completed event.</summary>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationService.Settings">
      <summary>Gets the settings for the validation of the current workflow element tree, </summary>
      <returns>An object that contains the validation settings..</returns>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationService.ValidateWorkflow">
      <summary>Invokes validation of a workflow element tree.</summary>
    </member>
    <member name="T:System.Activities.Design.Validation.ValidationState">
      <summary>An enumeration of values that represent states of workflow element validation.</summary>
    </member>
    <member name="F:System.Activities.Design.Validation.ValidationState.Error">
      <summary>A value that indicates that an error occurred during the validation of a workflow element.</summary>
    </member>
    <member name="F:System.Activities.Design.Validation.ValidationState.Warning">
      <summary>A value that indicates that a warning occurred during the validation of a workflow element.</summary>
    </member>
    <member name="F:System.Activities.Design.Validation.ValidationState.ChildInvalid">
      <summary>A value that represents that validation found a child element to be invalid.</summary>
    </member>
    <member name="F:System.Activities.Design.Validation.ValidationState.Valid">
      <summary>A value that indicates that a workflow element is valid.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ArgumentToExpressionConverter">
      <summary>Converts from arguments to Argument.Expression. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ArgumentToExpressionConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified argument into an Argument.Expression.</summary>
      <returns>Returns <see cref="T:System.Object" />.Contains the converted Argument.Expression.</returns>
      <param name="value">Not the value to convert.</param>
      <param name="targetType">Not implemented.</param>
      <param name="parameter">Not implemented.</param>
      <param name="culture">Not implemented.</param>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified Argument.Expression into an argument. </summary>
      <returns>Returns <see cref="T:System.Object" />.Contains the converted argument.</returns>
      <param name="value">The Argument.Expression to convert. </param>
      <param name="targetType">Not implemented. </param>
      <param name="parameter">Not implemented. </param>
      <param name="culture">Not implemented. </param>
    </member>
    <member name="T:System.Activities.Design.View.ArgumentToExpressionModelItemConverter">
      <summary>Converts an argument to an expression model. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionModelItemConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ArgumentToExpressionModelItemConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionModelItemConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified argument to an expression model item.</summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the expression model item.</returns>
      <param name="values">The argument to convert.</param>
      <param name="targetType">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionModelItemConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <returns>Returns a <see cref="T:System.Object" /> that contains the argument.</returns>
      <param name="value">The model item to convert. </param>
      <param name="targetTypes">Not used in this implementation. </param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation. </param>
    </member>
    <member name="T:System.Activities.Design.View.AssemblyContextControlItem">
      <summary>Exposes a control item for an assembly context.</summary>
    </member>
    <member name="M:System.Activities.Design.View.AssemblyContextControlItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.AssemblyContextControlItem" /> class. </summary>
    </member>
    <member name="P:System.Activities.Design.View.AssemblyContextControlItem.ItemType">
      <summary>Gets an item type.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the item type.</returns>
    </member>
    <member name="P:System.Activities.Design.View.AssemblyContextControlItem.LocalAssemblyName">
      <summary>Gets or sets the local assembly name. </summary>
      <returns>Returns a <see cref="T:System.Reflection.AssemblyName" /> that contains the local assembly name.</returns>
    </member>
    <member name="P:System.Activities.Design.View.AssemblyContextControlItem.ReferencedAssemblies">
      <summary>Gets or sets the referenced assemblies.</summary>
      <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1" /> derived object that contains the referenced assemblies.</returns>
    </member>
    <member name="P:System.Activities.Design.View.AssemblyContextControlItem.ReferencedAssemblyNames">
      <summary>Gets or sets the referenced assembly names. </summary>
      <returns>Returns a <see cref="T:System.Collections.Generic.IList`1" /> that contains the referenced assembly names.</returns>
    </member>
    <member name="T:System.Activities.Design.View.CommandMenuMode">
      <summary>Describes the command menu mode. </summary>
    </member>
    <member name="F:System.Activities.Design.View.CommandMenuMode.FullCommandMenu">
      <summary>Full command menu.</summary>
    </member>
    <member name="F:System.Activities.Design.View.CommandMenuMode.NoCommandMenu">
      <summary>No command menu.</summary>
    </member>
    <member name="T:System.Activities.Design.View.DesignerView">
      <summary>The designer view. </summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.ActivitySchema">
      <summary>Gets the activity schema.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.Model.ModelItem" />.Contains the activity schema.</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ActivitySchemaProperty">
      <summary>The DependencyProperty that represents the <see cref="P:System.Activities.Design.View.DesignerView.ActivitySchema" /> property. </summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CollapseCommand">
      <summary>The RoutedCommand used to collapse the user interface for the current element.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.CommandMenuMode">
      <summary>Contains the command menu mode. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.CommandMenuMode" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CommandMenuModeProperty">
      <summary>The DependencyProperty that represents the <see cref="T:System.Activities.Design.View.CommandMenuMode" /> property. </summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CommitCommand">
      <summary>A RoutedCommand used to update the source value in a <see cref="T:System.Windows.Data.BindingExpression" />.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.Context">
      <summary>Gets or sets a collection of services shared between all elements contained in the designer. </summary>
      <returns>Returns an <see cref="T:System.Activities.Design.EditingContext" /> object.Contains the context.</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CopyAsImageCommand">
      <summary>The <see cref="T:System.Windows.Input.RoutedCommand" /> used to copy the current workflow design surface as a screenshot and place it in the Clipboard. </summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CreateArgumentCommand">
      <summary>The RoutedCommand used to create a new argument.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CreateVariableCommand">
      <summary>The RoutedCommand used to create a new variable for the currently selected activity.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CreateWorkflowElementCommand">
      <summary>The RoutedCommand used to create a new <see cref="T:System.Activities.Design.WorkflowViewElement" /> on the current workflow designer surface when dragging a workflow item from the Toolbox onto the designer surface.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CustomMenuItemsSeparatorCommand">
      <summary>A string constant that contains the Guid for the custom menu items separator.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CycleThroughDesignerCommand">
      <summary>The RoutedCommand used to cycle the various UI elements of the current workflow designer surface.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.DeleteBreakpointCommand">
      <summary>The RoutedCommand used to delete the breakpoint set on the current activity.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.DisableBreakpointCommand">
      <summary>The RoutedCommand used to disable the breakpoint set on the current activity.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.EnableBreakpointCommand">
      <summary>The RoutedCommand used to enable the breakpoint on the current activity.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ExpandAllCommand">
      <summary>The RoutedCommand used to expand the list </summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ExpandCommand">
      <summary>The RoutedCommand used to navigate to the selected child of a composite activity and expand it to fill the full screen of the workflow designer surface. The View full screen context menu command will initiate this action.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ExpandInPlaceCommand">
      <summary>The RoutedCommand used to</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.FitToScreenCommand">
      <summary>The RoutedCommand used to</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.FocusedViewElement">
      <returns>Returns <see cref="T:System.Activities.Design.WorkflowViewElement" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.FocusedViewElementProperty"></member>
    <member name="M:System.Activities.Design.View.DesignerView.GetCommandMenuMode(System.Windows.DependencyObject)">
      <summary>Retrieves the command menu mode of the specified object. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.CommandMenuMode" />.Contains the command menu mode.</returns>
      <param name="obj">The object. </param>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.GoToParentCommand">
      <summary>The RoutedCommand used to navigate to the parent activity of the selected child activity and expand it to fill the full screen of the workflow designer surface. The View parent context menu command will initiate this action.</summary>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.InitializeComponent">
      <summary>Initializes this form.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.InsertBreakpointCommand">
      <summary>The RoutedCommand used to set a breakpoint on the current activity.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.IsMultipleSelectionMode">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.IsReadOnly">
      <summary>Determines whether the <see cref="T:System.Activities.Design.View.DesignerView" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Activities.Design.View.DesignerView" /> is read-only; false otherwise..</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.IsReadOnlyProperty">
      <summary>Represents the DependencyProperty for the <see cref="P:System.Activities.Design.View.DesignerView.IsReadOnly" /> property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.MakeRootDesigner(System.Activities.Design.Model.ModelItem)">
      <summary>Makes the <see cref="T:System.Activities.Design.WorkflowViewElement" /> associated with the root <see cref="T:System.Activities.Design.Model.ModelItem" /> the <see cref="P:System.Activities.Design.View.DesignerView.RootDesigner" />.</summary>
      <param name="modelItem">The <see cref="T:System.Activities.Design.Model.ModelItem" />.</param>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.MoveFocusCommand">
      <summary>The RoutedCommand used to</summary>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
      <summary>Raises the ContextMenuOpening event. </summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.OnInitialized(System.EventArgs)">
      <summary>Handles the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event by calling the <see cref="T:System.Windows.Controls.UserControl" /> base class implementation, adding an event handler for the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event, and setting the foreground color for the designer view.</summary>
      <param name="e"></param>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.OnKeyDown(System.Windows.Input.KeyEventArgs)"></member>
    <member name="M:System.Activities.Design.View.DesignerView.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Raises the PreviewMouseWheel event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.OnReferenceUpdated(System.Reflection.AssemblyName,System.Boolean)">
      <param name="updatedReference"></param>
      <param name="isAdded"></param>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ResetZoomCommand">
      <summary>The RoutedCommand used to</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.RootDesigner">
      <summary>Gets or sets a <see cref="T:System.Windows.UIElement" /> that is the UI representation of the root of the current model tree.</summary>
      <returns>Returns a <see cref="T:System.Windows.UIElement" /> object.</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.RootDesignerProperty">
      <summary>Represents the DependencyProperty for the <see cref="P:System.Activities.Design.View.DesignerView.RootDesigner" /> property. </summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.SaveAsImageCommand">
      <summary>The RoutedCommand used to save the current workflow design surface as an image.</summary>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.SetCommandMenuMode(System.Windows.DependencyObject,System.Activities.Design.View.CommandMenuMode)">
      <summary>Sets the command menu mode on the specified object. </summary>
      <param name="obj">The object. </param>
      <param name="value">The value to set. </param>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.ShouldExpandAll">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content.</summary>
      <param name="connectionId">The connection ID. </param>
      <param name="target">The target.</param>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.System#Windows#Markup#IStyleConnector#Connect(System.Int32,System.Object)">
      <summary>Calls the StyleBamlReader to attach events on EventSetters and Templates in compiled content.</summary>
      <param name="connectionId">The connection ID.</param>
      <param name="target">The target.</param>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ToggleArgumentDesignerCommand">
      <summary>The RoutedCommand used to show or hide the argument designer. Clicking on the Arguments button on the workflow designer surface will initiate this action. </summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ToggleImportsDesignerCommand">
      <summary>The RoutedCommand used to</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ToggleMiniMapCommand">
      <summary>The RoutedCommand used to show or hide the MiniMap control on the workflow designer surface.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ToggleSelectionCommand">
      <summary>The RoutedCommand used to</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ToggleVariableDesignerCommand">
      <summary>The RoutedCommand used to show or hide the variable designer. Clicking on the Variables button on the workflow designer surface will initiate this action.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.WorkflowShellBarItemVisibility">
      <returns>Returns <see cref="T:System.Activities.Design.View.ShellBarItemVisibility" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ZoomInCommand">
      <summary>The RoutedCommand used to zoom in on the current workflow designer surface.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ZoomOutCommand">
      <summary>The RoutedCommand used to zoom out of the current workflow designer surface.</summary>
    </member>
    <member name="T:System.Activities.Design.View.DynamicArgumentDesigner"></member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDesigner.#ctor"></member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.ArgumentPrefix"></member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.Context"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.ContextProperty"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.CreateDynamicArgumentCommand"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.DefaultArgumentPrefix"></member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.DynamicArguments"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.DynamicArgumentsProperty"></member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.HideDirection"></member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.HintText"></member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDesigner.InitializeComponent"></member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.IsDirectionReadOnly"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.IsDirectionReadOnlyProperty"></member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.IsReadOnly"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.IsReadOnlyProperty"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.MoveDownArgumentCommand"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.MoveUpArgumentCommand"></member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.OwnerActivity"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.OwnerActivityProperty"></member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.ParentDialog"></member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDesigner.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)"></member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDesigner.System#Windows#Markup#IStyleConnector#Connect(System.Int32,System.Object)"></member>
    <member name="T:System.Activities.Design.View.DynamicArgumentDesignerOptions"></member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDesignerOptions.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.View.DynamicArgumentDesignerOptions" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesignerOptions.ArgumentPrefix">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesignerOptions.Title">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Activities.Design.View.DynamicArgumentDialog"></member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDialog.ShowDialog(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItem,System.Activities.Design.EditingContext,System.Windows.DependencyObject,System.Activities.Design.View.DynamicArgumentDesignerOptions)"></member>
    <member name="T:System.Activities.Design.View.EditingState"></member>
    <member name="F:System.Activities.Design.View.EditingState.Editing">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.EditingState.Validating">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.EditingState.Idle">
      <summary />
    </member>
    <member name="T:System.Activities.Design.View.ErrorView">
      <summary>Contains the error view presented when there are exceptions or errors in the designer view, or when the designer is unable to load. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ErrorView.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.View.ErrorView" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ErrorView.Details">
      <summary>Gets or sets the error details.</summary>
      <returns>Returns <see cref="T:System.String" />.Contains the error details. </returns>
    </member>
    <member name="F:System.Activities.Design.View.ErrorView.DetailsProperty">
      <summary>Initializes the <see cref="P:System.Activities.Design.View.ErrorView.Details" /> dependency property. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ErrorView.InitializeComponent">
      <summary>Initializes this form. </summary>
    </member>
    <member name="P:System.Activities.Design.View.ErrorView.Message">
      <summary>Gets or sets the error message. </summary>
      <returns>Returns <see cref="T:System.String" />.Contains the error message.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ErrorView.MessageProperty">
      <summary>Initializes the <see cref="P:System.Activities.Design.View.ErrorView.Message" /> dependency property. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ErrorView.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content.</summary>
      <param name="connectionId">The connection ID.</param>
      <param name="target">The target.</param>
    </member>
    <member name="T:System.Activities.Design.View.ExpressionTextBox">
      <summary>Describes a control that enables the user to edit an expression in an activity designer.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExpressionTextBox.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.View.ExpressionTextBox" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExpressionTextBox.BeginEdit">
      <summary>Begins an edit.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.CompleteWordCommand"></member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.DefaultValue"></member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.DefaultValueProperty"></member>
    <member name="E:System.Activities.Design.View.ExpressionTextBox.EditorLostLogicalFocus">
      <summary>Occurs when the expression editor loses logical focus.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.EditorLostLogicalFocusEvent">
      <summary>Identifies the <see cref="E:System.Activities.Design.View.ExpressionTextBox.EditorLostLogicalFocus" /> routed event.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.ExplicitCommit">
      <summary>Gets or sets a value that determines if a commit is explicit.</summary>
      <returns>Returns true if the commit is explicit; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.ExplicitCommitProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.ExplicitCommit" /> dependency property. </summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.Expression">
      <summary>Gets or sets the expression. </summary>
      <returns>Returns a <see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the expression.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.ExpressionEditorService">
      <summary>Gets the expression editor service.</summary>
      <returns>Returns a <see cref="T:System.Activities.Design.View.IExpressionEditorService" /> containing the expression editor service.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.ExpressionProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.Expression" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.ExpressionType">
      <summary>Gets or sets the expression type. </summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the expression type.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.ExpressionTypeProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.ExpressionType" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.GlobalIntellisenseCommand"></member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.HintText">
      <summary>Gets or sets the hint text. </summary>
      <returns>Returns a <see cref="T:System.String" /> that contains the hint text.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.HintTextProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.HintText" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.HorizontalScrollBarVisibility">
      <summary>Gets or sets the horizontal scroll bar visibility. </summary>
      <returns>Returns a <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> that contains the horizontal scroll bar visibility.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.HorizontalScrollBarVisibilityProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.HorizontalScrollBarVisibility" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExpressionTextBox.InitializeComponent">
      <summary>Initializes this form.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.IsSupportedExpression">
      <summary>Gets or sets a value that determines if the expression is supported.</summary>
      <returns>Returns true if the expression is supported; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.IsSupportedExpressionProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.IsSupportedExpression" /> dependency property. </summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.MaxLines">
      <summary>Gets or sets the maximum number of lines</summary>
      <returns>Returns <see cref="T:System.Int32" /> that contains the maximum number of lines.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.MaxLinesProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.MaxLines" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.MinLines">
      <summary>Gets or sets the nimimum number of lines. </summary>
      <returns>Returns a <see cref="T:System.Int32" /> that contains the minimum number of lines.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.MinLinesProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.MinLines" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.OwnerActivity">
      <summary>Gets or sets the owner activity. </summary>
      <returns>Returns a <see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the owner activity.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.OwnerActivityProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.OwnerActivity" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.ParameterInfoCommand"></member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.PathToArgument">
      <summary>Gets or sets the path to the argument. </summary>
      <returns>Returns a <see cref="T:System.String" /> that contains the path to the argument.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.PathToArgumentProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.PathToArgument" /> dependency property. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.QuickInfoCommand"></member>
    <member name="M:System.Activities.Design.View.ExpressionTextBox.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content. </summary>
      <param name="connectionId">The connection ID. </param>
      <param name="target">The target.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExpressionTextBox.System#Windows#Markup#IStyleConnector#Connect(System.Int32,System.Object)">
      <summary>Calls the StyleBamlReader to attach events on EventSetters and Templates in compiled content.</summary>
      <param name="connectionId">The connection ID.</param>
      <param name="target">The target.</param>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.UseLocationExpression">
      <summary>Gets or sets a value that determines whether this instance uses the location expression. </summary>
      <returns>true if this instance uses the location expression; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.UseLocationExpressionProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.UseLocationExpression" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.VerticalScrollBarVisibility">
      <summary>Gets or sets the vertical scrollbar visibility. </summary>
      <returns>Returns a <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> that contains the scrollbar visibility.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.VerticalScrollBarVisibilityProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox. VerticalScrollBarVisibility" /> dependency property.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionSurface">
      <summary>Describes the extension surface. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ExtensionSurface" />class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.AddExtensionElement(System.Activities.Design.View.ExtensionWindow)">
      <summary>Adds the specified window to the collection. </summary>
      <param name="window">The window to add. </param>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.Alignment">
      <summary>Specifies the alignment. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ExtensionSurface.PositionAlignment" />. Contains the alignment. </returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.AlignmentProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.Alignment" /> property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.AutoExpandCanvas">
      <summary>Gets or sets a value that determines whether the canvas auto-expands. </summary>
      <returns>true if the canvas auto-expands; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.AutoExpandCanvasProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.AutoExpandCanvas" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.Designer">
      <summary>Gets or sets the surface view designer. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.DesignerView" />.Contains the surface view designer.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.DesignerProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.Designer" /> property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.GetAlignment(System.Windows.DependencyObject)">
      <summary>Retrieves the alignment of the specified container. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ExtensionSurface.PositionAlignment" />.Contains the alignment</returns>
      <param name="container">The container to get the alignment of. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.GetMode(System.Windows.DependencyObject)">
      <summary>Gets the mode of the specified container. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ExtensionSurface.PlacementMode" />.Contains the mode.</returns>
      <param name="container">The container to get the mode of.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.GetPlacementTarget(System.Windows.DependencyObject)">
      <summary>Retrieves the placement target of the specified container. </summary>
      <returns>Returns <see cref="T:System.Windows.FrameworkElement" />.Contains the placement target. </returns>
      <param name="container">The container to get the placement target of. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.GetPosition(System.Windows.DependencyObject)">
      <summary>Retrieves the position of the specified object. </summary>
      <returns>Returns <see cref="T:System.Windows.Point" />.Contains the position.</returns>
      <param name="container">The container to retrieve the position of. </param>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.Mode">
      <summary>Describes the mode. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ExtensionSurface.PlacementMode" />.Contains the mode. </returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.ModeProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.Mode" /> property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.PlacementTarget">
      <summary>Gets or sets the placement target. </summary>
      <returns>Returns <see cref="T:System.Windows.FrameworkElement" />.Contains the placement target. </returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PlacementTargetProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.PlacementTarget" /> dependency property. </summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.Position">
      <summary>Gets or sets the position. </summary>
      <returns>Returns <see cref="T:System.Windows.Point" />.Contains the position. </returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.Position" /> property. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.RemoveExtensionElement(System.Activities.Design.View.ExtensionWindow)">
      <summary>Removes the specified extension element. </summary>
      <param name="window">The extension element to remove. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.SelectWindow(System.Activities.Design.View.ExtensionWindow)">
      <summary>Selects the specified window. </summary>
      <param name="window">The window to select. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.SetAlignment(System.Windows.DependencyObject,System.Activities.Design.View.ExtensionSurface.PositionAlignment)">
      <summary>Set the alignment on the specified container. </summary>
      <param name="container">The container. </param>
      <param name="value">The alignment value to set on the container. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.SetMode(System.Windows.DependencyObject,System.Activities.Design.View.ExtensionSurface.PlacementMode)">
      <summary>Sets the mode on the specified container. </summary>
      <param name="container">The container. </param>
      <param name="value">The mode value to set on the container. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.SetPlacementTarget(System.Windows.DependencyObject,System.Windows.FrameworkElement)">
      <summary>Sets the placement target on the specified container. </summary>
      <param name="container">The container. </param>
      <param name="value">The placement target to set on the container. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.SetPosition(System.Windows.DependencyObject,System.Windows.Point)">
      <summary>Sets the position on the specified container. </summary>
      <param name="container">The container. </param>
      <param name="value">The position value to set. </param>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionSurface.PlacementMode">
      <summary>Describes the placement mode for the extension surface.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PlacementMode.Relative">
      <summary>Relative mode.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PlacementMode.Absolute">
      <summary>Absolute mode.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionSurface.PositionAlignment">
      <summary>Describes the position alignment for the extension surface. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.LeftTop">
      <summary>Left top. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.LeftBottom">
      <summary>Left bottom. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.RightTop">
      <summary>Right top. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.RightBottom">
      <summary>Right bottom.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.Center">
      <summary>Center. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.CenterHorizontal">
      <summary>Center horizontal.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.CenterVertical">
      <summary>Center vertical. </summary>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionWindow">
      <summary>This class provides an experience similar to PopupWindow, while editing data on designer surface. Its behavior is similar to an ordinary popup, with additional functionalities that allow resizing, moving, and easier styling.
</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ExtensionWindow" /> class.</summary>
    </member>
    <member name="E:System.Activities.Design.View.ExtensionWindow.Close">
      <summary>Occurs when the window is closed.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.CloseEvent">
      <summary>Identifies with the <see cref="E:System.Activities.Design.View.ExtensionWindow.Close" /> routed event.</summary>
    </member>
    <member name="E:System.Activities.Design.View.ExtensionWindow.Closing">
      <summary>Occurs when the window is closing.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.ClosingEvent">
      <summary>Identifies with the <see cref="E:System.Activities.Design.View.ExtensionWindow.Closing" /> routed event.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.ContentPresenter">
      <summary>Gets the content presenter for this extension window.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.ContentPresenter" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.Data">
      <summary>Gets or sets the data associated with this extension window. </summary>
      <returns>Returns <see cref="T:System.Object" />, which is data associated with this extension window.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.DataProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.Data" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.GetPlacementTargetOffset">
      <summary> Gets the placement target offset. </summary>
      <returns>Returns <see cref="T:System.Windows.Point" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.Icon">
      <summary>Gets or sets the icon associated with this extension window. </summary>
      <returns>A <see cref="T:System.Windows.Media.DrawingBrush" /> instance that represents the icon associated with this extension window.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.IconProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.Icon" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.IsResizable">
      <summary>Gets or sets a Boolean value that specifies whether the window is resizable.</summary>
      <returns>true if the window is resizable; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.IsResizableProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.IsResizable" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.MenuItems">
      <summary>Gets or sets a collection of menu items associated with this extension window.</summary>
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />, which is a collection of menu items associated with this extension window.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.MenuItemsProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.MenuItems" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnApplyTemplate">
      <summary>Called when the template’s tree is generated.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnDataChanged(System.Object,System.Object)">
      <summary>Called when data has changed.</summary>
      <param name="oldData">The old data.</param>
      <param name="newData">The new data.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnInitialized(System.EventArgs)">
      <summary>Raises the Initialized event.</summary>
      <param name="e">Contains event data.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Called when the mouse pointer is over the window and a mouse button is pressed.</summary>
      <param name="e">Contains event data.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called when a key is pressed while the window has focus.</summary>
      <param name="e">Contains event data.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnPositionChanged(System.Windows.Point)">
      <summary>Called when the value of the specified position has changed.</summary>
      <param name="position">The position that has changed.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnVisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
      <summary>Raise the <see cref="E:System.Activities.Design.View.ExtensionWindow.VisibilityChanged" /> event.</summary>
      <param name="oldValue">The old value.</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnVisualParentChanged(System.Windows.DependencyObject)">
      <summary>Invoked when the parent of this extension window in the visual tree is changed.</summary>
      <param name="oldParent">The previous parent.</param>
      <exception cref="T:System.NotSupportedException">ExtensionWindow is used outside ExtensionSurface.</exception>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.SelectWindow">
      <summary>Selects this extension window in the extension surface.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.ShowResizeGrip">
      <summary>Gets or sets a Boolean value that specifies whether the resize grip is shown.</summary>
      <returns>true if the resize grip is shown; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.ShowResizeGripProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.ShowResizeGrip" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.ShowWindowHeader">
      <summary>Gets or sets a Boolean value that specifies whether the window header is shown.</summary>
      <returns>true if the window header is shown; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.ShowWindowHeaderProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.ShowWindowHeader" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.Surface">
      <summary>Gets the extension surface for this extension window.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ExtensionSurface" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.Title">
      <summary>Gets or sets the title of this extension window. </summary>
      <returns>A  <see cref="T:System.String" /> that contains the title of this extension window.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.TitleProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.Title" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.TryFindElement(System.String,System.Object@)">
      <summary>Finds the element associated with the specified name defined within this template.</summary>
      <returns>true if the search is successful; otherwise, false.</returns>
      <param name="elementName">The string name.</param>
      <param name="element">The element where this template is applied.</param>
    </member>
    <member name="E:System.Activities.Design.View.ExtensionWindow.VisibilityChanged">
      <summary>Occurs when the window’s visibility is changed.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.VisibilityChangedEvent">
      <summary>Identifies with the <see cref="E:System.Activities.Design.View.ExtensionWindow.VisibilityChanged" /> routed event.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionWindowCloseEventHandler"></member>
    <member name="T:System.Activities.Design.View.ExtensionWindowClosingEventHandler"></member>
    <member name="T:System.Activities.Design.View.ExtensionWindowClosingRoutedEventArgs">
      <summary>Contains the arguments for the ExtensionWindowClosingRoutedEvent.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindowClosingRoutedEventArgs.Cancel">
      <summary>Gets or sets a value that determines whether the extension window closing has been cancelled.</summary>
      <returns>true if the event has been cancelled; otherwise, false..</returns>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionWindowHeader">
      <summary>Represents the visual representation of a window header, which is used with <see cref="T:System.Activities.Design.View.ExtensionWindow" /> to enable 
moving and closing. The actual moving logic is handled by the <see cref="T:System.Activities.Design.View.ExtensionSurface" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ExtensionWindowHeader" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindowHeader.ButtonCloseIcon">
      <summary>Gets or sets the icon that represents the close button.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.DrawingBrush" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindowHeader.ButtonCloseIconProperty">
      <summary>Gets the icon for the close button.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindowHeader.DropDownMenuIcon">
      <summary>Gets or sets the icon that represents the drop-down menu.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.DrawingBrush" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindowHeader.DropDownMenuIconProperty">
      <summary>Gets the icon for the drop-down menu.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindowHeader.Icon">
      <summary>Gets or sets the icon for this header. </summary>
      <returns>Returns <see cref="T:System.Windows.Media.DrawingBrush" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindowHeader.IconProperty">
      <summary>Gets the icon of this window header.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.OnApplyTemplate">
      <summary>Invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before the <see cref="M:System.Windows.Controls.Control.MouseLeftButtonDown" /> event occurs.</summary>
      <param name="args">The data for the event. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before the <see cref="M:System.Windows.Controls.Control.MouseLeftButtonUp" /> event occurs.</summary>
      <param name="args">The data for the event. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="M:System.Windows.Controls.Control.MouseMove" /> event occurs.</summary>
      <param name="args">The data for the event. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.OnVisualParentChanged(System.Windows.DependencyObject)">
      <summary>Invoked when the parent element of this <see cref="T:System.Activities.Design.View.ExtensionWindowHeader" /> reports a change to its underlying visual parent.</summary>
      <param name="oldParent">The previous parent. </param>
      <exception cref="T:System.NotSupportedException">ExtensionWindowHeader cannot be used outside <see cref="T:System.Activities.Design.View.ExtensionWindow" />.</exception>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindowHeader.Title">
      <summary>Gets or sets the title for this window header.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindowHeader.TitleProperty">
      <summary>Gets the title of this window header.</summary>
    </member>
    <member name="T:System.Activities.Design.View.FilterableData">
      <summary>Represents a piece of data that can be filtered on visibility. </summary>
    </member>
    <member name="M:System.Activities.Design.View.FilterableData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.FilterableData" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.FilterableData.Data">
      <summary>Gets or sets the actual data encapsulated by this class.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.FilterableData.DataProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.View.FilterableData.Data" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.FilterableData.IsSelected">
      <summary>Gets or sets a value that indicates whether the data is selected.</summary>
      <returns>true if the data is selected; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.FilterableData.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.View.FilterableData.IsSelected" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.FilterableData.ToString">
      <summary>Converts this piece of data into a string.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.FilterableData.Visibility">
      <summary>Gets or sets a value that indicates whether the data is visible.</summary>
      <returns>Returns <see cref="T:System.Windows.Visibility" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.FilterableData.VisibilityProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.View.FilterableData.Visibility" /> dependency property.</summary>
    </member>
    <member name="T:System.Activities.Design.View.FilterableData`1">
      <summary>Represents a piece of data that can be filtered on visibility. </summary>
      <typeparam name="TData"></typeparam>
    </member>
    <member name="M:System.Activities.Design.View.FilterableData`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.FilterableData`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.FilterableData`1.ToString">
      <summary>Converts this piece of data into a string.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.FilterableData`1.TypedData">
      <summary>Gets or sets the actual data encapsulated by this class.</summary>
    </member>
    <member name="T:System.Activities.Design.View.FlagEditor"></member>
    <member name="M:System.Activities.Design.View.FlagEditor.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.View.FlagEditor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.FlagEditor.FlagType">
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.FlagEditor.FlagTypeProperty"></member>
    <member name="M:System.Activities.Design.View.FlagEditor.InitializeComponent"></member>
    <member name="M:System.Activities.Design.View.FlagEditor.OnDropDownClosed(System.EventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:System.Activities.Design.View.FlagEditor.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:System.Activities.Design.View.FlagEditor.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:System.Activities.Design.View.FlagEditor.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <param name="connectionId"></param>
      <param name="target"></param>
    </member>
    <member name="T:System.Activities.Design.View.IExpressionEditorInstance">
      <summary>Represents an expression editor.</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanCompleteWord">
      <summary>Gets a Boolean value that indicates if the expression editor can complete the string being typed by the user.</summary>
      <returns>Returns a <see cref="T:System.Boolean" /> set to true..</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanCopy">
      <summary>Gets a Boolean value that indicates if the Expression Editor can be closed.</summary>
      <returns>true if the the Expression Editor can be closed; otherwise, false..</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanCut">
      <summary>Gets a Boolean value that indicates if the expression can be cut.</summary>
      <returns>true if the the expression can be cut; otherwise, false..</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanGlobalIntellisense">
      <summary>Gets a Boolean value that indicates if the expression editor can retrieve global intellisense on the expression.</summary>
      <returns>Returns a <see cref="T:System.Boolean" /> set to true.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanParameterInfo">
      <summary>Gets a Boolean value that indicates if the expression editor can retrieve parameter information on the expression.</summary>
      <returns>Returns a <see cref="T:System.Boolean" /> set to true.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanPaste">
      <summary>Gets a Boolean value that indicates if the expression can be pasted.</summary>
      <returns>true if the the expression can be pasted; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanQuickInfo">
      <summary>Gets a Boolean value that indicates if the expression editor can retrieve type information to be shown in an IntelliSense quick info tool tip.</summary>
      <returns>Returns a <see cref="T:System.Boolean" /> set to true.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanRedo">
      <summary>Gets a Boolean value that indicates if the system can redo the operation.</summary>
      <returns>true if the system can redo the operation; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanUndo">
      <summary>Gets a Boolean value that indicates if the system can undo the operation.</summary>
      <returns>true if the system can undo the operation; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.ClearSelection">
      <summary>Clears the selection in the editor.</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Close">
      <summary>Closes and purges the editor items. This will close the specific expression editor.</summary>
    </member>
    <member name="E:System.Activities.Design.View.IExpressionEditorInstance.Closing">
      <summary>Occurs when the Expression Editor is closing.</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CompleteWord">
      <summary>Determines whether the expression editor can provide a list of completions for the partial word typed by the user. For example, member, argument, and method names can be shown to the user in an attempt to help them complete the word they are typing. </summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Copy">
      <summary>Copies the active expression.</summary>
      <returns>true if the copy is successful; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Cut">
      <summary>Cuts the active expression.</summary>
      <returns>true if the cut is successful; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Focus">
      <summary>Sets focus on the editor.</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.GetCommittedText">
      <summary>Gets the text used to generate an expression.</summary>
      <returns>Returns a <see cref="T:System.String" /> containing the text used to generate an expression.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.GlobalIntellisense">
      <summary>Determines whether</summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="E:System.Activities.Design.View.IExpressionEditorInstance.GotAggregateFocus">
      <summary>Occurs when the expression editor has aggregate focus. </summary>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.HasAggregateFocus">
      <summary>Gets a value that indicates whether the editor has aggregate focus.</summary>
      <returns>true if the editor has aggregate focus; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.HorizontalScrollBarVisibility">
      <summary>Gets or sets a value that indicates whether the horizontal scrollbar is visible.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.HostControl">
      <summary>Gets a <see cref="T:System.Windows.Controls.Control" /> instance that can be used to display in the ExpressionTextBox.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.Control" />.</returns>
    </member>
    <member name="E:System.Activities.Design.View.IExpressionEditorInstance.LostAggregateFocus">
      <summary>Represents an event that is raised when the expression editor loses aggregate focus.</summary>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.MaxHeight">
      <summary>The maximum height of the ExpressionTextBox control.</summary>
      <returns>Returns a<see cref="T:System.Double" /> containing the maximum height of the ExpressionTextBox control.</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.MaxLines">
      <summary>Gets or sets the maximum number of lines of text to be displayed by the ExpressionTextBox control. This property implicitly sets the height of the ExpressionTextBox control when growing to fit. </summary>
      <returns>Returns a <see cref="T:System.Int32" /> that containing the maximum number of lines of text to be displayed by the ExpressionTextBox control..</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.MinHeight">
      <summary>The minimum height of the ExpressionTextBox control.</summary>
      <returns>Returns a<see cref="T:System.Double" /> containing the minimum height of the ExpressionTextBox control..</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.MinLines">
      <summary>Gets or sets the minimum number of lines of text to be displayed by the ExpressionTextBox control. This property implicitly sets the height of the ExpressionTextBox control.</summary>
      <returns>Returns a<see cref="T:System.Int32" /> containing the minimum number of lines of text to be displayed by the ExpressionTextBox control..</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.ParameterInfo">
      <summary>Determines whether </summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Paste">
      <summary>Pastes the active expression.</summary>
      <returns>true if the paste is successful; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.QuickInfo">
      <summary>Determines whether type information to be shown in an IntelliSense quick info tool tip.</summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Redo">
      <summary>Reapplies the last operation that was undone in the editor, i.e., reverse the effects of the undo operation. </summary>
      <returns>true if the redo is successful; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.Text">
      <summary>Gets or sets the value of the text.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="E:System.Activities.Design.View.IExpressionEditorInstance.TextChanged">
      <summary>Represents an event that is raised when the text in an expression editor is changed.</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Undo">
      <summary>Undoes the last operation in the editor.</summary>
      <returns>true if the undo is successful; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.VerticalScrollBarVisibility">
      <summary>Gets or sets a value that indicates whether the vertical scrollbar is visible.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</returns>
    </member>
    <member name="T:System.Activities.Design.View.IExpressionEditorService">
      <summary>Creates or closes expression editors. </summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorService.CloseExpressionEditors">
      <summary>Closes all the active expression editors.</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorService.CreateExpressionEditor(System.Activities.Design.View.AssemblyContextControlItem,System.Activities.Design.View.ImportedNamespaceContextItem,System.Collections.Generic.List{System.Activities.Design.Model.ModelItem},System.String)">
      <summary>Creates a new expression editor.</summary>
      <returns>Returns a<see cref="T:System.Activities.Design.View.IExpressionEditorInstance" />.</returns>
      <param name="assemblies">Used to set the context for the editor session.</param>
      <param name="importedNamespaces">The imported namespaces to be used by the expression editor.</param>
      <param name="variables">Local variables for the expression editor.</param>
      <param name="text">A string used to populate the expression editor.</param>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorService.UpdateContext(System.Activities.Design.View.AssemblyContextControlItem,System.Activities.Design.View.ImportedNamespaceContextItem)">
      <summary>Updates the context for the editing session.</summary>
      <param name="assemblies">Used to set the context for the editor session.</param>
      <param name="importedNamespaces">The imported namespaces used by the expression editor.</param>
    </member>
    <member name="T:System.Activities.Design.View.ImportedNamespaceContextItem"></member>
    <member name="M:System.Activities.Design.View.ImportedNamespaceContextItem.#ctor"></member>
    <member name="M:System.Activities.Design.View.ImportedNamespaceContextItem.EnsureInitialized(System.Activities.Design.EditingContext)"></member>
    <member name="P:System.Activities.Design.View.ImportedNamespaceContextItem.ImportedNamespaces">
      <returns>Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ImportedNamespaceContextItem.ItemType">
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter">
      <summary>Used to convert UI property data into <see cref="T:System.Activities.Design.Model.ModelItem" /> and <see cref="T:System.Activities.Design.EditingContext" /> objects that describe the UI property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter.#ctor">
      <summary>Creates a new <see cref="T:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter" />.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a <see cref="T:System.Web.UI.PropertyEntry" /> derived object to a <see cref="T:System.Activities.Design.Model.ModelItem" /></summary>
      <returns>Returns an <see cref="T:System.Object" /> that contains the <see cref="T:System.Activities.Design.Model.ModelItem" />, <see cref="T:System.Activities.Design.EditingContext" />, and value of the UI property.</returns>
      <param name="value">The <see cref="T:System.Web.UI.PropertyEntry" /> derived object to convert.</param>
      <param name="targetType">Not used.</param>
      <param name="parameter">Not used.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a <see cref="T:System.Web.UI.PropertyEntry" /> derived object to a <see cref="T:System.Activities.Design.Model.ModelItem" /></summary>
      <returns>Returns an <see cref="T:System.Object" /> that contains the <see cref="T:System.Activities.Design.Model.ModelItem" />, <see cref="T:System.Activities.Design.EditingContext" />, and value of the UI property.</returns>
      <param name="values">An array of <see cref="T:System.Web.UI.PropertyEntry" /> derived objects to convert.</param>
      <param name="targetType">Not used.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Not supported in this release.</summary>
      <returns>Returns an <see cref="T:System.Object" />.</returns>
      <param name="value">Not used.</param>
      <param name="targetType">Not used.</param>
      <param name="parameter">Not used.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Not supported in this release.</summary>
      <returns>Returns an <see cref="T:System.Object" />.</returns>
      <param name="value">Not used.</param>
      <param name="targetTypes">Not used.</param>
      <param name="parameter">Not used.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="T:System.Activities.Design.View.ModelPropertyEntryToOwnerActivityConverter">
      <summary>Converts a ModelPropertyEntry to a ModelItem that owns the property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToOwnerActivityConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ModelPropertyEntryToOwnerActivityConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToOwnerActivityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a ModelPropertyEntry to a ModelItem that owns the property.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use. You can pass a Boolean value in. By default, this converter will always return the parent model item that is of type WorkflowElement.  If false is passed to this method, the converter will simply return the first parent model item, which may not be a model item that points to a WorkflowElement.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToOwnerActivityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Calling this method is not supported.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="T:System.Activities.Design.View.PrimarySelectionAdorner">
      <summary>Represents the primary adorner that decorates a UI element.</summary>
    </member>
    <member name="M:System.Activities.Design.View.PrimarySelectionAdorner.#ctor(System.Windows.UIElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.PrimarySelectionAdorner" /> class, which is always rendered on top of the specified adorned element.</summary>
      <param name="adornedElement">The element being adorned by the newly constructed <see cref="T:System.Activities.Design.View.PrimarySelectionAdorner" /> instance.</param>
    </member>
    <member name="T:System.Activities.Design.View.PropertyKind">
      <summary>An enumeration that describes the type of argument being passed.</summary>
    </member>
    <member name="F:System.Activities.Design.View.PropertyKind.InArgument">
      <summary>The argument is an input-only parameter, meaning that it can only be used to pass a value to a method..</summary>
    </member>
    <member name="F:System.Activities.Design.View.PropertyKind.InOutArgument">
      <summary>The argument is an input/output parameter, meaning that it can be used for passing a value to a method, and get back a value from a method.</summary>
    </member>
    <member name="F:System.Activities.Design.View.PropertyKind.OutArgument">
      <summary>The argument is an output-only parameter, meaning that it can only be used to pass a value back from a method.</summary>
    </member>
    <member name="F:System.Activities.Design.View.PropertyKind.Property">
      <summary>The argument is a property.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ShellBarItemVisibility"></member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.None">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.Variables">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.Arguments">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.Imports">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.Zoom">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.MiniMap">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.All">
      <summary />
    </member>
    <member name="T:System.Activities.Design.View.TypePresenter">
      <summary>Handles the display of a collection of types in a component that is part of a user interface.</summary>
    </member>
    <member name="M:System.Activities.Design.View.TypePresenter.#ctor">
      <summary>Creates a new instance of a <see cref="T:System.Activities.Design.View.TypePresenter" /> that initializes a collection of wrapper objects that each represent a primitive type.</summary>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.AllowNull">
      <summary>Gets or sets a value that indicates whether or not a property can be null.</summary>
      <returns>true if the property can be null; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.AllowNullProperty">
      <summary>Dependency property identifier field that indicates whether properties associated with this type presenter can be null.</summary>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.BrowseTypeDirectly">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.BrowseTypeDirectlyProperty"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.CenterActivityTypeResolverDialog"></member>
    <member name="F:System.Activities.Design.View.TypePresenter.CenterActivityTypeResolverDialogProperty"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.Context">
      <summary>Gets or sets the value of an editing context property.</summary>
      <returns>An editing context item.</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.ContextProperty">
      <summary>Dependency property identifier field that contains a property of the editing context, for instance a list of currently selected objects or a list of services running in the designer.</summary>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.Filter">
      <returns>Returns <see cref="T:System.Func`2" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.FilterProperty"></member>
    <member name="M:System.Activities.Design.View.TypePresenter.InitializeComponent">
      <summary>Initializes a combo box. The contents of this method are generated by the designer.</summary>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.Items">
      <summary>Gets an enumeration of wrapper types that are in the current type presenter.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.Label">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.LabelProperty"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.MostRecentlyUsedTypes"></member>
    <member name="F:System.Activities.Design.View.TypePresenter.MostRecentlyUsedTypesProperty"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.NullTypeWrapper">
      <returns>Returns <see cref="T:System.Activities.Design.View.TypeWrapper" />.</returns>
    </member>
    <member name="E:System.Activities.Design.View.TypePresenter.PropertyChanged">
      <summary>Declaration of the event that gets raised when a property on the specified user interface control has been changed.</summary>
    </member>
    <member name="M:System.Activities.Design.View.TypePresenter.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Obsolete. Not implemented.</summary>
      <param name="connectionId"></param>
      <param name="target"></param>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.Text">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.TextProperty"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.Type">
      <summary>Gets or sets the type of the current <see cref="T:System.Activities.Design.View.TypePresenter" />.</summary>
      <returns>A type object.</returns>
    </member>
    <member name="E:System.Activities.Design.View.TypePresenter.TypeBrowserClosed"></member>
    <member name="F:System.Activities.Design.View.TypePresenter.TypeBrowserClosedEvent"></member>
    <member name="E:System.Activities.Design.View.TypePresenter.TypeBrowserOpened"></member>
    <member name="F:System.Activities.Design.View.TypePresenter.TypeBrowserOpenedEvent"></member>
    <member name="E:System.Activities.Design.View.TypePresenter.TypeChanged"></member>
    <member name="F:System.Activities.Design.View.TypePresenter.TypeChangedEvent"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.TypeName">
      <summary>Gets the name for a type displayed in a component.</summary>
      <returns>A string that represents the display name of a type.</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.TypeProperty">
      <summary>Dependency property identifier field that indicates the current type represented by the <see cref="T:System.Activities.Design.View.TypePresenter" />.</summary>
    </member>
    <member name="T:System.Activities.Design.View.TypeResolvingOptions">
      <summary>Supports options resolving types.</summary>
    </member>
    <member name="M:System.Activities.Design.View.TypeResolvingOptions.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.View.TypeResolvingOptions" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.TypeResolvingOptions.BrowseTypeDirectly">
      <summary>Gets a value that indicates whether a type is found directly.</summary>
      <returns>true if the type is found directly; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.View.TypeResolvingOptions.Filter">
      <summary>Resolves types by filtering.</summary>
      <returns>
A <see cref="T:System.Func`2" /> delegate for a method that returns true or false.</returns>
    </member>
    <member name="T:System.Activities.Design.View.TypeWrapper">
      <summary>Provides the functionality to wrap a specified object to make it function as an object of a different type. This is a sealed class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.TypeWrapper.DisplayName">
      <summary>Gets the display name for the current wrapper type.</summary>
      <returns>A string that contains the display name.</returns>
    </member>
    <member name="M:System.Activities.Design.View.TypeWrapper.Equals(System.Object)">
      <summary>Determines whether a typewrapper of the specified type is equal to the type of the current typewrapper.</summary>
      <returns>true if a typewrapper of the specified type is equal to the type of the current typewrapper; otherwise, false.</returns>
      <param name="obj">An object representing a typewrapper.</param>
    </member>
    <member name="M:System.Activities.Design.View.TypeWrapper.GetHashCode">
      <summary>Returns a hash code for the current type.</summary>
      <returns>An integer representing a hash code.</returns>
    </member>
    <member name="P:System.Activities.Design.View.TypeWrapper.IsTypeDefinition">
      <summary>Gets an indication whether the display name defines a type.</summary>
      <returns>true if the display name defines a type; otherwise, false. </returns>
    </member>
    <member name="P:System.Activities.Design.View.TypeWrapper.Tag">
      <summary>Gets data about the wrapper type.</summary>
      <returns>An object that contains data about the control.</returns>
    </member>
    <member name="M:System.Activities.Design.View.TypeWrapper.ToString">
      <summary>Returns the contents of a tag that contains a label for the current wrapper type.</summary>
      <returns>A string version of the tag value.</returns>
    </member>
    <member name="P:System.Activities.Design.View.TypeWrapper.Type">
      <summary>Gets the type of the current wrapper.</summary>
      <returns>An object that represents the type of the current wrapper.</returns>
    </member>
    <member name="T:System.Activities.Design.View.ViewStateChangedEventArgs">
      <summary>Provides an object formatted to serve as an event argument containing the information about the changed view state.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateChangedEventArgs.#ctor(System.Activities.Design.Model.ModelItem,System.String,System.Object,System.Object)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.View.ViewStateChangedEventArgs" /> class with a specified parent model item and its key/value pair with the old and the new values.</summary>
      <param name="modelItem">An item in the activity designer model that serves as a parent element in the XML view of the model.</param>
      <param name="key">The name of an attribute in the specified parent element. </param>
      <param name="newValue">The new value for the specified attribute key.</param>
      <param name="oldValue">The old value of the specified attribute key. </param>
    </member>
    <member name="P:System.Activities.Design.View.ViewStateChangedEventArgs.Key">
      <summary>Gets an attribute key name in a specified view element.</summary>
      <returns>A string that represents the name of a key in a view element.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ViewStateChangedEventArgs.NewValue">
      <summary>Gets the new value for the key in the current attribute key/value pair.</summary>
      <returns>An object that contains a key value.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ViewStateChangedEventArgs.OldValue">
      <summary>Gets the old value of the key in the current attribute key/value pair.</summary>
      <returns>An object that contains a key value.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ViewStateChangedEventArgs.ParentModelItem">
      <summary>Gets an item in the activity designer model that serves as a parent item in the XAML view of the model.</summary>
      <returns>A parent element in an activity designer model.</returns>
    </member>
    <member name="T:System.Activities.Design.View.ViewStateChangedEventHandler">
      <summary>Declares a delegate type that handles changes to the view state.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ViewStateService">
      <summary>When implemented in a derived class, generates a text property that stores and retrieves its value from an associated control’s view state.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.View.ViewStateService" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.RemoveViewState(System.Activities.Design.Model.ModelItem,System.String)">
      <summary>When implemented in a derived class, removes the view state represented by the specified key and associated with the specified model item.</summary>
      <returns>true if the view state was removed; otherwise, false.</returns>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Design.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is stored.</param>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.RetrieveAllViewState(System.Activities.Design.Model.ModelItem)">
      <summary>When implemented in a derived class, returns the complete view state of the control associated with the specified model item.</summary>
      <returns>A key/value pair list of view state items.</returns>
      <param name="modelItem">A workflow activity model item.</param>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.RetrieveViewState(System.Activities.Design.Model.ModelItem,System.String)">
      <summary>When implemented in a derived class, returns the item that matches the specified key in the view state associated with the specified model item.</summary>
      <returns>An object version of the view state item to be retrieved; otherwise, null.</returns>
      <param name="modelItem">The workflow activity whose specified view state item is being retrieved.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is retrieved.</param>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.StoreViewState(System.Activities.Design.Model.ModelItem,System.String,System.Object)">
      <summary>When implemented in a derived class, stores the item represented by the specified key in the view state associated with the specified model item.</summary>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Design.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is stored.</param>
      <param name="value">An <see cref="T:System.Object" /> to be stored.</param>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.StoreViewStateWithUndo(System.Activities.Design.Model.ModelItem,System.String,System.Object)">
      <summary>When implemented in a derived class, records the current setting of the item represented by the specified key so that it is available for an undo operation. Then the item represented by the specified key is stored in the view state of the specified model item.</summary>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Design.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is stored.</param>
      <param name="value">An <see cref="T:System.Object" /> to be stored.</param>
    </member>
    <member name="E:System.Activities.Design.View.ViewStateService.UndoableViewStateChanged">
      <summary>When implemented in a derived class, declares an event that signals that a change has been made to the control’s undoable view state.</summary>
    </member>
    <member name="E:System.Activities.Design.View.ViewStateService.ViewStateChanged">
      <summary>When implemented in a derived class, declares an event that signals that a change has been made to the control’s view state.</summary>
    </member>
    <member name="T:System.Activities.Design.View.VirtualizedContainerService"></member>
    <member name="M:System.Activities.Design.View.VirtualizedContainerService.#ctor(System.Activities.Design.EditingContext)">
      <param name="context"></param>
    </member>
    <member name="M:System.Activities.Design.View.VirtualizedContainerService.GetContainer(System.Activities.Design.Model.ModelItem,System.Activities.Design.ISourceContainer)">
      <returns>Returns <see cref="T:System.Windows.UIElement" />.</returns>
      <param name="modelItem"></param>
      <param name="sourceContainer"></param>
    </member>
    <member name="M:System.Activities.Design.View.VirtualizedContainerService.GetHintSize(System.Object)">
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="instance"></param>
    </member>
    <member name="F:System.Activities.Design.View.VirtualizedContainerService.HintSizeName"></member>
    <member name="M:System.Activities.Design.View.VirtualizedContainerService.SetHintSize(System.Object,System.Object)">
      <param name="instance"></param>
      <param name="value"></param>
    </member>
    <member name="T:System.Activities.Design.View.WorkflowViewService">
      <summary>Handles the mapping of activity designer visual elements and their underlying model items.</summary>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewService.#ctor(System.Activities.Design.EditingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.View.WorkflowViewService" /> class that uses the specified <see cref="T:System.Activities.Design.EditingContext" />.</summary>
      <param name="context">The editing tool that is used to manipulate objects on the design surface.</param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewService.CreateViewElement(System.Activities.Design.Model.ModelItem)">
      <summary>Creates a new <see cref="T:System.Activities.Design.WorkflowViewElement" /> that supports the type of the specified <see cref="T:System.Activities.Design.Model.ModelItem" />.</summary>
      <returns>A workflow view element that supports the same type as the model item argument.</returns>
      <param name="modelItem">One entity in the editing model of an activity designer.</param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewService.GetModel(System.Windows.DependencyObject)">
      <summary>Returns a <see cref="T:System.Activities.Design.Model.ModelItem" /> that maps to the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A model item that maps to a dependency object.</returns>
      <param name="view">A workflow view element that contains the model item.</param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewService.GetView(System.Activities.Design.Model.ModelItem)">
      <summary>Creates a new <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> that maps to the specified <see cref="T:System.Activities.Design.Model.ModelItem" />.</summary>
      <returns>A dependency object that maps to a model item.</returns>
      <param name="model">One entity in the editing model of an activity designer.</param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewService.GetViewElement(System.Activities.Design.Model.ModelItem)">
      <summary>Creates a new <see cref="T:System.Activities.Design.WorkflowViewElement" /> that maps to the specified <see cref="T:System.Activities.Design.Model.ModelItem" />.</summary>
      <returns>A new view element that maps to a specified model item.</returns>
      <param name="modelItem">One entity in the editing model of an activity designer.</param>
    </member>
    <member name="T:System.Activities.Design.View.WorkflowViewStateService"></member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.#ctor(System.Activities.Design.EditingContext)">
      <param name="context"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.GetViewState(System.Object)">
      <returns>Returns <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
      <param name="instance"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.RemoveViewState(System.Activities.Design.Model.ModelItem,System.String)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="modelItem"></param>
      <param name="key"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.RetrieveAllViewState(System.Activities.Design.Model.ModelItem)">
      <returns>Returns <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
      <param name="modelItem"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.RetrieveViewState(System.Activities.Design.Model.ModelItem,System.String)">
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="modelItem"></param>
      <param name="key"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.SetViewState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <param name="instance"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.StoreViewState(System.Activities.Design.Model.ModelItem,System.String,System.Object)">
      <param name="modelItem"></param>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.StoreViewStateWithUndo(System.Activities.Design.Model.ModelItem,System.String,System.Object)">
      <param name="modelItem"></param>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="E:System.Activities.Design.View.WorkflowViewStateService.UndoableViewStateChanged"></member>
    <member name="E:System.Activities.Design.View.WorkflowViewStateService.ViewStateChanged"></member>
    <member name="F:System.Activities.Design.View.WorkflowViewStateService.ViewStateName"></member>
    <member name="T:System.WorkflowModel.Design.ModelTree.MorphHelper"></member>
    <member name="M:System.WorkflowModel.Design.ModelTree.MorphHelper.AddPropertyValueMorphHelper(System.Type,System.WorkflowModel.Design.ModelTree.PropertyValueMorphHelper)"></member>
    <member name="M:System.WorkflowModel.Design.ModelTree.MorphHelper.GetPropertyValueMorphHelper(System.Type)">
      <returns>Returns <see cref="T:System.WorkflowModel.Design.ModelTree.MorphHelper.PropertyValueMorphHelper" />.</returns>
      <param name="propertyType"></param>
    </member>
    <member name="M:System.WorkflowModel.Design.ModelTree.MorphHelper.MorphObject(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItem)">
      <param name="oldModelItem"></param>
      <param name="newModelitem"></param>
    </member>
    <member name="M:System.WorkflowModel.Design.ModelTree.MorphHelper.MorphProperties(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItem)">
      <param name="oldModelItem"></param>
      <param name="newModelitem"></param>
    </member>
    <member name="T:System.WorkflowModel.Design.ModelTree.PropertyValueMorphHelper"></member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.AddIn.Contract.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.AddIn.Contract</name>
  </assembly>
  <members>
    <member name="T:System.AddIn.Contract.IContract">
      <summary>Represents the base interface for all contracts that are used for communication between components that are updated independently.</summary>
    </member>
    <member name="M:System.AddIn.Contract.IContract.AcquireLifetimeToken">
      <summary>Specifies that the contract is accessible to a client until the client revokes the contract.</summary>
      <returns>A value, also known as a lifetime token, that identifies the client that has acquired the contract.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IContract.GetRemoteHashCode">
      <summary>Returns a hash code for the <see cref="T:System.AddIn.Contract.IContract" />.</summary>
      <returns>A hash code for the <see cref="T:System.AddIn.Contract.IContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IContract.QueryContract(System.String)">
      <summary>Returns a contract that is implemented by this contract.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.IContract" /> that represents a contract that a client is requesting from the current contract; null if the current contract does not support the contract that is requested.</returns>
      <param name="contractIdentifier">A string that identifies the contract that is being requested.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IContract.RemoteEquals(System.AddIn.Contract.IContract)">
      <summary>Indicates whether the specified contract is equal to this <see cref="T:System.AddIn.Contract.IContract" />.</summary>
      <returns>true if <paramref name="contract" /> is equal to this <see cref="T:System.AddIn.Contract.IContract" />; otherwise, false.</returns>
      <param name="contract">The contract to compare with this <see cref="T:System.AddIn.Contract.IContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IContract.RemoteToString">
      <summary>Returns a string representation of the current <see cref="T:System.AddIn.Contract.IContract" />.</summary>
      <returns>A string representation of the current <see cref="T:System.AddIn.Contract.IContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IContract.RevokeLifetimeToken(System.Int32)">
      <summary>Specifies that the contract is no longer accessible to a client.</summary>
      <param name="token">A value, also known as a lifetime token, that identifies the client that is revoking the contract.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.IEnumeratorContract`1">
      <summary>Enumerates the elements in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <typeparam name="T">The type of objects being enumerated. </typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IEnumeratorContract`1.GetCurrent">
      <summary>Returns the object in the collection at the current position of the enumerator.</summary>
      <returns>The <see cref="T:System.AddIn.Contract.IContract" /> in the collection at the current position of the enumerator.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IEnumeratorContract`1.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IEnumeratorContract`1.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.IExecutorExtensionContract">
      <summary>Defines an interface that host applications can implement to extend add-in executors.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.AssemblyLoaded(System.String)">
      <summary>Called after an add-in executor loads an add-in assembly.</summary>
      <param name="assemblyName">The name of the assembly that was loaded.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.AssemblyLoadedFrom(System.String)">
      <summary>Called after an add-in executor loads an add-in assembly from a specified location.</summary>
      <param name="assemblyFile">The name of the assembly that was loaded.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.AssemblyLoading(System.String)">
      <summary>Called just before an add-in executor loads an add-in assembly.</summary>
      <param name="assemblyName">The name of the assembly to be loaded.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.AssemblyLoadingFrom(System.String)">
      <summary>Called just before an add-in executor loads an add-in assembly from a specified location.</summary>
      <param name="assemblyFile">The name of the assembly to be loaded.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.EntryPointStarted(System.AddIn.Contract.IContract)">
      <summary>Called after an add-in executor instantiates the entry point of an add-in assembly.</summary>
      <param name="entryPoint">An <see cref="T:System.AddIn.Contract.IContract" /> that represents the entry point that was instantiated.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.EntryPointStarting(System.String,System.String,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract)">
      <summary>Called just before an add-in executor instantiates the entry point in an add-in assembly.</summary>
      <param name="assemblyName">The name of the add-in assembly.</param>
      <param name="startupClass">The name of the class that is the entry point for the add-in assembly.</param>
      <param name="initArgs">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /> that contains the arguments that will be passed to the constructor for <paramref name="startupClass" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.ExecutorCreated">
      <summary>Called after an add-in loader creates a new add-in executor.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.IListContract`1">
      <summary>Represents a generic list of types that are defined by a contract and are used to pass collections of that contract type between a host and an add-in.</summary>
      <typeparam name="T">The contract type of the objects in the list.</typeparam>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.Add(`0)">
      <summary>Adds an object to an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection. </summary>
      <param name="item">The object to add.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.Clear">
      <summary>Removes all objects from an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.Contains(`0)">
      <summary>Determines whether a specific item is in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <returns>true if <paramref name="item" /> is in the collection; otherwise, false. </returns>
      <param name="item">The object to look for in the collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.GetCount">
      <summary>Gets the number of items in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <returns>The number of items in the collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.GetEnumeratorContract">
      <summary>Returns an enumerator that iterates through an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.IEnumeratorContract`1" /> enumerator to iterate through the collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.GetIsReadOnly">
      <summary>Determines whether an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.GetItem(System.Int32)">
      <summary>Returns the item at the specified index of an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <returns>The item at the specified index.</returns>
      <param name="index">The zero-based index of the item to get.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.IListContract`1.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.IndexOf(`0)">
      <summary>Returns the index of a specific item in an <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> collection.</summary>
      <returns>The index of the specified item.</returns>
      <param name="item">An item in the collection.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of the <see cref="M:System.AddIn.Contract.IListContract`1.GetCount" /> method.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.Insert(System.Int32,`0)">
      <summary>Inserts an item at the specified index in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="item" />.</param>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> object to insert in the <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.IListContract`1.GetCount" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.IListContract`1" /> collection is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.Remove(`0)">
      <summary>Removes an item from an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection of a specified type.</summary>
      <returns>true if an item is removed; otherwise, false. </returns>
      <param name="item">The item to remove from the collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <param name="index">The index of the item to remove.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of the <see cref="M:System.AddIn.Contract.IListContract`1.GetCount" /> method.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.IListContract`1" /> collection is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.SetItem(System.Int32,`0)">
      <summary>Sets the item at the specified index in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <param name="index">The zero-based index at which to set the item.</param>
      <param name="item">The item to set at the specified index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of the <see cref="M:System.AddIn.Contract.IListContract`1.GetCount" /> method.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.IListContract`1" /> collection is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.INativeHandleContract">
      <summary>Provides access to a window's handle (Hwnd) from native code. </summary>
    </member>
    <member name="M:System.AddIn.Contract.INativeHandleContract.GetHandle">
      <summary>Obtains the window's handle (Hwnd).</summary>
      <returns>An <see cref="T:System.IntPtr" /> object that represents a pointer to the window's handle.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.IProfferServiceContract">
      <summary>Enables clients to provide custom services to components on which the contract is implemented.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IProfferServiceContract.ProfferService(System.String,System.AddIn.Contract.IServiceProviderContract)">
      <summary>Adds a service to the set of services that can be accessed by clients of a component. </summary>
      <param name="serviceIdentifier">A string that identifies the service being offered. </param>
      <param name="service">An <see cref="T:System.AddIn.Contract.IServiceProviderContract" /> that implements the service being offered.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IProfferServiceContract.RevokeService(System.String)">
      <summary>Removes a service from the set of services offered by a component. </summary>
      <param name="serviceIdentifier">A string that identifies the service being revoked.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.ISerializableObjectContract">
      <summary>Defines a contract that provides information about a serializable object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.ISerializableObjectContract.GetCanonicalName">
      <summary>Returns the canonical name of the type of the object that this <see cref="T:System.AddIn.Contract.ISerializableObjectContract" /> describes.</summary>
      <returns>The canonical name of the type of the object that this <see cref="T:System.AddIn.Contract.ISerializableObjectContract" /> describes.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.ISerializableObjectContract.GetSerializableObjectData">
      <summary>Returns data that can be used to help deserialize the object that this <see cref="T:System.AddIn.Contract.ISerializableObjectContract" /> describes.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.SerializableObjectData" /> that contains data about the object that this <see cref="T:System.AddIn.Contract.ISerializableObjectContract" /> describes.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.IServiceProviderContract">
      <summary>Defines a mechanism for retrieving a service contract from a component.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IServiceProviderContract.QueryService(System.String,System.String)">
      <summary>Returns a service contract that is implemented by this <see cref="T:System.AddIn.Contract.IServiceProviderContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.IContract" /> that represents a service contract that a client is requesting from the <see cref="T:System.AddIn.Contract.IServiceProviderContract" />; null if the <see cref="T:System.AddIn.Contract.IServiceProviderContract" /> does not implement the requested contract.</returns>
      <param name="serviceIdentifier">The name of the service that is being requested.</param>
      <param name="serviceContractIdentifier">The service contract that is being requested.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.RemoteArgument">
      <summary>Represents an instance of a type that can be passed across process and application domain boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.AddIn.Contract.IContract)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.AddIn.Contract.IContract" /> argument.</summary>
      <param name="value">An <see cref="T:System.AddIn.Contract.IContract" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.AddIn.Contract.IContract,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.AddIn.Contract.IContract" /> argument that can be passed by reference.</summary>
      <param name="value">An <see cref="T:System.AddIn.Contract.IContract" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.AddIn.Contract.RemoteArgumentKind,System.TypeCode)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class using the specified <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> and <see cref="T:System.TypeCode" /> for an argument that is not passed by reference.</summary>
      <param name="remoteArgKind">One of the <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> values that indicates whether the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an intrinsic type, an array of intrinsic types, an <see cref="T:System.AddIn.Contract.IContract" />, or the <see cref="F:System.Type.Missing" /> value.</param>
      <param name="typeCode">A <see cref="T:System.TypeCode" /> that specifies the base type of the remote argument.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> or <see cref="F:System.AddIn.Contract.RemoteArgumentKind.IntrinsicArray" />, and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Object" /> or <see cref="F:System.TypeCode.Empty" />.-or-<paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Missing" /> and <paramref name="typeCode" /> is not <see cref="F:System.TypeCode.Empty" />.-or-<paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Contract" /> and <paramref name="typeCode" /> is not <see cref="F:System.TypeCode.Object" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.AddIn.Contract.RemoteArgumentKind,System.TypeCode,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class using the specified <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> and <see cref="T:System.TypeCode" /> for an argument that can be passed by reference.</summary>
      <param name="remoteArgKind">One of the <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> values that indicates whether the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an intrinsic type, an array of intrinsic types, an <see cref="T:System.AddIn.Contract.IContract" />, or the <see cref="F:System.Type.Missing" /> value.</param>
      <param name="typeCode">A <see cref="T:System.TypeCode" /> that specifies the base type of the remote argument.</param>
      <param name="isByRef">true if the remote argument is passed by reference; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> or <see cref="F:System.AddIn.Contract.RemoteArgumentKind.IntrinsicArray" />, and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Object" /> or <see cref="F:System.TypeCode.Empty" />.-or-<paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Missing" /> and <paramref name="typeCode" /> is not <see cref="F:System.TypeCode.Empty" />.-or-<paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Contract" /> and <paramref name="typeCode" /> is not <see cref="F:System.TypeCode.Object" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="remoteArgKind" /> is not a valid <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> value. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Array)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Array" /> argument.</summary>
      <param name="array">An <see cref="T:System.Array" /> argument that can be passed across process or application domain boundaries.</param>
      <exception cref="T:System.ArgumentException">The array element type is not a base type (that is, the <see cref="M:System.Type.GetTypeCode(System.Type)" /> method for the array element type returns <see cref="F:System.TypeCode.Object" />).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Array,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Array" /> argument that can be passed by reference.</summary>
      <param name="array">An <see cref="T:System.Array" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="array" /> is an argument that is passed by reference; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The array element type is not a base type (that is, the <see cref="M:System.Type.GetTypeCode(System.Type)" /> method returns <see cref="F:System.TypeCode.Object" /> for the array element type).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Boolean" /> argument.</summary>
      <param name="value">A <see cref="T:System.Boolean" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Boolean" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Boolean" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Byte" /> argument.</summary>
      <param name="value">A <see cref="T:System.Byte" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Byte,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Byte" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Byte" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Char)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Char" /> argument.</summary>
      <param name="value">A <see cref="T:System.Char" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Char,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Char" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Char" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.DateTime" /> argument.</summary>
      <param name="value">A <see cref="T:System.DateTime" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.DateTime,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.DateTime" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.DateTime" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.DBNull)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.DBNull" /> argument.</summary>
      <param name="value">A <see cref="T:System.DBNull" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.DBNull,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.DBNull" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.DBNull" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Decimal)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Decimal" /> argument.</summary>
      <param name="value">A <see cref="T:System.Decimal" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Decimal,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Decimal" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Decimal" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Double" /> argument.</summary>
      <param name="value">A <see cref="T:System.Double" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Double,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Double" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Double" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int16" /> argument.</summary>
      <param name="value">An <see cref="T:System.Int16" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int16,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int16" /> argument that can be passed by reference.</summary>
      <param name="value">An <see cref="T:System.Int16" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int32" /> argument.</summary>
      <param name="value">An <see cref="T:System.Int32" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int32" /> argument that can be passed by reference.</summary>
      <param name="value">An <see cref="T:System.Int32" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int64" /> argument.</summary>
      <param name="value">An <see cref="T:System.Int64" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int64,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int64" /> argument that can be passed by reference.</summary>
      <param name="value">An <see cref="T:System.Int64" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.SByte)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.SByte" /> argument.</summary>
      <param name="value">An <see cref="T:System.SByte" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.SByte,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.SByte" /> argument that can be passed by reference.</summary>
      <param name="value">An <see cref="T:System.SByte" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Single" /> argument.</summary>
      <param name="value">A <see cref="T:System.Single" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Single,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Single" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Single" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.String" /> argument.</summary>
      <param name="value">A <see cref="T:System.String" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.String" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.String" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt16)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt16" /> argument.</summary>
      <param name="value">A <see cref="T:System.UInt16" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt16,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt16" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.UInt16" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt32" /> argument.</summary>
      <param name="value">A <see cref="T:System.UInt32" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt32" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.UInt32" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt64)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt64" /> argument.</summary>
      <param name="value">A <see cref="T:System.UInt64" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt64,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt64" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.UInt64" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.ArrayValue">
      <summary>Gets or sets the <see cref="T:System.Array" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Array" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; null if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.IntrinsicArray" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is set to the <see cref="F:System.TypeCode.Object" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.BooleanValue">
      <summary>Gets or sets the <see cref="T:System.Boolean" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Boolean" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; false if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Boolean" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.ByteValue">
      <summary>Gets or sets the <see cref="T:System.Byte" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Byte" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Byte" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.CharValue">
      <summary>Gets or sets the <see cref="T:System.Char" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Char" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; <see cref="F:System.Char.MinValue" /> if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Char" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.ContractValue">
      <summary>Gets or sets the <see cref="T:System.AddIn.Contract.IContract" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.AddIn.Contract.IContract" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; null if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Contract" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Object" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.CreateRemoteArgument(System.Object)">
      <summary>Creates a <see cref="T:System.AddIn.Contract.RemoteArgument" /> for an argument that is not passed by reference. </summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that represents the specified argument.</returns>
      <param name="value">The argument that will be passed across process or application domain boundaries.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Object" /> and <paramref name="value" /> is not an <see cref="T:System.AddIn.Contract.IContract" />.-or-The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Empty" /> and <paramref name="value" /> is not set to <see cref="F:System.Reflection.Missing.Value" />.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface and <paramref name="value" /> is not an <see cref="T:System.Array" />.-or-<paramref name="value" /> is an <see cref="T:System.Array" /> that contains elements with a <see cref="T:System.TypeCode" /> value of <see cref="F:System.TypeCode.Object" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.CreateRemoteArgument(System.Object,System.Boolean)">
      <summary>Creates a <see cref="T:System.AddIn.Contract.RemoteArgument" /> for an argument that can be passed by reference. </summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that represents the specified argument.</returns>
      <param name="value">The argument that will be passed across process or application domain boundaries.</param>
      <param name="isByRef">true to pass the <paramref name="value" /> argument by reference; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Object" /> and <paramref name="value" /> is not an <see cref="T:System.AddIn.Contract.IContract" />.-or-The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Empty" /> and <paramref name="value" /> is not set to <see cref="F:System.Reflection.Missing.Value" />.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface and <paramref name="value" /> is not an <see cref="T:System.Array" />.-or-<paramref name="value" /> is an <see cref="T:System.Array" /> that contains elements with a <see cref="T:System.TypeCode" /> value of <see cref="F:System.TypeCode.Object" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.CreateRemoteArgument(System.Object,System.Boolean,System.TypeCode)">
      <summary>Creates a <see cref="T:System.AddIn.Contract.RemoteArgument" /> for an argument that has the specified type code and that can be passed by reference.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that represents the specified argument.</returns>
      <param name="value">The argument that will be passed across process or application domain boundaries.</param>
      <param name="isByRef">true to pass the argument by reference; otherwise, false.</param>
      <param name="typeCodeToUse">A <see cref="T:System.TypeCode" /> that indicates the type code of <paramref name="value" />, if <paramref name="value" /> is not an <see cref="T:System.Array" />. Otherwise, a <see cref="T:System.TypeCode" /> that indicates the type code of the elements in <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Object" />, <paramref name="value" /> is not an <see cref="T:System.AddIn.Contract.IContract" />, and <paramref name="value" /> is not null.-or-The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Empty" /> and <paramref name="value" /> is not <see cref="F:System.Reflection.Missing.Value" />.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface, <paramref name="value" /> is not null, and <paramref name="value" /> is not an <see cref="T:System.Array" />. -or-<paramref name="value" /> is an <see cref="T:System.Array" /> that contains elements with a <see cref="T:System.TypeCode" /> value of <see cref="F:System.TypeCode.Object" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is not <see cref="F:System.TypeCode.DBNull" /> and <paramref name="typeCodeToUse" /> is <see cref="F:System.TypeCode.DBNull" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="typeCodeToUse" /> does not specify a valid <see cref="T:System.TypeCode" /> value.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.DateTimeValue">
      <summary>Gets or sets the <see cref="T:System.DateTime" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.DateTime" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; <see cref="F:System.DateTime.MinValue" /> if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.DateTime" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.DBNullValue">
      <summary>Gets or sets the <see cref="T:System.DBNull" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.DBNull" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; null if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.DBNull" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.DecimalValue">
      <summary>Gets or sets the <see cref="T:System.Decimal" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Decimal" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Decimal" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.DoubleValue">
      <summary>Gets or sets the <see cref="T:System.Double" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Double" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0.0 if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Double" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.Int16Value">
      <summary>Gets or sets the <see cref="T:System.Int16" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Int16" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Int16" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.Int32Value">
      <summary>Gets or sets the <see cref="T:System.Int32" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Int32" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Int32" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.Int64Value">
      <summary>Gets or sets the <see cref="T:System.Int64" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Int64" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Int64" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.IsByRef">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an argument that is passed by reference.</summary>
      <returns>true if the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an argument that is passed by reference; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.MissingValue">
      <summary>Gets the <see cref="F:System.Type.Missing" /> value. </summary>
      <returns>The <see cref="F:System.Type.Missing" /> value.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-This property value is retrieved while the <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Empty" /> value.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind">
      <summary>Gets a <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> that indicates the kind of argument that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents.</summary>
      <returns>One of the <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> values that indicates whether the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an intrinsic type, an array of intrinsic types, an <see cref="T:System.AddIn.Contract.IContract" />, or the <see cref="F:System.Type.Missing" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.SByteValue">
      <summary>Gets or sets the <see cref="T:System.SByte" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.SByte" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.SByte" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.SingleValue">
      <summary>Gets or sets the <see cref="T:System.Single" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Single" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0.0 if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Single" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.StringValue">
      <summary>Gets or sets the <see cref="T:System.String" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.String" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; null if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.String" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.TypeCode">
      <summary>Gets a <see cref="T:System.TypeCode" /> that indicates the base type of the argument that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents.</summary>
      <returns>A <see cref="T:System.TypeCode" /> that indicates the base type of the argument that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.UInt16Value">
      <summary>Gets or sets the <see cref="T:System.UInt16" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.UInt16" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.UInt16" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.UInt32Value">
      <summary>Gets or sets the <see cref="T:System.UInt32" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.UInt32" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.UInt32" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.UInt64Value">
      <summary>Gets or sets the <see cref="T:System.UInt64" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.UInt64" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.UInt64" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.RemoteArgumentKind">
      <summary>Specifies the kind of argument that a <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.RemoteArgumentKind.Missing">
      <summary>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents the <see cref="F:System.Type.Missing" /> value. This is the default value for the <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property.</summary>
    </member>
    <member name="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic">
      <summary>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an intrinsic data type.</summary>
    </member>
    <member name="F:System.AddIn.Contract.RemoteArgumentKind.IntrinsicArray">
      <summary>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an <see cref="T:System.Array" /> that contains elements of an intrinsic data type.</summary>
    </member>
    <member name="F:System.AddIn.Contract.RemoteArgumentKind.Contract">
      <summary>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an <see cref="T:System.AddIn.Contract.IContract" />.</summary>
    </member>
    <member name="T:System.AddIn.Contract.SerializableObjectData">
      <summary>Provides information about a serializable object. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.DimensionLengths">
      <summary>Represents an array that contains the length of each of the dimensions of the serializable array that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.DimensionLowerBounds">
      <summary>Represents an array that contains the lower bound of each of the dimensions of the serializable array that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.ElementIndexes">
      <summary>Represents an array that contains the indexes of the parent array that contains the serializable object that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.IsArray">
      <summary>Indicates whether the <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes a serializable array.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.IsArrayElement">
      <summary>Indicates whether the <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes an element in a serializable array.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.MemberName">
      <summary>Represents the member name of the serializable object that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.ObjectId">
      <summary>Represents the ID of the serializable object that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.ParentId">
      <summary>Represents the ID of the parent of the serializable object that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteDelegateContract">
      <summary>Defines a contract that components can use to access a delegate across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteDelegateContract.InvokeDelegate(System.AddIn.Contract.Collections.IRemoteArgumentArrayContract)">
      <summary>Invokes the delegate that this <see cref="T:System.AddIn.Contract.Automation.IRemoteDelegateContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the return value of the invoked delegate.</returns>
      <param name="args">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /> that specifies the delegate parameters.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract">
      <summary>Defines a contract that components can use to access information about an event across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteEventInfoContract.GetAddMethod">
      <summary>Returns the method that was used to add an event handler delegate to the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that represents the method that was used to add an event handler delegate to the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteEventInfoContract.GetMemberData">
      <summary>Returns information about the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Automation.RemoteMemberData" /> that provides information about the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteEventInfoContract.GetRemoveMethod">
      <summary>Returns the method that was used to remove an event handler delegate from the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that represents the method that was used to remove an event handler delegate from the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract">
      <summary>Defines a contract that components can use to access information about a field across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteFieldInfoContract.GetFieldData">
      <summary>Returns information about the field that this <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Automation.RemoteFieldData" /> that provides information about the field that this <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteFieldInfoContract.GetValue(System.AddIn.Contract.Automation.IRemoteObjectContract)">
      <summary>Returns the value of the field that this <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the field value.</returns>
      <param name="obj">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> that identifies the object that contains the field.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteFieldInfoContract.SetValue(System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.RemoteArgument,System.Int32)">
      <summary>Sets the value of the field that this <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> represents.</summary>
      <param name="obj">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> that identifies the object that contains the field.</param>
      <param name="value">A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the field value.</param>
      <param name="localeId">The locale ID that the field will use for any locale-specific type conversions.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract">
      <summary>Defines a contract that components can use to access information about a method across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteMethodInfoContract.GetMethodData">
      <summary>Returns information about the method that this <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Automation.RemoteMethodData" /> that provides information about the method that this <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteMethodInfoContract.Invoke(System.AddIn.Contract.Automation.IRemoteObjectContract,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Int32)">
      <summary>Invokes the method that this <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the return value of the invoked method.</returns>
      <param name="target">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> that identifies the object that contains the method to invoke.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to invoke the method.</param>
      <param name="parameters">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /> that specifies the method parameters; null if the method does not have any parameters.</param>
      <param name="localeId">The locale ID that the method will use for any locale-specific type conversions of the arguments or return value.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteObjectContract">
      <summary>Defines a contract that components can use to access an object across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that specifies the type of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that specifies the type of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)">
      <summary>Casts the object identified by the current <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> to a specified type. </summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that represents the result of the cast operation.</returns>
      <param name="canonicalName">The canonical name of the type to cast the object to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract">
      <summary>Defines a contract that components can use to access information about a property across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemotePropertyInfoContract.GetGetMethod">
      <summary>Returns the get accessor of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that represents the get accessor of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies; null if the property does not have a get accessor.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemotePropertyInfoContract.GetPropertyData">
      <summary>Returns information about the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> that provides information about the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemotePropertyInfoContract.GetSetMethod">
      <summary>Returns the set accessor of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that represents the set accessor of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies; null if the property does not have a set accessor.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemotePropertyInfoContract.GetValue(System.AddIn.Contract.Automation.IRemoteObjectContract,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Int32)">
      <summary>Returns the value of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the property value.</returns>
      <param name="obj">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> that identifies the object that contains the property.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to invoke the property.</param>
      <param name="index">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" />  that specifies the index values for an indexed property; null if the property is not indexed.</param>
      <param name="localeId">A locale ID to use for locale-specific conversions that are performed by the property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemotePropertyInfoContract.SetValue(System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.RemoteArgument@,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Int32)">
      <summary>Sets the value of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</summary>
      <param name="target">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> that identifies the object that contains the property.</param>
      <param name="value">A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the property value.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to invoke the property.</param>
      <param name="index">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /> that specifies the index values for an indexed property; null if the property is not indexed.</param>
      <param name="localeId">The locale ID that the property will use for any locale-specific type conversions.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteTypeContract">
      <summary>Defines a contract that components can use to access type information and invoke members across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetCanonicalName">
      <summary>Returns the canonical name of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>The canonical name of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> that provides access to a specified event of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> that provides access to the specified event, if found; otherwise, null.</returns>
      <param name="name">The name of an event of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the event.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvents(System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> objects that provides access to the specified events of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> objects that provides access to the events that match the specified binding constraints; otherwise, an empty <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" />.</returns>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the events.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> that provides access to a specified field of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> that provides access to the specified field, if found; otherwise, null.</returns>
      <param name="name">The name of a field of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the field.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> objects that provides access to the specified fields of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> objects that provides access to the fields that match the specified binding constraints; otherwise, an empty <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" />.</returns>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the fields.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterface(System.String)">
      <summary>Returns an interface that is implemented by the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that represents the interface with the specified canonical name that this <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> implements. null if this <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> does not implement an interface with the specified canonical name.</returns>
      <param name="canonicalName">The canonical name of an interface that is implemented by the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterfaces">
      <summary>Returns the interfaces that are implemented by the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> objects that represent all the interfaces that are implemented by the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.IContract" /> objects that provides access to all the specified members of the specified member type in the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />, using the specified binding constraints.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.IContract" /> objects that represent the members of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that have the specified name and that meet the criteria specified by the <paramref name="memberTypes" /> and <paramref name="bindingFlags" /> parameters.</returns>
      <param name="name">The name of a member of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />. The name can represent multiple members that have the same name.</param>
      <param name="memberTypes">A bitwise combination of the <see cref="T:System.Reflection.MemberTypes" /> values that specifies the members to search for.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the members.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMembers(System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.IContract" /> objects that provides access to all the members in the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that match the specified binding constraints.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.IContract" /> objects that provides access to the members of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that meet the specified binding constraints.</returns>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the members.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethod(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that provides access to a specified method of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that provides access to the specified method, if found; otherwise, null.</returns>
      <param name="name">The name of a method of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the method.</param>
      <param name="remoteTypes">An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> objects that represent the number, order, and type of the parameters for the method to get.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> objects that provides access to the specified methods of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> objects that provides access to the methods that match the specified binding constraints.</returns>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the methods.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperties(System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> objects that provides access to the specified properties of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> objects that provides access to the properties that match the specified binding constraints.</returns>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the properties.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperty(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteTypeContract,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> that provides access to a specified property of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> that provides access to the specified property, if found; otherwise, null.</returns>
      <param name="name">The name of a property of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the method.</param>
      <param name="remoteReturnType">An <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that specifies the return type of the property.</param>
      <param name="remoteTypes">An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> objects that represent the parameters for the specified property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetTypeData">
      <summary>Returns type information about the object that the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> that contains information about the object that the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
      <summary>Invokes the specified member of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that represents the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the member.</param>
      <param name="target">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> on which to invoke the specified member.</param>
      <param name="remoteArgs">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /> that contains the arguments to pass to the member to invoke.</param>
      <param name="remoteArgModifiers">An array of Boolean values that indicate whether each of the <paramref name="remoteArgs" /> values is passed by reference. </param>
      <param name="localeId">A locale ID to use for locale-specific conversions that might be performed by the member being invoked.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemoteFieldData">
      <summary>Provides information about a field of a type that components can access across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteFieldData.Attributes">
      <summary>Represents the attributes of the field that this <see cref="T:System.AddIn.Contract.Automation.RemoteFieldData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteFieldData.FieldType">
      <summary>Represents the type of the value of the field that this <see cref="T:System.AddIn.Contract.Automation.RemoteFieldData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteFieldData.MemberData">
      <summary>Represents member data for the field that this <see cref="T:System.AddIn.Contract.Automation.RemoteFieldData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemoteMemberData">
      <summary>Provides information about a member of a type that components can access across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMemberData.DeclaringType">
      <summary>Represents the type that declares the member that this <see cref="T:System.AddIn.Contract.Automation.RemoteMemberData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMemberData.Name">
      <summary>Represents the name of the member that this <see cref="T:System.AddIn.Contract.Automation.RemoteMemberData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemoteMethodData">
      <summary>Provides information about a method of a type that components can access across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMethodData.Attributes">
      <summary>Represents the attributes of the method that this <see cref="T:System.AddIn.Contract.Automation.RemoteMethodData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMethodData.MemberData">
      <summary>Represents member data for the method that this <see cref="T:System.AddIn.Contract.Automation.RemoteMethodData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMethodData.Parameters">
      <summary>Represents information about the parameters of the method that this <see cref="T:System.AddIn.Contract.Automation.RemoteMethodData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMethodData.ReturnParameter">
      <summary>Represents information about the return value of the method that this <see cref="T:System.AddIn.Contract.Automation.RemoteMethodData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemoteParameterData">
      <summary>Provides information about a parameter or return value of a method that belongs to a type that components can access across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.Attributes">
      <summary>Represents the attributes of the method parameter that this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.DefaultValue">
      <summary>Represents the default value of the method parameter that this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.IsByRef">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes a method parameter that is passed by reference.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.IsParameterArray">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes a method parameter that can have a variable number of arguments.</summary>
      <returns>true if the data is a parameter array; otherwise, false. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.Name">
      <summary>Represents the name of the method parameter that this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.ParameterType">
      <summary>Represents the type of the method parameter or return value that this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.Position">
      <summary>Represents the position of the method parameter that this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes in relation to the other parameters of the method.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemotePropertyData">
      <summary>Provides information about a property of a type that components can access across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.Attributes">
      <summary>Represents the attributes of the property that this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.CanRead">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes a readable property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.CanWrite">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes a writable property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.IndexParameters">
      <summary>Represents the index parameters for the property that this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.MemberData">
      <summary>Represents member data for the property that this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.PropertyType">
      <summary>Represents the type of the property that this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemoteTypeData">
      <summary>Provides information about a type that components can access across application domain and process boundaries. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.ArrayRank">
      <summary>Indicates the rank (that is, the number of dimensions) of the remote array type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.AssemblyName">
      <summary>Represents the full name of the assembly that contains the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.AssemblyQualifiedName">
      <summary>Represents the name of the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes, qualified by the name of the assembly that contains the type.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.Attributes">
      <summary>Represents the attributes of the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.BaseType">
      <summary>Represents the base type of the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.ElementType">
      <summary>Represents the type of the elements in the remote array type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.FullName">
      <summary>Represents the name of the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes, qualified by the namespace.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.IsArray">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes an array type.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.IsByRef">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes a type that is passed by reference.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.MemberData">
      <summary>Represents member data for the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.TypeCode">
      <summary>Represents the type of the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IArrayContract`1">
      <summary>Represents a generic array of <see cref="T:System.AddIn.Contract.IContract" /> objects.</summary>
      <typeparam name="C">The type of elements in the array. <paramref name="C" /> must implement the <see cref="T:System.AddIn.Contract.IContract" /> interface.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IArrayContract`1.GetCount">
      <summary>Returns the number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IArrayContract`1.GetItem(System.Int32)">
      <summary>Returns the element at the specified index. </summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to return. </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IArrayContract`1.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IArrayContract`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index with the specified <see cref="T:System.AddIn.Contract.IContract" />.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="value">The new value for the element at the specified index. </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IArrayContract`1.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.ICollectionContract`1">
      <summary>Represents a generic collection of <see cref="T:System.AddIn.Contract.IContract" /> objects.</summary>
      <typeparam name="C">The type of elements in the collection. <paramref name="C" /> must implement the <see cref="T:System.AddIn.Contract.IContract" /> interface.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.Add(`0)">
      <summary>Adds an <see cref="T:System.AddIn.Contract.IContract" /> to the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</summary>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> to add to the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.Clear">
      <summary>Removes all elements from the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.Contains(`0)">
      <summary>Returns a value that indicates whether the specified <see cref="T:System.AddIn.Contract.IContract" /> is in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</summary>
      <returns>true if the specified <see cref="T:System.AddIn.Contract.IContract" /> is in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> to locate in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> to a compatible one-dimensional array, starting at the specified index of the target array. </summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />. </param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination array.-or-Type <paramref name="C" /> cannot be cast automatically to the type of the destination array.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount">
      <summary>Returns the number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetIsReadOnly">
      <summary>Returns a value that indicates whether the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is read-only; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.AddIn.Contract.IContract" /> from the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</summary>
      <returns>true if <paramref name="item" /> is successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</returns>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> to remove from the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IEnumerableContract`1">
      <summary>Exposes an enumerator that supports a simple iteration over a generic collection of <see cref="T:System.AddIn.Contract.IContract" /> objects.</summary>
      <typeparam name="C">The type of objects to enumerate. <paramref name="C" /> must implement the <see cref="T:System.AddIn.Contract.IContract" /> interface.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IEnumerableContract`1.GetEnumeratorContract">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IEnumeratorContract`1" /> that can be used to iterate through the collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IEnumeratorContract`1">
      <summary>Enumerates the elements of a generic collection of <see cref="T:System.AddIn.Contract.IContract" /> objects.</summary>
      <typeparam name="C">The type of objects to enumerate. <paramref name="C" /> must implement the <see cref="T:System.AddIn.Contract.IContract" /> interface.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent">
      <summary>Returns the <see cref="T:System.AddIn.Contract.IContract" /> in the collection at the current position of the enumerator.</summary>
      <returns>The <see cref="T:System.AddIn.Contract.IContract" /> in the collection at the current position of the enumerator.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IListContract`1">
      <summary>Represents a generic collection of <see cref="T:System.AddIn.Contract.IContract" /> objects that can be individually accessed by index.</summary>
      <typeparam name="C">The type of objects in the list. <paramref name="C" /> must implement the <see cref="T:System.AddIn.Contract.IContract" /> interface.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IListContract`1.GetItem(System.Int32)">
      <summary>Returns the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IListContract`1.IndexOf(`0)">
      <summary>Returns the index of a specific element in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</summary>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> to locate in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IListContract`1.Insert(System.Int32,`0)">
      <summary>Inserts an element in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="item" />.</param>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> to insert in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IListContract`1.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index.</summary>
      <param name="index">The index of the element to remove.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IListContract`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index at which to set the element.</param>
      <param name="value">The element to set at the specified index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract">
      <summary>Represents an array of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract.GetItem(System.Int32)">
      <summary>Returns the element at the specified index. </summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to return.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract.SetItem(System.Int32,System.AddIn.Contract.RemoteArgument)">
      <summary>Replaces the element at the specified index with the specified <see cref="T:System.AddIn.Contract.RemoteArgument" />.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="value">The new value for the element at the specified index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract">
      <summary>Represents an array of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects that dynamically resizes itself as required.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.Add(System.AddIn.Contract.RemoteArgument)">
      <summary>Adds a <see cref="T:System.AddIn.Contract.RemoteArgument" /> to the end of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</summary>
      <param name="newItem">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to be added to the end of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.Clear">
      <summary>Removes all elements from the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.Contains(System.AddIn.Contract.RemoteArgument)">
      <summary>Indicates whether a specified <see cref="T:System.AddIn.Contract.RemoteArgument" /> is in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to locate in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.IndexOf(System.AddIn.Contract.RemoteArgument)">
      <summary>Returns the zero-based index of the first occurrence of a specified <see cref="T:System.AddIn.Contract.RemoteArgument" /> in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />, if found; otherwise, -1.</returns>
      <param name="item">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to locate in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.Insert(System.Int32,System.AddIn.Contract.RemoteArgument)">
      <summary>Inserts a <see cref="T:System.AddIn.Contract.RemoteArgument" /> into the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" /> at the specified index.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="item" />.</param>
      <param name="item">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to insert.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.Remove(System.AddIn.Contract.RemoteArgument)">
      <summary>Removes the first occurrence of a specified <see cref="T:System.AddIn.Contract.RemoteArgument" /> from the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />. </summary>
      <param name="item">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract">
      <summary>Represents a collection of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract.GetCount">
      <summary>Returns the number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract">
      <summary>Represents a collection of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects that are stored as key/value pairs.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.Add(System.AddIn.Contract.RemoteArgument,System.AddIn.Contract.RemoteArgument)">
      <summary>Adds an element with a specified key and value to the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <param name="key">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.Clear">
      <summary>Removes all elements from the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.ContainsKey(System.AddIn.Contract.RemoteArgument)">
      <summary>Indicates whether the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> contains an element with the specified key.</summary>
      <returns>true if the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.GetEnumeratorContract">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract" /> that can be used to iterate through the elements in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract" /> that can be used to iterate through the elements in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.GetItem(System.AddIn.Contract.RemoteArgument)">
      <summary>Returns the value of the element with the specified key.</summary>
      <returns>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> with the specified key.</returns>
      <param name="key">The key of the value to return.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.GetKeys">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" /> that contains the keys of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> object. </summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" /> that contains the keys of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.GetValues">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" /> that contains the values of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> object. </summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" /> that contains the values of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> object. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.Remove(System.AddIn.Contract.RemoteArgument)">
      <summary>Removes the element with the specified key from the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if <paramref name="key" /> is not found in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</returns>
      <param name="key">The key of the element to remove. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.SetItem(System.AddIn.Contract.RemoteArgument,System.AddIn.Contract.RemoteArgument)">
      <summary>Replaces the value of an element.</summary>
      <param name="key">The key of the value to replace.</param>
      <param name="value">The new value of the specified element.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract">
      <summary>Enumerates the elements of an <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract.GetEntry">
      <summary>Returns the key and the value of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" /> that contains the key and the value of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract" /> is positioned before the first entry of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> or after the last entry. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract.GetKey">
      <summary>Returns the key of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that contains the key of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract" /> is positioned before the first entry of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> or after the last entry. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract.GetValue">
      <summary>Returns the value of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that contains the value of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract" /> is positioned before the first entry of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> or after the last entry. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentEnumerableContract">
      <summary>Exposes an enumerator that supports a simple iteration over a collection of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentEnumerableContract.GetEnumeratorContract">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentEnumeratorContract" /> that can be used to iterate through the collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentEnumeratorContract">
      <summary>Enumerates the elements of a collection of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentEnumeratorContract.GetCurrent">
      <summary>Returns the <see cref="T:System.AddIn.Contract.RemoteArgument" /> in the collection at the current position of the enumerator.</summary>
      <returns>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> in the collection at the current position of the enumerator.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentEnumeratorContract.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentEnumeratorContract.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry">
      <summary>Defines a key/value pair in an <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry.#ctor(System.AddIn.Contract.RemoteArgument,System.AddIn.Contract.RemoteArgument)">
      <summary>Initializes an instance of the <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" /> structure with the specified key and value.</summary>
      <param name="key">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> that contains the key in the new <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" />.</param>
      <param name="value">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> that contains the value in the new <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry.Key">
      <summary>Represents the key in the key/value pair that this <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" /> represents.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry.Value">
      <summary>Represents the value in the key/value pair that this <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" /> represents.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Pipeline.AddInContractAttribute">
      <summary>Identifies an object as a add-in contract segment of the pipeline.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.AddInContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.AddInContractAttribute" /> class. </summary>
    </member>
    <member name="T:System.AddIn.Pipeline.QualificationDataAttribute">
      <summary>Provides developer-specified data for a pipeline segment.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.QualificationDataAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.QualificationDataAttribute" /> class. </summary>
      <param name="name">Any identifier that serves as a key in a key/value pair.</param>
      <param name="value">Any value.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Pipeline.QualificationDataAttribute.Name">
      <summary>Gets the name, which serves as a key, of a key/value pair.</summary>
      <returns>The assigned name for the attribute.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Pipeline.QualificationDataAttribute.Value">
      <summary>Gets the value of a key/value pair.</summary>
      <returns>The assigned value for the attribute.</returns>
      <filterpriority>2</filterpriority>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.AddIn.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.AddIn</name>
  </assembly>
  <members>
    <member name="T:System.AddIn.AddInAttribute">
      <summary>Identifies an object as an add-in.</summary>
    </member>
    <member name="M:System.AddIn.AddInAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.AddInAttribute" /> class. </summary>
      <param name="name">The name of the add-in.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Description">
      <summary>Gets or sets the description of an add-in.</summary>
      <returns>The current description of the add-in.</returns>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Name">
      <summary>Gets the name of the add-In.</summary>
      <returns>The name of the add-in.</returns>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Publisher">
      <summary>Gets or sets the publisher of the add-in.</summary>
      <returns>The publisher of the add-in.</returns>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Version">
      <summary>Gets or sets the software version of the add-in.</summary>
      <returns>The software version of the add-in.</returns>
    </member>
    <member name="T:System.AddIn.Hosting.AddInController">
      <summary>Provides access to an add-in for a variety of tasks.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Hosting.AddInController.AddInEnvironment">
      <summary>Gets an <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> object.</summary>
      <returns>An object that can be used to activate other add-ins in the same environment as the original add-in.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Hosting.AddInController.AppDomain">
      <summary>Gets the application domain that contains an add-in. </summary>
      <returns>The application domain of the add-in.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInController.GetAddInController(System.Object)">
      <summary>Obtains the controller for an add-in.</summary>
      <returns>The controller for the add-in.</returns>
      <param name="addIn">The host view of the add-in.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInController.Shutdown">
      <summary>Disables an add-in.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Hosting.AddInController.Token">
      <summary>Gets the token that represents the add-in.</summary>
      <returns>An object that represents the add-in.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Hosting.AddInEnvironment">
      <summary>Provides access to the application domain and process of an add-in.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> class. </summary>
      <param name="appDomain">The application domain that contains the add-in.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="appDomain" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">Full-trust permission is demanded. A caller in the call chain does not have sufficient permission.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Hosting.AddInEnvironment.Process">
      <summary>Gets the <see cref="T:System.AddIn.Hosting.AddInProcess" /> object that represents the process in which the add-in is running.</summary>
      <returns>The process in which the add-in is running.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Hosting.AddInProcess">
      <summary>Provides an external process for running add-ins out-of-process from the host application.</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInProcess" /> class. </summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.#ctor(System.AddIn.Hosting.Platform)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInProcess" /> class, specifying the bits-per-word of the process in which the add-in runs.</summary>
      <param name="platform">A value that specifies the bits-per-word of the process that runs the add-in.</param>
      <exception cref="T:System.InvalidOperationException">The registry entry for the path to the executable (AddInProcess.exe or AddInProcess32.exe) is missing.-or-The executable is missing.</exception>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.IsCurrentProcess">
      <summary>Gets a value that indicates whether the current <see cref="T:System.AddIn.Hosting.AddInProcess" /> object represents the host application process.</summary>
      <returns>true if the <see cref="T:System.AddIn.Hosting.AddInProcess" /> object corresponds to the current process; otherwise, false. </returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.KeepAlive">
      <summary>Gets or sets a value that indicates whether to keep the external process alive.</summary>
      <returns>true if the external process should be kept alive; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.Platform">
      <summary>Gets the bits-per-word of the process in which the out-of-process add-in is run.</summary>
      <returns>The bits-per-word of the process that runs the add-in.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.ProcessId">
      <summary>Gets the process ID of the external process.</summary>
      <returns>The process ID, or -1 if the external process has not started.</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.Shutdown">
      <summary>Forcibly shuts down the external process.</summary>
      <returns>true if the external process was running and is successfully shut down; false if there is no active process associated with the <see cref="T:System.AddIn.Hosting.AddInProcess" />.</returns>
      <exception cref="T:System.InvalidOperationException">The add-in is running in-process with the host application. Starting and stopping the process is allowed only for external processes, not for the host process.</exception>
    </member>
    <member name="E:System.AddIn.Hosting.AddInProcess.ShuttingDown">
      <summary>Occurs when the process represented by the <see cref="T:System.AddIn.Hosting.AddInProcess" /> object is about to be shut down.</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.Start">
      <summary>Starts the external process.</summary>
      <returns>true if the process is successfully started; false if the process is already running.</returns>
      <exception cref="T:System.InvalidOperationException">The add-in is running in-process with the host application. Starting and stopping the process is allowed only for external processes, not for the host process.</exception>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.StartupTimeout">
      <summary>Gets or sets the number of seconds to allow for the process to start.</summary>
      <returns>The number of seconds to allow for process startup.</returns>
      <exception cref="T:System.InvalidOperationException">The process is already running.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is less than 0 (zero).</exception>
    </member>
    <member name="T:System.AddIn.Hosting.AddInSecurityLevel">
      <summary>Specifies the trust level that is granted to the application domain that an add-in is loaded into. </summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.Internet">
      <summary>Use the Internet security level for add-ins that have a low trust level.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.Intranet">
      <summary>Use the Intranet security level for add-ins that are located on a company's intranet. These add-ins can have a greater trust level because the servers and information are within a company's firewall. </summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.FullTrust">
      <summary>Use the full trust security level for add-ins that are allowed to read and write to the local file system, create network connections, and read from the registry. This security level grants full access to the add-in's code access security (CAS) by applying the <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> field. </summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.Host">
      <summary>Use the host security level to give the add-in the same permissions currently granted to the hosting code.</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">
      <summary>The exception that is thrown when a segment directory is missing from the pipeline directory structure.</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> class.</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> class with serialization data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination object data. </param>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> class with a specified message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.AddIn.Hosting.AddInSegmentType">
      <summary>Specifies the type of a pipeline segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn">
      <summary>Specifies the host view of the add-in segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.HostSideAdapter">
      <summary>Specifies a host-side adapter segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.Contract">
      <summary>Specifies a contract segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.AddInSideAdapter">
      <summary>Specifies an add-in-side adapter segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.AddInView">
      <summary>Specifies an add-in view segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.AddIn">
      <summary>Specifies an add-in segment.</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInStore">
      <summary>Provides methods to store and find information about available add-ins and pipeline segments.</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIn(System.Type,System.String,System.String,System.String)">
      <summary>Finds a specific add-in.</summary>
      <returns>A collection of tokens that contains only the token representing the add-in that was found.</returns>
      <param name="hostViewOfAddIn">The type that defines the host's view of the add-in. </param>
      <param name="pipelineRootFolderPath">The path to the root of the pipeline directory structure.</param>
      <param name="addInFilePath">The path and file name of the add-in to find.</param>
      <param name="addInTypeName">The name of the add-in as specified by the <see cref="T:System.AddIn.AddInAttribute" /> attribute.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="pipelineRootFolderPath" /> or <paramref name="addInFilePath" /> or <paramref name="addInTypeName" /> is 0.- or -The add-in file does not exist in <paramref name="addInfilePath" />.</exception>
      <exception cref="T:System.ArgumentNullException">One or more parameters are null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have read access permission to <paramref name="pipelineRootFolderPath" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIns(System.Type,System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>Finds all add-ins for a specified host view of the add-in at a location specified by the <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> enumeration value.</summary>
      <returns>A collection of tokens that represent the add-ins that were found.</returns>
      <param name="hostViewOfAddIn">The type that defines the host's view of the add-in.</param>
      <param name="location">The host application's base directory.</param>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is an invalid <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value. </exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIns(System.Type,System.AddIn.Hosting.PipelineStoreLocation,System.String[])">
      <summary>Finds all add-ins for a specified host view of the add-in at the location specified by a <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value and an optional add-ins folder. </summary>
      <returns>A collection of tokens that represent the add-ins that were found.</returns>
      <param name="hostViewOfAddIn">The type that defines the host's view of the add-in.</param>
      <param name="location">One of the enumeration values.Currently the only value in this enumeration is the directory specified by the <see cref="P:System.AppDomainSetup.ApplicationBase" />  property that was used to set up the host's application domain. </param>
      <param name="addInFolderPaths">(Optional). The path of the directory that contains one or more subdirectories of add-ins. Because this parameter takes an array of strings, you can specify more than one path.This parameter is not required if your add-ins are located in the pipeline directory structure under the AddIns folder.</param>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is an invalid <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value. </exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIns(System.Type,System.String,System.String[])">
      <summary>Finds all add-ins for a specified host view of the add-in from a specified root directory. </summary>
      <returns>A collection of tokens that represent the add-ins that were found.</returns>
      <param name="hostViewOfAddIn">The type that defines the host's view of the add-in.</param>
      <param name="pipelineRootFolderPath">The path of the root of the pipeline directory structure.</param>
      <param name="addInFolderPaths">(Optional). The path of the directory that contains one or more subdirectories of add-ins. Because this parameter takes an array of strings, you can specify more than one path.This parameter is not required if your add-ins are located in the pipeline directory structure under the AddIns folder.</param>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Rebuild(System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>Rebuilds the pipeline segments cache and includes new segments at the location specified by a <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value.</summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="location">One of the enumeration values.Currently the only value in this enumeration is the directory specified by the <see cref="P:System.AppDomainSetup.ApplicationBase" />  property that was used to set up the host's application domain. </param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is an invalid <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value.</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Rebuild(System.String)">
      <summary>Rebuilds the pipeline segments cache and includes new segments from a specified root directory.</summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="pipelineRootFolderPath">The path of the root of the pipeline directory structure.</param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.RebuildAddIns(System.String)">
      <summary>Rebuilds the add-in cache and includes new add-ins from a specified root directory.</summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="addInsFolderPath">The path of the directory that contains one or more subdirectories of add-ins.</param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addInsFolderPath" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">Caller does not have both read and write access permissions to the location that is specified by <paramref name="addInsFolderPath" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Update(System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>Updates the pipeline segments cache with new segments at the location specified by a <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value.</summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="location">One of the enumeration values.Currently the only value in this enumeration is the directory as specified by the <see cref="P:System.AppDomainSetup.ApplicationBase" />  property that was used to set up the host's application domain. </param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is an invalid <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value.</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Update(System.String)">
      <summary>Updates the pipeline segments cache with new segments from a specified root directory.</summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="pipelineRootFolderPath">The path of the root of the pipeline directory structure.</param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.UpdateAddIns(System.String)">
      <summary>Updates the add-in cache and includes new add-ins at a specified location. </summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="addInsFolderPath">The path of the directory that contains one or more subdirectories of add-ins.</param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addInsFolderPath" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">Caller does not have both read and write access permissions to the location that is specified by <paramref name="addInsFolderPath" />. </exception>
    </member>
    <member name="T:System.AddIn.Hosting.AddInToken">
      <summary>Represents an add-in that can be activated. </summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInEnvironment)">
      <summary>Activates an add-in in the environment of another add-in.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="environment">The application domain and process that contains the original add-in. </param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.AddIn.Hosting.AddInSecurityLevel)">
      <summary>Activates an add-in in an external process, in a new application domain, and with a specified trust level.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="process">The external process in which to activate the add-in.</param>
      <param name="level">One of the enumeration values that specifies the trust level.</param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.Security.PermissionSet)">
      <summary>Activates an add-in in an external process, in a new application domain, and with a specified permission set.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="process">The external process in which to activate the add-in.</param>
      <param name="permissionSet">The required permission set granted for the add-in.</param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel)">
      <summary>Activates an add-in with a specified trust level in a new application domain.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="trustLevel">One of the enumeration values that specifies the trust level.</param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel,System.String)">
      <summary>Activates an add-in in a new application domain with a specified name and trust level.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="trustLevel">One of the enumeration values that specifies the trust level.</param>
      <param name="appDomainName">The friendly name to assign to the new application domain.</param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AppDomain)">
      <summary>Activates an add-in in an existing application domain.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="target">The application domain that the add-in should be activated in. </param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
      <exception cref="T:System.Security.SecurityException">Full-trust permission is demanded. A caller in the call chain does not have sufficient permission. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.Security.PermissionSet)">
      <summary>Activates an add-in with a specified permission set in a new application domain.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="permissions">The permissions granted for the add-in.</param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permissions" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.AddInFullName">
      <summary>Gets the namespace and type of the add-in.</summary>
      <returns>The type of the add-in, fully qualified by its namespace.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.AssemblyName">
      <summary>Gets the name of the assembly that contains the add-in.</summary>
      <returns>The name of the assembly.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Description">
      <summary>Gets the description of the add-in.</summary>
      <returns>A description of the add-in, or null if the description is not specified in the <see cref="T:System.AddIn.AddInAttribute" /> attribute.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.EnableDirectConnect">
      <summary>Gets and sets a value that indicates whether add-ins should be directly connected to their hosts when conditions permit.</summary>
      <returns>true if the add-in should be directly connected to the host; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Equals(System.Object)">
      <summary>Determines whether a specified object is equal to the current instance.</summary>
      <returns>true if the specified object and the current instance are equal; otherwise, false. </returns>
      <param name="obj">The object to compare with the current instance.</param>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.GetEnumerator">
      <summary>Returns an enumerator for the qualification data of the pipeline segments that are associated with this token.</summary>
      <returns>An enumerator that can be used to iterate through the qualification data of the pipeline segments that are associated with the current token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.GetHashCode">
      <summary>Serves as a hash function for a token.</summary>
      <returns>A hash code for the current token.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Name">
      <summary>Gets the name of the add-in.</summary>
      <returns>The name of the add-in.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Publisher">
      <summary>Gets the publisher of the add-in.</summary>
      <returns>The publisher of the add-in, or null if the publisher is not specified in the <see cref="T:System.AddIn.AddInAttribute" /> attribute.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.QualificationData">
      <summary>Gets a dictionary of data about the segments in the pipeline associated with the current token.</summary>
      <returns>A dictionary whose keys are pipeline segments and whose values are dictionaries of name/value pairs that represent qualification data for each segment.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator for the qualification data of the pipeline segments that are associated with this token. </summary>
      <returns>An enumerator that can be used to iterate through the qualification data of the pipeline segments that are associated with the current token.</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.ToString">
      <summary>Returns a string that represents the token.</summary>
      <returns>A string that represents the token.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Version">
      <summary>Gets the version of the add-in, as specified in the <see cref="T:System.AddIn.AddInAttribute" /> attribute.</summary>
      <returns>The version of the add-in, or null if the version number is not specified in the <see cref="T:System.AddIn.AddInAttribute" /> attribute.</returns>
    </member>
    <member name="T:System.AddIn.Hosting.InvalidPipelineStoreException">
      <summary>The exception that is thrown when a directory is not found and the user does not have permission to access the pipeline root path or an add-in path.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> class with serialization and streaming context information.</summary>
      <param name="info">The serialized object data.</param>
      <param name="context">The contextual information about the source or destination object data.</param>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> class with the specified message.</summary>
      <param name="message">A description of the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> class with the specified message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A description of the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Hosting.PipelineStoreLocation">
      <summary>Specifies alternative locations for a pipeline store instead of a path to a directory.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.PipelineStoreLocation.ApplicationBase">
      <summary>The location specified by the <see cref="P:System.AppDomainSetup.ApplicationBase" /> property for setting up the application domain's host.</summary>
    </member>
    <member name="T:System.AddIn.Hosting.Platform">
      <summary>Specifies the bits-per-word of the process in which an out-of-process add-in is run.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.Host">
      <summary>The add-in is loaded into an external process with the same bits-per-word as the host process.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.AnyCpu">
      <summary>The add-in is loaded into an external process with the same bits-per-word as the operating system.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.X86">
      <summary>The add-in is loaded into a 32-bit external process.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.X64">
      <summary>The add-in is loaded into a 64-bit external process.</summary>
    </member>
    <member name="T:System.AddIn.Hosting.QualificationDataItem">
      <summary>Represents information supplied by the developer of a pipeline segment, for use by the host. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.Equals(System.Object)">
      <summary>Determines whether a specified object is equal to the current qualification data item.</summary>
      <returns>true if <paramref name="obj" /> is equal to the current instance; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.GetHashCode">
      <summary>Gets the hash code for this qualification data item.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.QualificationDataItem.Name">
      <summary>Gets the name of the qualification data item.</summary>
      <returns>The name of the qualification data item.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.op_Equality(System.AddIn.Hosting.QualificationDataItem,System.AddIn.Hosting.QualificationDataItem)">
      <summary>Determines whether two <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> structures are equal.</summary>
      <returns>true if <paramref name="item1" /> and <paramref name="item2" /> are equal; otherwise, false.</returns>
      <param name="item1">The first <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> to compare.</param>
      <param name="item2">The second <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> to compare.</param>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.op_Inequality(System.AddIn.Hosting.QualificationDataItem,System.AddIn.Hosting.QualificationDataItem)">
      <summary>Determines whether two <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> structures are different.</summary>
      <returns>true if <paramref name="item1" /> and <paramref name="item2" /> are not equal; otherwise, false.</returns>
      <param name="item1">The first <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> to compare.</param>
      <param name="item2">The second <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> to compare.</param>
    </member>
    <member name="P:System.AddIn.Hosting.QualificationDataItem.Segment">
      <summary>Gets a value that identifies the pipeline segment the qualification data item was applied to.</summary>
      <returns>The kind of pipeline segment the data item was applied to. </returns>
    </member>
    <member name="P:System.AddIn.Hosting.QualificationDataItem.Value">
      <summary>Gets the value of the qualification data item.</summary>
      <returns>The value of the item.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Pipeline.AddInAdapterAttribute">
      <summary>Identifies an object as an add-in-side adapter segment of the pipeline.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.AddInAdapterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.AddInAdapterAttribute" /> class. </summary>
    </member>
    <member name="T:System.AddIn.Pipeline.AddInBaseAttribute">
      <summary>Identifies an object as an add-in view segment of the pipeline.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.AddInBaseAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.AddInBaseAttribute" /> class. </summary>
    </member>
    <member name="P:System.AddIn.Pipeline.AddInBaseAttribute.ActivatableAs">
      <summary>Gets or sets one or more add-in base types that a single add-in-side adapter can use to construct the pipeline.</summary>
      <returns>An array of add-in base types.</returns>
    </member>
    <member name="T:System.AddIn.Pipeline.CollectionAdapters">
      <summary>Enables collections to be passed between an add-in and its host application. </summary>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
      <summary>Converts the specified <see cref="T:System.AddIn.Contract.IListContract`1" /> collection to an <see cref="T:System.Collections.Generic.IList`1" /> collection.</summary>
      <returns>The converted collection.</returns>
      <param name="collection">The collection from the other side of the pipeline.</param>
      <typeparam name="T">The type of objects that are contained in the list. <paramref name="T" /> must be serializable.</typeparam>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
      <summary>Converts a specified <see cref="T:System.AddIn.Contract.IListContract`1" /> collection to an <see cref="T:System.Collections.Generic.IList`1" /> collection by using converter adapters.</summary>
      <returns>The converted collection.</returns>
      <param name="collection">The collection to pass to the other side of the pipeline.</param>
      <param name="contractViewAdapter">A converter that adapts the data from the type defined in the contract to the type expected in the view.</param>
      <param name="viewContractAdapter">A converter that adapts the data from the type defined in the view to the type expected by the contract. </param>
      <typeparam name="TContract">The type that defines the contract for passing objects of type <paramref name="TView" /> across the isolation boundary.</typeparam>
      <typeparam name="TView">The type that defines the view of the objects in the list.</typeparam>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
      <summary>Converts a specified <see cref="T:System.Collections.Generic.IList`1" /> collection to an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <returns>The converted collection.</returns>
      <param name="collection">The collection to convert.</param>
      <typeparam name="T">The type of objects that are contained in the list. <paramref name="T" /> must be serializable.</typeparam>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
      <summary>Converts a specified <see cref="T:System.Collections.Generic.IList`1" /> collection to an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection by using converter adapters.</summary>
      <returns>The converted collection.</returns>
      <param name="collection">The collection to convert.</param>
      <param name="viewContractAdapter">A converter that adapts the data from the type defined in the view to the type expected by the contract.  </param>
      <param name="contractViewAdapter">A converter that adapts the data from the type defined in the contract to the type expected in the view.</param>
      <typeparam name="TView">The type that defines the view of the objects in the list.</typeparam>
      <typeparam name="TContract">The type that defines the contract for passing objects of type <paramref name="TView" /> across the isolation boundary.</typeparam>
    </member>
    <member name="T:System.AddIn.Pipeline.ContractAdapter">
      <summary>Provides methods for sharing and readapting add-ins.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter``1(System.AddIn.Pipeline.ContractHandle,System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>Obtains a host view of an add-in if a suitable host-side adapter is found at a location specified by a value from the <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> enumeration.</summary>
      <returns>The host view of the add-in that is shared.</returns>
      <param name="contract">A handle to the contract used by the add-in to be shared.</param>
      <param name="location">The host's application base.</param>
      <typeparam name="TView">The type that defines the host view of the add-in.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is invalid.</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter``1(System.AddIn.Pipeline.ContractHandle,System.String)">
      <summary>Obtains a host view of an add-in if a suitable host-side adapter is found at a location specified by a path.</summary>
      <returns>The host view of the add-in that is shared.</returns>
      <param name="contract">A handle to the contract used by the add-in to be shared.</param>
      <param name="pipelineRoot">A path to the add-in store.</param>
      <typeparam name="TView">The type that defines the host view of the add-in.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractAdapter.ViewToContractAdapter(System.Object)">
      <summary>Gets the handle to the contract for a provided host view of an add-in.</summary>
      <returns>A handle to the contract.</returns>
      <param name="view">The host view of an add-in activated by the system from the current application domain.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="view" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Pipeline.ContractBase">
      <summary>Provides a default implementation of <see cref="T:System.AddIn.Contract.IContract" /> members.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.ContractBase" /> class. </summary>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken">
      <summary>Obtains a lifetime token.</summary>
      <returns>A random number that identifies a token.</returns>
      <exception cref="T:System.InvalidOperationException">All previously acquired tokens have been revoked.  No further tokens are available.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.GetRemoteHashCode">
      <summary>Gets the hash code for the current <see cref="T:System.AddIn.Pipeline.ContractBase" /> object.</summary>
      <returns>A hash code for the current <see cref="T:System.AddIn.Pipeline.ContractBase" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.OnFinalRevoke">
      <summary>When overridden in an add-in-side adapter, releases native resources held by the adapter.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.QueryContract(System.String)">
      <summary>Reflects over the instance of a contract and returns the this pointer if the current object implements that contract.</summary>
      <returns>The this pointer to an <see cref="T:System.AddIn.Contract.IContract" /> interface, or null if the contract is not implemented.</returns>
      <param name="contractIdentifier">The full name of the contract, including its assembly name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractIdentifier" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.RemoteEquals(System.AddIn.Contract.IContract)">
      <summary>Compares an object with a remote object for equality.</summary>
      <returns>true if the object is equal to the remote object; otherwise, false. </returns>
      <param name="contract">The object to test for equality with the remote object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.RemoteToString">
      <summary>Gets a string that identifies a remote object. </summary>
      <returns>A string that identifies the remote object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.Renewal(System.Runtime.Remoting.Lifetime.ILease)">
      <summary>Requests a sponsoring client to renew the lease for the specified object. </summary>
      <returns>The renewed lease.</returns>
      <param name="lease">The lifetime lease object that is used by the remoting lifetime service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lease" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken(System.Int32)">
      <summary>Removes the specified token from the list of outstanding lifetime tokens.</summary>
      <param name="token">The token number.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="token" /> is not found in the list of outstanding lifetime tokens.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Pipeline.ContractHandle">
      <summary>Provides methods that control the lifetime of an add-in.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.ContractHandle" /> class. </summary>
      <param name="contract">The contract to use in the pipeline.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contract" /> is null.</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)">
      <summary>Gets the instance of the add-in-side adapter when the application domain was created.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.IContract" /> object that represents the owner of the application domain.</returns>
      <param name="domain">The application domain to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domain" /> is null.</exception>
    </member>
    <member name="P:System.AddIn.Pipeline.ContractHandle.Contract">
      <summary>Gets the contract used by a pipeline.</summary>
      <returns>The contract, which is derived from <see cref="T:System.AddIn.Contract.IContract" />. </returns>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)">
      <summary>Determines whether an application domain is owned by the specified contract.</summary>
      <returns>true if the contract owns the application domain; otherwise, false. </returns>
      <param name="contract">The contract to check.</param>
      <param name="domain">The application domain to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contract" /> or <paramref name="domain" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.Dispose">
      <summary>Revokes the lifetime token on a contract, regardless of input.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)">
      <summary>Revokes the lifetime token on the contract regardless of input and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.Finalize"></member>
    <member name="T:System.AddIn.Pipeline.HostAdapterAttribute">
      <summary>Identifies an object as a host-side adapter segment of the pipeline.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.HostAdapterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.HostAdapterAttribute" /> class. </summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Activities.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Activities</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasic">
      <summary>Provides an attached property store for <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasic.GetSettings(System.Object)">
      <summary>Retrieves the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance attached to the specified object.</summary>
      <returns>The <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance attached to the specified object.</returns>
      <param name="target">The object to inspect.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasic.SetSettings(System.Object,Microsoft.VisualBasic.Activities.VisualBasicSettings)">
      <summary>Attaches a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to the specified object.</summary>
      <param name="target">The object to which the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance is attached.</param>
      <param name="value">The <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to attach.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper">
      <summary>Creates and compiles <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> and <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expressions.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.CreatePrecompiledVisualBasicReference(System.Type,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Activities.LocationReferenceEnvironment,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>Creates and returns a precompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> expression.</summary>
      <returns>The precompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> expression.</returns>
      <param name="targetType">The expected expression type.</param>
      <param name="expressionText">The expression in Visual Basic syntax.</param>
      <param name="namespaces">The imported namespaces.</param>
      <param name="referencedAssemblies">The referenced assemblies.</param>
      <param name="environment">The mechanism for resolving names to their associated <see cref="T:System.Activities.Argument" /> and <see cref="T:System.Activities.Variable" /> objects.</param>
      <param name="returnType">When this method returns, contains the result type of the expression. This parameter is passed uninitialized.</param>
      <param name="compileError">When this method returns, contains any compilation errors that occurred, or null if compilation was successful. This parameter is passed uninitialized.</param>
      <param name="vbSettings">When this method returns, contains the settings required to compile the expression. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.CreatePrecompiledVisualBasicValue(System.Type,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Activities.LocationReferenceEnvironment,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>Creates and returns a precompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expression.</summary>
      <returns>The precompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expression.</returns>
      <param name="targetType">The expected expression type.</param>
      <param name="expressionText">The expression in Visual Basic syntax.</param>
      <param name="namespaces">The imported namespaces.</param>
      <param name="referencedAssemblies">The referenced assemblies.</param>
      <param name="environment">The mechanism for resolving names to their associated <see cref="T:System.Activities.Argument" /> and <see cref="T:System.Activities.Variable" /> objects.</param>
      <param name="returnType">When this method returns, contains the result type of the expression. This parameter is passed uninitialized.</param>
      <param name="compileError">When this method returns, contains any compilation errors that occurred, or null if compilation was successful. This parameter is passed uninitialized. This parameter is passed uninitialized.</param>
      <param name="vbSettings">When this method returns, contains the settings required to compile the expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.RecompileVisualBasicReference(System.Activities.ActivityWithResult,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>Recompiles a previously compiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> expression.</summary>
      <returns>The recompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> expression.</returns>
      <param name="visualBasicReference">The expression to recompile.</param>
      <param name="returnType">When this method returns, contains the result type of the expression. This parameter is passed uninitialized.</param>
      <param name="compileError">When this method returns, contains any compilation errors that occurred, or null if compilation was successful. This parameter is passed uninitialized.</param>
      <param name="vbSettings">When this method returns, contains the settings required to compile the expression. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.RecompileVisualBasicValue(System.Activities.ActivityWithResult,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>Recompiles a previously compiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expression.</summary>
      <returns>The recompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expression.</returns>
      <param name="visualBasicValue">The expression to recompile.</param>
      <param name="returnType">When this method returns, contains the result type of the expression. This parameter is passed uninitialized.</param>
      <param name="compileError">When this method returns, contains any compilation errors that occurred, or null if compilation was successful. This parameter is passed uninitialized. This parameter is passed uninitialized.</param>
      <param name="vbSettings">When this method returns, contains the settings required to compile the expression.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference">
      <summary>Represents an assembly reference and the namespace imported from that assembly.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicImportReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicImportReference.Assembly">
      <summary>Gets or sets the full name of the assembly referenced by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</summary>
      <returns>The full name of the assembly referenced by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicImportReference.Equals(Microsoft.VisualBasic.Activities.VisualBasicImportReference)">
      <summary>Determines whether the specified <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> is equal to the current <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</summary>
      <returns>true if the specified <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> is equal to the current <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> to compare with the current <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicImportReference.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> instance.</summary>
      <returns>The hash code for the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> instance.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicImportReference.Import">
      <summary>Gets or sets the imported namespace referenced by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</summary>
      <returns>The imported namespace referenced by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1">
      <summary>Contains an expression in Visual Basic syntax that evaluates to an l-value, which supports binding of the <see cref="F:System.Activities.ArgumentDirection.Out" /> arguments.</summary>
      <typeparam name="TResult">The type of the expression.</typeparam>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> class using the specific expression.</summary>
      <param name="expressionText">The expression string in Visual Basic syntax.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> can be converted into a string; otherwise false.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicReference`1.ExpressionText">
      <summary>Gets or set the Visual Basic expression represented by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />.</summary>
      <returns>The Visual Basic expression.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicSettings">
      <summary>Contains settings that <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> and <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> instances use to compile the source text of the expressions they contain.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicSettings.Default">
      <summary>Gets a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> that contains the default set of assembly references and imported namespaces. This set is available to all <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> and <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> instances in a given <see cref="T:System.AppDomain" />.</summary>
      <returns>A <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> that contains the default set of assembly references and imported namespaces.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicSettings.ImportReferences">
      <summary>Gets a collection of <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> objects, each of which represents an assembly reference and a namespace imported from that assembly.</summary>
      <returns>A collection of <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> objects, each of which represents an assembly reference and a namespace imported from that assembly.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1">
      <summary>Contains an expression in Visual Basic syntax that evaluates to an r-value, which supports binding of <see cref="F:System.Activities.ArgumentDirection.In" /> arguments.</summary>
      <typeparam name="TResult">The type of the expression.</typeparam>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> class using the specified expression.</summary>
      <param name="expressionText">The expression string in Visual Basic syntax.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> can be converted into a string; otherwise false.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" />.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicValue`1.ExpressionText">
      <summary>Gets or set the Visual Basic expression represented by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" />.</summary>
      <returns>The Visual Basic expression.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter">
      <summary>Converts a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to the specified type.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance.</summary>
      <returns>true if the specified type can be converted from; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance can be converted into an instance of the specified type.</summary>
      <returns>true if a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance can be converted to an instance of the specified type; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance.</summary>
      <returns>An object that represents the converted value.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to the specified type.</summary>
      <returns>The converted value.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="value">The <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to convert.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer">
      <summary>Serializes <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instances to XAML.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if the specified <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance can be converted into a <see cref="T:System.String" />; otherwise, false. </returns>
      <param name="value">The value to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the specified <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance into a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance.</returns>
      <param name="value">The value to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.Activity">
      <summary>An abstract base class used to create composite activities from pre-existing <see cref="T:System.Activities.Activity" /> objects.</summary>
    </member>
    <member name="M:System.Activities.Activity.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="P:System.Activities.Activity.CacheId">
      <summary>Gets the identifier of the cache that is unique within the scope of the workflow definition.</summary>
      <returns>The identifier of the cache that is unique within the scope of the workflow definition.</returns>
    </member>
    <member name="M:System.Activities.Activity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="P:System.Activities.Activity.Constraints">
      <summary>Gets a collection of <see cref="T:System.Activities.Validation.Constraint" /> activities that can be configured to provide validation for the <see cref="T:System.Activities.Activity" />.</summary>
      <returns>The collection of constraints.</returns>
    </member>
    <member name="P:System.Activities.Activity.DisplayName">
      <summary>Gets or sets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>A friendly name that is used for debugging, validation, exception handling, and tracking.</returns>
    </member>
    <member name="P:System.Activities.Activity.Id">
      <summary>Gets an identifier that is unique in the scope of the workflow definition.</summary>
      <returns>An identifier that is unique in the scope of the workflow definition.</returns>
    </member>
    <member name="P:System.Activities.Activity.Implementation">
      <summary>Gets or sets the delegate that returns an <see cref="T:System.Activities.Activity" /> that contains the execution logic.</summary>
      <returns>The delegate that contains the execution logic.</returns>
    </member>
    <member name="M:System.Activities.Activity.ShouldSerializeDisplayName">
      <summary>Indicates whether the <see cref="P:System.Activities.Activity.DisplayName" /> property should be serialized.</summary>
      <returns>true if the <see cref="P:System.Activities.Activity.DisplayName" /> property value should be serialized; otherwise false.</returns>
    </member>
    <member name="M:System.Activities.Activity.ToString">
      <summary>Returns a <see cref="T:System.String" /> that contains the <see cref="P:System.Activities.Activity.Id" /> and <see cref="P:System.Activities.Activity.DisplayName" /> of the <see cref="T:System.Activities.Activity" />.</summary>
      <returns>The ID and the display name of the activity.</returns>
    </member>
    <member name="T:System.Activities.Activity`1">
      <summary>An abstract base class used to create composite activities from pre-existing <see cref="T:System.Activities.Activity" /> objects, which specifies a result type using the activity’s type specifier.</summary>
      <typeparam name="TResult">The type of the return value of the activity.</typeparam>
    </member>
    <member name="M:System.Activities.Activity`1.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.Activity`1.FromValue(`0)">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given value.</summary>
      <returns>A workflow expression that evaluates to the given value.</returns>
      <param name="constValue">The value used to create the <see cref="T:System.Activities.Activity`1" /> expression.</param>
    </member>
    <member name="M:System.Activities.Activity`1.FromVariable(System.Activities.Variable)">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given <see cref="T:System.Activities.Variable" />.</summary>
      <returns>A workflow expression that evaluates to the given variable.</returns>
      <param name="variable">The value for the expression.</param>
    </member>
    <member name="M:System.Activities.Activity`1.FromVariable(System.Activities.Variable{`0})">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given <see cref="T:System.Activities.Variable`1" />.</summary>
      <returns>A workflow expression that evaluates to the given variable.</returns>
      <param name="variable">The value for the expression.</param>
    </member>
    <member name="M:System.Activities.Activity`1.op_Implicit(System.Activities.Variable)~System.Activities.Activity{`0}">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given <see cref="T:System.Activities.Variable" />.</summary>
      <returns>A workflow expression that evaluates to the given variable.</returns>
      <param name="variable">The value for the expression.</param>
    </member>
    <member name="M:System.Activities.Activity`1.op_Implicit(System.Activities.Variable{`0})~System.Activities.Activity{`0}">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given <see cref="T:System.Activities.Variable`1" />.</summary>
      <returns>A workflow expression that evaluates to the given variable.</returns>
      <param name="variable">The value for the expression.</param>
    </member>
    <member name="M:System.Activities.Activity`1.op_Implicit(`0)~System.Activities.Activity{`0}">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given value.</summary>
      <returns>A workflow expression that evaluates to the given value.</returns>
      <param name="constValue">The value used to create the expression.</param>
    </member>
    <member name="P:System.Activities.Activity`1.Result">
      <summary>Gets or sets the result argument for the <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The result argument for the <see cref="T:System.Activities.Activity`1" />.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction">
      <summary>Defines an activity delegate that has no in arguments and does not return a value.</summary>
    </member>
    <member name="M:System.Activities.ActivityAction.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction" /> class.</summary>
    </member>
    <member name="T:System.Activities.ActivityAction`1">
      <summary>Defines an activity delegate that has one in argument and does not return a value.</summary>
      <typeparam name="T">The type of the in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`1.Argument">
      <summary>Gets or sets the in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`10">
      <summary>Defines an activity delegate that has ten in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`10.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`10" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`11">
      <summary>Defines an activity delegate that has eleven in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`11.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`11" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`12">
      <summary>Defines an activity delegate that has twelve in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`12.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`12" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`13">
      <summary>Defines an activity delegate that has thirteen in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`13.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`13" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`14">
      <summary>Defines an activity delegate that has fourteen in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T14">The type of the fourteenth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`14.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`14" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`15">
      <summary>Defines an activity delegate that has fifteen in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T14">The The type of the fourteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T15">The type of the fifteenth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`15.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`15" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument15">
      <summary>Gets or sets the fifteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`16">
      <summary>Defines an activity delegate that has sixteen in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first delegate parameter.</typeparam>
      <typeparam name="T2">The type of the second delegate parameter.</typeparam>
      <typeparam name="T3">The type of the third delegate parameter.</typeparam>
      <typeparam name="T4">The type of the fourth delegate parameter.</typeparam>
      <typeparam name="T5">The type of the fifth delegate parameter.</typeparam>
      <typeparam name="T6">The type of the sixth delegate parameter.</typeparam>
      <typeparam name="T7">The type of the seventh delegate parameter.</typeparam>
      <typeparam name="T8">The type of the eighth delegate parameter.</typeparam>
      <typeparam name="T9">The type of the ninth delegate parameter.</typeparam>
      <typeparam name="T10">The type of the tenth delegate parameter.</typeparam>
      <typeparam name="T11">The type of the eleventh delegate parameter.</typeparam>
      <typeparam name="T12">The type of the twelfth delegate parameter.</typeparam>
      <typeparam name="T13">The type of the thirteenth delegate parameter.</typeparam>
      <typeparam name="T14">The type of the fourteenth delegate parameter.</typeparam>
      <typeparam name="T15">The type of the fifteenth delegate parameter.</typeparam>
      <typeparam name="T16">The type of the sixteenth delegate parameter.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`16.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`16" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument15">
      <summary>Gets or sets the fifteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument16">
      <summary>Gets or sets the sixteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`2">
      <summary>Defines an activity delegate that has two in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`2.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`2.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`2.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`3">
      <summary>Defines an activity delegate that has three in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`3.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`3.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`3.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`3.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`4">
      <summary>Defines an activity delegate that has four in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`4.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`4" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`5">
      <summary>Defines an activity delegate that has five in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`5.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`5" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`6">
      <summary>Defines an activity delegate that has six in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`6.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`6" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`7">
      <summary>Defines an activity delegate that has seven in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`7.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`7" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`8">
      <summary>Defines an activity delegate that has eight in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`8.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`8" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`9">
      <summary>Defines an activity delegate that has nine in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`9.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`9" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityBuilder">
      <summary>Provides property data for a workflow activity.</summary>
    </member>
    <member name="M:System.Activities.ActivityBuilder.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityBuilder" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Attributes">
      <summary>Gets the collection of attributes to use in the construction of an activity tree.</summary>
      <returns>A collection of a specified type.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Constraints">
      <summary>Gets the collection of constraints that govern the construction of an activity tree.</summary>
      <returns>A collection of a specified type.</returns>
    </member>
    <member name="M:System.Activities.ActivityBuilder.GetPropertyReference(System.Object)">
      <summary>Returns a <see cref="T:System.Activities.ActivityPropertyReference" /> for a property retrieved from the specified object.</summary>
      <returns>A reference to a property.</returns>
      <param name="target">An object that contains a property.</param>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Implementation">
      <summary>Gets or sets the activity tree that is represented by the current instance of <see cref="T:System.Activities.ActivityBuilder" />.</summary>
      <returns>An activity.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Name">
      <summary>Gets or sets the name of the activity tree that is represented by the current instance of <see cref="T:System.Activities.ActivityBuilder" />.</summary>
      <returns>The name of the activity tree.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Properties">
      <summary>Gets a collection of property values for the current <see cref="T:System.Activities.ActivityBuilder" /> instance.</summary>
      <returns>A collection of property values.</returns>
    </member>
    <member name="M:System.Activities.ActivityBuilder.SetPropertyReference(System.Object,System.Activities.ActivityPropertyReference)">
      <summary>Sets a value for the specified attachable property in the specified store.</summary>
      <param name="target">A property store.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:System.Activities.ActivityBuilder.System#Activities#Debugger#IDebuggableWorkflowTree#GetWorkflowRoot">
      <summary>When implemented in the base class, returns the root of a workflow activity tree.</summary>
      <returns>An activity.</returns>
    </member>
    <member name="T:System.Activities.ActivityBuilder`1">
      <summary>Provides property data for a generic workflow activity.</summary>
      <typeparam name="TResult">The type of the activity being implemented.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityBuilder`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityBuilder`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Attributes">
      <summary>Gets the generic collection of attributes to use in the construction of an activity tree.</summary>
      <returns>A generic collection.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Constraints">
      <summary>Gets the generic collection of constraints that govern the construction of an activity tree.</summary>
      <returns>A generic collection.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Implementation">
      <summary>Gets or sets the generic activity tree that is represented by the current instance of <see cref="T:System.Activities.ActivityBuilder`1" />.</summary>
      <returns>An activity object.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Name">
      <summary>Gets or sets the name of the generic activity tree that is represented by the current instance of <see cref="T:System.Activities.ActivityBuilder`1" />.</summary>
      <returns>The name of the activity tree.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Properties">
      <summary>Gets a <see cref="T:System.Collections.ObjectModel.KeyedCollection" /> of the properties of the current instance of <see cref="T:System.Activities.ActivityBuilder`1" />.</summary>
      <returns>A key and value pair collection of activity workflow element properties.</returns>
    </member>
    <member name="M:System.Activities.ActivityBuilder`1.System#Activities#Debugger#IDebuggableWorkflowTree#GetWorkflowRoot">
      <summary>Returns the root of the current workflow tree.</summary>
      <returns>An activity.</returns>
    </member>
    <member name="T:System.Activities.ActivityContext">
      <summary>The base class for context classes that represent the execution environment of an activity.</summary>
    </member>
    <member name="P:System.Activities.ActivityContext.ActivityInstanceId">
      <summary>Gets the unique identifier of the currently executing activity instance.</summary>
      <returns>The unique identifier of the currently executing activity instance.</returns>
    </member>
    <member name="P:System.Activities.ActivityContext.DataContext">
      <summary>Gets the data context of the currently executing activity.</summary>
      <returns>The workflow data context of the currently executing activity.</returns>
    </member>
    <member name="M:System.Activities.ActivityContext.GetExtension``1">
      <summary>Returns an extension of the specified type.</summary>
      <returns>The extension of the specified type if present; otherwise, null.</returns>
      <typeparam name="T">The type of extension to retrieve.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetLocation``1(System.Activities.LocationReference)">
      <summary>Returns the typed location for the specified referenced location for the current activity context.</summary>
      <returns>The typed location.</returns>
      <param name="locationReference">The referenced location.</param>
      <typeparam name="T">The type of the location to return.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue(System.Activities.Argument)">
      <summary>Gets the value of the specified <see cref="T:System.Activities.Argument" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="argument">The argument to inspect.</param>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.InArgument{``0})">
      <summary>Gets the value of the specified <see cref="T:System.Activities.InArgument`1" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="argument">The argument to inspect.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.InOutArgument{``0})">
      <summary>Gets the value of the specified <see cref="T:System.Activities.InOutArgument`1" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="argument">The argument to inspect.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.LocationReference)">
      <summary>Gets the value at the specified <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>The value of the referenced location.</returns>
      <param name="locationReference">The referenced location to inspect.</param>
      <typeparam name="T">The type of the value.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.OutArgument{``0})">
      <summary>Gets the value of the specified <see cref="T:System.Activities.OutArgument`1" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="argument">The argument to inspect.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue(System.Activities.RuntimeArgument)">
      <summary>Gets the value of the specified <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="runtimeArgument">The argument to inspect.</param>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue(System.Activities.Argument,System.Object)">
      <summary>Assigns a value to the specified <see cref="T:System.Activities.Argument" />.</summary>
      <param name="argument">The argument to receive the new value.</param>
      <param name="value">The new value of the argument.</param>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.InArgument{``0},``0)">
      <summary>Assigns a value to the specified <see cref="T:System.Activities.InArgument`1" />.</summary>
      <param name="argument">The argument to receive the new value.</param>
      <param name="value">The new value of the argument.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.InOutArgument{``0},``0)">
      <summary>Assigns a value to the specified <see cref="T:System.Activities.InOutArgument`1" />.</summary>
      <param name="argument">The argument to receive the new value.</param>
      <param name="value">The new value of the argument.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.LocationReference,``0)">
      <summary>Assigns a value to the specified <see cref="T:System.Activities.LocationReference" />.</summary>
      <param name="locationReference">The referenced location to receive the new value.</param>
      <param name="value">The new value of the referenced location.</param>
      <typeparam name="T">The type of the location.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.OutArgument{``0},``0)">
      <summary>Assigns a value to the specified <see cref="T:System.Activities.OutArgument`1" />.</summary>
      <param name="argument">The argument to receive the new value.</param>
      <param name="value">The new value of the argument.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="P:System.Activities.ActivityContext.WorkflowInstanceId">
      <summary>Gets the unique indentifier of the currently executing workflow instance.</summary>
      <returns>The unique identifier of the currently executing workflow instance.</returns>
    </member>
    <member name="T:System.Activities.ActivityDelegate">
      <summary>Represents an activity-based callback.</summary>
    </member>
    <member name="M:System.Activities.ActivityDelegate.#ctor">
      <summary>Called by derived class constructors to initialize the object.</summary>
    </member>
    <member name="P:System.Activities.ActivityDelegate.DisplayName">
      <summary>Gets or sets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>A friendly name that is used for debugging, validation, exception handling, and tracking.</returns>
    </member>
    <member name="M:System.Activities.ActivityDelegate.GetResultArgument">
      <summary>When implemented in a derived class, returns the <see cref="T:System.Activities.DelegateOutArgument" /> of the <see cref="T:System.Activities.ActivityDelegate" />.</summary>
      <returns>An out argument for the <see cref="T:System.Activities.ActivityDelegate" />.</returns>
    </member>
    <member name="P:System.Activities.ActivityDelegate.Handler">
      <summary>Gets or sets the activity that is represented by this <see cref="T:System.Activities.ActivityDelegate" />.</summary>
      <returns>The activity that is represented by this <see cref="T:System.Activities.ActivityDelegate" />.</returns>
    </member>
    <member name="M:System.Activities.ActivityDelegate.OnGetRuntimeDelegateArguments(System.Collections.Generic.IList{System.Activities.RuntimeDelegateArgument})">
      <summary>Supplies a list of runtime arguments for the <see cref="T:System.Activities.ActivityDelegate" />.</summary>
      <param name="runtimeDelegateArguments">The list to be populated with runtime arguments.</param>
    </member>
    <member name="M:System.Activities.ActivityDelegate.ShouldSerializeDisplayName">
      <summary>Indicates whether the <see cref="P:System.Activities.ActivityDelegate.DisplayName" /> property value should be serialized to XAML.</summary>
      <returns>true, if the <see cref="P:System.Activities.ActivityDelegate.DisplayName" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.ActivityDelegate.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.ActivityDelegate" /> that contains the <see cref="P:System.Activities.ActivityDelegate.DisplayName" />.</summary>
      <returns>A representation of the <see cref="T:System.Activities.ActivityDelegate" /> that contains the <see cref="P:System.Activities.ActivityDelegate.DisplayName" />.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`1">
      <summary>Defines an activity delegate with no in arguments and one out argument of type Tresult.</summary>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`1.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>The argument.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`10">
      <summary>Defines an activity delegate with nine in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`10.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`10" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`11">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`11.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`11" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`12">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`12.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`12" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`13">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`13.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`13" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`14">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`14.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`14" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`15">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T14">The type of the fourteenth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`15.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`15" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`16">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T14">The type of the fourteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T15">The type of the fifteenth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`16.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`16" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument15">
      <summary>Gets or sets the fifteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`17">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T14">The type of the fourteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T15">The type of the fifteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T16">The type of the sixteenth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`17.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`17" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument15">
      <summary>Gets or sets the fifteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument16">
      <summary>Gets or sets the sixteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`2">
      <summary>Defines an activity delegate with one in argument of type <paramref name="T" /> and one out argument of type <paramref name="TResult" />.</summary>
      <typeparam name="T">The type of the in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`2.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`2.Argument">
      <summary>Gets or sets the in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`2.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`3">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`3.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`3.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`3.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`3.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>The result argument.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`4">
      <summary>Defines an activity delegate with three in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`4.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`4" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`5">
      <summary>Defines an activity delegate with four in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`5.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`5" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`6">
      <summary>Defines an activity delegate with five in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`6.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`6" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`7">
      <summary>Defines an activity delegate with six in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`7.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`7" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`8">
      <summary>Defines an activity delegate with seven in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`8.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`8" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>The argument.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`9">
      <summary>Defines an activity delegate with eight in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`9.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`9" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityInstance">
      <summary>Represents the instance state of an activity at runtime.</summary>
    </member>
    <member name="P:System.Activities.ActivityInstance.Activity">
      <summary>Gets the activity represented by the current <see cref="T:System.Activities.ActivityInstance" />.</summary>
      <returns>The activity represented by this <see cref="T:System.Activities.ActivityInstance" />.</returns>
    </member>
    <member name="P:System.Activities.ActivityInstance.Id">
      <summary>Gets an identifier that uniquely identifies the <see cref="T:System.Activities.ActivityInstance" />.</summary>
      <returns>An identifier that uniquely identifies the <see cref="T:System.Activities.ActivityInstance" />.</returns>
    </member>
    <member name="P:System.Activities.ActivityInstance.IsCompleted">
      <summary>Gets a value that indicates whether the activity represented by the current <see cref="T:System.Activities.ActivityInstance" /> is completed.</summary>
      <returns>true if the activity is completed; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.ActivityInstance.State">
      <summary>Gets the <see cref="T:System.Activities.ActivityInstanceState" /> of the current <see cref="T:System.Activities.ActivityInstance" />.</summary>
      <returns>The state of the activity instance.</returns>
    </member>
    <member name="T:System.Activities.ActivityInstanceState">
      <summary>Describes the state of an activity instance.</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Executing">
      <summary>Specifies that the activity is in an executing state.</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Closed">
      <summary>Specifies that the activity is in a closed state.</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Canceled">
      <summary>Specifies that the activity is in a canceled state.</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Faulted">
      <summary>Specifies that the activity is in a faulted state.</summary>
    </member>
    <member name="T:System.Activities.ActivityMetadata">
      <summary>Represents the set of arguments, child activities, variables, and delegates that a configured <see cref="T:System.Activities.Activity" /> introduces to the execution environment.</summary>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddArgument(System.Activities.RuntimeArgument)">
      <summary>Adds an argument to the collection of arguments of an activity.</summary>
      <param name="argument">The argument to add to the collection.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddDefaultExtensionProvider``1(System.Func{``0})">
      <summary>Adds the specified extension provider to the collection of default extension providers for the activity.</summary>
      <param name="extensionProvider">The function that returns the extension.</param>
      <typeparam name="T">The type of the extension provider.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddImportedChild(System.Activities.Activity)">
      <summary>Adds the specified activity to the metadata’s list of imported child activities.</summary>
      <param name="importedChild">The activity to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate)">
      <summary>Adds the specified delegate to the metadata’s list of imported delegates.</summary>
      <param name="importedDelegate">The delegate to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddValidationError(System.Activities.Validation.ValidationError)">
      <summary>Adds the specified validation error to the metadata’s collection of validation errors.</summary>
      <param name="validationError">The validation error to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddValidationError(System.String)">
      <summary>Adds a validation error to the metadata’s collection of validation errors using the specified description.</summary>
      <param name="validationErrorMessage">A message that describes the validation error.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddVariable(System.Activities.Variable)">
      <summary>Adds the specified variable to the metadata’s collection of variables.</summary>
      <param name="variable">The variable to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
      <summary>Binds the specified <see cref="T:System.Activities.Argument" /> to the specified <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <param name="binding">The <see cref="T:System.Activities.Argument" /> to bind.</param>
      <param name="argument">The <see cref="T:System.Activities.RuntimeArgument" /> to bind.</param>
    </member>
    <member name="P:System.Activities.ActivityMetadata.Environment">
      <summary>Gets the activity’s <see cref="T:System.Activities.LocationReferenceEnvironment" /> of arguments, variables, delegate arguments, or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>The activity’s location reference environment of arguments, variables, delegate arguments, or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to this metadata instance.</summary>
      <returns>true if the specified object is equal to this metadata instance; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetArgumentsWithReflection">
      <summary>Returns a collection of arguments obtained by using reflection.</summary>
      <returns>A collection of arguments.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetHashCode">
      <summary>Returns a unique identifier for this metadata instance.</summary>
      <returns>An integer that uniquely identifies this metadata instance.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetImportedChildrenWithReflection">
      <summary>Returns a collection of imported child activities using reflection.</summary>
      <returns>A collection of imported child activities.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetImportedDelegatesWithReflection">
      <summary>Returns a collection of delegates using reflection.</summary>
      <returns>A collection of delegates.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetVariablesWithReflection">
      <summary>Returns a collection of variables using reflection.</summary>
      <returns>A collection of variables.</returns>
    </member>
    <member name="P:System.Activities.ActivityMetadata.HasViolations">
      <summary>Gets a value that indicates whether there are any validation errors in the metadata.</summary>
      <returns>true if validation errors are present; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.op_Equality(System.Activities.ActivityMetadata,System.Activities.ActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are equal.</summary>
      <returns>true if the two items are equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.op_Inequality(System.Activities.ActivityMetadata,System.Activities.ActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are not equal.</summary>
      <returns>true if the two items are not equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.RequireExtension``1">
      <summary>Specifies that the activity requires an extension of the specified generic type at runtime.</summary>
      <typeparam name="T">The type of the extension.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityMetadata.RequireExtension(System.Type)">
      <summary>Specifies that the activity requires an extension of the specified type at runtime.</summary>
      <param name="extensionType">The type of the extension.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetArgumentsCollection(System.Collections.ObjectModel.Collection{System.Activities.RuntimeArgument})">
      <summary>Adds the specified collection of arguments to the activity’s arguments.</summary>
      <param name="arguments">The arguments to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetImportedChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>Adds the specified collection as imported child activities of the activity.</summary>
      <param name="importedChildren">The activities to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetImportedDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>Adds the specified collection as imported delegates of the activity.</summary>
      <param name="importedDelegates">The delegates to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetValidationErrorsCollection(System.Collections.ObjectModel.Collection{System.Activities.Validation.ValidationError})">
      <summary>Adds the specified collection of validation errors to the metadata’s collection of validation errors.</summary>
      <param name="validationErrors">The validation errors to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
      <summary>Adds the specified collection of variables to the activity’s variables.</summary>
      <param name="variables">The variables to add.</param>
    </member>
    <member name="T:System.Activities.ActivityPropertyReference">
      <summary>Represents a property reference that is used in <see cref="T:System.Activities.ActivityBuilder" /> and that maps to a <see cref="T:System.Activities.XamlIntegration.PropertyReferenceExtension`1" /> in an x:Class activity when the x:Class activity is deserialized into an <see cref="T:System.Activities.ActivityBuilder" />.</summary>
    </member>
    <member name="M:System.Activities.ActivityPropertyReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ActivityPropertyReference" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityPropertyReference.SourceProperty">
      <summary>Gets or sets the source property name that corresponds to the property name in the x:Class activity definition.</summary>
      <returns>The source property name that corresponds to the property name in the x:Class activity definition.</returns>
    </member>
    <member name="P:System.Activities.ActivityPropertyReference.TargetProperty">
      <summary>Gets or sets the name of the property being set on the target object.</summary>
      <returns>The name of the property being set on the target object.</returns>
    </member>
    <member name="T:System.Activities.ActivityWithResult">
      <summary>Retrieves the value or type of an activity out argument. This class is abstract and derives from <see cref="T:System.Activities.Activity" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityWithResult.Result">
      <summary>When implemented in a derived class, gets or sets the value of an object of type <see cref="T:System.Activities.OutArgument" />.</summary>
      <returns>An out argument.</returns>
    </member>
    <member name="P:System.Activities.ActivityWithResult.ResultType">
      <summary>When implemented in a derived class, gets the type of an activity <see cref="T:System.Activities.OutArgument" />.</summary>
      <returns>A type object.</returns>
    </member>
    <member name="T:System.Activities.Argument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into and out of an activity.</summary>
    </member>
    <member name="P:System.Activities.Argument.ArgumentType">
      <summary>Gets the data type for the data bound to this <see cref="T:System.Activities.Argument" />.</summary>
      <returns>The data type for the data bound to this <see cref="T:System.Activities.Argument" />.</returns>
    </member>
    <member name="M:System.Activities.Argument.Create(System.Type,System.Activities.ArgumentDirection)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.Argument" />.</summary>
      <returns>The newly created argument.</returns>
      <param name="type">The data type of the <see cref="T:System.Activities.Argument" />.</param>
      <param name="direction">One of the enumeration values that specifies the direction of the flow of data through the <see cref="T:System.Activities.Argument" />.</param>
    </member>
    <member name="M:System.Activities.Argument.CreateReference(System.Activities.Argument,System.String)">
      <summary>Creates a new argument that references the specified target argument using the specified referenced argument name.</summary>
      <returns>A new argument that references the specified target argument.</returns>
      <param name="argumentToReference">The target argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="P:System.Activities.Argument.Direction">
      <summary>Gets an <see cref="T:System.Activities.ArgumentDirection" /> that specifies whether the <see cref="T:System.Activities.Argument" /> represents the flow of data into an activity, out of an activity, or both into and out of an activity. </summary>
      <returns>One of the enumeration values that specifies the direction of the flow of data through the <see cref="T:System.Activities.Argument" />.</returns>
    </member>
    <member name="P:System.Activities.Argument.EvaluationOrder">
      <summary>Gets or sets a zero-based value that specifies the order in which the argument is evaluated.</summary>
      <returns>A zero-based value that specifies the order in which the argument is evaluated.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero and not equal to <see cref="F:System.Activities.Argument.UnspecifiedEvaluationOrder" />.</exception>
    </member>
    <member name="P:System.Activities.Argument.Expression">
      <summary>Gets or sets a <see cref="T:System.Activities.ActivityWithResult" /> that represents the value of the data bound to this <see cref="T:System.Activities.Argument" />.</summary>
      <returns>The value of the data bound to this <see cref="T:System.Activities.Argument" />.</returns>
    </member>
    <member name="M:System.Activities.Argument.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the argument using the specified activity context.</summary>
      <returns>The value of the argument.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.Argument.Get``1(System.Activities.ActivityContext)">
      <summary>Gets the value of the argument using the specified type and activity context.</summary>
      <returns>The value of the argument.</returns>
      <param name="context">The current activity context.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.Argument.GetLocation(System.Activities.ActivityContext)">
      <summary>Gets the <see cref="T:System.Activities.Location" /> for this <see cref="T:System.Activities.Argument" />.</summary>
      <returns>The location for this <see cref="T:System.Activities.Argument" />.</returns>
      <param name="context">The activity context of the executing activity.</param>
    </member>
    <member name="F:System.Activities.Argument.ResultValue">
      <summary>Represents the constant value of “Result”, which corresponds to the name of the <see cref="P:System.Activities.ActivityWithResult.Result" /> property of type <see cref="T:System.Activities.OutArgument" /> in the expression base class <see cref="T:System.Activities.ActivityWithResult" />.</summary>
    </member>
    <member name="M:System.Activities.Argument.Set(System.Activities.ActivityContext,System.Object)">
      <summary>Sets the value of the argument using the specified activity context.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The value for the argument.</param>
    </member>
    <member name="F:System.Activities.Argument.UnspecifiedEvaluationOrder">
      <summary>Represents the value of the <see cref="P:System.Activities.Argument.EvaluationOrder" /> property for an argument with an unspecified evaluation order. This value is read-only.</summary>
    </member>
    <member name="T:System.Activities.ArgumentDirection">
      <summary>Specifies the direction of data flow for an <see cref="T:System.Activities.Argument" />.</summary>
    </member>
    <member name="F:System.Activities.ArgumentDirection.In">
      <summary>An <see cref="T:System.Activities.Argument" /> that represents the flow of data into a workflow or activity.</summary>
    </member>
    <member name="F:System.Activities.ArgumentDirection.Out">
      <summary>An <see cref="T:System.Activities.Argument" /> that represents the flow of data out of a workflow or activity.</summary>
    </member>
    <member name="F:System.Activities.ArgumentDirection.InOut">
      <summary>An <see cref="T:System.Activities.Argument" /> that represents the flow of data into and out of a workflow or activity.</summary>
    </member>
    <member name="T:System.Activities.AsyncCodeActivity">
      <summary>Manages asynchronous code activity execution from start to completion. This is an abstract class.</summary>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.AsyncCodeActivity" /> class.</summary>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.BeginExecute(System.Activities.AsyncCodeActivityContext,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class and using the specified execution context, callback method, and user state, enqueues an asynchronous activity in a run-time workflow. </summary>
      <returns>The object that saves variable information for an instance of an asynchronous activity.</returns>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
      <param name="callback">The method to be called after the asynchronous activity and completion notification have occurred.</param>
      <param name="state">An object that saves variable information for an instance of an asynchronous activity.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Throws an invalid operation exception when the wrong cache metadata is  included in the assembly.</summary>
      <param name="metadata">
        <see cref="T:System.Activities.CodeActivityMetadata" /> object that contains data for a set of asynchronous activity arguments. </param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Serves as a virtual method and converts information obtained by cache reflection into arguments for an asynchronous activity.</summary>
      <param name="metadata">
        <see cref="T:System.Activities.CodeActivityMetadata" /> object that contains data for a set of asynchronous activity arguments. </param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.Cancel(System.Activities.AsyncCodeActivityContext)">
      <summary>When implemented in a derived class and using the specified execution environment information, notifies the workflow runtime that the asynchronous activity operation has reached an early completion. Serves as a virtual method.</summary>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.EndExecute(System.Activities.AsyncCodeActivityContext,System.IAsyncResult)">
      <summary>When implemented in a derived class and using the specified execution environment information, notifies the workflow runtime that the associated asynchronous activity operation has completed.</summary>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
      <param name="result">The implemented <see cref="T:System.IAsyncResult" /> that returns the status of an asynchronous activity when execution ends.</param>
    </member>
    <member name="P:System.Activities.AsyncCodeActivity.Implementation">
      <summary>Gets null or throws an error when there is an attempt to set the value of this property.</summary>
      <returns>An activity function.</returns>
    </member>
    <member name="T:System.Activities.AsyncCodeActivity`1">
      <summary>Manages asynchronous code activity execution, for an activity of a specified type, from start to completion. This is an abstract and generic class.</summary>
      <typeparam name="TResult">The type of the asynchronous activity that is handled by this class.</typeparam>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.AsyncCodeActivity" /> class.</summary>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.BeginExecute(System.Activities.AsyncCodeActivityContext,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class and using the specified execution context, callback method, and user state, enqueues an asynchronous activity in a run-time workflow. </summary>
      <returns>An object.</returns>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
      <param name="callback">The method to be called after the asynchronous activity and completion notification have occurred.</param>
      <param name="state">An object that saves variable information for an instance of an asynchronous activity.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Throws an invalid operation exception when the wrong cache metadata is  included in the assembly.</summary>
      <param name="metadata">
        <see cref="T:System.Activities.CodeActivityMetadata" /> object that contains data for a set of asynchronous activity arguments. </param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Serves as a virtual method and converts information obtained by reflection on a cache into arguments for an asynchronous activity.</summary>
      <param name="metadata">
        <see cref="T:System.Activities.CodeActivityMetadata" /> object that contains data for a set of asynchronous activity arguments.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.Cancel(System.Activities.AsyncCodeActivityContext)">
      <summary>When implemented in a derived class and using the specified execution environment information, notifies the workflow runtime that the asynchronous activity operation has been canceled. This method serves as a virtual method.</summary>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.EndExecute(System.Activities.AsyncCodeActivityContext,System.IAsyncResult)">
      <summary>When implemented in a derived class and using the specified execution environment information, notifies the workflow runtime that the associated asynchronous activity operation has completed.</summary>
      <returns>A generic type.</returns>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
      <param name="result">The implemented <see cref="T:System.IAsyncResult" /> that returns the status of an asynchronous activity when execution ends.</param>
    </member>
    <member name="P:System.Activities.AsyncCodeActivity`1.Implementation">
      <summary>Gets null or throws an error when there is an attempt to set the value of this property.</summary>
      <returns>An activity function.</returns>
    </member>
    <member name="T:System.Activities.AsyncCodeActivityContext">
      <summary>The execution context for an asynchronous activity.</summary>
    </member>
    <member name="P:System.Activities.AsyncCodeActivityContext.IsCancellationRequested">
      <summary>Gets a value that indicates whether the currently executing <see cref="T:System.Activities.AsyncCodeActivity" /> is to be canceled.</summary>
      <returns>true if the currently executing <see cref="T:System.Activities.AsyncCodeActivity" /> is to be canceled; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.AsyncCodeActivityContext.MarkCanceled">
      <summary>Marks the current activity instance as canceled.</summary>
    </member>
    <member name="P:System.Activities.AsyncCodeActivityContext.UserState">
      <summary>Gets or sets a user-defined object associated with the current asynchronous activity.</summary>
      <returns>The user-defined object.</returns>
    </member>
    <member name="T:System.Activities.Bookmark">
      <summary>Represents a point at which a workflow or activity can passively wait to be resumed.</summary>
    </member>
    <member name="M:System.Activities.Bookmark.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Bookmark" /> class using the specified name.</summary>
      <param name="name">A name that identifies the bookmark.</param>
    </member>
    <member name="M:System.Activities.Bookmark.Equals(System.Activities.Bookmark)">
      <summary>Determines whether the current <see cref="T:System.Activities.Bookmark" /> and the specified <see cref="T:System.Activities.Bookmark" /> refer to the same continuation point in a workflow.</summary>
      <returns>true if the <see cref="T:System.Activities.Bookmark" /> objects are equal; otherwise, false.</returns>
      <param name="other">The bookmark to compare.</param>
    </member>
    <member name="M:System.Activities.Bookmark.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Activities.Bookmark" /> and the specified object refer to the same continuation point in a workflow.</summary>
      <returns>true if the <see cref="T:System.Activities.Bookmark" /> objects are equal; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.Bookmark.GetHashCode">
      <summary>Returns a unique identifier for this <see cref="T:System.Activities.Bookmark" /> instance.</summary>
      <returns>The unique identifier of this <see cref="T:System.Activities.Bookmark" /> instance.</returns>
    </member>
    <member name="P:System.Activities.Bookmark.Name">
      <summary>Gets the bookmark name.</summary>
      <returns>The bookmark name.</returns>
    </member>
    <member name="M:System.Activities.Bookmark.ToString">
      <summary>Returns the bookmark name for a named bookmark or the bookmark ID for an unnamed bookmark.</summary>
      <returns>The bookmark name or ID.</returns>
    </member>
    <member name="T:System.Activities.BookmarkCallback">
      <summary>Represents the method that is called when a <see cref="T:System.Activities.Bookmark" /> is resumed.</summary>
      <param name="context">The execution environment of the activity handling the <see cref="T:System.Activities.Bookmark" /> resumption.</param>
      <param name="bookmark">The <see cref="T:System.Activities.Bookmark" /> being resumed.</param>
      <param name="value">The data associated with the <see cref="T:System.Activities.Bookmark" /> resumption.</param>
    </member>
    <member name="T:System.Activities.BookmarkOptions">
      <summary>Specifies the options for a <see cref="T:System.Activities.Bookmark" />.</summary>
    </member>
    <member name="F:System.Activities.BookmarkOptions.None">
      <summary>Default <see cref="T:System.Activities.Bookmark" /> options,</summary>
    </member>
    <member name="F:System.Activities.BookmarkOptions.MultipleResume">
      <summary>A <see cref="T:System.Activities.Bookmark" /> that can be resumed multiple times.</summary>
    </member>
    <member name="F:System.Activities.BookmarkOptions.NonBlocking">
      <summary>A <see cref="T:System.Activities.Bookmark" /> that does not block the workflow.</summary>
    </member>
    <member name="T:System.Activities.BookmarkResumptionResult">
      <summary>Defines an enumeration whose members represent the outcome of bookmark scheduling requests.</summary>
    </member>
    <member name="F:System.Activities.BookmarkResumptionResult.Success">
      <summary>The bookmark resumption was successfully scheduled.</summary>
    </member>
    <member name="F:System.Activities.BookmarkResumptionResult.NotFound">
      <summary>The bookmark resumption was not scheduled because the bookmark could not be found.</summary>
    </member>
    <member name="F:System.Activities.BookmarkResumptionResult.NotReady">
      <summary>The bookmark resumption was not scheduled because the runtime has not yet created the bookmark. The host should wait until another idle point to try resumption again.</summary>
    </member>
    <member name="T:System.Activities.BookmarkScope">
      <summary>Scopes a set of <see cref="T:System.Activities.Bookmark" /> objects that are categorized as operating under the same protocol.</summary>
    </member>
    <member name="M:System.Activities.BookmarkScope.#ctor(System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.BookmarkScope" /> class with the specified GUID scope identification number.</summary>
      <param name="id">A GUID scope identification number.</param>
    </member>
    <member name="P:System.Activities.BookmarkScope.Default">
      <summary>Gets the default <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>The default <see cref="T:System.Activities.BookmarkScope" />.</returns>
    </member>
    <member name="M:System.Activities.BookmarkScope.Equals(System.Activities.BookmarkScope)">
      <summary>Gets a value that indicates whether the current <see cref="T:System.Activities.BookmarkScope" /> and the specified <see cref="T:System.Activities.BookmarkScope" /> are the same.</summary>
      <returns>true if the bookmark scopes are the same; otherwise, false.</returns>
      <param name="other">A bookmark scope object.</param>
    </member>
    <member name="M:System.Activities.BookmarkScope.GetHashCode">
      <summary>Generates an identification number for the current <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>A hash code.</returns>
    </member>
    <member name="P:System.Activities.BookmarkScope.Id">
      <summary>Gets the GUID that identifies the current <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>A GUID.</returns>
    </member>
    <member name="M:System.Activities.BookmarkScope.Initialize(System.Activities.NativeActivityContext,System.Guid)">
      <summary>Initializes the current <see cref="T:System.Activities.BookmarkScope" /> using the specified GUID.</summary>
      <param name="context">The current activity execution environment.</param>
      <param name="id">The GUID to assign to the <see cref="T:System.Activities.BookmarkScope" />.</param>
    </member>
    <member name="P:System.Activities.BookmarkScope.IsInitialized">
      <summary>Gets a value that indicates whether the current <see cref="T:System.Activities.BookmarkScope" /> has been initialized.</summary>
      <returns>true if the <see cref="T:System.Activities.BookmarkScope" /> has been initialized; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.BookmarkScopeHandle">
      <summary>A T:System.Handle used to manage the lifetime of a <see cref="T:System.Activities.BookmarkScope" />.</summary>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.BookmarkScopeHandle" /> class.</summary>
    </member>
    <member name="P:System.Activities.BookmarkScopeHandle.BookmarkScope">
      <summary>The <see cref="T:System.Activities.BookmarkScope" /> associated with this <see cref="T:System.Activities.BookmarkScopeHandle" />.</summary>
      <returns>A <see cref="T:System.Activities.BookmarkScope" />.</returns>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.CreateBookmarkScope(System.Activities.NativeActivityContext)">
      <summary>Creates a new <see cref="P:System.Activities.BookmarkScopeHandle.BookmarkScope" /></summary>
      <param name="context">The activity context.</param>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.CreateBookmarkScope(System.Activities.NativeActivityContext,System.Guid)">
      <summary>Creates a new <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <param name="context">The activity context.</param>
      <param name="scopeId">A unique global identifier associated with the <see cref="T:System.Activities.BookmarkScope" />.</param>
    </member>
    <member name="P:System.Activities.BookmarkScopeHandle.Default">
      <summary>The default <see cref="T:System.Activities.BookmarkScopeHandle" />.</summary>
      <returns>A <see cref="T:System.Activities.BookmarkScopeHandle" />.</returns>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.Initialize(System.Activities.NativeActivityContext,System.Guid)">
      <summary>Initializes the <see cref="P:System.Activities.BookmarkScopeHandle.BookmarkScope" />, usingthe specified activity context and GUID identifier.</summary>
      <param name="context">The activity context.</param>
      <param name="scope">A GUID identifier that is associated with <see cref="P:System.Activities.BookmarkScopeHandle.BookmarkScope" />.</param>
    </member>
    <member name="T:System.Activities.CodeActivity">
      <summary>An abstract class for creating a custom activity with imperative behavior defined with the <see cref="M:System.Activities.CodeActivity.Execute(System.Activities.CodeActivityContext)" /> method, which gives access to variable and argument resolution and extensions.</summary>
    </member>
    <member name="M:System.Activities.CodeActivity.#ctor">
      <summary>When implemented in a derived class, creates an instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Not implemented. Use <see cref="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" /> instead.</summary>
      <param name="metadata">Not implemented.</param>
    </member>
    <member name="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="M:System.Activities.CodeActivity.Execute(System.Activities.CodeActivityContext)">
      <summary>When implemented in a derived class, performs the execution of the activity.</summary>
      <param name="context">The execution context under which the activity executes.</param>
    </member>
    <member name="P:System.Activities.CodeActivity.Implementation">
      <summary>Not supported.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="T:System.Activities.CodeActivity`1">
      <summary>An abstract class for creating a custom activity with imperative behavior defined in the <see cref="M:System.Activities.CodeActivity.Execute(System.Activities.CodeActivityContext)" /> method, giving access to variable and argument resolution and extensions.</summary>
      <typeparam name="TResult">The result returned by the activity.</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivity`1.#ctor">
      <summary>When implemented in a derived class, creates an instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.CodeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Not implemented. Use <see cref="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" /> instead.</summary>
      <param name="metadata">Not implemented.</param>
    </member>
    <member name="M:System.Activities.CodeActivity`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="M:System.Activities.CodeActivity`1.Execute(System.Activities.CodeActivityContext)">
      <summary>When implemented in a derived class, performs the execution of the activity.</summary>
      <returns>The result of the activity’s execution.</returns>
      <param name="context">The execution context under which the activity executes.</param>
    </member>
    <member name="P:System.Activities.CodeActivity`1.Implementation">
      <summary>Not supported.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="T:System.Activities.CodeActivityContext">
      <summary>Extends <see cref="T:System.Activities.ActivityContext" /> and provides additional functionality for <see cref="T:System.Activities.CodeActivity" />.</summary>
    </member>
    <member name="M:System.Activities.CodeActivityContext.GetProperty``1">
      <summary>Gets the execution property of the specified type.</summary>
      <returns>The execution property.</returns>
      <typeparam name="THandle">The type of execution property.</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivityContext.Track(System.Activities.Tracking.CustomTrackingRecord)">
      <summary>Sends the specified custom tracking record to any registered tracking providers.</summary>
      <param name="record">The data to be tracked.</param>
    </member>
    <member name="T:System.Activities.CodeActivityMetadata">
      <summary>Represents the set of arguments that a configured <see cref="T:System.Activities.CodeActivity" /> introduces to the execution environment.</summary>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddArgument(System.Activities.RuntimeArgument)">
      <summary>Adds an argument to the collection of arguments of an activity.</summary>
      <param name="argument">The argument to add to the collection.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddDefaultExtensionProvider``1(System.Func{``0})">
      <summary>Adds the specified extension provider to the collection of default extension providers for the activity.</summary>
      <param name="extensionProvider">The function that returns the extension.</param>
      <typeparam name="T">The type of the extension provider.</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddValidationError(System.Activities.Validation.ValidationError)">
      <summary>Adds the specified validation error to the metadata’s collection of validation errors.</summary>
      <param name="validationError">The validation error to add.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddValidationError(System.String)">
      <summary>Adds a validation error to the metadata’s collection of validation errors using the specified description.</summary>
      <param name="validationErrorMessage">A message that describes the validation error.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
      <summary>Binds the specified <see cref="T:System.Activities.Argument" /> to the specified <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <param name="binding">The <see cref="T:System.Activities.Argument" /> to bind.</param>
      <param name="argument">The <see cref="T:System.Activities.RuntimeArgument" /> to bind.</param>
    </member>
    <member name="P:System.Activities.CodeActivityMetadata.Environment">
      <summary>Gets the activity’s <see cref="T:System.Activities.LocationReferenceEnvironment" /> of arguments or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>The activity’s location reference environment of arguments or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to this metadata instance.</summary>
      <returns>true if the specified object is equal to this metadata instance; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.GetArgumentsWithReflection">
      <summary>Returns a collection of arguments obtained by using reflection.</summary>
      <returns>A collection of arguments.</returns>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.GetHashCode">
      <summary>Returns a unique identifier for this metadata instance.</summary>
      <returns>An integer that uniquely identifies this metadata instance.</returns>
    </member>
    <member name="P:System.Activities.CodeActivityMetadata.HasViolations">
      <summary>Gets a value that indicates whether there are any validation errors in the metadata.</summary>
      <returns>true if validation errors are present; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.op_Equality(System.Activities.CodeActivityMetadata,System.Activities.CodeActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are equal.</summary>
      <returns>true if the two items are equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.op_Inequality(System.Activities.CodeActivityMetadata,System.Activities.CodeActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are not equal.</summary>
      <returns>true if the two items are not equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The first item to compare.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.RequireExtension``1">
      <summary>Specifies that the activity requires an extension of the specified generic type at runtime.</summary>
      <typeparam name="T">The type of the extension.</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.RequireExtension(System.Type)">
      <summary>Specifies that the activity requires an extension of the specified type at runtime.</summary>
      <param name="extensionType">The type of the extension.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.SetArgumentsCollection(System.Collections.ObjectModel.Collection{System.Activities.RuntimeArgument})">
      <summary>Adds the specified collection of arguments to the activity’s arguments.</summary>
      <param name="arguments">The arguments to add.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.SetValidationErrorsCollection(System.Collections.ObjectModel.Collection{System.Activities.Validation.ValidationError})">
      <summary>Adds the specified collection of validation errors to the metadata’s collection of validation errors.</summary>
      <param name="validationErrors">The validation errors to add.</param>
    </member>
    <member name="T:System.Activities.CompletionCallback">
      <summary>The method that is called when an activity completes.</summary>
      <param name="context">The execution environment of the activity.</param>
      <param name="completedInstance">The activity that completed.</param>
    </member>
    <member name="T:System.Activities.CompletionCallback`1">
      <summary>The method that is called when an activity completes.</summary>
      <param name="context">The execution environment of the activity.</param>
      <param name="completedInstance">The activity that completed.</param>
      <param name="result">The <see cref="P:System.Activities.WorkflowElement`1.Result" /> value of the activity that completed.</param>
      <typeparam name="TResult">The type of the result value.</typeparam>
    </member>
    <member name="T:System.Activities.DelegateArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into and out of an <see cref="T:System.Activities.ActivityDelegate" />.</summary>
    </member>
    <member name="P:System.Activities.DelegateArgument.Direction">
      <summary>Gets an <see cref="T:System.Activities.ArgumentDirection" /> that specifies whether the <see cref="T:System.Activities.DelegateArgument" /> represents the flow of data into an <see cref="T:System.Activities.ActivityDelegate" />, out of an <see cref="T:System.Activities.ActivityDelegate" />, or both into and out of an <see cref="T:System.Activities.ActivityDelegate" />.</summary>
      <returns>One of the enumeration values that specifies the direction of the flow of data through the <see cref="T:System.Activities.DelegateArgument" />.</returns>
    </member>
    <member name="M:System.Activities.DelegateArgument.Get(System.Activities.ActivityContext)">
      <summary>Returns the value of the argument using the specified activity context.</summary>
      <returns>The value of the argument.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.DelegateArgument.GetLocation(System.Activities.ActivityContext)">
      <summary>Returns the <see cref="T:System.Activities.Location" /> of the value referenced by the <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The location of the value referenced by the <see cref="T:System.Activities.DelegateArgument" />.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="P:System.Activities.DelegateArgument.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.DelegateArgument" />.</returns>
    </member>
    <member name="P:System.Activities.DelegateArgument.NameCore">
      <summary>Gets the string value used by <see cref="P:System.Activities.DelegateArgument.Name" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.DelegateArgument" />.</returns>
    </member>
    <member name="T:System.Activities.DelegateCompletionCallback">
      <summary>Represents the method that is called when an <see cref="T:System.Activities.ActivityDelegate" /> completes.</summary>
      <param name="context">The execution environment of the activity handling the callback.</param>
      <param name="completedInstance">The completed activity instance of the <see cref="T:System.Activities.ActivityDelegate" /> handler.</param>
      <param name="outArguments">The output arguments of the completed <see cref="T:System.Activities.ActivityDelegate" />.</param>
    </member>
    <member name="T:System.Activities.DelegateInArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into an <see cref="T:System.Activities.ActivityDelegate" />.</summary>
    </member>
    <member name="T:System.Activities.DelegateInArgument`1">
      <summary>A binding terminal that represents the flow of data into an <see cref="T:System.Activities.ActivityDelegate" />.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.DelegateInArgument`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DelegateInArgument`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DelegateInArgument`1" /> class using the specified name.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.DelegateInArgument`1" />.</param>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.DelegateInArgument`1" />.</summary>
      <returns>The value of the <see cref="T:System.Activities.DelegateInArgument`1" />.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the <see cref="T:System.Activities.DelegateInArgument`1" />.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.DelegateOutArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data out of an <see cref="T:System.Activities.ActivityDelegate" />.</summary>
    </member>
    <member name="T:System.Activities.DelegateOutArgument`1">
      <summary>A binding terminal that represents the flow of data out of an <see cref="T:System.Activities.ActivityDelegate" />.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.DelegateOutArgument`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DelegateOutArgument`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DelegateOutArgument`1" /> class with the specified name.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.DelegateOutArgument`1" />.</param>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.DelegateOutArgument`1" />.</summary>
      <returns>The value of the <see cref="T:System.Activities.DelegateOutArgument`1" />.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.GetLocation(System.Activities.ActivityContext)">
      <summary>Returns the <see cref="T:System.Activities.Location`1" /> for this <see cref="T:System.Activities.DelegateOutArgument`1" />.</summary>
      <returns>The location for this <see cref="T:System.Activities.DelegateOutArgument`1" />.</returns>
      <param name="context">The activity context that contains the location for this <see cref="T:System.Activities.DelegateOutArgument`1" />.</param>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the <see cref="T:System.Activities.DelegateOutArgument`1" />.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.DynamicActivity">
      <summary>Provides an object model that allows you to construct activities dynamically that interface with the WF designer and runtime using <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Activities.DynamicActivity.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.DynamicActivity" /> class.</summary>
    </member>
    <member name="P:System.Activities.DynamicActivity.Attributes">
      <summary>Gets the collection of attributes of the dynamically generated activity.</summary>
      <returns>The collection of attributes.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Constraints">
      <summary>Returns a collection of <see cref="T:System.Activities.Validation.Constraint" /> activities that are configured to provide validation for the <see cref="T:System.Activities.DynamicActivity" />.</summary>
      <returns>The constraint collection.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Implementation">
      <summary>Gets or sets the execution logic of the activity.</summary>
      <returns>The execution logic.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Name">
      <summary>The name to be displayed for the activity in the workflow designer.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Properties">
      <summary>Gets the collection of properties that map to the arguments of the dynamically generated activity.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Returns a collection of attributes of the dynamic activity.</summary>
      <returns>The attributes of the dynamic activity.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Returns the class name of the dynamic activity.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Returns the component name of the dynamic activity.</summary>
      <returns>The component name.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Returns a type converter for the dynamic activity.</summary>
      <returns>A type converter for this dynamic activity instance.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Returns the default event for the dynamic activity.</summary>
      <returns>The default event.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Returns the default property for the dynamic activity.</summary>
      <returns>The default property.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Returns an editor with the specified base type.</summary>
      <returns>An instance of the editor that can be cast to the specified editor type or null if no editor of the requested type can be found.</returns>
      <param name="editorBaseType">The base type of the editor you want to find.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Returns the collection of events of the dynamic activity.</summary>
      <returns>The collection of events.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Returns the collection of events of the dynamic activity using a specified array of attributes as a filter.</summary>
      <returns>The collection of events that match the specified attributes.</returns>
      <param name="attributes">An array that you can use as a filter.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Returns the collection of properties of the dynamic activity.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Returns the collection of properties of the dynamic activity using a specified array of attributes as a filter.</summary>
      <returns>The collection of properties that match the specified attributes.</returns>
      <param name="attributes">An array that you can use as a filter.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns this instance of the <see cref="T:System.Activities.DynamicActivity" /> class.</summary>
      <returns>This instance of <see cref="T:System.Activities.DynamicActivity" />.</returns>
      <param name="pd">The property whose owner is to be found.</param>
    </member>
    <member name="T:System.Activities.DynamicActivity`1">
      <summary>Provides an approach that is consistent with the document object model (DOM), which constructs activities dynamically that interface with the WF designer and workflow runtime using <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />.</summary>
      <typeparam name="TResult">The result returned by the activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.DynamicActivity`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Attributes">
      <summary>Gets the collection of attributes of the dynamically generated activity.</summary>
      <returns>The collection of attributes.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Constraints">
      <summary>Returns a collection of <see cref="T:System.Activities.Validation.Constraint" /> activities that are configured to provide validation for the <see cref="T:System.Activities.DynamicActivity`1" />.</summary>
      <returns>The constraint collection.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Implementation">
      <summary>Gets or sets the execution logic of the activity.</summary>
      <returns>The execution logic.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Name">
      <summary>Gets the name to be displayed for the activity in the workflow designer.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Properties">
      <summary>Gets the collection of properties that map to the arguments of the dynamically generated activity.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Returns a collection of attributes of the dynamic activity.</summary>
      <returns>The attributes of the dynamic activity.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Returns the class name of the dynamic activity.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Returns the component name of the dynamic activity.</summary>
      <returns>The component name.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Returns a type converter for the dynamic activity.</summary>
      <returns>A type converter for this dynamic activity instance.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Returns the default event for the dynamic activity.</summary>
      <returns>The default event.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Returns the default property for the dynamic activity.</summary>
      <returns>The default property.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Returns an editor with the specified base type.</summary>
      <returns>An instance of the editor that can be cast to the specified editor type, or null if no editor of the requested type can be found.</returns>
      <param name="editorBaseType">The base type of the editor you want to find.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Returns the collection of events of the dynamic activity.</summary>
      <returns>The collection of events.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Returns the collection of events of the dynamic activity using a specified array of attributes as a filter.</summary>
      <returns>The collection of events that match the specified attributes.</returns>
      <param name="attributes">An array that you can use as a filter.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Returns the collection of properties of the dynamic activity.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Returns the collection of properties of the dynamic activity using a specified array of attributes as a filter.</summary>
      <returns>The collection of properties that match the specified attributes.</returns>
      <param name="attributes">An array that you can use as a filter.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns this instance of the <see cref="T:System.Activities.DynamicActivity`1" /> class.</summary>
      <returns>This instance of <see cref="T:System.Activities.DynamicActivity`1" />.</returns>
      <param name="pd">The property whose owner is to be found.</param>
    </member>
    <member name="T:System.Activities.DynamicActivityProperty">
      <summary>Represents a property of a  <see cref="T:System.Activities.DynamicActivity" /> that is created at runtime and executes in the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</summary>
    </member>
    <member name="M:System.Activities.DynamicActivityProperty.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.DynamicActivityProperty" /> class.</summary>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Attributes">
      <summary>Returns the attributes of the <see cref="T:System.Activities.DynamicActivityProperty" /> object.</summary>
      <returns>A collection of attributes.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Activities.DynamicActivityProperty" /> object.</summary>
      <returns>The property name.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivityProperty.ToString">
      <summary>Returns a string message that contains the type and the name of the <see cref="T:System.Activities.DynamicActivityProperty" /> instance.</summary>
      <returns>A string message.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Type">
      <summary>Gets or sets the type of the <see cref="T:System.Activities.DynamicActivityProperty" /> object.</summary>
      <returns>An object of type <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Value">
      <summary>Gets or sets the value of the <see cref="T:System.Activities.DynamicActivityProperty" /> object.</summary>
      <returns>An object of type <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Activities.ExclusiveHandle">
      <summary>Adds supplementary information to a bookmark that enables it to access a subset of its scope handles, excluding handles that are not required.</summary>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ExclusiveHandle" /> class.</summary>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.OnInitialize(System.Activities.HandleInitializationContext)">
      <summary>Creates a list of default <see cref="T:System.Activities.BookmarkScopeHandle" /> objects from handle variables in the specified handle initialization context.</summary>
      <param name="context">The environment in which the handle is created.</param>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)">
      <summary>Adds the specified bookmark scope handle to the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Activities.BookmarkScopeHandle" /> objects using the specified context.</summary>
      <param name="context">The environment in which the handle is created.</param>
      <param name="bookmarkScopeHandle">The token used to identify and access a group of bookmarks that operate under the same protocol in a workflow activity operation.</param>
    </member>
    <member name="P:System.Activities.ExclusiveHandle.RegisteredBookmarkScopes">
      <summary>Gets a new or existing <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Activities.BookmarkScopeHandle" /> objects.</summary>
      <returns>A read-only collection of bookmark scope handles.</returns>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.Reinitialize(System.Activities.NativeActivityContext)">
      <summary>Sets the registered bookmark scope handles back to the defaults.</summary>
      <param name="context">The environment in which the handle is created.</param>
    </member>
    <member name="T:System.Activities.ExecutionProperties">
      <summary>Represents the collection of properties at a particular scope.</summary>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Add(System.String,System.Object)">
      <summary>Registers a new property using the specified name.</summary>
      <param name="name">The name of the property.</param>
      <param name="property">The object that represents the property.</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Add(System.String,System.Object,System.Boolean)">
      <summary>Registers a property using the specified name and child visibility.</summary>
      <param name="name">The name of the property.</param>
      <param name="property">The object that represents the property.</param>
      <param name="onlyVisibleToPublicChildren">A value that determines whether this property is visible to the children of the owning activity.</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Find(System.String)">
      <summary>Returns the nearest property of the given name.</summary>
      <returns>The nearest property of the given name.</returns>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection of properties.</summary>
      <returns>An enumerator that iterates through the collection of properties.</returns>
    </member>
    <member name="P:System.Activities.ExecutionProperties.IsEmpty">
      <summary>Gets a value that indicates whether there are properties registered at the current scope.</summary>
      <returns>true if there are properties registered; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Remove(System.String)">
      <summary>Unregisters the property with the specified name.</summary>
      <returns>true if the property was unregistered; otherwise, false.</returns>
      <param name="name">The name of the property to unregister.</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection of properties.</summary>
      <returns>An enumerator that iterates through the collection of properties.</returns>
    </member>
    <member name="T:System.Activities.FaultCallback">
      <summary>Represents the method that is called when a scheduled activity or one of its children enters the <see cref="F:System.Activities.ActivityInstanceState.Faulted" /> state.</summary>
      <param name="faultContext">The <see cref="T:System.Activities.ActivityFaultContext" /> provided for inspecting the workflow fault.</param>
      <param name="propagatedException">The exception that caused the fault.</param>
      <param name="propagatedFrom">The activity that threw the exception and generated the fault.</param>
    </member>
    <member name="T:System.Activities.Handle">
      <summary>Represents a type that has its lifetime controlled by the workflow runtime.</summary>
    </member>
    <member name="M:System.Activities.Handle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Handle" /> class.</summary>
    </member>
    <member name="P:System.Activities.Handle.ExecutionPropertyName">
      <summary>Gets the name to be used by this <see cref="T:System.Activities.Handle" /> when added to an activity’s execution properties.</summary>
      <returns>The name of derived type as provided by <see cref="P:System.Type.FullName" />.</returns>
    </member>
    <member name="M:System.Activities.Handle.OnInitialize(System.Activities.HandleInitializationContext)">
      <summary>Called by the workflow runtime when the environment that contains the <see cref="T:System.Activities.Handle" /> is initialized.</summary>
      <param name="context">The environment in which the handle is being created.</param>
    </member>
    <member name="M:System.Activities.Handle.OnUninitialize(System.Activities.HandleInitializationContext)">
      <summary>Called by the workflow runtime when the <see cref="T:System.Activities.Variable" /> for the <see cref="T:System.Activities.Handle" /> goes out of scope.</summary>
      <param name="context">The environment in which the handle was created.</param>
    </member>
    <member name="P:System.Activities.Handle.Owner">
      <summary>Gets the <see cref="T:System.Activities.ActivityInstance" /> that contains the <see cref="T:System.Activities.Variable" /> that contains the <see cref="T:System.Activities.Handle" />.</summary>
      <returns>The activity instance that contains the <see cref="T:System.Activities.Variable" /> that contains the <see cref="T:System.Activities.Handle" />.</returns>
    </member>
    <member name="M:System.Activities.Handle.ThrowIfUninitialized">
      <summary>Throws an <see cref="T:System.InvalidOperationException" /> if the <see cref="T:System.Activities.Handle" /> has not been initialized.</summary>
    </member>
    <member name="T:System.Activities.HandleInitializationContext">
      <summary>Represents the initialization environment of a <see cref="T:System.Activities.Handle" />.</summary>
    </member>
    <member name="M:System.Activities.HandleInitializationContext.CreateAndInitializeHandle``1">
      <summary>Creates and initializes a new instance of the handle type specified by the type parameter.</summary>
      <returns>A new initialized instance of the handle type specified by the type parameter.</returns>
      <typeparam name="THandle">The type of the <see cref="T:System.Activities.Handle" /> to create and initialize.</typeparam>
    </member>
    <member name="M:System.Activities.HandleInitializationContext.UninitializeHandle(System.Activities.Handle)">
      <summary>Uninitializes the specified <see cref="T:System.Activities.Handle" />.</summary>
      <param name="handle">The <see cref="T:System.Activities.Handle" /> to uninitialize.</param>
    </member>
    <member name="T:System.Activities.IExecutionProperty">
      <summary>Provides execution properties with a mechanism for configuring thread local storage before and after the work items of the associated activity.</summary>
    </member>
    <member name="M:System.Activities.IExecutionProperty.CleanupWorkflowThread">
      <summary>Provides an opportunity for the execution property to tear down thread local storage.</summary>
    </member>
    <member name="M:System.Activities.IExecutionProperty.SetupWorkflowThread">
      <summary>Provides an opportunity for the execution property to set up thread local storage.</summary>
    </member>
    <member name="T:System.Activities.InArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into an activity.</summary>
    </member>
    <member name="M:System.Activities.InArgument.CreateReference(System.Activities.InArgument,System.String)">
      <summary>Creates a new <see cref="T:System.Activities.InArgument" /> that references the specified target <see cref="T:System.Activities.InArgument" /> using the specified referenced argument name.</summary>
      <returns>A new in argument that references the specified target <see cref="T:System.Activities.InArgument" />.</returns>
      <param name="argumentToReference">The target in argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="M:System.Activities.InArgument.CreateReference(System.Activities.InOutArgument,System.String)">
      <summary>Creates a new <see cref="T:System.Activities.InArgument" /> that references the specified target <see cref="T:System.Activities.InOutArgument" /> using the specified referenced argument name.</summary>
      <returns>A new in argument that references the specified target <see cref="T:System.Activities.InOutArgument" />.</returns>
      <param name="argumentToReference">The target in/out argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="T:System.Activities.InArgument`1">
      <summary>A binding terminal that represents the flow of data into an activity.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.InArgument`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Activities.Activity{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <param name="variable">The data that is passed through this argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using the specified expression.</summary>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using the specified value.</summary>
      <param name="constValue">The value of the argument.</param>
    </member>
    <member name="P:System.Activities.InArgument`1.Expression">
      <summary>Gets a <see cref="T:System.Activities.Activity`1" /> that represents the value of this <see cref="T:System.Activities.InArgument`1" />.</summary>
      <returns>A workflow element that represents the value of the argument.</returns>
    </member>
    <member name="M:System.Activities.InArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The new argument.</returns>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.FromExpression(System.Activities.Activity{`0})">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.FromValue(`0)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified value.</summary>
      <returns>The new argument.</returns>
      <param name="constValue">The value of the argument,</param>
    </member>
    <member name="M:System.Activities.InArgument`1.FromVariable(System.Activities.Variable)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.InArgument`1" /> using the specified activity context.</summary>
      <returns>The value of the argument.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(System.Activities.Activity{`0})~System.Activities.InArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(System.Activities.DelegateArgument)~System.Activities.InArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The new argument.</returns>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(System.Activities.Variable)~System.Activities.InArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument,</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(`0)~System.Activities.InArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified value.</summary>
      <returns>The new argument.</returns>
      <param name="constValue">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the <see cref="T:System.Activities.InArgument`1" /> using the specified value.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.InOutArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into and out of an activity.</summary>
    </member>
    <member name="M:System.Activities.InOutArgument.CreateReference(System.Activities.InOutArgument,System.String)">
      <summary>Creates a new <see cref="T:System.Activities.InOutArgument" /> that references the specified target <see cref="T:System.Activities.InOutArgument" /> using the specified referenced argument name.</summary>
      <returns>A new in/out argument that references the specified target <see cref="T:System.Activities.InOutArgument" />.</returns>
      <param name="argumentToReference">The target in/out argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="T:System.Activities.InOutArgument`1">
      <summary>A binding terminal that represents the flow of data into and out of an activity.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.InOutArgument`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InOutArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InOutArgument`1" /> class using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InOutArgument`1" /> class using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Activities.Variable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InOutArgument`1" /> class using the specified <see cref="T:System.Activities.Variable`1" />.</summary>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InOutArgument`1" /> class using the specified expression.</summary>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="P:System.Activities.InOutArgument`1.Expression">
      <summary>Gets an <see cref="T:System.Activities.Activity`1" /> that represents the value of this <see cref="T:System.Activities.InOutArgument`1" />.</summary>
      <returns>The value of the argument.</returns>
    </member>
    <member name="M:System.Activities.InOutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InOutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.FromVariable(System.Activities.Variable{`0})">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InOutArgument`1" /> constructed by using the specified <see cref="T:System.Activities.Variable`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.InOutArgument`1" /> using the specified <see cref="T:System.Activities.ActivityContext" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="context">The activity context that contains the value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.GetLocation(System.Activities.ActivityContext)">
      <summary>Gets the location of the value for the <see cref="T:System.Activities.InOutArgument`1" />.</summary>
      <returns>A reference to the location where the value of the argument is stored.</returns>
      <param name="context">The activity context that contains the location of the argument value.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})~System.Activities.InOutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InOutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.op_Implicit(System.Activities.Variable{`0})~System.Activities.InOutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InOutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Variable`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the argument using the specified value.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.InvalidWorkflowException">
      <summary>Handles exceptions that occur when a workflow is not valid. </summary>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor">
      <summary>Create a new instance of the <see cref="T:System.Activities.InvalidWorkflowException" /> class with default values.</summary>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Create a new instance of the <see cref="T:System.Activities.InvalidWorkflowException" /> class with the specified serialization information and streaming context.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the serialized object data about the exception being thrown.</param>
      <param name="context">The source and destination of the serialized stream.</param>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor(System.String)">
      <summary>Create a new instance of the <see cref="T:System.Activities.InvalidWorkflowException" /> class with the specified invalid workflow exception description.</summary>
      <param name="message">A string description of the exception.</param>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor(System.String,System.Exception)">
      <summary>Create a new instance of the <see cref="T:System.Activities.InvalidWorkflowException" /> class with the specified invalid workflow exception description and inner exception.</summary>
      <param name="message">A description of the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:System.Activities.InvokeCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Activities.WorkflowInvoker.InvokeCompleted" /> event.</summary>
    </member>
    <member name="P:System.Activities.InvokeCompletedEventArgs.Outputs">
      <summary>Gets an <see cref="T:System.Collections.Generic.IDictionary`2" /> of the root activity’s output argument values from the completed workflow.</summary>
      <returns>A dictionary of the root activity’s output argument values from the completed workflow.</returns>
    </member>
    <member name="T:System.Activities.IPropertyRegistrationCallback">
      <summary>Allows a workflow execution property to provide custom registration and un-registration logic.</summary>
    </member>
    <member name="M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)">
      <summary>Called when a workflow execution property is added through <see cref="Overload:System.Activities.ExecutionProperties.Add" />. This provides a validation hook for the property.</summary>
      <param name="context">A <see cref="T:System.Activities.RegistrationContext" /> that references the collection of execution properties to which the property is being registered.</param>
    </member>
    <member name="M:System.Activities.IPropertyRegistrationCallback.Unregister(System.Activities.RegistrationContext)">
      <summary>Called when a workflow execution property goes out of scope.</summary>
      <param name="context">A <see cref="T:System.Activities.RegistrationContext" /> that references the collection of execution properties to which the property belongs.</param>
    </member>
    <member name="T:System.Activities.Location">
      <summary>Provides a reference to a value used by an <see cref="T:System.Activities.Argument" /> or <see cref="T:System.Activities.Variable" />.</summary>
    </member>
    <member name="M:System.Activities.Location.#ctor">
      <summary>Called by derived class constructors to initialize the object.</summary>
    </member>
    <member name="P:System.Activities.Location.LocationType">
      <summary>When overridden in a derived class, gets the type of the referenced object.</summary>
      <returns>The type of the referenced object.</returns>
    </member>
    <member name="P:System.Activities.Location.Value">
      <summary>Gets or sets the value of the referenced object.</summary>
      <returns>The value of the object.</returns>
    </member>
    <member name="P:System.Activities.Location.ValueCore">
      <summary>When overridden in a derived class, gets or sets the value of the object referenced by the location.</summary>
      <returns>The value of the object.</returns>
    </member>
    <member name="T:System.Activities.Location`1">
      <summary>Provides a typed reference to a value used by an <see cref="T:System.Activities.Argument" /> or <see cref="T:System.Activities.Variable" />.</summary>
      <typeparam name="T">The type of the value.</typeparam>
    </member>
    <member name="M:System.Activities.Location`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Location`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Location`1.LocationType">
      <summary>Gets the type of the value referenced by the location.</summary>
      <returns>The type of the value.</returns>
    </member>
    <member name="M:System.Activities.Location`1.ToString">
      <summary>Returns the string representation of the value of the referenced object.</summary>
      <returns>The value of the referenced object.</returns>
    </member>
    <member name="P:System.Activities.Location`1.Value">
      <summary>Gets or sets the value of the referenced object.</summary>
      <returns>The value of the referenced object.</returns>
    </member>
    <member name="P:System.Activities.Location`1.ValueCore">
      <summary>Gets or sets the value of the referenced object.</summary>
      <returns>The value of the referenced object.</returns>
    </member>
    <member name="T:System.Activities.LocationReference">
      <summary>Provides a mechanism by which a <see cref="T:System.Activities.Location" /> can be resolved at runtime. </summary>
    </member>
    <member name="M:System.Activities.LocationReference.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.LocationReference" /> class.</summary>
    </member>
    <member name="M:System.Activities.LocationReference.GetLocation(System.Activities.ActivityContext)">
      <summary>When implemented in a derived class, extracts the location for a <see cref="T:System.Activities.LocationReference" /> from an <see cref="T:System.Activities.ActivityContext" /> object.</summary>
      <returns>The location of a variable, argument, or delegate argument value.</returns>
      <param name="context">The information about the activity execution environment, including values for variables, arguments, and delegate arguments associated with that environment.</param>
    </member>
    <member name="P:System.Activities.LocationReference.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.LocationReference" />.</returns>
    </member>
    <member name="P:System.Activities.LocationReference.NameCore">
      <summary>When implemented by a derived class, gets or sets the culturally localized version of the name of the <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>The localized version of the name of the <see cref="T:System.Activities.LocationReference" />.</returns>
    </member>
    <member name="P:System.Activities.LocationReference.Type">
      <summary>Gets or sets the type of the <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>The type of the <see cref="T:System.Activities.LocationReference" />.</returns>
    </member>
    <member name="P:System.Activities.LocationReference.TypeCore">
      <summary>When implemented in a derived class, gets or sets the culturally localized version of the type of the <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>The localized version of the type of the <see cref="T:System.Activities.LocationReference" />.</returns>
    </member>
    <member name="T:System.Activities.LocationReferenceEnvironment">
      <summary>Provides a representation of the environment of variables and arguments that is available to an activity at runtime.</summary>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.#ctor">
      <summary>Called by derived class constructors to initialize the object. </summary>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.GetLocationReferences">
      <summary>When overridden in a derived class, returns a collection of <see cref="T:System.Activities.LocationReference" /> objects in the current scope.</summary>
      <returns>A collection of location reference objects in the current scope.</returns>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.IsVisible(System.Activities.LocationReference)">
      <summary>When overridden in a derived class, determines whether the specified <see cref="T:System.Activities.LocationReference" /> is visible in the current scope.</summary>
      <returns>true if the <see cref="T:System.Activities.LocationReference" /> is visible in the current scope; otherwise, false.</returns>
      <param name="locationReference">The location to evaluate.</param>
    </member>
    <member name="P:System.Activities.LocationReferenceEnvironment.Parent">
      <summary>Gets or sets the containing <see cref="T:System.Activities.LocationReferenceEnvironment" />.</summary>
      <returns>The containing <see cref="T:System.Activities.LocationReferenceEnvironment" />.</returns>
    </member>
    <member name="P:System.Activities.LocationReferenceEnvironment.Root">
      <summary>Gets the activity that determines the scoping rules for this environment.</summary>
      <returns>The activity that determines the scoping rules for this environment.</returns>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.TryGetLocationReference(System.String,System.Activities.LocationReference@)">
      <summary>When overridden in a derived class, attempts to get the specified <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>true if a <see cref="T:System.Activities.LocationReference" /> with the specified name is present; otherwise, false.</returns>
      <param name="name">The name of the <see cref="T:System.Activities.LocationReference" /> to retrieve.</param>
      <param name="result">When this method returns true, <paramref name="result" /> contains the <see cref="T:System.Activities.LocationReference" /> with the specified name; otherwise, null. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Activities.NativeActivity">
      <summary>Abstract base class for custom activities that implement execution logic using the <see cref="M:System.Activities.NativeActivity.Execute(System.Activities.ActivityExecutionContext)" /> method, which has full access to the runtime’s features.</summary>
    </member>
    <member name="M:System.Activities.NativeActivity.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)">
      <summary>When implemented in a derived class, takes actions in response to the activity being aborted.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="M:System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Not implemented. Use the <see cref="M:System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)" /> method instead.</summary>
      <param name="metadata">Not implemented.</param>
    </member>
    <member name="M:System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="M:System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)">
      <summary>When implemented in a derived class, runs logic to cause graceful early completion of the activity.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="P:System.Activities.NativeActivity.CanInduceIdle">
      <summary>Gets or sets a value that indicates whether the activity can cause the workflow to become idle.</summary>
      <returns>true if the activity can cause the workflow to become idle. This value is false by default.</returns>
    </member>
    <member name="M:System.Activities.NativeActivity.Execute(System.Activities.NativeActivityContext)">
      <summary>When implemented in a derived class, runs the activity’s execution logic.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="P:System.Activities.NativeActivity.Implementation">
      <summary>The execution logic of the activity.</summary>
      <returns>The execution logic.</returns>
    </member>
    <member name="T:System.Activities.NativeActivity`1">
      <summary>Abstract base class for custom activities that implement execution logic using the <see cref="M:System.Activities.NativeActivity`1.Execute(System.Activities.ActivityExecutionContext)" /> method, that has full access to the runtime’s features.</summary>
      <typeparam name="TResult">The result returned by the activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivity`1.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.NativeActivity`1.Abort(System.Activities.NativeActivityAbortContext)">
      <summary>When implemented in a derived class, takes actions in response to the activity being aborted.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Not implemented. Use <see cref="M:System.Activities.NativeActivity`1.CacheMetadata(System.Activities.NativeActivityMetadata)" /> instead.</summary>
      <param name="metadata">Not implemented.</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.CacheMetadata(System.Activities.NativeActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.Cancel(System.Activities.NativeActivityContext)">
      <summary>When implemented in a derived class, runs logic to cause graceful early completion of the activity.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="P:System.Activities.NativeActivity`1.CanInduceIdle">
      <summary>Gets or sets a value that indicates whether the activity can cause the workflow to become idle.</summary>
      <returns>true if the activity can cause the workflow to become idle, otherwise false. This value is false by default.</returns>
    </member>
    <member name="M:System.Activities.NativeActivity`1.Execute(System.Activities.NativeActivityContext)">
      <summary>When implemented in a derived class, runs the activity’s execution logic.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="P:System.Activities.NativeActivity`1.Implementation">
      <summary>The execution logic of the activity.</summary>
      <returns>The execution logic.</returns>
    </member>
    <member name="T:System.Activities.NativeActivityAbortContext">
      <summary>Represents the execution environment of an activity that is being aborted.</summary>
    </member>
    <member name="P:System.Activities.NativeActivityAbortContext.Reason">
      <summary>Gets an <see cref="T:System.Exception" /> that contains the reason for the activity being aborted.</summary>
      <returns>An exception that contains the reason for the activity being aborted.</returns>
    </member>
    <member name="T:System.Activities.NativeActivityContext">
      <summary>Provides the environmental execution context for a workflow custom activity. </summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.Abort">
      <summary>Aborts the current workflow instance during runtime.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.Abort(System.Exception)">
      <summary>Aborts the current workflow instance during runtime for the specified reason.</summary>
      <param name="reason">The error that caused the workflow to abort.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.AbortChildInstance(System.Activities.ActivityInstance)">
      <summary>Aborts the specified instance of a <see cref="T:System.Activities.NativeActivity" /> child activity.</summary>
      <param name="activity">A child of the currently executing <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.AbortChildInstance(System.Activities.ActivityInstance,System.Exception)">
      <summary>Aborts the specified instance of a <see cref="T:System.Activities.NativeActivity" /> child activity for the specified reason.</summary>
      <param name="activity">A child of the currently executing <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="reason">The error that caused the child activity to abort.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CancelChild(System.Activities.ActivityInstance)">
      <summary>Causes an early completion of the specified instance of a <see cref="T:System.Activities.NativeActivity" /> child activity.</summary>
      <param name="activityInstance">A child of the currently executing <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CancelChildren">
      <summary>Causes an early completion of all the child activities of an executing <see cref="T:System.Activities.NativeActivity" />.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark">
      <summary>Creates a point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed.</summary>
      <returns>A bookmark.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.Activities.BookmarkCallback)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed and schedules the specified method to execute when notification of the resume operation completes.</summary>
      <returns>The callback method.</returns>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.Activities.BookmarkCallback,System.Activities.BookmarkOptions)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed, with the specified method to execute when notification of the resume operation completes and with the specified option that governs how the bookmark is used during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</summary>
      <returns>A bookmark that includes the callback method and the bookmark execution option.</returns>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="options">An enumerated setting that governs how the bookmark operates in relation to other threads during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String)">
      <summary>Creates the point, with the specified name, at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed.</summary>
      <returns>A bookmark that includes the name of the bookmark.</returns>
      <param name="name">The name of the bookmark.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed, with the specified name and with the specified method to execute when notification of the resume operation completes.</summary>
      <returns>A bookmark that includes the name of the bookmark and the callback method.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkOptions)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed with the specified name, the specified method to execute when notification of the resume operation completes, and the specified option that governs how the bookmark is used during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</summary>
      <returns>A bookmark that includes the name of the bookmark, the callback method, and the bookmark execution option.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="options">The bookmark options that govern how the bookmark is used during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkScope)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed with the specified name, the specified method to execute when notification of the resume operation completes, and the specified scope of the bookmark.</summary>
      <returns>A bookmark that includes the name of the bookmark, the callback method, and the scope of the bookmark.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="scope">An identifier applied to a group of bookmarks that operate under the same protocol during a workflow runtime.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkScope,System.Activities.BookmarkOptions)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed with the specified name, the specified method to execute when notification of the resume operation completes, the specified scope of the bookmark, and the specified option that governs how the bookmark is used during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</summary>
      <returns>A bookmark that includes the name of the bookmark, the callback method, the scope of the bookmark, and the bookmark execution option.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="scope">An identifier applied to a group of bookmarks that operate under the same protocol during a workflow runtime.</param>
      <param name="options">The bookmark options that governs how the bookmark is used during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="P:System.Activities.NativeActivityContext.DefaultBookmarkScope">
      <summary>Gets the bookmark scope associated with the root of the workflow.</summary>
      <returns>A unique GUID identifier.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.GetChildren">
      <summary>Returns a collection of the child activities for the current <see cref="T:System.Activities.NativeActivity" />.</summary>
      <returns>A generic read-only collection of child <see cref="T:System.Activities.NativeActivity" /> objects.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.GetValue(System.Activities.Variable)">
      <summary>Returns the value of the specified variable in the current <see cref="T:System.Activities.NativeActivity" /> instance.</summary>
      <returns>The value of the specified variable.</returns>
      <param name="variable">The variable whose value is being retrieved during execution of the current <see cref="T:System.Activities.NativeActivity" /> instance.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.GetValue``1(System.Activities.Variable{``0})">
      <summary>Returns the value of the specified generic variable in the current <see cref="T:System.Activities.NativeActivity" /> instance.</summary>
      <returns>The value of the specified variable.</returns>
      <param name="variable">The generic variable whose value is being retrieved during execution of the current <see cref="T:System.Activities.NativeActivity" /> instance.</param>
      <typeparam name="T">The type of the variable whose value is being retrieved.</typeparam>
    </member>
    <member name="P:System.Activities.NativeActivityContext.IsCancellationRequested">
      <summary>Gets or sets a value that indicates whether the currently executing <see cref="T:System.Activities.NativeActivity" /> instance is to be canceled.</summary>
      <returns>true if the currently executing <see cref="T:System.Activities.NativeActivity" /> instance is to be canceled; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.MarkCanceled">
      <summary>Designates the currently executing <see cref="T:System.Activities.NativeActivity" /> instance as canceled.</summary>
    </member>
    <member name="P:System.Activities.NativeActivityContext.Properties">
      <summary>Gets an object that handles properties for execution of the current <see cref="T:System.Activities.NativeActivityContext" />.</summary>
      <returns>An object that handles execution properties.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveAllBookmarks">
      <summary>Removes all the bookmarks associated with the currently executing <see cref="T:System.Activities.NativeActivity" /> instance.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveBookmark(System.Activities.Bookmark)">
      <summary>Removes the specified bookmark from the currently executing <see cref="T:System.Activities.NativeActivity" /> instance.</summary>
      <returns>true if the bookmark was removed; otherwise, false.</returns>
      <param name="bookmark">A point at which a <see cref="T:System.Activities.NativeActivity" /> instance can passively wait to be resumed.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveBookmark(System.String)">
      <summary>Removes the bookmark with the specified name.</summary>
      <returns>true if the bookmark was removed; otherwise, false.</returns>
      <param name="name">The name of the bookmark.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveBookmark(System.String,System.Activities.BookmarkScope)">
      <summary>Removes the bookmark with the specified name and the specified bookmark scope.</summary>
      <returns>true if the bookmark was removed; otherwise, false.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="scope">The unique GUID identifier for a group of <see cref="T:System.Activities.Bookmark" /> objects that are categorized as operating under the same protocol.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ResumeBookmark(System.Activities.Bookmark,System.Object)">
      <summary>Resumes <see cref="T:System.Activities.NativeActivity" /> execution at the specified bookmark.</summary>
      <returns>The outcome of the attempt to resume <see cref="T:System.Activities.NativeActivity" /> operation at the point of the bookmark.</returns>
      <param name="bookmark">A point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed.</param>
      <param name="value">The information related to the resumption of a bookmark.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction(System.Activities.ActivityAction,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction" /> that has no parameters, and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction" />.</summary>
      <returns>A new instance of an activity action.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``1(System.Activities.ActivityAction{``0},``0,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`1" /> that has one parameter for an in argument and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`1" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument">Data sent into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`1" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`1" />.</param>
      <typeparam name="T">An argument that carries data into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``10(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`10" /> that has ten parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`10" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`10" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``11(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`11" /> that has eleven parameters for in arguments, and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`11" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`11" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``12(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`12" /> that has twelve parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`12" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`12" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``13(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`13" /> that has thirteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`13" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`13" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``14(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`14" /> that has fourteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`14" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`14" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``15(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`15" /> that has fifteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`15" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`15" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The  data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">Generic parameter that represents data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``16(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`16" /> that has sixteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="argument16">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`16" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`16" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">The data that is carried into an activity.</typeparam>
      <typeparam name="T16">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``2(System.Activities.ActivityAction{``0,``1},``0,``1,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`2" /> that has two parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`2" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`2" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`2" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``3(System.Activities.ActivityAction{``0,``1,``2},``0,``1,``2,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`3" /> that has three parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`3" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`3" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`3" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``4(System.Activities.ActivityAction{``0,``1,``2,``3},``0,``1,``2,``3,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`4" /> that has four parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`4" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`4" />.</param>
      <typeparam name="T1">the data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``5(System.Activities.ActivityAction{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`5" /> that has five parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`5" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`5" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``6(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`6" /> that has six parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`6" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`6" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``7(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`7" /> that has seven parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`7" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`7" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``8(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`8" /> that has eight parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`8" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`8" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``9(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`9" /> that has nine parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`9" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`9" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity)">
      <summary>Schedules the specified <see cref="T:System.Activities.NativeActivity" /> child activity for execution.</summary>
      <returns>An activity instance.</returns>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity,System.Activities.CompletionCallback)">
      <summary>Schedules the specified <see cref="T:System.Activities.NativeActivity" /> child activity for execution using the specified completion callback location where the parent process resumes upon completion of the activity.</summary>
      <returns>An activity instance.</returns>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules the specified <see cref="T:System.Activities.NativeActivity" /> child activity for execution and bookmarks the specified callback locations where the parent process resumes upon completion of the child activity.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="onCompleted">A bookmark that indicates where the <see cref="T:System.Activities.NativeActivity" /> execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction" />.</param>
      <param name="onFaulted">A bookmark that indicates where the <see cref="T:System.Activities.NativeActivity" /> execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity,System.Activities.FaultCallback)">
      <summary>Schedules the specified <see cref="T:System.Activities.NativeActivity" /> child activity for execution using the specified fault callback location where the parent process resumes when the activity enters the faulted state.</summary>
      <returns>An activity instance.</returns>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity``1(System.Activities.Activity{``0},System.Activities.CompletionCallback{``0},System.Activities.FaultCallback)">
      <summary>Schedules the specified <see cref="T:System.Activities.NativeActivity" /> child activity for execution, with one parameter for an in argument, and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`1" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="onCompleted">A bookmark that indicates where the <see cref="T:System.Activities.NativeActivity" /> execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`1" />.</param>
      <param name="onFaulted">A bookmark that indicates where the <see cref="T:System.Activities.NativeActivity" /> execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction" />.</param>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleDelegate(System.Activities.ActivityDelegate,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.DelegateCompletionCallback,System.Activities.FaultCallback)">
      <summary>Pushes the callback method for an activity into the work item pool. </summary>
      <returns>An instance of an activity.</returns>
      <param name="activityDelegate">The callback method to which an activity returns when the specified activity action completes.</param>
      <param name="inputParameters">A dictionary list of activity argument names and values.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``1(System.Activities.ActivityFunc{``0},System.Activities.CompletionCallback{``0},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`1" /> with one parameter that holds a return value and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`1" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`1" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`1" />.</param>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``10(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Activities.CompletionCallback{``9},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`10" /> that has ten parameters for a return value and in arguments and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`10" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`10" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``11(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Activities.CompletionCallback{``10},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`11" /> that has eleven parameters for a return value and in arguments, and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`11" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`11" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``12(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Activities.CompletionCallback{``11},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`12" /> that has twelve parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`12" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`12" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``13(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Activities.CompletionCallback{``12},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`13" /> that has thirteen parameters for a return value and in arguments and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`13" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`13" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``14(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Activities.CompletionCallback{``13},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`14" /> that has fourteen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`14" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`14" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``15(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Activities.CompletionCallback{``14},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`15" /> that has fifteen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`15" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`15" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``16(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Activities.CompletionCallback{``15},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`16" /> that has sixteen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`16" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`16" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``17(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Activities.CompletionCallback{``16},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`17" /> that has seventeen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity, and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="argument16">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`17" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`17" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">The data that is carried into an activity.</typeparam>
      <typeparam name="T16">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``2(System.Activities.ActivityFunc{``0,``1},``0,System.Activities.CompletionCallback{``1},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`2" /> that has two parameters for a return value and an in argument and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`2" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`2" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`2" />.</param>
      <typeparam name="T">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``3(System.Activities.ActivityFunc{``0,``1,``2},``0,``1,System.Activities.CompletionCallback{``2},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`3" /> that has three parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`3" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`3" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`3" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``4(System.Activities.ActivityFunc{``0,``1,``2,``3},``0,``1,``2,System.Activities.CompletionCallback{``3},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`4" /> that has four parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`4" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`4" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``5(System.Activities.ActivityFunc{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Activities.CompletionCallback{``4},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`5" /> that has five parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`5" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`5" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``6(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.Activities.CompletionCallback{``5},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`6" /> that has six parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`6" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`6" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``7(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,System.Activities.CompletionCallback{``6},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`7" /> that has seven parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`7" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`7" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``8(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,System.Activities.CompletionCallback{``7},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`8" /> that has eight parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`8" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`8" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``9(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,System.Activities.CompletionCallback{``8},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`9" /> that has nine parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`9" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`9" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.SetValue(System.Activities.Variable,System.Object)">
      <summary>Assigns the specified value object to the specified variable object.</summary>
      <param name="variable">A variable object without a specified type that can be assigned a value object.</param>
      <param name="value">An object without a specified type that can be assigned to a variable object.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.SetValue``1(System.Activities.Variable{``0},``0)">
      <summary>Assigns the specified generic value object to the specified generic variable object.</summary>
      <param name="variable">A variable object with a specified type that can be assigned a value object.</param>
      <param name="value">An object with a specified type that can be assigned to a variable object.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.Track(System.Activities.Tracking.CustomTrackingRecord)">
      <summary>Adds an activity tracking record to the current workflow instance.</summary>
      <param name="record">The data sent to tracking participants when tracked events occur.</param>
    </member>
    <member name="T:System.Activities.NativeActivityFaultContext">
      <summary>Represents the execution environment of a <see cref="T:System.Activities.NativeActivity" /> when it is handling an exception thrown by a child activity.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityFaultContext.HandleFault">
      <summary>Records that the exception is being handled.</summary>
    </member>
    <member name="T:System.Activities.NativeActivityMetadata">
      <summary>Represents the set of arguments, child activities, variables, and delegates that a configured <see cref="T:System.Activities.NativeActivity" /> introduces to the execution environment.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddArgument(System.Activities.RuntimeArgument)">
      <summary>Adds an argument to the collection of arguments of an activity.</summary>
      <param name="argument">The argument to add to the collection.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddChild(System.Activities.Activity)">
      <summary>Adds the specified activity to the metadata’s list of child activities.</summary>
      <param name="child">The activity to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddDefaultExtensionProvider``1(System.Func{``0})">
      <summary>Adds the specified extension provider to the collection of default extension providers for the activity.</summary>
      <param name="extensionProvider">The function that returns the extension.</param>
      <typeparam name="T">The type of the extension provider.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddDelegate(System.Activities.ActivityDelegate)">
      <summary>Adds the specified delegate to the metadata’s list of delegates.</summary>
      <param name="activityDelegate">The delegate to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImplementationChild(System.Activities.Activity)">
      <summary>Adds the specified activity to the metadata’s list of implementation activities.</summary>
      <param name="implementationChild">The activity to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImplementationDelegate(System.Activities.ActivityDelegate)">
      <summary>Adds the specified delegate to the metadata’s list of implementation delegates.</summary>
      <param name="implementationDelegate">The delegate to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImplementationVariable(System.Activities.Variable)">
      <summary>Adds the specified variable to the metadata’s collection of implementation variables.</summary>
      <param name="implementationVariable">The variable to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImportedChild(System.Activities.Activity)">
      <summary>Adds the specified activity to the metadata’s list of imported child activities.</summary>
      <param name="importedChild">The activity to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate)">
      <summary>Adds the specified delegate to the metadata’s list of imported delegates.</summary>
      <param name="importedDelegate">The delegate to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddValidationError(System.Activities.Validation.ValidationError)">
      <summary>Adds the specified validation error to the metadata’s collection of validation errors.</summary>
      <param name="validationError">The validation error to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddValidationError(System.String)">
      <summary>Adds a validation error to the metadata’s collection of validation errors using the specified description.</summary>
      <param name="validationErrorMessage">A message that describes the validation error.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddVariable(System.Activities.Variable)">
      <summary>Adds the specified variable to the metadata’s collection of variables.</summary>
      <param name="variable">The variable to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
      <summary>Binds the specified <see cref="T:System.Activities.Argument" /> to the specified <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <param name="binding">The <see cref="T:System.Activities.Argument" /> to bind.</param>
      <param name="argument">The <see cref="T:System.Activities.RuntimeArgument" /> to bind.</param>
    </member>
    <member name="P:System.Activities.NativeActivityMetadata.Environment">
      <summary>Gets the activity’s <see cref="T:System.Activities.LocationReferenceEnvironment" /> of arguments, variables, delegate arguments, or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>The activity’s location reference environment of arguments, variables, delegate arguments, or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to this metadata instance.</summary>
      <returns>true if the specified object is equal to this metadata instance; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetArgumentsWithReflection">
      <summary>Returns a collection of arguments obtained by using reflection.</summary>
      <returns>A collection of arguments.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetChildrenWithReflection">
      <summary>Returns a collection of child activities using reflection.</summary>
      <returns>A collection of child activities.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetDelegatesWithReflection">
      <summary>Returns a collection of delegates using reflection.</summary>
      <returns>A collection of delegates.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetHashCode">
      <summary>Returns a unique identifier for this metadata instance.</summary>
      <returns>An integer that uniquely identifies this metadata instance.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetVariablesWithReflection">
      <summary>Returns a collection of variables using reflection.</summary>
      <returns>A collection of variables.</returns>
    </member>
    <member name="P:System.Activities.NativeActivityMetadata.HasViolations">
      <summary>Gets a value that indicates whether there are any validation errors in the metadata.</summary>
      <returns>true if validation errors are present; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.op_Equality(System.Activities.NativeActivityMetadata,System.Activities.NativeActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are equal.</summary>
      <returns>true if the two items are equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.op_Inequality(System.Activities.NativeActivityMetadata,System.Activities.NativeActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are not equal.</summary>
      <returns>true if the two items are not equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.RequireExtension``1">
      <summary>Specifies that the activity requires an extension of the specified generic type at runtime.</summary>
      <typeparam name="T">The type of the extension.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.RequireExtension(System.Type)">
      <summary>Specifies that the activity requires an extension of the specified type at runtime.</summary>
      <param name="extensionType">The type of the extension.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetArgumentsCollection(System.Collections.ObjectModel.Collection{System.Activities.RuntimeArgument})">
      <summary>Adds the specified collection of arguments to the activity’s arguments.</summary>
      <param name="arguments">The arguments to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>Adds the specified collection as child activities of the activity.</summary>
      <param name="children">The activities to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>Adds the specified collection as delegates of the activity.</summary>
      <param name="delegates">The delegates to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImplementationChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>Adds the specified collection as implementation child activities of the activity.</summary>
      <param name="implementationChildren">The activities to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImplementationDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>Adds the specified collection as implementation delegates of the activity.</summary>
      <param name="implementationDelegates">The delegates to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImplementationVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
      <summary>Adds the specified collection as implementation variables of the activity.</summary>
      <param name="implementationVariables">The delegates to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImportedChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>Adds the specified collection as imported child activities of the activity.</summary>
      <param name="importedChildren">The activities to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImportedDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>Adds the specified collection as imported delegates of the activity.</summary>
      <param name="importedDelegates">The delegates to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetValidationErrorsCollection(System.Collections.ObjectModel.Collection{System.Activities.Validation.ValidationError})">
      <summary>Adds the specified collection of validation errors to the metadata’s collection of validation errors.</summary>
      <param name="validationErrors">The validation errors to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
      <summary>Adds the specified collection of variables to the activity’s variables.</summary>
      <param name="variables">The variables to add.</param>
    </member>
    <member name="T:System.Activities.NativeActivityTransactionContext">
      <summary>The execution context for a <see cref="T:System.Activities.NativeActivity" /> that needs to provide the runtime with a transaction.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityTransactionContext.SetRuntimeTransaction(System.Transactions.Transaction)">
      <summary>Provides the runtime with the specified transaction.</summary>
      <param name="transaction">The transaction.</param>
    </member>
    <member name="T:System.Activities.NoPersistHandle">
      <summary>Manages the lifetime of a no-persist block.</summary>
    </member>
    <member name="M:System.Activities.NoPersistHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.NoPersistHandle" /> class.</summary>
    </member>
    <member name="M:System.Activities.NoPersistHandle.Enter(System.Activities.NativeActivityContext)">
      <summary>Marks the beginning of the no-persist block.</summary>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.NoPersistHandle.Exit(System.Activities.NativeActivityContext)">
      <summary>Marks the end of the no-persist block.</summary>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="T:System.Activities.OutArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data out of an activity.</summary>
    </member>
    <member name="M:System.Activities.OutArgument.CreateReference(System.Activities.InOutArgument,System.String)">
      <summary>Creates a new <see cref="T:System.Activities.OutArgument" /> that references the specified target <see cref="T:System.Activities.InOutArgument" /> using the specified referenced argument name.</summary>
      <returns>A new out argument that references the specified target <see cref="T:System.Activities.InOutArgument" />.</returns>
      <param name="argumentToReference">The target in/out argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument.CreateReference(System.Activities.OutArgument,System.String)">
      <summary>Creates a new <see cref="T:System.Activities.OutArgument" /> that references the specified target <see cref="T:System.Activities.OutArgument" /> using the specified referenced argument name.</summary>
      <returns>A new out argument that references the specified target <see cref="T:System.Activities.OutArgument" />.</returns>
      <param name="argumentToReference">The target out argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="T:System.Activities.OutArgument`1">
      <summary>A binding terminal that represents the flow of data out of an activity.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.OutArgument`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor">
      <summary>Initialize a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified expression.</summary>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="P:System.Activities.OutArgument`1.Expression">
      <summary>Gets a <see cref="T:System.Activities.Activity`1" /> that represents the value of this <see cref="T:System.Activities.OutArgument`1" />.</summary>
      <returns>A workflow element that represents the value of the argument.</returns>
    </member>
    <member name="M:System.Activities.OutArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The new argument.</returns>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument,</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.FromVariable(System.Activities.Variable)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.OutArgument`1" /> using the specified activity context.</summary>
      <returns>The value of the argument.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.GetLocation(System.Activities.ActivityContext)">
      <summary>Gets the location of the value for the <see cref="T:System.Activities.OutArgument`1" />.</summary>
      <returns>A reference to the location where the value of the argument is stored.</returns>
      <param name="context">The activity context that contains the value of the variable.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})~System.Activities.OutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument,</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.DelegateArgument)~System.Activities.OutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The new argument.</returns>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Variable)~System.Activities.OutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the <see cref="T:System.Activities.OutArgument`1" /> using the specified activity context.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.OverloadGroupAttribute">
      <summary>Provides a method for indicating which combinations of arguments are valid in an activity.</summary>
    </member>
    <member name="M:System.Activities.OverloadGroupAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OverloadGroupAttribute" /> class.</summary>
    </member>
    <member name="M:System.Activities.OverloadGroupAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OverloadGroupAttribute" /> class.</summary>
      <param name="groupName">The name of the group of arguments.</param>
    </member>
    <member name="P:System.Activities.OverloadGroupAttribute.GroupName">
      <summary>Gets the name of the <see cref="T:System.Activities.OverloadGroupAttribute" />.</summary>
      <returns>The name of the group of related arguments.</returns>
    </member>
    <member name="P:System.Activities.OverloadGroupAttribute.TypeId">
      <summary>Gets a unique identifier for this attribute.</summary>
      <returns>A unique identifier for this attribute.</returns>
    </member>
    <member name="T:System.Activities.PersistableIdleAction">
      <summary>Specifies the action that occurs when a workflow becomes idle when persistence is allowed.</summary>
    </member>
    <member name="F:System.Activities.PersistableIdleAction.None">
      <summary>Specifies that no action is taken.</summary>
    </member>
    <member name="F:System.Activities.PersistableIdleAction.Unload">
      <summary>Specifies that the <see cref="T:System.Activities.WorkflowApplication" /> should persist and unload the workflow.</summary>
    </member>
    <member name="F:System.Activities.PersistableIdleAction.Persist">
      <summary>Specifies that the <see cref="T:System.Activities.WorkflowApplication" /> should persist the workflow.</summary>
    </member>
    <member name="T:System.Activities.RegistrationContext">
      <summary>Provides access to the current collection of workflow execution properties.</summary>
    </member>
    <member name="M:System.Activities.RegistrationContext.FindProperty(System.String)">
      <summary>Returns a workflow execution property with the specified name.</summary>
      <returns>The workflow execution property.</returns>
      <param name="name">The name of the workflow execution property.</param>
    </member>
    <member name="T:System.Activities.RequiredArgumentAttribute">
      <summary>Application element on which it is valid to apply an argument.0</summary>
    </member>
    <member name="M:System.Activities.RequiredArgumentAttribute.#ctor">
      <summary>Creates a new  instance of the <see cref="T:System.Activities.RequiredArgumentAttribute" /> class.</summary>
    </member>
    <member name="P:System.Activities.RequiredArgumentAttribute.TypeId">
      <summary>When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute" />.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Activities.RuntimeArgument">
      <summary>Describes the characteristics of an argument of an activity to the runtime.</summary>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument" /> class using a name, data type, and argument direction.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="argumentType">The type of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="direction">The direction of data flow through an argument.</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument" /> class using a name, data type, argument direction, and a value that indicates whether the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="argumentType">The data type of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="direction">The direction of data flow through an argument.</param>
      <param name="isRequired">true to indicate that the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value; otherwise false.</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Boolean,System.Collections.Generic.List{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument" /> class with a name, data type, argument direction, whether the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value, and a list of overload group names.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="argumentType">The data type of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="direction">The direction of data flow through an argument.</param>
      <param name="isRequired">true to indicate that the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value; otherwise false.</param>
      <param name="overloadGroupNames">The names of the overload groups that apply to this <see cref="T:System.Activities.RuntimeArgument" />.</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Collections.Generic.List{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument" /> class using a name, data type, argument direction, and a list of overload group names.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="argumentType">The data type of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="direction">The direction of data flow through an argument.</param>
      <param name="overloadGroupNames">The overload groups that apply to this <see cref="T:System.Activities.RuntimeArgument" />.</param>
    </member>
    <member name="P:System.Activities.RuntimeArgument.Direction">
      <summary>Gets the direction of the data flow through this <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <returns>The direction of data flow through an argument.</returns>
    </member>
    <member name="M:System.Activities.RuntimeArgument.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.RuntimeArgument" /> using the specified activity context.</summary>
      <returns>The value of the <see cref="T:System.Activities.RuntimeArgument" />.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.Get``1(System.Activities.ActivityContext)">
      <summary>Gets the strongly-typed value of the <see cref="T:System.Activities.RuntimeArgument" /> using the specified activity context.</summary>
      <returns>The value of the <see cref="T:System.Activities.RuntimeArgument" />.</returns>
      <param name="context">The current activity context.</param>
      <typeparam name="T">The return value type.</typeparam>
    </member>
    <member name="M:System.Activities.RuntimeArgument.GetLocation(System.Activities.ActivityContext)">
      <summary>Returns the <see cref="T:System.Activities.Location" /> for this <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <returns>The location of the <see cref="T:System.Activities.RuntimeArgument" />.</returns>
      <param name="context">The argument location.</param>
    </member>
    <member name="P:System.Activities.RuntimeArgument.IsRequired">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value.</summary>
      <returns>true if the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.RuntimeArgument.OverloadGroupNames">
      <summary>Gets a list of the overload groups that this <see cref="T:System.Activities.RuntimeArgument" /> belongs to.</summary>
      <returns>A list of overload group names.</returns>
    </member>
    <member name="M:System.Activities.RuntimeArgument.Set(System.Activities.ActivityContext,System.Object)">
      <summary>Sets the value of the <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value for the <see cref="T:System.Activities.RuntimeArgument" />.</param>
    </member>
    <member name="T:System.Activities.RuntimeDelegateArgument">
      <summary>Describes the characteristics of a <see cref="T:System.Activities.DelegateArgument" /> to the runtime.</summary>
    </member>
    <member name="M:System.Activities.RuntimeDelegateArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeDelegateArgument" /> class using the specified name, data type, argument direction, and <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</param>
      <param name="type">The data type of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</param>
      <param name="direction">One of the enumeration values that specifies the direction of data flow through an argument.</param>
      <param name="boundArgument">The delegate argument that is represented by this <see cref="T:System.Activities.RuntimeDelegateArgument" />.</param>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.BoundArgument">
      <summary>Gets the <see cref="T:System.Activities.DelegateArgument" /> that is represented by this <see cref="T:System.Activities.RuntimeDelegateArgument" />.</summary>
      <returns>The bound argument represented by this <see cref="T:System.Activities.RuntimeDelegateArgument" />.</returns>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.Direction">
      <summary>Gets the direction of data flow through the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</summary>
      <returns>One of the enumeration values that specifies the direction of data flow through an argument.</returns>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.Name">
      <summary>Gets the name of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</returns>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.Type">
      <summary>Gets the data type of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</summary>
      <returns>The data type of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</returns>
    </member>
    <member name="T:System.Activities.RuntimeTransactionHandle">
      <summary>Provides access to the run-time transaction in a workflow instance.</summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeTransactionHandle" /> class.</summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.#ctor(System.Transactions.Transaction)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeTransactionHandle" /> class using the specified root transaction.</summary>
      <param name="rootTransaction">The root transaction.</param>
    </member>
    <member name="P:System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure">
      <summary>Gets or sets whether the workflow instance should be aborted if the transaction fails.</summary>
      <returns>true if the workflow instance should be aborted if the transaction fails; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext)">
      <summary>Completes the current run-time transaction.</summary>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext,System.Activities.BookmarkCallback)">
      <summary>Completes the current run-time transaction and schedules the bookmark callback when the transaction is complete.</summary>
      <param name="context">The current execution environment.</param>
      <param name="callback">The bookmark callback to be invoked when the transaction completes.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.AsyncCodeActivityContext)">
      <summary>Returns a reference to the current run-time transaction.</summary>
      <returns>The current transaction.</returns>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.CodeActivityContext)">
      <summary>Returns a reference to the current run-time transaction.</summary>
      <returns>The current transaction.</returns>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.NativeActivityContext)">
      <summary>Returns a reference to the current run-time transaction.</summary>
      <returns>The current run-time transaction.</returns>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.RequestTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)">
      <summary>Initiates the creation of a <see cref="T:System.Activities.NativeActivityTransactionContext" /> for use with a new transaction.</summary>
      <param name="context">The current execution environment.</param>
      <param name="callback">The method to be called when the <see cref="T:System.Activities.NativeActivityTransactionContext" /> is created.</param>
      <param name="state">An optional user-provided state that contains information about the request.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.RequireTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)">
      <summary>Initiates the creation of a <see cref="T:System.Activities.NativeActivityTransactionContext" /> for use with an existing transaction.</summary>
      <param name="context">The current execution environment.</param>
      <param name="callback">The method to be called when the <see cref="T:System.Activities.NativeActivityTransactionContext" /> is created.</param>
      <param name="state">An optional user-provided state that contains information about the request.</param>
    </member>
    <member name="P:System.Activities.RuntimeTransactionHandle.SuppressTransaction">
      <summary>Gets or sets a value that indicates whether this run-time transaction is suppressed.</summary>
      <returns>true if the run-time transaction is suppressed; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#CleanupWorkflowThread">
      <summary>For a description of this member, see <see cref="M:System.Activities.IExecutionProperty.CleanupWorkflowThread" />.</summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#SetupWorkflowThread">
      <summary>For a description of this member, see <see cref="M:System.Activities.IExecutionProperty.SetupWorkflowThread" />.</summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Register(System.Activities.RegistrationContext)">
      <summary>For a description of this member, see <see cref="M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)" />.</summary>
      <param name="context">For a description of this parameter, see <see cref="M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)" />.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Unregister(System.Activities.RegistrationContext)">
      <summary>For a description of this member, see <see cref="M:System.Activities.IPropertyRegistrationCallback.UnRegister(System.Activities.RegistrationContext)" />.</summary>
      <param name="context">For a description of this parameter, see <see cref="M:System.Activities.IPropertyRegistrationCallback.UnRegister(System.Activities.RegistrationContext)" />.</param>
    </member>
    <member name="T:System.Activities.UnhandledExceptionAction">
      <summary>Specifies the action that occurs when an exception escapes the root of a workflow.</summary>
    </member>
    <member name="F:System.Activities.UnhandledExceptionAction.Abort">
      <summary>Specifies that the <see cref="T:System.Activities.WorkflowInstance" /> should abort the workflow.</summary>
    </member>
    <member name="F:System.Activities.UnhandledExceptionAction.Cancel">
      <summary>Specifies that the <see cref="T:System.Activities.WorkflowInstance" /> should schedule the cancellation of the root activity and resume execution. </summary>
    </member>
    <member name="F:System.Activities.UnhandledExceptionAction.Terminate">
      <summary>Specifies that the <see cref="T:System.Activities.WorkflowInstance" /> should schedule termination of the root activity and resume execution.</summary>
    </member>
    <member name="T:System.Activities.ValidationException">
      <summary>The exception that is thrown when a workflow or activity is in an invalid state.</summary>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ValidationException" /> class using default values.</summary>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ValidationException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ValidationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ValidationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Activities.Variable">
      <summary>The abstract base class from which the workflow data member support class <see cref="T:System.Activities.Variable`1" /> derives.</summary>
    </member>
    <member name="M:System.Activities.Variable.Create(System.String,System.Type,System.Activities.VariableModifiers)">
      <summary>Initializes and returns new instance of the <see cref="T:System.Activities.Variable" /> class.</summary>
      <returns>The new variable.</returns>
      <param name="name">The name for the <see cref="T:System.Activities.Variable" />.</param>
      <param name="type">The type for the <see cref="T:System.Activities.Variable" />.</param>
      <param name="modifiers">The configuration options for the <see cref="T:System.Activities.Variable" />.</param>
    </member>
    <member name="P:System.Activities.Variable.Default">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityWithResult" /> that represents the default value for this <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The default value for this <see cref="T:System.Activities.Variable" />.</returns>
    </member>
    <member name="M:System.Activities.Variable.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.Variable" /> using the specified <see cref="T:System.Activities.ActivityContext" />.</summary>
      <returns>The value of the <see cref="T:System.Activities.Variable" />.</returns>
      <param name="context">The current execution context.</param>
    </member>
    <member name="M:System.Activities.Variable.GetLocation(System.Activities.ActivityContext)">
      <summary>Gets the <see cref="T:System.Activities.Location" /> for this <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The location for this <see cref="T:System.Activities.Variable" />.</returns>
      <param name="context">The activity context of the executing activity.</param>
    </member>
    <member name="P:System.Activities.Variable.Modifiers">
      <summary>Gets or sets the <see cref="T:System.Activities.VariableModifiers" /> value for this <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The variable modifier value for this <see cref="T:System.Activities.Variable" />.</returns>
    </member>
    <member name="P:System.Activities.Variable.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.Variable" />.</returns>
    </member>
    <member name="P:System.Activities.Variable.NameCore">
      <summary>Gets the name of the <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.Variable" />.</returns>
    </member>
    <member name="M:System.Activities.Variable.Set(System.Activities.ActivityContext,System.Object)">
      <summary>Sets the value of the <see cref="T:System.Activities.Variable" /> using the specified <see cref="T:System.Activities.ActivityContext" />.</summary>
      <param name="context">The current execution context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.Variable`1">
      <summary>Represents a variable in a workflow.</summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:System.Activities.Variable`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Variable`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Variable`1" /> class with the default expression.</summary>
      <param name="defaultExpression">The default expression.</param>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Variable`1" /> class with the variable name.</summary>
      <param name="name">The variable name.</param>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Variable`1" /> class with the variable name and default expression.</summary>
      <param name="name">The variable name.</param>
      <param name="defaultExpression">The default expression.</param>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.String,`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Variable`1" /> class with the variable name and default value.</summary>
      <param name="name">The variable name.</param>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="P:System.Activities.Variable`1.Default">
      <summary>Gets or sets the <see cref="T:System.Activities.Activity`1" /> that represents the default value for this <see cref="T:System.Activities.Variable`1" />.</summary>
      <returns>The default value for this <see cref="T:System.Activities.Variable`1" />.</returns>
    </member>
    <member name="M:System.Activities.Variable`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the variable using the specified <see cref="T:System.Activities.ActivityContext" />.</summary>
      <returns>The value of the variable.</returns>
      <param name="context">The activity context of the executing activity.</param>
    </member>
    <member name="M:System.Activities.Variable`1.GetLocation(System.Activities.ActivityContext)">
      <summary>Returns the <see cref="T:System.Activities.Location`1" /> of the variable.</summary>
      <returns>The location of the variable.</returns>
      <param name="context">The activity context that contains the location of the variable.</param>
    </member>
    <member name="M:System.Activities.Variable`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the variable.</summary>
      <param name="context">The activity context of the executing activity.</param>
      <param name="value">The value of the variable.</param>
    </member>
    <member name="T:System.Activities.VariableModifiers">
      <summary>Specifies the way the workflow runtime treats <see cref="T:System.Activities.Variable" /> objects.</summary>
    </member>
    <member name="F:System.Activities.VariableModifiers.None">
      <summary>No modifiers are specified for the <see cref="T:System.Activities.Variable" />.</summary>
    </member>
    <member name="F:System.Activities.VariableModifiers.ReadOnly">
      <summary>The value for the <see cref="T:System.Activities.Variable" /> cannot be changed.</summary>
    </member>
    <member name="F:System.Activities.VariableModifiers.Mapped">
      <summary>The <see cref="T:System.Activities.Variable" /> is mapped for persistence.</summary>
    </member>
    <member name="T:System.Activities.WorkflowApplication">
      <summary>Provides a host for a single instance of a workflow.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplication" /> class with the specified workflow definition.</summary>
      <param name="workflowDefinition">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplication" /> class that uses the specified workflow definition and argument values.</summary>
      <param name="workflowDefinition">The workflow definition.</param>
      <param name="inputs">The values for arguments defined on the root activity of the workflow definition.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Abort">
      <summary>Notifies the workflow runtime that this workflow instance should abort.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Abort(System.String)">
      <summary>Notifies the workflow runtime that this workflow instance should abort for the specified reason.</summary>
      <param name="reason">The reason for the request to abort.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Aborted">
      <summary>Gets or sets the <see cref="T:System.Action`1" /> that is invoked when the workflow instance is aborted.</summary>
      <returns>The action that is invoked when the workflow instance is aborted.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.AddInitialInstanceValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>Specifies instance metadata values that are included with the first persistence of a new instance.</summary>
      <param name="writeOnlyValues">The metadata values to be included with the first persistence.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
      <summary>Cancels a workflow instance asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</summary>
      <returns>A reference to the asynchronous cancel operation.</returns>
      <param name="callback">The method to be called when the cancel operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Cancels a workflow instance asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</summary>
      <returns>A reference to the asynchronous cancel operation.</returns>
      <param name="timeout">The interval in which the cancel operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the cancel operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Loads a workflow asynchronously from an instance store using the specified instance identifier, callback method, and user-provided state.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instanceId">A globally unique 128-bit identifier for the workflow instance.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Loads a workflow asynchronously from an instance store using the specified instance identifier, timeout period, callback method, and user-provided state.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instanceId">A globally unique 128-bit identifier for the workflow instance.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
      <summary>Initiates an operation to load a runnable workflow instance from the <see cref="P:System.Activities.WorkflowApplication.InstanceStore" />.</summary>
      <returns>A reference to the asynchronous operation</returns>
      <param name="callback">The method to be called when the operation is complete.</param>
      <param name="state">An optional application-specific object containing information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Initiates an operation to load a runnable workflow instance from the <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> using the specified time-out interval.</summary>
      <returns>A reference to the asynchronous operation</returns>
      <param name="timeout">The interval in which the load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the operation is complete.</param>
      <param name="state">An optional application-specific object containing information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
      <summary>Persists a workflow instance to an instance store asynchronously using the specified callback method and user-provided state.</summary>
      <returns>A reference to the asynchronous persist operation.</returns>
      <param name="callback">The method to be called when the persist operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Persists a workflow instance to an instance store asynchronously using the specified time-out interval, callback method, and user-provided state.</summary>
      <returns>A reference to the asynchronous persist operation.</returns>
      <param name="timeout">The interval in which the persist operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the persist operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
      <summary>Initiates an operation to resume a bookmark using the specified value, callback method, and state.</summary>
      <returns>A reference to the asynchronous bookmark resume operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Initiates an operation to resume a bookmark using the specified value, time-out interval, callback method, and state.</summary>
      <returns>A reference to the asynchronous bookmark resume operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
      <summary>Initiates an asynchronous operation to resume the bookmark with the specified name, using the specified value, callback method, and state. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmarkName">The name of the bookmark to be resumed.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="callback">The method that is called when the asynchronous operation completes.</param>
      <param name="state">The state of execution of a workflow that was preserved by the calling thread before an asynchronous operation began.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Initiates an asynchronous operation to resume the bookmark with the specified name, using the specified value, time-out interval, callback method, and state. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmarkName">The name of the bookmark to be resumed.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="timeout">The time interval during which the bookmark must be resumed.</param>
      <param name="callback">The method that is called when the asynchronous operation completes.</param>
      <param name="state">The state of execution of a workflow that was saved by the calling thread before an asynchronous operation began.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
      <summary>Starts or resumes a workflow instance asynchronously using the specified callback method and user-provided state.</summary>
      <returns>A reference to the asynchronous run operation.</returns>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Starts or resumes a workflow instance asynchronously using the specified time-out interval, callback method, and user-provided state.</summary>
      <returns>A reference to the asynchronous run operation.</returns>
      <param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
      <summary>Terminates a workflow instance asynchronously using the specified exception, callback method, and user-provided state.</summary>
      <returns>A reference to the current <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation.</returns>
      <param name="reason">The reason the workflow instance is terminated.</param>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Terminates a workflow instance asynchronously using the specified exception, time-out interval, callback method, and user-provided state.</summary>
      <returns>A reference to the current <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation.</returns>
      <param name="reason">The reason for terminating the workflow instance.</param>
      <param name="timeout">The interval in which the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
      <summary>Terminates a workflow instance asynchronously using the specified error message, callback method, and user-provided state.</summary>
      <returns>A reference to the current <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation.</returns>
      <param name="reason">The reason for terminating the workflow instance.</param>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Terminates a workflow instance asynchronously using the specified error message, time-out interval, callback method, and user-provided state.</summary>
      <returns>A reference to the asynchronous <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation.</returns>
      <param name="reason">The reason for terminating the workflow instance.</param>
      <param name="timeout">The interval in which the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
      <summary>Persists and disposes a workflow instance asynchronously using the specified callback method and user-provided state.</summary>
      <returns>A reference to the asynchronous <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operation.</returns>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Persists and disposes a workflow instance asynchronously using the specified time-out interval, callback method, and user-provided state.</summary>
      <returns>A reference to the asynchronous <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operation.</returns>
      <param name="timeout">The interval in which the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Cancel">
      <summary>Cancels the workflow instance.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
      <summary>Cancels the workflow instance using the specified time-out interval.</summary>
      <param name="timeout">The interval in which the cancel operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Completed">
      <summary>Gets or sets the <see cref="T:System.Action`1" /> that is invoked when the workflow instance completes.</summary>
      <returns>An action that is invoked when the workflow instance is complete.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous cancel operation to complete.</summary>
      <param name="result">The asynchronous cancel operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndLoad(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous load operation to complete.</summary>
      <param name="result">The asynchronous load operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
      <summary>Waits for the asynchronous load runnable instance operation to complete.</summary>
      <param name="result">A reference to the asynchronous load operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous persist operation to complete.</summary>
      <param name="result">The asynchronous persist operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
      <summary>Waits for a bookmark resume operation to complete.</summary>
      <returns>One of the enumeration values that indicates the results of a bookmark resumption operation.</returns>
      <param name="result">A reference to the asynchronous bookmark resume operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous run operation to complete.</summary>
      <param name="result">The asynchronous run operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous terminate operation to complete.</summary>
      <param name="result">The asynchronous terminate operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous unload operation to complete.</summary>
      <param name="result">The asynchronous unload operation.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Extensions">
      <summary>Gets the collection of extensions for the current workflow instance.</summary>
      <returns>A collection of objects.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetBookmarks">
      <summary>Returns the collection of bookmarks for the workflow instance.</summary>
      <returns>A read-only collection of bookmarks for the workflow instance.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)">
      <summary>Returns the collection of bookmarks for the workflow instance using the specified time-out interval.</summary>
      <returns>A read-only collection of bookmarks for the workflow instance.</returns>
      <param name="timeout">The interval in which this method must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Id">
      <summary>Gets the 128-bit GUID identifier of the current workflow application instance.</summary>
      <returns>A 128-bit GUID identifier.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Idle">
      <summary>Gets or sets the <see cref="T:System.Action`1" /> that is invoked when the current workflow instance becomes idle.</summary>
      <returns>An action that executes when a workflow instance becomes idle.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplication.InstanceStore">
      <summary>Gets or sets an object that provides access to the persisted state of the current instance of the workflow application.</summary>
      <returns>An instance store.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Guid)">
      <summary>Loads the specified workflow instance into memory from an instance store.</summary>
      <param name="instanceId">A globally unique 128-bit identifier for the workflow instance.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Guid,System.TimeSpan)">
      <summary>Loads the specified workflow instance into memory from an instance store using the specified time-out interval.</summary>
      <param name="instanceId">A globally unique 128-bit identifier for the workflow instance.</param>
      <param name="timeout">The interval in which the load operation must complete before the load operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.LoadRunnableInstance">
      <summary>Loads a runnable workflow instance from the <see cref="P:System.Activities.WorkflowApplication.InstanceStore" />.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.LoadRunnableInstance(System.TimeSpan)">
      <summary>Loads a runnable workflow instance from the <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> using the specified time-out interval.</summary>
      <param name="timeout">The interval in which the load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.OnUnhandledException">
      <summary>Gets or sets the <see cref="T:System.Func`2" /> that is invoked when the current workflow instance encounters an unhandled exception. </summary>
      <returns>The delegate that is invoked when a workflow instance encounters an unhandled exception.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Persist">
      <summary>Persists a workflow instance to an instance store.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)">
      <summary>Persists a workflow instance to an instance store using the specified time-out interval.</summary>
      <param name="timeout">The interval in which the persist operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.PersistableIdle">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc" /> that is invoked when the current workflow instance is idle and can be persisted.</summary>
      <returns>The <see cref="T:System.Activities.ActivityFunc" /> that is invoked when the current workflow instance is idle and can be persisted.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
      <summary>Initiates an operation to resume the specified bookmark, using the specified value. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
      <summary>Initiates an operation to resume the specified bookmark, using the specified value and time-out interval. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="timeout">The time interval during which the bookmark must be resumed.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
      <summary>Initiates an operation to resume the bookmark with the specified name, using the specified value. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmarkName">The name of the bookmark to be resumed.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
      <summary>Initiates an operation to resume the bookmark with the specified name, using the specified value and time-out interval. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmarkName">The name of the bookmark to be resumed.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="timeout">The time interval during which the bookmark must be resumed.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Run">
      <summary>Begins or resumes the execution of a workflow instance.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
      <summary>Begins or resumes the execution of a workflow instance using the specified time-out interval.</summary>
      <param name="timeout">Call this method to initiate execution of a newly created workflow instance.The interval in which the run operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
      <summary>Terminates a workflow instance using the specified exception.</summary>
      <param name="reason">The reason for terminating the workflow instance.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
      <summary>Terminates a workflow instance using the specified exception and time-out interval.</summary>
      <param name="reason">The reason for terminating the workflow instance.</param>
      <param name="timeout">The interval in which the <see cref="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)" /> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.String)">
      <summary>Terminates a workflow instance using the specified error message.</summary>
      <param name="reason">The reason for terminating the workflow instance.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
      <summary>Terminates a workflow instance using the specified error message and time-out interval.</summary>
      <param name="reason">The reason for terminating the workflow instance.</param>
      <param name="timeout">The interval in which the <see cref="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)" /> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Unload">
      <summary>Persists and unloads a workflow instance.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
      <summary>Persists and unloads a workflow instance using the specified time-out interval.</summary>
      <param name="timeout">The interval in which the unload operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Unloaded">
      <summary>Gets or sets the <see cref="T:System.Action`1" /> that is invoked when the current workflow unloads.</summary>
      <returns>An action that is invoked when a workflow instance is unloaded.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationAbortedEventArgs">
      <summary>Provides data about an aborted workflow instance.</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationAbortedEventArgs.Reason">
      <summary>Gets the exception that provides information about why the workflow instance was aborted</summary>
      <returns>The exception that provides information about why the workflow instance was aborted.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationAbortedException">
      <summary>Represents the exception that is thrown when an operation on a workflow instance is not valid because the instance has been aborted.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class with the context and serialization information required to retrieve data about this exception from a serialized stream.</summary>
      <param name="info">All the information required to serialize or deserialize the abort exception object.</param>
      <param name="context">The source and destination of a given serialized stream and an additional caller-defined context.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class with a text string description of the exception.</summary>
      <param name="message">A description of the abort exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class with a text string description of the exception and an additional exception that is the cause of the abort exception.</summary>
      <param name="message">A description of the abort exception.</param>
      <param name="innerException">An exception that has a causal relationship to the application aborted exception. The application aborted exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class with a text string description of the abort exception and with a unique identifier for it.</summary>
      <param name="message">A description of the abort exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class with a text string description of the abort exception, a unique identifier for it, and an additional exception that is the cause of the abort exception.</summary>
      <param name="message">A description of the abort exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
      <param name="innerException">An exception that has a causal relationship to the application aborted exception. The application aborted exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="T:System.Activities.WorkflowApplicationCompletedEventArgs">
      <summary>Provides information about a workflow instance that has completed its execution.</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationCompletedEventArgs.CompletionState">
      <summary>Gets the completion state of the workflow instance, which indicates whether the workflow instance completed successfully, was canceled, or faulted.</summary>
      <returns>The completion state of the workflow instance, which indicates whether the workflow instance completed successfully, was canceled, or faulted.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationCompletedEventArgs.Outputs">
      <summary>Gets a dictionary that contains the values of <see cref="T:System.Activities.OutArgument" />s of the workflow instance’s root activity, keyed by argument name.</summary>
      <returns>A dictionary that contains the values of <see cref="T:System.Activities.OutArgument" />s of the workflow instance’s root activity, keyed by argument name.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationCompletedEventArgs.TerminationException">
      <summary>Gets the exception associated with the termination of the workflow instance.</summary>
      <returns>The exception associated with the termination of the workflow instance.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationCompletedException">
      <summary>Represents the exception that is thrown when an operation on a workflow instance is not valid because the instance has completed.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class with the context and serialization information required to retrieve data about this exception from a serialized stream.</summary>
      <param name="info">All the information required to serialize or deserialize the application completed exception object.</param>
      <param name="context">The source and destination of a given serialized stream and an additional caller-defined context.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class with a text string description of the exception.</summary>
      <param name="message">A description of the application completed exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class with a text string description of the exception and with an additional exception that is the cause of the application completed exception.</summary>
      <param name="message">A description of the application completed exception.</param>
      <param name="innerException">An exception that has a causal relationship to the application completed exception. The application completed exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class with a text string description of the exception and with a unique identifier for the exception.</summary>
      <param name="message">A description of the application completed exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class with a text string description of the exception, a unique identifier for it, and an additional exception that is the cause of the application completed exception.</summary>
      <param name="message">A description of the application completed exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
      <param name="innerException">An exception that has a causal relationship to the application completed exception. The application completed exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="T:System.Activities.WorkflowApplicationEventArgs">
      <summary>A base class for events associated with a <see cref="T:System.Activities.WorkflowApplication" /> object.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationEventArgs.GetInstanceExtensions``1">
      <summary>Gets the collection of extensions of the specified type.</summary>
      <returns>The collection of extensions.</returns>
      <typeparam name="T">The type of the extension.</typeparam>
    </member>
    <member name="P:System.Activities.WorkflowApplicationEventArgs.InstanceId">
      <summary>The unique identifier of the workflow instance.</summary>
      <returns>A unique identifier.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationException">
      <summary>Provides the base class for handling an error that occurs during the execution of a workflow application.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class with the context and serialization information required to retrieve data about this exception from a serialized stream.</summary>
      <param name="info">The information required to serialize or deserialize the application exception object.</param>
      <param name="context">The source and destination of a given serialized stream, and an additional caller-defined context.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class with a text string description of the exception.</summary>
      <param name="message">A description of the application exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class with a text string description of the exception and with an additional exception that is the cause of the application exception.</summary>
      <param name="message">A description of the application exception.</param>
      <param name="innerException">An exception that has a causal relationship to the application exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class with a text string description of the exception and with a unique identifier for it.</summary>
      <param name="message">A description of the application exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class with a text string description of the exception, a unique identifier for it, and an additional exception that is the cause of the application exception.</summary>
      <param name="message">A description of the application exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
      <param name="innerException">An exception that has a causal relationship to the application exception. </param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The information required to serialize or deserialize the abort exception object.</param>
      <param name="context">The source and destination of a given serialized stream, and an additional caller-defined context.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplicationException.InstanceId">
      <summary>Gets the unique identifier for the current exception.</summary>
      <returns>A unique identifier.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationIdleEventArgs">
      <summary>Holds information about the workflow instance that has become idle.</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationIdleEventArgs.Bookmarks">
      <summary>Gets the read-only collection of bookmarks for the workflow instance.</summary>
      <returns>A read-only collection of bookmarks.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationTerminatedException">
      <summary>An exception that is thrown when an operation on a workflow instance is not valid because the instance has been terminated.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class with the context and serialization information required to retrieve data about this exception from a serialized stream.</summary>
      <param name="info">All the information required to serialize or deserialize the application terminated exception object.</param>
      <param name="context">The source and destination of a given serialized stream and an additional caller-defined context.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class with a text string description of the exception.</summary>
      <param name="message">A description of the application terminated exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class with a text string description of the exception and with an exception that is the cause of the application terminated exception.</summary>
      <param name="message">A description of the application terminated exception.</param>
      <param name="innerException">An exception that has a causal relationship to the application terminated exception. The application terminated exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class with a text string description of the exception and with a unique identifier for it.</summary>
      <param name="message">A description of the application terminated exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class with a text string description of the exception, a unique identifier for it, and an exception that is the cause of the current exception.</summary>
      <param name="message">A description of the application terminated exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
      <param name="innerException">An exception that has a causal relationship to the application terminated exception. The application terminated exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="T:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs">
      <summary>Provides information about an unhandled exception that occurred in a workflow instance.</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource">
      <summary>Gets the activity that is the source of the unhandled exception.</summary>
      <returns>An activity.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId">
      <summary>Gets the unique identifier of the activity instance that is the source of the unhandled exception.</summary>
      <returns>An identifier of the activity instance that is the source of the unhandled exception.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException">
      <summary>Gets the <see cref="T:System.Exception" /> that was unhandled by the workflow instance.</summary>
      <returns>The <see cref="T:System.Exception" /> that was unhandled by the workflow instance.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationUnloadedException">
      <summary>An exception that is thrown when an operation on a workflow instance is invalid because the instance has been unloaded.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the context and serialization information required to retrieve data about this exception from a serialized stream.</summary>
      <param name="info">All the information required to serialize or deserialize the application unloaded exception object.</param>
      <param name="context">The source and destination of a given serialized stream and an additional caller-defined context.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception.</summary>
      <param name="message">The description of the application unloaded exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception and with a specified exception that has a causal relationship to the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" />.</summary>
      <param name="message">A description of the application unloaded exception.</param>
      <param name="innerException">An exception that has a causal relationship to the application unloaded exception. The application unloaded exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception and the specified unique identifier for it.</summary>
      <param name="message">A description of the application unloaded exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception, unique identifier for it, and the exception that is the cause of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" />.</summary>
      <param name="message">A description of the application unloaded exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
      <param name="innerException">An exception that has a causal relationship to the application unloaded exception. The application unloaded exception is thrown in response to the inner exception and can use information from the exception to handle the error more appropriately.</param>
    </member>
    <member name="T:System.Activities.WorkflowDataContext">
      <summary>Represents the data context of the current workflow environment and provides a bridge to bring workflow arguments and variables into the scope of  data binding.</summary>
    </member>
    <member name="M:System.Activities.WorkflowDataContext.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Activities.WorkflowDataContext" />.</summary>
    </member>
    <member name="M:System.Activities.WorkflowDataContext.GetProperties">
      <summary>Returns the collection of properties managed by this <see cref="T:System.Activities.WorkflowDataContext" />.</summary>
      <returns>The collection of properties managed by this <see cref="T:System.Activities.WorkflowDataContext" />.</returns>
    </member>
    <member name="E:System.Activities.WorkflowDataContext.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="T:System.Activities.WorkflowInspectionServices">
      <summary>Provides methods for working with the runtime metadata for an activity tree.</summary>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity)">
      <summary>Caches the runtime metadata for the specified activity tree.</summary>
      <param name="rootActivity">The root activity of the activity tree.</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)">
      <summary>Caches the runtime metadata for the specified activity tree using the specified environment.</summary>
      <param name="rootActivity">The root activity of the activity tree.</param>
      <param name="hostEnvironment">The environment associated with the activity tree.</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.GetActivities(System.Activities.Activity)">
      <summary>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that represents all activities associated with the input activity.</summary>
      <returns>An enumeration that represents all activities associated with the input activity.</returns>
      <param name="activity">The root activity.</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.Resolve(System.Activities.Activity,System.String)">
      <summary>Returns the activity with the specified <paramref name="id" /> from the specified activity tree.</summary>
      <returns>The specified activity if found; otherwise, an <see cref="T:System.ArgumentException" /> is thrown.</returns>
      <param name="root">The activity tree to search.</param>
      <param name="id">The identifier of the activity to find.</param>
    </member>
    <member name="T:System.Activities.WorkflowInvoker">
      <summary>Provides a means for invoking a workflow as if it were a method call.</summary>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</summary>
      <param name="workflow">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
      <summary>Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</summary>
      <param name="userState">The token for the workflow to cancel.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
      <summary>Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</param>
    </member>
    <member name="P:System.Activities.WorkflowInvoker.Extensions">
      <summary>Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</returns>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke">
      <summary>Invokes the activity that is passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
      <summary>Invokes a workflow synchronously using the specified workflow definition.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition and time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
      <summary>Invokes a workflow synchronously using the specified workflow definition.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke. The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="additionalOutputs">The dictionary of additional output parameters of the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
      <summary>Invokes a workflow synchronously with the specified time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync">
      <summary>Invokes a workflow asynchronously.</summary>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
      <summary>Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
      <summary>Invokes a workflow asynchronously using the specified unique identifier.</summary>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
      <summary>Invokes a workflow asynchronously with the specified time-out interval.</summary>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
      <summary>Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</summary>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="E:System.Activities.WorkflowInvoker.InvokeCompleted">
      <summary>Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</summary>
    </member>
    <member name="T:System.Activities.Debugger.IDebuggableWorkflowTree">
      <summary>Provides an interface whose implementation enables the Workflow debugger to debug a serialized Workflow object.</summary>
    </member>
    <member name="M:System.Activities.Debugger.IDebuggableWorkflowTree.GetWorkflowRoot">
      <summary>Returns the root of the Workflow tree.</summary>
      <returns>A workflow element.</returns>
    </member>
    <member name="T:System.Activities.Debugger.LocalsItemDescription">
      <summary>Represents the name and type of an early bound item that displays in the workflow debugger Locals window.</summary>
    </member>
    <member name="M:System.Activities.Debugger.LocalsItemDescription.#ctor(System.String,System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.LocalsItemDescription" /> class with the name and type of the local item defined.</summary>
      <param name="name">The name of the specified early bound local item.</param>
      <param name="type">The type of the specified early bound local item.</param>
    </member>
    <member name="P:System.Activities.Debugger.LocalsItemDescription.Name">
      <summary>Returns the name of a local item accessed while debugging a workflow.</summary>
      <returns>A string representing the name of a local item.</returns>
    </member>
    <member name="M:System.Activities.Debugger.LocalsItemDescription.ToString">
      <summary>Returns a string that represents the name and type of an early bound local item that displays in the workflow debugger Locals window.</summary>
      <returns>A string representing the name and type of a local item.</returns>
    </member>
    <member name="P:System.Activities.Debugger.LocalsItemDescription.Type">
      <summary>Returns the type of a local item accessed while debugging a workflow.</summary>
      <returns>A string representing the type of a local item.</returns>
    </member>
    <member name="T:System.Activities.Debugger.SourceLocation">
      <summary>Identifies a specific location in a target source code file.</summary>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.#ctor(System.String,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.SourceLocation" /> class that specifies a source code file name and the number of a line in that file.</summary>
      <param name="fileName">A source code file.</param>
      <param name="line">The number of a line in the source code file.</param>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.SourceLocation" /> class that specifies a source code file name and parameters for a range of data within that file.</summary>
      <param name="fileName">The name of a source code file.</param>
      <param name="startLine">A number that designates the line in the source code file where reading begins.</param>
      <param name="startColumn">A number that designates the column in the source code file where reading begins.</param>
      <param name="endLine">A number that designates the line in the source code file where reading ends.</param>
      <param name="endColumn">A number that designates the column in the source code file where reading ends.</param>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.EndColumn">
      <summary>Gets the final column in a range of one or more columns in the source code file.</summary>
      <returns>An integer representing the final column in a range of columns.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.EndLine">
      <summary>Gets the final line in a range of one or more lines in the source code file.</summary>
      <returns>An integer representing the final line in a range of lines.</returns>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.Equals(System.Object)">
      <summary>Returns a value that indicates whether the source code file line and column settings referenced by the <see cref="T:System.Activities.Debugger.SourceLocation" /> object are an exact match for the line and column settings in another, specified <see cref="T:System.Activities.Debugger.SourceLocation" /> object.</summary>
      <returns>A boolean that indicates the presence or absence of a match.</returns>
      <param name="obj">A specified <see cref="T:System.Activities.Debugger.SourceLocation" /> object.</param>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.FileName">
      <summary>Gets the name of the target source code file.</summary>
      <returns>A string instance of the name of the target source code file.</returns>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.GetHashCode">
      <summary>Returns a unique value to represent the <see cref="T:System.Activities.Debugger.SourceLocation" /> object.</summary>
      <returns>An integer representing a hash code.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.IsSingleWholeLine">
      <summary>Gets a value that indicates whether the line and column settings define a single, complete line, and not multiple lines, in the source code file.</summary>
      <returns>A boolean representing what the column settings define.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.StartColumn">
      <summary>Gets the first column in a range of one or more columns in the source code file.</summary>
      <returns>An integer representing a column in a range of columns.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.StartLine">
      <summary>Gets the first line in a range of one or more lines in the source code file.</summary>
      <returns>An integer representing a line a range of lines.</returns>
    </member>
    <member name="T:System.Activities.Debugger.SourceLocationProvider">
      <summary>Provides <see cref="T:System.Activities.Debugger.SourceLocation" /> information for the mapping of a root activity and its descendants to their corresponding source locations.</summary>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocationProvider.CollectMapping(System.Activities.Activity,System.Activities.Activity,System.Collections.Generic.Dictionary{System.Object,System.Activities.Debugger.SourceLocation},System.String)">
      <summary>Creates to a dictionary type collection of mappings of the root activity and its descendants to their corresponding source locations.</summary>
      <param name="rootActivity1">A workflow element that represents an activity that is not mapped to a source location.</param>
      <param name="rootActivity2">A workflow element that shadows <paramref name="rootActivity1" /> but has specific source locations to which its members are mapped.</param>
      <param name="mapping">A dictionary object that contains a root activity and its descendants, each mapped to a source location.</param>
      <param name="path">The path of the source file to use.</param>
    </member>
    <member name="T:System.Activities.Debugger.State">
      <summary>Maintains property information that pinpoints source code locations that can serve as breakpoints or be stepped to by the interpreter.</summary>
    </member>
    <member name="T:System.Activities.Debugger.StateManager">
      <summary>Manages the debugging of each activity that is mapped to a state by the debugging infrastructure.</summary>
    </member>
    <member name="M:System.Activities.Debugger.StateManager.Dispose">
      <summary>Exits each thread in the logical thread list and then clears the list.</summary>
    </member>
    <member name="M:System.Activities.Debugger.StateManager.Exit(System.Int32)">
      <summary>Exits the specified thread and sets its location in the logical thread list to null.</summary>
      <param name="threadIndex">A number that represents an index into a list of logical threads.</param>
    </member>
    <member name="T:System.Activities.Debugger.ThreadWorkerController">
      <summary>Supports the creation and execution of an auxiliary debugging thread, or island, on a dedicated worker thread. This type is a utility class used by the framework and is not intended for public use.</summary>
    </member>
    <member name="M:System.Activities.Debugger.ThreadWorkerController.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.ThreadWorkerController" /> class.</summary>
    </member>
    <member name="M:System.Activities.Debugger.ThreadWorkerController.IslandWorker(System.Activities.Debugger.ThreadWorkerController)">
      <summary>Directs execution to a particular auxiliary debugger thread.</summary>
      <param name="controller">The auxiliary debugger thread to execute.</param>
    </member>
    <member name="T:System.Activities.Debugger.VirtualStackFrame">
      <summary>Provides a virtual call stack frame for the interpreter.</summary>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.#ctor(System.Activities.Debugger.State)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.VirtualStackFrame" /> class with the state specified.</summary>
      <param name="state">For this implementation, an object that contains the set of properties that define a virtual environment for a frame on a call stack. </param>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.#ctor(System.Activities.Debugger.State,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.VirtualStackFrame" /> class with the state and local variables specified.</summary>
      <param name="state">For this implementation, an object that contains the set of properties that define a virtual environment for a frame on a call stack.</param>
      <param name="locals">Early and late bound variables associated with the state.</param>
    </member>
    <member name="P:System.Activities.Debugger.VirtualStackFrame.Locals">
      <summary>Gets local variables for a frame on a call stack.</summary>
      <returns>A collection of key/value pairs that define early and late bound variables associated with the specified state.</returns>
    </member>
    <member name="P:System.Activities.Debugger.VirtualStackFrame.State">
      <summary>Gets the properties that define a virtual environment for a frame on a call stack.</summary>
      <returns>A State object that contains the properties that define a specified virtual environment.</returns>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.ToString">
      <summary>A string instance of the state information.</summary>
      <returns>The state information for a virtual environment.</returns>
    </member>
    <member name="T:System.Activities.Debugger.XamlDebuggerXmlReader">
      <summary>Provides the functionality to parse XAML markup code into an object or tree of objects.</summary>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.Xaml.XamlReader,System.IO.TextReader)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> class with the specified XAML reader and text reader.</summary>
      <param name="underlyingReader">A specified XAML reader object.</param>
      <param name="textReader">A specified text reader object.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.Xaml.XamlReader,System.Xaml.IXamlLineInfo,System.IO.TextReader)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> class with the specified XAML reader, reader position in a document, and text reader.</summary>
      <param name="underlyingReader">A specified XAML reader object.</param>
      <param name="xamlLineInfo">Text line information based on the position of the reader.</param>
      <param name="textReader">A specified text reader object.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.CopyAttachedSourceLocation(System.Object,System.Object)">
      <summary>Retrieves row and column values from the specified activity object and assigns them to the current instance of the XAML reader.</summary>
      <param name="source">The XAML activity instance from which to read source location values.</param>
      <param name="destination">An activity instance.</param>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndColumnName">
      <summary>The name of an attached property that represents the ending column of an activity element in its XAML form.</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndLineName">
      <summary>The name of an attached property that represents the ending line of an activity element in its XAML form.</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.FileNameName">
      <summary>The name of an attached property that represents the name of the file to be parsed.</summary>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetEndColumn(System.Object)">
      <summary>Gets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndColumnName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetEndLine(System.Object)">
      <summary>Gets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndLineName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetFileName(System.Object)">
      <summary>Gets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.FileNameName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetStartColumn(System.Object)">
      <summary>Gets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartColumnName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetStartLine(System.Object)">
      <summary>Gets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartLineName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.HasLineInfo">
      <summary>Gets a value that indicates that line information is available.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.IsEof">
      <summary>Gets a value that indicates whether the underlying reader has reached the end of the XAML file that is being parsed.</summary>
      <returns>true if the reader has reached the end of the file it is parsing; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.LineNumber">
      <summary>Gets the line in a XAML file that is currently being examined by the reader.</summary>
      <returns>A file line number.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.LinePosition">
      <summary>Gets the position of the line in a XAML file that is currently being examined by the XML reader.</summary>
      <returns>The position of a line in a file.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Member">
      <summary>Adds the starting member of the document being parsed to the XAML member base.</summary>
      <returns>The starting member of the XAML document.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Namespace">
      <summary>Gets the path that is used in the root element of the XAML document to establish a relationship between the XAML code and its schema.</summary>
      <returns>A namespace declaration for use in the root element of the XAML document.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.NodeType">
      <summary>Gets the type of the node currently being read in a XAML file.</summary>
      <returns>A XAML node type.</returns>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.Read">
      <summary>Gets a value that indicates whether the end of the XAML file has been reached during the reading operation.</summary>
      <returns>true if the end of the XAML file has been reached; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.SchemaContext">
      <summary>Gets the schema context for the underlying XAML reader.</summary>
      <returns>The schema context information.</returns>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetEndColumn(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndColumnName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndColumnName" /> property identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetEndLine(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndLineName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndLineName" /> identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetFileName(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.FileNameName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.FileNameName" /> property identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetStartColumn(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartColumnName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartColumnName" /> property identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetStartLine(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartLineName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartLineName" /> property identifier or name.</param>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartColumnName">
      <summary>The name of an attached property that represents the starting column of the activity in its XAML form.</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartLineName">
      <summary>The name of an attached property that represents the starting line of the activity in its XAML form.</summary>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Type">
      <summary>Gets the record type at the XAML start node.</summary>
      <returns>A XAML record type.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Value">
      <summary>Gets the element at the node currently being read.</summary>
      <returns>An element in an XAML file.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult">
      <summary>Contains the results from executing the <see cref="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand" /> against an instance store.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> class.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>Creates an instance of the <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> class and initializes the <see cref="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters" /> property with the data in the dictionary object passed in as a parameter.</summary>
      <param name="parameters">A dictionary object containing activation parameters.</param>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}})">
      <summary>Creates an instance of the <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> class and initializes the <see cref="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters" /> property with the data in the enumerable dictionary object passed in as a parameter.</summary>
      <param name="parameters">An enumerable dictionary object containing activation parameters.</param>
    </member>
    <member name="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters">
      <summary>A list of activation parameters that a generic host uses to create a workflow host.</summary>
      <returns>A List object containing activation parameters.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand">
      <summary>Use this persistence command to register a workflow service host as a lock owner in the persistence database.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand" /> class.</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand.InstanceOwnerMetadata">
      <summary>Gets the metadata about the instance owner (currently has a one-to-one mapping to a service host) in a dictionary with an XName object as the key and an <see cref="T:System.Runtime.Persistence.InstanceValue" /> object as a value.</summary>
      <returns>The metadata about the instance owner.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand">
      <summary>Deletes lock owner information from the persistence database. </summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand" /> class. </summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.HasActivatableWorkflowEvent">
      <summary>Represents an event that an instance store raises to notify generic hosts about the existence of activatable instances in the persistence database. </summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.HasActivatableWorkflowEvent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DurableInstancing.HasActivatableWorkflowEvent" /> class.</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent">
      <summary>Represents an event that the SQL Workflow Instance Store raises to notify workflow hosts about the existence of runnable instances in the persistence database. </summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.HasRunnableWorkflowEvent.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent" /> class.</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand">
      <summary>A persistence command that loads a workflow instance by using the instance key associated with the instance.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand" /> class.</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.AcceptUninitializedInstance">
      <summary>Gets a value that indicates whether to allow loading a workflow instance that is in an uninitialized state.</summary>
      <returns>true if the workflow instance is allowed to be loaded when in an uninitialized state; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.AssociateInstanceKeyToInstanceId">
      <summary>Gets or sets the instance identifier associated with an instance key.</summary>
      <returns>The instance identifier.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.InstanceKeysToAssociate">
      <summary>Gets the instance keys to be associated with an instance in the persistence store.</summary>
      <returns>The instance keys.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.LookupInstanceKey">
      <summary>Gets the instance key used to identify the instance to be loaded.</summary>
      <returns>The instance key.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.LoadWorkflowCommand">
      <summary>A persistence command that loads a workflow instance based on state information of the instance in the persistence store.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.LoadWorkflowCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> class.</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowCommand.AcceptUninitializedInstance">
      <summary>Gets a value that indicates whether to allow loading an uninitialized instance.</summary>
      <returns>true if loading an uninitialized instance is allowed; otherwise false.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand">
      <summary>Represents the command that a generic host executes against an instance store to retrieve activation parameters. The generic host uses these activation parameters to create a workflow host, which in turn loads a runnable service instance.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand" /> class.</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.SaveWorkflowCommand">
      <summary>A persistence command that lets you save instance state information into the persistence store.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.SaveWorkflowCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" /> class. </summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.CompleteInstance">
      <summary>Sets the status of the instance in the persistence database to “Completed” and deletes the state information from the database unless the <see cref="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceCompletionAction" /> property is set to “Delete Nothing”.</summary>
      <returns>true if the status of the instance is “Completed” and the state information is deleted; otherwise false. </returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData">
      <summary>Gets the instance data to be saved into the persistence store. A dictionary that contains names of properties and their values.</summary>
      <returns>The dictionary that contains names of properties and their values.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeyMetadataChanges">
      <summary>Gets a dictionary with an instance key as the key and a dictionary of XName and <see cref="T:System.Runtime.Persistence.InstanceValue" /> pairs as the value.</summary>
      <returns>The dictionaries with key/value pairs.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToAssociate">
      <summary>Contains instance keys that must be associated with an instance. A dictionary that contains a GUID associated with an instance key and metadata associated with the instance key.</summary>
      <returns>The instance keys that must be associated with an instance.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToComplete">
      <summary>Gets a collection of instance keys that must be disassociated with an instance.</summary>
      <returns>A collection of instance keys that must be disassociated with an instance.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToFree">
      <summary>Gets a collection of instance keys to be deleted from the persistence store.</summary>
      <returns>A collection of instance keys to be deleted from the persistence store.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceMetadataChanges">
      <summary>Gets a dictionary that contains changes to instance metadata.</summary>
      <returns>The changes to instance metadata.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.UnlockInstance">
      <summary>Removes the lock on an instance. Sets the lock owner to null for an instance.</summary>
      <returns>true if the lock is removed on an instance; otherwise false.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand">
      <summary>Represents the command that a workflow host executes against an instance store to load runnable instances in the persistence store into the memory.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand" /> class.</summary>
    </member>
    <member name="T:System.Activities.ExpressionParser.SourceExpressionException">
      <summary>Represents the exception that is thrown when a text-based expression cannot be converted into an executable form.</summary>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class.</summary>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with a specified error message and a collection of compiler errors.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="errors">A collection of compiler error data.</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="P:System.Activities.ExpressionParser.SourceExpressionException.Errors">
      <summary>Gets an enumerable type collection of compiler errors.</summary>
      <returns>An enumerable collection of compiler errors.</returns>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The object that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Activities.Expressions.Add`3">
      <summary>Computes the sum of two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Add`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Add`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Checked">
      <summary>Gets or sets a value that indicates whether the addition executes in a checked context.</summary>
      <returns>true if the addition executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.And`3">
      <summary>Computes the bitwise logical AND of two values. </summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.And`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.And`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.And`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.And`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.AndAlso">
      <summary>Computes the logical AND of two values. Both values are converted into Boolean, and if both are true then this expression returns true. If one or both values evaluate to false, this expression returns false. <see cref="T:System.Activities.Expressions.AndAlso" /> is the “short circuit” version of the logical AND operator, returning false as soon as one of operands is evaluated to be false.</summary>
    </member>
    <member name="M:System.Activities.Expressions.AndAlso.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.AndAlso" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.AndAlso.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.AndAlso.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArgumentReference`1">
      <summary> Represents an <see cref="T:System.Activities.Argument" /> used as an l-value in an expression.</summary>
      <typeparam name="T">The type of the argument returned by the <see cref="T:System.Activities.Expressions.ArgumentReference`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentReference`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentReference`1" /> class with the argument name.</summary>
      <param name="argumentName">The argument name.</param>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentReference`1.ArgumentName">
      <summary>Gets or sets the name of the argument to which a reference is to be returned.</summary>
      <returns>The argument name.</returns>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.ArgumentReference`1" />.</summary>
      <returns>The argument name, if the <see cref="P:System.Activities.Expressions.ArgumentReference`1.ArgumentName" /> has been set, otherwise the activity ID and name.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArgumentValue`1">
      <summary>Represents an <see cref="T:System.Activities.Argument" /> used as an r-value in an expression.</summary>
      <typeparam name="T">The type of the value returned by the <see cref="T:System.Activities.Expressions.ArgumentValue`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentValue`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentValue`1" /> class with the specified argument name.</summary>
      <param name="argumentName">The argument name.</param>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentValue`1.ArgumentName">
      <summary>Gets or sets the name of the argument whose value is to be returned.</summary>
      <returns>The argument name.</returns>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.ToString">
      <summary>A <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.ArgumentValue`1" />.</summary>
      <returns>The argument name, if the <see cref="P:System.Activities.Expressions.ArgumentValue`1.ArgumentName" /> has been set; otherwise the activity ID and name.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArrayItemReference`1">
      <summary>A reference to an item within an array.</summary>
      <typeparam name="TItem">The type of the items within the array.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArrayItemReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArrayItemReference`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemReference`1.Array">
      <summary>Gets or sets the array whose item is being referenced.</summary>
      <returns>The array whose item is being referenced.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemReference`1.Index">
      <summary>Gets or sets the array index number of the item being referenced.</summary>
      <returns>The array index number of the item being referenced. </returns>
    </member>
    <member name="T:System.Activities.Expressions.ArrayItemValue`1">
      <summary>An item within an array.</summary>
      <typeparam name="TItem">The type of the items within the array. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArrayItemValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArrayItemValue`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemValue`1.Array">
      <summary>Gets or sets the array to which the item belongs to.</summary>
      <returns>The array to which the item belongs to.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemValue`1.Index">
      <summary>Gets or sets the array index number of the array item.</summary>
      <returns>The array item index.</returns>
    </member>
    <member name="T:System.Activities.Expressions.As`2">
      <summary>Attempts to converts an operand to a given type. If the conversion is not possible the result is set to null.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.As`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.As`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.As`2.Operand">
      <summary>Gets or sets the operand.</summary>
      <returns>The operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Cast`2">
      <summary>Attempts to convert an operand to a given type. If the conversion is not possible a run-time error is generated.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Cast`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Cast`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Cast`2.Checked">
      <summary>Gets or sets a value that indicates whether the cast operation executes in a checked context.</summary>
      <returns>true if the cast operation executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Cast`2.Operand">
      <summary>Gets or sets the operand.</summary>
      <returns>The operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.DelegateArgumentReference`1">
      <summary>Represents a <see cref="T:System.Activities.DelegateArgument" /> used as an l-value in an expression.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.DelegateArgument" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentReference`1.#ctor(System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" /> class using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="delegateArgument">The value of the expression.</param>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentReference`1.DelegateArgument">
      <summary>Gets or sets the <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" />.</summary>
      <returns>The <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" />.</returns>
    </member>
    <member name="T:System.Activities.Expressions.DelegateArgumentValue`1">
      <summary>Represents a <see cref="T:System.Activities.DelegateArgument" /> used as an r-value in an expression.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.DelegateArgument" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentValue`1.#ctor(System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" /> class using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="delegateArgument">The value of the expression.</param>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentValue`1.DelegateArgument">
      <summary>Gets or sets the <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" />.</summary>
      <returns>The <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" />.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Divide`3">
      <summary>Computes the quotient of a division operation.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Divide`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Divide`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Divide`3.Left">
      <summary>Gets or sets the left operand. The left operand is the divisor. </summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Divide`3.Right">
      <summary>Gets or sets the right operand. The right operand is the dividend.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Equal`3">
      <summary>Performs an equality test between two values. If the two values are equal the expression returns true; otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand. </typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Equal`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Equal`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Equal`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Equal`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ExpressionServices">
      <summary>A transformation API used to convert environment aware expressions to an activity tree.</summary>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})">
      <summary>Converts a workflow environment-aware expression to an activity tree.</summary>
      <returns>The converted expression.</returns>
      <param name="expression">The expression being converted.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})">
      <summary>Converts a reference to a workflow environment-aware expression to an activity tree.</summary>
      <returns>The converted expression.</returns>
      <param name="expression">The expression being converted.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)">
      <summary>Converts a workflow environment-aware expression to an activity tree.</summary>
      <returns>true if the expression can be converted, otherwise false.</returns>
      <param name="expression">The expression being converted.</param>
      <param name="result">The converted expression.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)">
      <summary>Converts a reference to a workflow environment-aware expression to an activity tree.</summary>
      <returns>true if the expression can be converted, otherwise false.</returns>
      <param name="expression">The expression being converted.</param>
      <param name="result">The converted expression.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="T:System.Activities.Expressions.FieldReference`2">
      <summary>A reference to a field.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.FieldReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.FieldReference`2" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.FieldReference`2.FieldName">
      <summary>Gets or sets the name of the field being referenced.</summary>
      <returns>The name of the field being referenced.</returns>
    </member>
    <member name="P:System.Activities.Expressions.FieldReference`2.Operand">
      <summary>Gets or sets the field reference. </summary>
      <returns>The field reference.</returns>
    </member>
    <member name="T:System.Activities.Expressions.FieldValue`2">
      <summary>A field value.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.FieldValue`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.FieldValue`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.FieldValue`2.FieldName">
      <summary>Gets or sets the field name.</summary>
      <returns>The field name.</returns>
    </member>
    <member name="P:System.Activities.Expressions.FieldValue`2.Operand">
      <summary>Gets or sets the value of the field.</summary>
      <returns>The field value.</returns>
    </member>
    <member name="T:System.Activities.Expressions.GreaterThan`3">
      <summary>Performs a relational test between two values. If the left operand is greater than the right operand, the expression returns true. Otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.GreaterThan`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.GreaterThan`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThan`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThan`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.GreaterThanOrEqual`3">
      <summary>Performs a relational test between two values. If the left operand is greater than or equal to the right operand, the expression returns true; otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.GreaterThanOrEqual`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.GreaterThanOrEqual`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThanOrEqual`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThanOrEqual`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.IndexerReference`2">
      <summary>Represents an element referenced by an object indexer that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The type with the indexer.</typeparam>
      <typeparam name="TItem">The type of the indexer array. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.IndexerReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.IndexerReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.IndexerReference`2.Indices">
      <summary>Gets a collection of arguments that represent the indices of the element in the indexer array.</summary>
      <returns>The indices of the element in the indexer array.</returns>
    </member>
    <member name="P:System.Activities.Expressions.IndexerReference`2.Operand">
      <summary>Gets or sets the object that contains the indexer.</summary>
      <returns>The object that contains the indexer.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`1">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`1" />.</summary>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`1.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`1" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`10">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`10.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`10" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`10" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`11">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`11.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`11" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`11" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`12">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`12.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`12" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`12" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`13">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`13.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`13" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`13" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`14">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`14.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`14" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`14" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`15">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`15.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`15" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument14">
      <summary>Gets or sets the fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`15" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`16">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`16.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`16" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument14">
      <summary>Gets or sets the fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument15">
      <summary>Gets or sets the fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`16" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`17">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`17.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`17" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument14">
      <summary>Gets or sets the fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument15">
      <summary>Gets or sets the fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument16">
      <summary>Gets or sets the sixteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The sixteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`17" /> to be invoked.</summary>
      <returns>The activity functions to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`2">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`2" />.</summary>
      <typeparam name="T">The type of the <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`2" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`2" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`2.Argument">
      <summary>Gets or sets the argument passed to the <see cref="T:System.Activities.ActivityFunc`2" />.</summary>
      <returns>The argument passed to the <see cref="T:System.Activities.ActivityFunc`2" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`2.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`2" /> to be invoked.</summary>
      <returns>The <see cref="T:System.Activities.ActivityFunc`2" /> to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`3">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`3" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`3" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`3" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`4">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`4.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`4" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`4" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`5">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`5.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`5" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`5" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`6">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`6.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`6" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`6" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`7">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`7.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`7" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`7" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`8">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`8.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`8" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`8" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`9">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`9.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`9" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`9" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeMethod`1">
      <summary>Calls a public method of a specified object or type.</summary>
      <typeparam name="TResult">The type of value returned by the activity.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeMethod`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeMethod`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.GenericTypeArguments">
      <summary>The generic type arguments of the contained method.</summary>
      <returns>The arguments.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.MethodName">
      <summary>The name of the method to be invoked when the activity executes.</summary>
      <returns>The method name.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.Parameters">
      <summary>The parameter collection of the method to be invoked.</summary>
      <returns>The parameter collection.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.RunAsynchronously">
      <summary>Gets or sets a value that indicates whether the activity’s method is invoked asynchronously.</summary>
      <returns>true if the method executes asynchronously; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.TargetObject">
      <summary>Gets or sets the object that contains the method to invoke.</summary>
      <returns>The method to invoke.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.TargetType">
      <summary>Gets or sets the type of the <see cref="P:System.Activities.Expressions.InvokeMethod`1.TargetObject" />.</summary>
      <returns>The target object type.</returns>
    </member>
    <member name="T:System.Activities.Expressions.LambdaReference`1">
      <summary>Represents a lambda expression used as an l-value, which supports binding of <see cref="F:System.Activities.ArgumentDirection.Out" /> arguments.</summary>
      <typeparam name="T">The type of value returned by the expression.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaReference`1" /> class.</summary>
      <param name="locationExpression">The value of the expression.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>This method always returns true and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>This method always returns true.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>This method throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> when called.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.Expressions.LambdaSerializationException">
      <summary>The exception that is thrown when a XAML serialization attempt is made on a <see cref="T:System.Activities.Expressions.LambdaValue`1" /> or <see cref="T:System.Activities.Expressions.LambdaReference`1" />.</summary>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class with serialized data.</summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Activities.Expressions.LambdaValue`1">
      <summary>Represents a lambda expression used as an r-value, which supports binding of <see cref="F:System.Activities.ArgumentDirection.In" /> arguments.</summary>
      <typeparam name="TResult">The type of value returned by the expression.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaValue`1" /> class using the specified expression.</summary>
      <param name="lambdaValue">The lambda expression that represents the value of the <see cref="T:System.Activities.Expressions.LambdaValue`1" />.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>This method always returns true and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>This method always returns true.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" />, and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>Throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> when called.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.Expressions.LessThan`3">
      <summary>Performs a relational test between two values. If the left operand is less than the right operand, the expression returns true. Otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LessThan`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LessThan`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.LessThan`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.LessThan`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.LessThanOrEqual`3">
      <summary>Performs a relational test between two values. If the left operand is less than or equal to the right operand, the expression returns true. Otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LessThanOrEqual`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LessThanOrEqual`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.LessThanOrEqual`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.LessThanOrEqual`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Literal`1">
      <summary>Represents an expression activity that returns a literal value of the specified type.</summary>
      <typeparam name="T">The type of the value.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Literal`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Literal`1" /> class using the specified value.</summary>
      <param name="value">The literal value of the expression.</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Expressions.Literal`1" /> can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if the value can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the <see cref="T:System.Activities.Expressions.Literal`1" /> to a <see cref="T:System.String" />.</summary>
      <returns>The literal expression.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ShouldSerializeValue">
      <summary>Returns a value that indicates whether the <see cref="P:System.Activities.Expressions.Literal`1.Value" /> property has changed from its default value and should be serialized.</summary>
      <returns>true if the <see cref="P:System.Activities.Expressions.Literal`1.Value" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the literal’s value.</summary>
      <returns>The string representation of the literal’s value.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Literal`1.Value">
      <summary>Gets or sets the value of the literal expression.</summary>
      <returns>The value of the literal expression.</returns>
    </member>
    <member name="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1">
      <summary>Represents an element in a multidimensional array that can be used as an l-value in an expression.</summary>
      <typeparam name="TItem">The type of elements in the array.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.MultidimensionalArrayItemReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.Array">
      <summary>Gets or sets the array referenced by the <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" />.</summary>
      <returns>The array referenced by the <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.Indices">
      <summary>Gets a collection of arguments that represent the indices of the element in the array.</summary>
      <returns>The indices of the element in the array.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Multiply`3">
      <summary>Computes the product of two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Multiply`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Multiply`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Checked">
      <summary>Gets or sets a value that indicates whether the multiplication executes in a checked context.</summary>
      <returns>true if the multiplication executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.New`1">
      <summary>Creates a new instance of the type specified by the <paramref name="TResult" /> type.</summary>
      <typeparam name="TResult">The type of the instance being created.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.New`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.New`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.New`1.Arguments">
      <summary>Gets the arguments required by the constructor.</summary>
      <returns>The arguments required by the constructor.</returns>
    </member>
    <member name="T:System.Activities.Expressions.NewArray`1">
      <summary>Creates a new instance of the array type specified by the <paramref name="Tresult" /> type.</summary>
      <typeparam name="TResult">The type of the instance being created.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.NewArray`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.NewArray`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.NewArray`1.Bounds">
      <summary>Gets the bounds on each dimension of the array.</summary>
      <returns>An <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Not`2">
      <summary>Computes the logical negation of a value expression.</summary>
      <typeparam name="TOperand">The type of the value expression.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Not`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Not`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Not`2.Operand">
      <summary>Gets the value expression that is negated.</summary>
      <returns>The value expression that is negated.</returns>
    </member>
    <member name="T:System.Activities.Expressions.NotEqual`3">
      <summary>Performs an inequality test between two values. If the two values are not equal the expression returns true; otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand. </typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.NotEqual`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.NotEqual`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.NotEqual`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.NotEqual`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Or`3">
      <summary>Computes the bitwise logical OR of two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Or`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Or`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Or`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Or`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.OrElse">
      <summary>Computes the logical OR of two values. To do this, both operands are evaluated to boolean values. If both operands are false then the expression returns false. If one or both operands evaluate to true, the expression returns true.</summary>
    </member>
    <member name="M:System.Activities.Expressions.OrElse.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.OrElse" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.OrElse.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="T:System.Activities.Activity" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.OrElse.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="T:System.Activities.Activity" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.PropertyReference`2">
      <summary>A reference to a property.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.PropertyReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.PropertyReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.PropertyReference`2.Operand">
      <summary>Gets or sets the property reference.</summary>
      <returns>The property reference.</returns>
    </member>
    <member name="P:System.Activities.Expressions.PropertyReference`2.PropertyName">
      <summary>Gets or sets the name of the property being referenced.</summary>
      <returns>The name of the property being referenced.</returns>
    </member>
    <member name="T:System.Activities.Expressions.PropertyValue`2">
      <summary>A property value.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.PropertyValue`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.PropertyValue`2" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.PropertyValue`2.Operand">
      <summary>Gets or sets the property value.</summary>
      <returns>The property value.</returns>
    </member>
    <member name="P:System.Activities.Expressions.PropertyValue`2.PropertyName">
      <summary>Gets or sets the property name.</summary>
      <returns>The property name.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Subtract`3">
      <summary>Computes the difference between two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Subtract`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Subtract`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Checked">
      <summary>Gets or sets a value that indicates whether the subtraction executes in a checked context.</summary>
      <returns>true if the subtraction executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypeFieldReference`2">
      <summary>Represents a field on a value type that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The value type.</typeparam>
      <typeparam name="TResult">The field type.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypeFieldReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ValueTypeFieldReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeFieldReference`2.FieldName">
      <summary>Gets or sets the name of the field.</summary>
      <returns>The name of the field.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeFieldReference`2.OperandLocation">
      <summary>Gets or sets the instance of the value type that contains the field.</summary>
      <returns>The instance of the value type that contains the field.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypeIndexerReference`2">
      <summary>Represents an element referenced by an indexer on a value type that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The value type with the indexer.</typeparam>
      <typeparam name="TItem">The type of indexer array.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypeIndexerReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ValueTypeIndexerReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeIndexerReference`2.Indices">
      <summary>Gets a collection of arguments that represent the indices of the element in the indexer array.</summary>
      <returns>The indices of the element in the indexer array.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeIndexerReference`2.OperandLocation">
      <summary>Gets or sets the instance of the value type that contains the indexer.</summary>
      <returns>The instance of the value type that contains the indexer.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypePropertyReference`2">
      <summary>Represents a property on a value type that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The value type.</typeparam>
      <typeparam name="TResult">The property type.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypePropertyReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ValueTypePropertyReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypePropertyReference`2.OperandLocation">
      <summary>Gets or sets the instance of the value type that contains the property.</summary>
      <returns>The instance of the value type that contains the property.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypePropertyReference`2.PropertyName">
      <summary>Gets or sets the name of the property.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="T:System.Activities.Expressions.VariableReference`1">
      <summary>Represents a <see cref="T:System.Activities.Variable" /> used as an l-value in an expression.</summary>
      <typeparam name="T">The type of the <see cref="T:System.Activities.Expressions.VariableReference`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableReference`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableReference`1" /> class using the specified variable.</summary>
      <param name="variable">The value of the expression.</param>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.VariableReference`1" />.</summary>
      <returns>The variable reference.</returns>
    </member>
    <member name="P:System.Activities.Expressions.VariableReference`1.Variable">
      <summary>Gets or sets the <see cref="T:System.Activities.Variable" /> represented by the <see cref="T:System.Activities.Expressions.VariableReference`1" />.</summary>
      <returns>The variable.</returns>
    </member>
    <member name="T:System.Activities.Expressions.VariableValue`1">
      <summary>Represents a <see cref="T:System.Activities.Variable" /> used as an r-value in an expression.</summary>
      <typeparam name="T">The type of the <see cref="T:System.Activities.Expressions.VariableValue`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableValue`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableValue`1" /> class using the specified variable.</summary>
      <param name="variable">The value of the expression.</param>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.VariableValue`1" />.</summary>
      <returns>The value of the variable.</returns>
    </member>
    <member name="P:System.Activities.Expressions.VariableValue`1.Variable">
      <summary>Gets or sets the <see cref="T:System.Activities.Variable" /> represented by the <see cref="T:System.Activities.Expressions.VariableValue`1" />.</summary>
      <returns>The variable.</returns>
    </member>
    <member name="T:System.Activities.Hosting.BookmarkInfo">
      <summary>Represents information about a named <see cref="T:System.Activities.Bookmark" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.BookmarkName">
      <summary>Gets the name associated with the <see cref="T:System.Activities.Bookmark" />.</summary>
      <returns>The name associated with the <see cref="T:System.Activities.Bookmark" />.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.OwnerDisplayName">
      <summary>Gets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>A friendly name that is used for debugging, validation, exception handling, and tracking.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.ScopeInfo">
      <summary>Gets the <see cref="T:System.Activities.Hosting.BookmarkScopeInfo" /> of the <see cref="T:System.Activities.BookmarkScope" /> associated with the <see cref="T:System.Activities.Bookmark" />.</summary>
      <returns>The bookmark scope information of the <see cref="T:System.Activities.BookmarkScope" /> associated with the <see cref="T:System.Activities.Bookmark" />.</returns>
    </member>
    <member name="T:System.Activities.Hosting.BookmarkScopeInfo">
      <summary>Contains identification and initialization information about a <see cref="T:System.Activities.BookmarkScope" /> object.</summary>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.Id">
      <summary>Gets the unique identifier for the <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>The unique identifier for the <see cref="T:System.Activities.BookmarkScope" />.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.IsInitialized">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.BookmarkScope" /> has been initialized.</summary>
      <returns>true if the <see cref="T:System.Activities.BookmarkScope" /> has been initialized; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.TemporaryId">
      <summary>Gets a value that uniquely identifies the <see cref="T:System.Activities.BookmarkScope" /> when the <see cref="T:System.Activities.BookmarkScope" /> is in an uninitialized state.</summary>
      <returns>A value that uniquely identifies the <see cref="T:System.Activities.BookmarkScope" /> when the <see cref="T:System.Activities.BookmarkScope" /> is in an uninitialized state.</returns>
    </member>
    <member name="T:System.Activities.Hosting.IWorkflowInstanceExtension">
      <summary>This interface is implemented by composite extensions, or extensions that need access to the workflow instance. Implementers of this interface will be called by the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> prior to execution in order to provide additional extensions, or get access to the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> through the <see cref="T:System.Activities.Hosting.WorkflowInstanceProxy" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions">
      <summary>When implemented, returns any additional extensions the implementing class requires.</summary>
      <returns>A collection of additional workflow extensions.</returns>
    </member>
    <member name="M:System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
      <summary>Sets the specified target <see cref="T:System.Activities.Hosting.WorkflowInstanceProxy" />.</summary>
      <param name="instance">The target workflow instance to set.</param>
    </member>
    <member name="T:System.Activities.Hosting.LocationInfo">
      <summary>Provides information about a related <see cref="T:System.Activities.Location" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.Name">
      <summary>Gets a <see cref="T:System.String" /> value that identifies the related <see cref="T:System.Activities.Location" />.</summary>
      <returns>The related location.</returns>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.OwnerDisplayName">
      <summary>Gets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>An optional friendly name that is used for debugging, validation, exception handling, and tracking.</returns>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.Value">
      <summary>Gets the value stored at the related <see cref="T:System.Activities.Location" />.</summary>
      <returns>The value stored at the related <see cref="T:System.Activities.Location" />.</returns>
    </member>
    <member name="T:System.Activities.Hosting.SymbolResolver">
      <summary>
        <see cref="T:System.Activities.Hosting.SymbolResolver" /> is an extension for providing a host <see cref="T:System.Activities.LocationReferenceEnvironment" /> containing objects that can be dereferenced by a string name.  Values provided through a <see cref="T:System.Activities.Hosting.SymbolResolver" /> are not persisted.  Persistence of <see cref="T:System.Activities.Hosting.SymbolResolver" /> values is a host responsibility.</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Hosting.SymbolResolver" /> class.</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds a symbol using the specified key/value pair.</summary>
      <param name="item">The symbol to add.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object)">
      <summary>Adds a symbol using the specified symbol name and value.</summary>
      <param name="key">The name of the symbol.</param>
      <param name="value">The value of the symbol to reference.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object,System.Type)">
      <summary>Adds a symbol using the specified symbol name, value, and type.</summary>
      <param name="key">The name of the symbol.</param>
      <param name="value">The value of the symbol to reference.</param>
      <param name="type">The type of the symbol value.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Type)">
      <summary>Adds a symbol using the specified symbol name and type.</summary>
      <param name="key">The name of the symbol.</param>
      <param name="type">The type of the symbol value.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.AsLocationReferenceEnvironment">
      <summary>Returns a <see cref="T:System.Activities.LocationReferenceEnvironment" /> instance that enables access to references of symbol values in <see cref="T:System.Activities.Hosting.SymbolResolver" /> represented as <see cref="T:System.Activities.LocationReference" /> objects.</summary>
      <returns>A location reference that enables access to references to symbol values in <see cref="T:System.Activities.Hosting.SymbolResolver" /> represented as <see cref="T:System.Activities.LocationReference" /> objects.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Clear">
      <summary>Removes all symbols from the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Returns a value that indicates whether the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains the specified symbol.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains the specified symbol; otherwise, false.</returns>
      <param name="item">The symbol as a key/value pair to locate in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.ContainsKey(System.String)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains a symbol with the specified key.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains a symbol with the specified key; otherwise, false.</returns>
      <param name="key">The key of the symbol to locate.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the symbols in the <see cref="T:System.Activities.Hosting.SymbolResolver" /> to an existing one-dimensional array of key/value pairs, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array of key/value pairs to copy the symbols to. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in the destination array at which copying begins.</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Count">
      <summary>Gets the number of symbols contained in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>The number of symbols contained in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.</summary>
      <returns>An enumerator that iterates through a collection of key/value pairs.</returns>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.IsReadOnly">
      <summary>Gets a value that indicates whether the dictionary of symbols in the <see cref="T:System.Activities.Hosting.SymbolResolver" /> is read-only.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Item(System.String)">
      <summary>Gets or sets the value of the item associated with the specified key.</summary>
      <returns>The value of the item associated with the specified key.</returns>
      <param name="key">The key of the item.</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Keys">
      <summary>Gets a collection of all keys in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>A collection of all keys in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the specified symbol from the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>true if the symbol is successfully found and removed; otherwise, false. This method returns false if the symbol is not present.</returns>
      <param name="item">The symbol to remove.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Remove(System.String)">
      <summary>Removes a symbol from the <see cref="T:System.Activities.Hosting.SymbolResolver" /> using a specified key.</summary>
      <returns>true if the symbol is successfully found and removed; otherwise, false. This method returns false if the symbol is not present.</returns>
      <param name="key">The key of the symbol to remove.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.</summary>
      <returns>An enumerator that iterates through a collection of key/value pairs.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.TryGetValue(System.String,System.Object@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Values">
      <summary>Gets a collection of all values in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>A collection of all values in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstance">
      <summary>
        <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is a lightweight, per-instance runtime for executing a workflow program. It can be constructed to create a new workflow instance or from existing instance state. The APIs that <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> exposes are the minimal set of runtime controls from which higher level operations can be implemented. This API set represents the entire breadth of functionality of the runtime. <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is an abstract class and relies on a host’s implementation of its abstract methods in order to provide host functionality such as synchronization, persistence, tracking, and extensions.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> class with the specified workflow definition.</summary>
      <param name="workflowDefinition">The activity that defines the workflow.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.Controller">
      <summary>Gets the <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instance for this <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>The controller instance for this workflow instance.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.DisposeExtensions">
      <summary>Calls <see cref="M:System.Disposable.Dispose" /> on all extensions that implement <see cref="T:System.IDisposable" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.GetExtension``1">
      <summary>Returns an extension of the specified type.</summary>
      <returns>An extension of the specified type.</returns>
      <typeparam name="T">The type of the extension to find.</typeparam>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.GetExtensions``1">
      <summary>Returns all extensions found for the specified type.</summary>
      <returns>All extensions found for the specified type.</returns>
      <typeparam name="T">The type of the extension to find.</typeparam>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.HostEnvironment">
      <summary>Gets or sets the root environment for the workflow instance’s arguments and variables.</summary>
      <returns>The root environment for the workflow instance’s arguments and variables.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.Id">
      <summary>Gets the unique identifier for the workflow instance.</summary>
      <returns>The unique identifier for the workflow instance.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})">
      <summary>Called by the host to initialize the workflow instance with the argument values and execution properties.</summary>
      <param name="workflowArgumentValues">The input parameters to the workflow, keyed by argument name.</param>
      <param name="workflowExecutionProperties">The list of workflow execution properties.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Object)">
      <summary>Called by the host to initialize the workflow instance with the workflow run-time state.</summary>
      <param name="deserializedRuntimeState">The run-time state used to execute the workflow.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.IsReadOnly">
      <summary>Gets a value that indicates whether the workflow instance has been initialized.</summary>
      <returns>true if the workflow instance has been initialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)">
      <summary>Called by the workflow runtime to notify the host that new instance keys should be associated with this instance.</summary>
      <returns>A reference to the asynchronous associate keys operation.</returns>
      <param name="keys">The instance keys to associate with this workflow instance.</param>
      <param name="callback">The method to be called when the operation completes.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)">
      <summary>Asynchronous call to ask host to flush pending tracking records to tracking participants.</summary>
      <returns>The status of the current track operation.</returns>
      <param name="callback">The method to be called when the track operation has completed.</param>
      <param name="state">The information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginPersist(System.AsyncCallback,System.Object)">
      <summary>Asynchronous call to ask the host to persist the workflow.</summary>
      <returns>A reference to the current persist operation.</returns>
      <param name="callback">The method to be called when the persist operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Called by the workflow runtime to notify the host that a resume bookmark operation is beginning.</summary>
      <returns>A reference to the asynchronous resume operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">The data to be passed to the activity that created the <see cref="T:System.Activities.Bookmark" />.</param>
      <param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})">
      <summary>Called by the workflow runtime to notify the host that a certain set of instance keys should no longer be associated with this instance.</summary>
      <param name="keys">The list of keys to disassociate.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host that an associate keys operation is complete.</summary>
      <param name="result">The reference to the asynchronous associate keys operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host when the flush tracking records operation is complete. </summary>
      <param name="result">The status of the asynchronous flush tracking records operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndPersist(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host that a persist operation is complete.</summary>
      <param name="result">The reference to the asynchronous persist operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host that a resume bookmark operation is complete.</summary>
      <returns>One of the enumeration values that indicates the result of a <see cref="T:System.Activities.Bookmark" /> resume operation.</returns>
      <param name="result">The reference to the asynchronous resume bookmark operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused">
      <summary>Called by the workflow runtime to notify the host that the workflow instance has transitioned from the running state to the paused state.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)">
      <summary>Called by the workflow runtime to notify the host an unhandled exception has occurred in the workflow instance.</summary>
      <param name="exception">The unhandled exception.</param>
      <param name="source">The activity that threw the exception.</param>
      <param name="sourceInstanceId">The unique identifier of the <see cref="T:System.Activities.ActivityInstance" /> representing the activity that threw the exception.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnRequestAbort(System.Exception)">
      <summary>Called by the workflow runtime to notify the host that an abort operation has been requested for the workflow instance.</summary>
      <param name="reason">The reason for aborting the workflow instance.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)">
      <summary>Called by the host to register the specified extension manager, validate that all required extensions are present, and to initialize the collection of extensions to be used.</summary>
      <param name="extensionManager">The extension manager to register.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys">
      <summary>Gets a value that indicates whether the host supports the association of <see cref="P:System.Runtime.Persistence.InstanceView.InstanceKeys" /> with a run-time instance.</summary>
      <returns>true if the host supports the association of <see cref="P:System.Runtime.Persistence.InstanceView.InstanceKeys" /> with a workflow instance; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.SynchronizationContext">
      <summary>Gets or sets the <see cref="T:System.Threading.SynchronizationContext" /> used for scheduling the workflow instance.</summary>
      <returns>The synchronization context used for scheduling the workflow instance.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly">
      <summary>Throws an <see cref="T:System.InvalidOperationException" /> if the workflow instance has been initialized, as determined by <see cref="P:System.Activities.Hosting.WorkflowInstance.IsReadOnly" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowDefinition">
      <summary>Gets the workflow definition of the workflow instance.</summary>
      <returns>The workflow definition of the workflow instance.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl">
      <summary>Provides methods for <see cref="T:System.Activities.Hosting.WorkflowInstance" /> derived classes to access the functionality of the workflow runtime.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort">
      <summary>Aborts the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort(System.Exception)">
      <summary>Aborts the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> using the specified exception.</summary>
      <param name="reason">The reason for aborting the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Called by the workflow runtime to begin sending pending tracking records to tracking participants asynchronously.</summary>
      <returns>The status of the current track operation.</returns>
      <param name="timeout">The time period after which to abort the attempt.</param>
      <param name="callback">The method to be called when the track operation has completed.</param>
      <param name="state">The information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.EndFlushTrackingRecords(System.IAsyncResult)">
      <summary>Called by the workflow runtime to end the track operation.</summary>
      <param name="result">The status of the asynchronous track operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> is equal to the specified object.</summary>
      <returns>true of the object is equal to the current <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.FlushTrackingRecords(System.TimeSpan)">
      <summary>Called by the workflow runtime to send pending tracking records to tracking participants.</summary>
      <param name="timeout">The time period after which to abort the attempt.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetAbortReason">
      <summary>Returns the exception that causes the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to abort.</summary>
      <returns>The exception that caused the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to abort, or null if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> did not abort.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks">
      <summary>Returns the collection of available bookmarks for the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>A collection of bookmarks for the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks(System.Activities.BookmarkScope)">
      <summary>Returns the collection of available bookmarks for the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> created in the specified <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>The collection of bookmarks created in the specified <see cref="T:System.Activities.BookmarkScope" />.</returns>
      <param name="scope">The bookmark scope to inspect.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState">
      <summary>Returns the final <see cref="T:System.Activities.ActivityInstanceState" /> of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>One of the enumeration members that describes the state of an activity instance.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Exception@)">
      <summary>Returns the final <see cref="T:System.Activities.ActivityInstanceState" /> of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />, including workflow outputs and termination exception.</summary>
      <returns>One of the enumeration members that describes the state of an activity instance.</returns>
      <param name="outputs">When this method returns, <paramref name="outputs" /> contains a dictionary of <see cref="F:System.Activities.ArgumentDirection.Out" /> arguments of the workflow, keyed by argument name. This parameter is passed uninitialized.</param>
      <param name="terminationException">When this method returns, <paramref name="terminationException" /> contains the exception that caused the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to terminate, or null if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> did not terminate. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Exception@)">
      <summary>Returns the final <see cref="T:System.Activities.ActivityInstanceState" /> of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />, including termination exception.</summary>
      <returns>One of the enumeration members that describes the state of an activity instance.</returns>
      <param name="terminationException">When this method returns, <paramref name="terminationException" /> contains the exception that caused the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to terminate, or null if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> did not terminate. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />.</summary>
      <returns>The hash code for this <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetMappedVariables">
      <summary>Returns a dictionary of variables in the current scope that have been specified with <see cref="F:System.Activities.VariableModifiers.Mapped" />.</summary>
      <returns>A dictionary of mapped variables currently in scope.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.HasPendingTrackingRecords">
      <summary>Called by the workflow runtime to determine whether this workflow instance has pending tracking records and a tracking participant.</summary>
      <returns>true if this workflow instance has pending tracking records and a tracking participant; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.IsPersistable">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is in a state where it can be persisted.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> can be persisted; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Equality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are equal.</summary>
      <returns>true if the two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are equal; otherwise, false. </returns>
      <param name="left">The first <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Inequality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are not equal.</summary>
      <returns>true if the two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are not equal; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable">
      <summary>Requests that the workflow runtime pause the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> at the next point of execution where it is possible to persist. Note that the scheduler queue may not be empty at this point.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PrepareForSerialization">
      <summary>Prepares the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> state for serialization.</summary>
      <returns>A workflow instance state.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause">
      <summary>Requests that the scheduler stops.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run">
      <summary>Instructs the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to begin execution.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object)">
      <summary>Schedules a bookmark resumption with the specified value.</summary>
      <returns>One of the enumeration values that indicates the result of a <see cref="T:System.Activities.Bookmark" /> scheduling operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">The data to be passed to the activity that created the <see cref="T:System.Activities.Bookmark" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object,System.Activities.BookmarkScope)">
      <summary>Schedules a <see cref="T:System.Activities.Bookmark" /> resumption from the specified <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>One of the enumeration values that indicates the result of a <see cref="T:System.Activities.Bookmark" /> scheduling operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">The data to be passed to the activity that created the <see cref="T:System.Activities.Bookmark" />.</param>
      <param name="scope">The <see cref="T:System.Activities.Bookmark" /> under which the <see cref="T:System.Activities.Bookmark" /> was created.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleCancel">
      <summary>Schedules the cancellation of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State">
      <summary>Gets the state of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>One of the enumeration values that specifies the state of a <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Terminate(System.Exception)">
      <summary>Transitions the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> into the terminal <see cref="F:System.Activities.ActivityInstanceState.Faulted" /> state using the specified exception.</summary>
      <param name="reason">The exception that is the reason for terminating the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Track(System.Activities.Tracking.WorkflowInstanceRecord)">
      <summary>Called by the workflow runtime to add the specified pending record to the list of pending records.</summary>
      <param name="instanceRecord">The tracking record to add.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.TrackingEnabled">
      <summary>Called by the workflow runtime to determine whether tracking is enabled in this workflow instance.</summary>
      <returns>true if tracking is enabled in this workflow instance; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceExtensionManager">
      <summary>Manages a collection of extensions for a <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Hosting.WorkflowInstanceExtensionManager" /> class.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add``1(System.Func{``0})">
      <summary>Adds an extension to the collection of extensions using the specified <see cref="T:System.Func`1" />.</summary>
      <param name="extensionCreationFunction">The method that creates the extension.</param>
      <typeparam name="T">The type of extension to add.</typeparam>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add(System.Object)">
      <summary>Adds the specified extension to the collection of extensions.</summary>
      <param name="singletonExtension">The extension to add.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly">
      <summary>Marks the collection of extensions as read-only.</summary>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceProxy">
      <summary>A class that allows <see cref="T:System.Activities.Hosting.IWorkflowInstanceExtensions" /> extensions access to the workflow service host.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
      <summary>Resumes a workflow from a bookmark asynchronously using the specified bookmark, value, callback method, and user-provided state data.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="bookmark">The bookmark.</param>
      <param name="value">The data to be passed to the activity that created the bookmark.</param>
      <param name="callback">The method to be called when the asynchronous resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Resumes a workflow from a bookmark asynchronously using the specified bookmark, value, time-out interval, callback method, and user-provided state. </summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="bookmark">The bookmark.</param>
      <param name="value">The data to be passed to the activity that created the bookmark.</param>
      <param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.EndResumeBookmark(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous <see cref="Overload:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark" /> to complete.</summary>
      <returns>Returns <see cref="T:System.Activities.BookmarkResumptionResult" />.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that references the resume operation.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstanceProxy.Id">
      <summary>Gets the workflow instance ID.</summary>
      <returns>The workflow instance ID.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstanceProxy.WorkflowDefinition">
      <summary>Gets the workflow definition.</summary>
      <returns>The workflow definition.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceState">
      <summary>Specifies the state of a <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Idle">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is idle.</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Runnable">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> can be run.</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Complete">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is complete.</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Aborted">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is aborted.</summary>
    </member>
    <member name="T:System.Activities.Persistence.PersistenceIOParticipant">
      <summary>A derived vclass of the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class with methods that perform input and output operations in addition to the persisting and loading of workflow instances through the persistence process.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes an instance of the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> class.</summary>
      <param name="isSaveTransactionRequired">true if a transaction is required for the Save operation. If the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> object is created with this parameter set to true,  Transaction.Current is guaranteed to be set when BeginOnSave is invoked. The transaction is shared between the persistence provider, all PersistenceIOParticipant extensions, and potentially other transaction participants.</param>
      <param name="isLoadTransactionRequired">true if a transaction is required for the Load operation. If the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> object is created with this parameter set to true,  Transaction.Current is guaranteed to be set  when BeginOnLoad is invoked. The transaction is shared between the persistence provider, all PersistenceIOParticipant extensions, and potentially other transaction participants.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.Abort">
      <summary>Aborts the pending IO (Load or Save) operation.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnLoad(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to load additional state in conjunction with an instance being loaded from the instance store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="readWriteValues">A dictionary of read-write values loaded by the persistence provider. This corresponds to the set of read-write values passed to BeginOnSave in the most recent persistence episode for this instance.</param>
      <param name="timeout">The time span within which the operation should be completed without timing out. </param>
      <param name="callback">The asynchronous callback delegate that receives notification of the completion of the asynchronous Load operation.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to save additional state in conjunction with an instance being persisted to the instance store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="readWriteValues">A dictionary of read-write values collected in the CollectValues and MapValues stages.</param>
      <param name="writeOnlyValues">A dictionary of write-only values collected in the CollectValues and MapValues stages.</param>
      <param name="timeout">The time span within which the operation should be completed without timing out. </param>
      <param name="callback">The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.EndOnLoad(System.IAsyncResult)">
      <summary>Completes the asynchronous Load operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.EndOnSave(System.IAsyncResult)">
      <summary>Completes the asynchronous Save operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="T:System.Activities.Persistence.PersistenceParticipant">
      <summary>This class allows both <see cref="T:System.Activities.WorkflowApplication" /> and <see cref="T:System.ServiceModel.WorkflowServiceHost" /> to participate in persistence process. A persistence participant derives from the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class or the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> class (derived class of the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class), implements abstract methods, and then add an instance of the class as a workflow instance extension. The <see cref="T:System.Activities.WorkflowApplication" /> and <see cref="T:System.ServiceModel.WorkflowServiceHost" /> look for such extensions when persisting an instance and invoke appropriate methods at appropriate times.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)">
      <summary>A host invokes this method on a custom persistence participant to collect read-write values and write-only values, to be persisted. </summary>
      <param name="readWriteValues">The read-write values to be persisted.</param>
      <param name="writeOnlyValues">The write-only values to be persisted.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>A host invokes this method after it is done with collecting the values in the first stage. The host forwards two read-only dictionaries of values it collected from all persistence participants during the first stage (CollectValues stage) to this method for mapping. The host adds values in the dictionary returned by this method to the collection of write-only values.</summary>
      <returns>A dictionary containing additional write-only values to be persisted.</returns>
      <param name="readWriteValues">The read-write values to be persisted.</param>
      <param name="writeOnlyValues">The write-only values to be persisted.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>The host invokes this method and passes all the loaded values in the <see cref="P:System.Activities.Persistence.SaveWorkflowCommand.InstanceData" /> collection (filled by the <see cref="T:System.Activities.Persistence.LoadWorkflowCommand" /> or <see cref="T:System.Activities.Persistence.LoadWorkflowByInstanceKeyCommand" />) as a dictionary parameter. </summary>
      <param name="readWriteValues">The read-write values that were loaded from the persistence store. This dictionary corresponds to the dictionary of read-write values persisted in the most recent persistence episode.</param>
    </member>
    <member name="T:System.Activities.Statements.AddToCollection`1">
      <summary>Adds an item to a specified collection.</summary>
      <typeparam name="T">The type of elements in the specified collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.AddToCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.AddToCollection`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.AddToCollection`1.Collection">
      <summary>The collection that receives the new item.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.AddToCollection`1.Item">
      <summary>The item to add to the specified collection.</summary>
      <returns>The item.</returns>
    </member>
    <member name="T:System.Activities.Statements.Assign">
      <summary>Sets <see cref="T:System.Activities.Argument" /> values from within a workflow.</summary>
    </member>
    <member name="M:System.Activities.Statements.Assign.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Assign" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Assign.To">
      <summary>Specifies the <see cref="T:System.Activities.Argument" /> that the activity assigns its <see cref="P:System.Activities.Statements.Assign.Value" /> to.</summary>
      <returns>The specified <see cref="T:System.Activities.Argument" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Assign.Value">
      <summary>Specifies the value that is assigned.</summary>
      <returns>The value to be assigned.</returns>
    </member>
    <member name="T:System.Activities.Statements.Assign`1">
      <summary>The <see cref="T:System.Activities.Statements.Assign" /> activity is used to set <see cref="T:System.Activities.Argument" /> values from within a workflow.</summary>
      <typeparam name="T">The type of the assigned value.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Assign`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Assign`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Assign`1.To">
      <summary>Specifies the <see cref="T:System.Activities.Argument" /> that the activity assigns its <see cref="P:System.Activities.Statements.Assign.Value" /> to.</summary>
      <returns>The specified <see cref="T:System.WorkflowModel.Argument" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Assign`1.Value">
      <summary>Specifies the value that is assigned.</summary>
      <returns>The value to be assigned.</returns>
    </member>
    <member name="T:System.Activities.Statements.CancellationScope">
      <summary>Associates cancellation logic, in the form of a <see cref="T:System.Activities.Activity" />, with a main path of execution, also expressed as a <see cref="T:System.Activities.Activity" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.CancellationScope.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.CancellationScope" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.Body">
      <summary>Gets the <see cref="T:System.Activities.Activity" /> contained by the <see cref="T:System.Activities.Statements.CancellationScope" /> that represents the main path of execution.</summary>
      <returns>The main path of execution.</returns>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.CancellationHandler">
      <summary>The <see cref="T:System.Activities.Activity" /> that is executed in the event of cancellation.</summary>
      <returns>The cancellation handler.</returns>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.Variables">
      <summary>Gets the collection of <see cref="T:System.Activities.Activity" /> objects associated with the <see cref="T:System.Activities.Statements.CancellationScope" />.</summary>
      <returns>The collection of <see cref="T:System.Activities.Activity" /> objects associated with the <see cref="T:System.Activities.Statements.CancellationScope" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.Catch">
      <summary>Contains the actions to be executed after an exception is thrown in the corresponding Try block of a <see cref="T:System.Activities.Statements.TryCatchFinally" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.Catch.ExceptionType">
      <summary>The type of exception that the <see cref="T:System.Activities.Statements.Catch" /> block is handling.</summary>
      <returns>The exception type.</returns>
    </member>
    <member name="T:System.Activities.Statements.Catch`1">
      <summary>Contains the actions to be executed after an exception is raised in the corresponding Try block of a <see cref="T:System.Activities.Statements.TryCatchFinally" /> activity.</summary>
      <typeparam name="TException">The type of exception that the <see cref="T:System.Activities.Statements.Catch`1" /> block is handling.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Catch`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Catch`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Catch`1.Action">
      <summary>The handler for the exception being caught. </summary>
      <returns>The activity action.</returns>
    </member>
    <member name="P:System.Activities.Statements.Catch`1.ExceptionType">
      <summary>The type of exception that the <see cref="T:System.Activities.Statements.Catch" /> block is handling.</summary>
      <returns>The exception type.</returns>
    </member>
    <member name="T:System.Activities.Statements.ClearCollection`1">
      <summary>Clears a specified collection of all items.</summary>
      <typeparam name="T">The type of the elements in the <see cref="P:System.Activities.Statements.ClearCollection`1.Collection" /> parameter.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ClearCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="M:System.Activities.Statements.ClearCollection`1.#ctor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.ClearCollection`1.Collection">
      <summary>The collection to be cleared of contents.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.CompensableActivity">
      <summary>An activity that supports compensation of its child activities.</summary>
    </member>
    <member name="M:System.Activities.Statements.CompensableActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.CompensableActivity" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.Activities.Statements.CompensableActivity" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.Activities.Statements.CompensableActivity" /> executes.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.CancellationHandler">
      <summary>Gets or sets the activity that is scheduled when the activity is canceled.</summary>
      <returns>The activity that is scheduled when the activity is canceled.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.CompensationHandler">
      <summary>Gets or sets the activity that is scheduled when compensation is performed on the <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
      <returns>The activity that is scheduled when compensation is performed on the <see cref="T:System.Activities.Statements.CompensableActivity" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.ConfirmationHandler">
      <summary>Gets or sets the activity that is scheduled when confirmation is performed for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
      <returns>The activity that is scheduled when confirmation is performed for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.Variables">
      <summary>Gets the collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
      <returns>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.Compensate">
      <summary>An activity used to explicitly invoke the compensation handler of a <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.Compensate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.Compensate" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Compensate.Target">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Compensate" /> activity.</summary>
      <returns>
A <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Compensate" />.
</returns>
    </member>
    <member name="T:System.Activities.Statements.CompensationToken">
      <summary>Provides a means to explicitly confirm or compensate a <see cref="T:System.Activities.Statements.CompensableActivity" /> once the <see cref="P:System.Activities.Statements.CompensableActivity.Body" /> of the <see cref="T:System.Activities.Statements.CompensableActivity" /> has successfully completed.</summary>
    </member>
    <member name="T:System.Activities.Statements.Confirm">
      <summary>An activity used to explicitly invoke the confirmation handler of a <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.Confirm.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.Confirm" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Confirm.Target">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Confirm" /> activity.</summary>
      <returns>The <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Confirm" /> activity.</returns>
    </member>
    <member name="T:System.Activities.Statements.CreateBookmarkScope">
      <summary>Creates a <see cref="T:System.Activities.BookmarkScope" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.CreateBookmarkScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.CreateBookmarkScope" /> class.</summary>
    </member>
    <member name="T:System.Activities.Statements.Delay">
      <summary>Creates a timer for a specified duration, using a <see cref="T:System.Activities.Statements.TimerExtension" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.Delay.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Delay" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.Delay.Duration">
      <summary>The duration of the timer that the <see cref="T:System.Activities.Statements.Delay" /> activity creates.</summary>
      <returns>The timer duration.</returns>
    </member>
    <member name="T:System.Activities.Statements.DeleteBookmarkScope">
      <summary>Deletes the <see cref="T:System.Activities.BookmarkScope" /> referenced by <see cref="P:System.Activities.Statements.DeleteBookmarkScope.Scope" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.DeleteBookmarkScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.DeleteBookmarkScope" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.DeleteBookmarkScope.Scope">
      <summary>Gets or sets the associated <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>The associated <see cref="T:System.Activities.BookmarkScope" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.DoWhile">
      <summary>A looping activity that executes contained activities at least once, until a condition is no longer true.</summary>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class.</summary>
      <param name="condition">The condition under which the activity continues to iterate.</param>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class.</summary>
      <param name="condition">The condition under which the activity continues to iterate.</param>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Body">
      <summary>The child activity to be executed with every iteration.</summary>
      <returns>The child activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Condition">
      <summary>The <see cref="T:System.Activities.Activity’1" /> checked at the end of the loop to determine whether the loop is executed again.</summary>
      <returns>The condition for re-executing the loop.</returns>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Variables">
      <summary>The collection of <see cref="T:System.Activity.Variable" /> objects associated with the <see cref="T:System.Activities.Statements.DoWhile" /> activity.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.DurableTimerExtension">
      <summary>Represents an activity timer extension that can be persisted. </summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DurableTimerExtension" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.Dispose">
      <summary>Terminates all registered timers.</summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.GetAdditionalExtensions">
      <summary>Returns an enumerator that iterates over the collection of timer extensions.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.OnCancelTimer(System.Activities.Bookmark)">
      <summary>Removes a timer object from the table of registered timers for the current workflow operation.</summary>
      <param name="bookmark">A point at which a workflow or activity can passively wait to be resumed following the expiration of the timer object.</param>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.OnRegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>Adds a timer object that contains the specified time span and bookmark information to the table of registered timers for the current workflow operation.</summary>
      <param name="timeout">A time span object that is added to the timer registration table entry in a workflow operation along with callback information.</param>
      <param name="bookmark">A point at which a workflow or activity can passively wait to be resumed following the expiration of a timer object.</param>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
      <summary>Establishes the specified workflow instance as the current instance.</summary>
      <param name="instance">The workflow instance to make current.</param>
    </member>
    <member name="T:System.Activities.Statements.ExistsInCollection`1">
      <summary>Indicates whether a given item is present in a given collection.</summary>
      <typeparam name="T">The type of elements in the specified collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ExistsInCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.ExistsInCollection`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.ExistsInCollection`1.Collection">
      <summary>The collection to be searched for the specified element.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.ExistsInCollection`1.Item">
      <summary>The item to search the specified collection for.</summary>
      <returns>The item.</returns>
    </member>
    <member name="T:System.Activities.Statements.Flowchart">
      <summary>Models workflows using the familiar flowchart paradigm</summary>
    </member>
    <member name="M:System.Activities.Statements.Flowchart.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Flowchart" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.Nodes">
      <summary>The collection of <see cref="T:System.Activities.Statements.FlowNode" /> objects contained by the flowchart.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.StartNode">
      <summary>The <see cref="T:System.Activities.Statements.FlowNode" /> to be executed when the flowchart starts.</summary>
      <returns>The starting node.</returns>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.Variables">
      <summary>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects associated with the <see cref="T:System.Activities.Statements.Flowchart" />, which are available to share state across the child activities contained within the Flowchart.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowDecision">
      <summary>A specialized <see cref="T:System.Activities.Statements.FlowNode" /> that provides the ability to model a conditional node with two outcomes. </summary>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowDecision" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowDecision" /> class with the specified condition.</summary>
      <param name="condition">The condition the <see cref="T:System.Activities.Statements.FlowDecision" /> is testing.</param>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowDecision" /> class with the specified condition.</summary>
      <param name="condition">The condition the <see cref="T:System.Activities.Statements.FlowDecision" /> is testing.</param>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.Condition">
      <summary>Specifies the condition the <see cref="T:System.Activities.Statements.FlowDecision" /> is testing.</summary>
      <returns>A value expression that represents the condition. </returns>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.False">
      <summary>Gets or sets the <see cref="T:System.Activities.Statements.FlowNode" /> that is executed when the condition evaluates to false.</summary>
      <returns>The workflow element that is executed when the condition evaluates to false.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.True">
      <summary>Gets or sets the <see cref="T:System.Activities.Statements.FlowNode" /> that is executed when the condition evaluates to true.</summary>
      <returns>The workflow element to execute when the condition evaluates to true.</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowNode">
      <summary>The abstract base class for all the different node types that can be contained within a <see cref="T:System.Activities.Statements.Flowchart" /> activity.</summary>
    </member>
    <member name="T:System.Activities.Statements.FlowStep">
      <summary>A <see cref="T:System.Activities.Statements.FlowNode" /> element that executes a specified <see cref="P:System.Activities.Statements.FlowStep.Action" /> and has a <see cref="P:System.Activities.Statements.FlowStep.Next" /> pointer. </summary>
    </member>
    <member name="M:System.Activities.Statements.FlowStep.#ctor">
      <summary>Returns a new instance of the <see cref="T:System.Activities.Statements.FlowStep" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.FlowStep.Action">
      <summary>The <see cref="T:System.Activities.Activity" /> that the <see cref="T:System.Activities.Statements.FlowStep" /> executes.</summary>
      <returns>The activity to be executed as part of this step of the flowchart.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowStep.Next">
      <summary>The next <see cref="T:System.Activities.Statements.FlowNode" />in the flowchart to execute after executing the current <see cref="T:System.Activities.Statements.FlowStep" />.</summary>
      <returns>The specified element.</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowSwitch`1">
      <summary>A specialized <see cref="T:System.Activities.Statements.FlowNode" /> that allows modeling a switch construct, with one expression and one outcome for each match.</summary>
      <typeparam name="T">The type of the expression to evaluate against cases. </typeparam>
    </member>
    <member name="M:System.Activities.Statements.FlowSwitch`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowSwitch`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Cases">
      <summary>Gets a dictionary of cases to be processed by the <see cref="T:System.Activities.Statements.FlowSwitch`1" /> element.</summary>
      <returns>The collection of cases.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Default">
      <summary>The <see cref="T:System.Activities.Statements.FlowNode" /> to be executed if no elements in the <see cref="P:System.Activities.Statements.FlowSwitch`1.Cases" /> collection match the result of the evaluation of the <see cref="P:System.Activities.Statements.FlowSwitch`1.Expression" />.</summary>
      <returns>The default <see cref="T:System.Activities.Statements.FlowNode" /> to execute.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Expression">
      <summary>The expression to evaluate against the collection of <see cref="P:System.Activities.Statements.FlowSwitch`1.Cases" />.</summary>
      <returns>The expression to evaluate.</returns>
    </member>
    <member name="T:System.Activities.Statements.ForEach`1">
      <summary>Executes an activity action once for each value provided in the <see cref="P:System.Activities.Statements.ForEach`1.Values" /> collection.</summary>
      <typeparam name="T">The type of the values provided in the <see cref="P:System.Activities.Statements.ForEach`1.Values" /> collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ForEach`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.ForEach`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.ForEach`1.Body">
      <summary>The <see cref="T:System.Activities.ActivityAction" /> to be executed for each item in the <see cref="P:System.Activities.Statements.ForEach`1.Values" /> collection.</summary>
      <returns>The action to be executed.</returns>
    </member>
    <member name="P:System.Activities.Statements.ForEach`1.Values">
      <summary>The activity’s collection of inputs for the execution of the <see cref="P:System.Activities.Statements.ForEach`1.Body" /> activity action.</summary>
      <returns>The collection of values.</returns>
    </member>
    <member name="T:System.Activities.Statements.HandleScope`1">
      <summary>Provides default scoping behavior for <see cref="T:System.Activities.Handle" /> objects.</summary>
      <typeparam name="THandle">The type of the <see cref="P:System.Activities.Statements.HandleScope`1.Handle" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.HandleScope`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.HandleScope`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.HandleScope`1.Body">
      <summary>The activity to be scoped by this activity.</summary>
      <returns>The scoped activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.HandleScope`1.Handle">
      <summary>The <see cref="T:System.Activities.Handle" /> flowed in from a parent scope.</summary>
      <returns>The handle.</returns>
    </member>
    <member name="T:System.Activities.Statements.If">
      <summary>Models an If-Then-Else condition.</summary>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class using the specified condition.</summary>
      <param name="condition">The execution condition.</param>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Activities.InArgument{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class using the specified condition.</summary>
      <param name="condition">The execution condition.</param>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class using the specified condition.</summary>
      <param name="condition">The execution condition.</param>
    </member>
    <member name="P:System.Activities.Statements.If.Condition">
      <summary>The condition that determines which child activity to execute. The <see cref="P:System.Activities.Statements.If.Then" /> activity executes if the condition resolves to true. The <see cref="P:System.Activities.Statements.If.Else" /> activity executes if the condition resolves to false.</summary>
      <returns>The execution condition.</returns>
    </member>
    <member name="P:System.Activities.Statements.If.Else">
      <summary>The activity to be executed if the activity’s <see cref="P:System.Activities.Statements.If.Condition" /> resolves to false.</summary>
      <returns>The child activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.If.Then">
      <summary>The activity to be executed if the activity’s <see cref="P:System.Activities.Statements.If.Condition" /> resolves to true.</summary>
      <returns>The child activity.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction" /> handler.</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`1">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`1" /> handler.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`1.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`1" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`1" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`1" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`1" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`1.Argument">
      <summary>Gets or sets the <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`1" />.</summary>
      <returns>The <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`1" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`10">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`10" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`10.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`10" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`10" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`10" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`11">
      <summary>Invokes an <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`11.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`11" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`11" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`11" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`12">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`12" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`12.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`12" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Action">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`12" /> class.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`13">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`13" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`13.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`13" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`13" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`13" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`14">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`14" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T14">The data type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`14.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`14" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`14" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`14" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument14">
      <summary>Gets or sets the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The fourteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`15">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`15" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T14">The data type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T15">The data type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`15.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`15" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`15" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`15" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument14">
      <summary>Gets or sets the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fourteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument15">
      <summary>Gets or sets the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fifteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`16">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`16" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T14">The data type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T15">The data type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T16">The data type of the sixteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`16.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`16" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`16" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`16" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument14">
      <summary>Gets or sets the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fourteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument15">
      <summary>Gets or sets the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fifteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument16">
      <summary>Gets or sets the sixteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The sixteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`2">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`2" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`2" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`2" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`2" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`2" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`2" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`2" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</summary>
      <returns>The first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</summary>
      <returns>The second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`3">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`3" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`3" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`3" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`3" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`3" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`3" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`3" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`3" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</summary>
      <returns>The first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</summary>
      <returns>The second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</summary>
      <returns>The third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`4">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`4" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`4.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`4" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`4" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`4" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`4" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`5">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`5" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`5.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`5" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`5" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`5" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`6">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`6" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`6.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`6" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`6" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`6" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`7">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`7" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`7.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`7" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`7" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`7" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The seventh argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`8">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`8" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`8.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`8" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`8" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`8" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The seventh argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The eighth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`9">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`9" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`9.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`9" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`9" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`9" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The seventh argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The eighth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The ninth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeDelegate">
      <summary>Invokes the specified <see cref="T:System.Activities.ActivityDelegate" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeDelegate.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.InvokeDelegate" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeDelegate.Delegate">
      <summary>Gets the <see cref="T:System.Activities.ActivityDelegate" /> to invoke.</summary>
      <returns>The delegate.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeDelegate.DelegateArguments">
      <summary>The arguments to be passed to the <see cref="P:System.Activities.Statements.InvokeDelegate.ActivityDelegate" />.</summary>
      <returns>The arguments to be passed to the delegate.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeMethod">
      <summary>Calls a public method of a specified object or type.</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeMethod.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.InvokeMethod" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.GenericTypeArguments">
      <summary>The generic type arguments of the contained method.</summary>
      <returns>The arguments.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.MethodName">
      <summary>The name of the method to be invoked when the activity executes.</summary>
      <returns>The method name.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.Parameters">
      <summary>The parameter collection of the method to be invoked.</summary>
      <returns>The parameter collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.Result">
      <summary>The return value of the method operation.</summary>
      <returns>The operation’s return value.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.RunAsynchronously">
      <summary> Gets or sets a value that indicates whether the activity’s method is invoked asynchronously.</summary>
      <returns>true if the method executes asynchronously.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.TargetObject">
      <summary>The object that contains the method to execute.</summary>
      <returns>The object.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.TargetType">
      <summary>The type of the <see cref="P:System.Activities.Statements.InvokeMethod.TargetObject" />.</summary>
      <returns>The target object type.</returns>
    </member>
    <member name="T:System.Activities.Statements.Parallel">
      <summary>An activity that executes all child activities simultaneously and asynchronously.</summary>
    </member>
    <member name="M:System.Activities.Statements.Parallel.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Parallel" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.Parallel.Branches">
      <summary>The child elements to be executed in parallel.</summary>
      <returns>The elements.</returns>
    </member>
    <member name="P:System.Activities.Statements.Parallel.CompletionCondition">
      <summary>Evaluates after any branch completes. </summary>
      <returns>The completion expression.</returns>
    </member>
    <member name="P:System.Activities.Statements.Parallel.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The contained variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.ParallelForEach`1">
      <summary>Enumerates the elements of a collection and executes an embedded statement for each element of the collection in parallel.</summary>
      <typeparam name="T">The type of the values provided in the <see cref="P:System.Activities.Statements.ParallelForEach`1.Values" /> collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ParallelForEach`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.ParallelForEach`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.Body">
      <summary>The <see cref="T:System.Activities.ActivityAction" /> that is executed once for every value contained in the <see cref="P:System.Activities.Statements.ParallelForEach`1.Values" /> collection.</summary>
      <returns>The contained activity action.</returns>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.CompletionCondition">
      <summary>Evaluated after each iteration completes. </summary>
      <returns>The completion expression.</returns>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.Values">
      <summary>The collection of values used as parameters for each iteration of the activity contained in the <see cref="P:System.Activities.Statements.ParallelForEach`1.Body" />.</summary>
      <returns>The collection of values.</returns>
    </member>
    <member name="T:System.Activities.Statements.Persist">
      <summary>Requests that a workflow instance persist.</summary>
    </member>
    <member name="M:System.Activities.Statements.Persist.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Persist" /> class.</summary>
    </member>
    <member name="T:System.Activities.Statements.Pick">
      <summary>Provides event-based control flow modeling. </summary>
    </member>
    <member name="M:System.Activities.Statements.Pick.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Pick" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Pick.Branches">
      <summary>The collection of <see cref="T:System.Activities.Statements.PickBranch" /> objects that the <see cref="T:System.Activities.Statements.Pick" /> activity potentially executes one of, based on incoming events.</summary>
      <returns>The branch collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.PickBranch">
      <summary>A potential path of execution within a <see cref="T:System.Activities.Statements.Pick" /> activity.</summary>
    </member>
    <member name="M:System.Activities.Statements.PickBranch.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.PickBranch" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Action">
      <summary>The <see cref="T:System.Activities.Activity" /> to execute if this branch is triggered for execution.</summary>
      <returns>An <see cref="T:System.Activities.Activity" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.DisplayName">
      <summary>The name of this branch to be displayed in the activity designer.</summary>
      <returns>The branch name.</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Trigger">
      <summary>The activity whose completion activates this pick branch.</summary>
      <returns>The triggering activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Variables">
      <summary>The collection of user-defined variables associated with this activity.</summary>
      <returns>The variable collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.RemoveFromCollection`1">
      <summary>Removes an item from a specified collection.</summary>
      <typeparam name="T">The type of elements in the specified collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.RemoveFromCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.RemoveFromCollection`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.RemoveFromCollection`1.Collection">
      <summary>The collection from which to remove the <see cref="P:System.Activities.Statements.RemoveFromCollection`1.Item" />.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.RemoveFromCollection`1.Item">
      <summary>The item to remove from the specified <see cref="P:System.Activities.Statements.RemoveFromCollection`1.Collection" />.</summary>
      <returns>The item to remove.</returns>
    </member>
    <member name="T:System.Activities.Statements.Rethrow">
      <summary>Throws a previously thrown exception from within a <see cref="T:System.Activities.Statements.Catch" /> activity.</summary>
    </member>
    <member name="M:System.Activities.Statements.Rethrow.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Rethrow" /> activity.</summary>
    </member>
    <member name="T:System.Activities.Statements.Sequence">
      <summary>Executes a set of child activities according to a single, defined ordering.</summary>
    </member>
    <member name="M:System.Activities.Statements.Sequence.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Sequence" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Sequence.Activities">
      <summary>The collection of contained activities to be executed in sequence.</summary>
      <returns>The activities.</returns>
    </member>
    <member name="P:System.Activities.Statements.Sequence.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.Switch`1">
      <summary>Selects one choice from a number of activities to execute, based on the value of a given expression of the type specified in this object’s type specifier.</summary>
      <typeparam name="T">The type of the values provided in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Activities.Activity{`0})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class with the specified expression.</summary>
      <param name="expression">The expression to evaluate and compare against the values in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> dictionary.</param>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Activities.InArgument{`0})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class with the specified expression.</summary>
      <param name="expression">The expression to evaluate and compare against the values in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> dictionary.</param>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class with the specified expression.</summary>
      <param name="expression">The expression to evaluate and compare against the values in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> dictionary.</param>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Cases">
      <summary>Represents the dictionary of potential execution paths. Each entry contains a key and an activity that is executed when the result of the expression matches the key.</summary>
      <returns>The execution paths.</returns>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Default">
      <summary>Represents the activity that is executed if no keys of entries in the <see cref="P:System.Activities.Statements.Switch.Cases" /> collection match the <see cref="P:System.Activities.Statements.Switch.Expression" /> property.</summary>
      <returns>The default activity to execute.</returns>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Expression">
      <summary>Gets the object to compare to the keys in the <see cref="P:System.Activities.Statements.Switch.Cases" /> collection.</summary>
      <returns>The object to compare to the keys in the <see cref="P:System.Activities.Statements.Switch.Cases" /> collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.TerminateWorkflow">
      <summary>Terminates the running workflow instance, raises the <see cref="P:System.Activities.WorkflowApplication.Completed" /> event in the host, and reports error information. Once the workflow is terminated, it cannot be resumed.</summary>
    </member>
    <member name="M:System.Activities.Statements.TerminateWorkflow.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.TerminateWorkflow" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.TerminateWorkflow.Exception">
      <summary>Gets or sets the exception that provoked the instance termination.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="P:System.Activities.Statements.TerminateWorkflow.Reason">
      <summary>A string input argument with the reason for the workflow instance termination. </summary>
      <returns>The reason for workflow termination.</returns>
    </member>
    <member name="T:System.Activities.Statements.Throw">
      <summary>Throws an exception.</summary>
    </member>
    <member name="M:System.Activities.Statements.Throw.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Throw" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Throw.Exception">
      <summary>The exception thrown by the activity.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="T:System.Activities.Statements.TimerExtension">
      <summary>Abstract base class for timer extensions.</summary>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.CancelTimer(System.Activities.Bookmark)">
      <summary>Removes a timer.</summary>
      <param name="bookmark">The bookmark associated with the timer.</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.OnCancelTimer(System.Activities.Bookmark)">
      <summary>Called by the <see cref="M:System.Activities.Statements.TimerExtension.CancelTimer(System.Activities.Bookmark)" /> method.</summary>
      <param name="bookmark">The bookmark associated with the timer.</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.OnRegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>Called by the <see cref="M:System.Activities.Statements.TimerExtension.RegisterTimer(System.TimeSpan,System.Activities.Bookmark)" /> method.</summary>
      <param name="timeout">The duration of the timer.</param>
      <param name="bookmark">The bookmark associated with the timer, to be resumed when the timer expires.</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.RegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>Creates a timer with the specified duration and associated.</summary>
      <param name="timeout">The duration of the timer.</param>
      <param name="bookmark">The bookmark associated with the timer, to be resumed when the timer expires.</param>
    </member>
    <member name="T:System.Activities.Statements.TransactionScope">
      <summary>An activity that demarcates a transaction boundary. </summary>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.TransactionScope" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.AbortInstanceOnTransactionFailure">
      <summary>Gets or sets the value that indicates whether the workflow should be aborted if the transaction aborts.</summary>
      <returns>true if the workflow should be aborted.</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.Activities.Statements.TransactionScope" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.Activities.Statements.TransactionScope" /> executes.</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.IsolationLevel">
      <summary>Gets or sets the <see cref="T:System.Transactions.IsolationLevel" /> for this <see cref="T:System.Activities.Statements.TransactionScope" />.</summary>
      <returns>The <see cref="T:System.Transactions.IsolationLevel" /> for this <see cref="T:System.Activities.Statements.TransactionScope" />.</returns>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.ShouldSerializeIsolationLevel">
      <summary>Indicates whether the <see cref="P:System.Activities.Statements.TransactionScope.IsolationLevel" /> for this <see cref="T:System.Activities.Statements.TransactionScope" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.Activities.Statements.TransactionScope.IsolationLevel" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.ShouldSerializeTimeout">
      <summary>Indicates whether the <see cref="P:System.Activities.Statements.TransactionScope.Timeout" /> for this <see cref="T:System.Activities.Statements.TransactionScope" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.Activities.Statements.TransactionScope.Timeout" /> property value should be serialized; otherwise, false.
</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.Timeout">
      <summary>Gets or sets the <see cref="T:System.TimeSpan" /> that indicates the timeout period for the transaction used for this <see cref="T:System.Activities.Statements.TransactionScope" />.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that indicates the timeout period for the transaction used for this <see cref="T:System.Activities.Statements.TransactionScope" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.TryCatch">
      <summary>Contains workflow elements to be executed by the workflow runtime within an exception handling block.</summary>
    </member>
    <member name="M:System.Activities.Statements.TryCatch.#ctor">
      <summary>Creates a new instance of the <see cref="M:System.Activities.Statements.TryCatch.#ctor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Catches">
      <summary>The collection of Catch elements to be checked when the <see cref="P:System.Activities.Statements.TryCatch.Try" /> activity throws an exception.</summary>
      <returns>The catch collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Finally">
      <summary>The workflow element to be executed when the <see cref="P:System.Activities.Statements.TryCatch.Try" /> and any necessary activities in the <see cref="P:System.Activities.Statements.TryCatch.Catches" /> collection complete execution.</summary>
      <returns>The workflow element.</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Try">
      <summary>The workflow element first executed when the <see cref="T:System.Activities.Statements.TryCatch" /> executes.</summary>
      <returns>The workflow element.</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.While">
      <summary>Executes a contained workflow element while a condition evaluates to true.</summary>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
      <param name="condition">The condition under which the activity iterates.</param>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
      <param name="condition">The condition under which the activity iterates.</param>
    </member>
    <member name="P:System.Activities.Statements.While.Body">
      <summary>The <see cref="T:System.Activities.Activity" /> to execute in the While loop.</summary>
      <returns>The element.</returns>
    </member>
    <member name="P:System.Activities.Statements.While.Condition">
      <summary>The <see cref="T:System.Activities.Activity`1" /> to be evaluated before each iteration of the While loop.</summary>
      <returns>The condition.</returns>
    </member>
    <member name="P:System.Activities.Statements.While.Variables">
      <summary>The collection of <see cref="T:System.Activities.Variable" /> objects associated with the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.WorkflowTerminatedException">
      <summary>The exception that is thrown when an operation is invoked on a terminated <see cref="T:System.Activities.WorkflowApplication" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class using default values.</summary>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Activities.Statements.WriteLine">
      <summary>Writes a specified string to a specified <see cref="T:System.IO.TextWriter" /> object.</summary>
    </member>
    <member name="M:System.Activities.Statements.WriteLine.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.WriteLine" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.WriteLine.Text">
      <summary>The text to write.</summary>
      <returns>The text.</returns>
    </member>
    <member name="P:System.Activities.Statements.WriteLine.TextWriter">
      <summary>The <see cref="T:System.IO.TextWriter" /> to write the <see cref="P:System.Activities.Statements.WriteLine.Text" /> to.</summary>
      <returns>The text writer.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityInfo">
      <summary>Contains information on a tracked <see cref="T:System.Activities.Activity" />.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityInfo.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.ActivityInfo" /> class using the specified name, ID, instance ID and type name.</summary>
      <param name="name">The name of the activity.</param>
      <param name="id">The activity ID.</param>
      <param name="instanceId">The instance ID of the activity.</param>
      <param name="typeName">The type name of the activity.</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.Id">
      <summary>Gets the ID for the activity.</summary>
      <returns>The activity ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.InstanceId">
      <summary>Gets the run-time ID of the activity instance.</summary>
      <returns>The instance ID of the activity.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.Name">
      <summary>Gets the name associated with the activity</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityInfo.ToString">
      <summary>Gets a string representation of the <see cref="T:System.Activities.Tracking.ActivityInfo" /> object</summary>
      <returns>The activity name, ID, instance ID and type name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.TypeName">
      <summary>Gets the type name of the activity.</summary>
      <returns>The type name of the activity.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityScheduledQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to activity scheduled records when the tracking profile is created to subscribe to tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.ActivityScheduledQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledQuery.ActivityName">
      <summary>Gets the name of the activity that the tracking query subscribes from.</summary>
      <returns>The name of the activity that schedules this activity.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledQuery.ChildActivityName">
      <summary>Gets the name of the scheduled activity that the tracking query subscribes to.</summary>
      <returns>The name of the scheduled activity.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityScheduledRecord">
      <summary>Represents a tracking record of an activity being scheduled for execution. </summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.ActivityScheduledRecord" /> class using the specified instance ID, record number, activity and child activity.</summary>
      <param name="instanceId">The instance ID of the scheduled activity.</param>
      <param name="recordNumber">A sequence that indicates the order in which tracking records are generated.</param>
      <param name="activity">The activity issuing the scheduled execution request.</param>
      <param name="child">The scheduled activity.</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledRecord.Activity">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> for the activity.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledRecord.Child">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> for the child activity</summary>
      <returns>The child activity information.</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledRecord.ToString">
      <summary>Returns a string that contains all of the details of the <see cref="T:System.Activities.Tracking.ActivityScheduledRecord" />.</summary>
      <returns>The tracking record details.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStateQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" />, subscribes to activity state records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.ActivityStateQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.ActivityName">
      <summary>Gets the name of the activity that the tracking record is subscribed from.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.Arguments">
      <summary>Gets the collection of arguments associated with this activity query.</summary>
      <returns>A collection of arguments.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.States">
      <summary>Gets the states of the subscribed activity for which a tracking record should be emitted.</summary>
      <returns>A collection of states.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.Variables">
      <summary>Gets the collection of variables associated with this activity query.</summary>
      <returns>A collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStateRecord">
      <summary>Represents a tracking record that is created when an activity changes state.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.ActivityStateRecord" /> class using the specified instance ID, record number, activity and activity state.</summary>
      <param name="instanceId">The instance ID of the activity.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activity">The activity.</param>
      <param name="state">The activity state.</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Activity">
      <summary>Gets an <see cref="T:System.Activities.Tracking.ActivityInfo" /> that contains information on the activity when the record is generated.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Arguments">
      <summary>Gets the current values of the tracked arguments associated with the activity when the record is generated.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IDictionary`2" /> containing the arguments.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.State">
      <summary>Gets the current state of the activity when the record is generated.</summary>
      <returns>The activity state.</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateRecord.ToString">
      <summary>Returns a string that contains all the details of the tracking record.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Variables">
      <summary>Gets the current values of the tracked variables associated with the activity when the record is generated.</summary>
      <returns>The current values.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStates">
      <summary>Specifies the state of an activity.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Canceled">
      <summary>The activity state is canceled.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Closed">
      <summary>The activity state is closed.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Executing">
      <summary>The activity state is executing.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Faulted">
      <summary>The activity state is faulted.</summary>
    </member>
    <member name="T:System.Activities.Tracking.BookmarkResumptionQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to bookmark resumption records when the tracking profile is queried for <see cref="T:System.Activities.Tracking.TrackingRecord" /> objects.</summary>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.BookmarkResumptionQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionQuery.Name">
      <summary>Gets or sets the name of the bookmark record to subscribe to.</summary>
      <returns>The bookmark name.</returns>
    </member>
    <member name="T:System.Activities.Tracking.BookmarkResumptionRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a <see cref="T:System.Activities.Bookmark" /> is resumed.</summary>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionRecord.#ctor(System.Guid,System.Int64,System.Guid,System.String,System.Activities.Tracking.ActivityInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" /> class using the specified instance ID, record number, bookmark scope, bookmark name and owner.</summary>
      <param name="instanceId">The instance ID of the associated activity.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="bookmarkScope">The ID of the associated activity’s <see cref="T:System.Activities.BookmarkScope" />.</param>
      <param name="bookmarkName">The bookmark name.</param>
      <param name="owner">The activity that was waiting for the bookmark to be resumed.</param>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.BookmarkName">
      <summary>Gets the name of the <see cref="T:System.Activities.Bookmark" /> that is resumed by the workflow execution engine.</summary>
      <returns>The name of the <see cref="T:System.Activities.Bookmark" /> that is referenced by this <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.BookmarkScope">
      <summary>Gets the scope ID of the <see cref="T:System.Activities.BookmarkScope" /> that is associated with this bookmark.</summary>
      <returns>The scope ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.Owner">
      <summary>Gets information on the <see cref="T:System.Activities.Tracking.ActivityInfo" /> object that was waiting for the bookmark to be resumed.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.Payload">
      <summary>Gets the value that was supplied when the <see cref="T:System.Activities.Bookmark" /> was resumed.</summary>
      <returns>The value that was supplied when the <see cref="T:System.Activities.Bookmark" /> was resumed.</returns>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionRecord.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" /> object.</summary>
      <returns>The current object.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CancelRequestedQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to cancellation request records when the tracking profile is queried for tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CancelRequestedQuery" /> object.</summary>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedQuery.ActivityName">
      <summary>The name of the activity that is requesting the cancellation.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedQuery.ChildActivityName">
      <summary>The name of the child activity for which cancellation was requested.</summary>
      <returns>The child activity name.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CancelRequestedRecord">
      <summary>Represents the data sent by the workflow runtime to tracking participants when <see cref="M:System.Activities.ActivityExecutionContext.CancelChild" /> or <see cref="M:System.Activities.ActivityExecutionContext.CancelChildren" /> is called.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CancelRequestedRecord" /> class using the specified instance ID, record number, activity and child activity.</summary>
      <param name="instanceId">The instance ID of the activity that generated the event.</param>
      <param name="recordNumber">A sequence that defines the order of generated tracking events.</param>
      <param name="activity">The activity issuing the cancellation request.</param>
      <param name="child">The activity to be canceled.</param>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedRecord.Activity">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity requesting the cancellation.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedRecord.Child">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity to be canceled.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedRecord.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Activities.Tracking.CancelRequestedRecord" /> object.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CustomTrackingQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" />, subscribes to custom tracking records when the tracking profile is queried for custom records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingQuery.ActivityName">
      <summary>Gets or sets the name of the activity that generated the tracking record.</summary>
      <returns>The name of the activity that emits the custom tracking record.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingQuery.Name">
      <summary>Gets or sets the name of the custom tracking record that is emitted. </summary>
      <returns>The custom tracking record name.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CustomTrackingRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a custom tracking record is raised.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.Activities.Tracking.CustomTrackingRecord)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class based on information from the specified <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> instance.</summary>
      <param name="record">The custom tracking record instance to use.</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.Guid,System.String,System.Diagnostics.TraceLevel)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class with the specified instance ID, custom tracking record name, and trace level.</summary>
      <param name="instanceId">The ID of the activity.</param>
      <param name="name">The name of the custom tracking record.</param>
      <param name="level">The trace level used by the tracking record.</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class with the specified custom tracking record name.</summary>
      <param name="name">The name of the custom tracking record.</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.String,System.Diagnostics.TraceLevel)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class with the specified custom tracking record name and trace level.</summary>
      <param name="name">The name of the custom tracking record.</param>
      <param name="level">The trace level used by the tracking record.</param>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Activity">
      <summary>Returns the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity associated with this record.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.Clone">
      <summary>Creates a copy of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" />.</summary>
      <returns>A copy of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> instance.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Data">
      <summary>Gets the user-defined data associated with this tracking record.</summary>
      <returns>The user-defined data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Name">
      <summary>Gets the name that distinguishes this tracking record.</summary>
      <returns>The name that distinguishes this tracking record.</returns>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.EtwTrackingParticipant">
      <summary>A consumer of workflow tracking data that emits an Event Tracking for Windows (ETW) event to an ETW session that contains the data from the tracking record. </summary>
    </member>
    <member name="M:System.Activities.Tracking.EtwTrackingParticipant.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.EtwTrackingParticipant" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.EtwTrackingParticipant.ApplicationReference">
      <summary>Gets the reference value used by the ETW provider created by this tracking participant.</summary>
      <returns>The reference value.</returns>
    </member>
    <member name="P:System.Activities.Tracking.EtwTrackingParticipant.EtwProviderId">
      <summary>Gets the provider ID used by the ETW provider created by this tracking participant.</summary>
      <returns>The provider ID.</returns>
    </member>
    <member name="T:System.Activities.Tracking.FaultPropagationQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to fault propagation records when the tracking profile is queried for tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.FaultPropagationQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationQuery.FaultHandlerActivityName">
      <summary>Gets the name of the fault hander activity that propagated the fault.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationQuery.FaultSourceActivityName">
      <summary>Gets the name of the activity that was the source of the fault.</summary>
      <returns>The activity name</returns>
    </member>
    <member name="T:System.Activities.Tracking.FaultPropagationRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a fault is propagated from a workflow activity.</summary>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo,System.Boolean,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.FaultPropagationRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the activity that generated the event.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="faultSource">The activity that is the source of the fault.</param>
      <param name="faultHandler">The activity that is the fault handler.</param>
      <param name="isFaultSource">true if this handler is the first handler of the fault; false if this handler is a subsequent handler of the fault.</param>
      <param name="fault">The exception details.</param>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.Fault">
      <summary>Get the exception data contained in the fault.</summary>
      <returns>The exception data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.FaultHandler">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the fault handler.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.FaultSource">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity that generated the fault.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.IsFaultSource">
      <summary>A value that indicates whether this handler is the first handler for the fault. </summary>
      <returns>true if this is the first handler for the exception. false if this handler is a subsequent handler for the fault.</returns>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationRecord.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Activities.Tracking.FaultPropagationRecord" /> object.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ImplementationVisibility">
      <summary>Describes the visibility modes within a tracking profile.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ImplementationVisibility.RootScope">
      <summary>Only the root activity and its implementation for the workflow is emitted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ImplementationVisibility.All">
      <summary>All tracking records are emitted.</summary>
    </member>
    <member name="T:System.Activities.Tracking.TrackingParticipant">
      <summary>The base class for workflow extensions that interact with the workflow tracking infrastructure and access tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.BeginTrack(System.Activities.Tracking.TrackingRecord,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, begins asynchronous processing of the tracking record.</summary>
      <returns>The result of the operation.</returns>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called on completion of the operation.</param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.EndTrack(System.IAsyncResult)">
      <summary>When implemented in a derived class, represents the end of an asynchronous tracking operation. </summary>
      <param name="result">The status of the operation.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.Track(System.Activities.Tracking.TrackingRecord,System.TimeSpan)">
      <summary>When implemented in a derived class, used to synchronously process the tracking record.</summary>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="P:System.Activities.Tracking.TrackingParticipant.TrackingProfile">
      <summary>The tracking profile object used by the tracking participant. Before adding the tracking participant to the workflow extensions, the tracking profile is set on the participant.</summary>
      <returns>The tracking profile.</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingProfile">
      <summary>Creates a subscription to workflow tracking records in a <see cref="T:System.Activities.Tracking.TrackingParticipant" />. </summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingProfile.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.TrackingProfile" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.ActivityDefinitionId">
      <summary>Gets or sets the activity definition ID of the tracking profile.</summary>
      <returns>The activity definition ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.ImplementationVisibility">
      <summary>Gets or sets a value that filters tracking records emitted from nested activities within a top level activity (activities that compose the implementation of another activity.)</summary>
      <returns>An <see cref="T:System.Activities.Tracking.ImplementationVisibility" /> object that indicates the scope of records to be filtered.The default value is <see cref="F:System.Activities.Tracking.ImplementationVisibility.RootScope" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.Name">
      <summary>Gets the display name of the tracking profile.</summary>
      <returns>The profile name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.Queries">
      <summary>Gets the collection of <see cref="T:System.Activities.Tracking.TrackingQuery" /> objects that define the records to which this tracking profile subscribes.</summary>
      <returns>The collection of queries.</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingQuery">
      <summary>The base class for all tracking queries. Tracking queries are used to create a subscription definition for a <see cref="T:System.Activities.Tracking.TrackingProfile" />.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingQuery.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.TrackingQuery.QueryAnnotations">
      <summary>A collection of data in the form of name/value pairs that is included with data that is returned by this query.</summary>
      <returns>The collection of annotations.</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingRecord">
      <summary>The abstract class from which all workflow tracking records derive. Tracking records represent the data sent to tracking participants when tracked events occur.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Activities.Tracking.TrackingRecord)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance tracking record.</summary>
      <param name="record">The tracking record of the generating workflow element.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Guid)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance ID.</summary>
      <param name="instanceId">The ID of the generating workflow instance.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Guid,System.Int64)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance ID and record number.</summary>
      <param name="instanceId">The ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.Annotations">
      <summary>When implemented in a derived class, represents a collection of name/value pairs that are added to this tracking record.</summary>
      <returns>The dictionary of elements to be added to this tracking record.</returns>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.Clone">
      <summary>Creates a copy of the <see cref="T:System.Activities.Tracking.TrackingRecord" />.</summary>
      <returns>A copy of the <see cref="T:System.Activities.Tracking.TrackingRecord" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.EventTime">
      <summary>When implemented in a derived class, represents the time the tracking record occurred.</summary>
      <returns>The event time.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.InstanceId">
      <summary>When implemented in a derived class, represents the ID of the generating workflow instance.</summary>
      <returns>The element ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.Level">
      <summary>Gets the <see cref="T:System.Diagnostics.TraceLevel" /> of the event.</summary>
      <returns>The trace level.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.RecordNumber">
      <summary>A sequence that defines the order in which tracking records are generated. </summary>
      <returns>The sequence order.</returns>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.ToString">
      <summary>When implemented in a derived class, returns a string that contains all tracking data from the record.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow instance is aborted.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the aborted workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root workflow activity.</param>
      <param name="reason">The reason the workflow was aborted.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the aborted workflow.</param>
      <param name="activityDefinitionId">The display name of the root Workflow Activity.</param>
      <param name="reason">The reason the workflow was aborted.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceAbortedRecord.Reason">
      <summary>Gets a string that describes why the workflow was aborted.</summary>
      <returns>The reason the workflow was aborted.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to workflow instance records when the tracking profile is created to subscribe to tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceQuery.States">
      <summary>The subscribed states from the tracked workflow instance when the tracking records are created.</summary>
      <returns>The workflow states.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a workflow instance changes state.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Activities.Tracking.WorkflowInstanceRecord)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> class from an existing <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> instance.</summary>
      <param name="record">The instance of the workflow instance record to use.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="state">The current state of the workflow when the record is generated.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="state">The current state of the workflow when the record is generated.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceRecord.ActivityDefinitionId">
      <summary>Returns the display name of the root activity of the workflow that generated this record.</summary>
      <returns>The activity definition ID.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.Clone">
      <summary>Creates a deep copy of <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" />.</summary>
      <returns>A deep copy of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceRecord.State">
      <summary>The current state of the workflow when the record is generated.</summary>
      <returns>The workflow state.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceStates">
      <summary>Specifies the state of a workflow instance.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Aborted">
      <summary>The workflow instance is aborted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Canceled">
      <summary>The workflow instance is canceled.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Completed">
      <summary>The workflow instance is completed.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Deleted">
      <summary>The workflow instance is deleted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Idle">
      <summary>The workflow instance is idle.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Persisted">
      <summary>The workflow instance is persisted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Resumed">
      <summary>The workflow instance is resumed.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Started">
      <summary>The workflow instance is started.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Suspended">
      <summary>The workflow instance is suspended.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Terminated">
      <summary>The workflow instance is terminated.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.UnhandledException">
      <summary>The workflow instance encountered an unhandled exception.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Unloaded">
      <summary>The workflow instance is unloaded.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Unsuspended">
      <summary>The workflow instance is unsuspended.</summary>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow instance is suspended.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the suspended workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was suspended</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the suspended workflow.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was suspended.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.Reason">
      <summary>Gets a string that describes why the workflow instance was suspended.</summary>
      <returns>The reason the workflow was suspended.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow is terminated.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the terminated workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was terminated.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the terminated workflow.</param>
      <param name="activityDefinitionId">The ID of the activity definition.</param>
      <param name="reason">The reason the workflow was terminated.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.Reason">
      <summary>Gets a string that describes why the workflow instance was terminated.</summary>
      <returns>The reason the workflow was terminated.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow instance encounters an unhandled exception.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.Tracking.ActivityInfo,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="faultSource">The activity that generated the fault.</param>
      <param name="exception">The unhandled exception data.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.String,System.Activities.Tracking.ActivityInfo,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="activityDefinitionId">The activity definition ID of the generating workflow activity.</param>
      <param name="faultSource">The activity that generated the fault.</param>
      <param name="exception">The unhandled exception data.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.FaultSource">
      <summary>Returns the activity that generated the fault.</summary>
      <returns>The faulting activity.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.ToString">
      <summary>Returns the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.UnhandledException">
      <summary>Gets the unhandled exception data.</summary>
      <returns>The exception data.</returns>
    </member>
    <member name="T:System.Activities.Validation.ActivityValidationServices">
      <summary>Provides the functionality to validate a workflow. </summary>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Resolve(System.Activities.Activity,System.String)">
      <summary>Retrieves the workflow activity with the specified ID in the specified workflow.</summary>
      <returns>A workflow activity.</returns>
      <param name="root">The root workflow activity that contains the activity element to access.</param>
      <param name="id">An identifier that is associated with an activity.</param>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)">
      <summary>Verifies that a workflow activity is correctly configured according to the validation logic. This logic can be the cacheMetadata method of the activities to validate, or build and policy constraints.</summary>
      <returns>A collection of validation errors, each of which can contain the name of the validated activity, a descriptive message, an error code, and other information.</returns>
      <param name="toValidate">An element from a workflow activity tree.</param>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity,System.Activities.Validation.ValidationSettings)">
      <summary>Verifies that a workflow activity is correctly configured according to the validation logic. This logic can be the cacheMetadata method of the activities to validate, or build and policy constraints.</summary>
      <returns>A collection of validation errors, each of which can contain the name of the activity that is configured incorrectly, a descriptive message, an error or warning code , and other information.</returns>
      <param name="toValidate">An activity from a workflow activity tree.</param>
      <param name="settings">An object that determines the behavior of the validation method on the workflow , can suppress the internal validation logic, and can also contain the policy constraints.</param>
    </member>
    <member name="T:System.Activities.Validation.AddValidationError">
      <summary>Add a specified activity validation error to the activity before execution.</summary>
    </member>
    <member name="M:System.Activities.Validation.AddValidationError.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.AddValidationError" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.IsWarning">
      <summary>Gets or sets a value that indicates whether the validation error that occurred is a warning and not an error.</summary>
      <returns>true if the error that occurred is a warning and not an error; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.Message">
      <summary>Gets or sets an alphanumeric string that contains a description of the error.</summary>
      <returns>A description of the error.</returns>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.PropertyName">
      <summary>Gets or sets the name of the property that caused the error.</summary>
      <returns>The name of the property that caused the error.</returns>
    </member>
    <member name="T:System.Activities.Validation.AssertValidation">
      <summary>Adds a constraint violation to a list of constraint violations if the Assertion condition evaluates to false.</summary>
    </member>
    <member name="M:System.Activities.Validation.AssertValidation.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.AssertValidation" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.Assertion">
      <summary>Gets or sets a value that indicates whether the assert validation resolved to true or false.</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.IsWarning">
      <summary>Gets or sets the value that indicates whether the result of the assert validation is a warning or an error.</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.Message">
      <summary>Gets or sets the text string that states the results of the assert validation.</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.PropertyName">
      <summary>Gets or sets the name of the property associated with the assert violation.</summary>
      <returns>An InArgument that contains the name of the property associated with the assert violation.</returns>
    </member>
    <member name="T:System.Activities.Validation.Constraint">
      <summary>Handles the validation constraint that is used for validating a workflow element.</summary>
    </member>
    <member name="M:System.Activities.Validation.Constraint.AddValidationError(System.Activities.NativeActivityContext,System.Activities.Validation.ValidationError)">
      <summary>Adds a validation error to a list of run-time validation errors that are attached to the execution context.</summary>
      <param name="context">The workflow activity execution environment.</param>
      <param name="error">A validation error that occurs during a workflow runtime.</param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.CacheMetadata(System.Activities.NativeActivityMetadata)">
      <summary>Creates a <see cref="T:System.Activities.NativeActivityMetadata" /> object that contains runtime arguments for the workflow validation process.</summary>
      <param name="metadata">A <see cref="T:System.Activities.NativeActivityMetadata" /> object that becomes the container for a list of validation runtime arguments. </param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.Execute(System.Activities.NativeActivityContext)">
      <summary>Invokes the process that validates a workflow element.</summary>
      <param name="context">The workflow activity execution environment.</param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.OnExecute(System.Activities.NativeActivityContext,System.Object,System.Activities.Validation.ValidationContext)">
      <summary>When implemented by a derived class, validates the specified object using the specified native activity and validation contexts.</summary>
      <param name="context">The workflow activity execution.</param>
      <param name="objectToValidate">A workflow element.</param>
      <param name="objectToValidateContext">The context of the workflow element to be validated.</param>
    </member>
    <member name="F:System.Activities.Validation.Constraint.ValidationErrorListPropertyName">
      <summary>The name for an activity constraint property that is a list of workflow run-time validation errors.</summary>
    </member>
    <member name="T:System.Activities.Validation.Constraint`1">
      <summary>Handles a constraint used for validating an element of type T.</summary>
      <typeparam name="T">The type of the element to be validated.</typeparam>
    </member>
    <member name="M:System.Activities.Validation.Constraint`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.Constraint`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.Constraint`1.Body">
      <summary>Gets or sets the validation logic.</summary>
      <returns>An <see cref="T:System.Activities.ActivityAction" /> delegate.</returns>
    </member>
    <member name="T:System.Activities.Validation.GetChildSubtree">
      <summary>Retrieves workflow child elements from an instance of an activity.</summary>
    </member>
    <member name="M:System.Activities.Validation.GetChildSubtree.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.GetChildSubtree" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.GetChildSubtree.ValidationContext">
      <summary>Gets or sets the property that serves as an argument into an activity and provides the activity with the information required for its validation process.</summary>
      <returns>An argument to an activity that provides information for its validation process.</returns>
    </member>
    <member name="T:System.Activities.Validation.GetParentChain">
      <summary>Retrieves the collection of all workflow elements which belong to the parent axis of an activity.</summary>
    </member>
    <member name="M:System.Activities.Validation.GetParentChain.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.GetParentChain" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.GetParentChain.ValidationContext">
      <summary>Gets or sets the property that serves as an argument into an activity and provides the activity with the information required for its validation process.</summary>
      <returns>An <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="T:System.Activities.Validation.GetWorkflowTree">
      <summary>Retrieves a workflow tree from an instance of an activity.</summary>
    </member>
    <member name="M:System.Activities.Validation.GetWorkflowTree.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.GetWorkflowTree" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.GetWorkflowTree.ValidationContext">
      <summary>Gets or sets the property that serves as an argument into an activity and provides the activity with the information required for its validation process.</summary>
      <returns>An argument to an activity that provides information for its validation process.</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationContext">
      <summary>Generates results based on the correct context for the current node in the workflow tree.</summary>
    </member>
    <member name="T:System.Activities.Validation.ValidationError">
      <summary>Represents an instance of a validation error that occurs before execution of the workflow.</summary>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationError" /> class using the specified error message.</summary>
      <param name="message">The information about the error.</param>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationError" /> class using the specified error message and warning indication.</summary>
      <param name="message">The error message.</param>
      <param name="isWarning">true if the error is a warning; otherwise, false.</param>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String,System.Boolean,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationError" /> class using the specified error message, warning indicator, and name of the property that caused the error.</summary>
      <param name="message">The error message.</param>
      <param name="isWarning">An indicator whether the error is a warning.</param>
      <param name="propertyName">The alphanumeric name of the property that generated the error.</param>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Id">
      <summary>A unique alphanumeric identifier for the <see cref="T:System.Activities.Activity" /> that is the source of the error. This identifier is unique for each activity in a specific workflow.</summary>
      <returns>An identifier.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.IsWarning">
      <summary>Gets a value that indicates whether the validation error is a warning and not an error.</summary>
      <returns>true if the validation error is a warning; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Message">
      <summary>Gets an alphanumeric message that provides information about the validation error.</summary>
      <returns>A string.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.PropertyName">
      <summary>Gets the alphanumeric name of the property that generated the error.</summary>
      <returns>A string.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Source">
      <summary>Gets the activity that is the source of the error.</summary>
      <returns>An activity.</returns>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.ToString">
      <summary>Converts the validation error property names and values into a message string that lists them.</summary>
      <returns>A string.</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationResults">
      <summary>Containts all validation errors generated by <see cref="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)" /> while validating a workflow.  These errors are contained in the <see cref="P:System.Activities.Validation.ValidationResults.Errors" /> and <see cref="P:System.Activities.Validation.ValidationResults.Warnings" /> collections.</summary>
    </member>
    <member name="P:System.Activities.Validation.ValidationResults.Errors">
      <summary>Gets a read-only collection of workflow validation errors.</summary>
      <returns>A read-only collection of validation errors.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationResults.Warnings">
      <summary>Gets a read-only collection of workflow validation warnings.</summary>
      <returns>A read-only collection of validation warnings.</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationSettings">
      <summary>Represents a collection of settings that customize the behavior that <see cref="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)" /> will exhibit. It also enables the activity user to apply policy constraints to a workflow.</summary>
    </member>
    <member name="M:System.Activities.Validation.ValidationSettings.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationSettings" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.AdditionalConstraints">
      <summary>Gets a  dictionary of type-constraint pairs. Each additional constraint added to the dictionary will be applied to every activity of the specify type in the workflow to validate. </summary>
      <returns>A dictionary type list of constraints and types. </returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints">
      <summary>Gets or sets a value that indicates whether the additional validation constraints are to be used exclusively to validate the workflow. If set to true, all the validation contained inside the activity itself will be ignored.</summary>
      <returns>true if the additional constraints are to be used exclusively; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.SingleLevel">
      <summary>Gets or sets a value that indicates whether the supplied activity and all the children and sub-children of the supplied activity are validated, or if the validator should validate only to the supplied activity.</summary>
      <returns>true if an element is being validated without validating its child elements; otherwise, false if the element and its children and sub-children are being validated.</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityWithResultConverter">
      <summary>Provides type conversion for the result type of a workflow activity operation. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultConverter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.ActivityWithResultConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultConverter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.ActivityWithResultConverter" /> class with the specified type to which an activity result is converted.</summary>
      <param name="type">The type to which the activity result is converted.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityWithResultValueSerializer">
      <summary>Ensures that the result of an activity is properly converted to a string that can be used for serial transmission.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.ActivityWithResultValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Returns an indication whether an input object is an <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" /> that can be serialized into a string.</summary>
      <returns>true if the expression can be serialized; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" /> object that is verified for its ability to be converted to a string for serial transmission.</param>
      <param name="context">Defines a context for the serialization of <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" />.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Serializes the specified object into a string.</summary>
      <returns>A string version of the serializable expression.</returns>
      <param name="value">The object that is converted to a string for serial transmission.</param>
      <param name="context">Defines a context for the serialization of the object being that is converted into a string.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityXamlServices">
      <summary>Creates an instance of an activity tree described in XAML.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderReader(System.Xaml.XamlReader)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" />.</summary>
      <returns>A <see cref="T:System.Xaml.XamlReader" /> that handles the transformation between the <see cref="T:System.Activities.ActivityBuilder" /> and the activity x:Class XAML.</returns>
      <param name="innerReader">The x:Class content.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderReader(System.Xaml.XamlReader,System.Xaml.XamlSchemaContext)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> using the specified schema context.</summary>
      <returns>A <see cref="T:System.Xaml.XamlReader" /> that handles the transformation between the <see cref="T:System.Activities.ActivityBuilder" /> and the activity x:Class XAML.</returns>
      <param name="innerReader">The x:Class content.</param>
      <param name="schemaContext">The schema context.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderWriter(System.Xaml.XamlWriter)">
      <summary>Maps an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> from the specified writer to an x:Class activity tree.</summary>
      <returns>A <see cref="T:System.Xaml.XamlWriter" /> that handles the transformation between the <see cref="T:System.Activities.ActivityBuilder" /> and the activity x:Class XAML.</returns>
      <param name="innerWriter">The content of an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" />.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.IO.Stream)">
      <summary>Maps an x:Class activity tree from the specified stream to an <see cref="T:System.Activities.DynamicActivity" /> or <see cref="T:System.Activities.DynamicActivity`1" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> content.</returns>
      <param name="stream">The x:Class content.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.Xaml.XamlReader)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.DynamicActivity" /> or <see cref="T:System.Activities.DynamicActivity`1" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> content.</returns>
      <param name="innerReader">The x:Class content.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.Xaml.XamlReader,System.Xaml.XamlSchemaContext)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.DynamicActivity" /> or <see cref="T:System.Activities.DynamicActivity`1" /> using the specified schema context.</summary>
      <returns>The <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> content.</returns>
      <param name="innerReader">The x:Class content.</param>
      <param name="schemaContext">The schema context.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.Stream)">
      <summary>Creates an instance of the declarative workflow described in the specified stream.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="stream">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.TextReader)">
      <summary>Creates an instance of the declarative workflow described in the specified text reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="textReader">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.String)">
      <summary>Creates an instance of the declarative workflow described in the specified file.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="fileName">A file that contains the workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xaml.XamlReader)">
      <summary>Creates an instance of the declarative workflow described in the specified XAML reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="xamlReader">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xml.XmlReader)">
      <summary>Creates an instance of the declarative workflow described in the specified XML reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="xmlReader">The workflow definition.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ArgumentValueSerializer">
      <summary>Converts instances of <see cref="T:System.Activities.Argument" /> to instances of <see cref="T:System.String" />.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.ArgumentValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified object can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the specified object to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the specified object.</returns>
      <param name="value">The object to convert into a <see cref="T:System.String" />.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.FuncDeferringLoader">
      <summary>Represents an object that loads an instance of a saved function.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.FuncDeferringLoader" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>Loads an instance of a function that can be used at any point to deserialize a list of nodes.</summary>
      <returns>An instance of a function.</returns>
      <param name="xamlReader">A list of serialized nodes.</param>
      <param name="context">A context that provides information needed for parsing.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>Serializes the specified <see cref="T:System.Object" /> into a Xaml node list.</summary>
      <returns>A Xaml reader.</returns>
      <param name="value">The object to transform into a Xaml node list.</param>
      <param name="serviceProvider">An object that provides context information for serialization. </param>
    </member>
    <member name="T:System.Activities.XamlIntegration.InArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Activities.InArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InArgumentConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InArgumentConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InArgumentConverter" /> class using the specified type.</summary>
      <param name="type">The type of the associated <see cref="T:System.Activities.InArgument" />.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.InOutArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Activities.InOutArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InOutArgumentConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InOutArgumentConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InOutArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InOutArgumentConverter" /> class using the specified type.</summary>
      <param name="type">The type of the associated <see cref="T:System.Activities.InOutArgument" />.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.IValueSerializableExpression">
      <summary>Provides methods for converting expressions to strings.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.IValueSerializableExpression.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the expression can be converted into a string.</summary>
      <returns>true if the expression can be converted into a string; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.IValueSerializableExpression.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an expression to a string.</summary>
      <returns>A string representation of the expression.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.OutArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Activities.OutArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.OutArgumentConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.OutArgumentConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.OutArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.OutArgumentConverter" /> class using the specified type.</summary>
      <param name="type">The type of the associated <see cref="T:System.Activities.OutArgument" />.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.PropertyReferenceExtension`1">
      <summary>Provides access to properties contained in an x:Class document.</summary>
      <typeparam name="T">The type of the associated property.</typeparam>
    </member>
    <member name="M:System.Activities.XamlIntegration.PropertyReferenceExtension`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.PropertyReferenceExtension`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.PropertyReferenceExtension`1.PropertyName">
      <summary>Get or sets the name of the associated property.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="M:System.Activities.XamlIntegration.PropertyReferenceExtension`1.ProvideValue(System.IServiceProvider)">
      <summary>Retrieves the value of the associated property.</summary>
      <returns>The property value.</returns>
      <param name="serviceProvider">An object that provides services for the markup extension.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.TypeConverterBase">
      <summary>Provides methods that derived type converter classes can use for converting objects to and from various representations.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>When overridden in a derived class, determines whether the specified type can be converted from.</summary>
      <returns>true if the specified type can be converted from; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>When overridden in a derived class, determines whether the specified type can be converted to.</summary>
      <returns>true if the specified type can be converted to; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>When overridden in a derived class, converts the specified value to a new representation specified by the derived class.</summary>
      <returns>The converted value.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>When overridden in a derived class, converts the specified value to the specified representation.</summary>
      <returns>The converted value.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.ComponentModel.Composition.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.Composition</name>
  </assembly>
  <members>
    <member name="T:System.Lazy`2">
      <summary>Provides a lazy indirect reference to an object and its associated metadata for use by the Managed Extensibility Framework.</summary>
      <typeparam name="T">The type of the object referenced.</typeparam>
      <typeparam name="TMetadata">The type of the metadata.</typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata that uses the specified function to get the referenced object.</summary>
      <param name="valueFactory">A function that returns the referenced object.</param>
      <param name="metadata">The metadata associated with the referenced object.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread safety value that uses the specified function to get the referenced object.</summary>
      <param name="valueFactory">A function that returns the referenced object.</param>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="isThreadSafe">Indicates whether the <see cref="T:System.Lazy`2" /> object that is created will be thread-safe.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread synchronization mode that uses the specified function to get the referenced object.</summary>
      <param name="valueFactory">A function that returns the referenced object</param>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="mode">The thread synchronization mode</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata.</summary>
      <param name="metadata">The metadata associated with the referenced object.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread safety value.</summary>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="isThreadSafe">Indicates whether the <see cref="T:System.Lazy`2" /> object that is created will be thread-safe.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread synchronization mode.</summary>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="mode">The thread synchronization mode.</param>
    </member>
    <member name="P:System.Lazy`2.Metadata">
      <summary>Gets the metadata associated with the referenced object.</summary>
      <returns>The metadata associated with the referenced object.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.AttributedModelServices">
      <summary>Contains helper methods for using the attributed programming model with composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)">
      <summary>Creates a part from the specified value and adds it to the specified batch with the specified contract name.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="contractName">The contract name of the export.</param>
      <param name="exportedValue">The value to add.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)">
      <summary>Creates a part from the specified value and adds it to the specified batch.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="exportedValue">The value to add.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)">
      <summary>Creates a composable part from the specified attributed object, and adds it to the specified composition batch.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="attributedPart">The object to add.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)">
      <summary>Creates a part from the specified object under the specified contract name and composes it in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="contractName">The contract name to export the part under.</param>
      <param name="exportedValue">The value to compose.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)">
      <summary>Creates a part from the specified value and composes it in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="exportedValue">The value to compose.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])">
      <summary>Creates composable parts from an array of attributed objects and composes them in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="attributedParts">An array of attributed objects to compose.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object)">
      <summary>Creates a composable part from an attributed object.</summary>
      <returns>The created part.</returns>
      <param name="attributedPart">The attributed object.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates a part definition with the specified type and origin.</summary>
      <returns>The new part definition.</returns>
      <param name="type">The type of the definition.</param>
      <param name="origin">The origin of the definition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Boolean)">
      <summary>Creates a part definition with the specified type and origin.</summary>
      <returns>The new part definition.</returns>
      <param name="type">The type of the definition.</param>
      <param name="origin">The origin of the definition.</param>
      <param name="ensureIsDiscoverable">A value indicating whether or not the new definition should be discoverable.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)">
      <summary>Gets a canonical contract name for the specified type.</summary>
      <returns>A contract name created from the specified type.</returns>
      <param name="type">The type to use.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetMetadataView``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Gets a metadata view object from a dictionary of loose metadata.</summary>
      <returns>A metadata view containing the specified metadata.</returns>
      <param name="metadata">A collection of loose metadata.</param>
      <typeparam name="TMetadataView">The type of the metadata view object to get.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Reflection.MethodInfo)">
      <summary>Gets the unique identifier for the specified method.</summary>
      <returns>The unique identifier for the method.</returns>
      <param name="method">The method to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)">
      <summary>Gets the unique identifier for the specified type.</summary>
      <returns>The unique identifier for the type.</returns>
      <param name="type">The type to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)">
      <summary>Composes the specified part by using the specified composition service, with recomposition disabled.</summary>
      <returns>The composed part.</returns>
      <param name="compositionService">The composition service to use.</param>
      <param name="attributedPart">The part to compose.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ChangeRejectedException">
      <summary>An exception that indicates whether a component has been rejected during composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a list of composition errors. </summary>
      <param name="errors">A collection of errors that occurred during composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.ComponentModel.Composition.ChangeRejectedException.Message">
      <summary>Gets or sets the message associated with the component rejection.</summary>
      <returns>The message associated with the component rejection.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionContractMismatchException">
      <summary>The exception that is thrown when the underlying exported object or metadata of an <see cref="T:System.Lazy`1" /> or <see cref="T:System.Lazy`2" /> object cannot be cast to T or TMetadataView, respectively.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionError">
      <summary>Represents an error that occurs during composition in a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message and the composition element that is the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message, and the composition element and exception that are the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> property to null.</param>
      <param name="exception">The <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message and the exception that is the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="exception">The <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Description">
      <summary>Gets a description of the composition error.</summary>
      <returns>A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Element">
      <summary>Gets the composition element that is the cause of the error.</summary>
      <returns>The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" />. The default is null.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Exception">
      <summary>Gets the exception that is the underlying cause of the composition error.</summary>
      <returns>The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" />. The default is null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.ToString">
      <summary>Returns a string representation of the composition error.</summary>
      <returns>A string that contains the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionException">
      <summary>Represents the exception that is thrown when one or more errors occur during composition in a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified collection of composition errors.</summary>
      <param name="errors">A collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that represent problems during composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" /> or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" /> or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Errors">
      <summary>Gets or sets a collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that describe the errors associated with the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that describe the errors associated with the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Message">
      <summary>Gets a message that describes the exception.</summary>
      <returns> A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CreationPolicy">
      <summary>Specifies options added to a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object that control when the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object creates a new instance of that part.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Any">
      <summary>Specifies that the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> will use the most appropriate <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the part given the current context. This is the default <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. Be default, <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> will use <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" />, unless the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> or importer requests <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Shared">
      <summary>Specifies that a single shared instance of the associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> will be created by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> and shared by all requestors.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.NonShared">
      <summary>Specifies that a new non-shared instance of the associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> will be created by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> for every requestor.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportAttribute">
      <summary>Specifies that a type, property, field, or method provides a particular export.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under the specified contract name.</summary>
      <param name="contractName">The contract name that is used to export the type or member marked with this attribute, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the specified type under the specified contract name.</summary>
      <param name="contractName">The contract name that is used to export the type or member marked with this attribute, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type to export.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under a contract name derived from the specified type.</summary>
      <param name="contractType">A type from which to derive the contract name that is used to export the type or member marked with this attribute, or null to use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractName">
      <summary>Gets the contract name that is used to export the type or member marked with this attribute.</summary>
      <returns>The contract name that is used to export the type or member marked with this attribute. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractType">
      <summary>Gets the contract type that is exported by the member that this attribute is attached to.</summary>
      <returns>The type of export that is be provided. The default value is null, which means that the type will be obtained by looking at the type on the member that this export is attached to. </returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportMetadataAttribute">
      <summary>Specifies metadata for a type, property, field, or method marked with the <see cref="T:System.ComponentModel.Composition.ExportAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportMetadataAttribute" /> with the specified name and metadata value.</summary>
      <param name="name">A string that contains the name of the metadata value, or null to set the <see cref="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name" /> property to an empty string ("").</param>
      <param name="value">An object that contains the metadata value. This can be null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.IsMultiple">
      <summary>Gets or sets a value that indicates whether this item is marked with this attribute more than once.</summary>
      <returns>true if the item is marked more than once; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name">
      <summary>Gets the name of the metadata value.</summary>
      <returns> A string that contains the name of the metadata value.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Value">
      <summary>Gets the metadata value.</summary>
      <returns> An object that contains the metadata value.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ICompositionService">
      <summary>Provides methods for composing <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects in a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Composes the specified part, with recomposition and validation disabled.</summary>
      <param name="part">The part to compose.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportAttribute">
      <summary>Specifies that a property, field, or parameter imports a particular export.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the specified contract name.</summary>
      <param name="contractName">The contract name of the export to import, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the specified contract name and type.</summary>
      <param name="contractName">The contract name of the export to import, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type of the export to import.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the contract name derived from the specified type.</summary>
      <param name="contractType">The type to derive the contract name of the export from, or null to use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowDefault">
      <summary>Gets or sets a value that indicates whether the property, field, or parameter will be set to its type's default value when an export with the contract name is not present in the container.</summary>
      <returns>true if the property, field, or parameter will be set to its type's default value when there is no export with the <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowRecomposition">
      <summary>Gets or sets a value that indicates whether the property or field will be recomposed when exports with a matching contract have changed in the container.</summary>
      <returns>true if the property or field allows recomposition when exports with a matching <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> are added or removed from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractName">
      <summary>Gets the contract name of the export to import.</summary>
      <returns>The contract name of the export to import. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractType">
      <summary>Gets the type of the export to import.</summary>
      <returns>The type of the export to import.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. This is the default.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all used exports be shared by all parts in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all used exports be non-shared in a container. In this case, each part receives their own instance.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
      <summary>The exception that is thrown when the cardinality of an <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object does not match the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects available that are in an <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with serialized data.</summary>
      <param name="info">An object that holds the serialized object data about the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />. </param>
      <param name="context">An object that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="info" /> is missing a required value.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="info" /> contains a value that cannot be cast to the correct type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a specified message that describes the error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportingConstructorAttribute">
      <summary>Specifies that a particular constructor should be used when constructing an attributed part.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportingConstructorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportingConstructorAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportManyAttribute">
      <summary>Specifies that a property, field, or parameter imports a particular set of exports.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the specified contract name.</summary>
      <param name="contractName">The contract name of the exports to import, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the specified contract name and contract type.</summary>
      <param name="contractName">The contract name of the exports to import, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type of the export to import.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the contract name derived from the specified type.</summary>
      <param name="contractType">The type to derive the contract name of the exports to import, or nullto use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.AllowRecomposition">
      <summary>Gets or sets a value indicating whether the decorated property or field will be recomposed when exports that provide the matching contract change.</summary>
      <returns>true if the property or field allows for recomposition when exports that provide the same <see cref="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName" /> are added or removed from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />; otherwise, false.The default value is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName">
      <summary>Gets the contract name of the exports to import.</summary>
      <returns>The contract name of the exports to import. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractType">
      <summary>Gets the contract type of the export to import.</summary>
      <returns>The type of the export that this import is expecting. The default value is null, which means that the type will be obtained by looking at the type on the member that this import is attached to. If the type is <see cref="T:System.Object" />, the import will match any exported type.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. This is the default.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all used exports be shared by all parts in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all used exports be non-shared in a container. In this case, each part receives their own instance.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.InheritedExportAttribute">
      <summary>Specifies that a type provides a particular export, and that subclasses of that type will also provide that export.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract name.</summary>
      <param name="contractName">The name of the contract.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract name and type.</summary>
      <param name="contractName">The name of the contract.</param>
      <param name="contractType">The type of the contract.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract type.</summary>
      <param name="contractType">The type of the contract.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification">
      <summary>Enables implementers to be notified when a part's imports have been satisfied.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.IPartImportsSatisfiedNotification.OnImportsSatisfied">
      <summary>Called when a part's imports have been satisfied and it is safe to use.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.MetadataAttributeAttribute">
      <summary>Specifies that an attribute can be used to provide metadata for a type, property, field, or method marked with the <see cref="T:System.ComponentModel.Composition.ExportAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.MetadataAttributeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.MetadataAttributeAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.PartCreationPolicyAttribute">
      <summary>Specifies the <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" /> for a given <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartCreationPolicyAttribute.#ctor(System.ComponentModel.Composition.CreationPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" /> class with the specified creation policy.</summary>
      <param name="creationPolicy">The creation policy to use.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy">
      <summary>Gets or sets a value that indicates the creation policy of the attributed part.</summary>
      <returns>One of the <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" /> values that indicates the creation policy of the attributed part. The default is <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.PartMetadataAttribute">
      <summary>Specifies metadata for a type to be used as a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> and <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartMetadataAttribute" /> class with the specified name and metadata value.</summary>
      <param name="name">A string that contains the name of the metadata value or null to use an empty string ("").</param>
      <param name="value">An object that contains the metadata value. This can be null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Name">
      <summary>Gets the name of the metadata value.</summary>
      <returns> A string that contains the name of the metadata value.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Value">
      <summary>Gets the metadata value.</summary>
      <returns> An object that contains the metadata value.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute">
      <summary>Marks a type that will not be discovered as a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> in a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartNotDiscoverableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateCatalog">
      <summary>A catalog that contains a mutable collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class with the specified catalogs.</summary>
      <param name="catalogs">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> or null to create an empty <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="catalogs" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class with the specified catalogs.</summary>
      <param name="catalogs">A array of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalogs" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="catalogs" /> contains an element that is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Catalogs">
      <summary>Gets the underlying catalogs of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects that underlie the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed">
      <summary>Occurs when the contents of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object have changed.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing">
      <summary>Occurs when the contents of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object is changing.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the export definitions that match the constraint expressed by the specified definition.</summary>
      <returns>A collection of <see cref="T:System.Tuple`2" /> containing the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects and their associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects for objects that match the constraint specified by <paramref name="definition" />.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects to be returned.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects that are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider">
      <summary>Aggregates the exports provided by a collection of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.ExportProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class.</summary>
      <param name="providers">The prioritized list of export providers. The providers are consulted in the order in which they are supplied.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class.</summary>
      <param name="providers">The prioritized list of export providers.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all the exports that match the conditions of the specified import.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be returned.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Providers">
      <summary>Gets a collection that contains the providers that the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> object aggregates.</summary>
      <returns>A collection of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> aggregates.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> object has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog">
      <summary>An immutable <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object created from a managed code assembly.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> class with the specified assembly.</summary>
      <param name="assembly">The assembly that contains the attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> is null.-or-<paramref name="assembly" /> was loaded in the reflection-only context.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> class with the specified code base.</summary>
      <param name="codeBase">A string that specifies the code base of the assembly that contains the attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</param>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="codeBase" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="codeBase" /> was compiled with a later version.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have path discovery permission. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="codeBase" /> could not be loaded.-or-<paramref name="codeBase" /> specified a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeBase" /> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="codeBase" /> is not found.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codeBase" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Assembly">
      <summary>Gets the assembly whose attributed types are contained in the assembly catalog.</summary>
      <returns>The assembly whose attributed <see cref="T:System.Type" /> objects are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a collection of exports that match the conditions specified by the import definition.</summary>
      <returns>A collection of exports that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">Conditions that specify which exports to match.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Parts">
      <summary>Gets the part definitions that are contained in the assembly catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects contained in the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>Gets the display name of the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</summary>
      <returns>A string that represents the type and assembly of this <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>Gets the composition element that this element originated from.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.ToString">
      <summary>Gets a string representation of the assembly catalog.</summary>
      <returns>A representation of the assembly catalog.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AtomicComposition">
      <summary>Represents a single composition operation for transactional composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class with the specified parent <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />.</summary>
      <param name="outerAtomicComposition">The parent of this composition operation.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)">
      <summary>Adds an action to be executed when the overall composition operation completes successfully.</summary>
      <param name="completeAction">The action to be executed.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)">
      <summary>Adds an action to be executed if the overall composition operation fails.</summary>
      <param name="revertAction">The action to be executed.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Complete">
      <summary>Marks this composition operation as complete.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class, and mark this composition operation as failed.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)">
      <summary>Saves a key-value pair in the transaction to track tentative state.</summary>
      <param name="key">The key to save.</param>
      <param name="value">The value to save.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)">
      <summary>Gets a value saved by the <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> method, with the option of not searching parent transactions.</summary>
      <returns>true if the value was successfully retrieved; otherwise, false.</returns>
      <param name="key">The key to retrieve from.</param>
      <param name="localAtomicCompositionOnly">true to exclude parent transactions; otherwise, false.</param>
      <param name="value">The retrieved value.</param>
      <typeparam name="T">The type of the value to be retrieved.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)">
      <summary>Gets a value saved by the <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> method.</summary>
      <returns>true if the value was successfully retrieved; otherwise, false.</returns>
      <param name="key">The key to retrieve from.</param>
      <param name="value">The retrieved value.</param>
      <typeparam name="T">The type of the value to be retrieved.</typeparam>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider">
      <summary>Provides access to all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects declared by a given catalog.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class with the specified catalog.</summary>
      <param name="catalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalog" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class with the specified catalog and optional in thread-safe mode. </summary>
      <param name="catalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <param name="isThreadSafe">true if this object must be thread-safe; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalog" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Catalog">
      <summary>Gets the catalog that is used to provide exports.</summary>
      <returns>The catalog that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Returns all exports that match the conditions of the specified import.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be returned.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.SourceProvider">
      <summary>Gets or sets the export provider which provides access to additional exports.</summary>
      <returns>The export provider that provides the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This property has already been set.-or-The methods on the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> object have already been accessed.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> class with the specified changes.</summary>
      <param name="addedDefinitions">The part definitions that were added to the catalog.</param>
      <param name="removedDefinitions">The part definitions that were removed from the catalog.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AddedDefinitions">
      <summary>Gets a collection of definitions added to the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> in this change.</summary>
      <returns>A collection of definitions added to the catalog.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AtomicComposition">
      <summary>Gets the composition transaction for this change.</summary>
      <returns>The composition transaction for this change.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.RemovedDefinitions">
      <summary>Gets a collection of definitions removed from the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> in this change.</summary>
      <returns>A collection of definitions removed from the catalog in this change.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider">
      <summary>Provides access to the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects provided by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class, optionally in thread-safe mode. </summary>
      <param name="isThreadSafe">true if the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> object must be thread-safe; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>Executes composition on the specified batch.</summary>
      <param name="batch">The batch to execute composition on.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets a collection of all exports in this provider that match the conditions of the specified import.</summary>
      <returns>A collection of all exports in this provider that match the specified conditions.</returns>
      <param name="definition">The <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> to get.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.SourceProvider">
      <summary>Gets or sets the export provider that provides access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</summary>
      <returns>A provider that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This property has already been set.-or-The methods on the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> have already been accessed.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionBatch">
      <summary>Represents a set of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to add or remove from a container.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> class with the specified parts for addition and removal.</summary>
      <param name="partsToAdd">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to add.</param>
      <param name="partsToRemove">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partsToAdd" /> is null.-or-<paramref name="partsToRemove" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>Adds the specified export to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</summary>
      <returns>The part added.</returns>
      <param name="export">The export to add to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="export" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddPart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Adds the specified part to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</summary>
      <param name="part">The part to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToAdd">
      <summary>Gets the collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to be added.</summary>
      <returns>A collection of parts to be added.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToRemove">
      <summary>Gets the collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to be removed.</summary>
      <returns>A collection of parts to be removed.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.RemovePart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Puts the specified part on the list of parts to remove.</summary>
      <param name="part">The part to be removed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionConstants">
      <summary>Contains static metadata keys used by the composition system.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ExportTypeIdentityMetadataName">
      <summary>Specifies the key for metadata created by the composition system to mark a part with a unique identifier.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.PartCreationPolicyMetadataName">
      <summary>Specifies the key for metadata created by the composition system to mark a part with a creation policy.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
      <summary>Serves as a repository for <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects and provides methods for composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified export providers.</summary>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified catalog, thread-safe mode, and export providers. </summary>
      <param name="catalog">A catalog that provides <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
      <param name="isThreadSafe">true if this <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object must be thread-safe; otherwise, false.</param>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set the <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> property to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified catalog and export providers.</summary>
      <param name="catalog">A catalog that provides <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> contains an element that is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog">
      <summary>Gets the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that provides the container access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</summary>
      <returns>The catalog that provides the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to exports produced from <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>Adds or removes the parts in the specified <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> from the container and executes composition.</summary>
      <param name="batch">Changes to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> to include during the composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Returns a collection of all exports that match the conditions in the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects in this <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers">
      <summary>Gets the export providers that provide the container access to additional <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>Releases the specified <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />. </summary>
      <param name="export">The <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> that needs to be released.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="export" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})">
      <summary>Removes the specified export from composition and releases its resources if possible.</summary>
      <param name="export">An indirect reference to the export to remove.</param>
      <typeparam name="T">The type of the export.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>Releases a set of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />. </summary>
      <param name="exports">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be released.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exports" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exports" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
      <summary>Removes a collection of exports from composition and releases their resources if possible.</summary>
      <param name="exports">A collection of indirect references to the exports to be removed.</param>
      <typeparam name="T">The type of the exports.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
      <summary>Removes a collection of exports from composition and releases their resources if possible.</summary>
      <param name="exports">A collection of indirect references to the exports to be removed and their metadata.</param>
      <typeparam name="T">The type of the exports.</typeparam>
      <typeparam name="TMetadataView">The type of the exports' metadata view.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object without registering it for recomposition.</summary>
      <param name="part">The part to satisfy the imports of.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of the errors that occurred.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog">
      <summary>A <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object that represents the contents of a directory.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> class with <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects based on all the DLL files in the specified directory path.</summary>
      <param name="path">Path to the directory to scan for assemblies to add to the catalog.The path must be absolute or relative to <see cref="P:System.AppDomain.BaseDirectory" />.</param>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="path" /> is invalid. For example, it is on an unmapped drive. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more implementation-specific invalid characters.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based computers, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> class with <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects based on the specified search pattern in the specified directory path.</summary>
      <param name="path">Path to the directory to scan for assemblies to add to the catalog.The path must be absolute or relative to <see cref="P:System.AppDomain.BaseDirectory" />.</param>
      <param name="searchPattern">The pattern to search with. The format of the pattern should be the same as specified for <see cref="M:System.IO.Directory.GetFiles(System.String,System.String)" />.</param>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="path" /> is invalid. For example, it is on an unmapped drive.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null or <paramref name="searchPattern" /> is null.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more implementation-specific invalid characters.-or-<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based computers, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed">
      <summary>Occurs when the contents of the catalog has changed.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing">
      <summary>Occurs when the catalog is changing.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath">
      <summary>Gets the translated absolute path observed by the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />.</summary>
      <returns>The translated absolute path observed by the catalog.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the export definitions that match the constraint expressed by the specified definition.</summary>
      <returns>A collection of <see cref="T:System.Tuple`2" /> containing the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects and their associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects for objects that match the constraint specified by <paramref name="definition" />.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects to be returned.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles">
      <summary>Gets the collection of files currently loaded in the catalog.</summary>
      <returns>A collection of files currently loaded in the catalog.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Parts">
      <summary>Gets the part definitions that are contained in the directory catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects that are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path">
      <summary>Gets the path observed by the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />.</summary>
      <returns>The path observed by the catalog.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh">
      <summary>Refreshes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects with the latest files in the directory that match the search pattern. </summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="path" /> has been removed.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern">
      <summary>Gets the search pattern passed into the constructor of <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />.</summary>
      <returns>The search pattern the catalog uses to find files. The default is *.dll.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>Gets the display name of the directory catalog.</summary>
      <returns>A string that contains a human-readable display name of the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>Gets the composition element from which the directory catalog originated.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString">
      <summary>Gets a string representation of the directory catalog.</summary>
      <returns>A string representation of the catalog.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportProvider">
      <summary>Defines the abstract base class for export providers, which provides methods for retrieving <see cref="T:System.Lazy`1" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> class.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged">
      <summary>Occurs when the exports in the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> change.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging">
      <summary>Occurs when the provided exports are changing.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1">
      <summary>Returns the export with the contract name derived from the specified type parameter. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the contract name derived from the specified type parameter.</returns>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`1" /> object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.Lazy`1" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.Lazy`1" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2">
      <summary>Returns the export with the contract name derived from the specified type parameter. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>System.Lazy`2</returns>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`2" /> object to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.Lazy`2" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.Lazy`2" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.Lazy`2" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)">
      <summary>Returns the export with the specified contract name. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the specified contract name.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.Lazy`2" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`2" /> object to return.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.Lazy`2" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.Lazy`2" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.Lazy`2" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)">
      <summary>Returns the export with the specified contract name. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the specified contract name.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.Lazy`1" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`1" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.Lazy`1" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.Lazy`1" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1">
      <summary>Returns the exported object with the contract name derived from the specified type parameter. If there is not exactly one matching exported object, an exception is thrown.</summary>
      <returns>The exported object with the contract name derived from the specified type parameter.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero exported objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.-or-There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)">
      <summary>Returns the exported object with the specified contract name. If there is not exactly one matching exported object, an exception is thrown.</summary>
      <returns>The exported object with the specified contract name.</returns>
      <param name="contractName">The contract name of the exported object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero exported objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.-or-There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1">
      <summary>Gets the exported object with the contract name derived from the specified type parameter or the default value for the specified type, or throws an exception if there is more than one matching exported object.</summary>
      <returns>The exported object with the contract name derived from <paramref name="T" />, if found; otherwise, the default value for <paramref name="T" />.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)">
      <summary>Gets the exported object with the specified contract name or the default value for the specified type, or throws an exception if there is more than one matching exported object.</summary>
      <returns>The exported object with the specified contract name, if found; otherwise, the default value for <paramref name="T" />.</returns>
      <param name="contractName">The contract name of the exported object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There is more than one exported object with the specified contract name in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1">
      <summary>Gets all the exported objects with the contract name derived from the specified type parameter.</summary>
      <returns>The exported objects with the contract name derived from the specified type parameter, if found; otherwise, an empty <see cref="T:System.Collections.ObjectModel.Collection`1" /> object.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">One or more of the underlying exported objects cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)">
      <summary>Gets all the exported objects with the specified contract name.</summary>
      <returns>The exported objects with the specified contract name, if found; otherwise, an empty <see cref="T:System.Collections.ObjectModel.Collection`1" /> object.</returns>
      <param name="contractName">The contract name of the exported objects to return; or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">One or more of the underlying exported values cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2">
      <summary>Gets all the exports with the contract name derived from the specified type parameter.</summary>
      <returns>The <see cref="T:System.Lazy`2" /> objects with the contract name derived from <paramref name="T" />, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object.</returns>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`2" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.Lazy`2" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1">
      <summary>Gets all the exports with the contract name derived from the specified type parameter.</summary>
      <returns>The <see cref="T:System.Lazy`1" /> objects with the contract name derived from <paramref name="T" />, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object.</returns>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`1" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets all exports that match the conditions of the specified import definition.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects matching the condition specified by <paramref name="definition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
        <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.-or-<see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is more than one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all exports that match the conditions of the specified import definition and composition.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects matching the condition specified by <paramref name="definition" /> and <paramref name="atomicComposition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
        <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.-or-<see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is more than one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.-or-<paramref name="atomicComposition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>The <see cref="T:System.Lazy`1" /> objects with the specified contract name, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.Lazy`1" /> objects to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`1" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>The <see cref="T:System.Lazy`2" /> objects with the specified contract name if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.Lazy`2" /> objects to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy2" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.Lazy`2" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>A collection of all the <see cref="T:System.Lazy`2" /> objects for the contract matching <paramref name="contractName" />.</returns>
      <param name="type">The type parameter of the <see cref="T:System.Lazy`2" /> objects to return.</param>
      <param name="metadataViewType">The type of the metadata view of the <see cref="T:System.Lazy`2" /> objects to return.</param>
      <param name="contractName">The contract name of the <see cref="T:System.Lazy`2" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="metadataViewType" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all the exports that match the constraint defined by the specified definition.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to return.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> event.</summary>
      <param name="e">An <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)">
      <summary>Gets all the exports that match the conditions of the specified import.</summary>
      <returns>true
            if <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; true if <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is exactly one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; otherwise, false.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
      <param name="exports">When this method returns, contains a collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions defined by <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> and <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> event. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> class. </summary>
      <param name="addedExports">The events that were added.</param>
      <param name="removedExports">The events that were removed.</param>
      <param name="atomicComposition">The composition transaction that contains the change.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AddedExports">
      <summary>Gets the exports that were added in this change.</summary>
      <returns>A collection of the exports that were added.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AtomicComposition">
      <summary>Gets the composition transaction of the change, if any.</summary>
      <returns>A reference to the composition transaction associated with the change, or null if no transaction is being used.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.ChangedContractNames">
      <summary>Gets the contract names that were altered in the change.</summary>
      <returns>A collection of the altered contract names.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.RemovedExports">
      <summary>Gets the exports that were removed in the change.</summary>
      <returns>A collection of the removed exports.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ImportEngine">
      <summary>Provides methods to perform composition on a specific part or parts.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class. </summary>
      <param name="sourceProvider">The <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class, optionally in thread-safe mode.</summary>
      <param name="sourceProvider">The <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <param name="isThreadSafe">true if thread safety is required; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.PreviewImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Previews all the required imports for the specified part to make sure that they can be satisfied, without actually setting them.</summary>
      <param name="part">The part to preview the imports of.</param>
      <param name="atomicComposition">The composition transaction to use, or null for no composition transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.ReleaseImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Releases all the exports used to satisfy the imports of the specified part.</summary>
      <param name="part">The part to release the imports of.</param>
      <param name="atomicComposition">The composition transaction to use, or null for no composition transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified part.</summary>
      <param name="part">The part to satisfy the imports of.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified part without registering them for recomposition.</summary>
      <param name="part">The part to satisfy the imports of.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged">
      <summary>Provides notifications when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> changes.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed">
      <summary>Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> has changed.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing">
      <summary>Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> is changing.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.TypeCatalog">
      <summary>An immutable <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object that is created from a type array or a list of managed types. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> class with the specified types.</summary>
      <param name="types">A collection of attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> contains an element that is null.-or-<paramref name="types" /> contains an element that was loaded in the reflection-only context.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> class with the specified types.</summary>
      <param name="types">An array of attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> contains an element that is null.-or-<paramref name="types" /> contains an element that was loaded in the reflection-only context.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a collection of exports that match the conditions specified by the import definition.</summary>
      <returns>A collection of exports that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">Conditions that specify which exports to match.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects that are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>Gets the display name of the type catalog.</summary>
      <returns>A string containing a human-readable display name of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>Gets the composition element from which the type catalog originated.</summary>
      <returns>Always null. </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.ToString">
      <summary>Returns a string representation of the type catalog.</summary>
      <returns>A string representation of the type catalog.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePart">
      <summary>Defines the abstract base class for composable parts, which import objects and produce exported objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.Activate">
      <summary>Called when all the imports of the part have been set, and exports can be retrieved.</summary>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions">
      <summary>Gets a collection of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by the part.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.GetExportedValue(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets the exported object described by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</summary>
      <returns>The exported object described by <paramref name="definition" />.</returns>
      <param name="definition">One of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> property that describes the exported object to return.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">An error occurred getting the exported object described by the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="definition" /> did not originate from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> property on the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more prerequisite imports, indicated by <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite" />, have not been set.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions">
      <summary>Gets a collection of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imported objects required by the part.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imported objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.Metadata">
      <summary>Gets the metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object. </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.SetImport(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>Sets the import described by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object to be satisfied by the specified exports.</summary>
      <param name="definition">One of the objects from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> property that specifies the import to be set.</param>
      <param name="exports">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects of which to set the import described by <paramref name="definition" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null. -or- <paramref name="exports" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">An error occurred setting the import described by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="definition" /> did not originate from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> property on the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />. -or- <paramref name="exports" /> contains an element that is null. -or- <paramref name="exports" /> is empty and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />. -or- <paramref name="exports" /> contains more than one element and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.Composition.Primitives.ComposablePart.SetImport(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})" /> has been previously called and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable" /> is false.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog">
      <summary>Represents the abstract base class for composable part catalogs, which collect and return <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a list of export definitions that match the constraint defined by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.Tuple`2" /> containing the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects and their associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects for objects that match the constraint specified by <paramref name="definition" />.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects to be returned.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> contained in the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition">
      <summary>Defines an abstract base class for composable part definitions, which describe and enable the creation of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.CreatePart">
      <summary>Creates a new instance of a part that the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> describes.</summary>
      <returns>The created part.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ExportDefinitions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the objects exported by the part defined by this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects created by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ImportDefinitions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imports required by the part defined by this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imports required by <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects created by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.Metadata">
      <summary>Gets a collection of the metadata for this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection that contains the metadata for the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartException">
      <summary>The exception that is thrown when an error occurs when calling methods on a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified serialization data.</summary>
      <param name="info">An object that holds the serialized object data for the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />.</param>
      <param name="context">An object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="info" /> is missing a required value.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="info" /> contains a value that cannot be cast to the correct type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message and the composition element that is the cause of the exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message, and the composition element and exception that are the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> property to null.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element">
      <summary>Gets the composition element that is the cause of the exception.</summary>
      <returns>The compositional element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />. The default is null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets the serialization data for the exception.</summary>
      <param name="info">After calling the method, contains serialized object data about the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />.</param>
      <param name="context">After calling the method, contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition">
      <summary>Represents an import that is required by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object and that can specify both a contract name and metadata.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> class with the specified contract name, required type identity, required metadata, cardinality, a value that indicates if the import definition is recomposable, a value that indicates if the import definition is a prerequisite, and a value that indicates the required creation policy.</summary>
      <param name="contractName">A string that contains the contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</param>
      <param name="requiredTypeIdentity">The type identity of the export type expected. Use the <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> method to generate a type identity for a given type. If no specific type is required, use null.</param>
      <param name="requiredMetadata">A collection of key/value pairs containing the metadata names and types required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />; or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata" /> property to an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</param>
      <param name="cardinality">One of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</param>
      <param name="isRecomposable">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />; otherwise, false.</param>
      <param name="isPrerequisite">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> is required to be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> can start producing exported objects; otherwise, false.</param>
      <param name="requiredCreationPolicy">A value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. If no specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> is needed, the default is <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").-or-<paramref name="requiredMetadata" /> contains an element that is null.-or-<paramref name="cardinality" /> is not one of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> values.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint">
      <summary>Gets an expression that defines conditions that must be matched to satisfy the import described by this import definition.</summary>
      <returns>An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions that must be matched for the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> to be satisfied by an <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Returns a value indicating whether the constraint represented by this object is satisfied by the export represented by the given export definition.</summary>
      <returns>true if the constraint is satisfied; otherwise, false.</returns>
      <param name="exportDefinition">The export definition to test.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all exports used should be shared by all importers in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all exports used should be non-shared in the container. In this case, each importer receives a separate instance.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata">
      <summary>Gets the metadata names of the export required by the import definition.</summary>
      <returns>A collection of <see cref="T:System.String" /> objects that contain the metadata names of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />. The default is an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity">
      <summary>Gets the expected type of the export that matches this <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</summary>
      <returns>A string that is generated by calling the <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> method on the type that this import expects. If the value is null then this import does not expect a particular type.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.Export">
      <summary>Represents an export, which is a type that consists of a delay-created exported object and the metadata that describes that object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.ComponentModel.Composition.Primitives.ExportDefinition,System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified export definition and exported object getter.</summary>
      <param name="definition">An object that describes the contract that the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.Value" /> property is called. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified contract name, metadata, and exported value getter.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object.</param>
      <param name="metadata">The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.Export.Metadata" /> property to an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.Value" /> method is called.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified contract name and exported value getter.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.Value" /> method is called.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Definition">
      <summary>Gets the definition that describes the contract that the export satisfies.</summary>
      <returns>A definition that describes the contract that the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</returns>
      <exception cref="T:System.NotImplementedException">This property was not overridden by a derived class.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.GetExportedValueCore">
      <summary>Returns the exported object the export provides.</summary>
      <returns>The exported object the export provides.</returns>
      <exception cref="T:System.NotImplementedException">The <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedValueCore" /> method was not overridden by a derived class.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Metadata">
      <summary>Gets the metadata for the export.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</returns>
      <exception cref="T:System.NotImplementedException">The <see cref="P:System.ComponentModel.Composition.Primitives.Export.Definition" /> property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Value">
      <summary>Provides the object this export represents.</summary>
      <returns>The object this export represents.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportDefinition">
      <summary>Describes the contract that a particular <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> class with the specified contract name and metadata.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</param>
      <param name="metadata">The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata" /> property to an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.ContractName">
      <summary>Gets the contract name.</summary>
      <returns>The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</returns>
      <exception cref="T:System.NotImplementedException">The property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata">
      <summary>Gets the contract metadata.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" />. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.ToString">
      <summary>Returns a string representation of the export definition.</summary>
      <returns>A string representation of the export definition.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportedDelegate">
      <summary>Represents a function exported by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportedDelegate" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.#ctor(System.Object,System.Reflection.MethodInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportedDelegate" /> class for the specified part and method. </summary>
      <param name="instance">The part exporting the method.</param>
      <param name="method">The method to be exported.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.CreateDelegate(System.Type)">
      <summary>Gets a delegate of the specified type.</summary>
      <returns>A delegate of the specified type, or null if no such delegate can be created.</returns>
      <param name="delegateType">The type of the delegate to return.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ICompositionElement">
      <summary>Represents an element that participates in composition.</summary>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName">
      <summary>Gets the display name of the composition element.</summary>
      <returns>The human-readable display name of the <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.Origin">
      <summary>Gets the composition element from which the current composition element originated.</summary>
      <returns>The composition element from which the current <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> originated, or null if the <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> is the root composition element.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportCardinality">
      <summary>Indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by an <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne">
      <summary>Zero or one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects are required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne">
      <summary>Exactly one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object is required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore">
      <summary>Zero or more <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects are required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportDefinition">
      <summary>Represents an import that is required by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean}},System.String,System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> class with the specified constraint, contract name, cardinality, a value that indicates whether the import definition is recomposable, and a value that indicates whether the import definition is a prerequisite.</summary>
      <param name="constraint">An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions an <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> must match to satisfy the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</param>
      <param name="contractName">The contract name.</param>
      <param name="cardinality">One of the enumeration values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</param>
      <param name="isRecomposable">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object; otherwise, false.</param>
      <param name="isPrerequisite">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> must be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> can start producing exported objects; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cardinality" /> is not one of the values of <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality">
      <summary>Gets the cardinality of the exports required by the import definition.</summary>
      <returns>One of the enumeration values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />. The default is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Constraint">
      <summary>Gets an expression that defines conditions that the import must satisfy to match the import definition.</summary>
      <returns>An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions an <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> must satisfy to match the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</returns>
      <exception cref="T:System.NotImplementedException">The property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.ContractName">
      <summary>Gets the name of the contract.</summary>
      <returns>The contract name.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets a value that indicates whether the export represented by the specified definition satisfies the constraints of this import definition.</summary>
      <returns>true if the constraints are satisfied; otherwise, false.</returns>
      <param name="exportDefinition">The export definition to test.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite">
      <summary>Gets a value that indicates whether the import definition must be satisfied before a part can start producing exported objects.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> must be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object can start producing exported objects; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable">
      <summary>Gets a value that indicates whether the import definition can be satisfied multiple times.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.ToString">
      <summary>Returns a string representation of the import definition.</summary>
      <returns>A string representation of the import definition.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo">
      <summary>Represents a <see cref="T:System.Reflection.MemberInfo" /> object that does not load assemblies or create objects until requested.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class, representing the specified member.</summary>
      <param name="member">The member to represent.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberTypes,System.Func{System.Reflection.MemberInfo[]})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class for a member of the specified type with the specified accessors.</summary>
      <param name="memberType">The type of the represented member.</param>
      <param name="accessorsCreator">A function whose return value is a collection of the accessors for the represented member.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberTypes,System.Reflection.MemberInfo[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class for a member of the specified type with the specified accessors.</summary>
      <param name="memberType">The type of the represented member.</param>
      <param name="accessors">An array of the accessors for the represented member.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.Equals(System.Object)">
      <param name="obj">The other object.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.GetAccessors">
      <summary>Gets an array of the accessors for the represented member.</summary>
      <returns>An array of the accessors for the represented member.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.GetHashCode"></member>
    <member name="P:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.MemberType">
      <summary>Gets the type of the represented member.</summary>
      <returns>The type of the represented member.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.op_Equality(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo)">
      <summary>Determines whether the two specified <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> objects are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="left">The first object to test.</param>
      <param name="right">The second object to test.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.op_Inequality(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo)">
      <summary>Determines whether the two specified <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> objects are not equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="left">The first object to test.</param>
      <param name="right">The second object to test.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices">
      <summary>Provides extension methods to create and retrieve reflection-based parts.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateExportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an export definition from the specified member, with the specified contract name, metadata, and origin.</summary>
      <returns>An export definition created from the specified parameters.</returns>
      <param name="exportingMember">The member to export.</param>
      <param name="contractName">The contract name to use for the export.</param>
      <param name="metadata">The metadata for the export.</param>
      <param name="origin">The object that the export originates from.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an import definition for the specified member, with the specified contract name, type identity, required metadata, cardinality, recomposition policy, creation policy, and origin.</summary>
      <returns>An import definition created from the specified parameters.</returns>
      <param name="importingMember">The member to import into.</param>
      <param name="contractName">The contract name to use for the import.</param>
      <param name="requiredTypeIdentity">The required type identity for the import.</param>
      <param name="requiredMetadata">The required metadata for the import.</param>
      <param name="cardinality">The cardinality of the import.</param>
      <param name="isRecomposable">A value that indicates whether the import is recomposable.</param>
      <param name="requiredCreationPolicy">A value that indicates the import's creation policy.</param>
      <param name="origin">The object to import into.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an import definition for the specified parameter, with the specified contract name, type identity, required metadata, cardinality, creation policy, and origin.</summary>
      <returns>An import definition created from the specified parameters.</returns>
      <param name="parameter">The parameter to import.</param>
      <param name="contractName">The contract name to use for the import.</param>
      <param name="requiredTypeIdentity">The required type identity for the import.</param>
      <param name="requiredMetadata">The required metadata for the import.</param>
      <param name="cardinality">The cardinality of the import.</param>
      <param name="requiredCreationPolicy">A value that indicates the import's creation policy.</param>
      <param name="origin">The object to import into.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreatePartDefinition(System.Lazy{System.Type},System.Boolean,System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ImportDefinition}},System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition}},System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates a part definition with the specified part type, imports, exports, metadata, and origin.</summary>
      <returns>A part definition created from the specified parameters.</returns>
      <param name="partType">The type of the part.</param>
      <param name="isDisposalRequired">true if the part requires disposal; otherwise, false.</param>
      <param name="imports">A collection of the part's imports.</param>
      <param name="exports">A collection of the part's exports.</param>
      <param name="metadata">The part's metadata.</param>
      <param name="origin">The part's origin.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportingMember(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets the exporting member from a specified export definition.</summary>
      <returns>The member specified in the export definition.</returns>
      <param name="exportDefinition">The export definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingMember(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the importing member from a specified import definition.</summary>
      <returns>The member specified in the import definition.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the importing parameter from a specified import definition.</summary>
      <returns>The parameter specified in the import definition.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetPartType(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>Gets the type of a part from a specified part definition.</summary>
      <returns>The type of the defined part.</returns>
      <param name="partDefinition">The part definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsDisposalRequired(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>Determines whether the specified part requires disposal.</summary>
      <returns>true if the part requires disposal; otherwise, false.</returns>
      <param name="partDefinition">The part to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Determines whether an import definition represents a member or a parameter.</summary>
      <returns>true if the import definition represents a parameter; otherwise, false.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.ComponentModel.DataAnnotations.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.DataAnnotations</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider">
      <summary>Extends the metadata information for a class by adding attributes and property information that is defined in an associated class.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider" /> class by using the specified type.</summary>
      <param name="type">The type for which the metadata provider is created.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider" /> class by using the specified metadata provider type and associated type.</summary>
      <param name="type">The type for which the metadata provider is created.</param>
      <param name="associatedMetadataType">The associated type that contains the metadata.</param>
      <exception cref="ArgumentNullException">The value of <paramref name="associatedMetadataType" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>Gets a type descriptor for the specified type and object.</summary>
      <returns>The descriptor that provides metadata for the type.</returns>
      <param name="objectType">The type of object to retrieve the type descriptor for.</param>
      <param name="instance">An instance of the type. </param>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.AssociationAttribute">
      <summary>Represents an attribute that is used to specify that an entity property participates in an association.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociationAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociationAttribute" /> class</summary>
      <param name="name">The name of the association.</param>
      <param name="thisKey">A comma-separated list of the property names of the key values on the <paramref name="thisKey" /> side of the association.</param>
      <param name="otherKey">A comma-separated list of the property names of the key values on the <paramref name="otherKey" /> side of the association.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.IsForeignKey">
      <summary>Gets or sets a value that indicates whether the association member represents a foreign key.</summary>
      <returns>true if the association represents a foreign key; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.Name">
      <summary>Gets the name of the association.</summary>
      <returns>The name of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey">
      <summary>Gets the property names of the key values on the OtherKey side of the association.</summary>
      <returns>A comma-separated list of the property names that represent the key values on the OtherKey side of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKeyMembers">
      <summary>Gets a collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" /> property.</summary>
      <returns>A collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" /> property.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey">
      <summary>Gets the property names of the key values on the ThisKey side of the association.</summary>
      <returns>A comma-separated list of the property names that represent the key values on the ThisKey side of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKeyMembers">
      <summary>Gets a collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" /> property.</summary>
      <returns>A collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" /> property.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute">
      <summary>Specifies the data type of the column that is used for optimistic concurrency checks.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute">
      <summary>Specifies a custom validation method to call at run time.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute" /> class.</summary>
      <param name="validatorType">The type that contains the method that performs custom validation.</param>
      <param name="method">The method that performs custom validation.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.FormatErrorMessage(System.String)">
      <summary>Formats a validation error message.</summary>
      <returns>An instance of the formatted error message.</returns>
      <param name="name">The name to include in the formatted message.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.Method">
      <summary>Gets the validation method.</summary>
      <returns>The name of the validation method.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.TypeId">
      <summary>Gets a unique identifier for this attribute.</summary>
      <returns>The object that identifies this attribute.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.ValidatorType">
      <summary>Gets the type that performs custom validation.</summary>
      <returns>The type that performs custom validation.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataType">
      <summary>Represents an enumeration of the data types associated with data fields and parameters. </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Custom">
      <summary>Represents a custom data type.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.DateTime">
      <summary>Represents an instant in time, expressed as a date and time of day.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Date">
      <summary>Represents a date value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Time">
      <summary>Represents a time value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Duration">
      <summary>Represents a continuous time during which an object exists.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.PhoneNumber">
      <summary>Represents a phone number value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Currency">
      <summary>Represents a currency value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Text">
      <summary>Represents text that is displayed.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Html">
      <summary>Represents an HTML file.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.MultilineText">
      <summary>Represents multi-line text.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.EmailAddress">
      <summary>Represents an e-mail address.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Password">
      <summary>Represent a password value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Url">
      <summary>Represents a URL value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.ImageUrl">
      <summary>Represents a URL to an image.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataTypeAttribute">
      <summary>Specifies the name of an additional type to associate with a data field.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeTypeAttribute" /> class by using the specified type name.</summary>
      <param name="dataType">The name of the type to associate with the data field.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeTypeAttribute" /> class by using the specified field template name.</summary>
      <param name="customDataType">The name of the custom field template to associate with the data field.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="customDataType" /> is null or an empty string (""). </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType">
      <summary>Gets the name of custom field template that is associated with the data field.</summary>
      <returns>The name of the custom field template that is associated with the data field.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType">
      <summary>Gets the type that is associated with the data field.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.DataAnnotations.DataType" /> values.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat">
      <summary>Gets a data-field display format.</summary>
      <returns>The data-field display format.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName">
      <summary>Returns the name of the type that is associated with the data field.</summary>
      <returns>The name of the type associated with the data field.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.IsValid(System.Object)">
      <summary>Checks that the value of the data field is valid.</summary>
      <returns>true always.</returns>
      <param name="value">The data field value to validate.</param>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayAttribute">
      <summary>Provides a general-purpose attribute that lets you specify localizable strings for types and members of entity partial classes.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute" /> class.</summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField">
      <summary>Gets or sets a value that indicates whether UI should be generated automatically in order to display this field.</summary>
      <returns>true if UI should be generated automatically to display this field; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to get the property value before it was set.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter">
      <summary>Gets or sets a value that indicates whether UI should be generated automatically in order to display filtering for this field. </summary>
      <returns>true if UI should be generated automatically to display filtering for this field; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to get the property value before it was set.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description">
      <summary>Gets or sets a value that is used to display a description in the UI.</summary>
      <returns>The value that is used to display a description in the UI.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateField">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" /> property.</summary>
      <returns>The value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" /> if the property has been initialized; otherwise, null.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateFilter">
      <summary>Returns a value that indicates whether UI should be generated automatically in order to display filtering for this field. </summary>
      <returns>The value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter" /> if the property has been initialized; otherwise, null.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property.</summary>
      <returns>The localized description, if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> has been specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property are initialized, but a public static property that has a name that matches the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> value could not be found for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> property.</summary>
      <returns>A value that will be used for grouping fields in the UI, if <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> has been initialized; otherwise, null. If the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property has been specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> property represents a resource key, a localized string is returned; otherwise, a non-localized string is returned.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName">
      <summary>Returns a value that is used for field display in the UI.</summary>
      <returns>The localized string for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property, if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property has been specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property are initialized, but a public static property that has a name that matches the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> value could not be found for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetOrder">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> property.</summary>
      <returns>The value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> property, if it has been set; otherwise, null.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property.</summary>
      <returns>Gets the localized string for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property has been specified and if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property.</summary>
      <returns>The localized string for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property has been specified and if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> value property.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName">
      <summary>Gets or sets a value that is used to group fields in the UI.</summary>
      <returns>A value that is used to group fields in the UI.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name">
      <summary>Gets or sets a value that is used for display in the UI.</summary>
      <returns>A value that is used for display in the UI.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order">
      <summary>Gets or sets the order weight of the column.</summary>
      <returns>The order weight of the column.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt">
      <summary>Gets or sets a value that will be used to set the watermark for prompts in the UI.</summary>
      <returns>A value that will be used to display a watermark in the UI.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType">
      <summary>Gets or sets the type that contains the resources for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />, and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> properties.</summary>
      <returns>The type of the resource that contains the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />, and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> properties.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName">
      <summary>Gets or sets a value that is used for the grid column label.</summary>
      <returns>A value that is for the grid column label.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute">
      <summary>Specifies the column that is displayed in the referred table as a foreign-key column.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class by using the specified column. </summary>
      <param name="displayColumn">The name of the column to use as the display column.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class by using the specified display and sort columns. </summary>
      <param name="displayColumn">The name of the column to use as the display column.</param>
      <param name="sortColumn">The name of the column to use for sorting.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class by using the specified display column, and the specified sort column and sort order. </summary>
      <param name="displayColumn">The name of the column to use as the display column.</param>
      <param name="sortColumn">The name of the column to use for sorting.</param>
      <param name="sortDescending">true to sort in descending order; otherwise, false. The default is false.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.DisplayColumn">
      <summary>Gets the name of the column to use as the display field.</summary>
      <returns>The name of the display column.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortColumn">
      <summary>Gets the name of the column to use for sorting.</summary>
      <returns>The name of the sort column.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortDescending">
      <summary>Gets a value that indicates whether to sort in descending or ascending order.</summary>
      <returns>true if the column will be sorted in descending order; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute">
      <summary>Specifies how data fields are displayed and formatted by ASP.NET Dynamic Data.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" /> class. </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ApplyFormatInEditMode">
      <summary>Gets or sets a value that indicates whether the formatting string that is specified by the <see cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" /> property is applied to the field value when the data field is in edit mode.</summary>
      <returns>true if the formatting string applies to the field value in edit mode; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ConvertEmptyStringToNull">
      <summary>Gets or sets a value that indicates whether empty string values ("") are automatically converted to null when the data field is updated in the data source.</summary>
      <returns>true if empty string values are automatically converted to null; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString">
      <summary>Gets or sets the display format for the field value.</summary>
      <returns>A formatting string that specifies the display format for the value of the data field. The default is an empty string (""), which indicates that no special formatting is applied to the field value.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.HtmlEncode">
      <summary>Gets or sets a value that indicates whether the field should be HTML-encoded.</summary>
      <returns>true if the field should be HTML-encoded; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.NullDisplayText">
      <summary>Gets or sets the text that is displayed for a field when the field's value is null.</summary>
      <returns>The text that is displayed for a field when the field's value is null. The default is an empty string (""), which indicates that this property is not set.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.EditableAttribute">
      <summary>Indicates whether a data field is editable.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EditableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute" /> class.</summary>
      <param name="allowEdit">true to specify that field is editable; otherwise, false.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit">
      <summary>Gets a value that indicates whether a field is editable.</summary>
      <returns>true if the field is editable; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue">
      <summary>Gets or sets a value that indicates whether an initial value is enabled.</summary>
      <returns>true if an initial value is enabled; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute">
      <summary>Enables a .NET Framework enumeration to be mapped to a data column.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute" /> class.</summary>
      <param name="enumType">The type of the enumeration.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.EnumType">
      <summary>Gets or sets the enumeration type.</summary>
      <returns>The enumeration type.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.IsValid(System.Object)">
      <summary>Checks that the value of the data field is valid.</summary>
      <returns>true if the data field value is valid; otherwise, false.</returns>
      <param name="value">The data field value to validate.</param>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute">
      <summary>Represents an attribute that is used to specify the filtering behavior for a column.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class by using the filter UI hint.</summary>
      <param name="filterUIHint">The name of the control to use for filtering.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class by using the filter UI hint and presentation layer name.</summary>
      <param name="filterUIHint">The name of the control to use for filtering.</param>
      <param name="presentationLayer">The name of the presentation layer that supports this control.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class by using the filter UI hint, presentation layer name, and control parameters.</summary>
      <param name="filterUIHint">The name of the control to use for filtering.</param>
      <param name="presentationLayer">The name of the presentation layer that supports this control.</param>
      <param name="controlParameters">The list of parameters for the control.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.ControlParameters">
      <summary>Gets the name/value pairs that are used as parameters in the control's constructor.</summary>
      <returns>The name/value pairs that are used as parameters in the control's constructor.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this attribute instance is equal to a specified object.</summary>
      <returns>True if the passed object is equal to this attribute instance; otherwise, false.</returns>
      <param name="obj">The object to compare with this attribute instance.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.FilterUIHint">
      <summary>Gets the name of the control to use for filtering.</summary>
      <returns>The name of the control to use for filtering.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.GetHashCode">
      <summary>Returns the hash code for this attribute instance.</summary>
      <returns>This attribute insatnce hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.PresentationLayer">
      <summary>Gets the name of the presentation layer that supports this control.</summary>
      <returns>The name of the presentation layer that supports this control.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.TypeId">
      <summary>Returns the unique identifier for this attribute instance.</summary>
      <returns>This attribuet instance unique identifier.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.IValidatableObject">
      <summary>Provides a way for an object to be invalidated.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid.</summary>
      <returns>A collection that holds failed-validation information.</returns>
      <param name="validationContext">The validation context.</param>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.KeyAttribute">
      <summary>Denotes one or more properties that uniquely identify an entity.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.KeyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute">
      <summary>Specifies the metadata class to associate with a data model class.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.MetadataTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" /> class.</summary>
      <param name="metadataClassType">The metadata class to reference.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadataClassType" /> is null. </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.MetadataTypeAttribute.MetadataClassType">
      <summary>Gets the metadata class that is associated with a data-model partial class.</summary>
      <returns>The type value that represents the metadata class.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RangeAttribute">
      <summary>Specifies the numeric range constraints for the value of a data field. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class by using the specified minimum and maximum values. </summary>
      <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
      <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class by using the specified minimum and maximum values.</summary>
      <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
      <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class by using the specified minimum and maximum values and the specific type.</summary>
      <param name="type">Specifies the type of the object to test.</param>
      <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
      <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.FormatErrorMessage(System.String)">
      <summary>Formats the error message that is displayed when range validation fails.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name of the field that caused the validation failure. </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(System.Object)">
      <summary>Checks that the value of the data field is in the specified range.</summary>
      <returns>true if the specified value is in the range; otherwise, false.</returns>
      <param name="value">The data field value to validate.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value was outside the allowed range.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum">
      <summary>Gets the maximum allowed field value.</summary>
      <returns>The maximum value that is allowed for the data field.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum">
      <summary>Gets the minimum allowed field value.</summary>
      <returns>The minimu value that is allowed for the data field.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.OperandType">
      <summary>Gets the type of the data field whose value must be validated.</summary>
      <returns>The type of the data field whose value must be validated.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute">
      <summary>Specifies that a data field value in ASP.NET Dynamic Data must match the specified regular expression.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> class.</summary>
      <param name="pattern">The regular expression that is used to validate the data field value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.FormatErrorMessage(System.String)">
      <summary>Formats the error message to display if the regular expression validation fails.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name of the field that caused the validation failure.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.IsValid(System.Object)">
      <summary>Checks whether the value entered by the user matches the regular expression pattern. </summary>
      <returns>true if validation is successful; otherwise, false.</returns>
      <param name="value">The data field value to validate.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value did not match the regular expression pattern.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern">
      <summary>Gets the regular expression pattern.</summary>
      <returns>The pattern to match.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RequiredAttribute">
      <summary>Specifies that a data field value is required.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> class.</summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RequiredAttribute.AllowEmptyStrings">
      <summary>Gets or sets a value that indicates whether an empty string is allowed.</summary>
      <returns>true if an empty string is allowed; otherwise, false. The default value is false.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.IsValid(System.Object)">
      <summary>Checks that the value of the required data field is not empty.</summary>
      <returns>true if validation is successful; otherwise, false.</returns>
      <param name="value">The data field value to validate.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value was null.</exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute">
      <summary>Specifies whether a class or data column uses scaffolding.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute" /> using the <see cref="P:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.Scaffold" /> property.</summary>
      <param name="scaffold">The value that specifies whether scaffolding is enabled.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.Scaffold">
      <summary>Gets or sets the value that specifies whether scaffolding is enabled.</summary>
      <returns>true, if scaffolding is enabled; otherwise false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute">
      <summary>Specifies whether a class or data table uses scaffolding.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute" /> using the <see cref="P:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute.Scaffold" /> property.</summary>
      <param name="scaffold">The value that specifies whether scaffolding is enabled.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute.Scaffold">
      <summary>Gets or sets the value that specifies whether scaffolding is enabled.</summary>
      <returns>true, if scaffolding is enabled; otherwise false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.StringLengthAttribute">
      <summary>Specifies the minimum and maximum length of characters that are allowed in a data field.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> class by using a specified maximum length.</summary>
      <param name="maximumLength">The maximum length of a string. </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to a specified error message.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The error message to format.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumLength" /> is negative. -or-<paramref name="maximumLength" /> is less than <paramref name="minimumLength" />.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.IsValid(System.Object)">
      <summary>Determines whether a specified object is valid.</summary>
      <returns>true if the specified object is valid; otherwise, false.</returns>
      <param name="value">The object to validate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumLength" /> is negative.-or-<paramref name="maximumLength" /> is less than <see cref="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength" />.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength">
      <summary>Gets or sets the maximum length of a string.</summary>
      <returns>The maximum length a string. </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength">
      <summary>Gets or sets the minimum length of a string.</summary>
      <returns>The minimum length of a string.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.TimestampAttribute">
      <summary>Specifies the data type of the column as a row version.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.TimestampAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.UIHintAttribute">
      <summary>Specifies the template or user control that Dynamic Data uses to display a data field. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class by using a specified user control. </summary>
      <param name="uiHint">The user control to use to display the data field. </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class using the specified user control and specified presentation layer. </summary>
      <param name="uiHint">The user control (field template) to use to display the data field.</param>
      <param name="presentationLayer">The presentation layer that uses the class. Can be set to "HTML", "Silverlight", "WPF", or "WinForms".</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class by using the specified user control, presentation layer, and control parameters.</summary>
      <param name="uiHint">The user control (field template) to use to display the data field.</param>
      <param name="presentationLayer">The presentation layer that uses the class. Can be set to "HTML", "Silverlight", "WPF", or "WinForms".</param>
      <param name="controlParameters">The object to use to retrieve values from any data sources. </param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" /> is null or it is a constraint key.-or-The value of <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" /> is not a string. </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters">
      <summary>Gets or sets the <see cref="T:System.Web.DynamicData.DynamicControlParameter" /> object to use to retrieve values from any data source.</summary>
      <returns>A collection of key/value pairs. </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.Equals(System.Object)">
      <summary>Gets a value that indicates whether this instance is equal to the specified object.</summary>
      <returns>true if the specified object is equal to this instance; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance, or a null reference.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.GetHashCode">
      <summary>Gets the hash code for the current instance of the attribute.</summary>
      <returns>The attribute instance hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer">
      <summary>Gets or sets the presentation layer that uses the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class. </summary>
      <returns>The presentation layer that is used by this class.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.TypeId">
      <summary>Gets the unique identifier for the attribute.</summary>
      <returns>The unique identifier for the attribute.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint">
      <summary>Gets or sets the name of the field template to use to display the data field.</summary>
      <returns>The name of the field template that displays the data field.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationAttribute">
      <summary>Serves as the base class for all validation attributes. </summary>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> and <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" /> properties for localized error message are set at the same time that the non-localized <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage" /> property error message is set.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.Func{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class by using the function that enables access to validation resources.</summary>
      <param name="errorMessageAccessor">The function that enables access to validation resources.</param>
      <exception cref="T:System:ArgumentNullException">
        <paramref name="errorMessageAccessor" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class by using the error message to associate with a validation control.</summary>
      <param name="errorMessage">The error message to associate with a validation control.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage">
      <summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
      <returns>The error message that is associated with the validation control.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName">
      <summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> property value if validation fails.</summary>
      <returns>The error message resource that is associated with a validation control.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType">
      <summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
      <returns>The type of error message that is associated with a validation control.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString">
      <summary>Gets the localized validation error message.</summary>
      <returns>The localized validation error message.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message, based on the data field where the error occurred. </summary>
      <returns>An instance of the formatted error message.</returns>
      <param name="name">The name to include in the formatted message.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
      <returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class. </returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context information about the validation operation.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)">
      <summary>Determines whether the specified value of the object is valid. </summary>
      <returns>true if the specified value is valid; otherwise, false.</returns>
      <param name="value">The value of the object to validate. </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Validates the specified value with respect to the current validation attribute.</summary>
      <returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class. </returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context information about the validation operation.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Validates the specified object.</summary>
      <param name="value">The object to validate.</param>
      <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> object that describes the context where the validation checks are performed. This parameter cannot be null.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.String)">
      <summary>Validates the specified object.</summary>
      <param name="value">The value of the object to validate.</param>
      <param name="name">The name to include in the error message.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="value" /> is not valid.</exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationContext">
      <summary>Describes the context in which a validation check is performed.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object,System.IServiceProvider,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> class. </summary>
      <param name="instance">The object to validate. This parameter is required.</param>
      <param name="serviceProvider">The object that implements the <see cref="T:System.IServiceProvider" /> interface. This parameter is optional.</param>
      <param name="items">A dictionary of key/value pairs to make available to the service consumers. This parameter is optional.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.DisplayName">
      <summary>Gets or sets the name of the member to validate. </summary>
      <returns>The name of the member to validate. </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)">
      <summary>Returns the service that provides custom validation.</summary>
      <returns>An instance of the service, or null if the service is not available.</returns>
      <param name="serviceType">The type of the service to use for validation.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.Items">
      <summary>Gets the dictionary of key/value pairs that is associated with this context.</summary>
      <returns>The dictionary of the key/value pairs for this context.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName">
      <summary>Gets or sets the name of the member to validate. </summary>
      <returns>The name of the member to validate. </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance">
      <summary>Gets the object to validate.</summary>
      <returns>The object to validate.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectType">
      <summary>Gets the type of the object to validate.</summary>
      <returns>The type of the object to validate.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ServiceContainer">
      <summary>Gets the validation services container.</summary>
      <returns>The validation services container.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationException">
      <summary>Represents the exception that occurs during validation of a data field when the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class is used. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using an error message generated by the system.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.ComponentModel.DataAnnotations.ValidationResult,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class by using a validation result, a validation attribute, and the value of the current exception.</summary>
      <param name="validationResult">The list of validation results.</param>
      <param name="validatingAttribute">The attribute that caused the current exception.</param>
      <param name="value">The value of the object that caused the attribute to trigger the validation error.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using serialized data.</summary>
      <param name="info">The object that holds the serialized data.</param>
      <param name="context">Context information about the source or destination of the serialized object.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using a specified error message.</summary>
      <param name="message">A specified message that states the error.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using a specified error message, a validation attribute, and the value of the current exception.</summary>
      <param name="errorMessage">The message that states the error.</param>
      <param name="validatingAttribute">The attribute that caused the current exception.</param>
      <param name="value">The value of the object that caused the attribute to trigger validation error.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using a specified error message and a collection of inner exception instances.</summary>
      <param name="message">The error message. </param>
      <param name="innerException">The collection of validation exceptions.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets information about the exception and adds it to the <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" /> object</summary>
      <param name="info">The object that holds the serialized object data for the exception that occurred.</param>
      <param name="context">Context information about the source or destination of the exception.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationAttribute">
      <summary>Gets the instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class that triggered this exception.</summary>
      <returns>An instance of the validation attribute type that triggered this exception.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult">
      <summary>Gets the <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" /> instance that describes the validation error.</summary>
      <returns>The <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" /> instance that describes the validation error.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.Value">
      <summary>Gets the value of the object that causes the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class to trigger this exception.</summary>
      <returns>The value of the object that caused the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class to trigger the validation error.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationResult">
      <summary>Represents a container for the results of a validation request.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.ComponentModel.DataAnnotations.ValidationResult)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class by using a <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> object.</summary>
      <param name="validationResult">The validation result object.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class by using an error message.</summary>
      <param name="errorMessage">The error message.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class by using an error message and a list of members that have validation errors.</summary>
      <param name="errorMessage">The error message.</param>
      <param name="memberNames">The list of member names that have validation errors.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage">
      <summary>Gets the error message for the validation.</summary>
      <returns>The error message for the validation.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.MemberNames">
      <summary>Gets the collection of member names that indicate which fields have validation errors.</summary>
      <returns>The collection of member names that indicate which fields have validation errors.</returns>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.ValidationResult.Success">
      <summary>true if validation was successful; otherwise, false.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Validator">
      <summary>Defines a helper class that can be used to validate objects, properties, and methods when it is included in their associated <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> attributes.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
      <summary>Determines whether the specified object is valid using the validation context and validation results collection.</summary>
      <returns>true if the object validates; otherwise, false.</returns>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <param name="validationResults">A collection to hold each failed validation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean)">
      <summary>Determines whether the specified object is valid using the validation context, validation results collection, and a value that specifies whether to validate all properties.</summary>
      <returns>true if the object validates; otherwise, false.</returns>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <param name="validationResults">A collection to hold each failed validation.</param>
      <param name="validateAllProperties">true to validate all properties; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
      <summary>Validates the property.</summary>
      <returns>true if the property validates; otherwise, false.</returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context that describes the property to validate.</param>
      <param name="validationResults">A collection to hold each failed validation. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be assigned to the property.-or-<paramref name="value " />is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
      <summary>Returns a value that indicates whether the specified value is valid with the specified attributes.</summary>
      <returns>true if the object validates; otherwise, false.</returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <param name="validationResults">A collection to hold failed validations. </param>
      <param name="validationAttributes">The validation attributes.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid using the validation context.</summary>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The object is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)">
      <summary>Determines whether the specified object is valid using the validation context, and a value that specifies whether to validate all properties.</summary>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <param name="validateAllProperties">true to validate all properties; otherwise, false.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="instance" /> is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Validates the property.</summary>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context that describes the property to validate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be assigned to the property.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The <paramref name="value" /> parameter is not valid.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
      <summary>Validates the specified attributes.</summary>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <param name="validationAttributes">The validation attributes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="validationContext" /> parameter is null.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The <paramref name="value" /> parameter does not validate with the <paramref name="validationAttributes" /> parameter.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Configuration.Install.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Configuration.Install</name>
  </assembly>
  <members>
    <member name="T:System.Configuration.Install.AssemblyInstaller">
      <summary>Loads an assembly, and runs all the installers in it.</summary>
    </member>
    <member name="M:System.Configuration.Install.AssemblyInstaller.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.AssemblyInstaller" /> class.</summary>
    </member>
    <member name="M:System.Configuration.Install.AssemblyInstaller.#ctor(System.Reflection.Assembly,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.AssemblyInstaller" /> class, and specifies both the assembly to install and the command line to use when creating a new <see cref="T:System.Configuration.Install.InstallContext" /> object.</summary>
      <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> to install. </param>
      <param name="commandLine">The command line to use when creating a new <see cref="T:System.Configuration.Install.InstallContext" /> object for the assembly's installation. Can be a null value.</param>
    </member>
    <member name="M:System.Configuration.Install.AssemblyInstaller.#ctor(System.String,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.AssemblyInstaller" /> class, and specifies both the file name of the assembly to install and the command line to use when creating a new <see cref="T:System.Configuration.Install.InstallContext" /> object for the assembly's installation.</summary>
      <param name="fileName">The file name of the assembly to install. </param>
      <param name="commandLine">The command line to use when creating a new <see cref="T:System.Configuration.Install.InstallContext" /> object for the assembly's installation. Can be a null value.</param>
    </member>
    <member name="P:System.Configuration.Install.AssemblyInstaller.Assembly">
      <summary>Gets or sets the assembly to install.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> that defines the assembly to install.</returns>
      <exception cref="T:System.ArgumentNullException">The property value is null. </exception>
    </member>
    <member name="M:System.Configuration.Install.AssemblyInstaller.CheckIfInstallable(System.String)">
      <summary>Checks to see if the specified assembly can be installed.</summary>
      <param name="assemblyName">The assembly in which to search for installers. </param>
      <exception cref="T:System.Exception">The specified assembly cannot be installed. </exception>
    </member>
    <member name="P:System.Configuration.Install.AssemblyInstaller.CommandLine">
      <summary>Gets or sets the command line to use when creating a new <see cref="T:System.Configuration.Install.InstallContext" /> object for the assembly's installation.</summary>
      <returns>An array of type <see cref="T:System.String" /> that represents the command line to use when creating a new <see cref="T:System.Configuration.Install.InstallContext" /> object for the assembly's installation.</returns>
    </member>
    <member name="M:System.Configuration.Install.AssemblyInstaller.Commit(System.Collections.IDictionary)">
      <summary>Completes the installation transaction.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer after all the installers in the installer collection have run. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="savedState" /> parameter is null.-or- The saved-state <see cref="T:System.Collections.IDictionary" /> might have been corrupted.-or- A file could not be found. </exception>
      <exception cref="T:System.Exception">An error occurred in the <see cref="E:System.Configuration.Install.Installer.Committing" /> event handler of one of the installers in the collection.-or- An error occurred in the <see cref="E:System.Configuration.Install.Installer.Committed" /> event handler of one of the installers in the collection.-or- An exception occurred during the <see cref="M:System.Configuration.Install.AssemblyInstaller.Commit(System.Collections.IDictionary)" /> phase of the installation. The exception is ignored and the installation continues. However, the application might not function correctly after installation completes.-or- Installer types were not found in one of the assemblies.-or- An instance of one of the installer types could not be created. </exception>
      <exception cref="T:System.Configuration.Install.InstallException">An exception occurred during the <see cref="M:System.Configuration.Install.AssemblyInstaller.Commit(System.Collections.IDictionary)" /> phase of the installation. The exception is ignored and the installation continues. However, the application might not function correctly after installation completes. </exception>
    </member>
    <member name="P:System.Configuration.Install.AssemblyInstaller.HelpText">
      <summary>Gets the help text for all the installers in the installer collection.</summary>
      <returns>The help text for all the installers in the installer collection, including the description of what each installer does and the command-line options (for the installation program) that can be passed to and understood by each installer.</returns>
    </member>
    <member name="M:System.Configuration.Install.AssemblyInstaller.Install(System.Collections.IDictionary)">
      <summary>Performs the installation.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> used to save information needed to perform a commit, rollback, or uninstall operation. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="savedState" /> parameter is null.-or- A file could not be found. </exception>
      <exception cref="T:System.Exception">An exception occurred in the <see cref="E:System.Configuration.Install.Installer.BeforeInstall" /> event handler of one of the installers in the collection.-or- An exception occurred in the <see cref="E:System.Configuration.Install.Installer.AfterInstall" /> event handler of one of the installers in the collection.-or- Installer types were not found in one of the assemblies.-or- An instance of one of the installer types could not be created. </exception>
    </member>
    <member name="P:System.Configuration.Install.AssemblyInstaller.Path">
      <summary>Gets or sets the path of the assembly to install.</summary>
      <returns>The path of the assembly to install.</returns>
    </member>
    <member name="M:System.Configuration.Install.AssemblyInstaller.Rollback(System.Collections.IDictionary)">
      <summary>Restores the computer to the state it was in before the installation.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="savedState" /> parameter is null.-or- The saved-state <see cref="T:System.Collections.IDictionary" /> might have been corrupted.-or- A file could not be found. </exception>
      <exception cref="T:System.Exception">An exception occurred in the <see cref="E:System.Configuration.Install.Installer.BeforeRollback" /> event handler of one of the installers in the collection.-or- An exception occurred in the <see cref="E:System.Configuration.Install.Installer.AfterRollback" /> event handler of one of the installers in the collection.-or- An exception occurred during the <see cref="M:System.Configuration.Install.AssemblyInstaller.Rollback(System.Collections.IDictionary)" /> phase of the installation. The exception is ignored and the rollback continues. However, the computer might not be fully reverted to its initial state after the rollback completes.-or- Installer types were not found in one of the assemblies.-or- An instance of one of the installer types could not be created. </exception>
      <exception cref="T:System.Configuration.Install.InstallException">An exception occurred during the <see cref="M:System.Configuration.Install.AssemblyInstaller.Rollback(System.Collections.IDictionary)" /> phase of the installation. The exception is ignored and the rollback continues. However, the computer might not be fully reverted to its initial state after the rollback completes. </exception>
    </member>
    <member name="M:System.Configuration.Install.AssemblyInstaller.Uninstall(System.Collections.IDictionary)">
      <summary>Removes an installation.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the post-installation state of the computer. </param>
      <exception cref="T:System.ArgumentException">The saved-state <see cref="T:System.Collections.IDictionary" /> might have been corrupted.-or- A file could not be found. </exception>
      <exception cref="T:System.Exception">An error occurred in the <see cref="E:System.Configuration.Install.Installer.BeforeUninstall" /> event handler of one of the installers in the collection.-or- An error occurred in the <see cref="E:System.Configuration.Install.Installer.AfterUninstall" /> event handler of one of the installers in the collection.-or- An exception occurred while uninstalling. The exception is ignored and the uninstall continues. However, the application might not be fully uninstalled after the uninstall completes.-or- Installer types were not found in one of the assemblies.-or- An instance of one of the installer types could not be created.-or- A file could not be deleted. </exception>
      <exception cref="T:System.Configuration.Install.InstallException">An exception occurred while uninstalling. The exception is ignored and the uninstall continues. However, the application might not be fully uninstalled after the uninstall completes. </exception>
    </member>
    <member name="P:System.Configuration.Install.AssemblyInstaller.UseNewContext">
      <summary>Gets or sets a value indicating whether to create a new <see cref="T:System.Configuration.Install.InstallContext" /> object for the assembly's installation.</summary>
      <returns>true if a new <see cref="T:System.Configuration.Install.InstallContext" /> object should be created for the assembly's installation; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.Configuration.Install.ComponentInstaller">
      <summary>Specifies an installer that copies properties from a component to use at install time.</summary>
    </member>
    <member name="M:System.Configuration.Install.ComponentInstaller.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.ComponentInstaller" /> class.</summary>
    </member>
    <member name="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
      <summary>When overridden in a derived class, copies all the properties that are required at install time from the specified component.</summary>
      <param name="component">The component to copy from. </param>
    </member>
    <member name="M:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)">
      <summary>Determines if the specified installer installs the same object as this installer.</summary>
      <returns>true if this installer and the installer specified by the <paramref name="otherInstaller" /> parameter install the same object; otherwise, false.</returns>
      <param name="otherInstaller">The installer to compare. </param>
    </member>
    <member name="T:System.Configuration.Install.IManagedInstaller">
      <summary>Provides an interface for a managed installer.</summary>
    </member>
    <member name="M:System.Configuration.Install.IManagedInstaller.ManagedInstall(System.String,System.Int32)">
      <summary>Executes a managed installation.</summary>
      <returns>The return code for installutil.exe. A successful installation returns 0. Other values indicate failure.</returns>
      <param name="commandLine">The command line that specifies the installation.</param>
      <param name="hInstall">The handle to the installation.</param>
    </member>
    <member name="T:System.Configuration.Install.InstallContext">
      <summary>Contains information about the current installation.</summary>
    </member>
    <member name="M:System.Configuration.Install.InstallContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallContext" /> class.</summary>
    </member>
    <member name="M:System.Configuration.Install.InstallContext.#ctor(System.String,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallContext" /> class, and creates a log file for the installation.</summary>
      <param name="logFilePath">The path to the log file for this installation, or null if no log file should be created. </param>
      <param name="commandLine">The command-line parameters entered when running the installation program, or null if none were entered. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)">
      <summary>Determines whether the specified command-line parameter is true.</summary>
      <returns>true if the specified parameter is set to "yes", "true", "1", or an empty string (""); otherwise, false.</returns>
      <param name="paramName">The name of the command-line parameter to check. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallContext.LogMessage(System.String)">
      <summary>Writes a message to the console and to the log file for the installation.</summary>
      <param name="message">The message to write. </param>
    </member>
    <member name="P:System.Configuration.Install.InstallContext.Parameters">
      <summary>Gets the command-line parameters that were entered when InstallUtil.exe was run.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringDictionary" /> that represents the command-line parameters that were entered when the installation executable was run.</returns>
    </member>
    <member name="M:System.Configuration.Install.InstallContext.ParseCommandLine(System.String[])">
      <summary>Parses the command-line parameters into a string dictionary.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringDictionary" /> containing the parsed command-line parameters.</returns>
      <param name="args">An array containing the command-line parameters. </param>
    </member>
    <member name="T:System.Configuration.Install.Installer">
      <summary>Provides the foundation for custom installations.</summary>
    </member>
    <member name="M:System.Configuration.Install.Installer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.Installer" /> class.</summary>
    </member>
    <member name="E:System.Configuration.Install.Installer.AfterInstall">
      <summary>Occurs after the <see cref="M:System.Configuration.Install.Installer.Install(System.Collections.IDictionary)" /> methods of all the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property have run.</summary>
    </member>
    <member name="E:System.Configuration.Install.Installer.AfterRollback">
      <summary>Occurs after the installations of all the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property are rolled back.</summary>
    </member>
    <member name="E:System.Configuration.Install.Installer.AfterUninstall">
      <summary>Occurs after all the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property perform their uninstallation operations.</summary>
    </member>
    <member name="E:System.Configuration.Install.Installer.BeforeInstall">
      <summary>Occurs before the <see cref="M:System.Configuration.Install.Installer.Install(System.Collections.IDictionary)" /> method of each installer in the installer collection has run.</summary>
    </member>
    <member name="E:System.Configuration.Install.Installer.BeforeRollback">
      <summary>Occurs before the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property are rolled back.</summary>
    </member>
    <member name="E:System.Configuration.Install.Installer.BeforeUninstall">
      <summary>Occurs before the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property perform their uninstall operations.</summary>
    </member>
    <member name="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, completes the install transaction.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer after all the installers in the collection have run. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="savedState" /> parameter is null.-or- The saved-state <see cref="T:System.Collections.IDictionary" /> might have been corrupted. </exception>
      <exception cref="T:System.Configuration.Install.InstallException">An exception occurred during the <see cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" /> phase of the installation. This exception is ignored and the installation continues. However, the application might not function correctly after the installation is complete. </exception>
    </member>
    <member name="E:System.Configuration.Install.Installer.Committed">
      <summary>Occurs after all the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property have committed their installations.</summary>
    </member>
    <member name="E:System.Configuration.Install.Installer.Committing">
      <summary>Occurs before the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property committ their installations.</summary>
    </member>
    <member name="P:System.Configuration.Install.Installer.Context">
      <summary>Gets or sets information about the current installation.</summary>
      <returns>An <see cref="T:System.Configuration.Install.InstallContext" /> that contains information about the current installation.</returns>
    </member>
    <member name="P:System.Configuration.Install.Installer.HelpText">
      <summary>Gets the help text for all the installers in the installer collection.</summary>
      <returns>The help text for all the installers in the installer collection, including the description of what the installer does and the command line options for the installation executable, such as the InstallUtil.exe utility, that can be passed to and understood by this installer.</returns>
      <exception cref="T:System.NullReferenceException">One of the installers in the installer collection specifies a null reference instead of help text. A likely cause for this exception is that a field to contain the help text is defined but not initialized.</exception>
    </member>
    <member name="M:System.Configuration.Install.Installer.Install(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, performs the installation.</summary>
      <param name="stateSaver">An <see cref="T:System.Collections.IDictionary" /> used to save information needed to perform a commit, rollback, or uninstall operation. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="stateSaver" /> parameter is null. </exception>
      <exception cref="T:System.Exception">An exception occurred in the <see cref="E:System.Configuration.Install.Installer.BeforeInstall" /> event handler of one of the installers in the collection.-or- An exception occurred in the <see cref="E:System.Configuration.Install.Installer.AfterInstall" /> event handler of one of the installers in the collection. </exception>
    </member>
    <member name="P:System.Configuration.Install.Installer.Installers">
      <summary>Gets the collection of installers that this installer contains.</summary>
      <returns>An <see cref="T:System.Configuration.Install.InstallerCollection" /> containing the collection of installers associated with this installer.</returns>
    </member>
    <member name="M:System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)">
      <summary>Raises the <see cref="E:System.Configuration.Install.Installer.AfterInstall" /> event.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer after all the installers contained in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property have completed their installations. </param>
    </member>
    <member name="M:System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)">
      <summary>Raises the <see cref="E:System.Configuration.Install.Installer.AfterRollback" /> event.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer after the installers contained in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property are rolled back. </param>
    </member>
    <member name="M:System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)">
      <summary>Raises the <see cref="E:System.Configuration.Install.Installer.AfterUninstall" /> event.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer after all the installers contained in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property are uninstalled. </param>
    </member>
    <member name="M:System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)">
      <summary>Raises the <see cref="E:System.Configuration.Install.Installer.BeforeInstall" /> event.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer before the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property are installed. This <see cref="T:System.Collections.IDictionary" /> object should be empty at this point. </param>
    </member>
    <member name="M:System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)">
      <summary>Raises the <see cref="E:System.Configuration.Install.Installer.BeforeRollback" /> event.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer before the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property are rolled back. </param>
    </member>
    <member name="M:System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)">
      <summary>Raises the <see cref="E:System.Configuration.Install.Installer.BeforeUninstall" /> event.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer before the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property uninstall their installations. </param>
    </member>
    <member name="M:System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)">
      <summary>Raises the <see cref="E:System.Configuration.Install.Installer.Committed" /> event.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer after all the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property run. </param>
    </member>
    <member name="M:System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)">
      <summary>Raises the <see cref="E:System.Configuration.Install.Installer.Committing" /> event.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer before the installers in the <see cref="P:System.Configuration.Install.Installer.Installers" /> property are committed. </param>
    </member>
    <member name="P:System.Configuration.Install.Installer.Parent">
      <summary>Gets or sets the installer containing the collection that this installer belongs to.</summary>
      <returns>An <see cref="T:System.Configuration.Install.Installer" /> containing the collection that this instance belongs to, or null if this instance does not belong to a collection.</returns>
    </member>
    <member name="M:System.Configuration.Install.Installer.Rollback(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, restores the pre-installation state of the computer.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="savedState" /> parameter is null.-or- The saved-state <see cref="T:System.Collections.IDictionary" /> might have been corrupted. </exception>
      <exception cref="T:System.Configuration.Install.InstallException">An exception occurred during the <see cref="M:System.Configuration.Install.Installer.Rollback(System.Collections.IDictionary)" /> phase of the installation. This exception is ignored and the rollback continues. However, the computer might not be fully reverted to its initial state after the rollback completes. </exception>
    </member>
    <member name="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, removes an installation.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer after the installation was complete. </param>
      <exception cref="T:System.ArgumentException">The saved-state <see cref="T:System.Collections.IDictionary" /> might have been corrupted. </exception>
      <exception cref="T:System.Configuration.Install.InstallException">An exception occurred while uninstalling. This exception is ignored and the uninstall continues. However, the application might not be fully uninstalled after the uninstallation completes. </exception>
    </member>
    <member name="T:System.Configuration.Install.InstallerCollection">
      <summary>Contains a collection of installers to be run during an installation.</summary>
    </member>
    <member name="M:System.Configuration.Install.InstallerCollection.Add(System.Configuration.Install.Installer)">
      <summary>Adds the specified installer to this collection of installers.</summary>
      <returns>The zero-based index of the added installer.</returns>
      <param name="value">An <see cref="T:System.Configuration.Install.Installer" /> that represents the installer to add to the collection. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallerCollection.AddRange(System.Configuration.Install.Installer[])">
      <summary>Adds the specified array of installers to this collection.</summary>
      <param name="value">An array of type <see cref="T:System.Configuration.Install.Installer" /> that represents the installers to add to this collection. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallerCollection.AddRange(System.Configuration.Install.InstallerCollection)">
      <summary>Adds the specified collection of installers to this collection.</summary>
      <param name="value">An <see cref="T:System.Configuration.Install.InstallerCollection" /> that represents the installers to add to this collection. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallerCollection.Contains(System.Configuration.Install.Installer)">
      <summary>Determines whether the specified installer is included in collection.</summary>
      <returns>true if the specified installer is in this collection; otherwise, false.</returns>
      <param name="value">An <see cref="T:System.Configuration.Install.Installer" /> that represents the installer to look for. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallerCollection.CopyTo(System.Configuration.Install.Installer[],System.Int32)">
      <summary>Copies the items from the collection to an array, begining at the specified index.</summary>
      <param name="array">The array to copy to. </param>
      <param name="index">The index of the array at which to paste the collection. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallerCollection.IndexOf(System.Configuration.Install.Installer)">
      <summary>Determines the index of a specified installer in the collection.</summary>
      <returns>The zero-based index of the installer in the collection.</returns>
      <param name="value">The <see cref="T:System.Configuration.Install.Installer" /> to locate in the collection. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallerCollection.Insert(System.Int32,System.Configuration.Install.Installer)">
      <summary>Inserts the specified installer into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which to insert the installer. </param>
      <param name="value">The <see cref="T:System.Configuration.Install.Installer" /> to insert. </param>
    </member>
    <member name="P:System.Configuration.Install.InstallerCollection.Item(System.Int32)">
      <summary>Gets or sets an installer at the specified index.</summary>
      <returns>An <see cref="T:System.Configuration.Install.Installer" /> that represents the installer at the specified index.</returns>
      <param name="index">The zero-based index of the installer to get or set. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallerCollection.OnInsert(System.Int32,System.Object)">
      <summary>Performs additional custom processes before a new installer is inserted into the collection.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="value" />.</param>
      <param name="value">The new value of the installer at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Configuration.Install.InstallerCollection.OnRemove(System.Int32,System.Object)">
      <summary>Performs additional custom processes before an installer is removed from the collection.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> can be found.</param>
      <param name="value">The installer to be removed from <paramref name="index" />. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallerCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Performs additional custom processes before an existing installer is set to a new value.</summary>
      <param name="index">The zero-based index at which to replace <paramref name="oldValue" />.</param>
      <param name="oldValue">The value to replace with <paramref name="newValue." /></param>
      <param name="newValue">The new value of the installer at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Configuration.Install.InstallerCollection.Remove(System.Configuration.Install.Installer)">
      <summary>Removes the specified <see cref="T:System.Configuration.Install.Installer" /> from the collection.</summary>
      <param name="value">An <see cref="T:System.Configuration.Install.Installer" /> that represents the installer to remove. </param>
    </member>
    <member name="T:System.Configuration.Install.InstallEventArgs">
      <summary>Provides data for the events: <see cref="E:System.Configuration.Install.Installer.BeforeInstall" />, <see cref="E:System.Configuration.Install.Installer.AfterInstall" />, <see cref="E:System.Configuration.Install.Installer.Committing" />, <see cref="E:System.Configuration.Install.Installer.Committed" />, <see cref="E:System.Configuration.Install.Installer.BeforeRollback" />, <see cref="E:System.Configuration.Install.Installer.AfterRollback" />, <see cref="E:System.Configuration.Install.Installer.BeforeUninstall" />, <see cref="E:System.Configuration.Install.Installer.AfterUninstall" />.</summary>
    </member>
    <member name="M:System.Configuration.Install.InstallEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallEventArgs" /> class, and leaves the <see cref="P:System.Configuration.Install.InstallEventArgs.SavedState" /> property empty.</summary>
    </member>
    <member name="M:System.Configuration.Install.InstallEventArgs.#ctor(System.Collections.IDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallEventArgs" /> class, and specifies the value for the <see cref="P:System.Configuration.Install.InstallEventArgs.SavedState" /> property.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that represents the current state of the installation. </param>
    </member>
    <member name="P:System.Configuration.Install.InstallEventArgs.SavedState">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> that represents the current state of the installation.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> that represents the current state of the installation.</returns>
    </member>
    <member name="T:System.Configuration.Install.InstallEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Configuration.Install.Installer.BeforeInstall" />, <see cref="E:System.Configuration.Install.Installer.AfterInstall" />, <see cref="E:System.Configuration.Install.Installer.Committing" />, <see cref="E:System.Configuration.Install.Installer.Committed" />, <see cref="E:System.Configuration.Install.Installer.BeforeRollback" />, <see cref="E:System.Configuration.Install.Installer.AfterRollback" />, <see cref="E:System.Configuration.Install.Installer.BeforeUninstall" />, or <see cref="E:System.Configuration.Install.Installer.AfterUninstall" /> event of an <see cref="T:System.Configuration.Install.Installer" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.Configuration.Install.InstallEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Configuration.Install.InstallException">
      <summary>The exception that is thrown when an error occurs during the commit, rollback, or uninstall phase of an installation.</summary>
    </member>
    <member name="M:System.Configuration.Install.InstallException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallException" /> class.</summary>
    </member>
    <member name="M:System.Configuration.Install.InstallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallException" /> class, and specifies the message to display to the user.</summary>
      <param name="message">The message to display to the user. </param>
    </member>
    <member name="M:System.Configuration.Install.InstallException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallException" /> class, and specifies the message to display to the user, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message to display to the user. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Configuration.Install.ManagedInstallerClass">
      <summary>Represents a managed install.</summary>
    </member>
    <member name="M:System.Configuration.Install.ManagedInstallerClass.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.ManagedInstallerClass" /> class. </summary>
    </member>
    <member name="M:System.Configuration.Install.ManagedInstallerClass.InstallHelper(System.String[])">
      <summary>Handles the functionality of the Installutil.exe (Installer Tool).</summary>
      <param name="args">The arguments passed to the Installer Tool.</param>
    </member>
    <member name="M:System.Configuration.Install.ManagedInstallerClass.System#Configuration#Install#IManagedInstaller#ManagedInstall(System.String,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Configuration.Install.IManagedInstaller.ManagedInstall(System.String,System.Int32)" />.</summary>
      <returns>The return code for installutil.exe. A successful installation returns 0. Other values indicate failure.</returns>
      <param name="argString">The command line to install.</param>
      <param name="hInstall">The handle to the installation.</param>
    </member>
    <member name="T:System.Configuration.Install.TransactedInstaller">
      <summary>Defines an installer that either succeeds completely or fails and leaves the computer in its initial state.</summary>
    </member>
    <member name="M:System.Configuration.Install.TransactedInstaller.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.TransactedInstaller" /> class.</summary>
    </member>
    <member name="M:System.Configuration.Install.TransactedInstaller.Install(System.Collections.IDictionary)">
      <summary>Performs the installation.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> in which this method saves information needed to perform a commit, rollback, or uninstall operation. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="savedState" /> parameter is null. </exception>
      <exception cref="T:System.Exception">The installation failed, and is being rolled back. </exception>
    </member>
    <member name="M:System.Configuration.Install.TransactedInstaller.Uninstall(System.Collections.IDictionary)">
      <summary>Removes an installation.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the state of the computer after the installation completed. </param>
    </member>
    <member name="T:System.Configuration.Install.UninstallAction">
      <summary>Specifies what an installer should do during an uninstallation.</summary>
    </member>
    <member name="F:System.Configuration.Install.UninstallAction.Remove">
      <summary>Removes the resource the installer created.</summary>
    </member>
    <member name="F:System.Configuration.Install.UninstallAction.NoAction">
      <summary>Leaves the resource created by the installer as is.</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogInstaller">
      <summary>Allows you to install and configure an event log that your application reads from or writes to when running. </summary>
    </member>
    <member name="M:System.Diagnostics.EventLogInstaller.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogInstaller" /> class. </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogInstaller.CategoryCount">
      <summary>Gets or sets the number of categories in the category resource file.</summary>
      <returns>The number of categories in the category resource file. The default value is zero.</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile">
      <summary>Gets or sets the path of the resource file that contains category strings for the source.</summary>
      <returns>The path of the category resource file. The default is an empty string ("").</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
      <summary>Copies the property values of an <see cref="T:System.Diagnostics.EventLog" /> component that are required at installation time for an event log.</summary>
      <param name="component">An <see cref="T:System.ComponentModel.IComponent" /> to use as a template for the <see cref="T:System.Diagnostics.EventLogInstaller" />. </param>
      <exception cref="T:System.ArgumentException">The specified component is not an <see cref="T:System.Diagnostics.EventLog" />.-or- The <see cref="P:System.Diagnostics.EventLog.Log" /> or <see cref="P:System.Diagnostics.EventLog.Source" /> property of the specified component is either null or empty. </exception>
    </member>
    <member name="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)">
      <summary>Performs the installation and writes event log information to the registry.</summary>
      <param name="stateSaver">An <see cref="T:System.Collections.IDictionary" /> used to save information needed to perform a rollback or uninstall operation. </param>
      <exception cref="T:System.PlatformNotSupportedException">The platform the installer is trying to use is not Windows NT 4.0 or later. </exception>
      <exception cref="T:System.ArgumentException">The name specified in the <see cref="P:System.Diagnostics.EventLogInstaller.Source" />  property is already registered for a different event log.</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)">
      <summary>Determines whether an installer and another specified installer refer to the same source.</summary>
      <returns>true if this installer and the installer specified by the <paramref name="otherInstaller" /> parameter would install or uninstall the same source; otherwise, false.</returns>
      <param name="otherInstaller">The installer to compare. </param>
    </member>
    <member name="P:System.Diagnostics.EventLogInstaller.Log">
      <summary>Gets or sets the name of the log to set the source to.</summary>
      <returns>The name of the log. This can be Application, System, or a custom log name. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogInstaller.MessageResourceFile">
      <summary>Gets or sets the path of the resource file that contains message formatting strings for the source.</summary>
      <returns>The path of the message resource file. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile">
      <summary>Gets or sets the path of the resource file that contains message parameter strings for the source.</summary>
      <returns>The path of the message parameter resource file. The default is an empty string ("").</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)">
      <summary>Restores the computer to the state it was in before the installation by rolling back the event log information that the installation procedure wrote to the registry.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer. </param>
    </member>
    <member name="P:System.Diagnostics.EventLogInstaller.Source">
      <summary>Gets or sets the source name to register with the log.</summary>
      <returns>The name to register with the event log as a source of entries. The default is an empty string ("").</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)">
      <summary>Removes an installation by removing event log information from the registry.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer. </param>
    </member>
    <member name="P:System.Diagnostics.EventLogInstaller.UninstallAction">
      <summary>Gets or sets a value that indicates whether the Installutil.exe (Installer Tool) should remove the event log or leave it in its installed state at uninstall time.</summary>
      <returns>One of the <see cref="T:System.Configuration.Install.UninstallAction" /> values that indicates what state to leave the event log in when the <see cref="T:System.Diagnostics.EventLog" /> is uninstalled. The default is Remove.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="P:System.Diagnostics.EventLogInstaller.UninstallAction" /> contains an invalid value. The only valid values for this property are Remove and NoAction.</exception>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterInstaller">
      <summary>Specifies an installer for the <see cref="T:System.Diagnostics.PerformanceCounter" /> component.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterInstaller.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterInstaller" /> class. </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterInstaller.CategoryHelp">
      <summary>Gets or sets the descriptive message for the performance counter.</summary>
      <returns>The descriptive message for the performance counter.</returns>
      <exception cref="T:System.ArgumentNullException">The value is set to null. </exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterInstaller.CategoryName">
      <summary>Gets or sets the performance category name for the performance counter.</summary>
      <returns>The performance category name for the performance counter.</returns>
      <exception cref="T:System.ArgumentNullException">The value is set to null. </exception>
      <exception cref="T:System.ArgumentException">The value is not a valid category name.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterInstaller.CategoryType">
      <summary>Gets or sets the performance counter category type.</summary>
      <returns>One of the <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> values. </returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value is not a <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" />.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
      <summary>Copies all the properties from the specified component that are required at install time for a performance counter.</summary>
      <param name="component">The component to copy from. </param>
      <exception cref="T:System.ArgumentException">The specified component is not a <see cref="T:System.Diagnostics.PerformanceCounter" />.-or- The specified <see cref="T:System.Diagnostics.PerformanceCounter" /> is incomplete.-or- Multiple counters in different categories are trying to be installed. </exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterInstaller.Counters">
      <summary>Gets a collection of data that pertains to the counters to install.</summary>
      <returns>A <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> that contains the names, help messages, and types of the counters to install.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterInstaller.Install(System.Collections.IDictionary)">
      <summary>Performs the installation.</summary>
      <param name="stateSaver">An <see cref="T:System.Collections.IDictionary" /> that is used to save the information needed to perform a commit, rollback, or uninstall operation. </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterInstaller.Rollback(System.Collections.IDictionary)">
      <summary>Restores the computer to the state it was in before the installation.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer. </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterInstaller.Uninstall(System.Collections.IDictionary)">
      <summary>Removes an installation.</summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the post-installation state of the computer. </param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterInstaller.UninstallAction">
      <summary>Gets a value that indicates whether the performance counter should be removed at uninstall time.</summary>
      <returns>One of the <see cref="T:System.Configuration.Install.UninstallAction" /> values. The default is Remove.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value is not an <see cref="T:System.Configuration.Install.UninstallAction" />.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Data.DataSetExtensions.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.DataSetExtensions</name>
  </assembly>
  <members>
    <member name="T:System.Data.DataRowComparer">
      <summary>Returns a singleton instance of the <see cref="T:System.Data.DataRowComparer`1" /> class.</summary>
    </member>
    <member name="P:System.Data.DataRowComparer.Default">
      <summary>Gets a singleton instance of <see cref="T:System.Data.DataRowComparer`1" />. This property is read-only.</summary>
      <returns>An instance of a <see cref="T:System.Data.DataRowComparer`1" />.</returns>
    </member>
    <member name="T:System.Data.DataRowComparer`1">
      <summary>Compares two <see cref="T:System.Data.DataRow" /> objects for equivalence by using value-based comparison.</summary>
      <typeparam name="TRow">The type of objects to be compared, typically <see cref="T:System.Data.DataRow" />.</typeparam>
    </member>
    <member name="P:System.Data.DataRowComparer`1.Default">
      <summary>Gets a singleton instance of <see cref="T:System.Data.DataRowComparer`1" />. This property is read-only.</summary>
      <returns>An instance of a <see cref="T:System.Data.DataRowComparer`1" />.</returns>
    </member>
    <member name="M:System.Data.DataRowComparer`1.Equals(`0,`0)">
      <summary>Compares two <see cref="T:System.Data.DataRow" /> objects by using a column-by-column, value-based comparison.</summary>
      <returns>true if the two <see cref="T:System.Data.DataRow" /> objects have ordered sets of column values that are equal; otherwise, false.</returns>
      <param name="leftRow">The first <see cref="T:System.Data.DataRow" /> object to compare.</param>
      <param name="rightRow">The second <see cref="T:System.Data.DataRow" /> object to compare.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the source <see cref="T:System.Data.DataRow" /> objects are null.</exception>
    </member>
    <member name="M:System.Data.DataRowComparer`1.GetHashCode(`0)">
      <summary>Returns a hash code for the specified <see cref="T:System.Data.DataRow" /> object.</summary>
      <returns>An <see cref="T:System.Int32" /> value representing the hash code of the row.</returns>
      <param name="row">The <see cref="T:System.Data.DataRow" /> to compute the hash code from.</param>
      <exception cref="T:System.ArgumentException">The source <see cref="T:System.Data.DataRow" /> objects does not belong to a <see cref="T:System.Data.DataTable" />.</exception>
      <exception cref="T:System.ArgumentNullException">The source <see cref="T:System.Data.DataRow" /> objects is null.</exception>
    </member>
    <member name="T:System.Data.DataRowExtensions">
      <summary>Defines the extension methods to the <see cref="T:System.Data.DataRow" /> class. This is a static class.   </summary>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)">
      <summary>Provides strongly-typed access to each of the column values in the specified row. The <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)" /> method also supports nullable types. </summary>
      <returns>The value, of type <paramref name="T" />, of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="column" />.</returns>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the this instance for the extension method.</param>
      <param name="column">The input <see cref="T:System.Data.DataColumn" /> object that specifies the column to return the value of.</param>
      <typeparam name="T">A generic parameter that specifies the return type of the column.</typeparam>
      <exception cref="T:System.InvalidCastException">The value type of the underlying column could not be cast to the type specified by the generic parameter, <paramref name="T" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">The column specified by <paramref name="column" /> does not occur in the <see cref="T:System.Data.DataTable" /> that the <see cref="T:System.Data.DataRow" /> is a part of.</exception>
      <exception cref="T:System.NullReferenceException">A null value was assigned to a non-nullable type.</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>Provides strongly-typed access to each of the column values in the specified row. The <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)" /> method also supports nullable types. </summary>
      <returns>The value, of type <paramref name="T" />, of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="column" /> and <paramref name="version" />.</returns>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the this instance for the extension method.</param>
      <param name="column">The input <see cref="T:System.Data.DataColumn" /> object that specifies the column to return the value of.</param>
      <param name="version">A <see cref="T:System.Data.DataRowVersion" /> enumeration that specifies the version of the column value to return, such as Current or Original version.</param>
      <typeparam name="T">A generic parameter that specifies the return type of the column.</typeparam>
      <exception cref="T:System.InvalidCastException">The value type of the underlying column could not be cast to the type specified by the generic parameter, <paramref name="T" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">The column specified by <paramref name="column" /> does not exist in the <see cref="T:System.Data.DataTable" /> that the <see cref="T:System.Data.DataRow" /> is a part of.</exception>
      <exception cref="T:System.NullReferenceException">A null value was assigned to a non-nullable type.</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)">
      <summary>Provides strongly-typed access to each of the column values in the specified row. The <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)" /> method also supports nullable types. </summary>
      <returns>The value, of type <paramref name="T" />, of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="columnIndex" />.</returns>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the this instance for the extension method.</param>
      <param name="columnIndex">The column index.</param>
      <typeparam name="T">A generic parameter that specifies the return type of the column.</typeparam>
      <exception cref="T:System.InvalidCastException">The value type of the underlying column could not be cast to the type specified by the generic parameter, <paramref name="T" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">The column specified by <paramref name="ordinal" /> does not exist in the <see cref="T:System.Data.DataTable" /> that the <see cref="T:System.Data.DataRow" /> is a part of.</exception>
      <exception cref="T:System.NullReferenceException">A null value was assigned to a non-nullable type.</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
      <summary>Provides strongly-typed access to each of the column values in the specified row. The <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)" /> method also supports nullable types. </summary>
      <returns>The value, of type <paramref name="T" />, of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="ordinal" /> and <paramref name="version" />.</returns>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the this instance for the extension method.</param>
      <param name="columnIndex">The zero-based ordinal of the column to return the value of.</param>
      <param name="version">A <see cref="T:System.Data.DataRowVersion" /> enumeration that specifies the version of the column value to return, such as Current or Original version.</param>
      <typeparam name="T">A generic parameter that specifies the return type of the column.</typeparam>
      <exception cref="T:System.InvalidCastException">The value type of the underlying column could not be cast to the type specified by the generic parameter, <paramref name="T" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">The column specified by <paramref name="ordinal" /> does not exist in the <see cref="T:System.Data.DataTable" /> that the <see cref="T:System.Data.DataRow" /> is a part of.</exception>
      <exception cref="T:System.NullReferenceException">A null value was assigned to a non-nullable type.</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)">
      <summary>Provides strongly-typed access to each of the column values in the specified row. The <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)" /> method also supports nullable types. </summary>
      <returns>The value, of type <paramref name="T" />, of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="columnName" />.</returns>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the this instance for the extension method.</param>
      <param name="columnName">The name of the column to return the value of.</param>
      <typeparam name="T">A generic parameter that specifies the return type of the column.</typeparam>
      <exception cref="T:System.InvalidCastException">The value type of the underlying column could not be cast to the type specified by the generic parameter, <paramref name="T" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">The column specified by <paramref name="columnName" /> does not occur in the <see cref="T:System.Data.DataTable" /> that the <see cref="T:System.Data.DataRow" /> is a part of.</exception>
      <exception cref="T:System.NullReferenceException">A null value was assigned to a non-nullable type.</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
      <summary>Provides strongly-typed access to each of the column values in the specified row. The <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)" /> method also supports nullable types. </summary>
      <returns>The value, of type <paramref name="T" />, of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="columnName" /> and <paramref name="version" />.</returns>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the this instance for the extension method.</param>
      <param name="columnName">The name of the column to return the value of.</param>
      <param name="version">A <see cref="T:System.Data.DataRowVersion" /> enumeration that specifies the version of the column value to return, such as Current or Original version.</param>
      <typeparam name="T">A generic parameter that specifies the return type of the column.</typeparam>
      <exception cref="T:System.InvalidCastException">The value type of the underlying column could not be cast to the type specified by the generic parameter, <paramref name="T" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">The column specified by <paramref name="columnName" /> does not exist in the <see cref="T:System.Data.DataTable" /> that the <see cref="T:System.Data.DataRow" /> is a part of.</exception>
      <exception cref="T:System.NullReferenceException">A null value was assigned to a non-nullable type.</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)">
      <summary>Sets a new value for the specified column in the <see cref="T:System.Data.DataRow" />. The <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)" /> method also supports nullable types. </summary>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the this instance for the extension method.</param>
      <param name="column">The input <see cref="T:System.Data.DataColumn" /> specifies which row value to retrieve.</param>
      <param name="value">The new row value for the specified column, of type <paramref name="T" />.</param>
      <typeparam name="T">A generic parameter that specifies the value type of the column.</typeparam>
      <exception cref="T:System.ArgumentException">The column specified by <paramref name="column" /> cannot be found.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="column" /> is null.</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">Occurs when attempting to set a value on a deleted row.</exception>
      <exception cref="T:System.InvalidCastException">The value type of the underlying column could not be cast to the type specified by the generic parameter, <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)">
      <summary>Sets a new value for the specified column in the <see cref="T:System.Data.DataRow" /> the method is called on. The <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)" /> method also supports nullable types. </summary>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the this instance for the extension method.</param>
      <param name="columnIndex">The zero-based ordinal of the column to set the value of.</param>
      <param name="value">The new row value for the specified column, of type <paramref name="T" />.</param>
      <typeparam name="T">A generic parameter that specifies the value type of the column.</typeparam>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">Occurs when attempting to set a value on a deleted row.</exception>
      <exception cref="T:System.IndexOutOfRangeException">The <paramref name="ordinal" /> argument is out of range.</exception>
      <exception cref="T:System.InvalidCastException">The value type of the underlying column could be not cast to the type specified by the generic parameter, <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)">
      <summary>Sets a new value for the specified column in the <see cref="T:System.Data.DataRow" />. The <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)" /> method also supports nullable types. </summary>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the this instance for the extension method.</param>
      <param name="columnName">The name of the column to set the value of.</param>
      <param name="value">The new row value for the specified column, of type <paramref name="T" />.</param>
      <typeparam name="T">A generic parameter that specifies the value type of the column.</typeparam>
      <exception cref="T:System.ArgumentException">The column specified by <paramref name="columnName" /> cannot be found.</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">Occurs when attempting to set a value on a deleted row.</exception>
      <exception cref="T:System.InvalidCastException">The value type of the underlying column could not be cast to the type specified by the generic parameter, <paramref name="T" />.</exception>
    </member>
    <member name="T:System.Data.DataTableExtensions">
      <summary>Defines the extension methods to the <see cref="T:System.Data.DataTable" /> class. <see cref="T:System.Data.DataTableExtensions" /> is a static class.  </summary>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)">
      <summary>Creates and returns a LINQ-enabled <see cref="T:System.Data.DataView" /> object.</summary>
      <returns>A LINQ-enabled <see cref="T:System.Data.DataView" /> object.</returns>
      <param name="table">The source <see cref="T:System.Data.DataTable" /> from which the LINQ-enabled <see cref="T:System.Data.DataView" /> is created.</param>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})">
      <summary>Creates and returns a LINQ-enabled <see cref="T:System.Data.DataView" /> object representing the LINQ to DataSet query.</summary>
      <returns>A LINQ-enabled <see cref="T:System.Data.DataView" /> object.</returns>
      <param name="source">The source LINQ to DataSet query from which 